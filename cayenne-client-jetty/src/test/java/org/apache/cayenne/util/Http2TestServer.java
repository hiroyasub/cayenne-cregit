begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * https://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http2
operator|.
name|server
operator|.
name|HTTP2ServerConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|HttpConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ServerConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|QueuedThreadPool
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_class
specifier|public
class|class
name|Http2TestServer
block|{
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|Server
name|server
decl_stmt|;
specifier|private
specifier|final
name|ServerConnector
name|connector
decl_stmt|;
specifier|public
specifier|static
name|TestServerBuilder
name|servlet
parameter_list|(
name|HttpServlet
name|servlet
parameter_list|)
block|{
return|return
operator|new
name|TestServerBuilder
argument_list|(
name|servlet
argument_list|,
literal|"/"
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TestServerBuilder
name|handler
parameter_list|(
name|BiConsumer
argument_list|<
name|HttpServletRequest
argument_list|,
name|HttpServletResponse
argument_list|>
name|handler
parameter_list|)
block|{
name|HttpServlet
name|servlet
init|=
operator|new
name|HttpServlet
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|7741340028518626628L
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|service
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
block|{
name|handler
operator|.
name|accept
argument_list|(
name|req
argument_list|,
name|resp
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
return|return
name|servlet
argument_list|(
name|servlet
argument_list|)
return|;
block|}
specifier|public
name|Http2TestServer
parameter_list|(
name|HttpServlet
name|servlet
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|QueuedThreadPool
name|serverExecutor
init|=
operator|new
name|QueuedThreadPool
argument_list|()
decl_stmt|;
name|serverExecutor
operator|.
name|setName
argument_list|(
literal|"server"
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
name|serverExecutor
argument_list|)
expr_stmt|;
name|connector
operator|=
operator|new
name|ServerConnector
argument_list|(
name|server
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
operator|new
name|HTTP2ServerConnectionFactory
argument_list|(
operator|new
name|HttpConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|server
operator|.
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|(
name|server
argument_list|,
literal|"/"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
name|servlet
argument_list|)
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|void
name|start
parameter_list|()
block|{
try|try
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|getLocalPort
parameter_list|()
block|{
return|return
name|connector
operator|.
name|getLocalPort
argument_list|()
return|;
block|}
specifier|public
name|String
name|getBasePath
parameter_list|()
block|{
return|return
literal|"http://localhost:"
operator|+
name|getLocalPort
argument_list|()
operator|+
name|path
return|;
block|}
specifier|public
specifier|static
class|class
name|TestServerBuilder
block|{
specifier|private
specifier|final
name|HttpServlet
name|servlet
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
specifier|private
name|TestServerBuilder
parameter_list|(
name|HttpServlet
name|servlet
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|servlet
operator|=
name|servlet
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
specifier|public
name|TestServerBuilder
name|path
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|new
name|TestServerBuilder
argument_list|(
name|this
operator|.
name|servlet
argument_list|,
name|path
argument_list|,
name|this
operator|.
name|port
argument_list|)
return|;
block|}
specifier|public
name|TestServerBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
return|return
operator|new
name|TestServerBuilder
argument_list|(
name|this
operator|.
name|servlet
argument_list|,
name|this
operator|.
name|path
argument_list|,
name|port
argument_list|)
return|;
block|}
specifier|public
name|Http2TestServer
name|start
parameter_list|()
block|{
name|Http2TestServer
name|http2Server
init|=
operator|new
name|Http2TestServer
argument_list|(
name|servlet
argument_list|,
name|path
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|http2Server
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|http2Server
return|;
block|}
block|}
block|}
end_class

end_unit

