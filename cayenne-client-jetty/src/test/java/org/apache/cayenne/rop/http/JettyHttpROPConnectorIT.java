begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|rop
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|rop
operator|.
name|ROPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Http2TestServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http2
operator|.
name|client
operator|.
name|HTTP2Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http2
operator|.
name|client
operator|.
name|http
operator|.
name|HttpClientTransportOverHTTP2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|JettyHttpROPConnectorIT
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MESSAGE
init|=
literal|"test message"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SEND_MESSAGE_SESSION
init|=
literal|"send message session"
decl_stmt|;
specifier|private
specifier|static
name|JettyHttpROPConnector
name|ropConnector
decl_stmt|;
specifier|private
specifier|static
name|Http2TestServer
name|server
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start the test server
class|class
name|TestServlet
extends|extends
name|HttpServlet
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doPost
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|String
name|sharedSessionName
init|=
name|req
operator|.
name|getParameter
argument_list|(
name|ROPConstants
operator|.
name|SESSION_NAME_PARAMETER
argument_list|)
decl_stmt|;
if|if
condition|(
name|sharedSessionName
operator|==
literal|null
condition|)
block|{
name|resp
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|sharedSessionName
operator|.
name|equals
argument_list|(
name|SEND_MESSAGE_SESSION
argument_list|)
condition|)
block|{
name|resp
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|toByteArray
argument_list|(
name|req
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resp
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
operator|(
name|MESSAGE
operator|+
literal|" "
operator|+
name|sharedSessionName
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|server
operator|=
name|Http2TestServer
operator|.
name|servlet
argument_list|(
operator|new
name|TestServlet
argument_list|()
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|ropConnector
operator|=
operator|new
name|JettyHttpROPConnector
argument_list|(
name|initJettyHttp2Client
argument_list|()
argument_list|,
name|server
operator|.
name|getBasePath
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|HttpClient
name|initJettyHttp2Client
parameter_list|()
block|{
try|try
block|{
name|HttpClientTransportOverHTTP2
name|http2
init|=
operator|new
name|HttpClientTransportOverHTTP2
argument_list|(
operator|new
name|HTTP2Client
argument_list|()
argument_list|)
decl_stmt|;
name|http2
operator|.
name|setUseALPN
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|(
name|http2
argument_list|,
operator|new
name|SslContextFactory
argument_list|()
argument_list|)
decl_stmt|;
name|httpClient
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|httpClient
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Exception while starting Jetty HttpClient over HTTP/2."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownClass
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|ropConnector
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEstablishSession
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|message
init|=
name|read
argument_list|(
name|ropConnector
operator|.
name|establishSession
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MESSAGE
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEstablishSharedSession
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|sharedSessionName
init|=
literal|"test session"
decl_stmt|;
name|String
name|message
init|=
name|read
argument_list|(
name|ropConnector
operator|.
name|establishSharedSession
argument_list|(
name|sharedSessionName
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MESSAGE
operator|+
literal|" "
operator|+
name|sharedSessionName
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sendMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|ropConnector
operator|.
name|establishSharedSession
argument_list|(
name|SEND_MESSAGE_SESSION
argument_list|)
expr_stmt|;
name|byte
index|[]
name|message
init|=
name|toByteArray
argument_list|(
name|ropConnector
operator|.
name|sendMessage
argument_list|(
name|MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|read
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|BufferedReader
name|buffer
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|input
argument_list|)
argument_list|)
init|)
block|{
return|return
name|buffer
operator|.
name|lines
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|toByteArray
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|)
block|{
name|int
name|reads
init|=
name|inputStream
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|reads
operator|!=
operator|-
literal|1
condition|)
block|{
name|baos
operator|.
name|write
argument_list|(
name|reads
argument_list|)
expr_stmt|;
name|reads
operator|=
name|inputStream
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

