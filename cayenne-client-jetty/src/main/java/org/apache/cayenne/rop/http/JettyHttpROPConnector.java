begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * https://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|rop
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|ClientConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|RemoteSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|rop
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|api
operator|.
name|ContentResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|api
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|api
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|util
operator|.
name|BytesContentProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|util
operator|.
name|InputStreamResponseListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * This implementation of ROPConnector uses Jetty HTTP Client.  * Depends on {@link ClientConnection} provider it uses HTTP/1.1 or HTTP/2 protocol.  *<p>  * {@link JettyHttpClientConnectionProvider} for HTTP/1.1 protocol.  * {@link JettyHttp2ClientConnectionProvider} for HTTP/2 protocol.  */
end_comment

begin_class
specifier|public
class|class
name|JettyHttpROPConnector
implements|implements
name|ROPConnector
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JettyHttpROPConnector
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SESSION_COOKIE_NAME
init|=
literal|"JSESSIONID"
decl_stmt|;
specifier|protected
name|HttpClient
name|httpClient
decl_stmt|;
specifier|protected
name|HttpClientConnection
name|clientConnection
decl_stmt|;
specifier|protected
name|String
name|url
decl_stmt|;
specifier|protected
name|String
name|username
decl_stmt|;
specifier|protected
name|Long
name|readTimeout
init|=
literal|5l
decl_stmt|;
specifier|public
name|JettyHttpROPConnector
parameter_list|(
name|HttpClient
name|httpClient
parameter_list|,
name|String
name|url
parameter_list|,
name|String
name|username
parameter_list|)
block|{
if|if
condition|(
name|httpClient
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"org.eclipse.jetty.client.HttpClient should be provided "
operator|+
literal|"for this ROPConnector implementation."
argument_list|)
throw|;
block|}
name|this
operator|.
name|httpClient
operator|=
name|httpClient
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
block|}
specifier|public
name|void
name|setClientConnection
parameter_list|(
name|HttpClientConnection
name|clientConnection
parameter_list|)
block|{
name|this
operator|.
name|clientConnection
operator|=
name|clientConnection
expr_stmt|;
block|}
specifier|public
name|void
name|setReadTimeout
parameter_list|(
name|Long
name|readTimeout
parameter_list|)
block|{
name|this
operator|.
name|readTimeout
operator|=
name|readTimeout
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|establishSession
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|ROPUtil
operator|.
name|getLogConnect
argument_list|(
name|url
argument_list|,
name|username
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ContentResponse
name|response
init|=
name|httpClient
operator|.
name|newRequest
argument_list|(
name|url
argument_list|)
operator|.
name|method
argument_list|(
name|HttpMethod
operator|.
name|POST
argument_list|)
operator|.
name|param
argument_list|(
name|ROPConstants
operator|.
name|OPERATION_PARAMETER
argument_list|,
name|ROPConstants
operator|.
name|ESTABLISH_SESSION_OPERATION
argument_list|)
operator|.
name|timeout
argument_list|(
name|readTimeout
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|send
argument_list|()
decl_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|response
operator|.
name|getContent
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while establishing session"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|establishSharedSession
parameter_list|(
name|String
name|sharedSessionName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|ROPUtil
operator|.
name|getLogConnect
argument_list|(
name|url
argument_list|,
name|username
argument_list|,
literal|true
argument_list|,
name|sharedSessionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ContentResponse
name|response
init|=
name|httpClient
operator|.
name|newRequest
argument_list|(
name|url
argument_list|)
operator|.
name|method
argument_list|(
name|HttpMethod
operator|.
name|POST
argument_list|)
operator|.
name|param
argument_list|(
name|ROPConstants
operator|.
name|OPERATION_PARAMETER
argument_list|,
name|ROPConstants
operator|.
name|ESTABLISH_SHARED_SESSION_OPERATION
argument_list|)
operator|.
name|param
argument_list|(
name|ROPConstants
operator|.
name|SESSION_NAME_PARAMETER
argument_list|,
name|sharedSessionName
argument_list|)
operator|.
name|timeout
argument_list|(
name|readTimeout
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|send
argument_list|()
decl_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|response
operator|.
name|getContent
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while establishing shared session: "
operator|+
name|sharedSessionName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|sendMessage
parameter_list|(
name|byte
index|[]
name|message
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Request
name|request
init|=
name|httpClient
operator|.
name|newRequest
argument_list|(
name|url
argument_list|)
operator|.
name|method
argument_list|(
name|HttpMethod
operator|.
name|POST
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeader
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"application/octet-stream"
argument_list|)
operator|.
name|header
argument_list|(
name|HttpHeader
operator|.
name|ACCEPT_ENCODING
argument_list|,
literal|"gzip"
argument_list|)
operator|.
name|content
argument_list|(
operator|new
name|BytesContentProvider
argument_list|(
name|message
argument_list|)
argument_list|)
decl_stmt|;
name|addSessionCookie
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|InputStreamResponseListener
name|listener
init|=
operator|new
name|InputStreamResponseListener
argument_list|()
decl_stmt|;
name|request
operator|.
name|send
argument_list|(
name|listener
argument_list|)
expr_stmt|;
comment|/**              * Waits for the given timeout for the response to be available, then returns it.              * The wait ends as soon as all the HTTP headers have been received, without waiting for the content.              */
name|Response
name|response
init|=
name|listener
operator|.
name|get
argument_list|(
name|readTimeout
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|>=
literal|300
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Did not receive successful HTTP response: status code = "
operator|+
name|response
operator|.
name|getStatus
argument_list|()
operator|+
literal|", status message = ["
operator|+
name|response
operator|.
name|getReason
argument_list|()
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|listener
operator|.
name|getInputStream
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while sending message"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|httpClient
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|ROPUtil
operator|.
name|getLogDisconnect
argument_list|(
name|url
argument_list|,
name|username
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|httpClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Exception while stopping Jetty HttpClient"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|void
name|addSessionCookie
parameter_list|(
name|Request
name|request
parameter_list|)
block|{
if|if
condition|(
name|clientConnection
operator|!=
literal|null
condition|)
block|{
name|RemoteSession
name|session
init|=
name|clientConnection
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
operator|&&
name|session
operator|.
name|getSessionId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|header
argument_list|(
name|HttpHeader
operator|.
name|COOKIE
argument_list|,
name|SESSION_COOKIE_NAME
operator|+
literal|"="
operator|+
name|session
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

