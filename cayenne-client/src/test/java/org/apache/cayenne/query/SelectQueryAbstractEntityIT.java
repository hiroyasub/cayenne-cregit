begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|mt
operator|.
name|MtTable1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|mt
operator|.
name|MtTable1Subclass1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|mt
operator|.
name|MtTable1Subclass2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|MULTI_TIER_PROJECT
argument_list|)
specifier|public
class|class
name|SelectQueryAbstractEntityIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|ObjectContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
specifier|private
name|TableHelper
name|mtTable
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|mtTable
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"MT_TABLE1"
argument_list|)
expr_stmt|;
name|mtTable
operator|.
name|setColumns
argument_list|(
literal|"TABLE1_ID"
argument_list|,
literal|"GLOBAL_ATTRIBUTE1"
argument_list|,
literal|"SERVER_ATTRIBUTE1"
argument_list|,
literal|"SUBCLASS_ATTRIBUTE1"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createDataSet
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|mtTable
operator|.
name|insert
argument_list|(
name|i
argument_list|,
literal|"sub2"
argument_list|,
literal|"sub2_"
operator|+
name|i
argument_list|,
literal|"sub2attr"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|11
init|;
name|i
operator|<=
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|mtTable
operator|.
name|insert
argument_list|(
name|i
argument_list|,
literal|"sub1"
argument_list|,
literal|"sub1_"
operator|+
name|i
argument_list|,
literal|"sub1attr"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSublclassEntitySelect
parameter_list|()
throws|throws
name|Exception
block|{
name|createDataSet
argument_list|()
expr_stmt|;
name|ObjectSelect
argument_list|<
name|MtTable1Subclass1
argument_list|>
name|query
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|MtTable1Subclass1
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MtTable1Subclass1
argument_list|>
name|sub1List
init|=
name|context
operator|.
name|select
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|ObjectSelect
argument_list|<
name|MtTable1Subclass2
argument_list|>
name|query2
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|MtTable1Subclass2
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MtTable1Subclass2
argument_list|>
name|sub2List
init|=
name|context
operator|.
name|select
argument_list|(
name|query2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sub1List
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|sub2List
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test1AbstractEntitySelect
parameter_list|()
throws|throws
name|Exception
block|{
name|createDataSet
argument_list|()
expr_stmt|;
name|ObjectSelect
argument_list|<
name|MtTable1
argument_list|>
name|query
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|MtTable1
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MtTable1
argument_list|>
name|list
init|=
name|context
operator|.
name|select
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|list
argument_list|)
expr_stmt|;
for|for
control|(
name|MtTable1
name|sub
range|:
name|list
control|)
block|{
if|if
condition|(
name|sub
operator|instanceof
name|MtTable1Subclass1
condition|)
block|{
name|assertNotNull
argument_list|(
operator|(
operator|(
name|MtTable1Subclass1
operator|)
name|sub
operator|)
operator|.
name|getSubclass1Attribute1
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|test2AbstractEntitySelect
parameter_list|()
throws|throws
name|Exception
block|{
name|createDataSet
argument_list|()
expr_stmt|;
name|ObjectSelect
argument_list|<
name|MtTable1
argument_list|>
name|query
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|MtTable1
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|MtTable1
argument_list|>
name|list
init|=
name|context
operator|.
name|select
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|list
argument_list|)
expr_stmt|;
for|for
control|(
name|MtTable1
name|sub
range|:
name|list
control|)
block|{
if|if
condition|(
name|sub
operator|instanceof
name|MtTable1Subclass2
condition|)
block|{
name|assertNotNull
argument_list|(
operator|(
operator|(
name|MtTable1Subclass2
operator|)
name|sub
operator|)
operator|.
name|getSubclass2Attribute1
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

