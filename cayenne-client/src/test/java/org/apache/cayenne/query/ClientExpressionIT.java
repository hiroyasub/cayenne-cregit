begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|mt
operator|.
name|ClientMtTable1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|mt
operator|.
name|ClientMtTable2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|client
operator|.
name|ClientCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|ClientCase
operator|.
name|MULTI_TIER_PROJECT
argument_list|)
specifier|public
class|class
name|ClientExpressionIT
extends|extends
name|ClientCase
block|{
annotation|@
name|Inject
specifier|private
name|CayenneContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
specifier|private
name|TableHelper
name|tMtTable1
decl_stmt|;
specifier|private
name|TableHelper
name|tMtTable2
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUpAfterInjection
parameter_list|()
throws|throws
name|Exception
block|{
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"MT_TABLE2"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"MT_TABLE1"
argument_list|)
expr_stmt|;
name|tMtTable1
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"MT_TABLE1"
argument_list|)
expr_stmt|;
name|tMtTable1
operator|.
name|setColumns
argument_list|(
literal|"TABLE1_ID"
argument_list|,
literal|"GLOBAL_ATTRIBUTE1"
argument_list|,
literal|"SERVER_ATTRIBUTE1"
argument_list|)
expr_stmt|;
name|tMtTable2
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"MT_TABLE2"
argument_list|)
expr_stmt|;
name|tMtTable2
operator|.
name|setColumns
argument_list|(
literal|"TABLE2_ID"
argument_list|,
literal|"TABLE1_ID"
argument_list|,
literal|"GLOBAL_ATTRIBUTE"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createDataSet
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|tMtTable1
operator|.
name|insert
argument_list|(
name|i
argument_list|,
literal|"1_global"
operator|+
name|i
argument_list|,
literal|"server"
operator|+
name|i
argument_list|)
expr_stmt|;
name|tMtTable2
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
literal|"2_global"
operator|+
name|i
argument_list|)
expr_stmt|;
name|tMtTable2
operator|.
name|insert
argument_list|(
name|i
operator|+
literal|10
argument_list|,
name|i
argument_list|,
literal|"2_global"
operator|+
operator|(
name|i
operator|+
literal|10
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPersistentValueInExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientMtTable1
name|t1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ClientMtTable1
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClientMtTable1
name|t2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ClientMtTable1
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|Expression
name|scalar
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|null
argument_list|,
name|t1
argument_list|)
decl_stmt|;
name|Expression
name|list
init|=
name|ExpressionFactory
operator|.
name|matchAllExp
argument_list|(
literal|"|"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|t1
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|scalar
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t1
operator|.
name|getObjectId
argument_list|()
argument_list|,
operator|(
operator|(
name|ASTEqual
operator|)
name|list
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t2
operator|.
name|getObjectId
argument_list|()
argument_list|,
operator|(
operator|(
name|ASTEqual
operator|)
name|list
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListInASTList
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientMtTable1
name|t1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ClientMtTable1
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClientMtTable1
name|t2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ClientMtTable1
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ClientMtTable1
argument_list|>
name|table1List
init|=
operator|new
name|ArrayList
argument_list|<
name|ClientMtTable1
argument_list|>
argument_list|()
decl_stmt|;
name|table1List
operator|.
name|add
argument_list|(
name|t1
argument_list|)
expr_stmt|;
name|table1List
operator|.
name|add
argument_list|(
name|t2
argument_list|)
expr_stmt|;
comment|// send list in expression factory
name|Expression
name|list
init|=
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
name|ClientMtTable2
operator|.
name|TABLE1_PROPERTY
argument_list|,
name|table1List
argument_list|)
decl_stmt|;
name|Object
index|[]
name|values
init|=
operator|(
name|Object
index|[]
operator|)
operator|(
operator|(
name|ASTList
operator|)
name|list
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|t1
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t2
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ObjectId
name|t1Id
init|=
operator|new
name|ObjectId
argument_list|(
literal|"MtTable1"
argument_list|,
literal|"TABLE1_ID"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ObjectId
name|t2Id
init|=
operator|new
name|ObjectId
argument_list|(
literal|"MtTable1"
argument_list|,
literal|"TABLE1_ID"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|t1
operator|.
name|setObjectId
argument_list|(
name|t1Id
argument_list|)
expr_stmt|;
name|t2
operator|.
name|setObjectId
argument_list|(
name|t2Id
argument_list|)
expr_stmt|;
comment|//Expression and client have different copies of object
name|assertNotSame
argument_list|(
name|t1
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|t2
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArrayInASTList
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientMtTable1
name|t1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ClientMtTable1
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClientMtTable1
name|t2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ClientMtTable1
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClientMtTable1
name|t3
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ClientMtTable1
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|Object
index|[]
name|tArray
init|=
operator|new
name|Object
index|[
literal|3
index|]
decl_stmt|;
name|tArray
index|[
literal|0
index|]
operator|=
name|t1
expr_stmt|;
name|tArray
index|[
literal|1
index|]
operator|=
name|t2
expr_stmt|;
comment|// send array in expression factory
name|Expression
name|list
init|=
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
name|ClientMtTable2
operator|.
name|TABLE1_PROPERTY
argument_list|,
name|tArray
argument_list|)
decl_stmt|;
name|tArray
index|[
literal|2
index|]
operator|=
name|t3
expr_stmt|;
name|Object
index|[]
name|values
init|=
operator|(
name|Object
index|[]
operator|)
operator|(
operator|(
name|ASTList
operator|)
name|list
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tArray
operator|.
name|length
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|tArray
index|[
literal|2
index|]
argument_list|,
name|values
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t1
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t2
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ObjectId
name|t1Id
init|=
operator|new
name|ObjectId
argument_list|(
literal|"MtTable1"
argument_list|,
literal|"TABLE1_ID"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ObjectId
name|t2Id
init|=
operator|new
name|ObjectId
argument_list|(
literal|"MtTable1"
argument_list|,
literal|"TABLE1_ID"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|t1
operator|.
name|setObjectId
argument_list|(
name|t1Id
argument_list|)
expr_stmt|;
name|t2
operator|.
name|setObjectId
argument_list|(
name|t2Id
argument_list|)
expr_stmt|;
comment|// Expression and client have different arrays
name|assertNotSame
argument_list|(
name|t1
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|t2
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpressionFactoryMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|createDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|ClientMtTable1
argument_list|>
name|table1Query
init|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable1
argument_list|>
argument_list|(
name|ClientMtTable1
operator|.
name|class
argument_list|)
decl_stmt|;
name|table1Query
operator|.
name|addOrdering
argument_list|(
operator|new
name|Ordering
argument_list|(
literal|"db:TABLE1_ID"
argument_list|,
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ClientMtTable1
argument_list|>
name|table1List
init|=
name|context
operator|.
name|select
argument_list|(
name|table1Query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|table1List
argument_list|)
expr_stmt|;
name|ClientMtTable1
name|element_1
init|=
name|table1List
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ClientMtTable1
name|element_2
init|=
name|table1List
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|ClientMtTable2
operator|.
name|TABLE1_PROPERTY
argument_list|,
name|element_1
argument_list|)
decl_stmt|;
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
name|table2Query
init|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
argument_list|(
name|ClientMtTable2
operator|.
name|class
argument_list|,
name|exp
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ClientMtTable2
argument_list|>
name|table2List
init|=
name|context
operator|.
name|select
argument_list|(
name|table2Query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|table2List
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|table2List
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|exp
operator|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|element_2
argument_list|)
expr_stmt|;
name|table2Query
operator|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
argument_list|(
name|ClientMtTable2
operator|.
name|class
argument_list|,
name|exp
argument_list|)
expr_stmt|;
name|table2List
operator|=
name|context
operator|.
name|select
argument_list|(
name|table2Query
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|table2List
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|table2List
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpressionFactoryMatchAll
parameter_list|()
throws|throws
name|Exception
block|{
name|createDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
name|table2Query
init|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
argument_list|(
name|ClientMtTable2
operator|.
name|class
argument_list|)
decl_stmt|;
name|table2Query
operator|.
name|addOrdering
argument_list|(
operator|new
name|Ordering
argument_list|(
literal|"db:TABLE2_ID"
argument_list|,
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ClientMtTable2
argument_list|>
name|table2List
init|=
name|context
operator|.
name|select
argument_list|(
name|table2Query
argument_list|)
decl_stmt|;
name|ClientMtTable2
name|element_1
init|=
name|table2List
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ClientMtTable2
name|element_2
init|=
name|table2List
operator|.
name|get
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|element_1
operator|.
name|getTable1
argument_list|()
argument_list|,
name|element_2
operator|.
name|getTable1
argument_list|()
argument_list|)
expr_stmt|;
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|matchAllExp
argument_list|(
literal|"|"
operator|+
name|ClientMtTable1
operator|.
name|TABLE2ARRAY_PROPERTY
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|element_1
argument_list|,
name|element_2
argument_list|)
argument_list|)
decl_stmt|;
name|SelectQuery
argument_list|<
name|ClientMtTable1
argument_list|>
name|table1Query
init|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable1
argument_list|>
argument_list|(
name|ClientMtTable1
operator|.
name|class
argument_list|,
name|exp
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ClientMtTable1
argument_list|>
name|table1List
init|=
name|context
operator|.
name|select
argument_list|(
name|table1Query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|table1List
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpressionFactoryMatchAny
parameter_list|()
throws|throws
name|Exception
block|{
name|createDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
name|table2Query
init|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
argument_list|(
name|ClientMtTable2
operator|.
name|class
argument_list|)
decl_stmt|;
name|table2Query
operator|.
name|addOrdering
argument_list|(
operator|new
name|Ordering
argument_list|(
literal|"db:TABLE2_ID"
argument_list|,
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ClientMtTable2
argument_list|>
name|table2List
init|=
name|context
operator|.
name|select
argument_list|(
name|table2Query
argument_list|)
decl_stmt|;
name|ClientMtTable2
name|element_1
init|=
name|table2List
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ClientMtTable2
name|element_2
init|=
name|table2List
operator|.
name|get
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|matchAnyExp
argument_list|(
name|element_1
argument_list|,
name|element_2
argument_list|)
decl_stmt|;
name|table2Query
operator|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
argument_list|(
name|ClientMtTable2
operator|.
name|class
argument_list|,
name|exp
argument_list|)
expr_stmt|;
name|table2List
operator|=
name|context
operator|.
name|select
argument_list|(
name|table2Query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|table2List
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpressionFactoryIn
parameter_list|()
throws|throws
name|Exception
block|{
name|createDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|ClientMtTable1
argument_list|>
name|table1Query
init|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable1
argument_list|>
argument_list|(
name|ClientMtTable1
operator|.
name|class
argument_list|)
decl_stmt|;
name|table1Query
operator|.
name|addOrdering
argument_list|(
operator|new
name|Ordering
argument_list|(
literal|"db:TABLE1_ID"
argument_list|,
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ClientMtTable1
argument_list|>
name|table1List
init|=
name|context
operator|.
name|select
argument_list|(
name|table1Query
argument_list|)
decl_stmt|;
name|ClientMtTable1
name|element_3
init|=
name|table1List
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ClientMtTable1
name|element_8
init|=
name|table1List
operator|.
name|get
argument_list|(
literal|7
argument_list|)
decl_stmt|;
comment|// IN expression via Collection
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
name|ClientMtTable2
operator|.
name|TABLE1_PROPERTY
argument_list|,
name|table1List
operator|.
name|subList
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|)
decl_stmt|;
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
name|table2Query
init|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
argument_list|(
name|ClientMtTable2
operator|.
name|class
argument_list|,
name|exp
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ClientMtTable2
argument_list|>
name|table2List
init|=
name|context
operator|.
name|select
argument_list|(
name|table2Query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|table2List
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// IN expression via Array
name|exp
operator|=
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
name|ClientMtTable2
operator|.
name|TABLE1_PROPERTY
argument_list|,
name|element_3
argument_list|,
name|element_8
argument_list|)
expr_stmt|;
name|table2Query
operator|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
argument_list|(
name|ClientMtTable2
operator|.
name|class
argument_list|,
name|exp
argument_list|)
expr_stmt|;
name|table2List
operator|=
name|context
operator|.
name|select
argument_list|(
name|table2Query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|table2List
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpressionFactoryBetween
parameter_list|()
throws|throws
name|Exception
block|{
name|createDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|ClientMtTable1
argument_list|>
name|table1Query
init|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable1
argument_list|>
argument_list|(
name|ClientMtTable1
operator|.
name|class
argument_list|)
decl_stmt|;
name|table1Query
operator|.
name|addOrdering
argument_list|(
operator|new
name|Ordering
argument_list|(
literal|"db:TABLE1_ID"
argument_list|,
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ClientMtTable1
argument_list|>
name|table1List
init|=
name|context
operator|.
name|select
argument_list|(
name|table1Query
argument_list|)
decl_stmt|;
name|ClientMtTable1
name|element_1
init|=
name|table1List
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ClientMtTable1
name|element_7
init|=
name|table1List
operator|.
name|get
argument_list|(
literal|6
argument_list|)
decl_stmt|;
comment|// between
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|betweenExp
argument_list|(
name|ClientMtTable2
operator|.
name|TABLE1_PROPERTY
argument_list|,
name|element_1
argument_list|,
name|element_7
argument_list|)
decl_stmt|;
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
name|table2Query
init|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
argument_list|(
name|ClientMtTable2
operator|.
name|class
argument_list|,
name|exp
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ClientMtTable2
argument_list|>
name|table2List
init|=
name|context
operator|.
name|select
argument_list|(
name|table2Query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|table2List
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// not between
name|exp
operator|=
name|ExpressionFactory
operator|.
name|notBetweenExp
argument_list|(
name|ClientMtTable2
operator|.
name|TABLE1_PROPERTY
argument_list|,
name|element_1
argument_list|,
name|element_7
argument_list|)
expr_stmt|;
name|table2Query
operator|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
argument_list|(
name|ClientMtTable2
operator|.
name|class
argument_list|,
name|exp
argument_list|)
expr_stmt|;
name|table2List
operator|=
name|context
operator|.
name|select
argument_list|(
name|table2Query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|table2List
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpressionFactoryOperators
parameter_list|()
throws|throws
name|Exception
block|{
name|createDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|ClientMtTable1
argument_list|>
name|table1Query
init|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable1
argument_list|>
argument_list|(
name|ClientMtTable1
operator|.
name|class
argument_list|)
decl_stmt|;
name|table1Query
operator|.
name|addOrdering
argument_list|(
operator|new
name|Ordering
argument_list|(
literal|"db:TABLE1_ID"
argument_list|,
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ClientMtTable1
argument_list|>
name|table1List
init|=
name|context
operator|.
name|select
argument_list|(
name|table1Query
argument_list|)
decl_stmt|;
name|ClientMtTable1
name|element_7
init|=
name|table1List
operator|.
name|get
argument_list|(
literal|6
argument_list|)
decl_stmt|;
comment|// greater than, ">"
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|greaterExp
argument_list|(
name|ClientMtTable2
operator|.
name|TABLE1_PROPERTY
argument_list|,
name|element_7
argument_list|)
decl_stmt|;
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
name|table2Query
init|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
argument_list|(
name|ClientMtTable2
operator|.
name|class
argument_list|,
name|exp
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ClientMtTable2
argument_list|>
name|table2List
init|=
name|context
operator|.
name|select
argument_list|(
name|table2Query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|table2List
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// greater than or equal, ">="
name|exp
operator|=
name|ExpressionFactory
operator|.
name|greaterOrEqualExp
argument_list|(
name|ClientMtTable2
operator|.
name|TABLE1_PROPERTY
argument_list|,
name|element_7
argument_list|)
expr_stmt|;
name|table2Query
operator|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
argument_list|(
name|ClientMtTable2
operator|.
name|class
argument_list|,
name|exp
argument_list|)
expr_stmt|;
name|table2List
operator|=
name|context
operator|.
name|select
argument_list|(
name|table2Query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|table2List
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// less than, "<"
name|exp
operator|=
name|ExpressionFactory
operator|.
name|lessExp
argument_list|(
name|ClientMtTable2
operator|.
name|TABLE1_PROPERTY
argument_list|,
name|element_7
argument_list|)
expr_stmt|;
name|table2Query
operator|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
argument_list|(
name|ClientMtTable2
operator|.
name|class
argument_list|,
name|exp
argument_list|)
expr_stmt|;
name|table2List
operator|=
name|context
operator|.
name|select
argument_list|(
name|table2Query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|table2List
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// less than or equal, "<="
name|exp
operator|=
name|ExpressionFactory
operator|.
name|lessOrEqualExp
argument_list|(
name|ClientMtTable2
operator|.
name|TABLE1_PROPERTY
argument_list|,
name|element_7
argument_list|)
expr_stmt|;
name|table2Query
operator|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
argument_list|(
name|ClientMtTable2
operator|.
name|class
argument_list|,
name|exp
argument_list|)
expr_stmt|;
name|table2List
operator|=
name|context
operator|.
name|select
argument_list|(
name|table2Query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|table2List
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpressionWithParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|createDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|ClientMtTable1
argument_list|>
name|table1Query
init|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable1
argument_list|>
argument_list|(
name|ClientMtTable1
operator|.
name|class
argument_list|)
decl_stmt|;
name|table1Query
operator|.
name|addOrdering
argument_list|(
operator|new
name|Ordering
argument_list|(
literal|"db:TABLE1_ID"
argument_list|,
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ClientMtTable1
argument_list|>
name|table1List
init|=
name|context
operator|.
name|select
argument_list|(
name|table1Query
argument_list|)
decl_stmt|;
name|ClientMtTable1
name|element_1
init|=
name|table1List
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ClientMtTable1
name|element_5
init|=
name|table1List
operator|.
name|get
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|Expression
name|exp
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"table1 = $attr"
argument_list|)
decl_stmt|;
name|exp
operator|=
name|exp
operator|.
name|expWithParameters
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"attr"
argument_list|,
name|element_1
argument_list|)
argument_list|)
expr_stmt|;
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
name|table2Query
init|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
argument_list|(
name|ClientMtTable2
operator|.
name|class
argument_list|,
name|exp
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ClientMtTable2
argument_list|>
name|table2List
init|=
name|context
operator|.
name|select
argument_list|(
name|table2Query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|table2List
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|exp
operator|=
name|exp
operator|.
name|andExp
argument_list|(
name|Expression
operator|.
name|fromString
argument_list|(
literal|"table1 = $attr"
argument_list|)
argument_list|)
operator|.
name|expWithParameters
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"attr"
argument_list|,
name|element_5
argument_list|)
argument_list|)
expr_stmt|;
name|table2Query
operator|=
operator|new
name|SelectQuery
argument_list|<
name|ClientMtTable2
argument_list|>
argument_list|(
name|ClientMtTable2
operator|.
name|class
argument_list|,
name|exp
argument_list|)
expr_stmt|;
name|table2List
operator|=
name|context
operator|.
name|select
argument_list|(
name|table2Query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|table2List
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

