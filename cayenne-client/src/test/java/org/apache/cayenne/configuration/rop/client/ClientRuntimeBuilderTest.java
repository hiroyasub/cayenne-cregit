begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|rop
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|ClientChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|ClientConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|MockClientConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|rop
operator|.
name|HttpClientConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|ClientRuntimeBuilderTest
block|{
specifier|private
name|ClientRuntime
name|runtime
decl_stmt|;
annotation|@
name|After
specifier|public
name|void
name|stopRuntime
parameter_list|()
block|{
if|if
condition|(
name|runtime
operator|!=
literal|null
condition|)
block|{
name|runtime
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultBuild
parameter_list|()
block|{
name|runtime
operator|=
operator|new
name|ClientRuntimeBuilder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|runtime
operator|.
name|getInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|Key
operator|.
name|getMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|PROPERTIES_MAP
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Module
argument_list|>
name|modules
init|=
name|runtime
operator|.
name|getModules
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|modules
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|modules
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ClientModule
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoAutoLoading
parameter_list|()
block|{
name|runtime
operator|=
operator|new
name|ClientRuntimeBuilder
argument_list|()
operator|.
name|disableModulesAutoLoading
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|runtime
operator|.
name|getInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|Key
operator|.
name|getMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|PROPERTIES_MAP
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|properties
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Module
argument_list|>
name|modules
init|=
name|runtime
operator|.
name|getModules
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|modules
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|modules
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ClientModule
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtraModules
parameter_list|()
block|{
name|Module
name|m
init|=
name|mock
argument_list|(
name|Module
operator|.
name|class
argument_list|)
decl_stmt|;
name|runtime
operator|=
operator|new
name|ClientRuntimeBuilder
argument_list|()
operator|.
name|addModule
argument_list|(
name|m
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|Module
argument_list|>
name|modules
init|=
name|runtime
operator|.
name|getModules
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|modules
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Module
index|[]
name|array
init|=
name|modules
operator|.
name|toArray
argument_list|(
operator|new
name|Module
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|array
index|[
literal|0
index|]
argument_list|,
name|instanceOf
argument_list|(
name|ClientModule
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|m
argument_list|,
name|array
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProperties
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"test"
argument_list|,
literal|"test_value"
argument_list|)
decl_stmt|;
name|runtime
operator|=
operator|new
name|ClientRuntimeBuilder
argument_list|()
operator|.
name|properties
argument_list|(
name|properties
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|injectedProperties
init|=
name|runtime
operator|.
name|getInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|Key
operator|.
name|getMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|PROPERTIES_MAP
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|properties
argument_list|,
name|injectedProperties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientConnection
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|properties1
operator|.
name|put
argument_list|(
name|ClientConstants
operator|.
name|ROP_SERVICE_URL_PROPERTY
argument_list|,
literal|"http://localhost/YuM"
argument_list|)
expr_stmt|;
name|ClientModule
name|module
init|=
operator|new
name|ClientModule
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|super
operator|.
name|configure
argument_list|(
name|binder
argument_list|)
expr_stmt|;
name|ServerModule
operator|.
name|contributeProperties
argument_list|(
name|binder
argument_list|)
operator|.
name|putAll
argument_list|(
name|properties1
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Injector
name|injector
init|=
name|DIBootstrap
operator|.
name|createInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|ClientConnection
name|connection
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|ClientConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|connection
operator|instanceof
name|HttpClientConnection
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Connection must be a singleton"
argument_list|,
name|connection
argument_list|,
name|injector
operator|.
name|getInstance
argument_list|(
name|ClientConnection
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDataChannel_NoChannelEvents
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|properties1
operator|.
name|put
argument_list|(
name|ClientConstants
operator|.
name|ROP_CHANNEL_EVENTS_PROPERTY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|ClientModule
name|module
init|=
operator|new
name|ClientModule
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|super
operator|.
name|configure
argument_list|(
name|binder
argument_list|)
expr_stmt|;
comment|// use a noop connection to prevent startup errors...
name|binder
operator|.
name|bind
argument_list|(
name|ClientConnection
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockClientConnection
operator|.
name|class
argument_list|)
expr_stmt|;
name|ServerModule
operator|.
name|contributeProperties
argument_list|(
name|binder
argument_list|)
operator|.
name|putAll
argument_list|(
name|properties1
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Injector
name|injector
init|=
name|DIBootstrap
operator|.
name|createInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|DataChannel
name|channel
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|DataChannel
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClientChannel
name|clientChannel
init|=
operator|(
name|ClientChannel
operator|)
name|channel
decl_stmt|;
name|assertTrue
argument_list|(
name|clientChannel
operator|.
name|isChannelEventsEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

