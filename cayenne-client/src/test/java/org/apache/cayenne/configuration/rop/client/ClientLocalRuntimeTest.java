begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|rop
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|ClientServerChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ObjectContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|DIBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|ClientConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|service
operator|.
name|LocalConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
specifier|public
class|class
name|ClientLocalRuntimeTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testDefaultConstructor
parameter_list|()
block|{
name|Module
name|serverModule
init|=
name|binder
lambda|->
block|{
block|}
decl_stmt|;
name|ClientRuntime
name|runtime
init|=
name|ClientRuntime
operator|.
name|builder
argument_list|()
operator|.
name|disableModulesAutoLoading
argument_list|()
operator|.
name|local
argument_list|(
name|DIBootstrap
operator|.
name|createInjector
argument_list|(
name|serverModule
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Module
argument_list|>
name|cmodules
init|=
name|runtime
operator|.
name|getModules
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cmodules
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cmodules
operator|.
name|toArray
argument_list|()
index|[
literal|0
index|]
operator|instanceof
name|ClientModule
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetConnection
parameter_list|()
block|{
specifier|final
name|DataContext
name|serverContext
init|=
name|mock
argument_list|(
name|DataContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Module
name|serverModule
init|=
name|binder
lambda|->
name|binder
operator|.
name|bind
argument_list|(
name|ObjectContextFactory
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|ObjectContextFactory
argument_list|()
block|{
specifier|public
name|ObjectContext
name|createContext
argument_list|(
name|DataChannel
name|parent
argument_list|)
block|{
block_content|return null
decl_stmt|;
block|}
specifier|public
name|ObjectContext
name|createContext
parameter_list|()
block|{
return|return
name|serverContext
return|;
block|}
block|}
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|ClientRuntime
name|runtime
init|=
name|ClientRuntime
operator|.
name|builder
argument_list|()
operator|.
name|local
argument_list|(
name|DIBootstrap
operator|.
name|createInjector
argument_list|(
name|serverModule
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ClientConnection
name|connection
init|=
name|runtime
operator|.
name|getConnection
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assertNotNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|connection
operator|instanceof
name|LocalConnection
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|LocalConnection
name|localConnection
init|=
operator|(
name|LocalConnection
operator|)
name|connection
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|localConnection
operator|.
name|getChannel
argument_list|()
operator|instanceof
name|ClientServerChannel
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|ClientServerChannel
name|clientServerChannel
init|=
operator|(
name|ClientServerChannel
operator|)
name|localConnection
operator|.
name|getChannel
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assertSame
argument_list|(
name|serverContext
argument_list|,
name|clientServerChannel
operator|.
name|getParentChannel
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

unit|} }
end_unit

