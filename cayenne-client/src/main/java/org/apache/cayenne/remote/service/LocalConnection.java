begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|event
operator|.
name|EventBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|BaseConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|ClientMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|hessian
operator|.
name|service
operator|.
name|HessianUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * A ClientConnection that connects to a DataChannel. Used as an emulator of a remote  * service. Emulation includes serialization/deserialization of objects.  *   * @since 1.2  */
end_comment

begin_class
specifier|public
class|class
name|LocalConnection
extends|extends
name|BaseConnection
block|{
specifier|public
specifier|static
specifier|final
name|int
name|NO_SERIALIZATION
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|JAVA_SERIALIZATION
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|HESSIAN_SERIALIZATION
init|=
literal|2
decl_stmt|;
specifier|protected
name|DataChannel
name|channel
decl_stmt|;
specifier|protected
name|int
name|serializationPolicy
decl_stmt|;
comment|/**      * Creates LocalConnector with specified handler and no serialization.      */
specifier|public
name|LocalConnection
parameter_list|(
name|DataChannel
name|handler
parameter_list|)
block|{
name|this
argument_list|(
name|handler
argument_list|,
name|NO_SERIALIZATION
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a LocalConnector with specified handler and serialization policy. Valid      * policies are defined as final static int field in this class.      */
specifier|public
name|LocalConnection
parameter_list|(
name|DataChannel
name|handler
parameter_list|,
name|int
name|serializationPolicy
parameter_list|)
block|{
name|this
operator|.
name|channel
operator|=
name|handler
expr_stmt|;
comment|// convert invalid policy to NO_SER..
name|this
operator|.
name|serializationPolicy
operator|=
name|serializationPolicy
operator|==
name|JAVA_SERIALIZATION
operator|||
name|serializationPolicy
operator|==
name|HESSIAN_SERIALIZATION
condition|?
name|serializationPolicy
else|:
name|NO_SERIALIZATION
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSerializingMessages
parameter_list|()
block|{
return|return
name|serializationPolicy
operator|==
name|JAVA_SERIALIZATION
operator|||
name|serializationPolicy
operator|==
name|HESSIAN_SERIALIZATION
return|;
block|}
comment|/**      * Returns wrapped DataChannel.      */
specifier|public
name|DataChannel
name|getChannel
parameter_list|()
block|{
return|return
name|channel
return|;
block|}
comment|/**      * Returns null.      */
specifier|public
name|EventBridge
name|getServerEventBridge
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Does nothing.      */
annotation|@
name|Override
specifier|protected
name|void
name|beforeSendMessage
parameter_list|(
name|ClientMessage
name|message
parameter_list|)
block|{
comment|// noop
block|}
comment|/**      * Dispatches a message to an internal handler.      */
annotation|@
name|Override
specifier|protected
name|Object
name|doSendMessage
parameter_list|(
name|ClientMessage
name|message
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
name|ClientMessage
name|processedMessage
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|serializationPolicy
condition|)
block|{
case|case
name|HESSIAN_SERIALIZATION
case|:
name|processedMessage
operator|=
operator|(
name|ClientMessage
operator|)
name|HessianUtil
operator|.
name|cloneViaClientServerSerialization
argument_list|(
name|message
argument_list|,
name|channel
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|JAVA_SERIALIZATION
case|:
name|processedMessage
operator|=
name|Util
operator|.
name|cloneViaSerialization
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
default|default:
name|processedMessage
operator|=
name|message
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error serializing message"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|Serializable
name|result
init|=
operator|(
name|Serializable
operator|)
name|DispatchHelper
operator|.
name|dispatch
argument_list|(
name|channel
argument_list|,
name|processedMessage
argument_list|)
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|serializationPolicy
condition|)
block|{
case|case
name|HESSIAN_SERIALIZATION
case|:
return|return
name|HessianUtil
operator|.
name|cloneViaServerClientSerialization
argument_list|(
name|result
argument_list|,
name|channel
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
return|;
case|case
name|JAVA_SERIALIZATION
case|:
return|return
name|Util
operator|.
name|cloneViaSerialization
argument_list|(
name|result
argument_list|)
return|;
default|default:
return|return
name|result
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error deserializing result"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

