begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|rop
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|spi
operator|.
name|ModuleLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|ClientConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *<p>  * A convenience class to assemble custom ClientRuntime.  * It allows to easily configure custom modules and create local runtime.  *</p>  *<p>  * To create this builder use {@link ClientRuntime#builder()} method.  *</p>  *  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|ClientRuntimeBuilder
block|{
specifier|private
name|List
argument_list|<
name|Module
argument_list|>
name|modules
decl_stmt|;
specifier|private
name|boolean
name|autoLoadModules
decl_stmt|;
specifier|private
name|boolean
name|local
decl_stmt|;
name|Injector
name|serverInjector
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
decl_stmt|;
name|ClientRuntimeBuilder
parameter_list|()
block|{
name|modules
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|autoLoadModules
operator|=
literal|true
expr_stmt|;
name|local
operator|=
literal|false
expr_stmt|;
name|properties
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Disables DI module auto-loading. By default auto-loading is enabled based on      * {@link CayenneClientModuleProvider} service provider interface.      * If you decide to disable auto-loading, make sure you provide all the modules that you need.      *      * @return this builder instance.      */
specifier|public
name|ClientRuntimeBuilder
name|disableModulesAutoLoading
parameter_list|()
block|{
name|this
operator|.
name|autoLoadModules
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ClientRuntimeBuilder
name|addModule
parameter_list|(
name|Module
name|module
parameter_list|)
block|{
name|modules
operator|.
name|add
argument_list|(
name|module
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ClientRuntimeBuilder
name|addModules
parameter_list|(
name|Collection
argument_list|<
name|Module
argument_list|>
name|modules
parameter_list|)
block|{
name|this
operator|.
name|modules
operator|.
name|addAll
argument_list|(
name|modules
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * @param properties contributed to {@link ServerModule}      * @return this builder      */
specifier|public
name|ClientRuntimeBuilder
name|properties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Create {@link ClientRuntime} that provides an ROP stack based on a local      * connection on top of a server stack.      *      * @param serverInjector server injector      * @return this builder      */
specifier|public
name|ClientRuntimeBuilder
name|local
parameter_list|(
name|Injector
name|serverInjector
parameter_list|)
block|{
name|this
operator|.
name|local
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|serverInjector
operator|=
name|serverInjector
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ClientRuntime
name|build
parameter_list|()
block|{
name|Collection
argument_list|<
name|Module
argument_list|>
name|allModules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// first load default or auto-loaded modules...
name|allModules
operator|.
name|addAll
argument_list|(
name|autoLoadModules
condition|?
name|autoLoadedModules
argument_list|()
else|:
name|defaultModules
argument_list|()
argument_list|)
expr_stmt|;
comment|// custom modules override default and auto-loaded ...
name|allModules
operator|.
name|addAll
argument_list|(
name|modules
argument_list|)
expr_stmt|;
comment|// builder modules override default, auto-loaded and custom modules...
name|allModules
operator|.
name|addAll
argument_list|(
name|builderModules
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|ClientRuntime
argument_list|(
name|allModules
argument_list|)
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|autoLoadedModules
parameter_list|()
block|{
return|return
operator|new
name|ModuleLoader
argument_list|()
operator|.
name|load
argument_list|(
name|CayenneClientModuleProvider
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|defaultModules
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|ClientModule
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|builderModules
parameter_list|()
block|{
name|Collection
argument_list|<
name|Module
argument_list|>
name|modules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|modules
operator|.
name|add
argument_list|(
name|binder
lambda|->
name|ServerModule
operator|.
name|contributeProperties
argument_list|(
name|binder
argument_list|)
operator|.
name|putAll
argument_list|(
name|properties
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|local
condition|)
block|{
name|modules
operator|.
name|add
argument_list|(
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|DataChannel
operator|.
name|class
argument_list|,
name|ClientRuntime
operator|.
name|CLIENT_SERVER_CHANNEL_KEY
argument_list|)
argument_list|)
operator|.
name|toProviderInstance
argument_list|(
operator|new
name|LocalClientServerChannelProvider
argument_list|(
name|serverInjector
argument_list|)
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|ClientConnection
operator|.
name|class
argument_list|)
operator|.
name|toProviderInstance
argument_list|(
operator|new
name|LocalConnectionProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|modules
return|;
block|}
block|}
end_class

end_unit

