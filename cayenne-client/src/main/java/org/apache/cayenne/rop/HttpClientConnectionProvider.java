begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|rop
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|RuntimeProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|rop
operator|.
name|client
operator|.
name|ClientConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|DIRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|ClientConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|rop
operator|.
name|http
operator|.
name|HttpROPConnector
import|;
end_import

begin_class
specifier|public
class|class
name|HttpClientConnectionProvider
implements|implements
name|Provider
argument_list|<
name|ClientConnection
argument_list|>
block|{
annotation|@
name|Inject
specifier|protected
name|RuntimeProperties
name|runtimeProperties
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|Provider
argument_list|<
name|ROPSerializationService
argument_list|>
name|serializationServiceProvider
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ClientConnection
name|get
parameter_list|()
throws|throws
name|DIRuntimeException
block|{
name|String
name|sharedSession
init|=
name|runtimeProperties
operator|.
name|get
argument_list|(
name|ClientConstants
operator|.
name|ROP_SERVICE_SHARED_SESSION_PROPERTY
argument_list|)
decl_stmt|;
name|HttpROPConnector
name|ropConnector
init|=
name|createHttpRopConnector
argument_list|()
decl_stmt|;
name|ProxyRemoteService
name|remoteService
init|=
operator|new
name|ProxyRemoteService
argument_list|(
name|serializationServiceProvider
operator|.
name|get
argument_list|()
argument_list|,
name|ropConnector
argument_list|)
decl_stmt|;
name|HttpClientConnection
name|clientConnection
init|=
operator|new
name|HttpClientConnection
argument_list|(
name|remoteService
argument_list|,
name|sharedSession
argument_list|)
decl_stmt|;
name|ropConnector
operator|.
name|setClientConnection
argument_list|(
name|clientConnection
argument_list|)
expr_stmt|;
return|return
name|clientConnection
return|;
block|}
specifier|protected
name|HttpROPConnector
name|createHttpRopConnector
parameter_list|()
block|{
name|String
name|url
init|=
name|runtimeProperties
operator|.
name|get
argument_list|(
name|ClientConstants
operator|.
name|ROP_SERVICE_URL_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"No property defined for '%s', can't initialize HessianConnection"
argument_list|,
name|ClientConstants
operator|.
name|ROP_SERVICE_URL_PROPERTY
argument_list|)
throw|;
block|}
name|String
name|userName
init|=
name|runtimeProperties
operator|.
name|get
argument_list|(
name|ClientConstants
operator|.
name|ROP_SERVICE_USERNAME_PROPERTY
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|runtimeProperties
operator|.
name|get
argument_list|(
name|ClientConstants
operator|.
name|ROP_SERVICE_PASSWORD_PROPERTY
argument_list|)
decl_stmt|;
name|long
name|readTimeout
init|=
name|runtimeProperties
operator|.
name|getLong
argument_list|(
name|ClientConstants
operator|.
name|ROP_SERVICE_TIMEOUT_PROPERTY
argument_list|,
operator|-
literal|1L
argument_list|)
decl_stmt|;
name|HttpROPConnector
name|result
init|=
operator|new
name|HttpROPConnector
argument_list|(
name|url
argument_list|,
name|userName
argument_list|,
name|password
argument_list|)
decl_stmt|;
if|if
condition|(
name|readTimeout
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|setReadTimeout
argument_list|(
name|readTimeout
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

