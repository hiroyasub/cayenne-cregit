begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|rop
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|ROPUtil
block|{
specifier|public
specifier|static
name|String
name|getLogConnect
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|username
parameter_list|,
name|boolean
name|password
parameter_list|)
block|{
return|return
name|getLogConnect
argument_list|(
name|url
argument_list|,
name|username
argument_list|,
name|password
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getLogConnect
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|username
parameter_list|,
name|boolean
name|password
parameter_list|,
name|String
name|sharedSessionName
parameter_list|)
block|{
name|StringBuilder
name|log
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Connecting to ["
argument_list|)
decl_stmt|;
if|if
condition|(
name|username
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|append
argument_list|(
name|username
argument_list|)
expr_stmt|;
if|if
condition|(
name|password
condition|)
block|{
name|log
operator|.
name|append
argument_list|(
literal|":*******"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|append
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|log
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sharedSessionName
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|append
argument_list|(
literal|" - shared session '"
argument_list|)
operator|.
name|append
argument_list|(
name|sharedSessionName
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|append
argument_list|(
literal|" - dedicated session."
argument_list|)
expr_stmt|;
block|}
return|return
name|log
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getLogDisconnect
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|username
parameter_list|,
name|boolean
name|password
parameter_list|)
block|{
name|StringBuilder
name|log
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Disconnecting from ["
argument_list|)
decl_stmt|;
if|if
condition|(
name|username
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|append
argument_list|(
name|username
argument_list|)
expr_stmt|;
if|if
condition|(
name|password
condition|)
block|{
name|log
operator|.
name|append
argument_list|(
literal|":*******"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|append
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|log
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|log
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getParamsAsString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
name|StringBuilder
name|urlParams
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|params
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|urlParams
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|urlParams
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
name|urlParams
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|urlParams
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|urlParams
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|urlParams
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getBasicAuth
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
if|if
condition|(
name|username
operator|!=
literal|null
operator|&&
name|password
operator|!=
literal|null
condition|)
block|{
return|return
literal|"Basic "
operator|+
name|base64
argument_list|(
name|username
operator|+
literal|":"
operator|+
name|password
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Creates the Base64 value.      */
specifier|public
specifier|static
name|String
name|base64
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|StringBuffer
name|cb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|+
literal|2
operator|<
name|value
operator|.
name|length
argument_list|()
condition|;
name|i
operator|+=
literal|3
control|)
block|{
name|long
name|chunk
init|=
operator|(
name|int
operator|)
name|value
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|chunk
operator|=
operator|(
name|chunk
operator|<<
literal|8
operator|)
operator|+
operator|(
name|int
operator|)
name|value
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|chunk
operator|=
operator|(
name|chunk
operator|<<
literal|8
operator|)
operator|+
operator|(
name|int
operator|)
name|value
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|chunk
operator|>>
literal|18
argument_list|)
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|chunk
operator|>>
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|chunk
operator|>>
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|chunk
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|value
operator|.
name|length
argument_list|()
condition|)
block|{
name|long
name|chunk
init|=
operator|(
name|int
operator|)
name|value
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|chunk
operator|=
operator|(
name|chunk
operator|<<
literal|8
operator|)
operator|+
operator|(
name|int
operator|)
name|value
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|chunk
operator|<<=
literal|8
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|chunk
operator|>>
literal|18
argument_list|)
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|chunk
operator|>>
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|chunk
operator|>>
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|i
operator|<
name|value
operator|.
name|length
argument_list|()
condition|)
block|{
name|long
name|chunk
init|=
operator|(
name|int
operator|)
name|value
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|chunk
operator|<<=
literal|16
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|chunk
operator|>>
literal|18
argument_list|)
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|encode
argument_list|(
name|chunk
operator|>>
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
block|}
return|return
name|cb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|char
name|encode
parameter_list|(
name|long
name|d
parameter_list|)
block|{
name|d
operator|&=
literal|0x3f
expr_stmt|;
if|if
condition|(
name|d
operator|<
literal|26
condition|)
return|return
operator|(
name|char
operator|)
operator|(
name|d
operator|+
literal|'A'
operator|)
return|;
if|else if
condition|(
name|d
operator|<
literal|52
condition|)
return|return
operator|(
name|char
operator|)
operator|(
name|d
operator|+
literal|'a'
operator|-
literal|26
operator|)
return|;
if|else if
condition|(
name|d
operator|<
literal|62
condition|)
return|return
operator|(
name|char
operator|)
operator|(
name|d
operator|+
literal|'0'
operator|-
literal|52
operator|)
return|;
if|else if
condition|(
name|d
operator|==
literal|62
condition|)
return|return
literal|'+'
return|;
else|else
return|return
literal|'/'
return|;
block|}
block|}
end_class

end_unit

