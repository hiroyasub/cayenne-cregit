begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|rop
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|BeforeScopeEnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|event
operator|.
name|EventBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|event
operator|.
name|EventBridgeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|BaseConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|ClientMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|RemoteService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|RemoteSession
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|RemoteException
import|;
end_import

begin_class
specifier|public
class|class
name|HttpClientConnection
extends|extends
name|BaseConnection
block|{
specifier|private
name|RemoteService
name|remoteService
decl_stmt|;
specifier|private
name|RemoteSession
name|session
decl_stmt|;
specifier|private
name|String
name|sharedSessionName
decl_stmt|;
specifier|public
name|HttpClientConnection
parameter_list|(
name|RemoteService
name|remoteService
parameter_list|,
name|String
name|sharedSession
parameter_list|)
block|{
name|this
operator|.
name|remoteService
operator|=
name|remoteService
expr_stmt|;
name|this
operator|.
name|sharedSessionName
operator|=
name|sharedSession
expr_stmt|;
block|}
specifier|public
name|RemoteSession
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|beforeSendMessage
parameter_list|(
name|ClientMessage
name|message
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|connect
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Object
name|doSendMessage
parameter_list|(
name|ClientMessage
name|message
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
try|try
block|{
return|return
name|remoteService
operator|.
name|processMessage
argument_list|(
name|message
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
name|th
operator|.
name|getMessage
argument_list|()
argument_list|,
name|th
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|EventBridge
name|getServerEventBridge
parameter_list|()
throws|throws
name|CayenneRuntimeException
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|connect
argument_list|()
expr_stmt|;
block|}
return|return
name|createServerEventBridge
argument_list|(
name|session
argument_list|)
return|;
block|}
annotation|@
name|BeforeScopeEnd
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|RemoteException
block|{
name|remoteService
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|synchronized
name|void
name|connect
parameter_list|()
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// create server session...
try|try
block|{
name|this
operator|.
name|session
operator|=
operator|(
name|sharedSessionName
operator|!=
literal|null
operator|)
condition|?
name|remoteService
operator|.
name|establishSharedSession
argument_list|(
name|sharedSessionName
argument_list|)
else|:
name|remoteService
operator|.
name|establishSession
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|th
operator|.
name|getMessage
argument_list|()
argument_list|,
name|th
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
name|th
operator|.
name|getMessage
argument_list|()
argument_list|,
name|th
argument_list|)
throw|;
block|}
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"=== Connected, session: "
operator|+
name|session
operator|+
literal|" - took "
operator|+
name|time
operator|+
literal|" ms."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates an EventBridge that will listen for server events. Returns null if server      * events support is not configured in the descriptor.      *      * @throws CayenneRuntimeException if EventBridge startup fails for any reason.      */
specifier|protected
name|EventBridge
name|createServerEventBridge
parameter_list|(
name|RemoteSession
name|session
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
if|if
condition|(
operator|!
name|session
operator|.
name|isServerEventsEnabled
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|EventBridgeFactory
name|factory
init|=
operator|(
name|EventBridgeFactory
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|session
operator|.
name|getEventBridgeFactory
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// must use "name", not the sessionId as an external subject for the
comment|// event bridge
return|return
name|factory
operator|.
name|createEventBridge
argument_list|(
name|RemoteSession
operator|.
name|getSubjects
argument_list|()
argument_list|,
name|session
operator|.
name|getName
argument_list|()
argument_list|,
name|session
operator|.
name|getEventBridgeParameters
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error creating EventBridge."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

