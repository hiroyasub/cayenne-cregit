begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|bytes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|CayenneCryptoException
import|;
end_import

begin_comment
comment|/**  * This class not only parse HMAC but also verifies it  * and throws {@link org.apache.cayenne.crypto.CayenneCryptoException} in case it is invalid.  *  * @since 4.0  */
end_comment

begin_class
class|class
name|HmacDecryptor
extends|extends
name|HmacCreator
implements|implements
name|BytesDecryptor
block|{
name|BytesDecryptor
name|delegate
decl_stmt|;
name|HmacDecryptor
parameter_list|(
name|BytesDecryptor
name|delegate
parameter_list|,
name|Header
name|header
parameter_list|,
name|Key
name|key
parameter_list|)
block|{
name|super
argument_list|(
name|header
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|decrypt
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|int
name|inputOffset
parameter_list|,
name|Key
name|key
parameter_list|)
block|{
name|byte
name|hmacLength
init|=
name|input
index|[
name|inputOffset
operator|++
index|]
decl_stmt|;
if|if
condition|(
name|hmacLength
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|CayenneCryptoException
argument_list|(
literal|"Input is corrupted: invalid HMAC length."
argument_list|)
throw|;
block|}
name|byte
index|[]
name|receivedHmac
init|=
operator|new
name|byte
index|[
name|hmacLength
index|]
decl_stmt|;
name|byte
index|[]
name|decrypted
init|=
name|delegate
operator|.
name|decrypt
argument_list|(
name|input
argument_list|,
name|inputOffset
operator|+
name|hmacLength
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|byte
index|[]
name|realHmac
init|=
name|createHmac
argument_list|(
name|decrypted
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|input
argument_list|,
name|inputOffset
argument_list|,
name|receivedHmac
argument_list|,
literal|0
argument_list|,
name|hmacLength
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|receivedHmac
argument_list|,
name|realHmac
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CayenneCryptoException
argument_list|(
literal|"Input is corrupted: wrong HMAC."
argument_list|)
throw|;
block|}
return|return
name|decrypted
return|;
block|}
block|}
end_class

end_unit

