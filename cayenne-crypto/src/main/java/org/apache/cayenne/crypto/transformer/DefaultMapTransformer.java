begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|bytes
operator|.
name|BytesDecryptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|value
operator|.
name|ValueDecryptor
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|DefaultMapTransformer
implements|implements
name|MapTransformer
block|{
specifier|private
name|String
index|[]
name|mapKeys
decl_stmt|;
specifier|private
name|ValueDecryptor
index|[]
name|transformers
decl_stmt|;
specifier|private
name|BytesDecryptor
name|bytesDecryptor
decl_stmt|;
specifier|public
name|DefaultMapTransformer
parameter_list|(
name|String
index|[]
name|mapKeys
parameter_list|,
name|ValueDecryptor
index|[]
name|transformers
parameter_list|,
name|BytesDecryptor
name|bytesDecryptor
parameter_list|)
block|{
name|this
operator|.
name|mapKeys
operator|=
name|mapKeys
expr_stmt|;
name|this
operator|.
name|transformers
operator|=
name|transformers
expr_stmt|;
name|this
operator|.
name|bytesDecryptor
operator|=
name|bytesDecryptor
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|transform
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
name|int
name|len
init|=
name|mapKeys
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|mapKeys
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|Object
name|transformed
init|=
name|transformers
index|[
name|i
index|]
operator|.
name|decrypt
argument_list|(
name|bytesDecryptor
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|mapKeys
index|[
name|i
index|]
argument_list|,
name|transformed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

