begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|bytes
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|CayenneCryptoException
import|;
end_import

begin_class
class|class
name|EncryptorWithKeyName
implements|implements
name|BytesEncryptor
block|{
specifier|private
name|BytesEncryptor
name|delegate
decl_stmt|;
specifier|private
name|int
name|blockSize
decl_stmt|;
specifier|private
name|byte
index|[]
name|keyName
decl_stmt|;
name|EncryptorWithKeyName
parameter_list|(
name|BytesEncryptor
name|delegate
parameter_list|,
name|byte
index|[]
name|keyName
parameter_list|,
name|int
name|blockSize
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
name|this
operator|.
name|keyName
operator|=
name|keyName
expr_stmt|;
if|if
condition|(
name|blockSize
operator|!=
name|keyName
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|CayenneCryptoException
argument_list|(
literal|"keyName size is expected to be the same as block size. Was "
operator|+
name|keyName
operator|.
name|length
operator|+
literal|"; block size was: "
operator|+
name|blockSize
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|encrypt
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|int
name|outputOffset
parameter_list|)
block|{
name|byte
index|[]
name|output
init|=
name|delegate
operator|.
name|encrypt
argument_list|(
name|input
argument_list|,
name|outputOffset
operator|+
name|blockSize
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|keyName
argument_list|,
literal|0
argument_list|,
name|output
argument_list|,
name|outputOffset
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
return|return
name|output
return|;
block|}
block|}
end_class

end_unit

