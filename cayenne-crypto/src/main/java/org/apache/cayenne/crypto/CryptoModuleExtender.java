begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|cipher
operator|.
name|CipherFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|map
operator|.
name|ColumnMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|map
operator|.
name|PatternColumnMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|bytes
operator|.
name|BytesTransformerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|value
operator|.
name|BytesConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|value
operator|.
name|DefaultValueTransformerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|value
operator|.
name|ValueTransformerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Binder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A builder of custom extensions and required configuration for {@link CryptoModule} module.  *  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|CryptoModuleExtender
block|{
specifier|private
specifier|final
name|Binder
name|binder
decl_stmt|;
specifier|private
name|MapBuilder
argument_list|<
name|String
argument_list|>
name|properties
decl_stmt|;
specifier|private
name|MapBuilder
argument_list|<
name|char
index|[]
argument_list|>
name|credentials
decl_stmt|;
specifier|private
name|MapBuilder
argument_list|<
name|BytesConverter
argument_list|<
name|?
argument_list|>
argument_list|>
name|dbToByteConverters
decl_stmt|;
specifier|private
name|MapBuilder
argument_list|<
name|BytesConverter
argument_list|<
name|?
argument_list|>
argument_list|>
name|objectToByteConverters
decl_stmt|;
specifier|protected
name|CryptoModuleExtender
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|this
operator|.
name|binder
operator|=
name|binder
expr_stmt|;
block|}
specifier|public
name|CryptoModuleExtender
name|cipherAlgorithm
parameter_list|(
name|String
name|algorithm
parameter_list|)
block|{
name|contributeProperties
argument_list|(
name|binder
argument_list|)
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|CIPHER_ALGORITHM
argument_list|,
name|algorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CryptoModuleExtender
name|cipherMode
parameter_list|(
name|String
name|mode
parameter_list|)
block|{
name|contributeProperties
argument_list|(
name|binder
argument_list|)
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|CIPHER_MODE
argument_list|,
name|mode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CryptoModuleExtender
name|cipherPadding
parameter_list|(
name|String
name|padding
parameter_list|)
block|{
name|contributeProperties
argument_list|(
name|binder
argument_list|)
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|CIPHER_PADDING
argument_list|,
name|padding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CryptoModuleExtender
name|cipherFactory
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|CipherFactory
argument_list|>
name|factoryType
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|CipherFactory
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|factoryType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CryptoModuleExtender
name|valueTransformerFactory
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ValueTransformerFactory
argument_list|>
name|factoryType
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|ValueTransformerFactory
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|factoryType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CryptoModuleExtender
name|bytesTransformerFactory
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|BytesTransformerFactory
argument_list|>
name|factoryType
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|BytesTransformerFactory
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|factoryType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|CryptoModuleExtender
name|objectToBytesConverter
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|objectType
parameter_list|,
name|BytesConverter
argument_list|<
name|T
argument_list|>
name|converter
parameter_list|)
block|{
name|contributeObjectToByteConverters
argument_list|(
name|binder
argument_list|)
operator|.
name|put
argument_list|(
name|objectType
operator|.
name|getName
argument_list|()
argument_list|,
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|converter
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// workaround for byte[]
name|CryptoModuleExtender
name|objectToBytesConverter
parameter_list|(
name|String
name|objectTypeName
parameter_list|,
name|BytesConverter
argument_list|<
name|Object
argument_list|>
name|converter
parameter_list|)
block|{
name|contributeObjectToByteConverters
argument_list|(
name|binder
argument_list|)
operator|.
name|put
argument_list|(
name|objectTypeName
argument_list|,
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|converter
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CryptoModuleExtender
name|dbToBytesConverter
parameter_list|(
name|int
name|sqlType
parameter_list|,
name|BytesConverter
argument_list|<
name|?
argument_list|>
name|converter
parameter_list|)
block|{
name|contributeDbToByteConverters
argument_list|(
name|binder
argument_list|)
operator|.
name|put
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|sqlType
argument_list|)
argument_list|,
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|converter
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CryptoModuleExtender
name|columnMapper
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ColumnMapper
argument_list|>
name|columnMapperType
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|ColumnMapper
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|columnMapperType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CryptoModuleExtender
name|columnMapper
parameter_list|(
name|ColumnMapper
name|columnMapper
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|ColumnMapper
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|columnMapper
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CryptoModuleExtender
name|columnMapper
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|ColumnMapper
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|PatternColumnMapper
argument_list|(
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * @param encryptionKeyAlias The name of the key in the keystore that should be used for      *                           encryption by default.      */
specifier|public
name|CryptoModuleExtender
name|encryptionKeyAlias
parameter_list|(
name|String
name|encryptionKeyAlias
parameter_list|)
block|{
name|contributeProperties
argument_list|(
name|binder
argument_list|)
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|ENCRYPTION_KEY_ALIAS
argument_list|,
name|encryptionKeyAlias
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures keystore parameters. The KeyStore must be of "jceks" type and      * contain all needed secret keys for the target database. Currently, all      * keys must be protected with the same password.      *      * @param file               A file to load keystore from.      * @param passwordForAllKeys A password that unlocks all keys in the keystore.      * @param encryptionKeyAlias The name of the key in the keystore that should be used for      *                           encryption by default.      */
specifier|public
name|CryptoModuleExtender
name|keyStore
parameter_list|(
name|File
name|file
parameter_list|,
name|char
index|[]
name|passwordForAllKeys
parameter_list|,
name|String
name|encryptionKeyAlias
parameter_list|)
block|{
try|try
block|{
name|String
name|fileUrl
init|=
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
return|return
name|keyStore
argument_list|(
name|fileUrl
argument_list|,
name|passwordForAllKeys
argument_list|,
name|encryptionKeyAlias
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid keyStore file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Configures keystore parameters. The KeyStore must be of "jceks" type and      * contain all needed secret keys for the target database. Currently, all      * keys must be protected with the same password.      *      * @param url                A URL to load keystore from.      * @param passwordForAllKeys A password that unlocks all keys in the keystore.      * @param encryptionKeyAlias The name of the key in the keystore that should be used for      *                           encryption by default.      */
specifier|public
name|CryptoModuleExtender
name|keyStore
parameter_list|(
name|URL
name|url
parameter_list|,
name|char
index|[]
name|passwordForAllKeys
parameter_list|,
name|String
name|encryptionKeyAlias
parameter_list|)
block|{
return|return
name|keyStore
argument_list|(
name|url
operator|.
name|toExternalForm
argument_list|()
argument_list|,
name|passwordForAllKeys
argument_list|,
name|encryptionKeyAlias
argument_list|)
return|;
block|}
comment|/**      * Configures keystore parameters. The KeyStore must be of "jceks" type and      * contain all needed secret keys for the target database. Currently, all      * keys must be protected with the same password.      *      * @param url                A URL to load keystore from.      * @param passwordForAllKeys A password that unlocks all keys in the keystore.      * @param encryptionKeyAlias The name of the key in the keystore that should be used for      *                           encryption by default.      */
specifier|public
name|CryptoModuleExtender
name|keyStore
parameter_list|(
name|String
name|url
parameter_list|,
name|char
index|[]
name|passwordForAllKeys
parameter_list|,
name|String
name|encryptionKeyAlias
parameter_list|)
block|{
name|MapBuilder
argument_list|<
name|String
argument_list|>
name|propertiesBuilder
init|=
name|contributeProperties
argument_list|(
name|binder
argument_list|)
decl_stmt|;
name|propertiesBuilder
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|KEYSTORE_URL
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|propertiesBuilder
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|ENCRYPTION_KEY_ALIAS
argument_list|,
name|encryptionKeyAlias
argument_list|)
expr_stmt|;
name|contributeCredentials
argument_list|(
name|binder
argument_list|)
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|KEY_PASSWORD
argument_list|,
name|passwordForAllKeys
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CryptoModuleExtender
name|keySource
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|KeySource
argument_list|>
name|keySourceType
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|KeySource
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|keySourceType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CryptoModuleExtender
name|keySource
parameter_list|(
name|KeySource
name|keySource
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|KeySource
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|keySource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CryptoModuleExtender
name|compress
parameter_list|()
block|{
name|contributeProperties
argument_list|(
name|binder
argument_list|)
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|COMPRESSION
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable authentication codes      */
specifier|public
name|CryptoModuleExtender
name|useHMAC
parameter_list|()
block|{
name|contributeProperties
argument_list|(
name|binder
argument_list|)
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|USE_HMAC
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|MapBuilder
argument_list|<
name|String
argument_list|>
name|contributeProperties
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
name|binder
operator|.
name|bindMap
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|CryptoConstants
operator|.
name|PROPERTIES_MAP
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
specifier|private
name|MapBuilder
argument_list|<
name|char
index|[]
argument_list|>
name|contributeCredentials
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
if|if
condition|(
name|credentials
operator|==
literal|null
condition|)
block|{
name|credentials
operator|=
name|binder
operator|.
name|bindMap
argument_list|(
name|char
index|[]
operator|.
expr|class
argument_list|,
name|CryptoConstants
operator|.
name|CREDENTIALS_MAP
argument_list|)
expr_stmt|;
block|}
return|return
name|credentials
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|private
name|MapBuilder
argument_list|<
name|BytesConverter
argument_list|<
name|?
argument_list|>
argument_list|>
name|contributeDbToByteConverters
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
if|if
condition|(
name|dbToByteConverters
operator|==
literal|null
condition|)
block|{
name|MapBuilder
name|mapBuilder
init|=
name|binder
operator|.
name|bindMap
argument_list|(
name|BytesConverter
operator|.
name|class
argument_list|,
name|DefaultValueTransformerFactory
operator|.
name|DB_TO_BYTE_CONVERTERS_KEY
argument_list|)
decl_stmt|;
name|dbToByteConverters
operator|=
name|mapBuilder
expr_stmt|;
block|}
return|return
name|dbToByteConverters
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|private
name|MapBuilder
argument_list|<
name|BytesConverter
argument_list|<
name|?
argument_list|>
argument_list|>
name|contributeObjectToByteConverters
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
if|if
condition|(
name|objectToByteConverters
operator|==
literal|null
condition|)
block|{
name|MapBuilder
name|mapBuilder
init|=
name|binder
operator|.
name|bindMap
argument_list|(
name|BytesConverter
operator|.
name|class
argument_list|,
name|DefaultValueTransformerFactory
operator|.
name|OBJECT_TO_BYTE_CONVERTERS_KEY
argument_list|)
decl_stmt|;
name|objectToByteConverters
operator|=
name|mapBuilder
expr_stmt|;
block|}
return|return
name|objectToByteConverters
return|;
block|}
block|}
end_class

end_unit

