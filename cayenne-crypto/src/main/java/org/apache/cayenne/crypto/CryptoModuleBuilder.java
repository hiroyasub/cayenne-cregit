begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|reader
operator|.
name|RowReaderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|batch
operator|.
name|BatchTranslatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|batch
operator|.
name|CryptoBatchTranslatorFactoryDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|cipher
operator|.
name|CipherFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|cipher
operator|.
name|DefaultCipherFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|key
operator|.
name|JceksKeySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|map
operator|.
name|ColumnMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|map
operator|.
name|PatternColumnMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|reader
operator|.
name|CryptoRowReaderFactoryDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|DefaultTransformerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|value
operator|.
name|ValueTransformerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Binder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Module
import|;
end_import

begin_comment
comment|/**  * A builder of a Cayenne DI module that will contain all extension to Cayenne  * runtime needed to enable encryption of certain data columns. Builder allows  * to specify custom ciphers, as well as a strategy for discovering which  * columns are encrypted.  *   * @since 3.2  */
end_comment

begin_class
specifier|public
class|class
name|CryptoModuleBuilder
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CIPHER_ALGORITHM
init|=
literal|"AES"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CIPHER_MODE
init|=
literal|"CBC"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CIPHER_PADDING
init|=
literal|"PKCS5Padding"
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|ValueTransformerFactory
argument_list|>
name|valueTransformerFactoryType
decl_stmt|;
specifier|private
name|String
name|columnMapperPattern
decl_stmt|;
specifier|private
name|ColumnMapper
name|columnMapper
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|ColumnMapper
argument_list|>
name|columnMapperType
decl_stmt|;
specifier|private
name|String
name|cipherAlgoritm
decl_stmt|;
specifier|private
name|String
name|cipherMode
decl_stmt|;
specifier|private
name|String
name|cipherPadding
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|CipherFactory
argument_list|>
name|cipherFactoryType
decl_stmt|;
specifier|private
name|URL
name|keyStoreUrl
decl_stmt|;
specifier|private
name|String
name|keyStoreUrlString
decl_stmt|;
specifier|private
name|File
name|keyStoreFile
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|KeySource
argument_list|>
name|keySourceType
decl_stmt|;
specifier|private
name|char
index|[]
name|keyPassword
decl_stmt|;
specifier|public
name|CryptoModuleBuilder
parameter_list|()
block|{
comment|// init some sensible defaults that work in JVM without extra
comment|// packages...
name|this
operator|.
name|cipherAlgoritm
operator|=
name|DEFAULT_CIPHER_ALGORITHM
expr_stmt|;
name|this
operator|.
name|cipherMode
operator|=
name|DEFAULT_CIPHER_MODE
expr_stmt|;
name|this
operator|.
name|cipherPadding
operator|=
name|DEFAULT_CIPHER_PADDING
expr_stmt|;
name|this
operator|.
name|cipherFactoryType
operator|=
name|DefaultCipherFactory
operator|.
name|class
expr_stmt|;
name|this
operator|.
name|keySourceType
operator|=
name|JceksKeySource
operator|.
name|class
expr_stmt|;
name|this
operator|.
name|columnMapperPattern
operator|=
literal|"^CRYPTO_"
expr_stmt|;
block|}
specifier|public
name|CryptoModuleBuilder
name|cipherAlgorithm
parameter_list|(
name|String
name|algorithm
parameter_list|)
block|{
name|this
operator|.
name|cipherAlgoritm
operator|=
name|algorithm
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CryptoModuleBuilder
name|cipherMode
parameter_list|(
name|String
name|mode
parameter_list|)
block|{
name|this
operator|.
name|cipherMode
operator|=
name|mode
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CryptoModuleBuilder
name|cipherFactory
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|CipherFactory
argument_list|>
name|factoryType
parameter_list|)
block|{
name|this
operator|.
name|cipherFactoryType
operator|=
name|factoryType
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CryptoModuleBuilder
name|valueTransformer
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ValueTransformerFactory
argument_list|>
name|factoryType
parameter_list|)
block|{
name|this
operator|.
name|valueTransformerFactoryType
operator|=
name|factoryType
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CryptoModuleBuilder
name|columnMapper
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ColumnMapper
argument_list|>
name|columnMapperType
parameter_list|)
block|{
name|this
operator|.
name|columnMapperPattern
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columnMapperType
operator|=
name|columnMapperType
expr_stmt|;
name|this
operator|.
name|columnMapper
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CryptoModuleBuilder
name|columnMapper
parameter_list|(
name|ColumnMapper
name|columnMapper
parameter_list|)
block|{
name|this
operator|.
name|columnMapperPattern
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columnMapperType
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columnMapper
operator|=
name|columnMapper
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CryptoModuleBuilder
name|columnMapper
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|columnMapperPattern
operator|=
name|pattern
expr_stmt|;
name|this
operator|.
name|columnMapperType
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columnMapper
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a password that unlocks a secret key.      */
specifier|public
name|CryptoModuleBuilder
name|keyPassword
parameter_list|(
name|char
index|[]
name|password
parameter_list|)
block|{
name|this
operator|.
name|keyPassword
operator|=
name|password
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Instructs builder to use a given file to load keystore data. The KeyStore      * must be of "jceks" type and contain all needed secret keys for the target      * database.      */
specifier|public
name|CryptoModuleBuilder
name|keyStore
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|this
operator|.
name|keyStoreUrl
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|keyStoreUrlString
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|keyStoreFile
operator|=
name|file
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Instructs builder to use a given URL to load keystore data. The KeyStore      * must be of "jceks" type and contain all needed secret keys for the target      * database.      */
specifier|public
name|CryptoModuleBuilder
name|keyStore
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|this
operator|.
name|keyStoreUrl
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|keyStoreUrlString
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|keyStoreFile
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Instructs builder to use a given URL to load keystore data. The KeyStore      * must be of "jceks" type and contain all needed secret keys for the target      * database.      */
specifier|public
name|CryptoModuleBuilder
name|keyStore
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|this
operator|.
name|keyStoreUrl
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|keyStoreUrlString
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|keyStoreFile
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CryptoModuleBuilder
name|keySource
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|KeySource
argument_list|>
name|type
parameter_list|)
block|{
name|this
operator|.
name|keySourceType
operator|=
name|type
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Produces a module that can be used to start Cayenne runtime.      */
specifier|public
name|Module
name|build
parameter_list|()
block|{
if|if
condition|(
name|valueTransformerFactoryType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"'ValueTransformerFactory' is not initialized"
argument_list|)
throw|;
block|}
if|if
condition|(
name|columnMapperType
operator|==
literal|null
operator|&&
name|columnMapper
operator|==
literal|null
operator|&&
name|columnMapperPattern
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"'ColumnMapper' is not initialized"
argument_list|)
throw|;
block|}
if|if
condition|(
name|cipherFactoryType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"'CipherFactory' is not initialized"
argument_list|)
throw|;
block|}
return|return
operator|new
name|Module
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|String
name|keyStoreUrl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|CryptoModuleBuilder
operator|.
name|this
operator|.
name|keyStoreUrl
operator|!=
literal|null
condition|)
block|{
name|keyStoreUrl
operator|=
name|CryptoModuleBuilder
operator|.
name|this
operator|.
name|keyStoreUrl
operator|.
name|toExternalForm
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|CryptoModuleBuilder
operator|.
name|this
operator|.
name|keyStoreUrlString
operator|!=
literal|null
condition|)
block|{
name|keyStoreUrl
operator|=
name|CryptoModuleBuilder
operator|.
name|this
operator|.
name|keyStoreUrlString
expr_stmt|;
block|}
if|else if
condition|(
name|keyStoreFile
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|keyStoreUrl
operator|=
name|keyStoreFile
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invalid keyStore file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// String properties
name|MapBuilder
argument_list|<
name|String
argument_list|>
name|props
init|=
name|binder
operator|.
expr|<
name|String
operator|>
name|bindMap
argument_list|(
name|CryptoConstants
operator|.
name|PROPERTIES_MAP
argument_list|)
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|CIPHER_ALGORITHM
argument_list|,
name|cipherAlgoritm
argument_list|)
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|CIPHER_MODE
argument_list|,
name|cipherMode
argument_list|)
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|CIPHER_PADDING
argument_list|,
name|cipherPadding
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyStoreUrl
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|KEYSTORE_URL
argument_list|,
name|keyStoreUrl
argument_list|)
expr_stmt|;
block|}
comment|// char[] credentials... stored as char[] to potentially allow
comment|// wiping them clean in memory...
name|MapBuilder
argument_list|<
name|char
index|[]
argument_list|>
name|creds
init|=
name|binder
operator|.
expr|<
name|char
index|[]
operator|>
name|bindMap
argument_list|(
name|CryptoConstants
operator|.
name|CREDENTIALS_MAP
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyPassword
operator|!=
literal|null
condition|)
block|{
name|creds
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|KEY_PASSWORD
argument_list|,
name|keyPassword
argument_list|)
expr_stmt|;
block|}
name|binder
operator|.
name|bind
argument_list|(
name|CipherFactory
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|cipherFactoryType
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|TransformerFactory
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|DefaultTransformerFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|ValueTransformerFactory
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|valueTransformerFactoryType
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|KeySource
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|keySourceType
argument_list|)
expr_stmt|;
if|if
condition|(
name|columnMapperPattern
operator|!=
literal|null
condition|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|ColumnMapper
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|PatternColumnMapper
argument_list|(
name|columnMapperPattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|columnMapperType
operator|!=
literal|null
condition|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|ColumnMapper
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|columnMapperType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|binder
operator|.
name|bind
argument_list|(
name|ColumnMapper
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|columnMapper
argument_list|)
expr_stmt|;
block|}
name|binder
operator|.
name|decorate
argument_list|(
name|BatchTranslatorFactory
operator|.
name|class
argument_list|)
operator|.
name|before
argument_list|(
name|CryptoBatchTranslatorFactoryDecorator
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|decorate
argument_list|(
name|RowReaderFactory
operator|.
name|class
argument_list|)
operator|.
name|before
argument_list|(
name|CryptoRowReaderFactoryDecorator
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

