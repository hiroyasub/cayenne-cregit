begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|bytes
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Provider
import|;
end_import

begin_comment
comment|/**  * A decorator of {@link BytesTransformerFactory} that allows to defer its initialization and hence allows Cayenne stack  * to operate without crypto keys over a subset of entities that do not require encryption. Useful e.g. when the crypto  * keys are supplied at a later point after startup.  *  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|LazyBytesTransformerFactory
implements|implements
name|BytesTransformerFactory
block|{
specifier|private
name|Provider
argument_list|<
name|BytesTransformerFactory
argument_list|>
name|delegateProvider
decl_stmt|;
specifier|private
specifier|volatile
name|BytesTransformerFactory
name|delegate
decl_stmt|;
specifier|public
name|LazyBytesTransformerFactory
parameter_list|(
annotation|@
name|Inject
name|Provider
argument_list|<
name|BytesTransformerFactory
argument_list|>
name|delegateProvider
parameter_list|)
block|{
name|this
operator|.
name|delegateProvider
operator|=
name|delegateProvider
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|BytesEncryptor
name|encryptor
parameter_list|()
block|{
return|return
name|ensureInit
argument_list|()
operator|.
name|encryptor
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesDecryptor
name|decryptor
parameter_list|()
block|{
return|return
name|ensureInit
argument_list|()
operator|.
name|decryptor
argument_list|()
return|;
block|}
specifier|protected
name|BytesTransformerFactory
name|ensureInit
parameter_list|()
block|{
if|if
condition|(
name|delegate
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|delegate
operator|==
literal|null
condition|)
block|{
name|delegate
operator|=
name|delegateProvider
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|delegate
return|;
block|}
block|}
end_class

end_unit

