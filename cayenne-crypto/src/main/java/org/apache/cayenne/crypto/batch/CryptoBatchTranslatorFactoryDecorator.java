begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|batch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|batch
operator|.
name|BatchParameterBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|batch
operator|.
name|BatchTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|batch
operator|.
name|BatchTranslatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|cipher
operator|.
name|Encryptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|cipher
operator|.
name|EncryptorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|BatchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|BatchQueryRow
import|;
end_import

begin_comment
comment|/**  * @since 3.2  */
end_comment

begin_class
specifier|public
class|class
name|CryptoBatchTranslatorFactoryDecorator
implements|implements
name|BatchTranslatorFactory
block|{
specifier|private
name|EncryptorFactory
name|encryptorFactory
decl_stmt|;
specifier|private
name|BatchTranslatorFactory
name|delegate
decl_stmt|;
specifier|public
name|CryptoBatchTranslatorFactoryDecorator
parameter_list|(
annotation|@
name|Inject
name|BatchTranslatorFactory
name|delegate
parameter_list|,
annotation|@
name|Inject
name|EncryptorFactory
name|encryptorFactory
parameter_list|)
block|{
name|this
operator|.
name|encryptorFactory
operator|=
name|encryptorFactory
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|BatchTranslator
name|translator
parameter_list|(
name|BatchQuery
name|query
parameter_list|,
name|DbAdapter
name|adapter
parameter_list|,
name|String
name|trimFunction
parameter_list|)
block|{
specifier|final
name|BatchTranslator
name|delegateTranslator
init|=
name|delegate
operator|.
name|translator
argument_list|(
name|query
argument_list|,
name|adapter
argument_list|,
name|trimFunction
argument_list|)
decl_stmt|;
return|return
operator|new
name|BatchTranslator
argument_list|()
block|{
specifier|private
name|int
name|len
decl_stmt|;
specifier|private
name|Encryptor
index|[]
name|encryptors
decl_stmt|;
specifier|private
name|void
name|ensureEncryptorsCompiled
parameter_list|()
block|{
if|if
condition|(
name|encryptors
operator|==
literal|null
condition|)
block|{
name|BatchParameterBinding
index|[]
name|bindings
init|=
name|getBindings
argument_list|()
decl_stmt|;
name|this
operator|.
name|len
operator|=
name|bindings
operator|.
name|length
expr_stmt|;
name|this
operator|.
name|encryptors
operator|=
operator|new
name|Encryptor
index|[
name|len
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|encryptors
index|[
name|i
index|]
operator|=
name|encryptorFactory
operator|.
name|getEncryptor
argument_list|(
name|bindings
index|[
name|i
index|]
operator|.
name|getAttribute
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSql
parameter_list|()
block|{
return|return
name|delegateTranslator
operator|.
name|getSql
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|BatchParameterBinding
index|[]
name|getBindings
parameter_list|()
block|{
return|return
name|delegateTranslator
operator|.
name|getBindings
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|BatchParameterBinding
index|[]
name|updateBindings
parameter_list|(
name|BatchQueryRow
name|row
parameter_list|)
block|{
name|ensureEncryptorsCompiled
argument_list|()
expr_stmt|;
name|BatchParameterBinding
index|[]
name|bindings
init|=
name|delegateTranslator
operator|.
name|updateBindings
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|encrypted
init|=
name|encryptors
index|[
name|i
index|]
operator|.
name|encrypt
argument_list|(
name|bindings
index|[
name|i
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|bindings
index|[
name|i
index|]
operator|.
name|setValue
argument_list|(
name|encrypted
argument_list|)
expr_stmt|;
block|}
return|return
name|bindings
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

