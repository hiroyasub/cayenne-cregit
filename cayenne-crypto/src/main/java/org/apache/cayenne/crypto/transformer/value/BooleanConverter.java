begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|value
package|;
end_package

begin_comment
comment|/**  * Converts between java.util.Date and byte[], based on the long timestamp encoding.  *  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|BooleanConverter
implements|implements
name|BytesConverter
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|static
specifier|final
name|BytesConverter
argument_list|<
name|Boolean
argument_list|>
name|INSTANCE
init|=
operator|new
name|BooleanConverter
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Boolean
name|fromBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected number of bytes for boolean: "
operator|+
name|bytes
operator|.
name|length
argument_list|)
throw|;
block|}
name|byte
name|b
init|=
name|bytes
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|0
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
if|else if
condition|(
name|b
operator|==
literal|1
condition|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected byte value for boolean: "
operator|+
name|b
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|toBytes
parameter_list|(
name|Boolean
name|value
parameter_list|)
block|{
return|return
operator|new
name|byte
index|[]
block|{
name|value
condition|?
operator|(
name|byte
operator|)
literal|1
else|:
literal|0
block|}
return|;
block|}
block|}
end_class

end_unit

