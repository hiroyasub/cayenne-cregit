begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|bytes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|CayenneCryptoException
import|;
end_import

begin_comment
comment|/**  * Represents a header with metadata about the encrypted data. A header is  * prependend to each encrypted value, and itself is not encrypted. Header  * format is the following:  *<ul>  *<li>byte 0..2: "magic" number identifying the format as Cayenne-crypto  * encrypted sequence.  *<li>byte 3: header length N, i.e. how many bytes the header contains,  * including magic number and the length indicator. N can be 0..127.  *<li>byte 4: a bit String representing various flags, such as compression.  *<li>byte 5..N: UTF8-encoded symbolic name of the encryption key.  *</ul>  *   * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|Header
block|{
specifier|private
specifier|static
specifier|final
name|String
name|KEY_NAME_CHARSET
init|=
literal|"UTF-8"
decl_stmt|;
comment|// "CC1" is a "magic number" identifying Cayenne-crypto version 1 value
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|MAGIC_NUMBER
init|=
block|{
literal|'C'
block|,
literal|'C'
block|,
literal|'1'
block|}
decl_stmt|;
comment|/**      * Position of the "flags" byte in the header.      */
specifier|private
specifier|static
specifier|final
name|int
name|MAGIC_NUMBER_POSITION
init|=
literal|0
decl_stmt|;
comment|/**      * Position of the header size byte in the header.      */
specifier|private
specifier|static
specifier|final
name|int
name|SIZE_POSITION
init|=
literal|3
decl_stmt|;
comment|/**      * Position of the "flags" byte in the header.      */
specifier|private
specifier|static
specifier|final
name|int
name|FLAGS_POSITION
init|=
literal|4
decl_stmt|;
comment|/**      * Position of the key name within the header block.      */
specifier|private
specifier|static
specifier|final
name|int
name|KEY_NAME_OFFSET
init|=
literal|5
decl_stmt|;
comment|/**      * Max size of a key name within a header.      */
specifier|private
specifier|static
specifier|final
name|int
name|KEY_NAME_MAX_SIZE
init|=
name|Byte
operator|.
name|MAX_VALUE
operator|-
name|KEY_NAME_OFFSET
decl_stmt|;
comment|/**      * A position of the compress bit.      */
specifier|private
specifier|static
specifier|final
name|int
name|COMPRESS_BIT
init|=
literal|0
decl_stmt|;
comment|/**      * A position if the HMAC bit      */
specifier|private
specifier|static
specifier|final
name|int
name|HMAC_BIT
init|=
literal|1
decl_stmt|;
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
specifier|private
name|int
name|offset
decl_stmt|;
specifier|public
specifier|static
name|Header
name|create
parameter_list|(
name|String
name|keyName
parameter_list|,
name|boolean
name|compressed
parameter_list|,
name|boolean
name|withHMAC
parameter_list|)
block|{
name|byte
index|[]
name|keyNameBytes
decl_stmt|;
try|try
block|{
name|keyNameBytes
operator|=
name|keyName
operator|.
name|getBytes
argument_list|(
name|KEY_NAME_CHARSET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneCryptoException
argument_list|(
literal|"Can't encode in "
operator|+
name|KEY_NAME_CHARSET
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|keyNameBytes
operator|.
name|length
operator|>
name|KEY_NAME_MAX_SIZE
condition|)
block|{
throw|throw
operator|new
name|CayenneCryptoException
argument_list|(
literal|"Key name '"
operator|+
name|keyName
operator|+
literal|"' is too long. Its UTF8-encoded form should not exceed "
operator|+
name|KEY_NAME_MAX_SIZE
operator|+
literal|" bytes"
argument_list|)
throw|;
block|}
name|int
name|n
init|=
name|MAGIC_NUMBER
operator|.
name|length
operator|+
literal|1
operator|+
literal|1
operator|+
name|keyNameBytes
operator|.
name|length
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|n
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|MAGIC_NUMBER
argument_list|,
literal|0
argument_list|,
name|data
argument_list|,
name|MAGIC_NUMBER_POSITION
argument_list|,
name|MAGIC_NUMBER
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// total header size
name|data
index|[
name|SIZE_POSITION
index|]
operator|=
operator|(
name|byte
operator|)
name|n
expr_stmt|;
comment|// flags
if|if
condition|(
name|compressed
condition|)
block|{
name|data
index|[
name|FLAGS_POSITION
index|]
operator|=
name|bitOn
argument_list|(
name|data
index|[
name|FLAGS_POSITION
index|]
argument_list|,
name|COMPRESS_BIT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|withHMAC
condition|)
block|{
name|data
index|[
name|FLAGS_POSITION
index|]
operator|=
name|bitOn
argument_list|(
name|data
index|[
name|FLAGS_POSITION
index|]
argument_list|,
name|HMAC_BIT
argument_list|)
expr_stmt|;
block|}
comment|// key name
name|System
operator|.
name|arraycopy
argument_list|(
name|keyNameBytes
argument_list|,
literal|0
argument_list|,
name|data
argument_list|,
name|KEY_NAME_OFFSET
argument_list|,
name|keyNameBytes
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|create
argument_list|(
name|data
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Header
name|create
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
operator|new
name|Header
argument_list|(
name|data
argument_list|,
name|offset
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
name|setCompressed
parameter_list|(
name|byte
name|bits
parameter_list|,
name|boolean
name|compressed
parameter_list|)
block|{
return|return
name|compressed
condition|?
name|bitOn
argument_list|(
name|bits
argument_list|,
name|COMPRESS_BIT
argument_list|)
else|:
name|bitOff
argument_list|(
name|bits
argument_list|,
name|COMPRESS_BIT
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
name|setHaveHMAC
parameter_list|(
name|byte
name|bits
parameter_list|,
name|boolean
name|haveHMAC
parameter_list|)
block|{
return|return
name|haveHMAC
condition|?
name|bitOn
argument_list|(
name|bits
argument_list|,
name|HMAC_BIT
argument_list|)
else|:
name|bitOff
argument_list|(
name|bits
argument_list|,
name|HMAC_BIT
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
name|bitOn
parameter_list|(
name|byte
name|bits
parameter_list|,
name|int
name|position
parameter_list|)
block|{
return|return
operator|(
name|byte
operator|)
operator|(
name|bits
operator||
operator|(
literal|1
operator|<<
name|position
operator|)
operator|)
return|;
block|}
specifier|private
specifier|static
name|byte
name|bitOff
parameter_list|(
name|byte
name|bits
parameter_list|,
name|int
name|position
parameter_list|)
block|{
return|return
operator|(
name|byte
operator|)
operator|(
name|bits
operator|&
operator|~
operator|(
literal|1
operator|<<
name|position
operator|)
operator|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isBitOn
parameter_list|(
name|byte
name|bits
parameter_list|,
name|int
name|position
parameter_list|)
block|{
return|return
operator|(
operator|(
name|bits
operator|>>
name|position
operator|)
operator|&
literal|1
operator|)
operator|==
literal|1
return|;
block|}
comment|// private constructor... construction is done via factory methods...
specifier|private
name|Header
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|data
index|[
name|offset
operator|+
name|SIZE_POSITION
index|]
return|;
block|}
specifier|public
name|boolean
name|isCompressed
parameter_list|()
block|{
return|return
name|isBitOn
argument_list|(
name|getFlags
argument_list|()
argument_list|,
name|COMPRESS_BIT
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|haveHMAC
parameter_list|()
block|{
return|return
name|isBitOn
argument_list|(
name|getFlags
argument_list|()
argument_list|,
name|HMAC_BIT
argument_list|)
return|;
block|}
specifier|public
name|byte
name|getFlags
parameter_list|()
block|{
return|return
name|data
index|[
name|offset
operator|+
name|FLAGS_POSITION
index|]
return|;
block|}
comment|/**      * Saves the header bytes in the provided buffer at specified offset.      */
specifier|public
name|void
name|store
parameter_list|(
name|byte
index|[]
name|output
parameter_list|,
name|int
name|outputOffset
parameter_list|,
name|byte
name|flags
parameter_list|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|output
argument_list|,
name|outputOffset
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|output
index|[
name|outputOffset
operator|+
name|FLAGS_POSITION
index|]
operator|=
name|flags
expr_stmt|;
block|}
specifier|public
name|String
name|getKeyName
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|offset
operator|+
name|KEY_NAME_OFFSET
argument_list|,
name|size
argument_list|()
operator|-
name|KEY_NAME_OFFSET
argument_list|,
name|KEY_NAME_CHARSET
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneCryptoException
argument_list|(
literal|"Can't decode with "
operator|+
name|KEY_NAME_CHARSET
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

