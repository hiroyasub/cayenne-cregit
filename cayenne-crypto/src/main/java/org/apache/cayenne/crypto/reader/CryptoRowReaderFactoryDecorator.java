begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|ColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|RowDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|reader
operator|.
name|RowReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|reader
operator|.
name|RowReaderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|cipher
operator|.
name|CryptoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|cipher
operator|.
name|Decryptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|map
operator|.
name|ColumnMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_class
specifier|public
class|class
name|CryptoRowReaderFactoryDecorator
implements|implements
name|RowReaderFactory
block|{
specifier|private
specifier|static
specifier|final
name|MapEntryDecryptor
index|[]
name|EMPTY_DECRYPTORS
init|=
operator|new
name|MapEntryDecryptor
index|[
literal|0
index|]
decl_stmt|;
specifier|private
name|RowReaderFactory
name|delegate
decl_stmt|;
specifier|private
name|CryptoFactory
name|cryptoFactory
decl_stmt|;
specifier|private
name|ColumnMapper
name|columnMapper
decl_stmt|;
specifier|public
name|CryptoRowReaderFactoryDecorator
parameter_list|(
annotation|@
name|Inject
name|RowReaderFactory
name|delegate
parameter_list|,
annotation|@
name|Inject
name|CryptoFactory
name|cryptoFactory
parameter_list|,
annotation|@
name|Inject
name|ColumnMapper
name|columnMapper
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|cryptoFactory
operator|=
name|cryptoFactory
expr_stmt|;
name|this
operator|.
name|columnMapper
operator|=
name|columnMapper
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RowReader
argument_list|<
name|?
argument_list|>
name|rowReader
parameter_list|(
specifier|final
name|RowDescriptor
name|descriptor
parameter_list|,
name|QueryMetadata
name|queryMetadata
parameter_list|,
name|DbAdapter
name|adapter
parameter_list|,
name|Map
argument_list|<
name|ObjAttribute
argument_list|,
name|ColumnDescriptor
argument_list|>
name|attributeOverrides
parameter_list|)
block|{
specifier|final
name|RowReader
argument_list|<
name|?
argument_list|>
name|delegateReader
init|=
name|delegate
operator|.
name|rowReader
argument_list|(
name|descriptor
argument_list|,
name|queryMetadata
argument_list|,
name|adapter
argument_list|,
name|attributeOverrides
argument_list|)
decl_stmt|;
return|return
operator|new
name|RowReader
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|len
decl_stmt|;
specifier|private
name|MapEntryDecryptor
index|[]
name|decryptors
decl_stmt|;
specifier|private
name|void
name|ensureDecryptorCompiled
parameter_list|(
name|Object
name|row
parameter_list|)
block|{
if|if
condition|(
name|decryptors
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|MapEntryDecryptor
argument_list|>
name|decList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|row
operator|instanceof
name|Map
condition|)
block|{
name|ColumnDescriptor
index|[]
name|columns
init|=
name|descriptor
operator|.
name|getColumns
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|columns
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|DbAttribute
name|a
init|=
name|columns
index|[
name|i
index|]
operator|.
name|getAttribute
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
name|columnMapper
operator|.
name|isEncrypted
argument_list|(
name|a
argument_list|)
condition|)
block|{
if|if
condition|(
name|decList
operator|==
literal|null
condition|)
block|{
name|decList
operator|=
operator|new
name|ArrayList
argument_list|<
name|MapEntryDecryptor
argument_list|>
argument_list|(
name|len
operator|-
name|i
argument_list|)
expr_stmt|;
block|}
name|decList
operator|.
name|add
argument_list|(
operator|new
name|MapEntryDecryptor
argument_list|(
name|columns
index|[
name|i
index|]
operator|.
name|getDataRowKey
argument_list|()
argument_list|,
name|cryptoFactory
operator|.
name|getDecryptor
argument_list|(
name|a
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|decryptors
operator|=
name|decList
operator|==
literal|null
condition|?
name|EMPTY_DECRYPTORS
else|:
name|decList
operator|.
name|toArray
argument_list|(
operator|new
name|MapEntryDecryptor
index|[
name|decList
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|len
operator|=
name|decryptors
operator|.
name|length
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|readRow
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
block|{
name|Object
name|row
init|=
name|delegateReader
operator|.
name|readRow
argument_list|(
name|resultSet
argument_list|)
decl_stmt|;
name|ensureDecryptorCompiled
argument_list|(
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
operator|)
name|row
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|MapEntryDecryptor
name|decryptor
init|=
name|decryptors
index|[
name|i
index|]
decl_stmt|;
name|Object
name|encrypted
init|=
name|map
operator|.
name|get
argument_list|(
name|decryptor
operator|.
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|encrypted
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|decryptor
operator|.
name|key
argument_list|,
name|decryptor
operator|.
name|decryptor
operator|.
name|decrypt
argument_list|(
name|encrypted
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|row
return|;
block|}
block|}
return|;
block|}
class|class
name|MapEntryDecryptor
block|{
specifier|final
name|String
name|key
decl_stmt|;
specifier|final
name|Decryptor
name|decryptor
decl_stmt|;
name|MapEntryDecryptor
parameter_list|(
name|String
name|key
parameter_list|,
name|Decryptor
name|decryptor
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|decryptor
operator|=
name|decryptor
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

