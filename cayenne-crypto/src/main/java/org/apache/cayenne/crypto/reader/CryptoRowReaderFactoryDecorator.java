begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|ColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|RowDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|reader
operator|.
name|DefaultRowReaderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|reader
operator|.
name|RowReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|ExtendedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|ExtendedTypeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|map
operator|.
name|ColumnMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|MapTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|bytes
operator|.
name|BytesDecryptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|bytes
operator|.
name|BytesTransformerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|value
operator|.
name|ValueDecryptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|value
operator|.
name|ValueTransformerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|EntityResultSegment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ScalarResultSegment
import|;
end_import

begin_class
specifier|public
class|class
name|CryptoRowReaderFactoryDecorator
extends|extends
name|DefaultRowReaderFactory
block|{
specifier|private
name|TransformerFactory
name|transformerFactory
decl_stmt|;
specifier|private
name|ColumnMapper
name|columnMapper
decl_stmt|;
specifier|private
name|BytesTransformerFactory
name|bytesTransformerFactory
decl_stmt|;
specifier|private
name|ValueTransformerFactory
name|valueTransformerFactory
decl_stmt|;
specifier|public
name|CryptoRowReaderFactoryDecorator
parameter_list|(
annotation|@
name|Inject
name|TransformerFactory
name|transformerFactory
parameter_list|,
annotation|@
name|Inject
name|ColumnMapper
name|columnMapper
parameter_list|,
annotation|@
name|Inject
name|BytesTransformerFactory
name|bytesTransformerFactory
parameter_list|,
annotation|@
name|Inject
name|ValueTransformerFactory
name|valueTransformerFactory
parameter_list|)
block|{
name|this
operator|.
name|transformerFactory
operator|=
name|transformerFactory
expr_stmt|;
name|this
operator|.
name|columnMapper
operator|=
name|columnMapper
expr_stmt|;
name|this
operator|.
name|bytesTransformerFactory
operator|=
name|bytesTransformerFactory
expr_stmt|;
name|this
operator|.
name|valueTransformerFactory
operator|=
name|valueTransformerFactory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RowReader
argument_list|<
name|?
argument_list|>
name|rowReader
parameter_list|(
name|RowDescriptor
name|descriptor
parameter_list|,
name|QueryMetadata
name|queryMetadata
parameter_list|,
name|DbAdapter
name|adapter
parameter_list|,
name|Map
argument_list|<
name|ObjAttribute
argument_list|,
name|ColumnDescriptor
argument_list|>
name|attributeOverrides
parameter_list|)
block|{
name|RowDescriptor
name|encryptedRowDescriptor
init|=
name|encryptedRowDescriptor
argument_list|(
name|descriptor
argument_list|,
name|adapter
operator|.
name|getExtendedTypes
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|super
operator|.
name|rowReader
argument_list|(
name|encryptedRowDescriptor
argument_list|,
name|queryMetadata
argument_list|,
name|adapter
argument_list|,
name|attributeOverrides
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|RowReader
argument_list|<
name|?
argument_list|>
name|createScalarRowReader
parameter_list|(
name|RowDescriptor
name|descriptor
parameter_list|,
name|QueryMetadata
name|queryMetadata
parameter_list|,
name|ScalarResultSegment
name|segment
parameter_list|)
block|{
name|RowReader
argument_list|<
name|?
argument_list|>
name|scalarRowReader
init|=
name|super
operator|.
name|createScalarRowReader
argument_list|(
name|descriptor
argument_list|,
name|queryMetadata
argument_list|,
name|segment
argument_list|)
decl_stmt|;
return|return
operator|new
name|DecoratedScalarRowReader
argument_list|(
name|descriptor
operator|.
name|getColumns
argument_list|()
index|[
name|segment
operator|.
name|getColumnOffset
argument_list|()
index|]
argument_list|,
name|scalarRowReader
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|RowReader
argument_list|<
name|?
argument_list|>
name|createEntityRowReader
parameter_list|(
name|RowDescriptor
name|descriptor
parameter_list|,
name|QueryMetadata
name|queryMetadata
parameter_list|,
name|EntityResultSegment
name|resultMetadata
parameter_list|,
name|PostprocessorFactory
name|postProcessorFactory
parameter_list|)
block|{
name|RowReader
argument_list|<
name|?
argument_list|>
name|entityRowReader
init|=
name|super
operator|.
name|createEntityRowReader
argument_list|(
name|descriptor
argument_list|,
name|queryMetadata
argument_list|,
name|resultMetadata
argument_list|,
name|postProcessorFactory
argument_list|)
decl_stmt|;
return|return
operator|new
name|DecoratedEntityRowReader
argument_list|(
name|descriptor
argument_list|,
name|entityRowReader
argument_list|,
name|resultMetadata
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|RowReader
argument_list|<
name|?
argument_list|>
name|createFullRowReader
parameter_list|(
name|RowDescriptor
name|descriptor
parameter_list|,
name|QueryMetadata
name|queryMetadata
parameter_list|,
name|PostprocessorFactory
name|postProcessorFactory
parameter_list|)
block|{
name|RowReader
argument_list|<
name|?
argument_list|>
name|fullRowReader
init|=
name|super
operator|.
name|createFullRowReader
argument_list|(
name|descriptor
argument_list|,
name|queryMetadata
argument_list|,
name|postProcessorFactory
argument_list|)
decl_stmt|;
return|return
operator|new
name|DecoratedFullRowReader
argument_list|(
name|descriptor
argument_list|,
name|fullRowReader
argument_list|)
return|;
block|}
specifier|protected
name|RowDescriptor
name|encryptedRowDescriptor
parameter_list|(
name|RowDescriptor
name|descriptor
parameter_list|,
name|ExtendedTypeMap
name|typeMap
parameter_list|)
block|{
comment|// need to tweak the original descriptor to ensure binary columns are read as binary, eben if the plain Java
comment|// type is not a byte[]
name|ColumnDescriptor
index|[]
name|originalColumns
init|=
name|descriptor
operator|.
name|getColumns
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|originalColumns
operator|.
name|length
decl_stmt|;
name|ExtendedType
index|[]
name|originalConverters
init|=
name|descriptor
operator|.
name|getConverters
argument_list|()
decl_stmt|;
name|ExtendedType
index|[]
name|encryptedConverters
init|=
operator|new
name|ExtendedType
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|DbAttribute
name|attribute
init|=
name|originalColumns
index|[
name|i
index|]
operator|.
name|getAttribute
argument_list|()
decl_stmt|;
name|ExtendedType
name|t
init|=
name|originalConverters
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|attribute
operator|!=
literal|null
operator|&&
name|columnMapper
operator|.
name|isEncrypted
argument_list|(
name|attribute
argument_list|)
condition|)
block|{
comment|// only char or binary columns can store encrypted data
if|if
condition|(
name|TypesMapping
operator|.
name|isBinary
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|t
operator|=
name|typeMap
operator|.
name|getRegisteredType
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|TypesMapping
operator|.
name|isCharacter
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|t
operator|=
name|typeMap
operator|.
name|getRegisteredType
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// else - warning?
block|}
name|encryptedConverters
index|[
name|i
index|]
operator|=
name|t
expr_stmt|;
block|}
return|return
operator|new
name|DecoratedRowDescriptor
argument_list|(
name|descriptor
argument_list|,
name|originalColumns
argument_list|,
name|encryptedConverters
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|DecoratedRowDescriptor
extends|extends
name|RowDescriptor
block|{
specifier|private
specifier|final
name|RowDescriptor
name|original
decl_stmt|;
name|DecoratedRowDescriptor
parameter_list|(
name|RowDescriptor
name|rowDescriptor
parameter_list|,
name|ColumnDescriptor
index|[]
name|columns
parameter_list|,
name|ExtendedType
index|[]
name|converters
parameter_list|)
block|{
name|this
operator|.
name|original
operator|=
name|rowDescriptor
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|converters
operator|=
name|converters
expr_stmt|;
block|}
specifier|public
name|RowDescriptor
name|unwrap
parameter_list|()
block|{
return|return
name|original
return|;
block|}
block|}
specifier|private
class|class
name|DecoratedScalarRowReader
implements|implements
name|RowReader
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
specifier|final
name|RowReader
argument_list|<
name|?
argument_list|>
name|delegateReader
decl_stmt|;
specifier|private
specifier|final
name|ValueDecryptor
name|valueDecryptor
decl_stmt|;
specifier|private
specifier|final
name|BytesDecryptor
name|bytesDecryptor
decl_stmt|;
name|DecoratedScalarRowReader
parameter_list|(
name|ColumnDescriptor
name|descriptor
parameter_list|,
name|RowReader
argument_list|<
name|?
argument_list|>
name|delegateReader
parameter_list|)
block|{
name|this
operator|.
name|delegateReader
operator|=
name|delegateReader
expr_stmt|;
if|if
condition|(
name|descriptor
operator|.
name|getAttribute
argument_list|()
operator|!=
literal|null
operator|&&
name|columnMapper
operator|.
name|isEncrypted
argument_list|(
name|descriptor
operator|.
name|getAttribute
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|valueDecryptor
operator|=
name|valueTransformerFactory
operator|.
name|decryptor
argument_list|(
name|descriptor
operator|.
name|getAttribute
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|bytesDecryptor
operator|=
name|bytesTransformerFactory
operator|.
name|decryptor
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|valueDecryptor
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|bytesDecryptor
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|readRow
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
block|{
name|Object
name|value
init|=
name|delegateReader
operator|.
name|readRow
argument_list|(
name|resultSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueDecryptor
operator|==
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
return|return
name|valueDecryptor
operator|.
name|decrypt
argument_list|(
name|bytesDecryptor
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|abstract
class|class
name|DecoratedEntityFullRowReader
implements|implements
name|RowReader
argument_list|<
name|Object
argument_list|>
block|{
specifier|final
name|RowDescriptor
name|descriptor
decl_stmt|;
specifier|final
name|RowReader
argument_list|<
name|?
argument_list|>
name|delegateReader
decl_stmt|;
specifier|final
name|EntityResultSegment
name|resultMetadata
decl_stmt|;
name|boolean
name|decryptorCompiled
decl_stmt|;
name|MapTransformer
name|decryptor
decl_stmt|;
name|DecoratedEntityFullRowReader
parameter_list|(
name|RowDescriptor
name|descriptor
parameter_list|,
name|RowReader
argument_list|<
name|?
argument_list|>
name|delegateReader
parameter_list|,
name|EntityResultSegment
name|resultMetadata
parameter_list|)
block|{
name|this
operator|.
name|descriptor
operator|=
name|descriptor
expr_stmt|;
name|this
operator|.
name|delegateReader
operator|=
name|delegateReader
expr_stmt|;
name|this
operator|.
name|resultMetadata
operator|=
name|resultMetadata
expr_stmt|;
block|}
specifier|abstract
name|void
name|ensureDecryptorCompiled
parameter_list|(
name|Object
name|row
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|Object
name|readRow
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
block|{
name|Object
name|row
init|=
name|delegateReader
operator|.
name|readRow
argument_list|(
name|resultSet
argument_list|)
decl_stmt|;
name|ensureDecryptorCompiled
argument_list|(
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|decryptor
operator|!=
literal|null
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|row
decl_stmt|;
name|decryptor
operator|.
name|transform
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
return|return
name|row
return|;
block|}
block|}
specifier|private
class|class
name|DecoratedEntityRowReader
extends|extends
name|DecoratedEntityFullRowReader
block|{
name|DecoratedEntityRowReader
parameter_list|(
name|RowDescriptor
name|descriptor
parameter_list|,
name|RowReader
argument_list|<
name|?
argument_list|>
name|delegateReader
parameter_list|,
name|EntityResultSegment
name|resultMetadata
parameter_list|)
block|{
name|super
argument_list|(
name|descriptor
argument_list|,
name|delegateReader
argument_list|,
name|resultMetadata
argument_list|)
expr_stmt|;
block|}
name|void
name|ensureDecryptorCompiled
parameter_list|(
name|Object
name|row
parameter_list|)
block|{
if|if
condition|(
operator|!
name|decryptorCompiled
condition|)
block|{
name|int
name|offset
init|=
name|resultMetadata
operator|.
name|getColumnOffset
argument_list|()
decl_stmt|;
name|int
name|fieldsSize
init|=
name|resultMetadata
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|ColumnDescriptor
index|[]
name|columnDescriptors
init|=
operator|new
name|ColumnDescriptor
index|[
name|fieldsSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|,
name|j
init|=
literal|0
init|;
name|i
operator|<
name|offset
operator|+
name|fieldsSize
condition|;
name|i
operator|++
control|)
block|{
name|columnDescriptors
index|[
name|j
operator|++
index|]
operator|=
name|descriptor
operator|.
name|getColumns
argument_list|()
index|[
name|i
index|]
expr_stmt|;
block|}
name|decryptor
operator|=
name|transformerFactory
operator|.
name|decryptor
argument_list|(
name|columnDescriptors
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|decryptorCompiled
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|readRow
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
block|{
return|return
name|super
operator|.
name|readRow
argument_list|(
name|resultSet
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|DecoratedFullRowReader
extends|extends
name|DecoratedEntityFullRowReader
block|{
name|DecoratedFullRowReader
parameter_list|(
name|RowDescriptor
name|descriptor
parameter_list|,
name|RowReader
argument_list|<
name|?
argument_list|>
name|delegateReader
parameter_list|)
block|{
name|super
argument_list|(
name|descriptor
argument_list|,
name|delegateReader
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|void
name|ensureDecryptorCompiled
parameter_list|(
name|Object
name|row
parameter_list|)
block|{
if|if
condition|(
operator|!
name|decryptorCompiled
condition|)
block|{
name|decryptor
operator|=
name|transformerFactory
operator|.
name|decryptor
argument_list|(
name|descriptor
operator|.
name|getColumns
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|decryptorCompiled
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|readRow
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
block|{
return|return
name|super
operator|.
name|readRow
argument_list|(
name|resultSet
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

