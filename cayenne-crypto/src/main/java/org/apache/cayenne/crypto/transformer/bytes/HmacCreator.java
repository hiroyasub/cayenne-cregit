begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|bytes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Mac
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_comment
comment|/**  * Actual authentication code generation logic that is used  * by both {@link HmacEncryptor} and {@link HmacDecryptor}.  *  * @since 4.0  */
end_comment

begin_class
specifier|abstract
class|class
name|HmacCreator
block|{
comment|/**      * Default algorithm for authentication code creation.      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_HMAC_ALGORITHM
init|=
literal|"HmacSHA256"
decl_stmt|;
specifier|private
name|Header
name|header
decl_stmt|;
specifier|private
name|Mac
name|mac
decl_stmt|;
name|HmacCreator
parameter_list|(
name|Header
name|header
parameter_list|,
name|Key
name|key
parameter_list|)
block|{
name|this
operator|.
name|header
operator|=
name|header
expr_stmt|;
try|try
block|{
comment|// Currently algorithm is hardcoded, but can be easily transformed into configurable parameter
name|mac
operator|=
name|Mac
operator|.
name|getInstance
argument_list|(
name|DEFAULT_HMAC_ALGORITHM
argument_list|)
expr_stmt|;
name|mac
operator|.
name|init
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|nsae
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Algorithm %s not supported for HMAC generation"
argument_list|,
name|nsae
argument_list|,
name|DEFAULT_HMAC_ALGORITHM
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvalidKeyException
name|ike
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Invalid key for HMAC generation"
argument_list|,
name|ike
argument_list|)
throw|;
block|}
block|}
name|byte
index|[]
name|createHmac
parameter_list|(
name|byte
index|[]
name|input
parameter_list|)
block|{
name|byte
index|[]
name|rawHeader
init|=
operator|new
name|byte
index|[
name|header
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|header
operator|.
name|store
argument_list|(
name|rawHeader
argument_list|,
literal|0
argument_list|,
name|header
operator|.
name|getFlags
argument_list|()
argument_list|)
expr_stmt|;
name|mac
operator|.
name|update
argument_list|(
name|rawHeader
argument_list|)
expr_stmt|;
return|return
name|mac
operator|.
name|doFinal
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
end_class

end_unit

