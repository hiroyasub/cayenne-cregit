begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|value
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|BadPaddingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|IllegalBlockSizeException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|KeyGenerator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|NoSuchPaddingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|JceValueEncryptorTest
block|{
specifier|private
name|Cipher
name|encCipher
decl_stmt|;
specifier|private
name|Cipher
name|decCipher
decl_stmt|;
specifier|private
name|SecretKey
name|key
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|NoSuchAlgorithmException
throws|,
name|NoSuchPaddingException
throws|,
name|InvalidKeyException
block|{
name|KeyGenerator
name|keyGen
init|=
name|KeyGenerator
operator|.
name|getInstance
argument_list|(
literal|"AES"
argument_list|)
decl_stmt|;
name|keyGen
operator|.
name|init
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|keyGen
operator|.
name|generateKey
argument_list|()
expr_stmt|;
name|this
operator|.
name|encCipher
operator|=
name|Cipher
operator|.
name|getInstance
argument_list|(
literal|"AES/ECB/PKCS5Padding"
argument_list|)
expr_stmt|;
name|this
operator|.
name|encCipher
operator|.
name|init
argument_list|(
name|Cipher
operator|.
name|ENCRYPT_MODE
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|decCipher
operator|=
name|Cipher
operator|.
name|getInstance
argument_list|(
literal|"AES/ECB/PKCS5Padding"
argument_list|)
expr_stmt|;
name|this
operator|.
name|decCipher
operator|.
name|init
argument_list|(
name|Cipher
operator|.
name|DECRYPT_MODE
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransform_BytesToBytes
parameter_list|()
throws|throws
name|IllegalBlockSizeException
throws|,
name|BadPaddingException
block|{
name|JceValueEncryptor
name|e
init|=
operator|new
name|JceValueEncryptor
argument_list|(
name|BytesToBytesConverter
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b1
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|}
decl_stmt|;
name|byte
index|[]
name|b2
init|=
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|byte
index|[]
name|b1_t
init|=
operator|(
name|byte
index|[]
operator|)
name|e
operator|.
name|transform
argument_list|(
name|encCipher
argument_list|,
name|b1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|b1_t
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encCipher
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|b1_t
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|b1
argument_list|,
name|decCipher
operator|.
name|doFinal
argument_list|(
name|b1_t
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b2_t
init|=
operator|(
name|byte
index|[]
operator|)
name|e
operator|.
name|transform
argument_list|(
name|encCipher
argument_list|,
name|b2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|b2_t
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encCipher
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|b2_t
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|b2
argument_list|,
name|decCipher
operator|.
name|doFinal
argument_list|(
name|b2_t
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransform_BytesToBytes_DifferentSizes
parameter_list|()
block|{
name|JceValueEncryptor
name|e
init|=
operator|new
name|JceValueEncryptor
argument_list|(
name|BytesToBytesConverter
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|int
name|blockSize
init|=
name|encCipher
operator|.
name|getBlockSize
argument_list|()
decl_stmt|;
name|byte
index|[]
name|b1
init|=
operator|new
name|byte
index|[]
block|{}
decl_stmt|;
name|byte
index|[]
name|b2
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|}
decl_stmt|;
name|byte
index|[]
name|b3
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|}
decl_stmt|;
name|byte
index|[]
name|b4
init|=
operator|new
name|byte
index|[
name|blockSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockSize
condition|;
name|i
operator|++
control|)
block|{
name|b4
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
name|byte
index|[]
name|b5
init|=
operator|new
name|byte
index|[
name|blockSize
operator|+
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blockSize
operator|+
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|b5
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
name|byte
index|[]
name|b1_t
init|=
operator|(
name|byte
index|[]
operator|)
name|e
operator|.
name|transform
argument_list|(
name|encCipher
argument_list|,
name|b1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|encCipher
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|b1_t
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b2_t
init|=
operator|(
name|byte
index|[]
operator|)
name|e
operator|.
name|transform
argument_list|(
name|encCipher
argument_list|,
name|b2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|encCipher
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|b2_t
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b3_t
init|=
operator|(
name|byte
index|[]
operator|)
name|e
operator|.
name|transform
argument_list|(
name|encCipher
argument_list|,
name|b3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|encCipher
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|b3_t
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b4_t
init|=
operator|(
name|byte
index|[]
operator|)
name|e
operator|.
name|transform
argument_list|(
name|encCipher
argument_list|,
name|b4
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|encCipher
operator|.
name|getBlockSize
argument_list|()
operator|*
literal|2
argument_list|,
name|b4_t
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b5_t
init|=
operator|(
name|byte
index|[]
operator|)
name|e
operator|.
name|transform
argument_list|(
name|encCipher
argument_list|,
name|b5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|encCipher
operator|.
name|getBlockSize
argument_list|()
operator|*
literal|2
argument_list|,
name|b5_t
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransform_StringToBytes
parameter_list|()
throws|throws
name|UnsupportedEncodingException
throws|,
name|IllegalBlockSizeException
throws|,
name|BadPaddingException
block|{
name|JceValueEncryptor
name|e
init|=
operator|new
name|JceValueEncryptor
argument_list|(
name|StringToBytesConverter
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|String
name|s1
init|=
literal|"ab"
decl_stmt|;
name|String
name|s2
init|=
literal|"cd"
decl_stmt|;
name|byte
index|[]
name|b1_t
init|=
operator|(
name|byte
index|[]
operator|)
name|e
operator|.
name|transform
argument_list|(
name|encCipher
argument_list|,
name|s1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|b1_t
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encCipher
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|b1_t
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s1
argument_list|,
operator|new
name|String
argument_list|(
name|decCipher
operator|.
name|doFinal
argument_list|(
name|b1_t
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b2_t
init|=
operator|(
name|byte
index|[]
operator|)
name|e
operator|.
name|transform
argument_list|(
name|encCipher
argument_list|,
name|s2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|b2_t
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encCipher
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|b2_t
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s2
argument_list|,
operator|new
name|String
argument_list|(
name|decCipher
operator|.
name|doFinal
argument_list|(
name|b2_t
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

