begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|bytes
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|CryptoConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|key
operator|.
name|KeySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultBytesTransformerFactoryTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testCreateEncryptionHeader
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|KeySource
name|keySource
init|=
name|mock
argument_list|(
name|KeySource
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|keySource
operator|.
name|getDefaultKeyAlias
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"bla"
argument_list|)
expr_stmt|;
name|Header
name|h1
init|=
name|DefaultBytesTransformerFactory
operator|.
name|createEncryptionHeader
argument_list|(
name|properties
argument_list|,
name|keySource
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|h1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h1
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bla"
argument_list|,
name|h1
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|COMPRESSION
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|Header
name|h2
init|=
name|DefaultBytesTransformerFactory
operator|.
name|createEncryptionHeader
argument_list|(
name|properties
argument_list|,
name|keySource
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|h2
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bla"
argument_list|,
name|h2
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|COMPRESSION
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|Header
name|h3
init|=
name|DefaultBytesTransformerFactory
operator|.
name|createEncryptionHeader
argument_list|(
name|properties
argument_list|,
name|keySource
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|h3
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bla"
argument_list|,
name|h3
operator|.
name|getKeyName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

