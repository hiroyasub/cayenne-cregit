begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|unit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
specifier|public
class|class
name|CryptoUnitUtils
block|{
specifier|public
specifier|static
name|byte
index|[]
name|hexToBytes
parameter_list|(
name|String
name|hexString
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|BigInteger
argument_list|(
name|hexString
argument_list|,
literal|16
argument_list|)
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// http://stackoverflow.com/questions/4407779/biginteger-to-byte
if|if
condition|(
name|bytes
operator|.
name|length
operator|>
literal|0
operator|&&
name|bytes
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
return|return
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|bytes
argument_list|,
literal|1
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|bytes
return|;
block|}
block|}
block|}
end_class

end_unit

