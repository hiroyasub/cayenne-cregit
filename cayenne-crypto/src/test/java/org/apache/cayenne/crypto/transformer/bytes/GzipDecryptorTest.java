begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|bytes
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|unit
operator|.
name|CryptoUnitUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|GzipDecryptorTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testGunzip
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|input1
init|=
name|CryptoUnitUtils
operator|.
name|hexToBytes
argument_list|(
literal|"1f8b0800000000000000f348cdc9c957f0409000a91a078c11000000"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|output1
init|=
name|GzipDecryptor
operator|.
name|gunzip
argument_list|(
name|input1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expectedOutput1
init|=
literal|"Hello Hello Hello"
operator|.
name|getBytes
argument_list|(
literal|"UTF8"
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedOutput1
argument_list|,
name|output1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGunzip_Large
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|input1
init|=
name|readResource
argument_list|(
literal|"plain.txt.gz"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|output1
init|=
name|GzipDecryptor
operator|.
name|gunzip
argument_list|(
name|input1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expectedOutput1
init|=
name|readResource
argument_list|(
literal|"plain.txt"
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedOutput1
argument_list|,
name|output1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|readResource
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|name
argument_list|)
init|;
init|)
block|{
name|assertNotNull
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|read
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

