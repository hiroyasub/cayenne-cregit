begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|cipher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|CayenneCryptoException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|CryptoConstants
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultCipherFactoryTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testConstructor
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
operator|new
name|DefaultCipherFactory
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneCryptoException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|properties
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|CIPHER_ALGORITHM
argument_list|,
literal|"AES"
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|DefaultCipherFactory
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneCryptoException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|properties
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|CIPHER_MODE
argument_list|,
literal|"CBC"
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|DefaultCipherFactory
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneCryptoException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|properties
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|CIPHER_PADDING
argument_list|,
literal|"PKCS5Padding"
argument_list|)
expr_stmt|;
name|DefaultCipherFactory
name|f
init|=
operator|new
name|DefaultCipherFactory
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AES/CBC/PKCS5Padding"
argument_list|,
name|f
operator|.
name|transformation
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetCipher
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|CIPHER_ALGORITHM
argument_list|,
literal|"AES"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|CIPHER_MODE
argument_list|,
literal|"CBC"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|CryptoConstants
operator|.
name|CIPHER_PADDING
argument_list|,
literal|"PKCS5Padding"
argument_list|)
expr_stmt|;
name|DefaultCipherFactory
name|f
init|=
operator|new
name|DefaultCipherFactory
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|Cipher
name|c
init|=
name|f
operator|.
name|cipher
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AES/CBC/PKCS5Padding"
argument_list|,
name|c
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

