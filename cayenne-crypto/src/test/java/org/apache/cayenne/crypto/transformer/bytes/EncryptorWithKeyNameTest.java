begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|bytes
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
specifier|public
class|class
name|EncryptorWithKeyNameTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testGetOutputSize
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
name|byte
index|[]
name|keyName
init|=
literal|"mykey"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|BytesTransformer
name|delegate
init|=
name|mock
argument_list|(
name|BytesTransformer
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|delegate
operator|.
name|getOutputSize
argument_list|(
literal|8
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|8
argument_list|)
expr_stmt|;
comment|// try with non-standard block size..
name|EncryptorWithKeyName
name|encryptor
init|=
operator|new
name|EncryptorWithKeyName
argument_list|(
name|delegate
argument_list|,
name|keyName
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|encryptor
operator|.
name|getOutputSize
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransform
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
name|byte
index|[]
name|keyName
init|=
literal|"mykey"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|BytesTransformer
name|delegate
init|=
name|mock
argument_list|(
name|BytesTransformer
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|delegate
operator|.
name|getOutputSize
argument_list|(
literal|8
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|byte
index|[]
name|input
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|}
decl_stmt|;
name|byte
index|[]
name|output
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
index|[]
name|args
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|byte
index|[]
name|input
init|=
operator|(
name|byte
index|[]
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
name|byte
index|[]
name|output
init|=
operator|(
name|byte
index|[]
operator|)
name|args
index|[
literal|1
index|]
decl_stmt|;
name|int
name|offset
init|=
operator|(
name|Integer
operator|)
name|args
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|output
index|[
name|i
operator|+
name|offset
index|]
operator|=
literal|1
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|delegate
argument_list|)
operator|.
name|transform
argument_list|(
name|input
argument_list|,
name|output
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// intentionally non-standard block size..
name|EncryptorWithKeyName
name|encryptor
init|=
operator|new
name|EncryptorWithKeyName
argument_list|(
name|delegate
argument_list|,
name|keyName
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|encryptor
operator|.
name|transform
argument_list|(
name|input
argument_list|,
name|output
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|'m'
block|,
literal|'y'
block|,
literal|'k'
block|,
literal|'e'
block|,
literal|'y'
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

