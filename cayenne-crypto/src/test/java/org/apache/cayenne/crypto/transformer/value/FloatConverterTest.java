begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|crypto
operator|.
name|transformer
operator|.
name|value
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|FloatConverterTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testConverter
parameter_list|()
block|{
name|Float
name|originalValue
init|=
literal|36.6f
decl_stmt|;
name|FloatConverter
name|converter
init|=
operator|new
name|FloatConverter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|originalValue
argument_list|,
name|converter
operator|.
name|fromBytes
argument_list|(
name|converter
operator|.
name|toBytes
argument_list|(
name|originalValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConverter_Negative
parameter_list|()
block|{
name|Float
name|originalValue
init|=
operator|-
literal|36.6f
decl_stmt|;
name|FloatConverter
name|converter
init|=
operator|new
name|FloatConverter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|originalValue
argument_list|,
name|converter
operator|.
name|fromBytes
argument_list|(
name|converter
operator|.
name|toBytes
argument_list|(
name|originalValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConverter_MaxValue
parameter_list|()
block|{
name|Float
name|originalValue
init|=
name|Float
operator|.
name|MAX_VALUE
decl_stmt|;
name|FloatConverter
name|converter
init|=
operator|new
name|FloatConverter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|originalValue
argument_list|,
name|converter
operator|.
name|fromBytes
argument_list|(
name|converter
operator|.
name|toBytes
argument_list|(
name|originalValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConverter_MinValue
parameter_list|()
block|{
name|Float
name|originalValue
init|=
name|Float
operator|.
name|MIN_VALUE
decl_stmt|;
name|FloatConverter
name|converter
init|=
operator|new
name|FloatConverter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|originalValue
argument_list|,
name|converter
operator|.
name|fromBytes
argument_list|(
name|converter
operator|.
name|toBytes
argument_list|(
name|originalValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConverter_Zero
parameter_list|()
block|{
name|Float
name|originalValue
init|=
literal|0f
decl_stmt|;
name|FloatConverter
name|converter
init|=
operator|new
name|FloatConverter
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|originalValue
argument_list|,
name|converter
operator|.
name|fromBytes
argument_list|(
name|converter
operator|.
name|toBytes
argument_list|(
name|originalValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

