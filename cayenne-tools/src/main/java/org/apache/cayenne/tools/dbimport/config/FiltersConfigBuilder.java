begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
operator|.
name|dbimport
operator|.
name|config
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|FilterFactory
operator|.
name|NULL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|FilterFactory
operator|.
name|TRUE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|DbPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|EntityFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|FilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|FiltersConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|ListFilter
import|;
end_import

begin_comment
comment|/** * @since 4.0. */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|FiltersConfigBuilder
block|{
specifier|private
specifier|final
name|ReverseEngineering
name|engineering
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|EntityFilters
argument_list|>
name|filters
init|=
operator|new
name|LinkedList
argument_list|<
name|EntityFilters
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|FiltersConfigBuilder
parameter_list|(
name|ReverseEngineering
name|engineering
parameter_list|)
block|{
name|this
operator|.
name|engineering
operator|=
name|engineering
expr_stmt|;
block|}
specifier|public
name|FiltersConfigBuilder
name|add
parameter_list|(
name|EntityFilters
name|filter
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|.
name|isDefault
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|filters
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|filter
operator|.
name|getDbPath
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|DbPath
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|filters
operator|.
name|add
argument_list|(
name|defaultFilter
argument_list|(
name|filter
operator|.
name|getDbPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|FiltersConfig
name|filtersConfig
parameter_list|()
block|{
name|DbPath
name|path
init|=
operator|new
name|DbPath
argument_list|()
decl_stmt|;
name|filters
operator|.
name|addAll
argument_list|(
name|processFilters
argument_list|(
name|path
argument_list|,
name|engineering
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|addAll
argument_list|(
name|processSchemas
argument_list|(
name|path
argument_list|,
name|engineering
operator|.
name|getSchemas
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|addAll
argument_list|(
name|processCatalog
argument_list|(
name|path
argument_list|,
name|engineering
operator|.
name|getCatalogs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|filters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
name|defaultFilter
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FiltersConfig
argument_list|(
name|filters
argument_list|)
return|;
block|}
specifier|private
name|EntityFilters
name|defaultFilter
parameter_list|(
name|DbPath
name|path
parameter_list|)
block|{
return|return
operator|new
name|EntityFilters
argument_list|(
name|path
argument_list|,
name|TRUE
argument_list|,
name|TRUE
argument_list|,
name|NULL
argument_list|)
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|?
extends|extends
name|EntityFilters
argument_list|>
name|processSchemas
parameter_list|(
name|DbPath
name|root
parameter_list|,
name|Collection
argument_list|<
name|Schema
argument_list|>
name|schemas
parameter_list|)
block|{
name|List
argument_list|<
name|EntityFilters
argument_list|>
name|filters
init|=
operator|new
name|LinkedList
argument_list|<
name|EntityFilters
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Schema
name|schema
range|:
name|schemas
control|)
block|{
name|DbPath
name|path
init|=
operator|new
name|DbPath
argument_list|(
name|root
operator|.
name|catalog
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|EntityFilters
argument_list|>
name|schemaFilters
init|=
name|processFilters
argument_list|(
name|path
argument_list|,
name|schema
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaFilters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|schemaFilters
operator|.
name|add
argument_list|(
name|defaultFilter
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|filters
operator|.
name|addAll
argument_list|(
name|schemaFilters
argument_list|)
expr_stmt|;
block|}
return|return
name|filters
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|?
extends|extends
name|EntityFilters
argument_list|>
name|processCatalog
parameter_list|(
name|DbPath
name|root
parameter_list|,
name|Collection
argument_list|<
name|Catalog
argument_list|>
name|catalogs
parameter_list|)
block|{
name|List
argument_list|<
name|EntityFilters
argument_list|>
name|filters
init|=
operator|new
name|LinkedList
argument_list|<
name|EntityFilters
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Catalog
name|catalog
range|:
name|catalogs
control|)
block|{
name|DbPath
name|path
init|=
operator|new
name|DbPath
argument_list|(
name|catalog
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|EntityFilters
argument_list|>
name|catalogFilters
init|=
operator|new
name|LinkedList
argument_list|<
name|EntityFilters
argument_list|>
argument_list|()
decl_stmt|;
name|catalogFilters
operator|.
name|addAll
argument_list|(
name|processFilters
argument_list|(
name|path
argument_list|,
name|catalog
argument_list|)
argument_list|)
expr_stmt|;
name|catalogFilters
operator|.
name|addAll
argument_list|(
name|processSchemas
argument_list|(
name|path
argument_list|,
name|catalog
operator|.
name|getSchemas
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|catalogFilters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|catalogFilters
operator|.
name|add
argument_list|(
name|defaultFilter
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|filters
operator|.
name|addAll
argument_list|(
name|catalogFilters
argument_list|)
expr_stmt|;
block|}
return|return
name|filters
return|;
block|}
specifier|private
name|List
argument_list|<
name|EntityFilters
argument_list|>
name|processFilters
parameter_list|(
name|DbPath
name|root
parameter_list|,
name|FilterContainer
name|container
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|EntityFilters
argument_list|>
name|res
init|=
operator|new
name|LinkedList
argument_list|<
name|EntityFilters
argument_list|>
argument_list|()
decl_stmt|;
name|res
operator|.
name|addAll
argument_list|(
name|processTableFilters
argument_list|(
name|root
argument_list|,
name|container
operator|.
name|getIncludeTables
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|EntityFilters
name|filter
init|=
operator|new
name|EntityFilters
argument_list|(
name|root
argument_list|,
name|processIncludes
argument_list|(
name|container
operator|.
name|getIncludeTables
argument_list|()
argument_list|)
operator|.
name|join
argument_list|(
name|processExcludes
argument_list|(
name|container
operator|.
name|getExcludeTables
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|processIncludes
argument_list|(
name|container
operator|.
name|getIncludeColumns
argument_list|()
argument_list|)
operator|.
name|join
argument_list|(
name|processExcludes
argument_list|(
name|container
operator|.
name|getExcludeColumns
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|processIncludes
argument_list|(
name|container
operator|.
name|getIncludeProcedures
argument_list|()
argument_list|)
operator|.
name|join
argument_list|(
name|processExcludes
argument_list|(
name|container
operator|.
name|getExcludeProcedures
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
specifier|private
name|List
argument_list|<
name|EntityFilters
argument_list|>
name|processTableFilters
parameter_list|(
name|DbPath
name|root
parameter_list|,
name|Collection
argument_list|<
name|IncludeTable
argument_list|>
name|tables
parameter_list|)
block|{
name|List
argument_list|<
name|EntityFilters
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|EntityFilters
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IncludeTable
name|includeTable
range|:
name|tables
control|)
block|{
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
init|=
name|TRUE
operator|.
name|join
argument_list|(
name|processIncludes
argument_list|(
name|includeTable
operator|.
name|getIncludeColumns
argument_list|()
argument_list|)
argument_list|)
operator|.
name|join
argument_list|(
name|processExcludes
argument_list|(
name|includeTable
operator|.
name|getExcludeColumns
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DbPath
name|dbPath
init|=
operator|new
name|DbPath
argument_list|(
name|root
operator|.
name|catalog
argument_list|,
name|root
operator|.
name|schema
argument_list|,
name|includeTable
operator|.
name|getPattern
argument_list|()
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|EntityFilters
argument_list|(
name|dbPath
argument_list|,
name|NULL
argument_list|,
name|filter
argument_list|,
name|NULL
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|private
name|Filter
argument_list|<
name|String
argument_list|>
name|processIncludes
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|PatternParam
argument_list|>
name|filters
parameter_list|)
block|{
return|return
name|processFilters
argument_list|(
literal|"include"
argument_list|,
name|filters
argument_list|)
return|;
block|}
specifier|private
name|Filter
argument_list|<
name|String
argument_list|>
name|processExcludes
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|PatternParam
argument_list|>
name|excludeProcedures
parameter_list|)
block|{
return|return
name|processFilters
argument_list|(
literal|"exclude"
argument_list|,
name|excludeProcedures
argument_list|)
return|;
block|}
specifier|private
name|Filter
argument_list|<
name|String
argument_list|>
name|processFilters
parameter_list|(
name|String
name|factoryMethodName
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|PatternParam
argument_list|>
name|includeProcedures
parameter_list|)
block|{
name|Method
name|factoryMethod
decl_stmt|;
try|try
block|{
name|factoryMethod
operator|=
name|FilterFactory
operator|.
name|class
operator|.
name|getMethod
argument_list|(
name|factoryMethodName
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|Filter
argument_list|<
name|String
argument_list|>
argument_list|>
name|filters
init|=
operator|new
name|LinkedList
argument_list|<
name|Filter
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PatternParam
name|includeProcedure
range|:
name|includeProcedures
control|)
block|{
try|try
block|{
name|filters
operator|.
name|add
argument_list|(
operator|(
name|Filter
argument_list|<
name|String
argument_list|>
operator|)
name|factoryMethod
operator|.
name|invoke
argument_list|(
name|FilterFactory
operator|.
name|class
argument_list|,
name|includeProcedure
operator|.
name|getPattern
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO log / process exact parsing exception
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|filters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|NULL
return|;
block|}
return|return
operator|new
name|ListFilter
argument_list|<
name|String
argument_list|>
argument_list|(
name|filters
argument_list|)
return|;
block|}
block|}
end_class

end_unit

