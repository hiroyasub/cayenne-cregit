begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
operator|.
name|dbimport
operator|.
name|config
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|mapper
operator|.
name|DbType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|mapper
operator|.
name|DefaultJdbc2JavaTypeMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|mapper
operator|.
name|Jdbc2JavaTypeMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ClassUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isBlank
import|;
end_import

begin_comment
comment|/**  * @since 4.0.  */
end_comment

begin_class
specifier|public
class|class
name|DefaultTypeMapperBuilder
block|{
specifier|private
specifier|final
name|DefaultJdbc2JavaTypeMapper
name|mapper
decl_stmt|;
specifier|private
specifier|final
name|Log
name|logger
decl_stmt|;
specifier|public
name|DefaultTypeMapperBuilder
parameter_list|(
name|Log
name|logger
parameter_list|,
name|TypeMapper
name|typeMapper
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
name|createMapper
argument_list|(
name|typeMapper
operator|.
name|getMapperClassName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Type
name|type
range|:
name|typeMapper
operator|.
name|getTypes
argument_list|()
control|)
block|{
name|this
operator|.
name|mapper
operator|.
name|add
argument_list|(
name|buildType
argument_list|(
name|type
argument_list|)
argument_list|,
name|type
operator|.
name|getJava
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|DbType
name|buildType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
return|return
operator|new
name|DbType
argument_list|(
name|type
operator|.
name|getJdbc
argument_list|()
argument_list|,
name|type
operator|.
name|getLength
argument_list|()
argument_list|,
name|type
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|type
operator|.
name|getScale
argument_list|()
argument_list|,
name|type
operator|.
name|getNotNull
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|DefaultJdbc2JavaTypeMapper
name|createMapper
parameter_list|(
name|String
name|className
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isBlank
argument_list|(
name|className
argument_list|)
condition|)
block|{
try|try
block|{
return|return
operator|(
name|DefaultJdbc2JavaTypeMapper
operator|)
name|ClassUtils
operator|.
name|getClass
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|,
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Can't load class '"
operator|+
name|className
operator|+
literal|"': "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Can't instantiate '"
operator|+
name|className
operator|+
literal|"' make sure it has default constructor."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Can't instantiate '"
operator|+
name|className
operator|+
literal|"' make sure it has default constructor."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|DefaultJdbc2JavaTypeMapper
argument_list|()
return|;
block|}
specifier|public
name|DefaultTypeMapperBuilder
name|setUsePrimitives
parameter_list|(
name|Boolean
name|usePrimitives
parameter_list|)
block|{
name|mapper
operator|.
name|setUsePrimitives
argument_list|(
name|usePrimitives
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Jdbc2JavaTypeMapper
name|build
parameter_list|()
block|{
return|return
name|mapper
return|;
block|}
block|}
end_class

end_unit

