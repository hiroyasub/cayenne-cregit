begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
operator|.
name|dbimport
operator|.
name|config
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
operator|.
name|ExcludeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @since 4.0.  */
end_comment

begin_class
specifier|public
class|class
name|DefaultReverseEngineeringLoader
implements|implements
name|ReverseEngineeringLoader
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReverseEngineeringLoader
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ReverseEngineering
name|load
parameter_list|(
name|Resource
name|configurationResource
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
name|DocumentBuilderFactory
name|dbFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|DocumentBuilder
name|dBuilder
init|=
name|dbFactory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|dBuilder
operator|.
name|parse
argument_list|(
name|configurationResource
operator|.
name|getURL
argument_list|()
operator|.
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
name|ReverseEngineering
name|engineering
init|=
operator|new
name|ReverseEngineering
argument_list|()
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|engineering
operator|.
name|setSkipRelationshipsLoading
argument_list|(
name|loadBoolean
argument_list|(
name|root
argument_list|,
literal|"skipRelationshipsLoading"
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|setCatalogs
argument_list|(
name|loadCatalogs
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|setSchemas
argument_list|(
name|loadSchemas
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|setIncludeTables
argument_list|(
name|loadIncludeTables
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|setExcludeTables
argument_list|(
name|loadExcludeTables
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|setIncludeColumns
argument_list|(
name|loadIncludeColumns
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|setExcludeColumns
argument_list|(
name|loadExcludeColumns
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|setIncludeProcedures
argument_list|(
name|loadIncludeProcedures
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|setExcludeProcedures
argument_list|(
name|loadExcludeProcedures
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|engineering
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Boolean
name|loadBoolean
parameter_list|(
name|Element
name|root
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|loadByName
argument_list|(
name|root
argument_list|,
name|name
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|ExcludeProcedure
argument_list|>
name|loadExcludeProcedures
parameter_list|(
name|Node
name|parent
parameter_list|)
block|{
return|return
name|loadPatternParams
argument_list|(
name|ExcludeProcedure
operator|.
name|class
argument_list|,
name|getElementsByTagName
argument_list|(
name|parent
argument_list|,
literal|"excludeProcedure"
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|IncludeProcedure
argument_list|>
name|loadIncludeProcedures
parameter_list|(
name|Node
name|parent
parameter_list|)
block|{
return|return
name|loadPatternParams
argument_list|(
name|IncludeProcedure
operator|.
name|class
argument_list|,
name|getElementsByTagName
argument_list|(
name|parent
argument_list|,
literal|"includeProcedure"
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|ExcludeColumn
argument_list|>
name|loadExcludeColumns
parameter_list|(
name|Node
name|parent
parameter_list|)
block|{
return|return
name|loadPatternParams
argument_list|(
name|ExcludeColumn
operator|.
name|class
argument_list|,
name|getElementsByTagName
argument_list|(
name|parent
argument_list|,
literal|"excludeColumn"
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|IncludeColumn
argument_list|>
name|loadIncludeColumns
parameter_list|(
name|Node
name|parent
parameter_list|)
block|{
return|return
name|loadPatternParams
argument_list|(
name|IncludeColumn
operator|.
name|class
argument_list|,
name|getElementsByTagName
argument_list|(
name|parent
argument_list|,
literal|"includeColumn"
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|ExcludeTable
argument_list|>
name|loadExcludeTables
parameter_list|(
name|Node
name|parent
parameter_list|)
block|{
return|return
name|loadPatternParams
argument_list|(
name|ExcludeTable
operator|.
name|class
argument_list|,
name|getElementsByTagName
argument_list|(
name|parent
argument_list|,
literal|"excludeTable"
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|IncludeTable
argument_list|>
name|loadIncludeTables
parameter_list|(
name|Node
name|parent
parameter_list|)
block|{
name|List
argument_list|<
name|Node
argument_list|>
name|includeTables
init|=
name|getElementsByTagName
argument_list|(
name|parent
argument_list|,
literal|"includeTable"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|IncludeTable
argument_list|>
name|res
init|=
operator|new
name|LinkedList
argument_list|<
name|IncludeTable
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|includeTables
control|)
block|{
name|IncludeTable
name|includeTable
init|=
operator|new
name|IncludeTable
argument_list|()
decl_stmt|;
name|includeTable
operator|.
name|setPattern
argument_list|(
name|loadPattern
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|includeTable
operator|.
name|setIncludeColumns
argument_list|(
name|loadIncludeColumns
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|includeTable
operator|.
name|setExcludeColumns
argument_list|(
name|loadExcludeColumns
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
name|includeTable
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|Schema
argument_list|>
name|loadSchemas
parameter_list|(
name|Node
name|parent
parameter_list|)
block|{
name|List
argument_list|<
name|Node
argument_list|>
name|schemas
init|=
name|getElementsByTagName
argument_list|(
name|parent
argument_list|,
literal|"schema"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Schema
argument_list|>
name|res
init|=
operator|new
name|LinkedList
argument_list|<
name|Schema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|schemaNode
range|:
name|schemas
control|)
block|{
name|Schema
name|schema
init|=
operator|new
name|Schema
argument_list|()
decl_stmt|;
name|schema
operator|.
name|setName
argument_list|(
name|loadName
argument_list|(
name|schemaNode
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setIncludeTables
argument_list|(
name|loadIncludeTables
argument_list|(
name|schemaNode
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setExcludeTables
argument_list|(
name|loadExcludeTables
argument_list|(
name|schemaNode
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setIncludeColumns
argument_list|(
name|loadIncludeColumns
argument_list|(
name|schemaNode
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setExcludeColumns
argument_list|(
name|loadExcludeColumns
argument_list|(
name|schemaNode
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setIncludeProcedures
argument_list|(
name|loadIncludeProcedures
argument_list|(
name|schemaNode
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setExcludeProcedures
argument_list|(
name|loadExcludeProcedures
argument_list|(
name|schemaNode
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|Catalog
argument_list|>
name|loadCatalogs
parameter_list|(
name|Node
name|parent
parameter_list|)
block|{
name|List
argument_list|<
name|Node
argument_list|>
name|catalogs
init|=
name|getElementsByTagName
argument_list|(
name|parent
argument_list|,
literal|"catalog"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Catalog
argument_list|>
name|res
init|=
operator|new
name|LinkedList
argument_list|<
name|Catalog
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|catalogNode
range|:
name|catalogs
control|)
block|{
name|Catalog
name|catalog
init|=
operator|new
name|Catalog
argument_list|()
decl_stmt|;
name|catalog
operator|.
name|setName
argument_list|(
name|loadName
argument_list|(
name|catalogNode
argument_list|)
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setSchemas
argument_list|(
name|loadSchemas
argument_list|(
name|catalogNode
argument_list|)
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setIncludeTables
argument_list|(
name|loadIncludeTables
argument_list|(
name|catalogNode
argument_list|)
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setExcludeTables
argument_list|(
name|loadExcludeTables
argument_list|(
name|catalogNode
argument_list|)
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setIncludeColumns
argument_list|(
name|loadIncludeColumns
argument_list|(
name|catalogNode
argument_list|)
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setExcludeColumns
argument_list|(
name|loadExcludeColumns
argument_list|(
name|catalogNode
argument_list|)
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setIncludeProcedures
argument_list|(
name|loadIncludeProcedures
argument_list|(
name|catalogNode
argument_list|)
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setExcludeProcedures
argument_list|(
name|loadExcludeProcedures
argument_list|(
name|catalogNode
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
specifier|private
name|String
name|loadName
parameter_list|(
name|Node
name|catalogNode
parameter_list|)
block|{
return|return
name|loadByName
argument_list|(
name|catalogNode
argument_list|,
literal|"name"
argument_list|)
return|;
block|}
specifier|private
name|String
name|loadPattern
parameter_list|(
name|Node
name|catalogNode
parameter_list|)
block|{
return|return
name|loadByName
argument_list|(
name|catalogNode
argument_list|,
literal|"pattern"
argument_list|)
return|;
block|}
specifier|private
name|String
name|loadByName
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|attrName
parameter_list|)
block|{
name|Node
name|name
init|=
name|node
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
name|attrName
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
return|return
name|name
operator|.
name|getTextContent
argument_list|()
return|;
block|}
name|String
name|content
init|=
name|node
operator|.
name|getTextContent
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|content
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|content
return|;
block|}
name|List
argument_list|<
name|Node
argument_list|>
name|names
init|=
name|getElementsByTagName
argument_list|(
name|node
argument_list|,
name|attrName
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|names
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTextContent
argument_list|()
return|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|PatternParam
parameter_list|>
name|Collection
argument_list|<
name|T
argument_list|>
name|loadPatternParams
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|List
argument_list|<
name|Node
argument_list|>
name|nodes
parameter_list|)
block|{
name|Collection
argument_list|<
name|T
argument_list|>
name|res
init|=
operator|new
name|LinkedList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|nodes
control|)
block|{
try|try
block|{
name|T
name|obj
init|=
name|clazz
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setPattern
argument_list|(
name|loadPattern
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
specifier|private
name|List
argument_list|<
name|Node
argument_list|>
name|getElementsByTagName
parameter_list|(
name|Node
name|catalogNode
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|Node
argument_list|>
name|nodes
init|=
operator|new
name|LinkedList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|NodeList
name|childNodes
init|=
name|catalogNode
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|item
init|=
name|childNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|item
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|nodes
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nodes
return|;
block|}
block|}
end_class

end_unit

