begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
operator|.
name|dbimport
operator|.
name|config
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|EqualsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_comment
comment|/**  * @since 3.2.  */
end_comment

begin_class
specifier|public
class|class
name|TypeMapper
block|{
specifier|private
name|String
name|mapperClassName
decl_stmt|;
specifier|private
name|Boolean
name|usePrimitives
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|Type
argument_list|>
name|types
init|=
operator|new
name|LinkedList
argument_list|<
name|Type
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|String
name|getMapperClassName
parameter_list|()
block|{
return|return
name|mapperClassName
return|;
block|}
specifier|public
name|void
name|setMapperClassName
parameter_list|(
name|String
name|mapperClassName
parameter_list|)
block|{
name|this
operator|.
name|mapperClassName
operator|=
name|mapperClassName
expr_stmt|;
block|}
specifier|public
name|Boolean
name|getUsePrimitives
parameter_list|()
block|{
return|return
name|usePrimitives
return|;
block|}
specifier|public
name|void
name|setUsePrimitives
parameter_list|(
name|Boolean
name|usePrimitives
parameter_list|)
block|{
name|this
operator|.
name|usePrimitives
operator|=
name|usePrimitives
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|Type
argument_list|>
name|getTypes
parameter_list|()
block|{
return|return
name|types
return|;
block|}
specifier|public
name|void
name|setTypes
parameter_list|(
name|Collection
argument_list|<
name|Type
argument_list|>
name|types
parameter_list|)
block|{
name|this
operator|.
name|types
operator|=
name|types
expr_stmt|;
block|}
specifier|public
name|void
name|addType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|this
operator|.
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TypeMapper
name|rhs
init|=
operator|(
name|TypeMapper
operator|)
name|obj
decl_stmt|;
return|return
operator|new
name|EqualsBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|this
operator|.
name|mapperClassName
argument_list|,
name|rhs
operator|.
name|mapperClassName
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|usePrimitives
argument_list|,
name|rhs
operator|.
name|usePrimitives
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|types
argument_list|,
name|rhs
operator|.
name|types
argument_list|)
operator|.
name|isEquals
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|mapperClassName
argument_list|)
operator|.
name|append
argument_list|(
name|usePrimitives
argument_list|)
operator|.
name|append
argument_list|(
name|types
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TypeMapper {mapperClassName="
operator|+
name|mapperClassName
operator|+
literal|", usePrimitives="
operator|+
name|usePrimitives
operator|+
literal|", types="
operator|+
name|types
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

