begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|naming
operator|.
name|NameConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_class
specifier|public
class|class
name|ClientDataMapArtifact
extends|extends
name|DataMapArtifact
block|{
specifier|public
name|ClientDataMapArtifact
parameter_list|(
name|DataMap
name|dataMap
parameter_list|,
name|Collection
argument_list|<
name|Query
argument_list|>
name|queries
parameter_list|)
block|{
name|super
argument_list|(
name|dataMap
argument_list|,
name|queries
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getQualifiedBaseClassName
parameter_list|()
block|{
return|return
name|dataMap
operator|.
name|getDefaultClientSuperclass
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getQualifiedClassName
parameter_list|()
block|{
name|String
name|clientPrefix
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|dataMap
operator|.
name|getDefaultClientPackage
argument_list|()
argument_list|,
name|dataMap
operator|.
name|getDefaultPackage
argument_list|()
argument_list|)
condition|)
block|{
name|clientPrefix
operator|=
literal|"Client_"
expr_stmt|;
block|}
name|String
name|pkg
init|=
name|dataMap
operator|.
name|getDefaultClientPackage
argument_list|()
decl_stmt|;
if|if
condition|(
name|pkg
operator|==
literal|null
condition|)
block|{
name|pkg
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|pkg
operator|=
name|pkg
operator|+
literal|'.'
expr_stmt|;
block|}
return|return
name|pkg
operator|+
name|NameConverter
operator|.
name|underscoredToJava
argument_list|(
name|clientPrefix
operator|+
name|NameConverter
operator|.
name|specialCharsToJava
argument_list|(
name|dataMap
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
end_class

end_unit

