begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|NamePatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|NamePatternMatcher
operator|.
name|replaceWildcardInStringWithString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|NamePatternMatcherTest
block|{
comment|/** 	 * Test pattern expansion. 	 */
annotation|@
name|Test
specifier|public
name|void
name|testReplaceWildcardInStringWithString
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|replaceWildcardInStringWithString
argument_list|(
literal|"*"
argument_list|,
literal|null
argument_list|,
literal|"Entity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*.java"
argument_list|,
name|replaceWildcardInStringWithString
argument_list|(
literal|null
argument_list|,
literal|"*.java"
argument_list|,
literal|"Entity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Entity.java"
argument_list|,
name|replaceWildcardInStringWithString
argument_list|(
literal|"*"
argument_list|,
literal|"*.java"
argument_list|,
literal|"Entity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"java.Entity"
argument_list|,
name|replaceWildcardInStringWithString
argument_list|(
literal|"*"
argument_list|,
literal|"java.*"
argument_list|,
literal|"Entity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Entity.Entity"
argument_list|,
name|replaceWildcardInStringWithString
argument_list|(
literal|"*"
argument_list|,
literal|"*.*"
argument_list|,
literal|"Entity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"EntityEntity"
argument_list|,
name|replaceWildcardInStringWithString
argument_list|(
literal|"*"
argument_list|,
literal|"**"
argument_list|,
literal|"Entity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"EditEntityReport.vm"
argument_list|,
name|replaceWildcardInStringWithString
argument_list|(
literal|"*"
argument_list|,
literal|"Edit*Report.vm"
argument_list|,
literal|"Entity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Entity"
argument_list|,
name|replaceWildcardInStringWithString
argument_list|(
literal|"*"
argument_list|,
literal|"*"
argument_list|,
literal|"Entity"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Test tokenizing 	 */
annotation|@
name|Test
specifier|public
name|void
name|testTokenizer
parameter_list|()
block|{
name|String
index|[]
name|nullFilters
init|=
name|NamePatternMatcher
operator|.
name|tokenizePattern
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nullFilters
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
index|[]
name|filters
init|=
name|NamePatternMatcher
operator|.
name|tokenizePattern
argument_list|(
literal|"billing_*,user?"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|filters
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"^billing_.*$"
argument_list|,
name|filters
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"^user.?$"
argument_list|,
name|filters
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Test tokenizing 	 */
annotation|@
name|Test
specifier|public
name|void
name|testTokenizerEntities
parameter_list|()
block|{
name|String
name|includePattern
init|=
literal|"Organization,SecGroup,SecIndividual"
decl_stmt|;
name|String
index|[]
name|filters
init|=
name|NamePatternMatcher
operator|.
name|tokenizePattern
argument_list|(
name|includePattern
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|filters
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"^Organization$"
argument_list|,
name|filters
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"^SecGroup$"
argument_list|,
name|filters
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"^SecIndividual$"
argument_list|,
name|filters
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

