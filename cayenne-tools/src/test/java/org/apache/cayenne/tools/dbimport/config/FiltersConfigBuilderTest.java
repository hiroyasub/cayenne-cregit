begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
operator|.
name|dbimport
operator|.
name|config
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|DbPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|EntityFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|FiltersConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
operator|.
name|ExcludeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|FilterFactory
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|FiltersFactory
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_class
specifier|public
class|class
name|FiltersConfigBuilderTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testEmptyDbEntitiesFilters
parameter_list|()
throws|throws
name|Exception
block|{
name|ReverseEngineering
name|engineering
init|=
operator|new
name|ReverseEngineering
argument_list|()
decl_stmt|;
name|FiltersConfig
name|executions
init|=
operator|new
name|FiltersConfigBuilder
argument_list|(
name|engineering
argument_list|)
operator|.
name|filtersConfig
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"If nothing was configured we have to import everything. Filter %/%/% true/true/true"
argument_list|,
operator|new
name|FiltersConfig
argument_list|(
name|eFilters
argument_list|(
name|path
argument_list|()
argument_list|,
name|TRUE
argument_list|,
name|TRUE
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|,
name|executions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnlyOneCatalogDbEntitiesFilters
parameter_list|()
throws|throws
name|Exception
block|{
name|ReverseEngineering
name|engineering
init|=
operator|new
name|ReverseEngineering
argument_list|()
decl_stmt|;
name|engineering
operator|.
name|addCatalog
argument_list|(
operator|new
name|Catalog
argument_list|(
literal|"catalog_01"
argument_list|)
argument_list|)
expr_stmt|;
name|FiltersConfig
name|executions
init|=
operator|new
name|FiltersConfigBuilder
argument_list|(
name|engineering
argument_list|)
operator|.
name|filtersConfig
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|FiltersConfig
argument_list|(
name|eFilters
argument_list|(
name|path
argument_list|(
literal|"catalog_01"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TRUE
argument_list|,
name|TRUE
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|,
name|executions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCatalogDbEntitiesFilters
parameter_list|()
throws|throws
name|Exception
block|{
name|ReverseEngineering
name|engineering
init|=
operator|new
name|ReverseEngineering
argument_list|()
decl_stmt|;
name|engineering
operator|.
name|addCatalog
argument_list|(
operator|new
name|Catalog
argument_list|(
literal|"catalog_01"
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|addCatalog
argument_list|(
operator|new
name|Catalog
argument_list|(
literal|"catalog_02"
argument_list|)
operator|.
name|schema
argument_list|(
operator|new
name|Schema
argument_list|(
literal|"schema_01"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|addCatalog
argument_list|(
operator|new
name|Catalog
argument_list|(
literal|"catalog_02"
argument_list|)
operator|.
name|schema
argument_list|(
operator|new
name|Schema
argument_list|(
literal|"schema_02"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|addCatalog
argument_list|(
operator|new
name|Catalog
argument_list|(
literal|"catalog_02"
argument_list|)
operator|.
name|schema
argument_list|(
operator|new
name|Schema
argument_list|(
literal|"schema_03"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|addCatalog
argument_list|(
operator|new
name|Catalog
argument_list|(
literal|"catalog_03"
argument_list|)
operator|.
name|schema
argument_list|(
operator|new
name|Schema
argument_list|(
literal|"schema_01"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|addCatalog
argument_list|(
operator|new
name|Catalog
argument_list|(
literal|"catalog_03"
argument_list|)
operator|.
name|schema
argument_list|(
operator|new
name|Schema
argument_list|(
literal|"schema_01"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|addCatalog
argument_list|(
operator|new
name|Catalog
argument_list|(
literal|"catalog_03"
argument_list|)
operator|.
name|schema
argument_list|(
operator|new
name|Schema
argument_list|(
literal|"schema_01"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|addCatalog
argument_list|(
operator|new
name|Catalog
argument_list|(
literal|"catalog_03"
argument_list|)
operator|.
name|schema
argument_list|(
operator|new
name|Schema
argument_list|(
literal|"schema_01"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FiltersConfig
name|executions
init|=
operator|new
name|FiltersConfigBuilder
argument_list|(
name|engineering
argument_list|)
operator|.
name|filtersConfig
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|FiltersConfig
argument_list|(
name|eFilters
argument_list|(
name|path
argument_list|(
literal|"catalog_01"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TRUE
argument_list|,
name|TRUE
argument_list|,
name|NULL
argument_list|)
argument_list|,
name|eFilters
argument_list|(
name|path
argument_list|(
literal|"catalog_02"
argument_list|,
literal|"schema_01"
argument_list|)
argument_list|,
name|TRUE
argument_list|,
name|TRUE
argument_list|,
name|NULL
argument_list|)
argument_list|,
name|eFilters
argument_list|(
name|path
argument_list|(
literal|"catalog_02"
argument_list|,
literal|"schema_02"
argument_list|)
argument_list|,
name|TRUE
argument_list|,
name|TRUE
argument_list|,
name|NULL
argument_list|)
argument_list|,
name|eFilters
argument_list|(
name|path
argument_list|(
literal|"catalog_02"
argument_list|,
literal|"schema_03"
argument_list|)
argument_list|,
name|TRUE
argument_list|,
name|TRUE
argument_list|,
name|NULL
argument_list|)
argument_list|,
name|eFilters
argument_list|(
name|path
argument_list|(
literal|"catalog_03"
argument_list|,
literal|"schema_01"
argument_list|)
argument_list|,
name|TRUE
argument_list|,
name|TRUE
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|,
name|executions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSchemaDbEntitiesFilters
parameter_list|()
throws|throws
name|Exception
block|{
name|ReverseEngineering
name|engineering
init|=
operator|new
name|ReverseEngineering
argument_list|()
decl_stmt|;
name|engineering
operator|.
name|addSchema
argument_list|(
operator|new
name|Schema
argument_list|(
literal|"schema_01"
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|addSchema
argument_list|(
operator|new
name|Schema
argument_list|(
literal|"schema_02"
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|addSchema
argument_list|(
operator|new
name|Schema
argument_list|(
literal|"schema_03"
argument_list|)
argument_list|)
expr_stmt|;
name|FiltersConfig
name|executions
init|=
operator|new
name|FiltersConfigBuilder
argument_list|(
name|engineering
argument_list|)
operator|.
name|filtersConfig
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|FiltersConfig
argument_list|(
name|eFilters
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|"schema_01"
argument_list|)
argument_list|,
name|TRUE
argument_list|,
name|TRUE
argument_list|,
name|NULL
argument_list|)
argument_list|,
name|eFilters
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|"schema_02"
argument_list|)
argument_list|,
name|TRUE
argument_list|,
name|TRUE
argument_list|,
name|NULL
argument_list|)
argument_list|,
name|eFilters
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|"schema_03"
argument_list|)
argument_list|,
name|TRUE
argument_list|,
name|TRUE
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|,
name|executions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFiltersDbEntitiesFilters
parameter_list|()
throws|throws
name|Exception
block|{
name|ReverseEngineering
name|engineering
init|=
operator|new
name|ReverseEngineering
argument_list|()
decl_stmt|;
name|engineering
operator|.
name|addIncludeTable
argument_list|(
operator|new
name|IncludeTable
argument_list|(
literal|"IncludeTable"
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|addIncludeColumn
argument_list|(
operator|new
name|IncludeColumn
argument_list|(
literal|"IncludeColumn"
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|addIncludeProcedure
argument_list|(
operator|new
name|IncludeProcedure
argument_list|(
literal|"IncludeProcedure"
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|addExcludeTable
argument_list|(
operator|new
name|ExcludeTable
argument_list|(
literal|"ExcludeTable"
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|addExcludeColumn
argument_list|(
operator|new
name|ExcludeColumn
argument_list|(
literal|"ExcludeColumn"
argument_list|)
argument_list|)
expr_stmt|;
name|engineering
operator|.
name|addExcludeProcedure
argument_list|(
operator|new
name|ExcludeProcedure
argument_list|(
literal|"ExcludeProcedure"
argument_list|)
argument_list|)
expr_stmt|;
name|FiltersConfig
name|executions
init|=
operator|new
name|FiltersConfigBuilder
argument_list|(
name|engineering
argument_list|)
operator|.
name|filtersConfig
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|FiltersConfig
argument_list|(
name|eFilters
argument_list|(
name|path
argument_list|()
argument_list|,
name|list
argument_list|(
name|include
argument_list|(
literal|"IncludeTable"
argument_list|)
argument_list|,
name|exclude
argument_list|(
literal|"ExcludeTable"
argument_list|)
argument_list|)
argument_list|,
name|list
argument_list|(
name|include
argument_list|(
literal|"IncludeColumn"
argument_list|)
argument_list|,
name|exclude
argument_list|(
literal|"ExcludeColumn"
argument_list|)
argument_list|)
argument_list|,
name|list
argument_list|(
name|include
argument_list|(
literal|"IncludeProcedure"
argument_list|)
argument_list|,
name|exclude
argument_list|(
literal|"ExcludeProcedure"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|eFilters
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"IncludeTable"
argument_list|)
argument_list|,
name|NULL
argument_list|,
name|TRUE
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|,
name|executions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComplexConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|IncludeTable
name|table
init|=
operator|new
name|IncludeTable
argument_list|(
literal|"table"
argument_list|)
decl_stmt|;
name|table
operator|.
name|addIncludeColumn
argument_list|(
operator|new
name|IncludeColumn
argument_list|(
literal|"column"
argument_list|)
argument_list|)
expr_stmt|;
name|Schema
name|schema
init|=
operator|new
name|Schema
argument_list|(
literal|"schema"
argument_list|)
decl_stmt|;
name|schema
operator|.
name|addIncludeTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Catalog
name|catalog
init|=
operator|new
name|Catalog
argument_list|(
literal|"catalog"
argument_list|)
decl_stmt|;
name|catalog
operator|.
name|addSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|ReverseEngineering
name|engineering
init|=
operator|new
name|ReverseEngineering
argument_list|()
decl_stmt|;
name|engineering
operator|.
name|addCatalog
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
name|FiltersConfig
name|executions
init|=
operator|new
name|FiltersConfigBuilder
argument_list|(
name|engineering
argument_list|)
operator|.
name|filtersConfig
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|FiltersConfig
argument_list|(
name|eFilters
argument_list|(
name|path
argument_list|(
literal|"catalog"
argument_list|,
literal|"schema"
argument_list|)
argument_list|,
name|include
argument_list|(
literal|"table"
argument_list|)
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
argument_list|,
name|eFilters
argument_list|(
name|path
argument_list|(
literal|"catalog"
argument_list|,
literal|"schema"
argument_list|,
literal|"table"
argument_list|)
argument_list|,
name|NULL
argument_list|,
name|include
argument_list|(
literal|"column"
argument_list|)
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|,
name|executions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddNull
parameter_list|()
throws|throws
name|Exception
block|{
name|FiltersConfigBuilder
name|builder
init|=
operator|new
name|FiltersConfigBuilder
argument_list|(
operator|new
name|ReverseEngineering
argument_list|()
argument_list|)
decl_stmt|;
name|DbPath
name|path
init|=
operator|new
name|DbPath
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|EntityFilters
argument_list|(
name|path
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|EntityFilters
argument_list|(
name|path
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|EntityFilters
argument_list|(
name|path
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|EntityFilters
argument_list|(
name|path
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
argument_list|)
expr_stmt|;
name|EntityFilters
name|filter
init|=
name|builder
operator|.
name|filtersConfig
argument_list|()
operator|.
name|filter
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

