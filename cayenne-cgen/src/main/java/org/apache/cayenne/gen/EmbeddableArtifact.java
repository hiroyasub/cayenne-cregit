begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Embeddable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|VelocityContext
import|;
end_import

begin_comment
comment|/**  * {@link Artifact} facade for an {@link Embeddable}.  *   * @since 3.0  */
end_comment

begin_class
specifier|public
class|class
name|EmbeddableArtifact
implements|implements
name|Artifact
block|{
specifier|protected
name|Embeddable
name|embeddable
decl_stmt|;
specifier|public
name|EmbeddableArtifact
parameter_list|(
name|Embeddable
name|embeddable
parameter_list|)
block|{
name|this
operator|.
name|embeddable
operator|=
name|embeddable
expr_stmt|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|embeddable
return|;
block|}
specifier|public
name|String
name|getQualifiedBaseClassName
parameter_list|()
block|{
return|return
name|Object
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getQualifiedClassName
parameter_list|()
block|{
return|return
name|embeddable
operator|.
name|getClassName
argument_list|()
return|;
block|}
specifier|public
name|TemplateType
index|[]
name|getTemplateTypes
parameter_list|(
name|ArtifactGenerationMode
name|mode
parameter_list|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|SINGLE_CLASS
case|:
return|return
operator|new
name|TemplateType
index|[]
block|{
name|TemplateType
operator|.
name|EMBEDDABLE_SINGLE_CLASS
block|}
return|;
case|case
name|GENERATION_GAP
case|:
return|return
operator|new
name|TemplateType
index|[]
block|{
name|TemplateType
operator|.
name|EMBEDDABLE_SUPERCLASS
block|,
name|TemplateType
operator|.
name|EMBEDDABLE_SUBCLASS
block|}
return|;
default|default:
return|return
operator|new
name|TemplateType
index|[
literal|0
index|]
return|;
block|}
block|}
specifier|public
name|void
name|postInitContext
parameter_list|(
name|VelocityContext
name|context
parameter_list|)
block|{
comment|// noop - no special keys...
block|}
block|}
end_class

end_unit

