begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Methods for mangling strings.  *   */
end_comment

begin_class
specifier|public
class|class
name|ImportUtils
block|{
specifier|public
specifier|static
specifier|final
name|String
name|importOrdering
index|[]
init|=
block|{
literal|"java."
block|,
literal|"javax."
block|,
literal|"org."
block|,
literal|"com."
block|}
decl_stmt|;
specifier|static
specifier|final
name|String
name|primitives
index|[]
init|=
block|{
literal|"long"
block|,
literal|"double"
block|,
literal|"byte"
block|,
literal|"boolean"
block|,
literal|"float"
block|,
literal|"short"
block|,
literal|"int"
block|,
literal|"char"
block|}
decl_stmt|;
specifier|static
specifier|final
name|String
name|primitiveClasses
index|[]
init|=
operator|new
name|String
index|[]
block|{
name|Long
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Double
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Byte
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Boolean
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Float
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Short
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Integer
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Character
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|classesForPrimitives
init|=
name|Util
operator|.
name|toMap
argument_list|(
name|primitives
argument_list|,
name|primitiveClasses
argument_list|)
decl_stmt|;
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|primitivesForClasses
init|=
name|Util
operator|.
name|toMap
argument_list|(
name|primitiveClasses
argument_list|,
name|primitives
argument_list|)
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|importTypesMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Types forced to be FQN
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|reservedImportTypesMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|String
name|packageName
decl_stmt|;
specifier|protected
name|boolean
name|canRegisterType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
comment|// Not sure why this would ever happen, but it did
if|if
condition|(
literal|null
operator|==
name|typeName
condition|)
block|{
return|return
literal|false
return|;
block|}
name|StringUtils
name|stringUtils
init|=
name|StringUtils
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|typeClassName
init|=
name|stringUtils
operator|.
name|stripPackageName
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|String
name|typePackageName
init|=
name|stringUtils
operator|.
name|stripClass
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|typePackageName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
comment|// disallow non-packaged types (primitives, probably)
block|}
if|if
condition|(
literal|"java.lang"
operator|.
name|equals
argument_list|(
name|typePackageName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Can only have one type -- rest must use fqn
if|if
condition|(
name|reservedImportTypesMap
operator|.
name|containsKey
argument_list|(
name|typeClassName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|!
name|importTypesMap
operator|.
name|containsKey
argument_list|(
name|typeClassName
argument_list|)
return|;
block|}
comment|/** 	 * Reserve a fully-qualified data type class name so it cannot be used by 	 * another class. No import statements will be generated for reserved types. 	 * Typically, this is the fully-qualified class name of the class being 	 * generated. 	 *  	 * @param typeName 	 *            FQ data type class name. 	 */
specifier|public
name|void
name|addReservedType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|canRegisterType
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
return|return;
block|}
name|StringUtils
name|stringUtils
init|=
name|StringUtils
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|typeClassName
init|=
name|stringUtils
operator|.
name|stripPackageName
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|reservedImportTypesMap
operator|.
name|put
argument_list|(
name|typeClassName
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Register a fully-qualified data type class name. For example, 	 * org.apache.cayenne.CayenneDataObject. 	 *  	 * @param typeName 	 *            FQ data type class name. 	 */
specifier|public
name|void
name|addType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|canRegisterType
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
return|return;
block|}
name|StringUtils
name|stringUtils
init|=
name|StringUtils
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|typePackageName
init|=
name|stringUtils
operator|.
name|stripClass
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|typePackageName
operator|.
name|equals
argument_list|(
name|packageName
argument_list|)
condition|)
block|{
return|return;
block|}
name|importTypesMap
operator|.
name|put
argument_list|(
name|stringUtils
operator|.
name|stripPackageName
argument_list|(
name|typeName
argument_list|)
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Add the package name to use for this importUtil invocation. 	 */
specifier|public
name|void
name|setPackage
parameter_list|(
name|String
name|packageName
parameter_list|)
block|{
name|this
operator|.
name|packageName
operator|=
name|packageName
expr_stmt|;
block|}
comment|/** 	 * Performs processing similar to<code>formatJavaType(String)</code>, with 	 * special handling of primitive types and their Java class counterparts. 	 * This method allows users to make a decision whether to use primitives or 	 * not, regardless of how type is mapped. 	 */
specifier|public
name|String
name|formatJavaType
parameter_list|(
name|String
name|typeName
parameter_list|,
name|boolean
name|usePrimitives
parameter_list|)
block|{
if|if
condition|(
name|usePrimitives
condition|)
block|{
name|String
name|primitive
init|=
name|primitivesForClasses
operator|.
name|get
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
return|return
operator|(
name|primitive
operator|!=
literal|null
operator|)
condition|?
name|primitive
else|:
name|formatJavaType
argument_list|(
name|typeName
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|primitiveClass
init|=
name|classesForPrimitives
operator|.
name|get
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
return|return
operator|(
name|primitiveClass
operator|!=
literal|null
operator|)
condition|?
name|formatJavaType
argument_list|(
name|primitiveClass
argument_list|)
else|:
name|formatJavaType
argument_list|(
name|typeName
argument_list|)
return|;
block|}
block|}
comment|/** 	 * Removes registered package and non-reserved registered type name prefixes 	 * from java types 	 */
specifier|public
name|String
name|formatJavaType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
if|if
condition|(
name|typeName
operator|!=
literal|null
condition|)
block|{
name|StringUtils
name|stringUtils
init|=
name|StringUtils
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|typeClassName
init|=
name|stringUtils
operator|.
name|stripPackageName
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|reservedImportTypesMap
operator|.
name|containsKey
argument_list|(
name|typeClassName
argument_list|)
operator|&&
name|importTypesMap
operator|.
name|containsKey
argument_list|(
name|typeClassName
argument_list|)
operator|&&
name|typeName
operator|.
name|equals
argument_list|(
name|importTypesMap
operator|.
name|get
argument_list|(
name|typeClassName
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|typeClassName
return|;
block|}
name|String
name|typePackageName
init|=
name|stringUtils
operator|.
name|stripClass
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"java.lang"
operator|.
name|equals
argument_list|(
name|typePackageName
argument_list|)
condition|)
block|{
return|return
name|typeClassName
return|;
block|}
if|if
condition|(
operator|(
literal|null
operator|!=
name|packageName
operator|)
operator|&&
operator|(
name|packageName
operator|.
name|equals
argument_list|(
name|typePackageName
argument_list|)
operator|)
condition|)
block|{
return|return
name|typeClassName
return|;
block|}
block|}
return|return
name|typeName
return|;
block|}
comment|/** 	 * @since 3.0 	 */
specifier|public
name|String
name|formatJavaTypeAsNonBooleanPrimitive
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|String
name|value
init|=
name|ImportUtils
operator|.
name|classesForPrimitives
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|formatJavaType
argument_list|(
name|value
operator|!=
literal|null
condition|?
name|value
else|:
name|type
argument_list|)
return|;
block|}
comment|/** 	 * @since 3.0 	 */
specifier|public
name|boolean
name|isNonBooleanPrimitive
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|ImportUtils
operator|.
name|classesForPrimitives
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
operator|&&
operator|!
name|isBoolean
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/** 	 * @since 4.2 	 */
specifier|public
name|boolean
name|isNumericPrimitive
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|isNonBooleanPrimitive
argument_list|(
name|type
argument_list|)
operator|&&
operator|!
literal|"char"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/** 	 * @since 3.0 	 */
specifier|public
name|boolean
name|isBoolean
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
literal|"boolean"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/** 	 * @since 4.1 	 * @param type name 	 * @return is given type primitive 	 */
specifier|public
name|boolean
name|isPrimitive
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|classesForPrimitives
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/** 	 * 	 * This method decide can primitive type be used for given attribute. 	 * It can be used in following cases: 	 * 		- attribute is PK and primitive 	 * 		- attribute not PK and is mandatory 	 * 	 * @param attribute to check 	 * @return can primitive Java type be used 	 * 	 * @since 4.1 	 */
specifier|public
name|boolean
name|canUsePrimitive
parameter_list|(
name|ObjAttribute
name|attribute
parameter_list|)
block|{
return|return
name|attribute
operator|.
name|isMandatory
argument_list|()
operator|&&
name|isPrimitive
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * Generate package and list of import statements based on the registered 	 * types. 	 */
specifier|public
name|String
name|generate
parameter_list|()
block|{
name|StringBuilder
name|outputBuffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|packageName
condition|)
block|{
name|outputBuffer
operator|.
name|append
argument_list|(
literal|"package "
argument_list|)
expr_stmt|;
name|outputBuffer
operator|.
name|append
argument_list|(
name|packageName
argument_list|)
expr_stmt|;
comment|// Using UNIX line endings intentionally - generated Java files should look
comment|// the same regardless of platform to prevent developer teams working on
comment|// multiple OS's to override each other's work
name|outputBuffer
operator|.
name|append
argument_list|(
literal|";\n\n"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|typesList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|importTypesMap
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|typesList
operator|.
name|sort
argument_list|(
parameter_list|(
name|s1
parameter_list|,
name|s2
parameter_list|)
lambda|->
block|{
for|for
control|(
name|String
name|ordering
range|:
name|importOrdering
control|)
block|{
if|if
condition|(
operator|(
name|s1
operator|.
name|startsWith
argument_list|(
name|ordering
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|s2
operator|.
name|startsWith
argument_list|(
name|ordering
argument_list|)
operator|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
operator|(
operator|!
name|s1
operator|.
name|startsWith
argument_list|(
name|ordering
argument_list|)
operator|)
operator|&&
operator|(
name|s2
operator|.
name|startsWith
argument_list|(
name|ordering
argument_list|)
operator|)
condition|)
block|{
return|return
literal|1
return|;
block|}
block|}
return|return
name|s1
operator|.
name|compareTo
argument_list|(
name|s2
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|String
name|lastStringPrefix
init|=
literal|null
decl_stmt|;
name|boolean
name|firstIteration
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|typeName
range|:
name|typesList
control|)
block|{
if|if
condition|(
name|firstIteration
condition|)
block|{
name|firstIteration
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|outputBuffer
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
comment|// Output another newline if we're in a different root package.
comment|// Find root package
name|String
name|thisStringPrefix
init|=
name|typeName
decl_stmt|;
name|int
name|dotIndex
init|=
name|typeName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|!=
name|dotIndex
condition|)
block|{
name|thisStringPrefix
operator|=
name|typeName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotIndex
argument_list|)
expr_stmt|;
block|}
comment|// if this isn't the first import,
if|if
condition|(
literal|null
operator|!=
name|lastStringPrefix
condition|)
block|{
comment|// and it's different from the last import
if|if
condition|(
operator|!
name|thisStringPrefix
operator|.
name|equals
argument_list|(
name|lastStringPrefix
argument_list|)
condition|)
block|{
comment|// output a newline; force UNIX style per comment above
name|outputBuffer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|lastStringPrefix
operator|=
name|thisStringPrefix
expr_stmt|;
name|outputBuffer
operator|.
name|append
argument_list|(
literal|"import "
argument_list|)
expr_stmt|;
name|outputBuffer
operator|.
name|append
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|outputBuffer
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
block|}
return|return
name|outputBuffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 * @param attribute db attribute 	 * @return name of the java type 	 * 	 * @since 4.1 	 */
specifier|public
name|String
name|dbAttributeToJavaType
parameter_list|(
name|DbAttribute
name|attribute
parameter_list|)
block|{
name|String
name|javaTypeName
init|=
name|TypesMapping
operator|.
name|getJavaBySqlType
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|formatJavaType
argument_list|(
name|javaTypeName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

