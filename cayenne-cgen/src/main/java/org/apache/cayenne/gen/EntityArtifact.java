begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|BaseDataObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNodeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLSerializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|VelocityContext
import|;
end_import

begin_comment
comment|/**  * {@link Artifact} facade for an ObjEntity.  *   * @since 3.0  */
end_comment

begin_class
specifier|public
class|class
name|EntityArtifact
implements|implements
name|Artifact
implements|,
name|XMLSerializable
block|{
specifier|public
specifier|static
name|String
name|ENTITY_UTILS_KEY
init|=
literal|"entityUtils"
decl_stmt|;
specifier|protected
name|ObjEntity
name|entity
decl_stmt|;
specifier|public
name|EntityArtifact
parameter_list|(
name|ObjEntity
name|entity
parameter_list|)
block|{
name|this
operator|.
name|entity
operator|=
name|entity
expr_stmt|;
block|}
comment|/**      * Returns ObjEntity.      */
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|entity
return|;
block|}
specifier|public
name|String
name|getQualifiedBaseClassName
parameter_list|()
block|{
return|return
operator|(
name|entity
operator|.
name|getSuperClassName
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|entity
operator|.
name|getSuperClassName
argument_list|()
else|:
name|BaseDataObject
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getQualifiedClassName
parameter_list|()
block|{
return|return
name|entity
operator|.
name|getClassName
argument_list|()
return|;
block|}
specifier|public
name|TemplateType
name|getSingleClassType
parameter_list|()
block|{
return|return
name|TemplateType
operator|.
name|ENTITY_SINGLE_CLASS
return|;
block|}
specifier|public
name|TemplateType
name|getSubclassType
parameter_list|()
block|{
return|return
name|TemplateType
operator|.
name|ENTITY_SUBCLASS
return|;
block|}
specifier|public
name|TemplateType
name|getSuperClassType
parameter_list|()
block|{
return|return
name|TemplateType
operator|.
name|ENTITY_SUPERCLASS
return|;
block|}
specifier|public
name|TemplateType
index|[]
name|getTemplateTypes
parameter_list|(
name|ArtifactGenerationMode
name|mode
parameter_list|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|SINGLE_CLASS
case|:
return|return
operator|new
name|TemplateType
index|[]
block|{
name|TemplateType
operator|.
name|ENTITY_SINGLE_CLASS
block|}
return|;
case|case
name|GENERATION_GAP
case|:
return|return
operator|new
name|TemplateType
index|[]
block|{
name|TemplateType
operator|.
name|ENTITY_SUPERCLASS
block|,
name|TemplateType
operator|.
name|ENTITY_SUBCLASS
block|}
return|;
default|default:
return|return
operator|new
name|TemplateType
index|[
literal|0
index|]
return|;
block|}
block|}
specifier|public
name|void
name|postInitContext
parameter_list|(
name|VelocityContext
name|context
parameter_list|)
block|{
name|EntityUtils
name|metadata
init|=
operator|new
name|EntityUtils
argument_list|(
name|entity
operator|.
name|getDataMap
argument_list|()
argument_list|,
name|entity
argument_list|,
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|BASE_CLASS_KEY
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|BASE_PACKAGE_KEY
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|SUPER_CLASS_KEY
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|SUPER_PACKAGE_KEY
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|SUB_CLASS_KEY
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|SUB_PACKAGE_KEY
argument_list|)
argument_list|)
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|ENTITY_UTILS_KEY
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|encodeAsXML
parameter_list|(
name|XMLEncoder
name|encoder
parameter_list|,
name|ConfigurationNodeVisitor
name|delegate
parameter_list|)
block|{
name|encoder
operator|.
name|start
argument_list|(
literal|"objEntity"
argument_list|)
operator|.
name|simpleTag
argument_list|(
literal|"name"
argument_list|,
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

