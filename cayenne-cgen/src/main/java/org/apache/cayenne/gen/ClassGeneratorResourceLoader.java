begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|app
operator|.
name|Velocity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|exception
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|resource
operator|.
name|loader
operator|.
name|FileResourceLoader
import|;
end_import

begin_comment
comment|/**  * Velocity template resource loader customized for Cayenne use. Supports loading  * templates from the thread ClassLoader and from relative and absolute paths.  *  * @since 1.2  */
end_comment

begin_comment
comment|// must be public top-level class as it is
end_comment

begin_comment
comment|// instantiated via reflection by Velocity
end_comment

begin_class
specifier|public
class|class
name|ClassGeneratorResourceLoader
extends|extends
name|FileResourceLoader
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CGEN_ROOT_PATH
init|=
literal|"cayenne.cgen.rootpath"
decl_stmt|;
comment|/**      * Returns resource as InputStream. First calls super implementation. If resource      * wasn't found, it attempts to load it from current directory or as an absolute path.      */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Reader
name|getResourceReader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|charset
parameter_list|)
throws|throws
name|ResourceNotFoundException
block|{
name|Reader
name|stream
decl_stmt|;
name|stream
operator|=
name|loadFromThreadClassLoader
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
return|return
name|stream
return|;
block|}
name|stream
operator|=
name|loadFromThisClassLoader
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
return|return
name|stream
return|;
block|}
name|stream
operator|=
name|loadFromRelativePath
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
return|return
name|stream
return|;
block|}
name|stream
operator|=
name|loadFromAbsPath
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
return|return
name|stream
return|;
block|}
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"Couldn't find resource '"
operator|+
name|name
operator|+
literal|"'. Searched filesystem path and classpath"
argument_list|)
throw|;
block|}
specifier|protected
name|Reader
name|loadFromRelativePath
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|rootPath
init|=
operator|(
name|String
operator|)
name|Velocity
operator|.
name|getProperty
argument_list|(
name|CGEN_ROOT_PATH
argument_list|)
decl_stmt|;
name|Path
name|datamapPath
decl_stmt|;
if|if
condition|(
name|rootPath
operator|!=
literal|null
condition|)
block|{
name|datamapPath
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|rootPath
argument_list|)
expr_stmt|;
name|Path
name|absolutePath
init|=
name|datamapPath
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
operator|.
name|normalize
argument_list|()
decl_stmt|;
return|return
name|loadFromAbsPath
argument_list|(
name|absolutePath
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|Reader
name|loadFromAbsPath
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
operator|(
name|file
operator|.
name|canRead
argument_list|()
operator|)
condition|?
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
else|:
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|Reader
name|loadFromThreadClassLoader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|InputStream
name|stream
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|stream
operator|!=
literal|null
condition|?
operator|new
name|InputStreamReader
argument_list|(
name|stream
argument_list|)
else|:
literal|null
return|;
block|}
specifier|protected
name|Reader
name|loadFromThisClassLoader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|InputStream
name|stream
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|stream
operator|!=
literal|null
condition|?
operator|new
name|InputStreamReader
argument_list|(
name|stream
argument_list|)
else|:
literal|null
return|;
block|}
block|}
end_class

end_unit

