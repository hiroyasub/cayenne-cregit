begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataMapLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
operator|.
name|URLResource
import|;
end_import

begin_comment
comment|/**  * Loads a DataMap and a shared entity namespace.  *   * @since 3.0  */
end_comment

begin_class
class|class
name|CayenneGeneratorMapLoaderAction
block|{
specifier|private
name|File
name|mainDataMapFile
decl_stmt|;
specifier|private
name|File
index|[]
name|additionalDataMapFiles
decl_stmt|;
specifier|private
name|DataMap
name|mainDataMap
decl_stmt|;
specifier|private
specifier|transient
name|Injector
name|injector
decl_stmt|;
name|CayenneGeneratorMapLoaderAction
parameter_list|(
name|Injector
name|injector
parameter_list|)
block|{
name|this
operator|.
name|injector
operator|=
name|injector
expr_stmt|;
block|}
name|DataMap
name|getMainDataMap
parameter_list|()
throws|throws
name|MalformedURLException
block|{
if|if
condition|(
name|mainDataMap
operator|==
literal|null
condition|)
block|{
name|DataMapLoader
name|loader
init|=
name|createLoader
argument_list|()
decl_stmt|;
name|DataMap
name|mainDataMap
init|=
name|loadDataMap
argument_list|(
name|loader
argument_list|,
name|mainDataMapFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|additionalDataMapFiles
operator|!=
literal|null
condition|)
block|{
name|EntityResolver
name|entityResolver
init|=
operator|new
name|EntityResolver
argument_list|()
decl_stmt|;
name|entityResolver
operator|.
name|addDataMap
argument_list|(
name|mainDataMap
argument_list|)
expr_stmt|;
name|mainDataMap
operator|.
name|setNamespace
argument_list|(
name|entityResolver
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|additionalDataMapFile
range|:
name|additionalDataMapFiles
control|)
block|{
name|DataMap
name|dataMap
init|=
name|loadDataMap
argument_list|(
name|loader
argument_list|,
name|additionalDataMapFile
argument_list|)
decl_stmt|;
name|entityResolver
operator|.
name|addDataMap
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|setNamespace
argument_list|(
name|entityResolver
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|mainDataMap
operator|=
name|mainDataMap
expr_stmt|;
block|}
return|return
name|mainDataMap
return|;
block|}
name|DataMapLoader
name|createLoader
parameter_list|()
block|{
return|return
name|injector
operator|.
name|getInstance
argument_list|(
name|DataMapLoader
operator|.
name|class
argument_list|)
return|;
block|}
specifier|protected
name|DataMap
name|loadDataMap
parameter_list|(
name|DataMapLoader
name|mapLoader
parameter_list|,
name|File
name|dataMapFile
parameter_list|)
throws|throws
name|MalformedURLException
block|{
return|return
name|mapLoader
operator|.
name|load
argument_list|(
operator|new
name|URLResource
argument_list|(
name|dataMapFile
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|void
name|setMainDataMapFile
parameter_list|(
name|File
name|mainDataMapFile
parameter_list|)
block|{
name|this
operator|.
name|mainDataMapFile
operator|=
name|mainDataMapFile
expr_stmt|;
block|}
name|void
name|setAdditionalDataMapFiles
parameter_list|(
name|File
index|[]
name|additionalDataMapFiles
parameter_list|)
block|{
name|this
operator|.
name|additionalDataMapFiles
operator|=
name|additionalDataMapFiles
expr_stmt|;
block|}
block|}
end_class

end_unit

