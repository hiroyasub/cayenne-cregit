begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|DateProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|EntityProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|ListProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|MapProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|NumericProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|PropertyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|SetProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|StringProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|PropertyUtilsTest
block|{
name|PropertyUtils
name|propertyUtils
decl_stmt|;
name|ImportUtils
name|importUtils
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|importUtils
operator|=
operator|new
name|ImportUtils
argument_list|()
expr_stmt|;
name|propertyUtils
operator|=
operator|new
name|PropertyUtils
argument_list|(
name|importUtils
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImportAttribute
parameter_list|()
block|{
name|ObjAttribute
name|attribute
init|=
operator|new
name|ObjAttribute
argument_list|()
decl_stmt|;
name|attribute
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|setType
argument_list|(
name|java
operator|.
name|util
operator|.
name|Date
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|importTypesMap
init|=
name|importUtils
operator|.
name|importTypesMap
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|importTypesMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|propertyUtils
operator|.
name|addImport
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|importTypesMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|java
operator|.
name|util
operator|.
name|Date
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|importTypesMap
operator|.
name|get
argument_list|(
literal|"Date"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DateProperty
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|importTypesMap
operator|.
name|get
argument_list|(
literal|"DateProperty"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|importTypesMap
operator|.
name|get
argument_list|(
literal|"PropertyFactory"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImportRelationship
parameter_list|()
block|{
name|String
name|typeName
init|=
literal|"org.example.model.TargetEntity"
decl_stmt|;
name|ObjEntity
name|entity
init|=
name|mock
argument_list|(
name|ObjEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"target"
argument_list|)
expr_stmt|;
name|ObjRelationship
name|relationship
init|=
name|mock
argument_list|(
name|ObjRelationship
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|isToMany
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getCollectionType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"java.util.List"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"target"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"list_rel"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getTargetEntity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|importTypesMap
init|=
name|importUtils
operator|.
name|importTypesMap
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|importTypesMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|propertyUtils
operator|.
name|addImport
argument_list|(
name|relationship
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|importTypesMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|typeName
argument_list|,
name|importTypesMap
operator|.
name|get
argument_list|(
literal|"TargetEntity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|List
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|importTypesMap
operator|.
name|get
argument_list|(
literal|"List"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ListProperty
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|importTypesMap
operator|.
name|get
argument_list|(
literal|"ListProperty"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|importTypesMap
operator|.
name|get
argument_list|(
literal|"PropertyFactory"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|simpleNumericDefinition
parameter_list|()
block|{
name|importUtils
operator|.
name|addType
argument_list|(
name|NumericProperty
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ObjAttribute
name|attribute
init|=
operator|new
name|ObjAttribute
argument_list|()
decl_stmt|;
name|attribute
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|setType
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|String
name|definition
init|=
name|propertyUtils
operator|.
name|propertyDefinition
argument_list|(
name|attribute
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"public static final NumericProperty<Integer> TEST = PropertyFactory.createNumeric(\"test\", Integer.class);"
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|simpleStringDefinition
parameter_list|()
block|{
name|importUtils
operator|.
name|addType
argument_list|(
name|StringProperty
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ObjAttribute
name|attribute
init|=
operator|new
name|ObjAttribute
argument_list|()
decl_stmt|;
name|attribute
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|setType
argument_list|(
literal|"java.lang.String"
argument_list|)
expr_stmt|;
name|String
name|definition
init|=
name|propertyUtils
operator|.
name|propertyDefinition
argument_list|(
name|attribute
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"public static final StringProperty<String> TEST = PropertyFactory.createString(\"test\", String.class);"
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|toOneRelationshipDefinition
parameter_list|()
block|{
name|String
name|typeName
init|=
literal|"org.example.model.TargetEntity"
decl_stmt|;
name|importUtils
operator|.
name|addType
argument_list|(
name|EntityProperty
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|importUtils
operator|.
name|addType
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|ObjEntity
name|entity
init|=
name|mock
argument_list|(
name|ObjEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"target"
argument_list|)
expr_stmt|;
name|ObjRelationship
name|relationship
init|=
name|mock
argument_list|(
name|ObjRelationship
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|isToMany
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"target"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"to_one_rel"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getTargetEntity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|String
name|definition
init|=
name|propertyUtils
operator|.
name|propertyDefinition
argument_list|(
name|relationship
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"public static final EntityProperty<TargetEntity> TO_ONE_REL = PropertyFactory.createEntity(\"to_one_rel\", TargetEntity.class);"
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|listRelationshipDefinition
parameter_list|()
block|{
name|String
name|typeName
init|=
literal|"org.example.model.TargetEntity"
decl_stmt|;
name|importUtils
operator|.
name|addType
argument_list|(
name|ListProperty
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|importUtils
operator|.
name|addType
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|ObjEntity
name|entity
init|=
name|mock
argument_list|(
name|ObjEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"target"
argument_list|)
expr_stmt|;
name|ObjRelationship
name|relationship
init|=
name|mock
argument_list|(
name|ObjRelationship
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|isToMany
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getCollectionType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"java.util.List"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"target"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"list_rel"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getTargetEntity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|String
name|definition
init|=
name|propertyUtils
operator|.
name|propertyDefinition
argument_list|(
name|relationship
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"public static final ListProperty<TargetEntity> LIST_REL = PropertyFactory.createList(\"list_rel\", TargetEntity.class);"
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setRelationshipDefinition
parameter_list|()
block|{
name|String
name|typeName
init|=
literal|"org.example.model.TargetEntity"
decl_stmt|;
name|importUtils
operator|.
name|addType
argument_list|(
name|SetProperty
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|importUtils
operator|.
name|addType
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|ObjEntity
name|entity
init|=
name|mock
argument_list|(
name|ObjEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"target"
argument_list|)
expr_stmt|;
name|ObjRelationship
name|relationship
init|=
name|mock
argument_list|(
name|ObjRelationship
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|isToMany
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getCollectionType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"java.util.Set"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"target"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"set_rel"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getTargetEntity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|String
name|definition
init|=
name|propertyUtils
operator|.
name|propertyDefinition
argument_list|(
name|relationship
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"public static final SetProperty<TargetEntity> SET_REL = PropertyFactory.createSet(\"set_rel\", TargetEntity.class);"
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mapRelationshipDefinition
parameter_list|()
block|{
name|String
name|typeName
init|=
literal|"org.example.model.TargetEntity"
decl_stmt|;
name|importUtils
operator|.
name|addType
argument_list|(
name|MapProperty
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|importUtils
operator|.
name|addType
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|ObjAttribute
name|attribute
init|=
name|mock
argument_list|(
name|ObjAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ObjEntity
name|entity
init|=
name|mock
argument_list|(
name|ObjEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"target"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getAttribute
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
name|ObjRelationship
name|relationship
init|=
name|mock
argument_list|(
name|ObjRelationship
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|isToMany
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getCollectionType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"java.util.Map"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getMapKey
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"target"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"map_rel"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getTargetEntity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|String
name|definition
init|=
name|propertyUtils
operator|.
name|propertyDefinition
argument_list|(
name|relationship
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"public static final MapProperty<String, TargetEntity> MAP_REL = PropertyFactory.createMap(\"map_rel\", String.class, TargetEntity.class);"
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

