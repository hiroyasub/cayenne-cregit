begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|CallbackDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|EntityUtilsTest
block|{
specifier|protected
name|EntityUtils
name|entityUtils
init|=
literal|null
decl_stmt|;
specifier|protected
name|DataMap
name|dataMap
init|=
literal|null
decl_stmt|;
specifier|protected
name|ObjEntity
name|objEntity
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|dataMap
operator|=
operator|new
name|DataMap
argument_list|()
expr_stmt|;
name|objEntity
operator|=
operator|new
name|ObjEntity
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|dataMap
operator|=
literal|null
expr_stmt|;
name|objEntity
operator|=
literal|null
expr_stmt|;
name|entityUtils
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllCallbackNamesUnique
parameter_list|()
throws|throws
name|Exception
block|{
name|CallbackDescriptor
index|[]
name|callbacks
init|=
name|objEntity
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getCallbacks
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callbacks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|callbacks
index|[
name|i
index|]
operator|.
name|addCallbackMethod
argument_list|(
literal|"callback1"
argument_list|)
expr_stmt|;
name|callbacks
index|[
name|i
index|]
operator|.
name|addCallbackMethod
argument_list|(
literal|"callback2"
argument_list|)
expr_stmt|;
name|callbacks
index|[
name|i
index|]
operator|.
name|addCallbackMethod
argument_list|(
literal|"callback3"
argument_list|)
expr_stmt|;
block|}
name|entityUtils
operator|=
operator|new
name|EntityUtils
argument_list|(
name|dataMap
argument_list|,
name|objEntity
argument_list|,
literal|"TestBaseClass"
argument_list|,
literal|"TestSuperClass"
argument_list|,
literal|"TestSubClass"
argument_list|)
expr_stmt|;
name|boolean
name|hasNoDuplicates
init|=
literal|true
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|callbackNames
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|cbName
range|:
name|entityUtils
operator|.
name|getCallbackNames
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|callbackNames
operator|.
name|add
argument_list|(
name|cbName
argument_list|)
condition|)
block|{
name|hasNoDuplicates
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Contains duplicate callback names."
argument_list|,
name|hasNoDuplicates
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeclaresDbAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|DbEntity
name|dbEntity
init|=
operator|new
name|DbEntity
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|DbAttribute
name|exists
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"testKey"
argument_list|)
decl_stmt|;
name|DbAttribute
name|notExists
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"testKey1"
argument_list|)
decl_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|exists
argument_list|)
expr_stmt|;
name|ObjAttribute
name|attribute
init|=
operator|new
name|ObjAttribute
argument_list|(
literal|"exists"
argument_list|)
decl_stmt|;
name|attribute
operator|.
name|setDbAttributePath
argument_list|(
literal|"testKey"
argument_list|)
expr_stmt|;
name|objEntity
operator|.
name|addAttribute
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
name|objEntity
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|objEntity
operator|.
name|setDbEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|addDbEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|addObjEntity
argument_list|(
name|objEntity
argument_list|)
expr_stmt|;
name|entityUtils
operator|=
operator|new
name|EntityUtils
argument_list|(
name|dataMap
argument_list|,
name|objEntity
argument_list|,
literal|"TestBaseClass"
argument_list|,
literal|"TestSuperClass"
argument_list|,
literal|"TestSubClass"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entityUtils
operator|.
name|declaresDbAttribute
argument_list|(
name|exists
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entityUtils
operator|.
name|declaresDbAttribute
argument_list|(
name|notExists
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

