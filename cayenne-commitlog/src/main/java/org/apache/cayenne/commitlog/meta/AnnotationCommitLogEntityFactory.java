begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|commitlog
operator|.
name|meta
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|commitlog
operator|.
name|CommitLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_comment
comment|/**  * Compiles {@link CommitLogEntity}'s based on {@link CommitLog} annotation.  *   * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|AnnotationCommitLogEntityFactory
implements|implements
name|CommitLogEntityFactory
block|{
specifier|private
specifier|static
specifier|final
name|CommitLogEntity
name|BLOCKED_ENTITY
init|=
operator|new
name|CommitLogEntity
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isIncluded
parameter_list|(
name|String
name|property
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isConfidential
parameter_list|(
name|String
name|property
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isIncluded
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|Provider
argument_list|<
name|DataChannel
argument_list|>
name|channelProvider
decl_stmt|;
specifier|private
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|CommitLogEntity
argument_list|>
name|entities
decl_stmt|;
specifier|public
name|AnnotationCommitLogEntityFactory
parameter_list|(
annotation|@
name|Inject
name|Provider
argument_list|<
name|DataChannel
argument_list|>
name|channelProvider
parameter_list|)
block|{
name|this
operator|.
name|entities
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
comment|// injecting provider instead of DataChannel, as otherwise we end up
comment|// with circular dependency.
name|this
operator|.
name|channelProvider
operator|=
name|channelProvider
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CommitLogEntity
name|getEntity
parameter_list|(
name|ObjectId
name|id
parameter_list|)
block|{
name|String
name|entityName
init|=
name|id
operator|.
name|getEntityName
argument_list|()
decl_stmt|;
name|CommitLogEntity
name|descriptor
init|=
name|entities
operator|.
name|get
argument_list|(
name|entityName
argument_list|)
decl_stmt|;
if|if
condition|(
name|descriptor
operator|==
literal|null
condition|)
block|{
name|CommitLogEntity
name|newDescriptor
init|=
name|createDescriptor
argument_list|(
name|entityName
argument_list|)
decl_stmt|;
name|CommitLogEntity
name|existingDescriptor
init|=
name|entities
operator|.
name|putIfAbsent
argument_list|(
name|entityName
argument_list|,
name|newDescriptor
argument_list|)
decl_stmt|;
name|descriptor
operator|=
operator|(
name|existingDescriptor
operator|!=
literal|null
operator|)
condition|?
name|existingDescriptor
else|:
name|newDescriptor
expr_stmt|;
block|}
return|return
name|descriptor
return|;
block|}
specifier|private
name|EntityResolver
name|getEntityResolver
parameter_list|()
block|{
return|return
name|channelProvider
operator|.
name|get
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
return|;
block|}
specifier|private
name|CommitLogEntity
name|createDescriptor
parameter_list|(
name|String
name|entityName
parameter_list|)
block|{
name|EntityResolver
name|entityResolver
init|=
name|getEntityResolver
argument_list|()
decl_stmt|;
name|ClassDescriptor
name|classDescriptor
init|=
name|entityResolver
operator|.
name|getClassDescriptor
argument_list|(
name|entityName
argument_list|)
decl_stmt|;
name|CommitLog
name|a
init|=
name|classDescriptor
operator|.
name|getObjectClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|CommitLog
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
name|BLOCKED_ENTITY
return|;
block|}
name|ObjEntity
name|entity
init|=
name|entityResolver
operator|.
name|getObjEntity
argument_list|(
name|entityName
argument_list|)
decl_stmt|;
return|return
operator|new
name|MutableCommitLogLogEntity
argument_list|(
name|entity
argument_list|)
operator|.
name|setConfidential
argument_list|(
name|a
operator|.
name|confidential
argument_list|()
argument_list|)
operator|.
name|setIgnoreProperties
argument_list|(
name|a
operator|.
name|ignoredProperties
argument_list|()
argument_list|)
operator|.
name|setIgnoreAttributes
argument_list|(
name|a
operator|.
name|ignoreAttributes
argument_list|()
argument_list|)
operator|.
name|setIgnoreToOneRelationships
argument_list|(
name|a
operator|.
name|ignoreToOneRelationships
argument_list|()
argument_list|)
operator|.
name|setIgnoreToManyRelationships
argument_list|(
name|a
operator|.
name|ignoreToManyRelationships
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

