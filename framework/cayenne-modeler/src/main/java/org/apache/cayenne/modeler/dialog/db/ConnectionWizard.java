begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultComboBoxModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|reveng
operator|.
name|NamingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ClassLoadingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ModelerPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|DBConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneController
import|;
end_import

begin_comment
comment|/**  * A component for choosing a DataSource. Users can choose from the DataSources configured  * in preferences, and one extra set of connection settings. This object will create and  * keep open a JDBC connection. It is caller responsibility to dispose of it properly.  *   */
end_comment

begin_comment
comment|// TODO: after refactoring DbLoader to accept a DataSource instead of connection this
end_comment

begin_comment
comment|// dialog should be merged with superclass - DataSourceWizard.
end_comment

begin_class
specifier|public
class|class
name|ConnectionWizard
extends|extends
name|DataSourceWizard
block|{
comment|/**      * Preference to store latest strategies      */
specifier|private
specifier|static
specifier|final
name|String
name|STRATEGIES_PREFERENCE
init|=
literal|"recent.preferences"
decl_stmt|;
comment|/**      * Naming strategies to appear in combobox by default      */
specifier|private
specifier|static
specifier|final
name|Vector
argument_list|<
name|String
argument_list|>
name|PREDEFINED_STRATEGIES
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|PREDEFINED_STRATEGIES
operator|.
name|add
argument_list|(
literal|"org.apache.cayenne.access.reveng.BasicNamingStrategy"
argument_list|)
expr_stmt|;
name|PREDEFINED_STRATEGIES
operator|.
name|add
argument_list|(
literal|"org.apache.cayenne.modeler.util.SmartNamingStrategy"
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|protected
name|DbAdapter
name|adapter
decl_stmt|;
specifier|protected
name|NamingStrategy
name|strategy
decl_stmt|;
specifier|public
name|ConnectionWizard
parameter_list|(
name|CayenneController
name|parent
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|altDataSourceKey
parameter_list|,
name|DBConnectionInfo
name|altDataSource
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|title
argument_list|,
name|altDataSourceKey
argument_list|,
name|altDataSource
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DataSourceWizardView
name|createView
parameter_list|()
block|{
name|ConnectionWizardView
name|view
init|=
operator|new
name|ConnectionWizardView
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|ModelerPreferences
name|pref
init|=
name|ModelerPreferences
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|?
argument_list|>
name|arr
init|=
name|pref
operator|.
name|getVector
argument_list|(
name|STRATEGIES_PREFERENCE
argument_list|,
name|PREDEFINED_STRATEGIES
argument_list|)
decl_stmt|;
name|JComboBox
name|strategyCombo
init|=
name|view
operator|.
name|getStrategyComboBox
argument_list|()
decl_stmt|;
name|strategyCombo
operator|.
name|setModel
argument_list|(
operator|new
name|DefaultComboBoxModel
argument_list|(
name|arr
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|view
return|;
block|}
comment|/**      * Overrides superclass to keep an open connection around for the caller's use.      */
specifier|public
name|void
name|okAction
parameter_list|()
block|{
comment|// build connection and adapter...
name|DBConnectionInfo
name|info
init|=
name|getConnectionInfo
argument_list|()
decl_stmt|;
name|ClassLoadingService
name|classLoader
init|=
name|getApplication
argument_list|()
operator|.
name|getClassLoadingService
argument_list|()
decl_stmt|;
try|try
block|{
name|this
operator|.
name|adapter
operator|=
name|info
operator|.
name|makeAdapter
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|reportError
argument_list|(
literal|"DbAdapter Error"
argument_list|,
name|th
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|this
operator|.
name|connection
operator|=
name|info
operator|.
name|makeDataSource
argument_list|(
name|classLoader
argument_list|)
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|reportError
argument_list|(
literal|"Connection Error"
argument_list|,
name|th
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|String
name|strategyClass
init|=
operator|(
name|String
operator|)
operator|(
operator|(
name|ConnectionWizardView
operator|)
name|view
operator|)
operator|.
name|getStrategyComboBox
argument_list|()
operator|.
name|getSelectedItem
argument_list|()
decl_stmt|;
name|this
operator|.
name|strategy
operator|=
operator|(
name|NamingStrategy
operator|)
name|classLoader
operator|.
name|loadClass
argument_list|(
name|strategyClass
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
comment|/**              * Be user-friendly and update preferences with specified strategy              */
name|ModelerPreferences
name|pref
init|=
name|ModelerPreferences
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
name|Vector
name|arr
init|=
name|pref
operator|.
name|getVector
argument_list|(
name|STRATEGIES_PREFERENCE
argument_list|,
name|PREDEFINED_STRATEGIES
argument_list|)
decl_stmt|;
comment|//move to top
name|arr
operator|.
name|remove
argument_list|(
name|strategyClass
argument_list|)
expr_stmt|;
name|arr
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|strategyClass
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setProperty
argument_list|(
name|STRATEGIES_PREFERENCE
argument_list|,
name|arr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|reportError
argument_list|(
literal|"Naming Strategy Initialization Error"
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"Naming Strategy Initialization Error: "
operator|+
name|th
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// set success flag, and unblock the caller...
name|canceled
operator|=
literal|false
expr_stmt|;
name|view
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns configured DB connection.      */
specifier|public
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
comment|/**      * Returns configured DbAdapter.      */
specifier|public
name|DbAdapter
name|getAdapter
parameter_list|()
block|{
return|return
name|adapter
return|;
block|}
comment|/**      * Returns configured naming strategy      */
specifier|public
name|NamingStrategy
name|getNamingStrategy
parameter_list|()
block|{
return|return
name|strategy
return|;
block|}
block|}
end_class

end_unit

