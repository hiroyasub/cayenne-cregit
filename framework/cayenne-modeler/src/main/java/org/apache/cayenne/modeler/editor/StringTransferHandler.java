begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|DataFlavor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|StringSelection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|Transferable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|UnsupportedFlavorException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|TransferHandler
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|StringTransferHandler
extends|extends
name|TransferHandler
block|{
specifier|protected
specifier|abstract
name|String
name|exportString
parameter_list|(
name|JComponent
name|c
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|void
name|importString
parameter_list|(
name|JComponent
name|c
parameter_list|,
name|String
name|str
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|void
name|cleanup
parameter_list|(
name|JComponent
name|c
parameter_list|,
name|boolean
name|remove
parameter_list|)
function_decl|;
specifier|protected
name|Transferable
name|createTransferable
parameter_list|(
name|JComponent
name|c
parameter_list|)
block|{
return|return
operator|new
name|StringSelection
argument_list|(
name|exportString
argument_list|(
name|c
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|getSourceActions
parameter_list|(
name|JComponent
name|c
parameter_list|)
block|{
return|return
name|COPY_OR_MOVE
return|;
block|}
specifier|public
name|boolean
name|importData
parameter_list|(
name|JComponent
name|c
parameter_list|,
name|Transferable
name|t
parameter_list|)
block|{
if|if
condition|(
name|canImport
argument_list|(
name|c
argument_list|,
name|t
operator|.
name|getTransferDataFlavors
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|str
init|=
operator|(
name|String
operator|)
name|t
operator|.
name|getTransferData
argument_list|(
name|DataFlavor
operator|.
name|stringFlavor
argument_list|)
decl_stmt|;
name|importString
argument_list|(
name|c
argument_list|,
name|str
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedFlavorException
name|ufe
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|exportDone
parameter_list|(
name|JComponent
name|c
parameter_list|,
name|Transferable
name|data
parameter_list|,
name|int
name|action
parameter_list|)
block|{
name|cleanup
argument_list|(
name|c
argument_list|,
name|action
operator|==
name|MOVE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|canImport
parameter_list|(
name|JComponent
name|c
parameter_list|,
name|DataFlavor
index|[]
name|flavors
parameter_list|)
block|{
for|for
control|(
name|DataFlavor
name|flavor
range|:
name|flavors
control|)
block|{
if|if
condition|(
name|DataFlavor
operator|.
name|stringFlavor
operator|.
name|equals
argument_list|(
name|flavor
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

