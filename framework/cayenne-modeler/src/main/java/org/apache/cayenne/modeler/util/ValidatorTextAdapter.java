begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextArea
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextField
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|DocumentEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|DocumentListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|JTextComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|ValidationException
import|;
end_import

begin_comment
comment|/**  * Text adapter with live validation, which is fired in  * VALIDATION_DELAY time.  * @author Andrey Razumovsky  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ValidatorTextAdapter
extends|extends
name|TextAdapter
block|{
comment|/**      * Time between end of user input and validation firing      */
specifier|static
specifier|final
name|long
name|VALIDATION_DELAY
init|=
literal|1500L
decl_stmt|;
comment|/**      * Is the live-checking enabled for the text component      */
name|boolean
name|liveCheckEnabled
decl_stmt|;
specifier|public
name|ValidatorTextAdapter
parameter_list|(
name|JTextField
name|textField
parameter_list|)
block|{
name|this
argument_list|(
name|textField
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ValidatorTextAdapter
parameter_list|(
name|JTextField
name|textField
parameter_list|,
name|boolean
name|liveCheckEnabled
parameter_list|)
block|{
name|super
argument_list|(
name|textField
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setLiveCheckEnabled
argument_list|(
name|liveCheckEnabled
argument_list|)
expr_stmt|;
name|install
argument_list|(
name|textField
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ValidatorTextAdapter
parameter_list|(
name|JTextArea
name|textArea
parameter_list|)
block|{
name|this
argument_list|(
name|textArea
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ValidatorTextAdapter
parameter_list|(
name|JTextArea
name|textArea
parameter_list|,
name|boolean
name|liveCheckEnabled
parameter_list|)
block|{
name|super
argument_list|(
name|textArea
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setLiveCheckEnabled
argument_list|(
name|liveCheckEnabled
argument_list|)
expr_stmt|;
name|install
argument_list|(
name|textArea
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|install
parameter_list|(
name|JTextComponent
name|textComponent
parameter_list|)
block|{
name|TimerScheduler
name|ts
init|=
operator|new
name|TimerScheduler
argument_list|()
decl_stmt|;
name|textComponent
operator|.
name|getDocument
argument_list|()
operator|.
name|addDocumentListener
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|textComponent
operator|.
name|addFocusListener
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
comment|/**      * Live-checks if text is correct      * @throws ValidationException if the text is incorrect      */
specifier|protected
specifier|abstract
name|void
name|validate
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|ValidationException
function_decl|;
comment|/**      * @return Is the live-checking enabled for the text component      */
specifier|public
name|boolean
name|isLiveCheckEnabled
parameter_list|()
block|{
return|return
name|liveCheckEnabled
return|;
block|}
comment|/**      * Enables/disables live-checking      */
specifier|public
name|void
name|setLiveCheckEnabled
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|liveCheckEnabled
operator|=
name|b
expr_stmt|;
block|}
comment|/**      * Task to be fired after some delay       */
class|class
name|ValidationTimerTask
extends|extends
name|TimerTask
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|validate
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|validate
parameter_list|()
block|{
try|try
block|{
name|validate
argument_list|(
name|textComponent
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValidationException
name|vex
parameter_list|)
block|{
name|textComponent
operator|.
name|setBackground
argument_list|(
name|errorColor
argument_list|)
expr_stmt|;
name|textComponent
operator|.
name|setToolTipText
argument_list|(
name|vex
operator|.
name|getUnlabeledMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Listener to user input, which fires validation timer       */
class|class
name|TimerScheduler
implements|implements
name|DocumentListener
implements|,
name|FocusListener
block|{
comment|/**          * The timer, which fires validation after some delay          */
name|Timer
name|validationTimer
decl_stmt|;
name|Object
name|sync
decl_stmt|;
comment|//to prevent concurrent collisions
name|TimerScheduler
parameter_list|()
block|{
name|sync
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|insertUpdate
parameter_list|(
name|DocumentEvent
name|e
parameter_list|)
block|{
name|schedule
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|changedUpdate
parameter_list|(
name|DocumentEvent
name|e
parameter_list|)
block|{
name|schedule
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|removeUpdate
parameter_list|(
name|DocumentEvent
name|e
parameter_list|)
block|{
name|schedule
argument_list|()
expr_stmt|;
block|}
name|void
name|schedule
parameter_list|()
block|{
if|if
condition|(
name|isLiveCheckEnabled
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|sync
init|)
block|{
if|if
condition|(
name|validationTimer
operator|!=
literal|null
condition|)
block|{
name|validationTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
name|clear
argument_list|()
expr_stmt|;
name|validationTimer
operator|=
operator|new
name|Timer
argument_list|(
literal|"cayenne-validation-timer"
argument_list|)
expr_stmt|;
name|validationTimer
operator|.
name|schedule
argument_list|(
operator|new
name|ValidationTimerTask
argument_list|()
argument_list|,
name|VALIDATION_DELAY
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|focusGained
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
block|}
specifier|public
name|void
name|focusLost
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|sync
init|)
block|{
if|if
condition|(
name|validationTimer
operator|!=
literal|null
condition|)
block|{
name|validationTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
block|}
block|}
empty_stmt|;
block|}
block|}
end_class

end_unit

