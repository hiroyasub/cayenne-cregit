begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|dbentity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|AttributeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneTableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|ProjectUtil
import|;
end_import

begin_comment
comment|/**  * Model for DbEntity attributes. Allows adding/removing attributes, modifying types and  * names.  *   * @author Misha Shengaout  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|DbAttributeTableModel
extends|extends
name|CayenneTableModel
block|{
comment|// Columns
specifier|private
specifier|static
specifier|final
name|int
name|DB_ATTRIBUTE_NAME
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DB_ATTRIBUTE_TYPE
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DB_ATTRIBUTE_PRIMARY_KEY
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DB_ATTRIBUTE_MANDATORY
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DB_ATTRIBUTE_MAX
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DB_ATTRIBUTE_SCALE
init|=
literal|5
decl_stmt|;
specifier|protected
name|DbEntity
name|entity
decl_stmt|;
specifier|public
name|DbAttributeTableModel
parameter_list|(
name|DbEntity
name|entity
parameter_list|,
name|ProjectController
name|mediator
parameter_list|,
name|Object
name|eventSource
parameter_list|)
block|{
name|this
argument_list|(
name|entity
argument_list|,
name|mediator
argument_list|,
name|eventSource
argument_list|,
operator|new
name|ArrayList
argument_list|(
name|entity
operator|.
name|getAttributes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|entity
operator|=
name|entity
expr_stmt|;
block|}
specifier|public
name|DbAttributeTableModel
parameter_list|(
name|DbEntity
name|entity
parameter_list|,
name|ProjectController
name|mediator
parameter_list|,
name|Object
name|eventSource
parameter_list|,
name|java
operator|.
name|util
operator|.
name|List
name|objectList
parameter_list|)
block|{
name|super
argument_list|(
name|mediator
argument_list|,
name|eventSource
argument_list|,
name|objectList
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|nameColumnInd
parameter_list|()
block|{
return|return
name|DB_ATTRIBUTE_NAME
return|;
block|}
specifier|public
name|int
name|typeColumnInd
parameter_list|()
block|{
return|return
name|DB_ATTRIBUTE_TYPE
return|;
block|}
specifier|public
name|int
name|mandatoryColumnInd
parameter_list|()
block|{
return|return
name|DB_ATTRIBUTE_MANDATORY
return|;
block|}
comment|/**      * Returns DbAttribute class.      */
specifier|public
name|Class
name|getElementsClass
parameter_list|()
block|{
return|return
name|DbAttribute
operator|.
name|class
return|;
block|}
comment|/**      * Returns the number of columns in the table.      */
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
literal|6
return|;
block|}
specifier|public
name|DbAttribute
name|getAttribute
parameter_list|(
name|int
name|row
parameter_list|)
block|{
return|return
operator|(
name|row
operator|>=
literal|0
operator|&&
name|row
operator|<
name|objectList
operator|.
name|size
argument_list|()
operator|)
condition|?
operator|(
name|DbAttribute
operator|)
name|objectList
operator|.
name|get
argument_list|(
name|row
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|col
parameter_list|)
block|{
switch|switch
condition|(
name|col
condition|)
block|{
case|case
name|DB_ATTRIBUTE_NAME
case|:
return|return
literal|"Name"
return|;
case|case
name|DB_ATTRIBUTE_TYPE
case|:
return|return
literal|"Type"
return|;
case|case
name|DB_ATTRIBUTE_PRIMARY_KEY
case|:
return|return
literal|"PK"
return|;
case|case
name|DB_ATTRIBUTE_SCALE
case|:
return|return
literal|"Scale"
return|;
case|case
name|DB_ATTRIBUTE_MANDATORY
case|:
return|return
literal|"Mandatory"
return|;
case|case
name|DB_ATTRIBUTE_MAX
case|:
return|return
literal|"Max Length"
return|;
default|default:
return|return
literal|""
return|;
block|}
block|}
specifier|public
name|Class
name|getColumnClass
parameter_list|(
name|int
name|col
parameter_list|)
block|{
switch|switch
condition|(
name|col
condition|)
block|{
case|case
name|DB_ATTRIBUTE_PRIMARY_KEY
case|:
case|case
name|DB_ATTRIBUTE_MANDATORY
case|:
return|return
name|Boolean
operator|.
name|class
return|;
default|default:
return|return
name|String
operator|.
name|class
return|;
block|}
block|}
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|DbAttribute
name|attr
init|=
name|getAttribute
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|DB_ATTRIBUTE_NAME
case|:
return|return
name|getAttributeName
argument_list|(
name|attr
argument_list|)
return|;
case|case
name|DB_ATTRIBUTE_TYPE
case|:
return|return
name|getAttributeType
argument_list|(
name|attr
argument_list|)
return|;
case|case
name|DB_ATTRIBUTE_PRIMARY_KEY
case|:
return|return
name|isPrimaryKey
argument_list|(
name|attr
argument_list|)
return|;
case|case
name|DB_ATTRIBUTE_SCALE
case|:
return|return
name|getScale
argument_list|(
name|attr
argument_list|)
return|;
case|case
name|DB_ATTRIBUTE_MANDATORY
case|:
return|return
name|isMandatory
argument_list|(
name|attr
argument_list|)
return|;
case|case
name|DB_ATTRIBUTE_MAX
case|:
return|return
name|getMaxLength
argument_list|(
name|attr
argument_list|)
return|;
default|default:
return|return
literal|""
return|;
block|}
block|}
specifier|public
name|void
name|setUpdatedValueAt
parameter_list|(
name|Object
name|newVal
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
name|DbAttribute
name|attr
init|=
name|getAttribute
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|AttributeEvent
name|e
init|=
operator|new
name|AttributeEvent
argument_list|(
name|eventSource
argument_list|,
name|attr
argument_list|,
name|entity
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|col
condition|)
block|{
case|case
name|DB_ATTRIBUTE_NAME
case|:
name|e
operator|.
name|setOldName
argument_list|(
name|attr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attr
operator|.
name|setName
argument_list|(
operator|(
name|String
operator|)
name|newVal
argument_list|)
expr_stmt|;
comment|// setAttributeName((String) newVal, attr);
name|fireTableCellUpdated
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
expr_stmt|;
break|break;
case|case
name|DB_ATTRIBUTE_TYPE
case|:
name|setAttributeType
argument_list|(
operator|(
name|String
operator|)
name|newVal
argument_list|,
name|attr
argument_list|)
expr_stmt|;
break|break;
case|case
name|DB_ATTRIBUTE_PRIMARY_KEY
case|:
if|if
condition|(
operator|!
name|setPrimaryKey
argument_list|(
operator|(
operator|(
name|Boolean
operator|)
name|newVal
operator|)
argument_list|,
name|attr
argument_list|,
name|row
argument_list|)
condition|)
block|{
return|return;
block|}
break|break;
case|case
name|DB_ATTRIBUTE_SCALE
case|:
name|setScale
argument_list|(
operator|(
name|String
operator|)
name|newVal
argument_list|,
name|attr
argument_list|)
expr_stmt|;
break|break;
case|case
name|DB_ATTRIBUTE_MANDATORY
case|:
name|setMandatory
argument_list|(
operator|(
name|Boolean
operator|)
name|newVal
argument_list|,
name|attr
argument_list|)
expr_stmt|;
break|break;
case|case
name|DB_ATTRIBUTE_MAX
case|:
name|setMaxLength
argument_list|(
operator|(
name|String
operator|)
name|newVal
argument_list|,
name|attr
argument_list|)
expr_stmt|;
break|break;
block|}
name|mediator
operator|.
name|fireDbAttributeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getMaxLength
parameter_list|(
name|DbAttribute
name|attr
parameter_list|)
block|{
return|return
operator|(
name|attr
operator|.
name|getMaxLength
argument_list|()
operator|>=
literal|0
operator|)
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|attr
operator|.
name|getMaxLength
argument_list|()
argument_list|)
else|:
literal|""
return|;
block|}
specifier|public
name|String
name|getAttributeName
parameter_list|(
name|DbAttribute
name|attr
parameter_list|)
block|{
return|return
name|attr
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAttributeType
parameter_list|(
name|DbAttribute
name|attr
parameter_list|)
block|{
return|return
name|TypesMapping
operator|.
name|getSqlNameByType
argument_list|(
name|attr
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getScale
parameter_list|(
name|DbAttribute
name|attr
parameter_list|)
block|{
return|return
operator|(
name|attr
operator|.
name|getScale
argument_list|()
operator|>=
literal|0
operator|)
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|attr
operator|.
name|getScale
argument_list|()
argument_list|)
else|:
literal|""
return|;
block|}
specifier|public
name|Boolean
name|isPrimaryKey
parameter_list|(
name|DbAttribute
name|attr
parameter_list|)
block|{
return|return
operator|(
name|attr
operator|.
name|isPrimaryKey
argument_list|()
operator|)
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
specifier|public
name|Boolean
name|isMandatory
parameter_list|(
name|DbAttribute
name|attr
parameter_list|)
block|{
return|return
operator|(
name|attr
operator|.
name|isMandatory
argument_list|()
operator|)
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
specifier|public
name|void
name|setMaxLength
parameter_list|(
name|String
name|newVal
parameter_list|,
name|DbAttribute
name|attr
parameter_list|)
block|{
if|if
condition|(
name|newVal
operator|==
literal|null
operator|||
name|newVal
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|attr
operator|.
name|setMaxLength
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|attr
operator|.
name|setMaxLength
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|newVal
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
literal|null
argument_list|,
literal|"Invalid Max Length ("
operator|+
name|newVal
operator|+
literal|"), only numbers are allowed"
argument_list|,
literal|"Invalid Maximum Length"
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
specifier|public
name|void
name|setAttributeName
parameter_list|(
name|String
name|newVal
parameter_list|,
name|DbAttribute
name|attr
parameter_list|)
block|{
name|String
name|newName
init|=
name|newVal
operator|.
name|trim
argument_list|()
decl_stmt|;
name|ProjectUtil
operator|.
name|setAttributeName
argument_list|(
name|attr
argument_list|,
name|newName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setAttributeType
parameter_list|(
name|String
name|newVal
parameter_list|,
name|DbAttribute
name|attr
parameter_list|)
block|{
name|attr
operator|.
name|setType
argument_list|(
name|TypesMapping
operator|.
name|getSqlTypeByName
argument_list|(
name|newVal
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setScale
parameter_list|(
name|String
name|newVal
parameter_list|,
name|DbAttribute
name|attr
parameter_list|)
block|{
if|if
condition|(
name|newVal
operator|==
literal|null
operator|||
name|newVal
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|attr
operator|.
name|setScale
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|attr
operator|.
name|setScale
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|newVal
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
literal|null
argument_list|,
literal|"Invalid precision ("
operator|+
name|newVal
operator|+
literal|"), only numbers are allowed."
argument_list|,
literal|"Invalid Precision Value"
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|setPrimaryKey
parameter_list|(
name|Boolean
name|newVal
parameter_list|,
name|DbAttribute
name|attr
parameter_list|,
name|int
name|row
parameter_list|)
block|{
name|boolean
name|flag
init|=
name|newVal
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
comment|// when PK is unset, we need to fix some derived flags
if|if
condition|(
operator|!
name|flag
condition|)
block|{
name|attr
operator|.
name|setGenerated
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Collection
name|relationships
init|=
name|ProjectUtil
operator|.
name|getRelationshipsUsingAttributeAsTarget
argument_list|(
name|attr
argument_list|)
decl_stmt|;
name|relationships
operator|.
name|addAll
argument_list|(
name|ProjectUtil
operator|.
name|getRelationshipsUsingAttributeAsSource
argument_list|(
name|attr
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|relationships
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
name|it
init|=
name|relationships
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbRelationship
name|relationship
init|=
operator|(
name|DbRelationship
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|relationship
operator|.
name|isToDependentPK
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|// filtered only those that are to dep PK
if|if
condition|(
name|relationships
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|message
init|=
operator|(
name|relationships
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
condition|?
literal|"Fix \"To Dep PK\" relationship using this attribute?"
else|:
literal|"Fix "
operator|+
name|relationships
operator|.
name|size
argument_list|()
operator|+
literal|" \"To Dep PK\" relationships using this attribute?"
decl_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|Application
operator|.
name|getFrame
argument_list|()
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
comment|// no action needed
return|return
literal|false
return|;
block|}
comment|// fix target relationships
name|Iterator
name|fixIt
init|=
name|relationships
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|fixIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbRelationship
name|relationship
init|=
operator|(
name|DbRelationship
operator|)
name|fixIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|relationship
operator|.
name|setToDependentPK
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|attr
operator|.
name|setPrimaryKey
argument_list|(
name|flag
argument_list|)
expr_stmt|;
if|if
condition|(
name|flag
condition|)
block|{
name|attr
operator|.
name|setMandatory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fireTableCellUpdated
argument_list|(
name|row
argument_list|,
name|DB_ATTRIBUTE_MANDATORY
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|setMandatory
parameter_list|(
name|Boolean
name|newVal
parameter_list|,
name|DbAttribute
name|attr
parameter_list|)
block|{
name|attr
operator|.
name|setMandatory
argument_list|(
name|newVal
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setGenerated
parameter_list|(
name|Boolean
name|newVal
parameter_list|,
name|DbAttribute
name|attr
parameter_list|)
block|{
name|attr
operator|.
name|setGenerated
argument_list|(
name|newVal
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
name|DbAttribute
name|attrib
init|=
name|getAttribute
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|attrib
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|col
operator|==
name|mandatoryColumnInd
argument_list|()
condition|)
block|{
if|if
condition|(
name|attrib
operator|.
name|isPrimaryKey
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

