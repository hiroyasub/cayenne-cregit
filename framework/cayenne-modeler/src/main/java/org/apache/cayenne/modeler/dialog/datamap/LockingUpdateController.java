begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|datamap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|AttributeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EntityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|RelationshipEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|BindingBuilder
import|;
end_import

begin_class
specifier|public
class|class
name|LockingUpdateController
extends|extends
name|CayenneController
block|{
specifier|protected
name|LockingUpdateDialog
name|view
decl_stmt|;
specifier|protected
name|DataMap
name|dataMap
decl_stmt|;
specifier|public
name|LockingUpdateController
parameter_list|(
name|ProjectController
name|parent
parameter_list|,
name|DataMap
name|dataMap
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataMap
operator|=
name|dataMap
expr_stmt|;
block|}
specifier|public
name|void
name|startup
parameter_list|()
block|{
name|view
operator|=
operator|new
name|LockingUpdateDialog
argument_list|()
expr_stmt|;
name|boolean
name|on
init|=
name|dataMap
operator|.
name|getDefaultLockType
argument_list|()
operator|==
name|ObjEntity
operator|.
name|LOCK_TYPE_OPTIMISTIC
decl_stmt|;
name|view
operator|.
name|setTitle
argument_list|(
name|on
condition|?
literal|"Enable Optimistic Locking"
else|:
literal|"Disable Optimistic Locking"
argument_list|)
expr_stmt|;
name|initBindings
argument_list|()
expr_stmt|;
name|view
operator|.
name|pack
argument_list|()
expr_stmt|;
name|view
operator|.
name|setModal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|centerView
argument_list|()
expr_stmt|;
name|makeCloseableOnEscape
argument_list|()
expr_stmt|;
name|view
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Component
name|getView
parameter_list|()
block|{
return|return
name|view
return|;
block|}
specifier|protected
name|void
name|initBindings
parameter_list|()
block|{
name|BindingBuilder
name|builder
init|=
operator|new
name|BindingBuilder
argument_list|(
name|getApplication
argument_list|()
operator|.
name|getBindingFactory
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|builder
operator|.
name|bindToAction
argument_list|(
name|view
operator|.
name|getCancelButton
argument_list|()
argument_list|,
literal|"cancelAction()"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|bindToAction
argument_list|(
name|view
operator|.
name|getUpdateButton
argument_list|()
argument_list|,
literal|"updateAction()"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|cancelAction
parameter_list|()
block|{
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|view
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|updateAction
parameter_list|()
block|{
name|int
name|defaultLockType
init|=
name|dataMap
operator|.
name|getDefaultLockType
argument_list|()
decl_stmt|;
name|boolean
name|on
init|=
name|defaultLockType
operator|==
name|ObjEntity
operator|.
name|LOCK_TYPE_OPTIMISTIC
decl_stmt|;
name|boolean
name|updateEntities
init|=
name|view
operator|.
name|getEntities
argument_list|()
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|updateAttributes
init|=
name|view
operator|.
name|getAttributes
argument_list|()
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|updateRelationships
init|=
name|view
operator|.
name|getRelationships
argument_list|()
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|ProjectController
name|parent
init|=
operator|(
name|ProjectController
operator|)
name|getParent
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|dataMap
operator|.
name|getObjEntities
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ObjEntity
name|entity
init|=
operator|(
name|ObjEntity
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|updateEntities
operator|&&
name|defaultLockType
operator|!=
name|entity
operator|.
name|getDeclaredLockType
argument_list|()
condition|)
block|{
name|entity
operator|.
name|setDeclaredLockType
argument_list|(
name|defaultLockType
argument_list|)
expr_stmt|;
name|parent
operator|.
name|fireObjEntityEvent
argument_list|(
operator|new
name|EntityEvent
argument_list|(
name|this
argument_list|,
name|entity
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updateAttributes
condition|)
block|{
name|Iterator
name|attributes
init|=
name|entity
operator|.
name|getAttributes
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|attributes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ObjAttribute
name|a
init|=
operator|(
name|ObjAttribute
operator|)
name|attributes
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|isUsedForLocking
argument_list|()
operator|!=
name|on
condition|)
block|{
name|a
operator|.
name|setUsedForLocking
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|parent
operator|.
name|fireObjAttributeEvent
argument_list|(
operator|new
name|AttributeEvent
argument_list|(
name|this
argument_list|,
name|a
argument_list|,
name|entity
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|updateRelationships
condition|)
block|{
name|Iterator
name|relationships
init|=
name|entity
operator|.
name|getRelationships
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|relationships
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ObjRelationship
name|r
init|=
operator|(
name|ObjRelationship
operator|)
name|relationships
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|isUsedForLocking
argument_list|()
operator|!=
name|on
condition|)
block|{
name|r
operator|.
name|setUsedForLocking
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|parent
operator|.
name|fireObjRelationshipEvent
argument_list|(
operator|new
name|RelationshipEvent
argument_list|(
name|this
argument_list|,
name|r
argument_list|,
name|entity
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|view
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

