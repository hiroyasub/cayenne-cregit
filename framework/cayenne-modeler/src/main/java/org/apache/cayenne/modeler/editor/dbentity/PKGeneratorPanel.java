begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|dbentity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EntityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|PKGeneratorPanel
extends|extends
name|JPanel
block|{
specifier|protected
name|ProjectController
name|mediator
decl_stmt|;
specifier|public
name|PKGeneratorPanel
parameter_list|(
name|ProjectController
name|mediator
parameter_list|)
block|{
name|this
operator|.
name|mediator
operator|=
name|mediator
expr_stmt|;
block|}
comment|/**      * Called by parent when DbEntity changes, regardless of whether this panel is visible      * or not. Another case when this method is invoked is when entity tab changes and      * this panel may need a refresh.      */
specifier|public
specifier|abstract
name|void
name|setDbEntity
parameter_list|(
name|DbEntity
name|entity
parameter_list|)
function_decl|;
comment|/**      * Called by parent when the panel becomes visible.      */
specifier|public
specifier|abstract
name|void
name|onInit
parameter_list|(
name|DbEntity
name|entity
parameter_list|)
function_decl|;
specifier|protected
name|void
name|resetStrategy
parameter_list|(
name|DbEntity
name|entity
parameter_list|,
name|boolean
name|resetCustomSequence
parameter_list|,
name|boolean
name|resetDBGenerated
parameter_list|)
block|{
name|boolean
name|hasChanges
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|resetCustomSequence
operator|&&
name|entity
operator|.
name|getPrimaryKeyGenerator
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|entity
operator|.
name|setPrimaryKeyGenerator
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hasChanges
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|resetDBGenerated
condition|)
block|{
for|for
control|(
name|DbAttribute
name|a
range|:
name|entity
operator|.
name|getPrimaryKeys
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|isGenerated
argument_list|()
condition|)
block|{
name|a
operator|.
name|setGenerated
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|hasChanges
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|hasChanges
condition|)
block|{
name|mediator
operator|.
name|fireDbEntityEvent
argument_list|(
operator|new
name|EntityEvent
argument_list|(
name|this
argument_list|,
name|entity
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

