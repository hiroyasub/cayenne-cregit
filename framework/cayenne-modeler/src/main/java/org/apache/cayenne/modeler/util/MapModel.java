begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scopemvc
operator|.
name|core
operator|.
name|Selector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scopemvc
operator|.
name|model
operator|.
name|basic
operator|.
name|BasicModel
import|;
end_import

begin_comment
comment|/**  * Scope active model that has an internal map of properties,   * firing change events when a value in the map changes.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|MapModel
extends|extends
name|BasicModel
block|{
specifier|protected
name|Map
name|map
decl_stmt|;
specifier|public
name|MapModel
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|Selector
name|selectorForKey
parameter_list|(
name|String
name|key
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|String
name|defaultForKey
parameter_list|(
name|String
name|key
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|String
index|[]
name|supportedProperties
parameter_list|()
function_decl|;
comment|/**      * Saves properties in provided map.      */
specifier|public
name|void
name|storeProperties
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
name|String
index|[]
name|properties
init|=
name|supportedProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|properties
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|properties
index|[
name|i
index|]
argument_list|,
name|this
operator|.
name|map
operator|.
name|get
argument_list|(
name|properties
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setMap
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
block|}
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|defaultForKey
argument_list|(
name|key
argument_list|)
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
name|Object
name|oldValue
init|=
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|oldValue
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|fireModelChange
argument_list|(
name|VALUE_CHANGED
argument_list|,
name|selectorForKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|value
init|=
operator|(
name|map
operator|!=
literal|null
operator|)
condition|?
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
else|:
literal|null
decl_stmt|;
return|return
operator|(
name|value
operator|!=
literal|null
operator|)
condition|?
name|value
else|:
name|defaultForKey
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
end_class

end_unit

