begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Toolkit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|KeyStroke
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|validator
operator|.
name|ValidationDisplayHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|validator
operator|.
name|ValidatorDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|ProjectPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project2
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project2
operator|.
name|validate
operator|.
name|ConfigurationValidationVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project2
operator|.
name|validate
operator|.
name|ValidationInfo
import|;
end_import

begin_comment
comment|/**  * UI action that performs full project validation.  *   */
end_comment

begin_class
specifier|public
class|class
name|ValidateAction
extends|extends
name|CayenneAction
block|{
specifier|public
specifier|static
name|String
name|getActionName
parameter_list|()
block|{
return|return
literal|"Validate Project"
return|;
block|}
specifier|public
name|ValidateAction
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|super
argument_list|(
name|getActionName
argument_list|()
argument_list|,
name|application
argument_list|)
expr_stmt|;
block|}
specifier|public
name|KeyStroke
name|getAcceleratorKey
parameter_list|()
block|{
return|return
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_V
argument_list|,
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getMenuShortcutKeyMask
argument_list|()
operator||
name|ActionEvent
operator|.
name|SHIFT_MASK
argument_list|)
return|;
block|}
comment|/** 	 * Validates project for possible conflicts and incomplete mappings. 	 */
specifier|public
name|void
name|performAction
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|ConfigurationValidationVisitor
name|validatVisitor
init|=
operator|new
name|ConfigurationValidationVisitor
argument_list|(
name|getCurrentProject
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ValidationInfo
argument_list|>
name|object
init|=
operator|(
name|List
argument_list|<
name|ValidationInfo
argument_list|>
operator|)
name|getCurrentProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
operator|.
name|acceptVisitor
argument_list|(
name|validatVisitor
argument_list|)
decl_stmt|;
name|int
name|validationCode
init|=
name|validatVisitor
operator|.
name|getMaxSeverity
argument_list|()
decl_stmt|;
comment|// If there were errors or warnings at validation, display them
if|if
condition|(
name|validationCode
operator|>=
name|ValidationDisplayHandler
operator|.
name|WARNING
condition|)
block|{
name|ValidatorDialog
operator|.
name|showDialog
argument_list|(
name|Application
operator|.
name|getFrame
argument_list|()
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ValidatorDialog
operator|.
name|showValidationSuccess
argument_list|(
name|Application
operator|.
name|getFrame
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	* Returns<code>true</code> if path contains a Project object  	* and the project is modified. 	*/
specifier|public
name|boolean
name|enableForPath
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Project
name|project
init|=
name|path
operator|.
name|firstInstanceOf
argument_list|(
name|Project
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|project
operator|!=
literal|null
return|;
block|}
block|}
end_class

end_unit

