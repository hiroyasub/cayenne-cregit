begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|pref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultComboBoxModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conn
operator|.
name|DriverDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|DBConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|pref
operator|.
name|Domain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|pref
operator|.
name|PreferenceEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|BindingBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * Editor for the local DataSources configured in preferences.  *   */
end_comment

begin_class
specifier|public
class|class
name|DataSourcePreferences
extends|extends
name|CayenneController
block|{
specifier|protected
name|DataSourcePreferencesView
name|view
decl_stmt|;
specifier|protected
name|PreferenceEditor
name|editor
decl_stmt|;
specifier|protected
name|String
name|dataSourceKey
decl_stmt|;
specifier|protected
name|Map
name|dataSources
decl_stmt|;
specifier|public
name|DataSourcePreferences
parameter_list|(
name|PreferenceDialog
name|parentController
parameter_list|)
block|{
name|super
argument_list|(
name|parentController
argument_list|)
expr_stmt|;
name|this
operator|.
name|view
operator|=
operator|new
name|DataSourcePreferencesView
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|editor
operator|=
name|parentController
operator|.
name|getEditor
argument_list|()
expr_stmt|;
comment|// init view data
name|this
operator|.
name|dataSources
operator|=
name|getDataSourceDomain
argument_list|()
operator|.
name|getDetailsMap
argument_list|(
name|DBConnectionInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|Object
index|[]
name|keys
init|=
name|dataSources
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|DefaultComboBoxModel
name|dataSourceModel
init|=
operator|new
name|DefaultComboBoxModel
argument_list|(
name|keys
argument_list|)
decl_stmt|;
name|view
operator|.
name|getDataSources
argument_list|()
operator|.
name|setModel
argument_list|(
name|dataSourceModel
argument_list|)
expr_stmt|;
name|initBindings
argument_list|()
expr_stmt|;
comment|// show first item
if|if
condition|(
name|keys
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|view
operator|.
name|getDataSources
argument_list|()
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|editDataSourceAction
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Component
name|getView
parameter_list|()
block|{
return|return
name|view
return|;
block|}
specifier|protected
name|void
name|initBindings
parameter_list|()
block|{
name|BindingBuilder
name|builder
init|=
operator|new
name|BindingBuilder
argument_list|(
name|getApplication
argument_list|()
operator|.
name|getBindingFactory
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|builder
operator|.
name|bindToAction
argument_list|(
name|view
operator|.
name|getAddDataSource
argument_list|()
argument_list|,
literal|"newDataSourceAction()"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|bindToAction
argument_list|(
name|view
operator|.
name|getDuplicateDataSource
argument_list|()
argument_list|,
literal|"duplicateDataSourceAction()"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|bindToAction
argument_list|(
name|view
operator|.
name|getRemoveDataSource
argument_list|()
argument_list|,
literal|"removeDataSourceAction()"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|bindToAction
argument_list|(
name|view
operator|.
name|getTestDataSource
argument_list|()
argument_list|,
literal|"testDataSourceAction()"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|bindToComboSelection
argument_list|(
name|view
operator|.
name|getDataSources
argument_list|()
argument_list|,
literal|"dataSourceKey"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Domain
name|getDataSourceDomain
parameter_list|()
block|{
return|return
name|editor
operator|.
name|editableInstance
argument_list|(
name|getApplication
argument_list|()
operator|.
name|getPreferenceDomain
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|PreferenceEditor
name|getEditor
parameter_list|()
block|{
return|return
name|editor
return|;
block|}
specifier|public
name|Map
name|getDataSources
parameter_list|()
block|{
return|return
name|dataSources
return|;
block|}
specifier|public
name|String
name|getDataSourceKey
parameter_list|()
block|{
return|return
name|dataSourceKey
return|;
block|}
specifier|public
name|void
name|setDataSourceKey
parameter_list|(
name|String
name|dataSourceKey
parameter_list|)
block|{
name|this
operator|.
name|dataSourceKey
operator|=
name|dataSourceKey
expr_stmt|;
name|editDataSourceAction
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DBConnectionInfo
name|getConnectionInfo
parameter_list|()
block|{
return|return
operator|(
name|DBConnectionInfo
operator|)
name|dataSources
operator|.
name|get
argument_list|(
name|dataSourceKey
argument_list|)
return|;
block|}
comment|/**      * Shows a dialog to create new local DataSource configuration.      */
specifier|public
name|void
name|newDataSourceAction
parameter_list|()
block|{
name|DataSourceCreator
name|creatorWizard
init|=
operator|new
name|DataSourceCreator
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|DBConnectionInfo
name|dataSource
init|=
name|creatorWizard
operator|.
name|startupAction
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataSource
operator|!=
literal|null
condition|)
block|{
name|dataSources
operator|.
name|put
argument_list|(
name|creatorWizard
operator|.
name|getName
argument_list|()
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
name|Object
index|[]
name|keys
init|=
name|dataSources
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|view
operator|.
name|getDataSources
argument_list|()
operator|.
name|setModel
argument_list|(
operator|new
name|DefaultComboBoxModel
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|.
name|getDataSources
argument_list|()
operator|.
name|setSelectedItem
argument_list|(
name|creatorWizard
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|editDataSourceAction
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Shows a dialog to duplicate an existing local DataSource configuration.      */
specifier|public
name|void
name|duplicateDataSourceAction
parameter_list|()
block|{
name|Object
name|selected
init|=
name|view
operator|.
name|getDataSources
argument_list|()
operator|.
name|getSelectedItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|selected
operator|!=
literal|null
condition|)
block|{
name|DataSourceDuplicator
name|wizard
init|=
operator|new
name|DataSourceDuplicator
argument_list|(
name|this
argument_list|,
name|selected
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|DBConnectionInfo
name|dataSource
init|=
name|wizard
operator|.
name|startupAction
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataSource
operator|!=
literal|null
condition|)
block|{
name|dataSources
operator|.
name|put
argument_list|(
name|wizard
operator|.
name|getName
argument_list|()
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
name|Object
index|[]
name|keys
init|=
name|dataSources
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|view
operator|.
name|getDataSources
argument_list|()
operator|.
name|setModel
argument_list|(
operator|new
name|DefaultComboBoxModel
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|.
name|getDataSources
argument_list|()
operator|.
name|setSelectedItem
argument_list|(
name|wizard
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|editDataSourceAction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Removes current DataSource.      */
specifier|public
name|void
name|removeDataSourceAction
parameter_list|()
block|{
name|String
name|key
init|=
name|getDataSourceKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|editor
operator|.
name|deleteDetail
argument_list|(
name|getDataSourceDomain
argument_list|()
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|dataSources
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|Object
index|[]
name|keys
init|=
name|dataSources
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|view
operator|.
name|getDataSources
argument_list|()
operator|.
name|setModel
argument_list|(
operator|new
name|DefaultComboBoxModel
argument_list|(
name|keys
argument_list|)
argument_list|)
expr_stmt|;
name|editDataSourceAction
argument_list|(
name|keys
operator|.
name|length
operator|>
literal|0
condition|?
name|keys
index|[
literal|0
index|]
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Opens specified DataSource in the editor.      */
specifier|public
name|void
name|editDataSourceAction
parameter_list|(
name|Object
name|dataSourceKey
parameter_list|)
block|{
name|view
operator|.
name|getDataSources
argument_list|()
operator|.
name|setSelectedItem
argument_list|(
name|dataSourceKey
argument_list|)
expr_stmt|;
name|editDataSourceAction
argument_list|()
expr_stmt|;
block|}
comment|/**      * Opens current DataSource in the editor.      */
specifier|public
name|void
name|editDataSourceAction
parameter_list|()
block|{
name|this
operator|.
name|view
operator|.
name|getDataSourceEditor
argument_list|()
operator|.
name|setConnectionInfo
argument_list|(
name|getConnectionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tries to establish a DB connection, reporting the status of this operation.      */
specifier|public
name|void
name|testDataSourceAction
parameter_list|()
block|{
name|DBConnectionInfo
name|currentDataSource
init|=
name|getConnectionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentDataSource
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|currentDataSource
operator|.
name|getJdbcDriver
argument_list|()
operator|==
literal|null
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
literal|null
argument_list|,
literal|"No JDBC Driver specified"
argument_list|,
literal|"Warning"
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|currentDataSource
operator|.
name|getUrl
argument_list|()
operator|==
literal|null
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
literal|null
argument_list|,
literal|"No Database URL specified"
argument_list|,
literal|"Warning"
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|Class
name|driverClass
init|=
name|getApplication
argument_list|()
operator|.
name|getClassLoadingService
argument_list|()
operator|.
name|loadClass
argument_list|(
name|currentDataSource
operator|.
name|getJdbcDriver
argument_list|()
argument_list|)
decl_stmt|;
name|Driver
name|driver
init|=
operator|(
name|Driver
operator|)
name|driverClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// connect via Cayenne DriverDataSource - it addresses some driver issues...
name|Connection
name|c
init|=
operator|new
name|DriverDataSource
argument_list|(
name|driver
argument_list|,
name|currentDataSource
operator|.
name|getUrl
argument_list|()
argument_list|,
name|currentDataSource
operator|.
name|getUserName
argument_list|()
argument_list|,
name|currentDataSource
operator|.
name|getPassword
argument_list|()
argument_list|)
operator|.
name|getConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// i guess we can ignore this...
block|}
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
literal|null
argument_list|,
literal|"Connected Successfully"
argument_list|,
literal|"Success"
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|th
operator|=
name|Util
operator|.
name|unwindException
argument_list|(
name|th
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|"Error connecting to DB: "
operator|+
name|th
operator|.
name|getLocalizedMessage
argument_list|()
decl_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|StringBuilder
name|sbMessage
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
name|String
name|tempString
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|tempString
operator|=
name|st
operator|.
name|nextElement
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|len
operator|<
literal|110
condition|)
block|{
name|len
operator|=
name|len
operator|+
name|tempString
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|sbMessage
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|len
operator|=
literal|0
expr_stmt|;
block|}
name|sbMessage
operator|.
name|append
argument_list|(
name|tempString
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
literal|null
argument_list|,
name|sbMessage
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Warning"
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
end_class

end_unit

