begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|ognl
operator|.
name|Ognl
import|;
end_import

begin_import
import|import
name|ognl
operator|.
name|OgnlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * A class for expression evaluation using a designated scripting language (now - OGNL).  *   */
end_comment

begin_class
specifier|public
class|class
name|BindingExpression
block|{
specifier|private
name|Object
name|compiled
decl_stmt|;
specifier|protected
name|String
name|expression
decl_stmt|;
specifier|static
name|Throwable
name|unwind
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
if|if
condition|(
name|th
operator|instanceof
name|OgnlException
condition|)
block|{
name|Throwable
name|reason
init|=
operator|(
operator|(
name|OgnlException
operator|)
name|th
operator|)
operator|.
name|getReason
argument_list|()
decl_stmt|;
return|return
operator|(
name|reason
operator|!=
literal|null
operator|)
condition|?
name|unwind
argument_list|(
name|reason
argument_list|)
else|:
name|th
return|;
block|}
else|else
block|{
return|return
name|Util
operator|.
name|unwindException
argument_list|(
name|th
argument_list|)
return|;
block|}
block|}
specifier|public
name|BindingExpression
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|compiled
operator|=
name|Ognl
operator|.
name|parseExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OgnlException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Invalid expression - "
operator|+
name|expression
argument_list|,
name|BindingBase
operator|.
name|unwind
argument_list|(
name|ex
argument_list|)
argument_list|)
throw|;
block|}
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
specifier|public
name|String
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
specifier|public
name|void
name|setValue
parameter_list|(
name|Object
name|context
parameter_list|,
name|Map
name|contextVariables
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BindingException
argument_list|(
literal|"No context"
argument_list|)
throw|;
block|}
try|try
block|{
name|Ognl
operator|.
name|setValue
argument_list|(
name|compiled
argument_list|,
name|contextVariables
argument_list|,
name|context
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OgnlException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|BindingException
argument_list|(
literal|"Evaluation failed in context: "
operator|+
name|context
argument_list|,
name|unwind
argument_list|(
name|ex
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|getValue
parameter_list|(
name|Object
name|context
parameter_list|,
name|Map
name|contextVariables
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BindingException
argument_list|(
literal|"No context"
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|Ognl
operator|.
name|getValue
argument_list|(
name|compiled
argument_list|,
name|contextVariables
argument_list|,
name|context
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OgnlException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|BindingException
argument_list|(
literal|"Evaluation failed in context: "
operator|+
name|context
argument_list|,
name|unwind
argument_list|(
name|ex
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

