begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|objentity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TreeSelectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TreeSelectionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Relationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|RelationshipEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|ResolveDbRelationshipDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|EntityTreeModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|MultiColumnBrowser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|NamedObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scopemvc
operator|.
name|controller
operator|.
name|basic
operator|.
name|BasicController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scopemvc
operator|.
name|core
operator|.
name|Control
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scopemvc
operator|.
name|core
operator|.
name|ControlException
import|;
end_import

begin_comment
comment|/**  * @since 1.1  */
end_comment

begin_class
specifier|public
class|class
name|ObjRelationshipInfoController
extends|extends
name|BasicController
implements|implements
name|TreeSelectionListener
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SAVE_CONTROL
init|=
literal|"cayenne.modeler.mapObjRelationship.save.button"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CANCEL_CONTROL
init|=
literal|"cayenne.modeler.mapObjRelationship.cancel.button"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NEW_REL_CONTROL
init|=
literal|"cayenne.modeler.mapObjRelationship.newrel.button"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SELECT_PATH_CONTROL
init|=
literal|"cayenne.modeler.mapObjRelationship.select.path.button"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REVERT_PATH_CONTROL
init|=
literal|"cayenne.modeler.mapObjRelationship.revert.path.button"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CLEAR_PATH_CONTROL
init|=
literal|"cayenne.modeler.mapObjRelationship.clear.path.button"
decl_stmt|;
specifier|protected
name|ProjectController
name|mediator
decl_stmt|;
specifier|public
name|ObjRelationshipInfoController
parameter_list|(
name|ProjectController
name|mediator
parameter_list|,
name|ObjRelationship
name|relationship
parameter_list|)
block|{
name|this
operator|.
name|mediator
operator|=
name|mediator
expr_stmt|;
name|ObjRelationshipInfoModel
name|model
init|=
operator|new
name|ObjRelationshipInfoModel
argument_list|(
name|relationship
argument_list|)
decl_stmt|;
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates and runs the classpath dialog.      */
annotation|@
name|Override
specifier|public
name|void
name|startup
parameter_list|()
block|{
comment|/**          * Some workaround: need to save target first, because even if it is null, first          * item will be displayed in combobox. Also we do not want to have empty item in          * the combobox.          */
name|ObjRelationshipInfoModel
name|model
init|=
operator|(
name|ObjRelationshipInfoModel
operator|)
name|getModel
argument_list|()
decl_stmt|;
name|ObjEntity
name|target
init|=
name|model
operator|.
name|getObjectTarget
argument_list|()
decl_stmt|;
name|ObjRelationshipInfoDialog
name|view
init|=
operator|new
name|ObjRelationshipInfoDialog
argument_list|()
decl_stmt|;
name|setView
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|model
operator|.
name|setObjectTarget
argument_list|(
name|target
argument_list|)
expr_stmt|;
comment|/**          * Register auto-selection of the target          */
name|view
operator|.
name|getPathBrowser
argument_list|()
operator|.
name|addTreeSelectionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|view
operator|.
name|initFromModel
argument_list|()
expr_stmt|;
name|super
operator|.
name|startup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doHandleControl
parameter_list|(
name|Control
name|control
parameter_list|)
throws|throws
name|ControlException
block|{
if|if
condition|(
name|control
operator|.
name|matchesID
argument_list|(
name|CANCEL_CONTROL
argument_list|)
condition|)
block|{
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|control
operator|.
name|matchesID
argument_list|(
name|SAVE_CONTROL
argument_list|)
condition|)
block|{
name|saveMapping
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|control
operator|.
name|matchesID
argument_list|(
name|NEW_REL_CONTROL
argument_list|)
condition|)
block|{
name|createRelationship
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|control
operator|.
name|matchesID
argument_list|(
name|SELECT_PATH_CONTROL
argument_list|)
condition|)
block|{
name|selectPath
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|control
operator|.
name|matchesID
argument_list|(
name|REVERT_PATH_CONTROL
argument_list|)
condition|)
block|{
name|revertPath
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|control
operator|.
name|matchesID
argument_list|(
name|CLEAR_PATH_CONTROL
argument_list|)
condition|)
block|{
name|clearPath
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Saves selected path      */
specifier|protected
name|void
name|selectPath
parameter_list|()
block|{
name|ObjRelationshipInfoModel
name|model
init|=
operator|(
name|ObjRelationshipInfoModel
operator|)
name|getModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|selectPath
argument_list|()
expr_stmt|;
block|}
comment|/**      * Reverts current path to saved path      */
specifier|protected
name|void
name|revertPath
parameter_list|()
block|{
name|ObjRelationshipInfoModel
name|model
init|=
operator|(
name|ObjRelationshipInfoModel
operator|)
name|getModel
argument_list|()
decl_stmt|;
operator|(
operator|(
name|ObjRelationshipInfoDialog
operator|)
name|getView
argument_list|()
operator|)
operator|.
name|setSelectionPath
argument_list|(
name|model
operator|.
name|getSavedDbRelationships
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setDbRelationships
argument_list|(
name|model
operator|.
name|getSavedDbRelationships
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Clears paths and selections in browser      */
specifier|protected
name|void
name|clearPath
parameter_list|()
block|{
name|ObjRelationshipInfoModel
name|model
init|=
operator|(
name|ObjRelationshipInfoModel
operator|)
name|getModel
argument_list|()
decl_stmt|;
operator|(
operator|(
name|ObjRelationshipInfoDialog
operator|)
name|getView
argument_list|()
operator|)
operator|.
name|getPathBrowser
argument_list|()
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|model
operator|.
name|setDbRelationships
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|DbRelationship
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|saveMapping
parameter_list|()
block|{
name|ObjRelationshipInfoModel
name|model
init|=
operator|(
name|ObjRelationshipInfoModel
operator|)
name|getModel
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|model
operator|.
name|getDbRelationships
argument_list|()
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getSavedDbRelationships
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
operator|(
name|Component
operator|)
name|getView
argument_list|()
argument_list|,
literal|"You have changed Db Relationship path. Do you want it to be saved?"
argument_list|,
literal|"Save ObjRelationship"
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
name|selectPath
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|model
operator|.
name|savePath
argument_list|()
condition|)
block|{
name|mediator
operator|.
name|fireObjRelationshipEvent
argument_list|(
operator|new
name|RelationshipEvent
argument_list|(
name|Application
operator|.
name|getFrame
argument_list|()
argument_list|,
name|model
operator|.
name|getRelationship
argument_list|()
argument_list|,
name|model
operator|.
name|getRelationship
argument_list|()
operator|.
name|getSourceEntity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates a new relationship connecting currently selected source entity with      * ObjRelationship target entity. User is allowed to edit the relationship, change its      * name, and create joins.      */
specifier|protected
name|void
name|createRelationship
parameter_list|()
block|{
name|ObjRelationshipInfoModel
name|model
init|=
operator|(
name|ObjRelationshipInfoModel
operator|)
name|getModel
argument_list|()
decl_stmt|;
name|DbRelationship
name|dbRel
init|=
name|model
operator|.
name|getLastRelationship
argument_list|()
decl_stmt|;
name|DbEntity
name|source
init|=
name|dbRel
operator|!=
literal|null
condition|?
operator|(
name|DbEntity
operator|)
name|dbRel
operator|.
name|getTargetEntity
argument_list|()
else|:
literal|null
decl_stmt|;
name|DbRelationshipTargetController
name|targetController
init|=
operator|new
name|DbRelationshipTargetController
argument_list|(
name|model
operator|.
name|getStartEntity
argument_list|()
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|targetController
operator|.
name|startup
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|targetController
operator|.
name|isSavePressed
argument_list|()
condition|)
block|{
return|return;
block|}
name|DbRelationshipTargetModel
name|targetModel
init|=
operator|(
name|DbRelationshipTargetModel
operator|)
name|targetController
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|DbRelationship
name|dbRelationship
init|=
operator|(
name|DbRelationship
operator|)
name|NamedObjectFactory
operator|.
name|createRelationship
argument_list|(
name|targetModel
operator|.
name|getSource
argument_list|()
argument_list|,
name|targetModel
operator|.
name|getTarget
argument_list|()
argument_list|,
name|targetModel
operator|.
name|isToMany
argument_list|()
argument_list|)
decl_stmt|;
comment|// note: NamedObjectFactory doesn't set source or target, just the name
name|dbRelationship
operator|.
name|setSourceEntity
argument_list|(
name|targetModel
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|dbRelationship
operator|.
name|setTargetEntity
argument_list|(
name|targetModel
operator|.
name|getTarget
argument_list|()
argument_list|)
expr_stmt|;
name|dbRelationship
operator|.
name|setToMany
argument_list|(
name|targetModel
operator|.
name|isToMany
argument_list|()
argument_list|)
expr_stmt|;
name|targetModel
operator|.
name|getSource
argument_list|()
operator|.
name|addRelationship
argument_list|(
name|dbRelationship
argument_list|)
expr_stmt|;
comment|// TODO: creating relationship outside of ResolveDbRelationshipDialog confuses it
comment|// to send incorrect event - CHANGE instead of ADD
name|ResolveDbRelationshipDialog
name|dialog
init|=
operator|new
name|ResolveDbRelationshipDialog
argument_list|(
name|dbRelationship
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|dialog
operator|.
name|isCancelPressed
argument_list|()
condition|)
block|{
name|targetModel
operator|.
name|getSource
argument_list|()
operator|.
name|removeRelationship
argument_list|(
name|dbRelationship
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MultiColumnBrowser
name|pathBrowser
init|=
operator|(
operator|(
name|ObjRelationshipInfoDialog
operator|)
name|getView
argument_list|()
operator|)
operator|.
name|getPathBrowser
argument_list|()
decl_stmt|;
name|Object
index|[]
name|oldPath
init|=
name|targetModel
operator|.
name|isSource1Selected
argument_list|()
condition|?
operator|new
name|Object
index|[]
block|{
name|model
operator|.
name|getStartEntity
argument_list|()
block|}
else|:
name|pathBrowser
operator|.
name|getSelectionPath
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|/**              * Update the view              */
name|EntityTreeModel
name|treeModel
init|=
operator|(
name|EntityTreeModel
operator|)
name|pathBrowser
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|treeModel
operator|.
name|invalidate
argument_list|()
expr_stmt|;
name|pathBrowser
operator|.
name|setSelectionPath
argument_list|(
operator|new
name|TreePath
argument_list|(
operator|new
name|Object
index|[]
block|{
name|model
operator|.
name|getStartEntity
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|pathBrowser
operator|.
name|repaint
argument_list|()
expr_stmt|;
name|Object
index|[]
name|path
init|=
operator|new
name|Object
index|[
name|oldPath
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|oldPath
argument_list|,
literal|0
argument_list|,
name|path
argument_list|,
literal|0
argument_list|,
name|path
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|dbRelationship
expr_stmt|;
name|pathBrowser
operator|.
name|setSelectionPath
argument_list|(
operator|new
name|TreePath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dialog
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|valueChanged
parameter_list|(
name|TreeSelectionEvent
name|e
parameter_list|)
block|{
name|TreePath
name|selectedPath
init|=
name|e
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// first item in the path is Entity, so we must have
comment|// at least two elements to constitute a valid ordering path
if|if
condition|(
name|selectedPath
operator|==
literal|null
operator|||
name|selectedPath
operator|.
name|getPathCount
argument_list|()
operator|<
literal|2
condition|)
block|{
return|return;
block|}
name|Relationship
name|rel
init|=
operator|(
name|Relationship
operator|)
name|selectedPath
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|DbEntity
name|target
init|=
operator|(
name|DbEntity
operator|)
name|rel
operator|.
name|getTargetEntity
argument_list|()
decl_stmt|;
name|ObjRelationshipInfoModel
name|model
init|=
operator|(
name|ObjRelationshipInfoModel
operator|)
name|getModel
argument_list|()
decl_stmt|;
comment|/**          * Initialize root with one of mapped ObjEntities.          */
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|objEntities
init|=
name|target
operator|.
name|getDataMap
argument_list|()
operator|.
name|getMappedEntities
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DbRelationship
argument_list|>
name|relPath
init|=
operator|new
name|Vector
argument_list|<
name|DbRelationship
argument_list|>
argument_list|(
name|selectedPath
operator|.
name|getPathCount
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|selectedPath
operator|.
name|getPathCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|relPath
operator|.
name|add
argument_list|(
operator|(
name|DbRelationship
operator|)
name|selectedPath
operator|.
name|getPathComponent
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|model
operator|.
name|setDbRelationships
argument_list|(
name|relPath
argument_list|)
expr_stmt|;
name|model
operator|.
name|setObjectTarget
argument_list|(
name|objEntities
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|objEntities
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ObjRelationshipInfoDialog
operator|)
name|getView
argument_list|()
operator|)
operator|.
name|updateCollectionChoosers
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

