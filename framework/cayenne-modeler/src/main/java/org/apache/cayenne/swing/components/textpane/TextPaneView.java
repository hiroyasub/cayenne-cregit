begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|components
operator|.
name|textpane
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|BadLocationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|PlainDocument
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|PlainView
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|StyledDocument
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|components
operator|.
name|textpane
operator|.
name|style
operator|.
name|TextPaneStyleMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|components
operator|.
name|textpane
operator|.
name|style
operator|.
name|TextPaneStyleTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|components
operator|.
name|textpane
operator|.
name|style
operator|.
name|SyntaxStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|components
operator|.
name|textpane
operator|.
name|syntax
operator|.
name|SQLSyntaxConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|components
operator|.
name|textpane
operator|.
name|syntax
operator|.
name|SyntaxConstant
import|;
end_import

begin_class
specifier|public
class|class
name|TextPaneView
extends|extends
name|PlainView
block|{
specifier|private
specifier|static
name|HashMap
argument_list|<
name|Pattern
argument_list|,
name|SyntaxStyle
argument_list|>
name|patternSyntaxStyle
decl_stmt|;
specifier|private
specifier|static
name|Pattern
name|patternComment
decl_stmt|;
specifier|private
specifier|static
name|Pattern
name|patternCommentStart
decl_stmt|;
specifier|private
specifier|static
name|SyntaxStyle
name|syntaxStyleComment
decl_stmt|;
specifier|private
specifier|static
name|HashMap
argument_list|<
name|Pattern
argument_list|,
name|SyntaxStyle
argument_list|>
name|patternValue
decl_stmt|;
static|static
block|{
name|patternSyntaxStyle
operator|=
operator|new
name|HashMap
argument_list|<
name|Pattern
argument_list|,
name|SyntaxStyle
argument_list|>
argument_list|()
expr_stmt|;
name|patternValue
operator|=
operator|new
name|HashMap
argument_list|<
name|Pattern
argument_list|,
name|SyntaxStyle
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TextPaneView
parameter_list|(
name|Element
name|elem
parameter_list|,
name|SyntaxConstant
name|syntaxConstants
parameter_list|)
block|{
name|super
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|getDocument
argument_list|()
operator|.
name|putProperty
argument_list|(
name|PlainDocument
operator|.
name|tabSizeAttribute
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|TextPaneStyleMap
name|style
init|=
operator|new
name|TextPaneStyleMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|patternSyntaxStyle
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|String
index|[]
name|keywords
init|=
name|syntaxConstants
operator|.
name|getKEYWORDS
argument_list|()
decl_stmt|;
name|String
index|[]
name|keywords2
init|=
name|syntaxConstants
operator|.
name|getKEYWORDS2
argument_list|()
decl_stmt|;
name|String
index|[]
name|operators
init|=
name|syntaxConstants
operator|.
name|getOPERATORS
argument_list|()
decl_stmt|;
name|String
index|[]
name|types
init|=
name|syntaxConstants
operator|.
name|getTYPES
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keywords
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|patern
init|=
literal|"("
operator|+
name|keywords
index|[
name|i
index|]
operator|+
literal|")"
decl_stmt|;
name|patternSyntaxStyle
operator|.
name|put
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|patern
argument_list|,
name|Pattern
operator|.
name|UNICODE_CASE
operator||
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
argument_list|,
name|style
operator|.
name|syntaxStyleMap
operator|.
name|get
argument_list|(
name|TextPaneStyleTypes
operator|.
name|KEYWORDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keywords2
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|patern
init|=
literal|"("
operator|+
name|keywords2
index|[
name|i
index|]
operator|+
literal|")"
decl_stmt|;
name|patternSyntaxStyle
operator|.
name|put
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|patern
argument_list|,
name|Pattern
operator|.
name|UNICODE_CASE
operator||
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
argument_list|,
name|style
operator|.
name|syntaxStyleMap
operator|.
name|get
argument_list|(
name|TextPaneStyleTypes
operator|.
name|KEYWORDS2
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|operators
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|patern
init|=
literal|"("
operator|+
name|operators
index|[
name|i
index|]
operator|+
literal|")"
decl_stmt|;
name|patternSyntaxStyle
operator|.
name|put
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|patern
argument_list|,
name|Pattern
operator|.
name|UNICODE_CASE
operator||
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
argument_list|,
name|style
operator|.
name|syntaxStyleMap
operator|.
name|get
argument_list|(
name|TextPaneStyleTypes
operator|.
name|KEYWORDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|patern
init|=
literal|"("
operator|+
name|types
index|[
name|i
index|]
operator|+
literal|")"
decl_stmt|;
name|patternSyntaxStyle
operator|.
name|put
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|patern
argument_list|,
name|Pattern
operator|.
name|UNICODE_CASE
operator||
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
argument_list|,
name|style
operator|.
name|syntaxStyleMap
operator|.
name|get
argument_list|(
name|TextPaneStyleTypes
operator|.
name|TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|patternValue
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|patternValue
operator|.
name|put
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|SQLSyntaxConstants
operator|.
name|NUMBER_TEXT
argument_list|)
argument_list|,
name|style
operator|.
name|syntaxStyleMap
operator|.
name|get
argument_list|(
name|TextPaneStyleTypes
operator|.
name|NUMBER
argument_list|)
argument_list|)
expr_stmt|;
comment|// patternValue.put(Pattern.compile(SQLSyntaxConstants.STRING_TEXT,
comment|// Pattern.UNICODE_CASE | Pattern.CASE_INSENSITIVE),
comment|// style.sqlSyntaxStyleMap.get(SQLStyleTypes.STRING));
block|}
name|patternComment
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|SQLSyntaxConstants
operator|.
name|COMMENT_TEXT
argument_list|,
name|Pattern
operator|.
name|UNICODE_CASE
operator||
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
expr_stmt|;
name|patternCommentStart
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|SQLSyntaxConstants
operator|.
name|COMMENT_TEXT_START
argument_list|,
name|Pattern
operator|.
name|UNICODE_CASE
operator||
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
expr_stmt|;
name|syntaxStyleComment
operator|=
name|style
operator|.
name|syntaxStyleMap
operator|.
name|get
argument_list|(
name|TextPaneStyleTypes
operator|.
name|COMMENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|drawUnselectedText
parameter_list|(
name|Graphics
name|graphics
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|p0
parameter_list|,
name|int
name|p1
parameter_list|)
throws|throws
name|BadLocationException
block|{
name|boolean
name|lineComment
init|=
literal|false
decl_stmt|;
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|comment
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|commentInLine
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|StyledDocument
name|doc
init|=
operator|(
name|StyledDocument
operator|)
name|getDocument
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|doc
operator|.
name|getText
argument_list|(
name|p0
argument_list|,
name|p1
operator|-
name|p0
argument_list|)
decl_stmt|;
name|Segment
name|segment
init|=
name|getLineBuffer
argument_list|()
decl_stmt|;
name|Matcher
name|m
init|=
name|patternComment
operator|.
name|matcher
argument_list|(
name|doc
operator|.
name|getText
argument_list|(
literal|0
argument_list|,
name|doc
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|maxEnd
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|comment
operator|.
name|put
argument_list|(
name|m
operator|.
name|start
argument_list|()
argument_list|,
name|m
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxEnd
operator|<
name|m
operator|.
name|end
argument_list|()
condition|)
block|{
name|maxEnd
operator|=
name|m
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
name|Matcher
name|m3
init|=
name|patternCommentStart
operator|.
name|matcher
argument_list|(
name|doc
operator|.
name|getText
argument_list|(
literal|0
argument_list|,
name|doc
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|m3
operator|.
name|find
argument_list|()
condition|)
block|{
if|if
condition|(
name|maxEnd
operator|<
name|m3
operator|.
name|start
argument_list|()
condition|)
block|{
name|comment
operator|.
name|put
argument_list|(
name|m3
operator|.
name|start
argument_list|()
argument_list|,
name|doc
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|comment
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|p0
operator|>=
name|entry
operator|.
name|getKey
argument_list|()
operator|&&
name|p1
operator|<=
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|lineComment
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|p0
operator|<=
name|entry
operator|.
name|getKey
argument_list|()
operator|&&
name|p1
operator|>=
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|commentInLine
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|-
name|p0
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|-
name|p0
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|p0
operator|<=
name|entry
operator|.
name|getKey
argument_list|()
operator|&&
name|p1
operator|>=
name|entry
operator|.
name|getKey
argument_list|()
operator|&&
name|p1
operator|<
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|commentInLine
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|-
name|p0
argument_list|,
name|p1
operator|-
name|p0
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|p0
operator|<=
name|entry
operator|.
name|getValue
argument_list|()
operator|&&
name|p1
operator|>=
name|entry
operator|.
name|getValue
argument_list|()
operator|&&
name|p0
operator|>
name|entry
operator|.
name|getKey
argument_list|()
condition|)
block|{
name|commentInLine
operator|.
name|put
argument_list|(
literal|0
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|-
name|p0
argument_list|)
expr_stmt|;
block|}
name|j
operator|++
expr_stmt|;
block|}
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|startMap
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|SyntaxStyle
argument_list|>
name|syntaxStyleMap
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|SyntaxStyle
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|lineComment
condition|)
block|{
name|startMap
operator|.
name|put
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|syntaxStyleMap
operator|.
name|put
argument_list|(
literal|0
argument_list|,
name|syntaxStyleComment
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|entryCommentInLine
range|:
name|commentInLine
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|startMap
operator|.
name|put
argument_list|(
name|entryCommentInLine
operator|.
name|getKey
argument_list|()
argument_list|,
name|entryCommentInLine
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|syntaxStyleMap
operator|.
name|put
argument_list|(
name|entryCommentInLine
operator|.
name|getKey
argument_list|()
argument_list|,
name|syntaxStyleComment
argument_list|)
expr_stmt|;
block|}
comment|// Match all regexes on this snippet, store positions
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Pattern
argument_list|,
name|SyntaxStyle
argument_list|>
name|entry
range|:
name|patternSyntaxStyle
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Matcher
name|matcher
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|text
operator|.
name|length
argument_list|()
operator|==
name|matcher
operator|.
name|end
argument_list|()
operator|||
name|text
operator|.
name|charAt
argument_list|(
name|matcher
operator|.
name|end
argument_list|()
argument_list|)
operator|==
literal|' '
operator|||
name|text
operator|.
name|charAt
argument_list|(
name|matcher
operator|.
name|end
argument_list|()
argument_list|)
operator|==
literal|'\n'
operator|)
operator|&&
operator|(
name|matcher
operator|.
name|start
argument_list|()
operator|==
literal|0
operator|||
name|text
operator|.
name|charAt
argument_list|(
name|matcher
operator|.
name|start
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|' '
operator|)
condition|)
block|{
name|boolean
name|inComment
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|entryCommentInLine
range|:
name|commentInLine
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|matcher
operator|.
name|start
argument_list|(
literal|1
argument_list|)
operator|>=
name|entryCommentInLine
operator|.
name|getKey
argument_list|()
operator|&&
name|matcher
operator|.
name|end
argument_list|()
operator|<=
name|entryCommentInLine
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|inComment
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|inComment
condition|)
block|{
name|startMap
operator|.
name|put
argument_list|(
name|matcher
operator|.
name|start
argument_list|()
argument_list|,
name|matcher
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|syntaxStyleMap
operator|.
name|put
argument_list|(
name|matcher
operator|.
name|start
argument_list|(
literal|1
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Pattern
argument_list|,
name|SyntaxStyle
argument_list|>
name|entry
range|:
name|patternValue
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Matcher
name|matcher
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|text
operator|.
name|length
argument_list|()
operator|==
name|matcher
operator|.
name|end
argument_list|()
operator|||
name|text
operator|.
name|charAt
argument_list|(
name|matcher
operator|.
name|end
argument_list|()
argument_list|)
operator|==
literal|' '
operator|||
name|text
operator|.
name|charAt
argument_list|(
name|matcher
operator|.
name|end
argument_list|()
argument_list|)
operator|==
literal|')'
operator|||
name|text
operator|.
name|charAt
argument_list|(
name|matcher
operator|.
name|end
argument_list|()
argument_list|)
operator|==
literal|'\n'
operator|)
operator|&&
operator|(
name|matcher
operator|.
name|start
argument_list|()
operator|==
literal|0
operator|||
name|text
operator|.
name|charAt
argument_list|(
name|matcher
operator|.
name|start
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|' '
operator|||
name|text
operator|.
name|charAt
argument_list|(
name|matcher
operator|.
name|start
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'='
operator|||
name|text
operator|.
name|charAt
argument_list|(
name|matcher
operator|.
name|start
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'('
operator|)
condition|)
block|{
name|boolean
name|inComment
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|entryCommentInLine
range|:
name|commentInLine
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|matcher
operator|.
name|start
argument_list|()
operator|>=
name|entryCommentInLine
operator|.
name|getKey
argument_list|()
operator|&&
name|matcher
operator|.
name|end
argument_list|()
operator|<=
name|entryCommentInLine
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|inComment
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|inComment
condition|)
block|{
name|startMap
operator|.
name|put
argument_list|(
name|matcher
operator|.
name|start
argument_list|()
argument_list|,
name|matcher
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|syntaxStyleMap
operator|.
name|put
argument_list|(
name|matcher
operator|.
name|start
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// TODO: check the map for overlapping parts
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|// Colour the parts
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|startMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|start
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|start
condition|)
block|{
name|graphics
operator|.
name|setColor
argument_list|(
name|SQLSyntaxConstants
operator|.
name|DEFAULT_COLOR
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setFont
argument_list|(
name|SQLSyntaxConstants
operator|.
name|DEFAULT_FONT
argument_list|)
expr_stmt|;
name|doc
operator|.
name|getText
argument_list|(
name|p0
operator|+
name|i
argument_list|,
name|start
operator|-
name|i
argument_list|,
name|segment
argument_list|)
expr_stmt|;
name|x
operator|=
name|Utilities
operator|.
name|drawTabbedText
argument_list|(
name|segment
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|graphics
argument_list|,
name|this
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|graphics
operator|.
name|setFont
argument_list|(
name|syntaxStyleMap
operator|.
name|get
argument_list|(
name|start
argument_list|)
operator|.
name|getFont
argument_list|()
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setColor
argument_list|(
name|syntaxStyleMap
operator|.
name|get
argument_list|(
name|start
argument_list|)
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|=
name|end
expr_stmt|;
name|doc
operator|.
name|getText
argument_list|(
name|p0
operator|+
name|start
argument_list|,
name|i
operator|-
name|start
argument_list|,
name|segment
argument_list|)
expr_stmt|;
name|x
operator|=
name|Utilities
operator|.
name|drawTabbedText
argument_list|(
name|segment
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|graphics
argument_list|,
name|this
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
comment|// Paint possible remaining text black
if|if
condition|(
name|i
operator|<
name|text
operator|.
name|length
argument_list|()
condition|)
block|{
name|graphics
operator|.
name|setColor
argument_list|(
name|SQLSyntaxConstants
operator|.
name|DEFAULT_COLOR
argument_list|)
expr_stmt|;
name|graphics
operator|.
name|setFont
argument_list|(
name|SQLSyntaxConstants
operator|.
name|DEFAULT_FONT
argument_list|)
expr_stmt|;
name|doc
operator|.
name|getText
argument_list|(
name|p0
operator|+
name|i
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|i
argument_list|,
name|segment
argument_list|)
expr_stmt|;
name|x
operator|=
name|Utilities
operator|.
name|drawTabbedText
argument_list|(
name|segment
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|graphics
argument_list|,
name|this
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|x
return|;
block|}
block|}
end_class

end_unit

