begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultComboBoxModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DataMapEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DataNodeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|datamap
operator|.
name|LockingUpdateController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|datamap
operator|.
name|PackageUpdateController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|datamap
operator|.
name|SchemaUpdateController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|datamap
operator|.
name|SuperclassUpdateController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataMapDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataMapDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|DataMapDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneWidgetFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CellRenderers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|Comparators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|ProjectUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|TextAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|ApplicationProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|DefaultFormBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|FormLayout
import|;
end_import

begin_comment
comment|/**  * Panel for editing a DataMap.  */
end_comment

begin_class
specifier|public
class|class
name|DataMapView
extends|extends
name|JPanel
block|{
specifier|protected
name|ProjectController
name|eventController
decl_stmt|;
specifier|protected
name|TextAdapter
name|name
decl_stmt|;
specifier|protected
name|JLabel
name|location
decl_stmt|;
specifier|protected
name|JComboBox
name|nodeSelector
decl_stmt|;
specifier|protected
name|TextAdapter
name|defaultSchema
decl_stmt|;
specifier|protected
name|TextAdapter
name|defaultPackage
decl_stmt|;
specifier|protected
name|TextAdapter
name|defaultSuperclass
decl_stmt|;
specifier|protected
name|JCheckBox
name|defaultLockType
decl_stmt|;
specifier|protected
name|JButton
name|updateDefaultSchema
decl_stmt|;
specifier|protected
name|JButton
name|updateDefaultPackage
decl_stmt|;
specifier|protected
name|JButton
name|updateDefaultSuperclass
decl_stmt|;
specifier|protected
name|JButton
name|updateDefaultLockType
decl_stmt|;
comment|// client stuff
specifier|protected
name|JCheckBox
name|clientSupport
decl_stmt|;
specifier|protected
name|JLabel
name|defaultClientPackageLabel
decl_stmt|;
specifier|protected
name|TextAdapter
name|defaultClientPackage
decl_stmt|;
specifier|protected
name|TextAdapter
name|defaultClientSuperclass
decl_stmt|;
specifier|protected
name|JButton
name|updateDefaultClientPackage
decl_stmt|;
specifier|protected
name|JButton
name|updateDefaultClientSuperclass
decl_stmt|;
specifier|public
name|DataMapView
parameter_list|(
name|ProjectController
name|eventController
parameter_list|)
block|{
name|this
operator|.
name|eventController
operator|=
name|eventController
expr_stmt|;
name|initView
argument_list|()
expr_stmt|;
name|initController
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initView
parameter_list|()
block|{
comment|// create widgets
name|name
operator|=
operator|new
name|TextAdapter
argument_list|(
operator|new
name|JTextField
argument_list|()
argument_list|)
block|{
specifier|protected
name|void
name|updateModel
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|setDataMapName
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|location
operator|=
operator|new
name|JLabel
argument_list|()
expr_stmt|;
name|nodeSelector
operator|=
name|CayenneWidgetFactory
operator|.
name|createComboBox
argument_list|()
expr_stmt|;
name|nodeSelector
operator|.
name|setRenderer
argument_list|(
name|CellRenderers
operator|.
name|listRendererWithIcons
argument_list|()
argument_list|)
expr_stmt|;
name|updateDefaultSchema
operator|=
operator|new
name|JButton
argument_list|(
literal|"Update..."
argument_list|)
expr_stmt|;
name|defaultSchema
operator|=
operator|new
name|TextAdapter
argument_list|(
operator|new
name|JTextField
argument_list|()
argument_list|)
block|{
specifier|protected
name|void
name|updateModel
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|setDefaultSchema
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|updateDefaultPackage
operator|=
operator|new
name|JButton
argument_list|(
literal|"Update..."
argument_list|)
expr_stmt|;
name|defaultPackage
operator|=
operator|new
name|TextAdapter
argument_list|(
operator|new
name|JTextField
argument_list|()
argument_list|)
block|{
specifier|protected
name|void
name|updateModel
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|setDefaultPackage
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|updateDefaultSuperclass
operator|=
operator|new
name|JButton
argument_list|(
literal|"Update..."
argument_list|)
expr_stmt|;
name|defaultSuperclass
operator|=
operator|new
name|TextAdapter
argument_list|(
operator|new
name|JTextField
argument_list|()
argument_list|)
block|{
specifier|protected
name|void
name|updateModel
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|setDefaultSuperclass
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|updateDefaultLockType
operator|=
operator|new
name|JButton
argument_list|(
literal|"Update..."
argument_list|)
expr_stmt|;
name|defaultLockType
operator|=
operator|new
name|JCheckBox
argument_list|()
expr_stmt|;
name|clientSupport
operator|=
operator|new
name|JCheckBox
argument_list|()
expr_stmt|;
name|updateDefaultClientPackage
operator|=
operator|new
name|JButton
argument_list|(
literal|"Update..."
argument_list|)
expr_stmt|;
name|defaultClientPackage
operator|=
operator|new
name|TextAdapter
argument_list|(
operator|new
name|JTextField
argument_list|()
argument_list|)
block|{
specifier|protected
name|void
name|updateModel
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|setDefaultClientPackage
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|updateDefaultClientSuperclass
operator|=
operator|new
name|JButton
argument_list|(
literal|"Update..."
argument_list|)
expr_stmt|;
name|defaultClientSuperclass
operator|=
operator|new
name|TextAdapter
argument_list|(
operator|new
name|JTextField
argument_list|()
argument_list|)
block|{
specifier|protected
name|void
name|updateModel
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|setDefaultClientSuperclass
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
comment|// assemble
name|FormLayout
name|layout
init|=
operator|new
name|FormLayout
argument_list|(
literal|"right:70dlu, 3dlu, fill:110dlu, 3dlu, fill:100"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|DefaultFormBuilder
name|builder
init|=
operator|new
name|DefaultFormBuilder
argument_list|(
name|layout
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setDefaultDialogBorder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|appendSeparator
argument_list|(
literal|"DataMap Configuration"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"DataMap Name:"
argument_list|,
name|name
operator|.
name|getComponent
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"File:"
argument_list|,
name|location
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"DataNode:"
argument_list|,
name|nodeSelector
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builder
operator|.
name|appendSeparator
argument_list|(
literal|"Entity Defaults"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"DB Schema:"
argument_list|,
name|defaultSchema
operator|.
name|getComponent
argument_list|()
argument_list|,
name|updateDefaultSchema
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Java Package:"
argument_list|,
name|defaultPackage
operator|.
name|getComponent
argument_list|()
argument_list|,
name|updateDefaultPackage
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Custom Superclass:"
argument_list|,
name|defaultSuperclass
operator|.
name|getComponent
argument_list|()
argument_list|,
name|updateDefaultSuperclass
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Optimistic Locking:"
argument_list|,
name|defaultLockType
argument_list|,
name|updateDefaultLockType
argument_list|)
expr_stmt|;
name|builder
operator|.
name|appendSeparator
argument_list|(
literal|"Client Class Defaults"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Allow Client Entities:"
argument_list|,
name|clientSupport
argument_list|,
operator|new
name|JPanel
argument_list|()
argument_list|)
expr_stmt|;
name|defaultClientPackageLabel
operator|=
name|builder
operator|.
name|append
argument_list|(
literal|"Client Java Package:"
argument_list|,
name|defaultClientPackage
operator|.
name|getComponent
argument_list|()
argument_list|,
name|updateDefaultClientPackage
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Custom Superclass:"
argument_list|,
name|defaultClientSuperclass
operator|.
name|getComponent
argument_list|()
argument_list|,
name|updateDefaultClientSuperclass
argument_list|)
expr_stmt|;
name|this
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|builder
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initController
parameter_list|()
block|{
name|eventController
operator|.
name|addDataMapDisplayListener
argument_list|(
operator|new
name|DataMapDisplayListener
argument_list|()
block|{
specifier|public
name|void
name|currentDataMapChanged
parameter_list|(
name|DataMapDisplayEvent
name|e
parameter_list|)
block|{
name|DataMap
name|map
init|=
name|e
operator|.
name|getDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|initFromModel
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|nodeSelector
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|setDataNode
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|defaultLockType
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|setDefaultLockType
argument_list|(
name|defaultLockType
operator|.
name|isSelected
argument_list|()
condition|?
name|ObjEntity
operator|.
name|LOCK_TYPE_OPTIMISTIC
else|:
name|ObjEntity
operator|.
name|LOCK_TYPE_NONE
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|clientSupport
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|setClientSupport
argument_list|(
name|clientSupport
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|updateDefaultClientPackage
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|updateDefaultClientPackage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|updateDefaultClientSuperclass
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|updateDefaultClientSuperclass
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|updateDefaultSchema
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|updateDefaultSchema
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|updateDefaultPackage
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|updateDefaultPackage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|updateDefaultSuperclass
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|updateDefaultSuperclass
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|updateDefaultLockType
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|updateDefaultLockType
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Updates the view from the current model state. Invoked when a currently displayed      * ObjEntity is changed.      */
specifier|private
name|void
name|initFromModel
parameter_list|(
name|DataMap
name|map
parameter_list|)
block|{
name|name
operator|.
name|setText
argument_list|(
name|map
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|locationText
init|=
name|map
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|location
operator|.
name|setText
argument_list|(
operator|(
name|locationText
operator|!=
literal|null
operator|)
condition|?
name|locationText
else|:
literal|"(no file)"
argument_list|)
expr_stmt|;
comment|// rebuild data node list
name|Object
name|nodes
index|[]
init|=
name|eventController
operator|.
name|getCurrentDataDomain
argument_list|()
operator|.
name|getDataNodes
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
comment|// add an empty item to the front
name|Object
index|[]
name|objects
init|=
operator|new
name|Object
index|[
name|nodes
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
comment|// objects[0] = null;
comment|// now add the entities
if|if
condition|(
name|nodes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|nodes
argument_list|,
name|Comparators
operator|.
name|getNamedObjectComparator
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nodes
argument_list|,
literal|0
argument_list|,
name|objects
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|DefaultComboBoxModel
name|model
init|=
operator|new
name|DefaultComboBoxModel
argument_list|(
name|objects
argument_list|)
decl_stmt|;
comment|// find selected node
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DataNode
name|node
init|=
operator|(
name|DataNode
operator|)
name|nodes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getDataMaps
argument_list|()
operator|.
name|contains
argument_list|(
name|map
argument_list|)
condition|)
block|{
name|model
operator|.
name|setSelectedItem
argument_list|(
name|node
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|nodeSelector
operator|.
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
comment|// init default fields
name|defaultLockType
operator|.
name|setSelected
argument_list|(
name|map
operator|.
name|getDefaultLockType
argument_list|()
operator|!=
name|ObjEntity
operator|.
name|LOCK_TYPE_NONE
argument_list|)
expr_stmt|;
name|defaultPackage
operator|.
name|setText
argument_list|(
name|map
operator|.
name|getDefaultPackage
argument_list|()
argument_list|)
expr_stmt|;
name|defaultSchema
operator|.
name|setText
argument_list|(
name|map
operator|.
name|getDefaultSchema
argument_list|()
argument_list|)
expr_stmt|;
name|defaultSuperclass
operator|.
name|setText
argument_list|(
name|map
operator|.
name|getDefaultSuperclass
argument_list|()
argument_list|)
expr_stmt|;
comment|// client defaults
name|clientSupport
operator|.
name|setSelected
argument_list|(
name|map
operator|.
name|isClientSupported
argument_list|()
argument_list|)
expr_stmt|;
name|defaultClientPackage
operator|.
name|setText
argument_list|(
name|map
operator|.
name|getDefaultClientPackage
argument_list|()
argument_list|)
expr_stmt|;
name|defaultClientSuperclass
operator|.
name|setText
argument_list|(
name|map
operator|.
name|getDefaultClientSuperclass
argument_list|()
argument_list|)
expr_stmt|;
name|toggleClientProperties
argument_list|(
name|map
operator|.
name|isClientSupported
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|toggleClientProperties
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|defaultClientPackage
operator|.
name|getComponent
argument_list|()
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
name|updateDefaultClientPackage
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
name|defaultClientPackageLabel
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
name|defaultClientSuperclass
operator|.
name|getComponent
argument_list|()
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
name|updateDefaultClientSuperclass
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
name|void
name|setDefaultLockType
parameter_list|(
name|int
name|lockType
parameter_list|)
block|{
name|DataMap
name|dataMap
init|=
name|eventController
operator|.
name|getCurrentDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|int
name|oldType
init|=
name|dataMap
operator|.
name|getDefaultLockType
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldType
operator|==
name|lockType
condition|)
block|{
return|return;
block|}
name|dataMap
operator|.
name|setDefaultLockType
argument_list|(
name|lockType
argument_list|)
expr_stmt|;
name|eventController
operator|.
name|fireDataMapEvent
argument_list|(
operator|new
name|DataMapEvent
argument_list|(
name|this
argument_list|,
name|dataMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|setClientSupport
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|DataMap
name|dataMap
init|=
name|eventController
operator|.
name|getCurrentDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|dataMap
operator|.
name|isClientSupported
argument_list|()
operator|!=
name|flag
condition|)
block|{
name|dataMap
operator|.
name|setClientSupported
argument_list|(
name|flag
argument_list|)
expr_stmt|;
name|toggleClientProperties
argument_list|(
name|flag
argument_list|)
expr_stmt|;
name|eventController
operator|.
name|fireDataMapEvent
argument_list|(
operator|new
name|DataMapEvent
argument_list|(
name|this
argument_list|,
name|dataMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|setDefaultPackage
parameter_list|(
name|String
name|newDefaultPackage
parameter_list|)
block|{
name|DataMap
name|dataMap
init|=
name|eventController
operator|.
name|getCurrentDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|newDefaultPackage
operator|!=
literal|null
operator|&&
name|newDefaultPackage
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|newDefaultPackage
operator|=
literal|null
expr_stmt|;
block|}
name|String
name|oldPackage
init|=
name|dataMap
operator|.
name|getDefaultPackage
argument_list|()
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|newDefaultPackage
argument_list|,
name|oldPackage
argument_list|)
condition|)
block|{
return|return;
block|}
name|dataMap
operator|.
name|setDefaultPackage
argument_list|(
name|newDefaultPackage
argument_list|)
expr_stmt|;
comment|// update class generation preferences
name|eventController
operator|.
name|getDataMapPreferences
argument_list|(
literal|""
argument_list|)
operator|.
name|setSuperclassPackage
argument_list|(
name|newDefaultPackage
argument_list|,
name|DataMapDefaults
operator|.
name|DEFAULT_SUPERCLASS_PACKAGE_SUFFIX
argument_list|)
expr_stmt|;
name|eventController
operator|.
name|fireDataMapEvent
argument_list|(
operator|new
name|DataMapEvent
argument_list|(
name|this
argument_list|,
name|dataMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|setDefaultClientPackage
parameter_list|(
name|String
name|newDefaultPackage
parameter_list|)
block|{
name|DataMap
name|dataMap
init|=
name|eventController
operator|.
name|getCurrentDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|newDefaultPackage
operator|!=
literal|null
operator|&&
name|newDefaultPackage
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|newDefaultPackage
operator|=
literal|null
expr_stmt|;
block|}
name|String
name|oldPackage
init|=
name|dataMap
operator|.
name|getDefaultClientPackage
argument_list|()
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|newDefaultPackage
argument_list|,
name|oldPackage
argument_list|)
condition|)
block|{
return|return;
block|}
name|dataMap
operator|.
name|setDefaultClientPackage
argument_list|(
name|newDefaultPackage
argument_list|)
expr_stmt|;
comment|// TODO: (andrus, 09/10/2005) - add the same logic for the client package
comment|// update class generation preferences
comment|// eventController.getDataMapPreferences().setSuperclassPackage(
comment|// newDefaultPackage,
comment|// DataMapDefaults.DEFAULT_SUPERCLASS_PACKAGE);
name|eventController
operator|.
name|fireDataMapEvent
argument_list|(
operator|new
name|DataMapEvent
argument_list|(
name|this
argument_list|,
name|dataMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|setDefaultClientSuperclass
parameter_list|(
name|String
name|newSuperclass
parameter_list|)
block|{
name|DataMap
name|dataMap
init|=
name|eventController
operator|.
name|getCurrentDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|newSuperclass
operator|!=
literal|null
operator|&&
name|newSuperclass
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|newSuperclass
operator|=
literal|null
expr_stmt|;
block|}
name|String
name|oldSuperclass
init|=
name|dataMap
operator|.
name|getDefaultClientSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|newSuperclass
argument_list|,
name|oldSuperclass
argument_list|)
condition|)
block|{
return|return;
block|}
name|dataMap
operator|.
name|setDefaultClientSuperclass
argument_list|(
name|newSuperclass
argument_list|)
expr_stmt|;
name|eventController
operator|.
name|fireDataMapEvent
argument_list|(
operator|new
name|DataMapEvent
argument_list|(
name|this
argument_list|,
name|dataMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|setDefaultSchema
parameter_list|(
name|String
name|newSchema
parameter_list|)
block|{
name|DataMap
name|dataMap
init|=
name|eventController
operator|.
name|getCurrentDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|newSchema
operator|!=
literal|null
operator|&&
name|newSchema
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|newSchema
operator|=
literal|null
expr_stmt|;
block|}
name|String
name|oldSchema
init|=
name|dataMap
operator|.
name|getDefaultSchema
argument_list|()
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|newSchema
argument_list|,
name|oldSchema
argument_list|)
condition|)
block|{
return|return;
block|}
name|dataMap
operator|.
name|setDefaultSchema
argument_list|(
name|newSchema
argument_list|)
expr_stmt|;
name|eventController
operator|.
name|fireDataMapEvent
argument_list|(
operator|new
name|DataMapEvent
argument_list|(
name|this
argument_list|,
name|dataMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|setDefaultSuperclass
parameter_list|(
name|String
name|newSuperclass
parameter_list|)
block|{
name|DataMap
name|dataMap
init|=
name|eventController
operator|.
name|getCurrentDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|newSuperclass
operator|!=
literal|null
operator|&&
name|newSuperclass
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|newSuperclass
operator|=
literal|null
expr_stmt|;
block|}
name|String
name|oldSuperclass
init|=
name|dataMap
operator|.
name|getDefaultSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|newSuperclass
argument_list|,
name|oldSuperclass
argument_list|)
condition|)
block|{
return|return;
block|}
name|dataMap
operator|.
name|setDefaultSuperclass
argument_list|(
name|newSuperclass
argument_list|)
expr_stmt|;
name|eventController
operator|.
name|fireDataMapEvent
argument_list|(
operator|new
name|DataMapEvent
argument_list|(
name|this
argument_list|,
name|dataMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|setDataMapName
parameter_list|(
name|String
name|newName
parameter_list|)
block|{
if|if
condition|(
name|newName
operator|==
literal|null
operator|||
name|newName
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Enter name for DataMap"
argument_list|)
throw|;
block|}
name|DataMap
name|map
init|=
name|eventController
operator|.
name|getCurrentDataMap
argument_list|()
decl_stmt|;
comment|// search for matching map name across domains, as currently they have to be
comment|// unique globally
name|Configuration
name|config
init|=
operator|(
operator|(
name|ApplicationProject
operator|)
name|Application
operator|.
name|getProject
argument_list|()
operator|)
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|DataMap
name|matchingMap
init|=
literal|null
decl_stmt|;
name|Iterator
name|it
init|=
name|config
operator|.
name|getDomains
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DataDomain
name|domain
init|=
operator|(
name|DataDomain
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|DataMap
name|nextMap
init|=
name|domain
operator|.
name|getMap
argument_list|(
name|newName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextMap
operator|==
name|map
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|nextMap
operator|!=
literal|null
condition|)
block|{
name|matchingMap
operator|=
name|nextMap
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|matchingMap
operator|!=
literal|null
condition|)
block|{
comment|// there is an entity with the same name
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"There is another DataMap named '"
operator|+
name|newName
operator|+
literal|"'. Use a different name."
argument_list|)
throw|;
block|}
comment|// completely new name, set new name for domain
name|DataMapDefaults
name|pref
init|=
name|eventController
operator|.
name|getDataMapPreferences
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|DataMapEvent
name|e
init|=
operator|new
name|DataMapEvent
argument_list|(
name|this
argument_list|,
name|map
argument_list|,
name|map
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|ProjectUtil
operator|.
name|setDataMapName
argument_list|(
name|eventController
operator|.
name|getCurrentDataDomain
argument_list|()
argument_list|,
name|map
argument_list|,
name|newName
argument_list|)
expr_stmt|;
name|pref
operator|.
name|rename
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|eventController
operator|.
name|fireDataMapEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|void
name|setDataNode
parameter_list|()
block|{
name|DataNode
name|node
init|=
operator|(
name|DataNode
operator|)
name|nodeSelector
operator|.
name|getSelectedItem
argument_list|()
decl_stmt|;
name|DataMap
name|map
init|=
name|eventController
operator|.
name|getCurrentDataMap
argument_list|()
decl_stmt|;
comment|// no change?
if|if
condition|(
name|node
operator|!=
literal|null
operator|&&
name|node
operator|.
name|getDataMaps
argument_list|()
operator|.
name|contains
argument_list|(
name|map
argument_list|)
condition|)
block|{
return|return;
block|}
name|boolean
name|hasChanges
init|=
literal|false
decl_stmt|;
comment|// unlink map from any nodes
name|Iterator
name|nodes
init|=
name|eventController
operator|.
name|getCurrentDataDomain
argument_list|()
operator|.
name|getDataNodes
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nodes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DataNode
name|nextNode
init|=
operator|(
name|DataNode
operator|)
name|nodes
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Theoretically only one node may contain a datamap at each given time.
comment|// Being paranoid, we will still scan through all.
if|if
condition|(
name|nextNode
operator|!=
name|node
operator|&&
name|nextNode
operator|.
name|getDataMaps
argument_list|()
operator|.
name|contains
argument_list|(
name|map
argument_list|)
condition|)
block|{
name|nextNode
operator|.
name|removeDataMap
argument_list|(
name|map
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// announce DataNode change
name|eventController
operator|.
name|fireDataNodeEvent
argument_list|(
operator|new
name|DataNodeEvent
argument_list|(
name|this
argument_list|,
name|nextNode
argument_list|)
argument_list|)
expr_stmt|;
name|hasChanges
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// link to a selected node
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|addDataMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|hasChanges
operator|=
literal|true
expr_stmt|;
comment|// announce DataNode change
name|eventController
operator|.
name|fireDataNodeEvent
argument_list|(
operator|new
name|DataNodeEvent
argument_list|(
name|this
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasChanges
condition|)
block|{
comment|// TODO: maybe reindexing is an overkill in the modeler?
name|eventController
operator|.
name|getCurrentDataDomain
argument_list|()
operator|.
name|reindexNodes
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|updateDefaultSchema
parameter_list|()
block|{
name|DataMap
name|dataMap
init|=
name|eventController
operator|.
name|getCurrentDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|dataMap
operator|.
name|getDbEntities
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|dataMap
operator|.
name|getProcedures
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
operator|new
name|SchemaUpdateController
argument_list|(
name|eventController
argument_list|,
name|dataMap
argument_list|)
operator|.
name|startup
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|updateDefaultSuperclass
parameter_list|()
block|{
name|DataMap
name|dataMap
init|=
name|eventController
operator|.
name|getCurrentDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|dataMap
operator|.
name|getObjEntities
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
operator|new
name|SuperclassUpdateController
argument_list|(
name|eventController
argument_list|,
name|dataMap
argument_list|,
literal|false
argument_list|)
operator|.
name|startup
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|updateDefaultPackage
parameter_list|()
block|{
name|DataMap
name|dataMap
init|=
name|eventController
operator|.
name|getCurrentDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|dataMap
operator|.
name|getObjEntities
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
operator|new
name|PackageUpdateController
argument_list|(
name|eventController
argument_list|,
name|dataMap
argument_list|,
literal|false
argument_list|)
operator|.
name|startup
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|updateDefaultClientPackage
parameter_list|()
block|{
name|DataMap
name|dataMap
init|=
name|eventController
operator|.
name|getCurrentDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|dataMap
operator|.
name|getObjEntities
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
operator|new
name|PackageUpdateController
argument_list|(
name|eventController
argument_list|,
name|dataMap
argument_list|,
literal|true
argument_list|)
operator|.
name|startup
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|updateDefaultClientSuperclass
parameter_list|()
block|{
name|DataMap
name|dataMap
init|=
name|eventController
operator|.
name|getCurrentDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|dataMap
operator|.
name|getObjEntities
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
operator|new
name|SuperclassUpdateController
argument_list|(
name|eventController
argument_list|,
name|dataMap
argument_list|,
literal|true
argument_list|)
operator|.
name|startup
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|updateDefaultLockType
parameter_list|()
block|{
name|DataMap
name|dataMap
init|=
name|eventController
operator|.
name|getCurrentDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|dataMap
operator|.
name|getObjEntities
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
operator|new
name|LockingUpdateController
argument_list|(
name|eventController
argument_list|,
name|dataMap
argument_list|)
operator|.
name|startup
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

