begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A default implementation of ClassLoadingService used in CayenneModeler.  *   * @since 1.1  */
end_comment

begin_class
specifier|public
class|class
name|FileClassLoadingService
implements|implements
name|ClassLoadingService
block|{
specifier|private
name|FileClassLoader
name|classLoader
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|File
argument_list|>
name|pathFiles
decl_stmt|;
specifier|public
name|FileClassLoadingService
parameter_list|()
block|{
name|this
operator|.
name|pathFiles
operator|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|(
literal|15
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns class for a given name, loading it if needed from configured locations.      */
specifier|public
specifier|synchronized
name|Class
name|loadClass
parameter_list|(
name|String
name|className
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
return|return
name|nonNullClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
return|;
block|}
comment|/**      * Returns a ClassLoader based on the current configured CLASSPATH settings.      */
specifier|public
name|ClassLoader
name|getClassLoader
parameter_list|()
block|{
return|return
name|nonNullClassLoader
argument_list|()
return|;
block|}
comment|/**      * Returns an unmodifiable list of configured CLASSPATH locations.      */
specifier|public
specifier|synchronized
name|List
argument_list|<
name|File
argument_list|>
name|getPathFiles
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|pathFiles
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|setPathFiles
parameter_list|(
name|Collection
argument_list|<
name|File
argument_list|>
name|files
parameter_list|)
block|{
name|pathFiles
operator|.
name|clear
argument_list|()
expr_stmt|;
name|classLoader
operator|=
literal|null
expr_stmt|;
name|Iterator
name|it
init|=
name|files
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|addFile
argument_list|(
operator|(
name|File
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Adds a new location to the list of configured locations.      */
specifier|private
name|void
name|addFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|file
operator|=
name|file
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|pathFiles
operator|.
name|contains
argument_list|(
name|file
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|classLoader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|classLoader
operator|.
name|addURL
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ex
parameter_list|)
block|{
return|return;
block|}
block|}
name|pathFiles
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|FileClassLoader
name|nonNullClassLoader
parameter_list|()
block|{
comment|// init class loader on demand
if|if
condition|(
name|classLoader
operator|==
literal|null
condition|)
block|{
name|classLoader
operator|=
operator|new
name|FileClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|pathFiles
argument_list|)
expr_stmt|;
block|}
return|return
name|classLoader
return|;
block|}
comment|// URLClassLoader with addURL method exposed.
specifier|static
class|class
name|FileClassLoader
extends|extends
name|URLClassLoader
block|{
name|FileClassLoader
parameter_list|(
name|ClassLoader
name|parent
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|URL
index|[
literal|0
index|]
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
name|FileClassLoader
parameter_list|(
name|ClassLoader
name|parent
parameter_list|,
name|List
name|files
parameter_list|)
block|{
name|this
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|files
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|File
name|file
init|=
operator|(
name|File
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// I guess here we have to quetly ignore invalid URLs...
try|try
block|{
name|addURL
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ex
parameter_list|)
block|{
block|}
block|}
block|}
specifier|public
name|void
name|addURL
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|super
operator|.
name|addURL
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

