begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ImageIcon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|ExtendedTypeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ModelerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|CayenneMapEntry
import|;
end_import

begin_comment
comment|/**  * Various unorganized utility methods used by CayenneModeler.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ModelerUtil
block|{
comment|/**      * Returns the "name" property of the object.      *       * @since 1.1      */
specifier|public
specifier|static
name|String
name|getObjectName
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|CayenneMapEntry
condition|)
block|{
return|return
operator|(
operator|(
name|CayenneMapEntry
operator|)
name|object
operator|)
operator|.
name|getName
argument_list|()
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|String
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|object
return|;
block|}
else|else
block|{
try|try
block|{
comment|// use reflection
return|return
operator|(
name|String
operator|)
name|PropertyUtils
operator|.
name|getProperty
argument_list|(
name|object
argument_list|,
literal|"name"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
comment|/**      * Returns an icon, building it from an image file located at the shared resources      * folder for the modeler.      */
specifier|public
specifier|static
name|ImageIcon
name|buildIcon
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|ClassLoader
name|cl
init|=
name|ModelerUtil
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|cl
operator|.
name|getResource
argument_list|(
name|ModelerConstants
operator|.
name|RESOURCE_PATH
operator|+
name|path
argument_list|)
decl_stmt|;
return|return
operator|new
name|ImageIcon
argument_list|(
name|url
argument_list|)
return|;
block|}
comment|/**      * Returns array of db attribute names for DbEntity mapped to current ObjEntity.      */
specifier|public
specifier|static
name|Collection
name|getDbAttributeNames
parameter_list|(
name|ProjectController
name|mediator
parameter_list|,
name|DbEntity
name|entity
parameter_list|)
block|{
name|Set
name|keys
init|=
name|entity
operator|.
name|getAttributeMap
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|keys
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|getRegisteredTypeNames
parameter_list|()
block|{
name|String
index|[]
name|explicitList
init|=
operator|new
name|ExtendedTypeMap
argument_list|()
operator|.
name|getRegisteredTypeNames
argument_list|()
decl_stmt|;
name|Set
name|allNamesSet
init|=
operator|new
name|HashSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|explicitList
argument_list|)
argument_list|)
decl_stmt|;
comment|// add types that are not mapped explicitly, but nevertheless supported by Cayenne
name|allNamesSet
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|allNamesSet
operator|.
name|add
argument_list|(
name|BigInteger
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|allNamesSet
operator|.
name|add
argument_list|(
name|Serializable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|allNamesSet
operator|.
name|add
argument_list|(
name|Character
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|allNamesSet
operator|.
name|add
argument_list|(
literal|"char[]"
argument_list|)
expr_stmt|;
name|allNamesSet
operator|.
name|add
argument_list|(
literal|"java.lang.Character[]"
argument_list|)
expr_stmt|;
name|allNamesSet
operator|.
name|add
argument_list|(
literal|"java.lang.Byte[]"
argument_list|)
expr_stmt|;
name|allNamesSet
operator|.
name|add
argument_list|(
literal|"java.util.Date"
argument_list|)
expr_stmt|;
name|allNamesSet
operator|.
name|remove
argument_list|(
name|Void
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|allNames
init|=
operator|new
name|String
index|[
name|allNamesSet
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|allNamesSet
operator|.
name|toArray
argument_list|(
name|allNames
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|allNames
argument_list|)
expr_stmt|;
name|String
index|[]
name|finalList
init|=
operator|new
name|String
index|[
name|allNames
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|allNames
argument_list|,
literal|0
argument_list|,
name|finalList
argument_list|,
literal|1
argument_list|,
name|allNames
operator|.
name|length
argument_list|)
expr_stmt|;
name|finalList
index|[
literal|0
index|]
operator|=
literal|""
expr_stmt|;
return|return
name|finalList
return|;
block|}
specifier|public
specifier|static
name|DataNode
name|getNodeLinkedToMap
parameter_list|(
name|DataDomain
name|domain
parameter_list|,
name|DataMap
name|map
parameter_list|)
block|{
name|Collection
name|nodes
init|=
name|domain
operator|.
name|getDataNodes
argument_list|()
decl_stmt|;
comment|// go via an iterator in an indexed loop, since
comment|// we already obtained the size
comment|// (and index is required to initialize array)
name|Iterator
name|nodesIt
init|=
name|nodes
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nodesIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DataNode
name|node
init|=
operator|(
name|DataNode
operator|)
name|nodesIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getDataMaps
argument_list|()
operator|.
name|contains
argument_list|(
name|map
argument_list|)
condition|)
block|{
return|return
name|node
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

