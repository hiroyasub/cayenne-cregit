begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|pref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneDataObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Cayenne
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * A superclass of concrete preference classes.  *<p>  * Complete preference descriptor is composed out of two classes - DomainPreference that  * defines how the preference is located with in domain, and a GenericPreference.  * GenericPreference API is designed for the application use, while internal  * DomainPreference is managed behind the scenes. Note that there is no real Cayenne  * relationship from concrete preference entity to the preference framework entities, so  * this class handles all needed wiring...  *   */
end_comment

begin_class
specifier|public
class|class
name|PreferenceDetail
extends|extends
name|CayenneDataObject
block|{
specifier|protected
name|DomainPreference
name|domainPreference
decl_stmt|;
comment|/**      * Changes the key of this preference. If there is a sibling prefrence with same key,      * such sibling is renamed using generated unique name. This operation essentially      * substitutes one prefrence entry with another.      */
specifier|public
name|void
name|rename
parameter_list|(
name|String
name|newKey
parameter_list|)
block|{
if|if
condition|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|getKey
argument_list|()
argument_list|,
name|newKey
argument_list|)
condition|)
block|{
return|return;
block|}
name|DomainPreference
name|domainPrefrence
init|=
name|getDomainPreference
argument_list|()
decl_stmt|;
name|Domain
name|parent
init|=
name|domainPrefrence
operator|.
name|getDomain
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|domainPrefrence
operator|.
name|setKey
argument_list|(
name|newKey
argument_list|)
expr_stmt|;
return|return;
block|}
name|DomainPreference
name|other
init|=
name|parent
operator|.
name|getDomainPreference
argument_list|(
name|newKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|!=
literal|null
operator|&&
name|other
operator|!=
name|domainPrefrence
condition|)
block|{
name|String
name|otherName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|parent
operator|.
name|getDomainPreference
argument_list|(
name|newKey
operator|+
name|i
argument_list|)
operator|==
literal|null
condition|)
block|{
name|otherName
operator|=
name|newKey
operator|+
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|otherName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|PreferenceException
argument_list|(
literal|"Can't rename an existing preference '"
operator|+
name|newKey
operator|+
literal|"'."
argument_list|)
throw|;
block|}
name|other
operator|.
name|setKey
argument_list|(
name|otherName
argument_list|)
expr_stmt|;
block|}
name|domainPrefrence
operator|.
name|setKey
argument_list|(
name|newKey
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getIntProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|PreferenceException
argument_list|(
literal|"Error converting to int: "
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getKey
parameter_list|()
block|{
if|if
condition|(
name|getDomainPreference
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|PreferenceException
argument_list|(
literal|"Preference not initialized, can't work with properties."
argument_list|)
throw|;
block|}
return|return
name|domainPreference
operator|.
name|getKey
argument_list|()
return|;
block|}
specifier|public
name|void
name|setIntProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|setProperty
argument_list|(
name|key
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a named property for a given key.      */
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|getBooleanProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|setBooleanProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|setProperty
argument_list|(
name|key
argument_list|,
literal|""
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DomainPreference
name|getDomainPreference
parameter_list|()
block|{
if|if
condition|(
name|domainPreference
operator|==
literal|null
condition|)
block|{
comment|// try to fetch..
name|ObjectContext
name|context
init|=
name|getObjectContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
operator|&&
name|getObjectId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|pk
init|=
name|Cayenne
operator|.
name|intPKForObject
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|domainPreference
operator|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|DomainPreference
operator|.
name|class
argument_list|,
name|pk
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|domainPreference
return|;
block|}
comment|/**      * Initializes internal DomainPreference object.      */
specifier|public
name|void
name|setDomainPreference
parameter_list|(
name|DomainPreference
name|domainPreference
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|domainPreference
operator|!=
name|domainPreference
condition|)
block|{
name|this
operator|.
name|domainPreference
operator|=
name|domainPreference
expr_stmt|;
name|ObjectId
name|oid
init|=
name|getObjectId
argument_list|()
decl_stmt|;
if|if
condition|(
name|oid
operator|!=
literal|null
operator|&&
name|oid
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|oid
operator|.
name|getReplacementIdMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|buildPermanentId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns initialized non-null properties map.      */
specifier|protected
name|Properties
name|getProperties
parameter_list|()
block|{
if|if
condition|(
name|getDomainPreference
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|PreferenceException
argument_list|(
literal|"Preference not initialized, can't work with properties."
argument_list|)
throw|;
block|}
return|return
name|domainPreference
operator|.
name|getProperties
argument_list|()
return|;
block|}
comment|/**      * Creates permanent ID based on DomainPreference id.      */
specifier|protected
name|int
name|buildPermanentId
parameter_list|()
block|{
name|ObjectId
name|otherId
init|=
name|getDomainPreference
argument_list|()
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|PreferenceException
argument_list|(
literal|"Can't persist preference. DomainPreference has no ObjectId"
argument_list|)
throw|;
block|}
comment|// force creation of otherId
if|if
condition|(
name|otherId
operator|.
name|isTemporary
argument_list|()
operator|&&
operator|!
name|otherId
operator|.
name|isReplacementIdAttached
argument_list|()
condition|)
block|{
name|DbEntity
name|entity
init|=
name|getObjectContext
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|lookupObjEntity
argument_list|(
name|domainPreference
argument_list|)
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
name|DataNode
name|node
init|=
operator|(
operator|(
name|DataContext
operator|)
name|getObjectContext
argument_list|()
operator|)
operator|.
name|getParentDataDomain
argument_list|()
operator|.
name|lookupDataNode
argument_list|(
name|entity
operator|.
name|getDataMap
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Object
name|pk
init|=
name|node
operator|.
name|getAdapter
argument_list|()
operator|.
name|getPkGenerator
argument_list|()
operator|.
name|generatePk
argument_list|(
name|node
argument_list|,
name|entity
operator|.
name|getPrimaryKeys
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|otherId
operator|.
name|getReplacementIdMap
argument_list|()
operator|.
name|put
argument_list|(
name|DomainPreference
operator|.
name|ID_PK_COLUMN
argument_list|,
name|pk
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|PreferenceException
argument_list|(
literal|"Error creating primary key"
argument_list|,
name|Util
operator|.
name|unwindException
argument_list|(
name|th
argument_list|)
argument_list|)
throw|;
block|}
block|}
return|return
name|Cayenne
operator|.
name|intPKForObject
argument_list|(
name|domainPreference
argument_list|)
return|;
block|}
block|}
end_class

end_unit

