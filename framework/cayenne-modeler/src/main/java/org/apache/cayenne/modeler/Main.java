begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|UIManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|CayenneUserDir
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|pref
operator|.
name|PreferenceDetail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|pref
operator|.
name|GeneralPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|OpenProjectAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|plastic
operator|.
name|PlasticLookAndFeel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|looks
operator|.
name|plastic
operator|.
name|PlasticTheme
import|;
end_import

begin_comment
comment|/**  * Main class responsible for starting CayenneModeler.  *   * @author Andrus Adamchik  * @since 1.1  */
end_comment

begin_class
specifier|public
class|class
name|Main
block|{
specifier|private
specifier|static
name|Log
name|logObj
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Main
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Main method that starts the CayenneModeler.      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Main
name|main
init|=
operator|new
name|Main
argument_list|()
decl_stmt|;
comment|// if configured, redirect all logging to the log file
name|main
operator|.
name|configureLogging
argument_list|()
expr_stmt|;
comment|// check jdk version
if|if
condition|(
operator|!
name|main
operator|.
name|checkJDKVersion
argument_list|()
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|File
name|projectFile
init|=
name|projectFileFromArgs
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|main
operator|.
name|runModeler
argument_list|(
name|projectFile
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|File
name|projectFileFromArgs
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|f
operator|=
operator|new
name|File
argument_list|(
name|f
argument_list|,
name|Configuration
operator|.
name|DEFAULT_DOMAIN_FILE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
operator|&&
name|Configuration
operator|.
name|DEFAULT_DOMAIN_FILE
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|f
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
specifier|static
name|File
name|projectFileFromPrefs
parameter_list|()
block|{
comment|// This must be run after the application has already been bootstrapped.  Otherwise, the returned
comment|// app instance will be null.
name|PreferenceDetail
name|autoLoadPref
init|=
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getPreferenceDomain
argument_list|()
operator|.
name|getDetail
argument_list|(
name|GeneralPreferences
operator|.
name|AUTO_LOAD_PROJECT_PREFERENCE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|autoLoadPref
operator|!=
literal|null
operator|)
operator|&&
operator|(
literal|true
operator|==
name|autoLoadPref
operator|.
name|getBooleanProperty
argument_list|(
name|GeneralPreferences
operator|.
name|AUTO_LOAD_PROJECT_PREFERENCE
argument_list|)
operator|)
condition|)
block|{
name|ModelerPreferences
name|modelerPreferences
init|=
name|ModelerPreferences
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
name|Vector
name|arr
init|=
name|modelerPreferences
operator|.
name|getVector
argument_list|(
name|ModelerPreferences
operator|.
name|LAST_PROJ_FILES
argument_list|)
decl_stmt|;
return|return
operator|new
name|File
argument_list|(
operator|(
name|String
operator|)
name|arr
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|runModeler
parameter_list|(
specifier|final
name|File
name|projectFile
parameter_list|)
block|{
name|logObj
operator|.
name|info
argument_list|(
literal|"Starting CayenneModeler."
argument_list|)
expr_stmt|;
comment|// set up UI
name|configureLookAndFeel
argument_list|()
expr_stmt|;
name|Application
operator|.
name|instance
operator|=
operator|new
name|Application
argument_list|(
name|projectFile
argument_list|)
expr_stmt|;
comment|// start frame and load project from EventDispatchThread...
name|Runnable
name|runnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Application
operator|.
name|instance
operator|.
name|startup
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|projectFile
condition|)
block|{
name|File
name|projectFileFromPrefs
init|=
name|projectFileFromPrefs
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|projectFileFromPrefs
condition|)
block|{
name|OpenProjectAction
name|action
init|=
operator|new
name|OpenProjectAction
argument_list|(
name|Application
operator|.
name|instance
argument_list|)
decl_stmt|;
name|action
operator|.
name|openProject
argument_list|(
name|projectFileFromPrefs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|checkJDKVersion
parameter_list|()
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"java.lang.StringBuilder"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logObj
operator|.
name|fatal
argument_list|(
literal|"CayenneModeler requires JDK 1.5."
argument_list|)
expr_stmt|;
name|logObj
operator|.
name|fatal
argument_list|(
literal|"Found : '"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
operator|+
literal|"' at "
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|)
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
literal|null
argument_list|,
literal|"Unsupported JDK at "
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
operator|+
literal|". Set JAVA_HOME to the JDK1.5 location."
argument_list|,
literal|"Unsupported JDK Version"
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Configures Log4J appenders to perform logging to $HOME/.cayenne/modeler.log.      */
specifier|protected
name|void
name|configureLogging
parameter_list|()
block|{
comment|// get preferences
name|ModelerPreferences
name|prefs
init|=
name|ModelerPreferences
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
comment|// check whether to set up logging to a file
name|boolean
name|logfileEnabled
init|=
name|prefs
operator|.
name|getBoolean
argument_list|(
name|ModelerPreferences
operator|.
name|EDITOR_LOGFILE_ENABLED
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|prefs
operator|.
name|setProperty
argument_list|(
name|ModelerPreferences
operator|.
name|EDITOR_LOGFILE_ENABLED
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|logfileEnabled
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|logfileEnabled
condition|)
block|{
name|String
name|defaultPath
init|=
name|getLogFile
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|logfilePath
init|=
name|prefs
operator|.
name|getString
argument_list|(
name|ModelerPreferences
operator|.
name|EDITOR_LOGFILE
argument_list|,
name|defaultPath
argument_list|)
decl_stmt|;
try|try
block|{
comment|// use logfile from preferences or default
name|File
name|logfile
init|=
operator|new
name|File
argument_list|(
name|logfilePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|logfile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|logfile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// create dir path first
name|File
name|parent
init|=
name|logfile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|logfile
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
comment|// remember working path
name|prefs
operator|.
name|setProperty
argument_list|(
name|ModelerPreferences
operator|.
name|EDITOR_LOGFILE
argument_list|,
name|logfilePath
argument_list|)
expr_stmt|;
comment|// TODO: andrus, 8/16/2006 - redirect STDOUT and STDERR to file??
comment|// TODO: andrus, 8/16/2006 - use Java logging API with comons-logging
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
name|logObj
operator|.
name|warn
argument_list|(
literal|"Error setting logging - "
operator|+
name|logfilePath
argument_list|,
name|ioex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|String
name|getLookAndFeelName
parameter_list|()
block|{
name|ModelerPreferences
name|prefs
init|=
name|ModelerPreferences
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
return|return
name|prefs
operator|.
name|getString
argument_list|(
name|ModelerPreferences
operator|.
name|EDITOR_LAFNAME
argument_list|,
name|ModelerConstants
operator|.
name|DEFAULT_LAF_NAME
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getThemeName
parameter_list|()
block|{
name|ModelerPreferences
name|prefs
init|=
name|ModelerPreferences
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
return|return
name|prefs
operator|.
name|getString
argument_list|(
name|ModelerPreferences
operator|.
name|EDITOR_THEMENAME
argument_list|,
name|ModelerConstants
operator|.
name|DEFAULT_THEME_NAME
argument_list|)
return|;
block|}
comment|/**      * Set up the UI Look& Feel according to $HOME/.cayenne/modeler.preferences      */
specifier|protected
name|void
name|configureLookAndFeel
parameter_list|()
block|{
comment|// get preferences
name|ModelerPreferences
name|prefs
init|=
name|ModelerPreferences
operator|.
name|getPreferences
argument_list|()
decl_stmt|;
name|String
name|lfName
init|=
name|getLookAndFeelName
argument_list|()
decl_stmt|;
name|String
name|themeName
init|=
name|getThemeName
argument_list|()
decl_stmt|;
try|try
block|{
comment|// only install theme if L&F is Plastic;
comment|// bomb out if the L&F class cannot be found at all.
name|Class
name|lf
init|=
name|Class
operator|.
name|forName
argument_list|(
name|lfName
argument_list|)
decl_stmt|;
if|if
condition|(
name|PlasticLookAndFeel
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|lf
argument_list|)
condition|)
block|{
name|PlasticTheme
name|foundTheme
init|=
name|themeWithName
argument_list|(
name|themeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|foundTheme
operator|==
literal|null
condition|)
block|{
name|logObj
operator|.
name|warn
argument_list|(
literal|"Could not set selected theme '"
operator|+
name|themeName
operator|+
literal|"' - using default '"
operator|+
name|ModelerConstants
operator|.
name|DEFAULT_THEME_NAME
operator|+
literal|"'."
argument_list|)
expr_stmt|;
name|themeName
operator|=
name|ModelerConstants
operator|.
name|DEFAULT_THEME_NAME
expr_stmt|;
name|foundTheme
operator|=
name|themeWithName
argument_list|(
name|themeName
argument_list|)
expr_stmt|;
block|}
comment|// try to configure theme
name|PlasticLookAndFeel
operator|.
name|setMyCurrentTheme
argument_list|(
name|foundTheme
argument_list|)
expr_stmt|;
block|}
comment|// try to set set L&F
name|UIManager
operator|.
name|setLookAndFeel
argument_list|(
name|lfName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logObj
operator|.
name|warn
argument_list|(
literal|"Could not set selected LookAndFeel '"
operator|+
name|lfName
operator|+
literal|"' - using default '"
operator|+
name|ModelerConstants
operator|.
name|DEFAULT_LAF_NAME
operator|+
literal|"'."
argument_list|)
expr_stmt|;
comment|// re-try with defaults
name|lfName
operator|=
name|ModelerConstants
operator|.
name|DEFAULT_LAF_NAME
expr_stmt|;
name|themeName
operator|=
name|ModelerConstants
operator|.
name|DEFAULT_THEME_NAME
expr_stmt|;
name|PlasticTheme
name|defaultTheme
init|=
name|themeWithName
argument_list|(
name|themeName
argument_list|)
decl_stmt|;
name|PlasticLookAndFeel
operator|.
name|setMyCurrentTheme
argument_list|(
name|defaultTheme
argument_list|)
expr_stmt|;
try|try
block|{
name|UIManager
operator|.
name|setLookAndFeel
argument_list|(
name|lfName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|retry
parameter_list|)
block|{
comment|// give up, continue as-is
block|}
block|}
finally|finally
block|{
comment|// remember L&F settings
name|prefs
operator|.
name|setProperty
argument_list|(
name|ModelerPreferences
operator|.
name|EDITOR_LAFNAME
argument_list|,
name|UIManager
operator|.
name|getLookAndFeel
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|setProperty
argument_list|(
name|ModelerPreferences
operator|.
name|EDITOR_THEMENAME
argument_list|,
name|themeName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|PlasticTheme
name|themeWithName
parameter_list|(
name|String
name|themeName
parameter_list|)
block|{
name|List
name|availableThemes
init|=
name|PlasticLookAndFeel
operator|.
name|getInstalledThemes
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|availableThemes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PlasticTheme
name|aTheme
init|=
operator|(
name|PlasticTheme
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|themeName
operator|.
name|equals
argument_list|(
name|aTheme
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|aTheme
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns a file corresponding to $HOME/.cayenne/modeler.log      */
specifier|protected
name|File
name|getLogFile
parameter_list|()
block|{
if|if
condition|(
operator|!
name|CayenneUserDir
operator|.
name|getInstance
argument_list|()
operator|.
name|canWrite
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|CayenneUserDir
operator|.
name|getInstance
argument_list|()
operator|.
name|resolveFile
argument_list|(
literal|"modeler.log"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

