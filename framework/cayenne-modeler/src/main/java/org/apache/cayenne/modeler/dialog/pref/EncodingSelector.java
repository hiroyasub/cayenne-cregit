begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|pref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyChangeListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultComboBoxModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|BindingBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|ObjectBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * A controller for stream encoding picker component.  *   */
end_comment

begin_class
specifier|public
class|class
name|EncodingSelector
extends|extends
name|CayenneController
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ENCODING_PROPERTY_BINDING
init|=
literal|"encoding"
decl_stmt|;
specifier|protected
name|PropertyChangeListener
name|encodingChangeListener
decl_stmt|;
specifier|protected
name|ObjectBinding
name|defaultEncodingBinding
decl_stmt|;
specifier|protected
name|ObjectBinding
name|otherEncodingBinding
decl_stmt|;
specifier|protected
name|ObjectBinding
name|selectedEncodingBinding
decl_stmt|;
specifier|protected
name|EncodingSelectorView
name|view
decl_stmt|;
specifier|protected
name|String
name|systemEncoding
decl_stmt|;
specifier|protected
name|String
name|encoding
decl_stmt|;
specifier|protected
name|boolean
name|defaultEncoding
decl_stmt|;
comment|/**      * Creates new EncodingPicker.      */
specifier|public
name|EncodingSelector
parameter_list|(
name|CayenneController
name|parent
parameter_list|)
block|{
name|this
argument_list|(
name|parent
argument_list|,
operator|new
name|EncodingSelectorView
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EncodingSelector
parameter_list|(
name|CayenneController
name|parent
parameter_list|,
name|EncodingSelectorView
name|view
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|view
operator|=
name|view
expr_stmt|;
name|initBindings
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Component
name|getView
parameter_list|()
block|{
return|return
name|view
return|;
block|}
specifier|protected
name|void
name|initBindings
parameter_list|()
block|{
comment|// init static models...
name|this
operator|.
name|systemEncoding
operator|=
name|detectPlatformEncoding
argument_list|()
expr_stmt|;
name|Vector
name|allEncodings
init|=
name|supportedEncodings
argument_list|(
name|systemEncoding
argument_list|)
decl_stmt|;
name|view
operator|.
name|getEncodingChoices
argument_list|()
operator|.
name|setModel
argument_list|(
operator|new
name|DefaultComboBoxModel
argument_list|(
name|allEncodings
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|.
name|getDefaultEncodingLabel
argument_list|()
operator|.
name|setText
argument_list|(
literal|"Default ("
operator|+
name|systemEncoding
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|view
operator|.
name|getDefaultEncoding
argument_list|()
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// create bindings...
name|BindingBuilder
name|builder
init|=
operator|new
name|BindingBuilder
argument_list|(
name|getApplication
argument_list|()
operator|.
name|getBindingFactory
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|this
operator|.
name|defaultEncodingBinding
operator|=
name|builder
operator|.
name|bindToStateChange
argument_list|(
name|view
operator|.
name|getDefaultEncoding
argument_list|()
argument_list|,
literal|"defaultEncoding"
argument_list|)
expr_stmt|;
name|this
operator|.
name|otherEncodingBinding
operator|=
name|builder
operator|.
name|bindToStateChange
argument_list|(
name|view
operator|.
name|getOtherEncoding
argument_list|()
argument_list|,
literal|"otherEncoding"
argument_list|)
expr_stmt|;
name|this
operator|.
name|selectedEncodingBinding
operator|=
name|builder
operator|.
name|bindToComboSelection
argument_list|(
name|view
operator|.
name|getEncodingChoices
argument_list|()
argument_list|,
literal|"encoding"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns default encoding on the current platform.      */
specifier|protected
name|String
name|detectPlatformEncoding
parameter_list|()
block|{
comment|// this info is private until 1.5, so have to hack it...
return|return
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|ByteArrayOutputStream
argument_list|()
argument_list|)
operator|.
name|getEncoding
argument_list|()
return|;
block|}
comment|/**      * Returns an array of charsets that all JVMs must support cross-platform combined      * with a default platform charset. See Javadocs for java.nio.charset.Charset for the      * list of "standard" charsets.      */
specifier|protected
name|Vector
name|supportedEncodings
parameter_list|(
name|String
name|platformEncoding
parameter_list|)
block|{
name|String
index|[]
name|defaultCharsets
init|=
operator|new
name|String
index|[]
block|{
literal|"US-ASCII"
block|,
literal|"ISO-8859-1"
block|,
literal|"UTF-8"
block|,
literal|"UTF-16BE"
block|,
literal|"UTF-16LE"
block|,
literal|"UTF-16"
block|}
decl_stmt|;
name|Vector
name|charsets
init|=
operator|new
name|Vector
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|defaultCharsets
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|charsets
operator|.
name|contains
argument_list|(
name|platformEncoding
argument_list|)
condition|)
block|{
name|charsets
operator|.
name|add
argument_list|(
name|platformEncoding
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|charsets
argument_list|)
expr_stmt|;
return|return
name|charsets
return|;
block|}
specifier|public
name|void
name|bindingUpdated
parameter_list|(
name|String
name|expression
parameter_list|,
name|Object
name|newValue
parameter_list|)
block|{
if|if
condition|(
name|ENCODING_PROPERTY_BINDING
operator|.
name|equals
argument_list|(
name|expression
argument_list|)
condition|)
block|{
name|this
operator|.
name|encoding
operator|=
operator|(
name|newValue
operator|!=
literal|null
operator|)
condition|?
name|newValue
operator|.
name|toString
argument_list|()
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|defaultEncoding
operator|=
name|encoding
operator|==
literal|null
operator|||
name|encoding
operator|.
name|equals
argument_list|(
name|systemEncoding
argument_list|)
expr_stmt|;
name|selectedEncodingBinding
operator|.
name|updateView
argument_list|()
expr_stmt|;
if|if
condition|(
name|defaultEncoding
condition|)
block|{
name|defaultEncodingBinding
operator|.
name|updateView
argument_list|()
expr_stmt|;
name|view
operator|.
name|getEncodingChoices
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|view
operator|.
name|getDefaultEncodingLabel
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|otherEncodingBinding
operator|.
name|updateView
argument_list|()
expr_stmt|;
name|view
operator|.
name|getEncodingChoices
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|view
operator|.
name|getDefaultEncodingLabel
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// ===============
comment|//    Properties
comment|// ===============
specifier|public
name|void
name|setEncoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|this
operator|.
name|encoding
argument_list|,
name|encoding
argument_list|)
condition|)
block|{
name|Object
name|old
init|=
name|this
operator|.
name|encoding
decl_stmt|;
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
name|firePropertyChange
argument_list|(
literal|"encoding"
argument_list|,
name|old
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
name|encoding
return|;
block|}
specifier|public
name|boolean
name|isDefaultEncoding
parameter_list|()
block|{
return|return
name|defaultEncoding
return|;
block|}
specifier|public
name|void
name|setDefaultEncoding
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|!=
name|defaultEncoding
condition|)
block|{
name|this
operator|.
name|defaultEncoding
operator|=
name|b
expr_stmt|;
if|if
condition|(
name|b
condition|)
block|{
name|setEncoding
argument_list|(
name|systemEncoding
argument_list|)
expr_stmt|;
name|view
operator|.
name|getEncodingChoices
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|view
operator|.
name|getDefaultEncodingLabel
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|view
operator|.
name|getEncodingChoices
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|view
operator|.
name|getDefaultEncodingLabel
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|isOtherEncoding
parameter_list|()
block|{
return|return
operator|!
name|isDefaultEncoding
argument_list|()
return|;
block|}
specifier|public
name|void
name|setOtherEncoding
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|setDefaultEncoding
argument_list|(
operator|!
name|b
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

