begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|datamap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|ProcedureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EntityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scopemvc
operator|.
name|core
operator|.
name|Control
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scopemvc
operator|.
name|core
operator|.
name|ControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scopemvc
operator|.
name|view
operator|.
name|swing
operator|.
name|SPanel
import|;
end_import

begin_comment
comment|/**  * A controller for batch DbEntities schema update.  *   */
end_comment

begin_class
specifier|public
class|class
name|SchemaUpdateController
extends|extends
name|DefaultsPreferencesController
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ALL_CONTROL
init|=
literal|"cayenne.modeler.datamap.defaultprefs.schema.radio"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|UNINIT_CONTROL
init|=
literal|"cayenne.modeler.datamap.defaultprefs.schemanull.radio"
decl_stmt|;
specifier|public
name|SchemaUpdateController
parameter_list|(
name|ProjectController
name|mediator
parameter_list|,
name|DataMap
name|dataMap
parameter_list|)
block|{
name|super
argument_list|(
name|mediator
argument_list|,
name|dataMap
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates and runs the schema update dialog.      */
specifier|public
name|void
name|startup
parameter_list|()
block|{
name|SPanel
name|view
init|=
operator|new
name|DefaultsPreferencesDialog
argument_list|(
name|ALL_CONTROL
argument_list|,
name|UNINIT_CONTROL
argument_list|)
decl_stmt|;
name|view
operator|.
name|setTitle
argument_list|(
literal|"Update DbEntities Schema"
argument_list|)
expr_stmt|;
name|setView
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|super
operator|.
name|startup
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|doHandleControl
parameter_list|(
name|Control
name|control
parameter_list|)
throws|throws
name|ControlException
block|{
if|if
condition|(
name|control
operator|.
name|matchesID
argument_list|(
name|UPDATE_CONTROL
argument_list|)
condition|)
block|{
name|updateSchema
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|doHandleControl
argument_list|(
name|control
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|updateSchema
parameter_list|()
block|{
name|boolean
name|doAll
init|=
operator|(
operator|(
name|DefaultsPreferencesModel
operator|)
name|getModel
argument_list|()
operator|)
operator|.
name|isAllEntities
argument_list|()
decl_stmt|;
name|String
name|defaultSchema
init|=
name|dataMap
operator|.
name|getDefaultSchema
argument_list|()
decl_stmt|;
comment|// set schema for DbEntities
for|for
control|(
name|DbEntity
name|entity
range|:
name|dataMap
operator|.
name|getDbEntities
argument_list|()
control|)
block|{
if|if
condition|(
name|doAll
operator|||
name|Util
operator|.
name|isEmptyString
argument_list|(
name|entity
operator|.
name|getSchema
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|defaultSchema
argument_list|,
name|entity
operator|.
name|getSchema
argument_list|()
argument_list|)
condition|)
block|{
name|entity
operator|.
name|setSchema
argument_list|(
name|defaultSchema
argument_list|)
expr_stmt|;
comment|// any way to batch events, a big change will flood the app with
comment|// entity events..?
name|mediator
operator|.
name|fireDbEntityEvent
argument_list|(
operator|new
name|EntityEvent
argument_list|(
name|this
argument_list|,
name|entity
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// set schema for procedures...
for|for
control|(
name|Procedure
name|procedure
range|:
name|dataMap
operator|.
name|getProcedures
argument_list|()
control|)
block|{
if|if
condition|(
name|doAll
operator|||
name|Util
operator|.
name|isEmptyString
argument_list|(
name|procedure
operator|.
name|getSchema
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|defaultSchema
argument_list|,
name|procedure
operator|.
name|getSchema
argument_list|()
argument_list|)
condition|)
block|{
name|procedure
operator|.
name|setSchema
argument_list|(
name|defaultSchema
argument_list|)
expr_stmt|;
comment|// any way to batch events, a big change will flood the app with
comment|// procedure events..?
name|mediator
operator|.
name|fireProcedureEvent
argument_list|(
operator|new
name|ProcedureEvent
argument_list|(
name|this
argument_list|,
name|procedure
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

