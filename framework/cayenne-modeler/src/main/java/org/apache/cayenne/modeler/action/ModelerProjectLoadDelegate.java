begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|RuntimeLoadDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|graph
operator|.
name|GraphFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|graph
operator|.
name|GraphLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|ModelerDbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_comment
comment|/**  * Project loader delegate customized for use in CayenneModeler.  *   * @since 1.2  */
end_comment

begin_class
class|class
name|ModelerProjectLoadDelegate
extends|extends
name|RuntimeLoadDelegate
block|{
specifier|public
name|ModelerProjectLoadDelegate
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|configuration
argument_list|,
name|configuration
operator|.
name|getLoadStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|updateDefaults
parameter_list|(
name|DataDomain
name|domain
parameter_list|)
block|{
comment|// do nothing...
block|}
specifier|protected
name|void
name|initAdapter
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|String
name|adapterName
parameter_list|)
block|{
name|node
operator|.
name|setAdapter
argument_list|(
operator|new
name|ModelerDbAdapter
argument_list|(
name|adapterName
argument_list|,
name|node
operator|.
name|getDataSource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|shouldLoadDataDomain
parameter_list|(
name|String
name|domainName
parameter_list|)
block|{
name|super
operator|.
name|shouldLoadDataDomain
argument_list|(
name|domainName
argument_list|)
expr_stmt|;
try|try
block|{
comment|// disable class indexing
name|findDomain
argument_list|(
name|domainName
argument_list|)
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|setIndexedByClass
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Domain is not loaded: "
operator|+
name|domainName
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|shouldLoadDataDomainProperties
parameter_list|(
name|String
name|domainName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
comment|// remove factory property to avoid instantiation attempts for unknown/invalid
comment|// classes
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|propertiesClone
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|String
name|dataContextFactory
init|=
name|propertiesClone
operator|.
name|remove
argument_list|(
name|DataDomain
operator|.
name|DATA_CONTEXT_FACTORY_PROPERTY
argument_list|)
decl_stmt|;
name|super
operator|.
name|shouldLoadDataDomainProperties
argument_list|(
name|domainName
argument_list|,
name|propertiesClone
argument_list|)
expr_stmt|;
comment|// stick property back in...
if|if
condition|(
name|dataContextFactory
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|findDomain
argument_list|(
name|domainName
argument_list|)
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|DataDomain
operator|.
name|DATA_CONTEXT_FACTORY_PROPERTY
argument_list|,
name|dataContextFactory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Domain is not loaded: "
operator|+
name|domainName
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|finishedLoading
parameter_list|()
block|{
comment|// execute a simplified version of the super method to avoid runtime relationships
comment|// and other runtime artifacts...
comment|// load missing relationships and update configuration object
for|for
control|(
name|DataDomain
name|domain
range|:
name|getDomains
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|config
operator|.
name|addDomain
argument_list|(
name|domain
argument_list|)
expr_stmt|;
block|}
comment|//AFTER everything was loaded, load graphs as well
for|for
control|(
name|DataDomain
name|domain
range|:
name|getDomains
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|location
init|=
name|domain
operator|.
name|getName
argument_list|()
operator|+
name|GraphFile
operator|.
name|LOCATION_SUFFIX
decl_stmt|;
name|InputStream
name|in
init|=
operator|(
operator|(
name|ModelerProjectConfiguration
operator|)
name|config
operator|)
operator|.
name|getMapConfiguration
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|XMLReader
name|parser
init|=
name|Util
operator|.
name|createXmlReader
argument_list|()
decl_stmt|;
name|GraphLoader
name|handler
init|=
operator|new
name|GraphLoader
argument_list|(
operator|(
operator|(
name|ModelerProjectConfiguration
operator|)
name|config
operator|)
operator|.
name|getGraphRegistry
argument_list|()
operator|.
name|getGraphMap
argument_list|(
name|domain
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|setContentHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setErrorHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|loadError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Creates a subclass of the DataNode that does not decorate its DataSource, exposing      * the version that was set on it.      */
specifier|protected
name|DataNode
name|createDataNode
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
return|return
operator|new
name|DataNode
argument_list|(
name|nodeName
argument_list|)
block|{
specifier|public
name|DataSource
name|getDataSource
parameter_list|()
block|{
return|return
name|dataSource
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

