begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|pref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|Preferences
import|;
end_import

begin_class
specifier|public
class|class
name|CayennePreference
implements|implements
name|Preference
block|{
specifier|private
name|Preferences
name|rootPreference
decl_stmt|;
specifier|private
name|Preferences
name|cayennePreference
decl_stmt|;
specifier|protected
name|Preferences
name|currentPreference
decl_stmt|;
specifier|public
name|Preferences
name|getRootPreference
parameter_list|()
block|{
if|if
condition|(
name|rootPreference
operator|==
literal|null
condition|)
block|{
name|rootPreference
operator|=
name|Preferences
operator|.
name|userRoot
argument_list|()
expr_stmt|;
block|}
return|return
name|rootPreference
return|;
block|}
specifier|public
name|Preferences
name|getCayennePreference
parameter_list|()
block|{
if|if
condition|(
name|cayennePreference
operator|==
literal|null
condition|)
block|{
name|cayennePreference
operator|=
name|getRootPreference
argument_list|()
operator|.
name|node
argument_list|(
name|CAYENNE_PREFERENCE
argument_list|)
expr_stmt|;
block|}
return|return
name|cayennePreference
return|;
block|}
specifier|public
name|Preferences
name|getNode
parameter_list|(
name|Class
name|className
parameter_list|,
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|Preferences
operator|.
name|userNodeForPackage
argument_list|(
name|className
argument_list|)
return|;
block|}
return|return
name|Preferences
operator|.
name|userNodeForPackage
argument_list|(
name|className
argument_list|)
operator|.
name|node
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|public
name|void
name|setCurrentNodeForPreference
parameter_list|(
name|Class
name|className
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|currentPreference
operator|=
name|getNode
argument_list|(
name|className
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

