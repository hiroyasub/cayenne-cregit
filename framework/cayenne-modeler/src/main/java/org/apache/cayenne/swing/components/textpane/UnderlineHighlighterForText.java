begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|components
operator|.
name|textpane
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|FontMetrics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Shape
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|BadLocationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|DefaultHighlighter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|Highlighter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|JTextComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|LayeredHighlighter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|Position
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|View
import|;
end_import

begin_class
specifier|public
class|class
name|UnderlineHighlighterForText
extends|extends
name|DefaultHighlighter
block|{
specifier|public
name|UnderlineHighlighterForText
parameter_list|(
name|Color
name|c
parameter_list|)
block|{
name|painter
operator|=
operator|(
name|c
operator|==
literal|null
condition|?
name|sharedPainter
else|:
operator|new
name|UnderlineHighlightPainter
argument_list|(
name|c
argument_list|)
operator|)
expr_stmt|;
block|}
comment|// Convenience method to add a highlight with
comment|// the default painter.
specifier|public
name|Object
name|addHighlight
parameter_list|(
name|int
name|p0
parameter_list|,
name|int
name|p1
parameter_list|)
throws|throws
name|BadLocationException
block|{
return|return
name|addHighlight
argument_list|(
name|p0
argument_list|,
name|p1
argument_list|,
name|painter
argument_list|)
return|;
block|}
specifier|public
name|void
name|setDrawsLayeredHighlights
parameter_list|(
name|boolean
name|newValue
parameter_list|)
block|{
comment|// Illegal if false - we only support layered highlights
if|if
condition|(
name|newValue
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"UnderlineHighlighterForArea only draws layered highlights"
argument_list|)
throw|;
block|}
name|super
operator|.
name|setDrawsLayeredHighlights
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Painter for underlined highlights
specifier|public
specifier|static
class|class
name|UnderlineHighlightPainter
extends|extends
name|LayeredHighlighter
operator|.
name|LayerPainter
block|{
specifier|public
name|UnderlineHighlightPainter
parameter_list|(
name|Color
name|c
parameter_list|)
block|{
name|color
operator|=
name|c
expr_stmt|;
block|}
specifier|public
name|void
name|paint
parameter_list|(
name|Graphics
name|g
parameter_list|,
name|int
name|offs0
parameter_list|,
name|int
name|offs1
parameter_list|,
name|Shape
name|bounds
parameter_list|,
name|JTextComponent
name|c
parameter_list|)
block|{
comment|// Do nothing: this method will never be called
block|}
specifier|public
name|Shape
name|paintLayer
parameter_list|(
name|Graphics
name|g
parameter_list|,
name|int
name|offs0
parameter_list|,
name|int
name|offs1
parameter_list|,
name|Shape
name|bounds
parameter_list|,
name|JTextComponent
name|c
parameter_list|,
name|View
name|view
parameter_list|)
block|{
name|g
operator|.
name|setColor
argument_list|(
name|color
operator|==
literal|null
condition|?
name|c
operator|.
name|getSelectionColor
argument_list|()
else|:
name|color
argument_list|)
expr_stmt|;
name|Rectangle
name|alloc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|offs0
operator|==
name|view
operator|.
name|getStartOffset
argument_list|()
operator|&&
name|offs1
operator|==
name|view
operator|.
name|getEndOffset
argument_list|()
condition|)
block|{
if|if
condition|(
name|bounds
operator|instanceof
name|Rectangle
condition|)
block|{
name|alloc
operator|=
operator|(
name|Rectangle
operator|)
name|bounds
expr_stmt|;
block|}
else|else
block|{
name|alloc
operator|=
name|bounds
operator|.
name|getBounds
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|Shape
name|shape
init|=
name|view
operator|.
name|modelToView
argument_list|(
name|offs0
argument_list|,
name|Position
operator|.
name|Bias
operator|.
name|Forward
argument_list|,
name|offs1
argument_list|,
name|Position
operator|.
name|Bias
operator|.
name|Backward
argument_list|,
name|bounds
argument_list|)
decl_stmt|;
name|alloc
operator|=
operator|(
name|shape
operator|instanceof
name|Rectangle
operator|)
condition|?
operator|(
name|Rectangle
operator|)
name|shape
else|:
name|shape
operator|.
name|getBounds
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadLocationException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|FontMetrics
name|fm
init|=
name|c
operator|.
name|getFontMetrics
argument_list|(
name|c
operator|.
name|getFont
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|baseline
init|=
name|alloc
operator|.
name|y
operator|+
name|alloc
operator|.
name|height
operator|-
name|fm
operator|.
name|getDescent
argument_list|()
operator|+
literal|1
decl_stmt|;
name|int
index|[]
name|masY
init|=
block|{
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
decl_stmt|;
name|int
index|[]
name|x
init|=
operator|new
name|int
index|[
name|alloc
operator|.
name|width
index|]
decl_stmt|;
name|int
index|[]
name|y
init|=
operator|new
name|int
index|[
name|alloc
operator|.
name|width
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alloc
operator|.
name|width
condition|;
name|i
operator|++
control|)
block|{
name|x
index|[
name|i
index|]
operator|=
name|alloc
operator|.
name|x
operator|+
name|i
expr_stmt|;
name|y
index|[
name|i
index|]
operator|=
name|baseline
operator|+
name|masY
index|[
name|i
operator|%
literal|6
index|]
expr_stmt|;
block|}
name|g
operator|.
name|drawPolyline
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|alloc
operator|.
name|width
argument_list|)
expr_stmt|;
return|return
name|alloc
return|;
block|}
specifier|protected
name|Color
name|color
decl_stmt|;
comment|// The color for the underline
block|}
comment|// Shared painter used for default highlighting
specifier|protected
specifier|static
specifier|final
name|Highlighter
operator|.
name|HighlightPainter
name|sharedPainter
init|=
operator|new
name|UnderlineHighlightPainter
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// Painter used for this highlighter
specifier|protected
name|Highlighter
operator|.
name|HighlightPainter
name|painter
decl_stmt|;
block|}
end_class

end_unit

