begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EventObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|ProjectPath
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|DisplayEvent
extends|extends
name|EventObject
block|{
specifier|protected
name|boolean
name|refired
decl_stmt|;
specifier|protected
name|boolean
name|changed
decl_stmt|;
specifier|protected
name|ProjectPath
name|path
decl_stmt|;
comment|/**      * Constructor for DisplayEvent.      * @param source      */
specifier|public
name|DisplayEvent
parameter_list|(
name|Object
name|source
parameter_list|)
block|{
name|super
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|refired
operator|=
literal|false
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Constructor for DisplayEvent.      * @param source      */
specifier|public
name|DisplayEvent
parameter_list|(
name|Object
name|source
parameter_list|,
name|ProjectPath
name|path
parameter_list|)
block|{
name|super
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|refired
operator|=
literal|false
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
specifier|public
name|ProjectPath
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
specifier|public
name|void
name|setPath
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
comment|/**     * Returns the last object in the path.     */
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
operator|(
name|path
operator|!=
literal|null
operator|)
condition|?
name|path
operator|.
name|getObject
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * Returns true if the path's last object has changed.      */
specifier|public
name|boolean
name|isChanged
parameter_list|()
block|{
return|return
name|changed
return|;
block|}
specifier|public
name|void
name|setChanged
parameter_list|(
name|boolean
name|changed
parameter_list|)
block|{
name|this
operator|.
name|changed
operator|=
name|changed
expr_stmt|;
block|}
comment|/**      * Returns true if the event has been refired      */
specifier|public
name|boolean
name|isRefired
parameter_list|()
block|{
return|return
name|refired
return|;
block|}
specifier|public
name|void
name|setRefired
parameter_list|(
name|boolean
name|refired
parameter_list|)
block|{
name|this
operator|.
name|refired
operator|=
name|refired
expr_stmt|;
block|}
specifier|public
name|boolean
name|pointsTo
parameter_list|(
name|Class
name|nodeClass
parameter_list|)
block|{
if|if
condition|(
name|nodeClass
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Object
name|last
init|=
name|getObject
argument_list|()
decl_stmt|;
return|return
operator|(
name|last
operator|!=
literal|null
operator|)
condition|?
name|last
operator|.
name|getClass
argument_list|()
operator|==
name|nodeClass
else|:
literal|false
return|;
block|}
block|}
end_class

end_unit

