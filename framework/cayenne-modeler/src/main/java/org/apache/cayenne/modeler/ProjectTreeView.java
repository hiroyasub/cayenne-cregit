begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTree
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TreeSelectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TreeSelectionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultMutableTreeNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|MutableTreeNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreeSelectionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DataMapEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DataMapListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DataNodeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DataNodeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DbEntityListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DomainEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DomainListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EntityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|ObjEntityListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|ProcedureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|ProcedureListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|QueryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|QueryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataMapDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataMapDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataNodeDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataNodeDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DbEntityDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DomainDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DomainDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|EntityDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ObjEntityDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ProcedureDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ProcedureDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|QueryDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|QueryDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CellRenderers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|Comparators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Panel displaying Cayenne project as a tree.  */
end_comment

begin_class
specifier|public
class|class
name|ProjectTreeView
extends|extends
name|JTree
implements|implements
name|DomainDisplayListener
implements|,
name|DomainListener
implements|,
name|DataMapDisplayListener
implements|,
name|DataMapListener
implements|,
name|DataNodeDisplayListener
implements|,
name|DataNodeListener
implements|,
name|ObjEntityListener
implements|,
name|ObjEntityDisplayListener
implements|,
name|DbEntityListener
implements|,
name|DbEntityDisplayListener
implements|,
name|QueryListener
implements|,
name|QueryDisplayListener
implements|,
name|ProcedureListener
implements|,
name|ProcedureDisplayListener
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|logObj
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProjectTreeView
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|ProjectController
name|mediator
decl_stmt|;
specifier|protected
name|TreeSelectionListener
name|treeSelectionListener
decl_stmt|;
specifier|public
name|ProjectTreeView
parameter_list|(
name|ProjectController
name|mediator
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|mediator
operator|=
name|mediator
expr_stmt|;
name|initView
argument_list|()
expr_stmt|;
name|initController
argument_list|()
expr_stmt|;
name|initFromModel
argument_list|(
name|Application
operator|.
name|getProject
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initView
parameter_list|()
block|{
name|setCellRenderer
argument_list|(
name|CellRenderers
operator|.
name|treeRenderer
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initController
parameter_list|()
block|{
name|treeSelectionListener
operator|=
operator|new
name|TreeSelectionListener
argument_list|()
block|{
specifier|public
name|void
name|valueChanged
parameter_list|(
name|TreeSelectionEvent
name|e
parameter_list|)
block|{
name|processSelection
argument_list|(
name|e
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|addTreeSelectionListener
argument_list|(
name|treeSelectionListener
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addDomainListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addDomainDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addDataNodeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addDataNodeDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addDataMapListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addDataMapDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addObjEntityListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addObjEntityDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addDbEntityListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addDbEntityDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addProcedureListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addProcedureDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addQueryListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addQueryDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initFromModel
parameter_list|(
name|Project
name|project
parameter_list|)
block|{
comment|// build model
name|ProjectTreeModel
name|model
init|=
operator|new
name|ProjectTreeModel
argument_list|(
name|project
argument_list|)
decl_stmt|;
name|setRootVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
comment|// expand top level
name|getSelectionModel
argument_list|()
operator|.
name|setSelectionMode
argument_list|(
name|TreeSelectionModel
operator|.
name|SINGLE_TREE_SELECTION
argument_list|)
expr_stmt|;
name|Enumeration
name|level
init|=
name|model
operator|.
name|getRootNode
argument_list|()
operator|.
name|children
argument_list|()
decl_stmt|;
while|while
condition|(
name|level
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|DefaultMutableTreeNode
name|node
init|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|level
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|TreePath
name|path
init|=
operator|new
name|TreePath
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|expandPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns tree model cast to ProjectTreeModel.      */
name|ProjectTreeModel
name|getProjectModel
parameter_list|()
block|{
return|return
operator|(
name|ProjectTreeModel
operator|)
name|getModel
argument_list|()
return|;
block|}
comment|/**      * Returns a "name" property of the tree node.      */
specifier|public
name|String
name|convertValueToText
parameter_list|(
name|Object
name|value
parameter_list|,
name|boolean
name|selected
parameter_list|,
name|boolean
name|expanded
parameter_list|,
name|boolean
name|leaf
parameter_list|,
name|int
name|row
parameter_list|,
name|boolean
name|hasFocus
parameter_list|)
block|{
comment|// unwrap
while|while
condition|(
name|value
operator|instanceof
name|DefaultMutableTreeNode
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|DefaultMutableTreeNode
operator|)
name|value
operator|)
operator|.
name|getUserObject
argument_list|()
expr_stmt|;
block|}
comment|// String - just return it
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// Project - return the name of top file
if|if
condition|(
name|value
operator|instanceof
name|Project
condition|)
block|{
name|File
name|f
init|=
operator|(
operator|(
name|Project
operator|)
name|value
operator|)
operator|.
name|getMainFile
argument_list|()
decl_stmt|;
return|return
operator|(
name|f
operator|!=
literal|null
operator|)
condition|?
name|f
operator|.
name|getPath
argument_list|()
else|:
literal|""
return|;
block|}
comment|// read name property
try|try
block|{
return|return
operator|(
name|value
operator|!=
literal|null
operator|)
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|PropertyUtils
operator|.
name|getProperty
argument_list|(
name|value
argument_list|,
literal|"name"
argument_list|)
argument_list|)
else|:
literal|""
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|objectClass
init|=
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
literal|"(unknown)"
else|:
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|logObj
operator|.
name|warn
argument_list|(
literal|"Exception reading property 'name', class "
operator|+
name|objectClass
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
specifier|public
name|void
name|currentDomainChanged
parameter_list|(
name|DomainDisplayEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
operator|||
operator|!
name|e
operator|.
name|isDomainChanged
argument_list|()
operator|)
operator|&&
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
return|return;
block|}
name|showNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|currentDataNodeChanged
parameter_list|(
name|DataNodeDisplayEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
operator|||
operator|!
name|e
operator|.
name|isDataNodeChanged
argument_list|()
operator|)
operator|&&
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
return|return;
block|}
name|showNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
block|,
name|e
operator|.
name|getDataNode
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|currentDataMapChanged
parameter_list|(
name|DataMapDisplayEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
operator|||
operator|!
name|e
operator|.
name|isDataMapChanged
argument_list|()
operator|)
operator|&&
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
return|return;
block|}
name|showNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
block|,
name|e
operator|.
name|getDataMap
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|currentObjEntityChanged
parameter_list|(
name|EntityDisplayEvent
name|e
parameter_list|)
block|{
name|e
operator|.
name|setEntityChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|currentEntityChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|currentDbEntityChanged
parameter_list|(
name|EntityDisplayEvent
name|e
parameter_list|)
block|{
name|e
operator|.
name|setEntityChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|currentEntityChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|currentEntityChanged
parameter_list|(
name|EntityDisplayEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
operator|||
operator|!
name|e
operator|.
name|isEntityChanged
argument_list|()
operator|)
operator|&&
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
return|return;
block|}
name|showNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
block|,
name|e
operator|.
name|getDataMap
argument_list|()
block|,
name|e
operator|.
name|getEntity
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|currentProcedureChanged
parameter_list|(
name|ProcedureDisplayEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
operator|||
operator|!
name|e
operator|.
name|isProcedureChanged
argument_list|()
operator|)
operator|&&
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
return|return;
block|}
name|showNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
block|,
name|e
operator|.
name|getDataMap
argument_list|()
block|,
name|e
operator|.
name|getProcedure
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|currentQueryChanged
parameter_list|(
name|QueryDisplayEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
operator|||
operator|!
name|e
operator|.
name|isQueryChanged
argument_list|()
operator|)
operator|&&
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
return|return;
block|}
name|showNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
block|,
name|e
operator|.
name|getDataMap
argument_list|()
block|,
name|e
operator|.
name|getQuery
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|procedureAdded
parameter_list|(
name|ProcedureEvent
name|e
parameter_list|)
block|{
name|DefaultMutableTreeNode
name|node
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
operator|new
name|Object
index|[]
block|{
name|mediator
operator|.
name|getCurrentDataDomain
argument_list|()
block|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Procedure
name|procedure
init|=
name|e
operator|.
name|getProcedure
argument_list|()
decl_stmt|;
name|DefaultMutableTreeNode
name|currentNode
init|=
operator|new
name|DefaultMutableTreeNode
argument_list|(
name|procedure
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|positionNode
argument_list|(
name|node
argument_list|,
name|currentNode
argument_list|,
name|Comparators
operator|.
name|getDataMapChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|currentNode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|procedureChanged
parameter_list|(
name|ProcedureEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
name|Object
index|[]
name|path
init|=
operator|new
name|Object
index|[]
block|{
name|mediator
operator|.
name|getCurrentDataDomain
argument_list|()
block|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
block|,
name|e
operator|.
name|getProcedure
argument_list|()
block|}
decl_stmt|;
name|updateNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|positionNode
argument_list|(
name|path
argument_list|,
name|Comparators
operator|.
name|getDataMapChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|procedureRemoved
parameter_list|(
name|ProcedureEvent
name|e
parameter_list|)
block|{
name|removeNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|mediator
operator|.
name|getCurrentDataDomain
argument_list|()
block|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
block|,
name|e
operator|.
name|getProcedure
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|queryAdded
parameter_list|(
name|QueryEvent
name|e
parameter_list|)
block|{
name|DefaultMutableTreeNode
name|node
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
operator|new
name|Object
index|[]
block|{
name|mediator
operator|.
name|getCurrentDataDomain
argument_list|()
block|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Query
name|query
init|=
name|e
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|DefaultMutableTreeNode
name|currentNode
init|=
operator|new
name|DefaultMutableTreeNode
argument_list|(
name|query
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|positionNode
argument_list|(
name|node
argument_list|,
name|currentNode
argument_list|,
name|Comparators
operator|.
name|getDataMapChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|currentNode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|queryChanged
parameter_list|(
name|QueryEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
name|Object
index|[]
name|path
init|=
operator|new
name|Object
index|[]
block|{
name|mediator
operator|.
name|getCurrentDataDomain
argument_list|()
block|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
block|,
name|e
operator|.
name|getQuery
argument_list|()
block|}
decl_stmt|;
name|updateNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|positionNode
argument_list|(
name|path
argument_list|,
name|Comparators
operator|.
name|getDataMapChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|queryRemoved
parameter_list|(
name|QueryEvent
name|e
parameter_list|)
block|{
name|removeNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|mediator
operator|.
name|getCurrentDataDomain
argument_list|()
block|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
block|,
name|e
operator|.
name|getQuery
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|domainChanged
parameter_list|(
name|DomainEvent
name|e
parameter_list|)
block|{
name|Object
index|[]
name|path
init|=
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
block|}
decl_stmt|;
name|updateNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
name|positionNode
argument_list|(
name|path
argument_list|,
name|Comparators
operator|.
name|getNamedObjectComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|domainAdded
parameter_list|(
name|DomainEvent
name|e
parameter_list|)
block|{
name|DataDomain
name|dataDomain
init|=
name|e
operator|.
name|getDomain
argument_list|()
decl_stmt|;
name|DefaultMutableTreeNode
name|newNode
init|=
name|ProjectTreeModel
operator|.
name|wrapProjectNode
argument_list|(
name|dataDomain
argument_list|)
decl_stmt|;
name|positionNode
argument_list|(
literal|null
argument_list|,
name|newNode
argument_list|,
name|Comparators
operator|.
name|getNamedObjectComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|domainRemoved
parameter_list|(
name|DomainEvent
name|e
parameter_list|)
block|{
name|removeNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getDomain
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dataNodeChanged
parameter_list|(
name|DataNodeEvent
name|e
parameter_list|)
block|{
name|DefaultMutableTreeNode
name|node
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
operator|new
name|Object
index|[]
block|{
name|mediator
operator|.
name|getCurrentDataDomain
argument_list|()
block|,
name|e
operator|.
name|getDataNode
argument_list|()
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
name|positionNode
argument_list|(
operator|(
name|DefaultMutableTreeNode
operator|)
name|node
operator|.
name|getParent
argument_list|()
argument_list|,
name|node
argument_list|,
name|Comparators
operator|.
name|getDataDomainChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getProjectModel
argument_list|()
operator|.
name|nodeChanged
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// check for DataMap additions/removals...
name|Object
index|[]
name|maps
init|=
name|e
operator|.
name|getDataNode
argument_list|()
operator|.
name|getDataMaps
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|int
name|mapCount
init|=
name|maps
operator|.
name|length
decl_stmt|;
comment|// DataMap was linked
if|if
condition|(
name|mapCount
operator|>
name|node
operator|.
name|getChildCount
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapCount
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|node
operator|.
name|getChildCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|DefaultMutableTreeNode
name|child
init|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|node
operator|.
name|getChildAt
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|maps
index|[
name|i
index|]
operator|==
name|child
operator|.
name|getUserObject
argument_list|()
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|DefaultMutableTreeNode
name|newMapNode
init|=
operator|new
name|DefaultMutableTreeNode
argument_list|(
name|maps
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|positionNode
argument_list|(
name|node
argument_list|,
name|newMapNode
argument_list|,
name|Comparators
operator|.
name|getNamedObjectComparator
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// DataMap was unlinked
if|else if
condition|(
name|mapCount
operator|<
name|node
operator|.
name|getChildCount
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|node
operator|.
name|getChildCount
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|DefaultMutableTreeNode
name|child
decl_stmt|;
name|child
operator|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|node
operator|.
name|getChildAt
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|child
operator|.
name|getUserObject
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|maps
index|[
name|i
index|]
operator|==
name|obj
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|removeNode
argument_list|(
name|child
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|public
name|void
name|dataNodeAdded
parameter_list|(
name|DataNodeEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
condition|)
block|{
return|return;
block|}
name|DefaultMutableTreeNode
name|node
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
operator|new
name|Object
index|[]
block|{
name|mediator
operator|.
name|getCurrentDataDomain
argument_list|()
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DataNode
name|dataNode
init|=
name|e
operator|.
name|getDataNode
argument_list|()
decl_stmt|;
name|DefaultMutableTreeNode
name|currentNode
init|=
name|ProjectTreeModel
operator|.
name|wrapProjectNode
argument_list|(
name|dataNode
argument_list|)
decl_stmt|;
name|positionNode
argument_list|(
name|node
argument_list|,
name|currentNode
argument_list|,
name|Comparators
operator|.
name|getDataDomainChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|currentNode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dataNodeRemoved
parameter_list|(
name|DataNodeEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
condition|)
block|{
return|return;
block|}
name|removeNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|mediator
operator|.
name|getCurrentDataDomain
argument_list|()
block|,
name|e
operator|.
name|getDataNode
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dataMapChanged
parameter_list|(
name|DataMapEvent
name|e
parameter_list|)
block|{
name|Object
index|[]
name|path
init|=
operator|new
name|Object
index|[]
block|{
name|mediator
operator|.
name|getCurrentDataDomain
argument_list|()
block|,
name|e
operator|.
name|getDataMap
argument_list|()
block|}
decl_stmt|;
name|updateNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
name|positionNode
argument_list|(
name|path
argument_list|,
name|Comparators
operator|.
name|getDataDomainChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|dataMapAdded
parameter_list|(
name|DataMapEvent
name|e
parameter_list|)
block|{
name|DefaultMutableTreeNode
name|domainNode
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
operator|new
name|Object
index|[]
block|{
name|mediator
operator|.
name|getCurrentDataDomain
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|DefaultMutableTreeNode
name|newMapNode
init|=
name|ProjectTreeModel
operator|.
name|wrapProjectNode
argument_list|(
name|e
operator|.
name|getDataMap
argument_list|()
argument_list|)
decl_stmt|;
name|positionNode
argument_list|(
name|domainNode
argument_list|,
name|newMapNode
argument_list|,
name|Comparators
operator|.
name|getDataDomainChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|newMapNode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dataMapRemoved
parameter_list|(
name|DataMapEvent
name|e
parameter_list|)
block|{
name|DataMap
name|map
init|=
name|e
operator|.
name|getDataMap
argument_list|()
decl_stmt|;
name|DataDomain
name|domain
init|=
name|mediator
operator|.
name|getCurrentDataDomain
argument_list|()
decl_stmt|;
name|removeNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|domain
block|,
name|map
block|}
argument_list|)
expr_stmt|;
comment|// Clean up map from the nodes
name|Iterator
name|nodes
init|=
operator|new
name|ArrayList
argument_list|(
name|domain
operator|.
name|getDataNodes
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nodes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|removeNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|domain
block|,
name|nodes
operator|.
name|next
argument_list|()
block|,
name|map
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|objEntityChanged
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|entityChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|objEntityAdded
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|entityAdded
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|objEntityRemoved
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|entityRemoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dbEntityChanged
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|entityChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dbEntityAdded
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|entityAdded
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dbEntityRemoved
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|entityRemoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|/**      * Makes Entity visible and selected.      *<ul>      *<li>If entity is from the current node, refreshes the node making sure changes in      * the entity name are reflected.</li>      *<li>If entity is in a different node, makes that node visible and selected.</li>      *</ul>      */
specifier|protected
name|void
name|entityChanged
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
name|Object
index|[]
name|path
init|=
operator|new
name|Object
index|[]
block|{
name|mediator
operator|.
name|getCurrentDataDomain
argument_list|()
block|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
block|,
name|e
operator|.
name|getEntity
argument_list|()
block|}
decl_stmt|;
name|updateNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|positionNode
argument_list|(
name|path
argument_list|,
name|Comparators
operator|.
name|getDataMapChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
name|showNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Event handler for ObjEntity and DbEntity additions. Adds a tree node for the entity      * and make it selected.      */
specifier|protected
name|void
name|entityAdded
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|Entity
name|entity
init|=
name|e
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|DefaultMutableTreeNode
name|mapNode
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
operator|new
name|Object
index|[]
block|{
name|mediator
operator|.
name|getCurrentDataDomain
argument_list|()
block|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapNode
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DefaultMutableTreeNode
name|currentNode
init|=
operator|new
name|DefaultMutableTreeNode
argument_list|(
name|entity
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|positionNode
argument_list|(
name|mapNode
argument_list|,
name|currentNode
argument_list|,
name|Comparators
operator|.
name|getDataMapChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|//showNode(currentNode);
block|}
comment|/**      * Event handler for ObjEntity and DbEntity removals. Removes a tree node for the      * entity and selects its sibling.      */
specifier|protected
name|void
name|entityRemoved
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
condition|)
block|{
return|return;
block|}
comment|// remove from DataMap tree
name|removeNode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|mediator
operator|.
name|getCurrentDataDomain
argument_list|()
block|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
block|,
name|e
operator|.
name|getEntity
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes current node from the tree. Selects a new node adjacent to the currently      * selected node instead.      */
specifier|protected
name|void
name|removeNode
parameter_list|(
name|DefaultMutableTreeNode
name|toBeRemoved
parameter_list|)
block|{
comment|// lookup for the new selected node
name|Object
name|selectedNode
init|=
literal|null
decl_stmt|;
name|TreePath
name|selectionPath
init|=
name|getSelectionPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectionPath
operator|!=
literal|null
condition|)
block|{
name|selectedNode
operator|=
name|selectionPath
operator|.
name|getLastPathComponent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|toBeRemoved
operator|==
name|selectedNode
condition|)
block|{
comment|// first search siblings
name|DefaultMutableTreeNode
name|newSelection
init|=
name|toBeRemoved
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
if|if
condition|(
name|newSelection
operator|==
literal|null
condition|)
block|{
name|newSelection
operator|=
name|toBeRemoved
operator|.
name|getPreviousSibling
argument_list|()
expr_stmt|;
comment|// try parent
if|if
condition|(
name|newSelection
operator|==
literal|null
condition|)
block|{
name|newSelection
operator|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|toBeRemoved
operator|.
name|getParent
argument_list|()
expr_stmt|;
comment|// search the whole tree
if|if
condition|(
name|newSelection
operator|==
literal|null
condition|)
block|{
name|newSelection
operator|=
name|toBeRemoved
operator|.
name|getNextNode
argument_list|()
expr_stmt|;
if|if
condition|(
name|newSelection
operator|==
literal|null
condition|)
block|{
name|newSelection
operator|=
name|toBeRemoved
operator|.
name|getPreviousNode
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|showNode
argument_list|(
name|newSelection
argument_list|)
expr_stmt|;
block|}
comment|// remove this node
name|getProjectModel
argument_list|()
operator|.
name|removeNodeFromParent
argument_list|(
name|toBeRemoved
argument_list|)
expr_stmt|;
block|}
comment|/** Makes node current, visible and selected. */
specifier|protected
name|void
name|showNode
parameter_list|(
name|DefaultMutableTreeNode
name|node
parameter_list|)
block|{
name|TreePath
name|path
init|=
operator|new
name|TreePath
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|scrollPathToVisible
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|setSelectionPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|showNode
parameter_list|(
name|Object
index|[]
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DefaultMutableTreeNode
name|node
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|showNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|updateNode
parameter_list|(
name|Object
index|[]
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DefaultMutableTreeNode
name|node
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|getProjectModel
argument_list|()
operator|.
name|nodeChanged
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|removeNode
parameter_list|(
name|Object
index|[]
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DefaultMutableTreeNode
name|node
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|removeNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Processes node selection regardless of whether a new node was selected, or an      * already selected node was clicked again. Normally called from event listener      * methods.      */
specifier|public
name|void
name|processSelection
parameter_list|(
name|TreePath
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DefaultMutableTreeNode
name|currentNode
init|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|Object
index|[]
name|data
init|=
name|getUserObjects
argument_list|(
name|currentNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// this should clear the right-side panel
name|mediator
operator|.
name|fireDomainDisplayEvent
argument_list|(
operator|new
name|DomainDisplayEvent
argument_list|(
name|this
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Object
name|obj
init|=
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|DataDomain
condition|)
block|{
name|mediator
operator|.
name|fireDomainDisplayEvent
argument_list|(
operator|new
name|DomainDisplayEvent
argument_list|(
name|this
argument_list|,
operator|(
name|DataDomain
operator|)
name|obj
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|DataMap
condition|)
block|{
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|mediator
operator|.
name|fireDataMapDisplayEvent
argument_list|(
operator|new
name|DataMapDisplayEvent
argument_list|(
name|this
argument_list|,
operator|(
name|DataMap
operator|)
name|obj
argument_list|,
operator|(
name|DataDomain
operator|)
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|3
index|]
argument_list|,
operator|(
name|DataNode
operator|)
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|data
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|mediator
operator|.
name|fireDataMapDisplayEvent
argument_list|(
operator|new
name|DataMapDisplayEvent
argument_list|(
name|this
argument_list|,
operator|(
name|DataMap
operator|)
name|obj
argument_list|,
operator|(
name|DataDomain
operator|)
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|DataNode
condition|)
block|{
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|mediator
operator|.
name|fireDataNodeDisplayEvent
argument_list|(
operator|new
name|DataNodeDisplayEvent
argument_list|(
name|this
argument_list|,
operator|(
name|DataDomain
operator|)
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|2
index|]
argument_list|,
operator|(
name|DataNode
operator|)
name|obj
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|Entity
condition|)
block|{
name|EntityDisplayEvent
name|e
init|=
operator|new
name|EntityDisplayEvent
argument_list|(
name|this
argument_list|,
operator|(
name|Entity
operator|)
name|obj
argument_list|)
decl_stmt|;
name|e
operator|.
name|setUnselectAttributes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|4
condition|)
block|{
name|e
operator|.
name|setDataMap
argument_list|(
operator|(
name|DataMap
operator|)
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|2
index|]
argument_list|)
expr_stmt|;
name|e
operator|.
name|setDomain
argument_list|(
operator|(
name|DataDomain
operator|)
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|4
index|]
argument_list|)
expr_stmt|;
name|e
operator|.
name|setDataNode
argument_list|(
operator|(
name|DataNode
operator|)
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|data
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|e
operator|.
name|setDataMap
argument_list|(
operator|(
name|DataMap
operator|)
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|2
index|]
argument_list|)
expr_stmt|;
name|e
operator|.
name|setDomain
argument_list|(
operator|(
name|DataDomain
operator|)
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|ObjEntity
condition|)
block|{
name|mediator
operator|.
name|fireObjEntityDisplayEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|DbEntity
condition|)
block|{
name|mediator
operator|.
name|fireDbEntityDisplayEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|Procedure
condition|)
block|{
name|ProcedureDisplayEvent
name|e
init|=
operator|new
name|ProcedureDisplayEvent
argument_list|(
name|this
argument_list|,
operator|(
name|Procedure
operator|)
name|obj
argument_list|,
operator|(
name|DataMap
operator|)
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|2
index|]
argument_list|,
operator|(
name|DataDomain
operator|)
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|3
index|]
argument_list|)
decl_stmt|;
name|mediator
operator|.
name|fireProcedureDisplayEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|Query
condition|)
block|{
name|QueryDisplayEvent
name|e
init|=
operator|new
name|QueryDisplayEvent
argument_list|(
name|this
argument_list|,
operator|(
name|Query
operator|)
name|obj
argument_list|,
operator|(
name|DataMap
operator|)
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|2
index|]
argument_list|,
operator|(
name|DataDomain
operator|)
name|data
index|[
name|data
operator|.
name|length
operator|-
literal|3
index|]
argument_list|)
decl_stmt|;
name|mediator
operator|.
name|fireQueryDisplayEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns array of the user objects ending with this and starting with one under      * root. That is the array of actual objects rather than wrappers.      */
specifier|private
name|Object
index|[]
name|getUserObjects
parameter_list|(
name|DefaultMutableTreeNode
name|node
parameter_list|)
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|node
operator|.
name|isRoot
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|node
operator|.
name|getUserObject
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|node
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|()
return|;
block|}
specifier|private
name|void
name|positionNode
parameter_list|(
name|Object
index|[]
name|path
parameter_list|,
name|Comparator
name|comparator
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DefaultMutableTreeNode
name|node
init|=
name|getProjectModel
argument_list|()
operator|.
name|getNodeForObjectPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|positionNode
argument_list|(
literal|null
argument_list|,
name|node
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|positionNode
parameter_list|(
name|MutableTreeNode
name|parent
parameter_list|,
name|DefaultMutableTreeNode
name|treeNode
parameter_list|,
name|Comparator
name|comparator
parameter_list|)
block|{
name|removeTreeSelectionListener
argument_list|(
name|treeSelectionListener
argument_list|)
expr_stmt|;
try|try
block|{
name|getProjectModel
argument_list|()
operator|.
name|positionNode
argument_list|(
name|parent
argument_list|,
name|treeNode
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|addTreeSelectionListener
argument_list|(
name|treeSelectionListener
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

