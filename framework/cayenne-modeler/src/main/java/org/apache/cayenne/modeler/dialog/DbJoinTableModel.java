begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneTableModel
import|;
end_import

begin_comment
comment|/** Model for editing DbAttributePair-s. Changes in the join attributes  *  don't take place until commit() is called. Creation of the new  *  DbAttributes is not allowed - user should choose from the existing ones. */
end_comment

begin_class
specifier|public
class|class
name|DbJoinTableModel
extends|extends
name|CayenneTableModel
block|{
comment|// Columns
specifier|static
specifier|final
name|int
name|SOURCE
init|=
literal|0
decl_stmt|;
specifier|static
specifier|final
name|int
name|TARGET
init|=
literal|1
decl_stmt|;
specifier|protected
name|DbRelationship
name|relationship
decl_stmt|;
specifier|protected
name|DbEntity
name|source
decl_stmt|;
specifier|protected
name|DbEntity
name|target
decl_stmt|;
comment|/** Is the table editable. */
specifier|private
name|boolean
name|editable
decl_stmt|;
specifier|public
name|DbJoinTableModel
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|,
name|ProjectController
name|mediator
parameter_list|,
name|Object
name|src
parameter_list|)
block|{
name|super
argument_list|(
name|mediator
argument_list|,
name|src
argument_list|,
operator|new
name|ArrayList
argument_list|(
name|relationship
operator|.
name|getJoins
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|relationship
operator|=
name|relationship
expr_stmt|;
name|this
operator|.
name|source
operator|=
operator|(
name|DbEntity
operator|)
name|relationship
operator|.
name|getSourceEntity
argument_list|()
expr_stmt|;
name|this
operator|.
name|target
operator|=
operator|(
name|DbEntity
operator|)
name|relationship
operator|.
name|getTargetEntity
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DbJoinTableModel
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|,
name|ProjectController
name|mediator
parameter_list|,
name|Object
name|src
parameter_list|,
name|boolean
name|editable
parameter_list|)
block|{
name|this
argument_list|(
name|relationship
argument_list|,
name|mediator
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|this
operator|.
name|editable
operator|=
name|editable
expr_stmt|;
block|}
specifier|public
name|Class
name|getElementsClass
parameter_list|()
block|{
return|return
name|DbJoin
operator|.
name|class
return|;
block|}
comment|/** Mode new attribute pairs from list to the DbRelationship. */
specifier|public
name|void
name|commit
parameter_list|()
block|{
name|relationship
operator|.
name|setJoins
argument_list|(
name|getObjectList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns null to disable ordering.      */
specifier|public
name|String
name|getOrderingKey
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
name|column
operator|==
name|SOURCE
condition|)
return|return
literal|"Source"
return|;
if|else if
condition|(
name|column
operator|==
name|TARGET
condition|)
return|return
literal|"Target"
return|;
else|else
return|return
literal|""
return|;
block|}
specifier|public
name|DbJoin
name|getJoin
parameter_list|(
name|int
name|row
parameter_list|)
block|{
return|return
operator|(
name|row
operator|>=
literal|0
operator|&&
name|row
operator|<
name|objectList
operator|.
name|size
argument_list|()
operator|)
condition|?
operator|(
name|DbJoin
operator|)
name|objectList
operator|.
name|get
argument_list|(
name|row
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|DbJoin
name|join
init|=
name|getJoin
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|join
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|column
operator|==
name|SOURCE
condition|)
block|{
return|return
name|join
operator|.
name|getSourceName
argument_list|()
return|;
block|}
if|else if
condition|(
name|column
operator|==
name|TARGET
condition|)
block|{
return|return
name|join
operator|.
name|getTargetName
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|setUpdatedValueAt
parameter_list|(
name|Object
name|aValue
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|DbJoin
name|join
init|=
name|getJoin
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|join
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|value
init|=
operator|(
name|String
operator|)
name|aValue
decl_stmt|;
if|if
condition|(
name|column
operator|==
name|SOURCE
condition|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
operator|||
name|source
operator|.
name|getAttribute
argument_list|(
name|value
argument_list|)
operator|==
literal|null
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
name|join
operator|.
name|setSourceName
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|column
operator|==
name|TARGET
condition|)
block|{
if|if
condition|(
name|target
operator|==
literal|null
operator|||
name|target
operator|.
name|getAttribute
argument_list|(
name|value
argument_list|)
operator|==
literal|null
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
name|join
operator|.
name|setTargetName
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|fireTableRowsUpdated
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
if|if
condition|(
name|col
operator|==
name|SOURCE
condition|)
block|{
return|return
name|relationship
operator|.
name|getSourceEntity
argument_list|()
operator|!=
literal|null
operator|&&
name|editable
return|;
block|}
if|else if
condition|(
name|col
operator|==
name|TARGET
condition|)
block|{
return|return
name|relationship
operator|.
name|getTargetEntity
argument_list|()
operator|!=
literal|null
operator|&&
name|editable
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

