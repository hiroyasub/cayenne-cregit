begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|objentity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Relationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|Comparators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scopemvc
operator|.
name|core
operator|.
name|IntIndexSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scopemvc
operator|.
name|core
operator|.
name|ModelChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scopemvc
operator|.
name|core
operator|.
name|ModelChangeTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scopemvc
operator|.
name|core
operator|.
name|Selector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scopemvc
operator|.
name|model
operator|.
name|basic
operator|.
name|BasicModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scopemvc
operator|.
name|model
operator|.
name|collection
operator|.
name|ListModel
import|;
end_import

begin_comment
comment|/**  * A Scope model for mapping an ObjRelationship to one or more DbRelationships.  *   * @since 1.1  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|ObjRelationshipInfoModel
extends|extends
name|BasicModel
block|{
specifier|public
specifier|static
specifier|final
name|Selector
name|DB_RELATIONSHIP_PATH_SELECTOR
init|=
name|Selector
operator|.
name|fromString
argument_list|(
literal|"dbRelationshipPath"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Selector
name|SOURCE_ENTITY_NAME_SELECTOR
init|=
name|Selector
operator|.
name|fromString
argument_list|(
literal|"relationship.sourceEntity.name"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Selector
name|SELECTED_PATH_COMPONENT_SELECTOR
init|=
name|Selector
operator|.
name|fromString
argument_list|(
literal|"selectedPathComponent"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Selector
name|OBJECT_TARGET_SELECTOR
init|=
name|Selector
operator|.
name|fromString
argument_list|(
literal|"objectTarget"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Selector
name|OBJECT_TARGETS_SELECTOR
init|=
name|Selector
operator|.
name|fromString
argument_list|(
literal|"objectTargets"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Selector
name|RELATIONSHIP_NAME_SELECTOR
init|=
name|Selector
operator|.
name|fromString
argument_list|(
literal|"relationshipName"
argument_list|)
decl_stmt|;
specifier|protected
name|ObjRelationship
name|relationship
decl_stmt|;
specifier|protected
name|ListModel
name|dbRelationshipPath
decl_stmt|;
specifier|protected
name|EntityRelationshipsModel
name|selectedPathComponent
decl_stmt|;
specifier|protected
name|ObjEntity
name|objectTarget
decl_stmt|;
specifier|protected
name|List
name|objectTargets
decl_stmt|;
specifier|protected
name|String
name|relationshipName
decl_stmt|;
specifier|public
name|ObjRelationshipInfoModel
parameter_list|(
name|ObjRelationship
name|relationship
parameter_list|,
name|Collection
name|objEntities
parameter_list|)
block|{
name|this
operator|.
name|relationship
operator|=
name|relationship
expr_stmt|;
name|this
operator|.
name|relationshipName
operator|=
name|relationship
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|objectTarget
operator|=
operator|(
name|ObjEntity
operator|)
name|relationship
operator|.
name|getTargetEntity
argument_list|()
expr_stmt|;
comment|// prepare entities - copy those that have DbEntities mapped, and then sort
name|this
operator|.
name|objectTargets
operator|=
operator|new
name|ArrayList
argument_list|(
name|objEntities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|entities
init|=
name|objEntities
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|entities
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ObjEntity
name|entity
init|=
operator|(
name|ObjEntity
operator|)
name|entities
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|.
name|getDbEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|objectTargets
operator|.
name|add
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|objectTargets
argument_list|,
name|Comparators
operator|.
name|getNamedObjectComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate -
comment|// current limitation is that an ObjRelationship must have source
comment|// and target entities present, with DbEntities chosen.
name|validateCanMap
argument_list|()
expr_stmt|;
comment|// wrap path
name|this
operator|.
name|dbRelationshipPath
operator|=
operator|new
name|ListModel
argument_list|()
expr_stmt|;
name|Iterator
name|it
init|=
name|relationship
operator|.
name|getDbRelationships
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbRelationship
name|dbRelationship
init|=
operator|(
name|DbRelationship
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|this
operator|.
name|dbRelationshipPath
operator|.
name|add
argument_list|(
operator|new
name|EntityRelationshipsModel
argument_list|(
name|dbRelationship
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add dummy last relationship if we are not connected
name|connectEnds
argument_list|()
expr_stmt|;
name|this
operator|.
name|dbRelationshipPath
operator|.
name|addModelChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ObjRelationship
name|getRelationship
parameter_list|()
block|{
return|return
name|relationship
return|;
block|}
specifier|public
name|ListModel
name|getDbRelationshipPath
parameter_list|()
block|{
return|return
name|dbRelationshipPath
return|;
block|}
specifier|public
name|EntityRelationshipsModel
name|getSelectedPathComponent
parameter_list|()
block|{
return|return
name|selectedPathComponent
return|;
block|}
specifier|public
name|void
name|setSelectedPathComponent
parameter_list|(
name|EntityRelationshipsModel
name|selectedPathComponent
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|selectedPathComponent
operator|!=
name|selectedPathComponent
condition|)
block|{
name|unlistenOldSubmodel
argument_list|(
name|SELECTED_PATH_COMPONENT_SELECTOR
argument_list|)
expr_stmt|;
name|this
operator|.
name|selectedPathComponent
operator|=
name|selectedPathComponent
expr_stmt|;
name|listenNewSubmodel
argument_list|(
name|SELECTED_PATH_COMPONENT_SELECTOR
argument_list|)
expr_stmt|;
name|fireModelChange
argument_list|(
name|ModelChangeTypes
operator|.
name|VALUE_CHANGED
argument_list|,
name|SELECTED_PATH_COMPONENT_SELECTOR
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns currently selected target of the ObjRelationship.      */
specifier|public
name|ObjEntity
name|getObjectTarget
parameter_list|()
block|{
return|return
name|objectTarget
return|;
block|}
comment|/**      * Sets a new target      */
specifier|public
name|void
name|setObjectTarget
parameter_list|(
name|ObjEntity
name|objectTarget
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|objectTarget
operator|!=
name|objectTarget
condition|)
block|{
name|unlistenOldSubmodel
argument_list|(
name|OBJECT_TARGET_SELECTOR
argument_list|)
expr_stmt|;
name|this
operator|.
name|objectTarget
operator|=
name|objectTarget
expr_stmt|;
name|listenNewSubmodel
argument_list|(
name|OBJECT_TARGET_SELECTOR
argument_list|)
expr_stmt|;
name|fireModelChange
argument_list|(
name|ModelChangeTypes
operator|.
name|VALUE_CHANGED
argument_list|,
name|OBJECT_TARGET_SELECTOR
argument_list|)
expr_stmt|;
comment|// change the list of relationships
name|breakChain
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|connectEnds
argument_list|()
expr_stmt|;
name|fireModelChange
argument_list|(
name|ModelChangeTypes
operator|.
name|VALUE_CHANGED
argument_list|,
name|DB_RELATIONSHIP_PATH_SELECTOR
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns a list of ObjEntities available for target mapping.      */
specifier|public
name|List
name|getObjectTargets
parameter_list|()
block|{
return|return
name|objectTargets
return|;
block|}
specifier|public
name|String
name|getRelationshipName
parameter_list|()
block|{
return|return
name|relationshipName
return|;
block|}
specifier|public
name|void
name|setRelationshipName
parameter_list|(
name|String
name|relationshipName
parameter_list|)
block|{
name|this
operator|.
name|relationshipName
operator|=
name|relationshipName
expr_stmt|;
block|}
specifier|public
name|void
name|modelChanged
parameter_list|(
name|ModelChangeEvent
name|event
parameter_list|)
block|{
comment|// if a different relationship was selected, we may need to rebuild the list
name|Selector
name|selector
init|=
name|event
operator|.
name|getSelector
argument_list|()
decl_stmt|;
while|while
condition|(
name|selector
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|selector
operator|instanceof
name|IntIndexSelector
condition|)
block|{
name|IntIndexSelector
name|indexSel
init|=
operator|(
name|IntIndexSelector
operator|)
name|selector
decl_stmt|;
name|relationshipChanged
argument_list|(
name|indexSel
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|selector
operator|=
name|selector
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|modelChanged
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
comment|/**      * Processes relationship path when path component at index was changed.      */
specifier|public
specifier|synchronized
name|void
name|relationshipChanged
parameter_list|(
name|int
name|index
parameter_list|)
block|{
comment|// strip everything starting from the index
name|breakChain
argument_list|(
name|index
argument_list|)
expr_stmt|;
comment|// connect the ends
name|connectEnds
argument_list|()
expr_stmt|;
comment|// must fire with null selector, or refresh won't happen
name|dbRelationshipPath
operator|.
name|fireModelChange
argument_list|(
name|VALUE_CHANGED
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Stores current state of the model in the internal ObjRelationship.      */
specifier|public
specifier|synchronized
name|boolean
name|savePath
parameter_list|()
block|{
comment|// check for modifications
if|if
condition|(
name|relationship
operator|.
name|getTargetEntity
argument_list|()
operator|==
name|objectTarget
condition|)
block|{
if|if
condition|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
argument_list|,
name|relationshipName
argument_list|)
condition|)
block|{
name|List
name|oldPath
init|=
name|relationship
operator|.
name|getDbRelationships
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldPath
operator|.
name|size
argument_list|()
operator|==
name|dbRelationshipPath
operator|.
name|size
argument_list|()
condition|)
block|{
name|boolean
name|hasChanges
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldPath
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|EntityRelationshipsModel
name|next
init|=
operator|(
name|EntityRelationshipsModel
operator|)
name|dbRelationshipPath
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldPath
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|!=
name|next
operator|.
name|getSelectedRelationship
argument_list|()
condition|)
block|{
name|hasChanges
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|hasChanges
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
comment|// detected modifications, save...
name|relationship
operator|.
name|clearDbRelationships
argument_list|()
expr_stmt|;
comment|// note on events notification - this needs to be propagated
comment|// via old modeler events, but we leave this to the controller
comment|// since model knows nothing about Modeler mediator.
name|relationship
operator|.
name|setTargetEntity
argument_list|(
name|objectTarget
argument_list|)
expr_stmt|;
name|relationship
operator|.
name|setName
argument_list|(
name|relationshipName
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|dbRelationshipPath
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|EntityRelationshipsModel
name|next
init|=
operator|(
name|EntityRelationshipsModel
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Relationship
name|nextPathComponent
init|=
name|next
operator|.
name|getSelectedRelationship
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextPathComponent
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|relationship
operator|.
name|addDbRelationship
argument_list|(
operator|(
name|DbRelationship
operator|)
name|nextPathComponent
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|breakChain
parameter_list|(
name|int
name|index
parameter_list|)
block|{
comment|// strip everything starting from the index
name|dbRelationshipPath
operator|.
name|makeActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
name|dbRelationshipPath
operator|.
name|size
argument_list|()
operator|>
operator|(
name|index
operator|+
literal|1
operator|)
condition|)
block|{
comment|// remove last
name|dbRelationshipPath
operator|.
name|remove
argument_list|(
name|dbRelationshipPath
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|dbRelationshipPath
operator|.
name|makeActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Connects last selected DbRelationship in the path to the
comment|// last DbEntity, creating a dummy relationship if needed.
specifier|private
name|void
name|connectEnds
parameter_list|()
block|{
name|Relationship
name|last
init|=
literal|null
decl_stmt|;
name|int
name|size
init|=
name|dbRelationshipPath
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|EntityRelationshipsModel
name|wrapper
init|=
operator|(
name|EntityRelationshipsModel
operator|)
name|dbRelationshipPath
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
decl_stmt|;
name|last
operator|=
name|wrapper
operator|.
name|getSelectedRelationship
argument_list|()
expr_stmt|;
block|}
name|Entity
name|target
init|=
name|getEndEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|last
operator|==
literal|null
operator|||
name|last
operator|.
name|getTargetEntity
argument_list|()
operator|!=
name|target
condition|)
block|{
comment|// try to connect automatically, if we can't use dummy connector
name|Entity
name|source
init|=
operator|(
name|last
operator|==
literal|null
operator|)
condition|?
name|getStartEntity
argument_list|()
else|:
name|last
operator|.
name|getTargetEntity
argument_list|()
decl_stmt|;
name|Relationship
name|anyConnector
init|=
name|source
operator|.
name|getAnyRelationship
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|EntityRelationshipsModel
name|connector
init|=
literal|null
decl_stmt|;
name|connector
operator|=
operator|(
name|anyConnector
operator|==
literal|null
operator|)
condition|?
operator|new
name|EntityRelationshipsModel
argument_list|(
name|source
argument_list|,
name|getEndEntity
argument_list|()
argument_list|)
else|:
operator|new
name|EntityRelationshipsModel
argument_list|(
name|anyConnector
argument_list|)
expr_stmt|;
name|dbRelationshipPath
operator|.
name|makeActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|dbRelationshipPath
operator|.
name|add
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dbRelationshipPath
operator|.
name|makeActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|validateCanMap
parameter_list|()
block|{
if|if
condition|(
name|relationship
operator|.
name|getSourceEntity
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't map relationship without source entity."
argument_list|)
throw|;
block|}
if|if
condition|(
name|relationship
operator|.
name|getTargetEntity
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't map relationship without target entity."
argument_list|)
throw|;
block|}
if|if
condition|(
name|getStartEntity
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't map relationship without source DbEntity."
argument_list|)
throw|;
block|}
if|if
condition|(
name|getEndEntity
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't map relationship without target DbEntity."
argument_list|)
throw|;
block|}
block|}
specifier|public
name|DbEntity
name|getStartEntity
parameter_list|()
block|{
return|return
operator|(
operator|(
name|ObjEntity
operator|)
name|relationship
operator|.
name|getSourceEntity
argument_list|()
operator|)
operator|.
name|getDbEntity
argument_list|()
return|;
block|}
specifier|public
name|DbEntity
name|getEndEntity
parameter_list|()
block|{
return|return
name|objectTarget
operator|.
name|getDbEntity
argument_list|()
return|;
block|}
block|}
end_class

end_unit

