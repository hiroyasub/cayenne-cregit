begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Frame
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JFileChooser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|filechooser
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|OverwriteDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|FileFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project2
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * File chooser panel used to select a directory to store project files.  *   */
end_comment

begin_class
class|class
name|ProjectOpener
extends|extends
name|JFileChooser
block|{
specifier|private
specifier|static
name|Log
name|logObj
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProjectOpener
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Selects a directory to store the project.      */
name|File
name|newProjectDir
parameter_list|(
name|Frame
name|f
parameter_list|,
name|Project
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|Project
condition|)
block|{
name|StringBuilder
name|nameProject
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"cayenne"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|DataChannelDescriptor
operator|)
name|p
operator|.
name|getRootNode
argument_list|()
operator|)
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|nameProject
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
operator|(
operator|(
name|DataChannelDescriptor
operator|)
name|p
operator|.
name|getRootNode
argument_list|()
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|nameProject
operator|.
name|append
argument_list|(
literal|".xml"
argument_list|)
expr_stmt|;
comment|// configure for application project
return|return
name|newProjectDir
argument_list|(
name|f
argument_list|,
name|nameProject
operator|.
name|toString
argument_list|()
argument_list|,
name|FileFilters
operator|.
name|getApplicationFilter
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|message
init|=
operator|(
name|p
operator|==
literal|null
operator|)
condition|?
literal|"Null project."
else|:
literal|"Unrecognized project class: "
operator|+
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
name|File
name|newProjectDir
parameter_list|(
name|Frame
name|f
parameter_list|,
name|String
name|location
parameter_list|,
name|FileFilter
name|filter
parameter_list|)
block|{
comment|// configure dialog
name|setDialogTitle
argument_list|(
literal|"Select Project Directory"
argument_list|)
expr_stmt|;
name|setFileSelectionMode
argument_list|(
name|JFileChooser
operator|.
name|FILES_AND_DIRECTORIES
argument_list|)
expr_stmt|;
name|setCurrentDirectory
argument_list|(
name|getDefaultStartDir
argument_list|()
argument_list|)
expr_stmt|;
comment|// preselect current directory
if|if
condition|(
name|getCurrentDirectory
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setSelectedFile
argument_list|(
name|getCurrentDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// configure filters
name|resetChoosableFileFilters
argument_list|()
expr_stmt|;
comment|// allow users to see directories with cayenne.xml files
name|addChoosableFileFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|File
name|selectedDir
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|status
init|=
name|showDialog
argument_list|(
name|f
argument_list|,
literal|"Select"
argument_list|)
decl_stmt|;
name|selectedDir
operator|=
name|getSelectedFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|JFileChooser
operator|.
name|APPROVE_OPTION
operator|||
name|selectedDir
operator|==
literal|null
condition|)
block|{
name|logObj
operator|.
name|info
argument_list|(
literal|"Save canceled."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// normalize selection
name|logObj
operator|.
name|info
argument_list|(
literal|"Selected: "
operator|+
name|selectedDir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|selectedDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|selectedDir
operator|=
name|getSelectedFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
comment|// check for overwrite
name|File
name|projectFile
init|=
operator|new
name|File
argument_list|(
name|selectedDir
argument_list|,
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|projectFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|OverwriteDialog
name|dialog
init|=
operator|new
name|OverwriteDialog
argument_list|(
name|projectFile
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|dialog
operator|.
name|shouldOverwrite
argument_list|()
condition|)
block|{
break|break;
block|}
if|else if
condition|(
name|dialog
operator|.
name|shouldSelectAnother
argument_list|()
condition|)
block|{
continue|continue;
block|}
else|else
block|{
comment|// canceled
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|selectedDir
return|;
block|}
comment|/**      * Runs a dialog to open Cayenne project.      */
name|File
name|openProjectFile
parameter_list|(
name|Frame
name|f
parameter_list|)
block|{
comment|// configure dialog
name|setDialogTitle
argument_list|(
literal|"Select Project File"
argument_list|)
expr_stmt|;
name|setFileSelectionMode
argument_list|(
name|JFileChooser
operator|.
name|FILES_ONLY
argument_list|)
expr_stmt|;
name|setCurrentDirectory
argument_list|(
name|getDefaultStartDir
argument_list|()
argument_list|)
expr_stmt|;
comment|// configure filters
name|resetChoosableFileFilters
argument_list|()
expr_stmt|;
name|addChoosableFileFilter
argument_list|(
name|FileFilters
operator|.
name|getApplicationFilter
argument_list|()
argument_list|)
expr_stmt|;
comment|// default to App projects
name|setFileFilter
argument_list|(
name|FileFilters
operator|.
name|getApplicationFilter
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|showOpenDialog
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
name|JFileChooser
operator|.
name|APPROVE_OPTION
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getSelectedFile
argument_list|()
return|;
block|}
comment|/**      * Returns directory where file search should start. This is either coming from saved      * preferences, or a current directory is used.      */
name|File
name|getDefaultStartDir
parameter_list|()
block|{
comment|// find start directory in preferences
name|File
name|existingDir
init|=
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getFrameController
argument_list|()
operator|.
name|getLastDirectory
argument_list|()
operator|.
name|getExistingDirectory
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingDir
operator|==
literal|null
condition|)
block|{
comment|// go to current dir...
name|existingDir
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|existingDir
return|;
block|}
block|}
end_class

end_unit

