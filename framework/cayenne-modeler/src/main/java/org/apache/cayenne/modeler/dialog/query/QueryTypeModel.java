begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|AbstractQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ProcedureQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|scopemvc
operator|.
name|core
operator|.
name|Selector
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|QueryTypeModel
block|{
specifier|public
specifier|static
specifier|final
name|Selector
name|OBJECT_SELECT_QUERY_SELECTOR
init|=
name|Selector
operator|.
name|fromString
argument_list|(
literal|"objectSelectQuery"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Selector
name|RAW_SQL_QUERY_SELECTOR
init|=
name|Selector
operator|.
name|fromString
argument_list|(
literal|"rawSQLQuery"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Selector
name|PROCEDURE_QUERY_SELECTOR
init|=
name|Selector
operator|.
name|fromString
argument_list|(
literal|"procedureQuery"
argument_list|)
decl_stmt|;
comment|// query prototypes...
specifier|protected
name|AbstractQuery
name|objectSelectQuery
decl_stmt|;
specifier|protected
name|AbstractQuery
name|rawSQLQuery
decl_stmt|;
specifier|protected
name|AbstractQuery
name|procedureQuery
decl_stmt|;
specifier|protected
name|AbstractQuery
name|selectedQuery
decl_stmt|;
specifier|public
name|QueryTypeModel
parameter_list|(
name|DataMap
name|root
parameter_list|)
block|{
comment|// create query prototypes:
name|objectSelectQuery
operator|=
operator|new
name|SelectQuery
argument_list|()
expr_stmt|;
name|procedureQuery
operator|=
operator|new
name|ProcedureQuery
argument_list|()
expr_stmt|;
name|SQLTemplate
name|rawSQLQuery
init|=
operator|new
name|SQLTemplate
argument_list|()
decl_stmt|;
name|rawSQLQuery
operator|.
name|setRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|rawSQLQuery
operator|.
name|setFetchingDataRows
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|rawSQLQuery
operator|=
name|rawSQLQuery
expr_stmt|;
comment|// by default use object query...
name|selectedQuery
operator|=
name|objectSelectQuery
expr_stmt|;
block|}
specifier|public
name|AbstractQuery
name|getSelectedQuery
parameter_list|()
block|{
return|return
name|selectedQuery
return|;
block|}
specifier|public
name|void
name|setSelectedQuery
parameter_list|(
name|AbstractQuery
name|selectedQuery
parameter_list|)
block|{
name|this
operator|.
name|selectedQuery
operator|=
name|selectedQuery
expr_stmt|;
block|}
specifier|public
name|boolean
name|isObjectSelectQuery
parameter_list|()
block|{
return|return
name|selectedQuery
operator|==
name|objectSelectQuery
return|;
block|}
specifier|public
name|void
name|setObjectSelectQuery
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
if|if
condition|(
operator|!
name|flag
operator|&&
name|isObjectSelectQuery
argument_list|()
condition|)
block|{
name|selectedQuery
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
name|flag
operator|&&
operator|!
name|isObjectSelectQuery
argument_list|()
condition|)
block|{
name|selectedQuery
operator|=
name|objectSelectQuery
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isRawSQLQuery
parameter_list|()
block|{
return|return
name|selectedQuery
operator|==
name|rawSQLQuery
return|;
block|}
specifier|public
name|void
name|setRawSQLQuery
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
if|if
condition|(
operator|!
name|flag
operator|&&
name|isRawSQLQuery
argument_list|()
condition|)
block|{
name|selectedQuery
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
name|flag
operator|&&
operator|!
name|isRawSQLQuery
argument_list|()
condition|)
block|{
name|selectedQuery
operator|=
name|rawSQLQuery
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isProcedureQuery
parameter_list|()
block|{
return|return
name|selectedQuery
operator|==
name|procedureQuery
return|;
block|}
specifier|public
name|void
name|setProcedureQuery
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
if|if
condition|(
operator|!
name|flag
operator|&&
name|isProcedureQuery
argument_list|()
condition|)
block|{
name|selectedQuery
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
name|flag
operator|&&
operator|!
name|isProcedureQuery
argument_list|()
condition|)
block|{
name|selectedQuery
operator|=
name|procedureQuery
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

