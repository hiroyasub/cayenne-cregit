begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|pref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|BackingStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|Preferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ModelerPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneUserDir
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|ExtendedProperties
import|;
end_import

begin_class
specifier|public
class|class
name|UpgradeCayennePreference
extends|extends
name|CayennePreferenceDecorator
block|{
comment|/** Name of the preferences file. */
specifier|public
specifier|static
specifier|final
name|String
name|PREFERENCES_NAME_OLD
init|=
literal|"modeler.preferences"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LAST_PROJ_FILES_OLD
init|=
literal|"Editor.lastSeveralProjectFiles"
decl_stmt|;
comment|/** GUI layout */
specifier|public
specifier|static
specifier|final
name|String
name|EDITOR_LAFNAME_OLD
init|=
literal|"Editor.lookAndFeel"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EDITOR_THEMENAME_OLD
init|=
literal|"Editor.theme"
decl_stmt|;
comment|/** Log file */
specifier|public
specifier|static
specifier|final
name|String
name|EDITOR_LOGFILE_ENABLED_OLD
init|=
literal|"Editor.logfileEnabled"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EDITOR_LOGFILE_OLD
init|=
literal|"Editor.logfile"
decl_stmt|;
specifier|public
name|UpgradeCayennePreference
parameter_list|(
name|Preference
name|decoratedPreference
parameter_list|)
block|{
name|super
argument_list|(
name|decoratedPreference
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|upgrade
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
operator|!
name|Preferences
operator|.
name|userRoot
argument_list|()
operator|.
name|nodeExists
argument_list|(
name|CAYENNE_PREFERENCE
argument_list|)
condition|)
block|{
name|File
name|prefsFile
init|=
operator|new
name|File
argument_list|(
name|preferencesDirectory
argument_list|()
argument_list|,
name|PREFERENCES_NAME_OLD
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefsFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|ExtendedProperties
name|ep
init|=
operator|new
name|ExtendedProperties
argument_list|()
decl_stmt|;
try|try
block|{
name|ep
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|prefsFile
argument_list|)
argument_list|)
expr_stmt|;
name|Preferences
name|prefEditor
init|=
name|Preferences
operator|.
name|userRoot
argument_list|()
operator|.
name|node
argument_list|(
name|CAYENNE_PREFERENCE
argument_list|)
operator|.
name|node
argument_list|(
name|EDITOR
argument_list|)
decl_stmt|;
name|prefEditor
operator|.
name|putBoolean
argument_list|(
name|ModelerPreferences
operator|.
name|EDITOR_LOGFILE_ENABLED
argument_list|,
name|ep
operator|.
name|getBoolean
argument_list|(
name|EDITOR_LOGFILE_ENABLED_OLD
argument_list|)
argument_list|)
expr_stmt|;
name|prefEditor
operator|.
name|put
argument_list|(
name|ModelerPreferences
operator|.
name|EDITOR_LOGFILE
argument_list|,
name|ep
operator|.
name|getString
argument_list|(
name|EDITOR_LOGFILE_OLD
argument_list|)
argument_list|)
expr_stmt|;
name|prefEditor
operator|.
name|put
argument_list|(
name|ModelerPreferences
operator|.
name|EDITOR_LAFNAME
argument_list|,
name|ep
operator|.
name|getString
argument_list|(
name|EDITOR_LAFNAME_OLD
argument_list|)
argument_list|)
expr_stmt|;
name|prefEditor
operator|.
name|put
argument_list|(
name|ModelerPreferences
operator|.
name|EDITOR_THEMENAME
argument_list|,
name|ep
operator|.
name|getString
argument_list|(
name|EDITOR_THEMENAME_OLD
argument_list|)
argument_list|)
expr_stmt|;
name|Preferences
name|frefLastProjFiles
init|=
name|prefEditor
operator|.
name|node
argument_list|(
name|LAST_PROJ_FILES
argument_list|)
decl_stmt|;
name|Vector
name|arr
init|=
name|ep
operator|.
name|getVector
argument_list|(
name|LAST_PROJ_FILES_OLD
argument_list|)
decl_stmt|;
while|while
condition|(
name|arr
operator|.
name|size
argument_list|()
operator|>
name|ModelerPreferences
operator|.
name|LAST_PROJ_FILES_SIZE
condition|)
block|{
name|arr
operator|.
name|remove
argument_list|(
name|arr
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|frefLastProjFiles
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|arr
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|frefLastProjFiles
operator|.
name|put
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|arr
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
comment|/**      * Returns preferences directory<code>$HOME/.cayenne</code>. If such directory does      * not exist, it is created as a side effect of this method.      */
specifier|public
name|File
name|preferencesDirectory
parameter_list|()
block|{
return|return
name|CayenneUserDir
operator|.
name|getInstance
argument_list|()
operator|.
name|getDirectory
argument_list|()
return|;
block|}
specifier|public
name|Preferences
name|getRootPreference
parameter_list|()
block|{
name|upgrade
argument_list|()
expr_stmt|;
return|return
name|decoratedPreference
operator|.
name|getRootPreference
argument_list|()
return|;
block|}
specifier|public
name|Preferences
name|getCayennePreference
parameter_list|()
block|{
name|upgrade
argument_list|()
expr_stmt|;
return|return
name|decoratedPreference
operator|.
name|getCayennePreference
argument_list|()
return|;
block|}
specifier|public
name|Preferences
name|getCurrentPreference
parameter_list|()
block|{
name|upgrade
argument_list|()
expr_stmt|;
return|return
name|decoratedPreference
operator|.
name|getCayennePreference
argument_list|()
return|;
block|}
block|}
end_class

end_unit

