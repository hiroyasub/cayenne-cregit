begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|undo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|DocumentEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|DocumentListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|UndoableEditEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|UndoableEditListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|AbstractDocument
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|JTextComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|CannotRedoException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|CannotUndoException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|CompoundEdit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|UndoManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|UndoableEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|CayenneModelerFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataMapDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|EntityDisplayEvent
import|;
end_import

begin_class
specifier|public
class|class
name|JTextFieldUndoListener
implements|implements
name|UndoableEditListener
block|{
specifier|private
name|UndoManager
name|undoManager
decl_stmt|;
specifier|private
name|CompoundEdit
name|compoundEdit
decl_stmt|;
specifier|private
name|JTextComponent
name|textComponent
decl_stmt|;
specifier|private
name|UndoDocumentListener
name|undoDocumentListener
decl_stmt|;
specifier|private
name|Object
name|currentObj
decl_stmt|;
specifier|private
name|TreePath
index|[]
name|paths
decl_stmt|;
specifier|private
name|int
name|lastOffset
decl_stmt|;
specifier|private
name|int
name|lastLength
decl_stmt|;
specifier|private
name|JTextFieldUndoListener
name|self
init|=
name|this
decl_stmt|;
specifier|private
name|boolean
name|inProgress
init|=
literal|false
decl_stmt|;
specifier|private
class|class
name|UndoDocumentListener
implements|implements
name|DocumentListener
block|{
specifier|public
name|void
name|changedUpdate
parameter_list|(
name|DocumentEvent
name|e
parameter_list|)
block|{
block|}
specifier|public
name|void
name|insertUpdate
parameter_list|(
specifier|final
name|DocumentEvent
name|e
parameter_list|)
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|offset
init|=
name|e
operator|.
name|getOffset
argument_list|()
operator|+
name|e
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|offset
operator|=
name|Math
operator|.
name|min
argument_list|(
name|offset
argument_list|,
name|textComponent
operator|.
name|getDocument
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|textComponent
operator|.
name|setCaretPosition
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeUpdate
parameter_list|(
name|DocumentEvent
name|e
parameter_list|)
block|{
name|textComponent
operator|.
name|setCaretPosition
argument_list|(
name|e
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|JTextFieldUndoListener
parameter_list|(
name|JTextComponent
name|textComponent
parameter_list|)
block|{
name|this
operator|.
name|textComponent
operator|=
name|textComponent
expr_stmt|;
name|this
operator|.
name|undoManager
operator|=
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getUndoManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|undoDocumentListener
operator|=
operator|new
name|UndoDocumentListener
argument_list|()
expr_stmt|;
name|this
operator|.
name|textComponent
operator|.
name|addFocusListener
argument_list|(
operator|new
name|FocusListener
argument_list|()
block|{
specifier|public
name|void
name|focusGained
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|self
operator|.
name|currentObj
operator|==
literal|null
condition|)
block|{
name|self
operator|.
name|currentObj
operator|=
name|getProjectController
argument_list|()
operator|.
name|getCurrentObject
argument_list|()
expr_stmt|;
name|self
operator|.
name|paths
operator|=
operator|(
operator|(
name|CayenneModelerFrame
operator|)
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getFrameController
argument_list|()
operator|.
name|getView
argument_list|()
operator|)
operator|.
name|getView
argument_list|()
operator|.
name|getProjectTreeView
argument_list|()
operator|.
name|getSelectionPaths
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|focusLost
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
name|self
operator|.
name|currentObj
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|compoundEdit
operator|!=
literal|null
condition|)
block|{
name|compoundEdit
operator|.
name|end
argument_list|()
expr_stmt|;
name|compoundEdit
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|textComponent
operator|.
name|addKeyListener
argument_list|(
operator|new
name|KeyListener
argument_list|()
block|{
specifier|public
name|void
name|keyPressed
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
name|inProgress
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|keyReleased
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
block|}
specifier|public
name|void
name|keyTyped
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|undoableEditHappened
parameter_list|(
name|UndoableEditEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|inProgress
condition|)
block|{
if|if
condition|(
name|compoundEdit
operator|==
literal|null
condition|)
block|{
name|compoundEdit
operator|=
name|startCompoundEdit
argument_list|(
name|e
operator|.
name|getEdit
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AbstractDocument
operator|.
name|DefaultDocumentEvent
name|event
init|=
operator|(
name|AbstractDocument
operator|.
name|DefaultDocumentEvent
operator|)
name|e
operator|.
name|getEdit
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|DocumentEvent
operator|.
name|EventType
operator|.
name|CHANGE
argument_list|)
condition|)
block|{
name|compoundEdit
operator|.
name|addEdit
argument_list|(
name|e
operator|.
name|getEdit
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|offsetChange
init|=
name|textComponent
operator|.
name|getCaretPosition
argument_list|()
operator|-
name|lastOffset
decl_stmt|;
name|int
name|lengthChange
init|=
name|textComponent
operator|.
name|getDocument
argument_list|()
operator|.
name|getLength
argument_list|()
operator|-
name|lastLength
decl_stmt|;
if|if
condition|(
name|offsetChange
operator|==
name|lengthChange
operator|&&
name|Math
operator|.
name|abs
argument_list|(
name|offsetChange
argument_list|)
operator|==
literal|1
condition|)
block|{
name|compoundEdit
operator|.
name|addEdit
argument_list|(
name|e
operator|.
name|getEdit
argument_list|()
argument_list|)
expr_stmt|;
name|lastOffset
operator|=
name|textComponent
operator|.
name|getCaretPosition
argument_list|()
expr_stmt|;
name|lastLength
operator|=
name|textComponent
operator|.
name|getDocument
argument_list|()
operator|.
name|getLength
argument_list|()
expr_stmt|;
return|return;
block|}
else|else
block|{
name|compoundEdit
operator|.
name|end
argument_list|()
expr_stmt|;
name|compoundEdit
operator|=
name|startCompoundEdit
argument_list|(
name|e
operator|.
name|getEdit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|inProgress
operator|=
operator|!
name|inProgress
expr_stmt|;
block|}
block|}
specifier|private
name|CompoundEdit
name|startCompoundEdit
parameter_list|(
name|UndoableEdit
name|e
parameter_list|)
block|{
name|lastOffset
operator|=
name|textComponent
operator|.
name|getCaretPosition
argument_list|()
expr_stmt|;
name|lastLength
operator|=
name|textComponent
operator|.
name|getDocument
argument_list|()
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|CompoundEdit
name|compoundEdit
init|=
operator|new
name|TextCompoundEdit
argument_list|()
decl_stmt|;
name|compoundEdit
operator|.
name|addEdit
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|undoManager
operator|.
name|addEdit
argument_list|(
name|compoundEdit
argument_list|)
expr_stmt|;
return|return
name|compoundEdit
return|;
block|}
specifier|private
class|class
name|TextCompoundEdit
extends|extends
name|CompoundEdit
block|{
specifier|public
name|boolean
name|isInProgress
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRedoPresentationName
parameter_list|()
block|{
return|return
literal|"Redo Text Change"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUndoPresentationName
parameter_list|()
block|{
return|return
literal|"Undo Text Change"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRedo
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|undo
parameter_list|()
throws|throws
name|CannotUndoException
block|{
name|textComponent
operator|.
name|getDocument
argument_list|()
operator|.
name|addDocumentListener
argument_list|(
name|undoDocumentListener
argument_list|)
expr_stmt|;
if|if
condition|(
name|compoundEdit
operator|!=
literal|null
condition|)
block|{
name|compoundEdit
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
name|restoreSelections
argument_list|()
expr_stmt|;
name|super
operator|.
name|undo
argument_list|()
expr_stmt|;
name|compoundEdit
operator|=
literal|null
expr_stmt|;
name|textComponent
operator|.
name|getDocument
argument_list|()
operator|.
name|removeDocumentListener
argument_list|(
name|undoDocumentListener
argument_list|)
expr_stmt|;
name|textComponent
operator|.
name|requestFocusInWindow
argument_list|()
expr_stmt|;
name|textComponent
operator|.
name|selectAll
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|redo
parameter_list|()
throws|throws
name|CannotRedoException
block|{
name|textComponent
operator|.
name|getDocument
argument_list|()
operator|.
name|addDocumentListener
argument_list|(
name|undoDocumentListener
argument_list|)
expr_stmt|;
name|super
operator|.
name|redo
argument_list|()
expr_stmt|;
name|textComponent
operator|.
name|getDocument
argument_list|()
operator|.
name|removeDocumentListener
argument_list|(
name|undoDocumentListener
argument_list|)
expr_stmt|;
name|textComponent
operator|.
name|requestFocusInWindow
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|restoreSelections
parameter_list|()
block|{
operator|(
operator|(
name|CayenneModelerFrame
operator|)
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getFrameController
argument_list|()
operator|.
name|getView
argument_list|()
operator|)
operator|.
name|getView
argument_list|()
operator|.
name|getProjectTreeView
argument_list|()
operator|.
name|setSelectionPaths
argument_list|(
name|self
operator|.
name|paths
argument_list|)
expr_stmt|;
if|if
condition|(
name|self
operator|.
name|currentObj
operator|instanceof
name|DataMap
condition|)
block|{
name|getProjectController
argument_list|()
operator|.
name|fireDataMapDisplayEvent
argument_list|(
operator|new
name|DataMapDisplayEvent
argument_list|(
name|this
argument_list|,
operator|(
name|DataMap
operator|)
name|self
operator|.
name|currentObj
argument_list|,
name|getProjectController
argument_list|()
operator|.
name|getCurrentDataDomain
argument_list|()
argument_list|,
name|getProjectController
argument_list|()
operator|.
name|getCurrentDataNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|self
operator|.
name|currentObj
operator|instanceof
name|ObjEntity
condition|)
block|{
name|getProjectController
argument_list|()
operator|.
name|fireObjEntityDisplayEvent
argument_list|(
operator|new
name|EntityDisplayEvent
argument_list|(
name|this
argument_list|,
operator|(
name|ObjEntity
operator|)
name|self
operator|.
name|currentObj
argument_list|,
name|getProjectController
argument_list|()
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
name|getProjectController
argument_list|()
operator|.
name|getCurrentDataNode
argument_list|()
argument_list|,
name|getProjectController
argument_list|()
operator|.
name|getCurrentDataDomain
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|self
operator|.
name|currentObj
operator|instanceof
name|DbEntity
condition|)
block|{
name|getProjectController
argument_list|()
operator|.
name|fireDbEntityDisplayEvent
argument_list|(
operator|new
name|EntityDisplayEvent
argument_list|(
name|this
argument_list|,
operator|(
name|DbEntity
operator|)
name|self
operator|.
name|currentObj
argument_list|,
name|getProjectController
argument_list|()
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
name|getProjectController
argument_list|()
operator|.
name|getCurrentDataNode
argument_list|()
argument_list|,
name|getProjectController
argument_list|()
operator|.
name|getCurrentDataDomain
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|ProjectController
name|getProjectController
parameter_list|()
block|{
return|return
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getFrameController
argument_list|()
operator|.
name|getProjectController
argument_list|()
return|;
block|}
block|}
end_class

end_unit

