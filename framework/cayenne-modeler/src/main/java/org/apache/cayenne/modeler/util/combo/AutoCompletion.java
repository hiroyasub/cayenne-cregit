begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|combo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|JTextComponent
import|;
end_import

begin_comment
comment|/**  * AutoCompletion class handles user input and suggests matching variants (see CAY-911)  *  * @author Andrey Razumovsky  */
end_comment

begin_class
specifier|public
class|class
name|AutoCompletion
implements|implements
name|FocusListener
implements|,
name|KeyListener
implements|,
name|Runnable
block|{
comment|/**      * Property to mark combobox as 'auto-completing'      */
specifier|public
specifier|static
specifier|final
name|String
name|AUTOCOMPLETION_PROPERTY
init|=
literal|"JComboBox.autoCompletion"
decl_stmt|;
comment|/**      * A list with matching items      */
specifier|private
specifier|final
name|SuggestionList
name|suggestionList
decl_stmt|;
comment|/**      * Combo with auto-completion      */
specifier|private
specifier|final
name|JComboBox
name|comboBox
decl_stmt|;
specifier|private
specifier|final
name|JTextComponent
name|textEditor
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|allowsUserValues
decl_stmt|;
specifier|protected
name|AutoCompletion
parameter_list|(
specifier|final
name|JComboBox
name|comboBox
parameter_list|,
name|boolean
name|strict
parameter_list|,
name|boolean
name|allowsUserValues
parameter_list|)
block|{
name|this
operator|.
name|comboBox
operator|=
name|comboBox
expr_stmt|;
name|textEditor
operator|=
operator|(
operator|(
name|JTextComponent
operator|)
name|comboBox
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|)
expr_stmt|;
name|this
operator|.
name|allowsUserValues
operator|=
name|allowsUserValues
expr_stmt|;
name|suggestionList
operator|=
operator|new
name|SuggestionList
argument_list|(
name|comboBox
argument_list|,
name|strict
argument_list|)
expr_stmt|;
comment|/**          * Marking combobox as auto-completing          */
name|comboBox
operator|.
name|putClientProperty
argument_list|(
name|AUTOCOMPLETION_PROPERTY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Enables auto-completion for specified combobox      *      * @param comboBox Combo to be featured      * @param strict Whether strict matching (check 'startWith' or 'contains') should be used      * @param allowsUserValues Whether non-present items are allowed       */
specifier|public
specifier|static
name|void
name|enable
parameter_list|(
name|JComboBox
name|comboBox
parameter_list|,
name|boolean
name|strict
parameter_list|,
name|boolean
name|allowsUserValues
parameter_list|)
block|{
name|comboBox
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|setEditor
argument_list|(
operator|new
name|CustomTypeComboBoxEditor
argument_list|(
name|comboBox
argument_list|,
name|allowsUserValues
argument_list|)
argument_list|)
expr_stmt|;
name|AutoCompletion
name|ac
init|=
operator|new
name|AutoCompletion
argument_list|(
name|comboBox
argument_list|,
name|strict
argument_list|,
name|allowsUserValues
argument_list|)
decl_stmt|;
name|comboBox
operator|.
name|addFocusListener
argument_list|(
name|ac
argument_list|)
expr_stmt|;
name|ac
operator|.
name|textEditor
operator|.
name|addKeyListener
argument_list|(
name|ac
argument_list|)
expr_stmt|;
comment|//original keys would not work properly
name|SwingUtilities
operator|.
name|replaceUIActionMap
argument_list|(
name|comboBox
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Enables auto-completion for specified combobox      */
specifier|public
specifier|static
name|void
name|enable
parameter_list|(
name|JComboBox
name|comboBox
parameter_list|)
block|{
name|enable
argument_list|(
name|comboBox
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|focusGained
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
block|}
specifier|public
name|void
name|focusLost
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
name|suggestionList
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|keyPressed
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
name|handleKeyPressed
argument_list|(
name|comboBox
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|keyReleased
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
block|}
specifier|public
name|void
name|keyTyped
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|text
init|=
name|textEditor
operator|.
name|getText
argument_list|()
decl_stmt|;
comment|//need to hide first because Swing incorrectly updates popups (getSize() returns
comment|//dimension not the same as seen on the screen)
name|suggestionList
operator|.
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|comboBox
operator|.
name|isShowing
argument_list|()
condition|)
block|{
name|suggestionList
operator|.
name|filter
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestionList
operator|.
name|getItemCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|suggestionList
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Calculates next selection row, according to a pressed key and selects it.      * This might affect either suggestion list or original popup      */
specifier|private
name|void
name|handleKeyPressed
parameter_list|(
name|JComboBox
name|comboBox
parameter_list|,
name|KeyEvent
name|e
parameter_list|)
block|{
name|boolean
name|suggest
init|=
name|suggestionList
operator|.
name|isVisible
argument_list|()
decl_stmt|;
name|int
name|sel
decl_stmt|,
name|next
decl_stmt|,
name|max
decl_stmt|;
if|if
condition|(
name|suggest
condition|)
block|{
name|sel
operator|=
name|suggestionList
operator|.
name|getSelectedIndex
argument_list|()
expr_stmt|;
name|max
operator|=
name|suggestionList
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|sel
operator|=
name|comboBox
operator|.
name|getSelectedIndex
argument_list|()
expr_stmt|;
name|max
operator|=
name|comboBox
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|e
operator|.
name|getKeyCode
argument_list|()
condition|)
block|{
case|case
name|KeyEvent
operator|.
name|VK_UP
case|:
case|case
name|KeyEvent
operator|.
name|VK_NUMPAD8
case|:
name|next
operator|=
name|sel
operator|-
literal|1
expr_stmt|;
break|break;
case|case
name|KeyEvent
operator|.
name|VK_DOWN
case|:
case|case
name|KeyEvent
operator|.
name|VK_NUMPAD2
case|:
name|next
operator|=
name|sel
operator|+
literal|1
expr_stmt|;
break|break;
case|case
name|KeyEvent
operator|.
name|VK_PAGE_UP
case|:
name|next
operator|=
name|sel
operator|-
name|comboBox
operator|.
name|getMaximumRowCount
argument_list|()
expr_stmt|;
break|break;
case|case
name|KeyEvent
operator|.
name|VK_PAGE_DOWN
case|:
name|next
operator|=
name|sel
operator|+
name|comboBox
operator|.
name|getMaximumRowCount
argument_list|()
expr_stmt|;
break|break;
case|case
name|KeyEvent
operator|.
name|VK_HOME
case|:
name|next
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|KeyEvent
operator|.
name|VK_END
case|:
name|next
operator|=
name|max
expr_stmt|;
break|break;
case|case
name|KeyEvent
operator|.
name|VK_ENTER
case|:
if|if
condition|(
name|suggest
condition|)
block|{
name|Object
name|value
init|=
name|suggestionList
operator|.
name|getSelectedValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|allowsUserValues
operator|&&
name|value
operator|==
literal|null
operator|&&
name|suggestionList
operator|.
name|getItemCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|value
operator|=
name|suggestionList
operator|.
name|getItemAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//reset the item (value == null) only if user values are not supported
if|if
condition|(
name|value
operator|!=
literal|null
operator|||
operator|!
name|allowsUserValues
condition|)
block|{
name|comboBox
operator|.
name|setSelectedItem
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|suggestionList
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
return|return;
case|case
name|KeyEvent
operator|.
name|VK_ESCAPE
case|:
if|if
condition|(
name|suggest
condition|)
block|{
name|suggestionList
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
return|return;
case|case
name|KeyEvent
operator|.
name|VK_CONTROL
case|:
case|case
name|KeyEvent
operator|.
name|VK_ALT
case|:
case|case
name|KeyEvent
operator|.
name|VK_SHIFT
case|:
return|return;
default|default:
comment|//invoke in end of AWT thread so that information in textEditor would update
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/**          * Handle navigation keys          */
name|e
operator|.
name|consume
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|suggest
operator|&&
operator|!
name|comboBox
operator|.
name|isPopupVisible
argument_list|()
condition|)
block|{
name|comboBox
operator|.
name|setPopupVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|comboBox
operator|.
name|getItemCount
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|next
operator|<
literal|0
condition|)
block|{
name|next
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|>
name|max
condition|)
block|{
name|next
operator|=
name|max
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|!=
name|sel
condition|)
block|{
if|if
condition|(
name|suggest
condition|)
block|{
name|suggestionList
operator|.
name|setSelectedIndex
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|comboBox
operator|.
name|setPopupVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|setSelectedIndex
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
name|textEditor
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

