begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JDialog
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|EditorView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|AttributeDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|RelationshipDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_comment
comment|/**  * An instance of this class is responsible for displaying search results  * and navigating to the selected entity's representation.  */
end_comment

begin_class
specifier|public
class|class
name|FindDialog
extends|extends
name|CayenneController
block|{
specifier|private
name|FindDialogView
name|view
decl_stmt|;
specifier|private
name|List
name|paths
decl_stmt|;
specifier|public
name|FindDialog
parameter_list|(
name|CayenneController
name|parent
parameter_list|,
name|java
operator|.
name|util
operator|.
name|List
name|paths
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|paths
operator|=
name|paths
expr_stmt|;
name|Map
name|objEntityNames
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|,
name|dbEntityNames
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|,
name|attrNames
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|,
name|relatNames
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|paths
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
index|[]
name|path
init|=
operator|(
name|Object
index|[]
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
operator|instanceof
name|ObjEntity
condition|)
block|{
name|objEntityNames
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
name|index
operator|++
argument_list|)
argument_list|,
operator|(
operator|(
name|ObjEntity
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
operator|instanceof
name|DbEntity
condition|)
block|{
name|dbEntityNames
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
name|index
operator|++
argument_list|)
argument_list|,
operator|(
operator|(
name|DbEntity
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
operator|instanceof
name|Attribute
condition|)
block|{
name|attrNames
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
name|index
operator|++
argument_list|)
argument_list|,
operator|(
operator|(
name|Attribute
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
operator|instanceof
name|Relationship
condition|)
block|{
name|relatNames
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
name|index
operator|++
argument_list|)
argument_list|,
operator|(
operator|(
name|Relationship
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|view
operator|=
operator|new
name|FindDialogView
argument_list|(
name|objEntityNames
argument_list|,
name|dbEntityNames
argument_list|,
name|attrNames
argument_list|,
name|relatNames
argument_list|)
expr_stmt|;
name|initBindings
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|startupAction
parameter_list|()
block|{
name|view
operator|.
name|pack
argument_list|()
expr_stmt|;
name|centerView
argument_list|()
expr_stmt|;
name|makeCloseableOnEscape
argument_list|()
expr_stmt|;
name|view
operator|.
name|setDefaultCloseOperation
argument_list|(
name|JDialog
operator|.
name|DISPOSE_ON_CLOSE
argument_list|)
expr_stmt|;
name|view
operator|.
name|setModal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|view
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Component
name|getView
parameter_list|()
block|{
return|return
name|view
return|;
block|}
specifier|protected
name|void
name|initBindings
parameter_list|()
block|{
name|view
operator|.
name|getOkButton
argument_list|()
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|view
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|view
operator|.
name|getEntityButtons
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|JButton
name|b
init|=
operator|(
name|JButton
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|b
operator|.
name|addActionListener
argument_list|(
operator|new
name|JumpToResultActionListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|JumpToResultActionListener
implements|implements
name|ActionListener
block|{
specifier|private
name|EditorView
name|editor
init|=
operator|(
operator|(
name|CayenneModelerFrame
operator|)
name|application
operator|.
name|getFrameController
argument_list|()
operator|.
name|getView
argument_list|()
operator|)
operator|.
name|getView
argument_list|()
decl_stmt|;
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|Object
index|[]
name|path
init|=
operator|(
name|Object
index|[]
operator|)
name|paths
operator|.
name|get
argument_list|(
operator|(
operator|(
name|FindDialogView
operator|.
name|EntityButtonModel
operator|)
operator|(
operator|(
name|JButton
operator|)
name|e
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|getIndex
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
operator|instanceof
name|ObjEntity
operator|||
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
operator|instanceof
name|DbEntity
condition|)
comment|/**                  * Make selection in a project tree, open correspondent entity tab.                  */
name|editor
operator|.
name|getProjectTreeView
argument_list|()
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|addSelectionPath
argument_list|(
name|buildTreePath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
operator|instanceof
name|Attribute
operator|||
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
operator|instanceof
name|Relationship
condition|)
block|{
comment|/**                  * Make selection in a project tree, open correspondent attributes tab.                  */
name|Object
index|[]
name|o
init|=
operator|new
name|Object
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
name|o
index|[
name|i
index|]
operator|=
name|path
index|[
name|i
index|]
expr_stmt|;
name|editor
operator|.
name|getProjectTreeView
argument_list|()
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|addSelectionPath
argument_list|(
name|buildTreePath
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
operator|instanceof
name|DbAttribute
condition|)
block|{
name|AttributeDisplayEvent
name|event
init|=
operator|new
name|AttributeDisplayEvent
argument_list|(
name|editor
operator|.
name|getDbDetailView
argument_list|()
argument_list|,
operator|(
name|Attribute
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
argument_list|,
operator|(
name|Entity
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|2
index|]
argument_list|,
operator|(
name|DataMap
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|3
index|]
argument_list|,
operator|(
name|DataDomain
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|4
index|]
argument_list|)
decl_stmt|;
operator|(
operator|(
name|CayenneModelerController
operator|)
name|parent
operator|)
operator|.
name|getProjectController
argument_list|()
operator|.
name|fireDbAttributeDisplayEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
operator|instanceof
name|ObjAttribute
condition|)
block|{
name|AttributeDisplayEvent
name|event
init|=
operator|new
name|AttributeDisplayEvent
argument_list|(
name|editor
operator|.
name|getObjDetailView
argument_list|()
argument_list|,
operator|(
name|Attribute
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
argument_list|,
operator|(
name|Entity
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|2
index|]
argument_list|,
operator|(
name|DataMap
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|3
index|]
argument_list|,
operator|(
name|DataDomain
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|4
index|]
argument_list|)
decl_stmt|;
operator|(
operator|(
name|CayenneModelerController
operator|)
name|parent
operator|)
operator|.
name|getProjectController
argument_list|()
operator|.
name|fireObjAttributeDisplayEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
operator|instanceof
name|DbRelationship
condition|)
block|{
name|RelationshipDisplayEvent
name|event
init|=
operator|new
name|RelationshipDisplayEvent
argument_list|(
name|editor
operator|.
name|getDbDetailView
argument_list|()
argument_list|,
operator|(
name|Relationship
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
argument_list|,
operator|(
name|Entity
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|2
index|]
argument_list|,
operator|(
name|DataMap
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|3
index|]
argument_list|,
operator|(
name|DataDomain
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|4
index|]
argument_list|)
decl_stmt|;
operator|(
operator|(
name|CayenneModelerController
operator|)
name|parent
operator|)
operator|.
name|getProjectController
argument_list|()
operator|.
name|fireDbRelationshipDisplayEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
operator|instanceof
name|ObjRelationship
condition|)
block|{
name|RelationshipDisplayEvent
name|event
init|=
operator|new
name|RelationshipDisplayEvent
argument_list|(
name|editor
operator|.
name|getObjDetailView
argument_list|()
argument_list|,
operator|(
name|Relationship
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
argument_list|,
operator|(
name|Entity
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|2
index|]
argument_list|,
operator|(
name|DataMap
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|3
index|]
argument_list|,
operator|(
name|DataDomain
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|4
index|]
argument_list|)
decl_stmt|;
operator|(
operator|(
name|CayenneModelerController
operator|)
name|parent
operator|)
operator|.
name|getProjectController
argument_list|()
operator|.
name|fireObjRelationshipDisplayEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Builds a tree path for a given path. Urgent for later selection.          * @param path          * @return tree path          */
specifier|private
name|TreePath
name|buildTreePath
parameter_list|(
name|Object
index|[]
name|path
parameter_list|)
block|{
name|Object
index|[]
name|mutableTreeNodes
init|=
operator|new
name|Object
index|[
name|path
operator|.
name|length
index|]
decl_stmt|;
name|mutableTreeNodes
index|[
literal|0
index|]
operator|=
operator|(
operator|(
name|ProjectTreeModel
operator|)
name|editor
operator|.
name|getProjectTreeView
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
name|Object
index|[]
name|helper
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|path
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|helper
operator|=
operator|new
name|Object
index|[
name|i
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
control|)
block|{
name|helper
index|[
name|j
index|]
operator|=
name|path
index|[
operator|++
name|j
index|]
expr_stmt|;
block|}
name|mutableTreeNodes
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|ProjectTreeModel
operator|)
name|editor
operator|.
name|getProjectTreeView
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|getNodeForObjectPath
argument_list|(
name|helper
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TreePath
argument_list|(
name|mutableTreeNodes
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

