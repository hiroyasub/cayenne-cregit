begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JDialog
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TreeSelectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TreeSelectionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|CayenneModelerFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectTreeModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectTreeView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneController
import|;
end_import

begin_comment
comment|/**  * An instance of this class is responsible for displaying search results  * and navigating to the selected entity's representation.   */
end_comment

begin_class
specifier|public
class|class
name|FindDialog
extends|extends
name|CayenneController
block|{
specifier|private
name|FindDialogView
name|view
decl_stmt|;
specifier|private
name|java
operator|.
name|util
operator|.
name|List
name|paths
decl_stmt|;
specifier|private
name|java
operator|.
name|util
operator|.
name|List
name|names
decl_stmt|;
specifier|public
name|FindDialog
parameter_list|(
name|CayenneController
name|parent
parameter_list|,
name|java
operator|.
name|util
operator|.
name|List
name|paths
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|paths
operator|=
name|paths
expr_stmt|;
name|names
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|Iterator
name|it
init|=
name|paths
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
index|[]
name|path
init|=
operator|(
name|Object
index|[]
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ObjEntity
name|entity
init|=
operator|(
name|ObjEntity
operator|)
name|path
index|[
name|path
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|view
operator|=
operator|new
name|FindDialogView
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|initBindings
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|startupAction
parameter_list|()
block|{
name|view
operator|.
name|pack
argument_list|()
expr_stmt|;
name|centerView
argument_list|()
expr_stmt|;
name|makeCloseableOnEscape
argument_list|()
expr_stmt|;
name|view
operator|.
name|setDefaultCloseOperation
argument_list|(
name|JDialog
operator|.
name|DISPOSE_ON_CLOSE
argument_list|)
expr_stmt|;
name|view
operator|.
name|setModal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|view
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Component
name|getView
parameter_list|()
block|{
return|return
name|view
return|;
block|}
specifier|protected
name|void
name|initBindings
parameter_list|()
block|{
name|view
operator|.
name|getOkButton
argument_list|()
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|view
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|view
operator|.
name|getEntityButtons
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|JButton
name|b
init|=
operator|(
name|JButton
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|b
operator|.
name|addActionListener
argument_list|(
operator|new
name|JumpToResultActionListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|JumpToResultActionListener
implements|implements
name|ActionListener
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|Object
index|[]
name|path
init|=
operator|(
name|Object
index|[]
operator|)
name|paths
operator|.
name|get
argument_list|(
name|names
operator|.
name|indexOf
argument_list|(
operator|(
operator|(
name|JButton
operator|)
name|e
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|getActionCommand
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ProjectTreeView
name|treeView
init|=
operator|(
operator|(
name|CayenneModelerFrame
operator|)
name|application
operator|.
name|getFrameController
argument_list|()
operator|.
name|getView
argument_list|()
operator|)
operator|.
name|getView
argument_list|()
operator|.
name|getProjectTreeView
argument_list|()
decl_stmt|;
name|ProjectTreeModel
name|treeModel
init|=
operator|(
name|ProjectTreeModel
operator|)
name|treeView
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|Object
index|[]
name|mutableTreeNodes
init|=
operator|new
name|Object
index|[
name|path
operator|.
name|length
index|]
decl_stmt|;
name|mutableTreeNodes
index|[
literal|0
index|]
operator|=
name|treeModel
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
name|Object
index|[]
name|helper
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|path
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|helper
operator|=
operator|new
name|Object
index|[
name|i
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
control|)
block|{
name|helper
index|[
name|j
index|]
operator|=
name|path
index|[
operator|++
name|j
index|]
expr_stmt|;
block|}
name|mutableTreeNodes
index|[
name|i
index|]
operator|=
name|treeModel
operator|.
name|getNodeForObjectPath
argument_list|(
name|helper
argument_list|)
expr_stmt|;
block|}
name|TreePath
name|tp
init|=
operator|new
name|TreePath
argument_list|(
name|mutableTreeNodes
argument_list|)
decl_stmt|;
comment|// TODO: selection in a project tree view itself: there is no selection currently, so event doesn't track the previous selection
name|TreeSelectionListener
name|listener
init|=
name|treeView
operator|.
name|getTreeSelectionListener
argument_list|()
decl_stmt|;
name|listener
operator|.
name|valueChanged
argument_list|(
operator|new
name|TreeSelectionEvent
argument_list|(
name|treeView
argument_list|,
operator|new
name|TreePath
index|[]
block|{
name|tp
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|}
argument_list|,
literal|null
argument_list|,
name|tp
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

