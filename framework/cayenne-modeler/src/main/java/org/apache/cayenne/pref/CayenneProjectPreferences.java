begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|pref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|BackingStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|Preferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|DBConnectionInfo
import|;
end_import

begin_class
specifier|public
class|class
name|CayenneProjectPreferences
block|{
comment|// for preferences not dependences from project
specifier|private
name|Map
argument_list|<
name|Class
argument_list|,
name|Object
argument_list|>
name|cayennePreferences
decl_stmt|;
comment|// for preferences dependences from project
specifier|private
name|HashMap
argument_list|<
name|Preferences
argument_list|,
name|Object
argument_list|>
name|projectCayennePreferences
decl_stmt|;
specifier|public
name|CayenneProjectPreferences
parameter_list|()
block|{
name|cayennePreferences
operator|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|cayennePreferences
operator|.
name|put
argument_list|(
name|DBConnectionInfo
operator|.
name|class
argument_list|,
operator|new
name|ChildrenMapPreference
argument_list|(
operator|new
name|DBConnectionInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|projectCayennePreferences
operator|=
operator|new
name|HashMap
argument_list|<
name|Preferences
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|initPreference
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initPreference
parameter_list|()
block|{
name|Iterator
name|it
init|=
name|cayennePreferences
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|pairs
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
operator|(
operator|(
name|ChildrenMapPreference
operator|)
name|cayennePreferences
operator|.
name|get
argument_list|(
name|pairs
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
operator|.
name|initChildrenPreferences
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|ChildrenMapPreference
name|getDetailObject
parameter_list|(
name|Class
name|className
parameter_list|)
block|{
return|return
operator|(
name|ChildrenMapPreference
operator|)
name|cayennePreferences
operator|.
name|get
argument_list|(
name|className
argument_list|)
return|;
block|}
specifier|public
name|CayennePreference
name|getProjectDetailObject
parameter_list|(
name|Class
name|className
parameter_list|,
name|Preferences
name|preference
parameter_list|)
block|{
if|if
condition|(
name|projectCayennePreferences
operator|.
name|get
argument_list|(
name|preference
argument_list|)
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|Class
name|cls
init|=
name|className
decl_stmt|;
name|Class
name|partypes
index|[]
init|=
operator|new
name|Class
index|[
literal|1
index|]
decl_stmt|;
name|partypes
index|[
literal|0
index|]
operator|=
name|Preferences
operator|.
name|class
expr_stmt|;
name|Constructor
name|ct
init|=
name|cls
operator|.
name|getConstructor
argument_list|(
name|partypes
argument_list|)
decl_stmt|;
name|Object
name|arglist
index|[]
init|=
operator|new
name|Object
index|[
literal|1
index|]
decl_stmt|;
name|arglist
index|[
literal|0
index|]
operator|=
name|preference
expr_stmt|;
name|Object
name|retobj
init|=
name|ct
operator|.
name|newInstance
argument_list|(
name|arglist
argument_list|)
decl_stmt|;
name|projectCayennePreferences
operator|.
name|put
argument_list|(
name|preference
argument_list|,
name|retobj
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error initing preference"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|CayennePreference
operator|)
name|projectCayennePreferences
operator|.
name|get
argument_list|(
name|preference
argument_list|)
return|;
block|}
comment|// delete property
specifier|public
name|void
name|removeProjectDetailObject
parameter_list|(
name|Preferences
name|preference
parameter_list|)
block|{
try|try
block|{
name|preference
operator|.
name|removeNode
argument_list|()
expr_stmt|;
name|projectCayennePreferences
operator|.
name|remove
argument_list|(
name|preference
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|e
parameter_list|)
block|{
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"error delete preferences "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

