begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|AutoAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|BeanValidationFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|ValidationFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|ValidationResult
import|;
end_import

begin_comment
comment|/**  * A DbAdapter wrapper used in CayenneModeler.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|ModelerDbAdapter
extends|extends
name|AutoAdapter
block|{
specifier|protected
name|String
name|adapterClassName
decl_stmt|;
specifier|public
name|ModelerDbAdapter
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ModelerDbAdapter
parameter_list|(
name|String
name|adapterClassName
parameter_list|,
name|DataSource
name|dataSource
parameter_list|)
block|{
name|super
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|this
operator|.
name|adapterClassName
operator|=
name|adapterClassName
expr_stmt|;
block|}
comment|/**      * Validates DbAdapter name, throwing an exception in case it is invalid.      */
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|ValidationException
block|{
if|if
condition|(
name|adapterClassName
operator|!=
literal|null
condition|)
block|{
name|ValidationFailure
name|failure
init|=
name|BeanValidationFailure
operator|.
name|validateJavaClassName
argument_list|(
name|this
argument_list|,
literal|"adapterClassName"
argument_list|,
name|adapterClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|failure
operator|!=
literal|null
condition|)
block|{
name|ValidationResult
name|result
init|=
operator|new
name|ValidationResult
argument_list|()
decl_stmt|;
name|result
operator|.
name|addFailure
argument_list|(
name|failure
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ValidationException
argument_list|(
name|failure
operator|.
name|getDescription
argument_list|()
argument_list|,
name|result
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|String
name|getAdapterClassName
parameter_list|()
block|{
return|return
name|adapterClassName
return|;
block|}
specifier|protected
name|DbAdapterFactory
name|createDefaultFactory
parameter_list|()
block|{
return|return
operator|new
name|AdapterFactory
argument_list|()
return|;
block|}
class|class
name|AdapterFactory
implements|implements
name|DbAdapterFactory
block|{
specifier|public
name|DbAdapter
name|createAdapter
parameter_list|(
name|DatabaseMetaData
name|md
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|adapterClassName
operator|==
literal|null
condition|)
block|{
return|return
name|AutoAdapter
operator|.
name|getDefaultFactory
argument_list|()
operator|.
name|createAdapter
argument_list|(
name|md
argument_list|)
return|;
block|}
name|ClassLoader
name|loader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
return|return
operator|(
operator|(
name|Class
argument_list|<
name|DbAdapter
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|adapterClassName
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
operator|)
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't load DbAdapter class: "
operator|+
name|adapterClassName
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

