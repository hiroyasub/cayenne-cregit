begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DerivedDbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DerivedDbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|AttributeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|MapEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|AttributeDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|NamedObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|ProjectPath
import|;
end_import

begin_comment
comment|/**  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|CreateAttributeAction
extends|extends
name|CayenneAction
block|{
specifier|public
specifier|static
name|String
name|getActionName
parameter_list|()
block|{
return|return
literal|"Create Attribute"
return|;
block|}
comment|/**      * Constructor for CreateAttributeAction.      * @param name      */
specifier|public
name|CreateAttributeAction
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|super
argument_list|(
name|getActionName
argument_list|()
argument_list|,
name|application
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getIconName
parameter_list|()
block|{
return|return
literal|"icon-attribute.gif"
return|;
block|}
comment|/**      * Creates ObjAttribute, DbAttribute depending on context.      */
specifier|public
name|void
name|performAction
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|getProjectController
argument_list|()
operator|.
name|getCurrentObjEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|createObjAttribute
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|getProjectController
argument_list|()
operator|.
name|getCurrentDbEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|createDbAttribute
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|createObjAttribute
parameter_list|()
block|{
name|ProjectController
name|mediator
init|=
name|getProjectController
argument_list|()
decl_stmt|;
name|ObjEntity
name|objEntity
init|=
name|mediator
operator|.
name|getCurrentObjEntity
argument_list|()
decl_stmt|;
name|ObjAttribute
name|attr
init|=
operator|(
name|ObjAttribute
operator|)
name|NamedObjectFactory
operator|.
name|createObject
argument_list|(
name|ObjAttribute
operator|.
name|class
argument_list|,
name|objEntity
argument_list|)
decl_stmt|;
name|objEntity
operator|.
name|addAttribute
argument_list|(
name|attr
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireObjAttributeEvent
argument_list|(
operator|new
name|AttributeEvent
argument_list|(
name|this
argument_list|,
name|attr
argument_list|,
name|objEntity
argument_list|,
name|MapEvent
operator|.
name|ADD
argument_list|)
argument_list|)
expr_stmt|;
name|AttributeDisplayEvent
name|ade
init|=
operator|new
name|AttributeDisplayEvent
argument_list|(
name|this
argument_list|,
name|attr
argument_list|,
name|objEntity
argument_list|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
name|mediator
operator|.
name|getCurrentDataDomain
argument_list|()
argument_list|)
decl_stmt|;
name|mediator
operator|.
name|fireObjAttributeDisplayEvent
argument_list|(
name|ade
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|createDbAttribute
parameter_list|()
block|{
name|Class
name|attrClass
init|=
literal|null
decl_stmt|;
name|DbEntity
name|dbEntity
init|=
name|getProjectController
argument_list|()
operator|.
name|getCurrentDbEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbEntity
operator|instanceof
name|DerivedDbEntity
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|DerivedDbEntity
operator|)
name|dbEntity
operator|)
operator|.
name|getParentEntity
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|attrClass
operator|=
name|DerivedDbAttribute
operator|.
name|class
expr_stmt|;
block|}
else|else
block|{
name|attrClass
operator|=
name|DbAttribute
operator|.
name|class
expr_stmt|;
block|}
name|DbAttribute
name|attr
init|=
operator|(
name|DbAttribute
operator|)
name|NamedObjectFactory
operator|.
name|createObject
argument_list|(
name|attrClass
argument_list|,
name|dbEntity
argument_list|)
decl_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|attr
argument_list|)
expr_stmt|;
name|ProjectController
name|mediator
init|=
name|getProjectController
argument_list|()
decl_stmt|;
name|mediator
operator|.
name|fireDbAttributeEvent
argument_list|(
operator|new
name|AttributeEvent
argument_list|(
name|this
argument_list|,
name|attr
argument_list|,
name|dbEntity
argument_list|,
name|MapEvent
operator|.
name|ADD
argument_list|)
argument_list|)
expr_stmt|;
name|AttributeDisplayEvent
name|ade
init|=
operator|new
name|AttributeDisplayEvent
argument_list|(
name|this
argument_list|,
name|attr
argument_list|,
name|dbEntity
argument_list|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
name|mediator
operator|.
name|getCurrentDataDomain
argument_list|()
argument_list|)
decl_stmt|;
name|mediator
operator|.
name|fireDbAttributeDisplayEvent
argument_list|(
name|ade
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns<code>true</code> if path contains an Entity object.      */
specifier|public
name|boolean
name|enableForPath
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|path
operator|.
name|firstInstanceOf
argument_list|(
name|Entity
operator|.
name|class
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
end_class

end_unit

