begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|pref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|BackingStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|Preferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|CayennePreferenceForProject
extends|extends
name|CayennePreference
block|{
specifier|private
specifier|static
name|List
argument_list|<
name|Preferences
argument_list|>
name|newNode
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|Preferences
argument_list|>
name|oldNode
decl_stmt|;
specifier|public
name|CayennePreferenceForProject
parameter_list|(
name|Preferences
name|pref
parameter_list|)
block|{
name|setCurrentPreference
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|copyPreferences
parameter_list|(
name|String
name|newName
parameter_list|)
block|{
name|setCurrentPreference
argument_list|(
name|copyPreferences
argument_list|(
name|newName
argument_list|,
name|getCurrentPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Preferences
name|copyPreferences
parameter_list|(
name|String
name|newName
parameter_list|,
name|Preferences
name|oldPref
parameter_list|)
block|{
name|Preferences
name|parent
init|=
name|oldPref
operator|.
name|parent
argument_list|()
decl_stmt|;
name|Preferences
name|newPref
init|=
name|parent
operator|.
name|node
argument_list|(
name|newName
argument_list|)
decl_stmt|;
return|return
name|copyPreferences
argument_list|(
name|newPref
argument_list|,
name|oldPref
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Preferences
argument_list|>
name|childrenCopy
parameter_list|(
name|Preferences
name|pref
parameter_list|,
name|String
name|oldPath
parameter_list|,
name|String
name|newPath
parameter_list|)
block|{
try|try
block|{
name|String
index|[]
name|children
init|=
name|pref
operator|.
name|childrenNames
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Preferences
argument_list|>
name|prefChild
init|=
operator|new
name|ArrayList
argument_list|<
name|Preferences
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|children
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|child
init|=
name|children
index|[
name|j
index|]
decl_stmt|;
comment|// get old preference
name|Preferences
name|childNode
init|=
name|pref
operator|.
name|node
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldNode
operator|.
name|contains
argument_list|(
name|childNode
argument_list|)
condition|)
block|{
comment|// path to node
name|String
name|path
init|=
name|childNode
operator|.
name|absolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|oldPath
argument_list|,
name|newPath
argument_list|)
decl_stmt|;
comment|// copy all preferences in this node
name|String
index|[]
name|names
init|=
name|childNode
operator|.
name|keys
argument_list|()
decl_stmt|;
name|Preferences
name|newPref
init|=
name|Preferences
operator|.
name|userRoot
argument_list|()
operator|.
name|node
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|newPref
operator|.
name|put
argument_list|(
name|names
index|[
name|i
index|]
argument_list|,
name|childNode
operator|.
name|get
argument_list|(
name|names
index|[
name|i
index|]
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|prefChild
operator|.
name|add
argument_list|(
name|childNode
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|prefChild
return|;
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|e
parameter_list|)
block|{
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|void
name|removeOldPreferences
parameter_list|()
block|{
if|if
condition|(
name|oldNode
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|Preferences
argument_list|>
name|it
init|=
name|oldNode
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Preferences
name|pref
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|pref
operator|.
name|removeNode
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|e
parameter_list|)
block|{
block|}
block|}
name|clearPreferences
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|removeNewPreferences
parameter_list|()
block|{
if|if
condition|(
name|newNode
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|Preferences
argument_list|>
name|it
init|=
name|newNode
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Preferences
name|pref
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|pref
operator|.
name|removeNode
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|e
parameter_list|)
block|{
block|}
block|}
name|clearPreferences
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|clearPreferences
parameter_list|()
block|{
name|oldNode
operator|.
name|clear
argument_list|()
expr_stmt|;
name|newNode
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|Preferences
name|copyPreferences
parameter_list|(
name|Preferences
name|newPref
parameter_list|,
name|Preferences
name|oldPref
parameter_list|,
name|boolean
name|addToPreferenceList
parameter_list|)
block|{
try|try
block|{
comment|// copy all preferences in this node
name|String
index|[]
name|names
init|=
name|oldPref
operator|.
name|keys
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|newPref
operator|.
name|put
argument_list|(
name|names
index|[
name|i
index|]
argument_list|,
name|oldPref
operator|.
name|get
argument_list|(
name|names
index|[
name|i
index|]
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|oldPath
init|=
name|oldPref
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
name|String
name|newPath
init|=
name|newPref
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
comment|// copy children nodes and its preferences
name|ArrayList
argument_list|<
name|Preferences
argument_list|>
name|childrenOldPref
init|=
name|childrenCopy
argument_list|(
name|oldPref
argument_list|,
name|oldPath
argument_list|,
name|newPath
argument_list|)
decl_stmt|;
while|while
condition|(
name|childrenOldPref
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ArrayList
argument_list|<
name|Preferences
argument_list|>
name|childrenPrefTemp
init|=
operator|new
name|ArrayList
argument_list|<
name|Preferences
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Preferences
argument_list|>
name|it
init|=
name|childrenOldPref
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Preferences
name|child
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Preferences
argument_list|>
name|childArray
init|=
name|childrenCopy
argument_list|(
name|child
argument_list|,
name|oldPath
argument_list|,
name|newPath
argument_list|)
decl_stmt|;
name|childrenPrefTemp
operator|.
name|addAll
argument_list|(
name|childArray
argument_list|)
expr_stmt|;
block|}
name|childrenOldPref
operator|.
name|clear
argument_list|()
expr_stmt|;
name|childrenOldPref
operator|.
name|addAll
argument_list|(
name|childrenPrefTemp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newNode
operator|==
literal|null
condition|)
block|{
name|newNode
operator|=
operator|new
name|ArrayList
argument_list|<
name|Preferences
argument_list|>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|oldNode
operator|==
literal|null
condition|)
block|{
name|oldNode
operator|=
operator|new
name|ArrayList
argument_list|<
name|Preferences
argument_list|>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|addToPreferenceList
condition|)
block|{
name|newNode
operator|.
name|add
argument_list|(
name|newPref
argument_list|)
expr_stmt|;
name|oldNode
operator|.
name|add
argument_list|(
name|oldPref
argument_list|)
expr_stmt|;
block|}
return|return
name|newPref
return|;
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|e
parameter_list|)
block|{
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error remane preferences"
argument_list|)
expr_stmt|;
block|}
return|return
name|oldPref
return|;
block|}
block|}
end_class

end_unit

