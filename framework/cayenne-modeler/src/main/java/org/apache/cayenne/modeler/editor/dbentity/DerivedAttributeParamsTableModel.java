begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|dbentity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DerivedDbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DerivedDbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_comment
comment|/**  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|DerivedAttributeParamsTableModel
extends|extends
name|DbAttributeTableModel
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DB_ATTRIBUTE_NAME
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DB_ATTRIBUTE_TYPE
init|=
literal|1
decl_stmt|;
specifier|protected
name|DerivedDbAttribute
name|derived
decl_stmt|;
comment|/** 	 * Constructor for DerivedAttributeParamsTableModel. 	 */
specifier|public
name|DerivedAttributeParamsTableModel
parameter_list|(
name|DerivedDbAttribute
name|derived
parameter_list|,
name|ProjectController
name|mediator
parameter_list|,
name|Object
name|eventSource
parameter_list|)
block|{
name|super
argument_list|(
operator|(
operator|(
name|DerivedDbEntity
operator|)
name|derived
operator|.
name|getEntity
argument_list|()
operator|)
operator|.
name|getParentEntity
argument_list|()
argument_list|,
name|mediator
argument_list|,
name|eventSource
argument_list|,
operator|new
name|ArrayList
argument_list|(
name|derived
operator|.
name|getParams
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|derived
operator|=
name|derived
expr_stmt|;
block|}
comment|/**      * Returns<code>null</code> to disable ordering.      */
specifier|public
name|String
name|getOrderingKey
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|DbEntity
name|getParentEntity
parameter_list|()
block|{
return|return
operator|(
operator|(
name|DerivedDbEntity
operator|)
name|derived
operator|.
name|getEntity
argument_list|()
operator|)
operator|.
name|getParentEntity
argument_list|()
return|;
block|}
comment|/** 	 * @see javax.swing.table.TableModel#getColumnCount() 	 */
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|col
parameter_list|)
block|{
switch|switch
condition|(
name|col
condition|)
block|{
case|case
name|DB_ATTRIBUTE_NAME
case|:
return|return
literal|"Name"
return|;
case|case
name|DB_ATTRIBUTE_TYPE
case|:
return|return
literal|"Type"
return|;
default|default:
return|return
literal|""
return|;
block|}
block|}
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|DbAttribute
name|attr
init|=
name|getAttribute
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|DB_ATTRIBUTE_NAME
case|:
return|return
name|getAttributeName
argument_list|(
name|attr
argument_list|)
return|;
case|case
name|DB_ATTRIBUTE_TYPE
case|:
return|return
name|getAttributeType
argument_list|(
name|attr
argument_list|)
return|;
default|default :
return|return
literal|""
return|;
block|}
block|}
specifier|public
name|void
name|setValueAt
parameter_list|(
name|Object
name|newVal
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
if|if
condition|(
name|col
operator|==
name|nameColumnInd
argument_list|()
condition|)
block|{
name|replaceParameter
argument_list|(
name|row
argument_list|,
operator|(
name|String
operator|)
name|newVal
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Replaces parameter at index with the new attribute. */
specifier|protected
name|void
name|replaceParameter
parameter_list|(
name|int
name|ind
parameter_list|,
name|String
name|attrName
parameter_list|)
block|{
if|if
condition|(
name|attrName
operator|!=
literal|null
condition|)
block|{
name|objectList
operator|.
name|set
argument_list|(
name|ind
argument_list|,
name|getParentEntity
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|attrName
argument_list|)
argument_list|)
expr_stmt|;
name|fireTableDataChanged
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
return|return
name|col
operator|==
name|DB_ATTRIBUTE_NAME
return|;
block|}
block|}
end_class

end_unit

