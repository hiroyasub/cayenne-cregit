begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|objentity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|WindowConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TreeSelectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TreeSelectionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Relationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|ObjAttributeTableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|Comparators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|EntityTreeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|EntityTreeModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|BindingBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|CayenneMapEntry
import|;
end_import

begin_class
specifier|public
class|class
name|ObjAttributeInfoDialog
extends|extends
name|CayenneController
implements|implements
name|TreeSelectionListener
block|{
specifier|private
name|ObjAttributeTableModel
name|model
decl_stmt|;
specifier|private
name|int
name|row
decl_stmt|;
specifier|protected
name|ObjAttributeInfoDialogView
name|view
decl_stmt|;
specifier|protected
name|ObjAttribute
name|attribute
decl_stmt|;
specifier|protected
name|ObjAttribute
name|attributeSaved
decl_stmt|;
specifier|protected
name|List
name|attributesList
decl_stmt|;
specifier|protected
name|List
name|attributesSavedList
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|DbEntity
argument_list|>
name|relTargets
decl_stmt|;
specifier|protected
name|ObjEntity
name|objectTarget
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|ObjEntity
argument_list|>
name|objectTargets
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|mapKeys
decl_stmt|;
specifier|protected
name|ProjectController
name|mediator
decl_stmt|;
specifier|public
name|ObjAttributeInfoDialog
parameter_list|(
name|ProjectController
name|mediator
parameter_list|,
name|int
name|row
parameter_list|,
name|ObjAttributeTableModel
name|model
parameter_list|)
block|{
name|super
argument_list|(
name|mediator
argument_list|)
expr_stmt|;
name|this
operator|.
name|view
operator|=
operator|new
name|ObjAttributeInfoDialogView
argument_list|()
expr_stmt|;
name|this
operator|.
name|mediator
operator|=
name|mediator
expr_stmt|;
name|this
operator|.
name|model
operator|=
name|model
expr_stmt|;
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|initController
argument_list|(
name|model
operator|.
name|getAttribute
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Component
name|getView
parameter_list|()
block|{
return|return
name|view
return|;
block|}
comment|/**      * Starts options dialog.      */
specifier|public
name|void
name|startupAction
parameter_list|()
block|{
name|view
operator|.
name|pack
argument_list|()
expr_stmt|;
name|view
operator|.
name|setDefaultCloseOperation
argument_list|(
name|WindowConstants
operator|.
name|DISPOSE_ON_CLOSE
argument_list|)
expr_stmt|;
name|view
operator|.
name|setModal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|makeCloseableOnEscape
argument_list|()
expr_stmt|;
name|centerView
argument_list|()
expr_stmt|;
name|view
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initController
parameter_list|(
name|ObjAttribute
name|attr
parameter_list|)
block|{
name|this
operator|.
name|attribute
operator|=
name|attr
expr_stmt|;
name|this
operator|.
name|attributeSaved
operator|=
operator|new
name|ObjAttribute
argument_list|()
expr_stmt|;
name|attributeSaved
operator|.
name|setDbAttributePath
argument_list|(
name|attribute
operator|.
name|getDbAttributePath
argument_list|()
argument_list|)
expr_stmt|;
name|attributeSaved
operator|.
name|setName
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attributeSaved
operator|.
name|setEntity
argument_list|(
name|attribute
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
name|attributeSaved
operator|.
name|setParent
argument_list|(
name|attribute
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|attributeSaved
operator|.
name|setType
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|attributeSaved
operator|.
name|setUsedForLocking
argument_list|(
name|attribute
operator|.
name|isUsedForLocking
argument_list|()
argument_list|)
expr_stmt|;
name|relTargets
operator|=
operator|new
name|ArrayList
argument_list|<
name|DbEntity
argument_list|>
argument_list|(
name|attribute
operator|.
name|getEntity
argument_list|()
operator|.
name|getDataMap
argument_list|()
operator|.
name|getDbEntities
argument_list|()
argument_list|)
expr_stmt|;
comment|/**          * Register auto-selection of the target          */
name|view
operator|.
name|getPathBrowser
argument_list|()
operator|.
name|addTreeSelectionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|objectTarget
operator|=
operator|(
name|ObjEntity
operator|)
name|attr
operator|.
name|getEntity
argument_list|()
expr_stmt|;
if|if
condition|(
name|objectTarget
operator|!=
literal|null
condition|)
block|{
name|updateTargetCombo
argument_list|(
name|objectTarget
operator|.
name|getDbEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|view
operator|.
name|getAttributeName
argument_list|()
operator|.
name|setText
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|attribute
operator|.
name|getDbAttributePath
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|attribute
operator|.
name|getDbAttributePath
argument_list|()
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|String
name|path
init|=
name|attribute
operator|.
name|getDbAttributePath
argument_list|()
decl_stmt|;
name|view
operator|.
name|getCurrentPathLabel
argument_list|()
operator|.
name|setText
argument_list|(
name|path
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|" -> "
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|view
operator|.
name|getCurrentPathLabel
argument_list|()
operator|.
name|setText
argument_list|(
name|attribute
operator|.
name|getDbAttributePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|view
operator|.
name|getCurrentPathLabel
argument_list|()
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|view
operator|.
name|getSourceEntityLabel
argument_list|()
operator|.
name|setText
argument_list|(
name|attribute
operator|.
name|getEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|BindingBuilder
name|builder
init|=
operator|new
name|BindingBuilder
argument_list|(
name|getApplication
argument_list|()
operator|.
name|getBindingFactory
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|builder
operator|.
name|bindToAction
argument_list|(
name|view
operator|.
name|getCancelButton
argument_list|()
argument_list|,
literal|"closeAction()"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|bindToAction
argument_list|(
name|view
operator|.
name|getSelectPathButton
argument_list|()
argument_list|,
literal|"setPath()"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|bindToAction
argument_list|(
name|view
operator|.
name|getSaveButton
argument_list|()
argument_list|,
literal|"saveMapping()"
argument_list|)
expr_stmt|;
comment|/*          * set filter for ObjAttributePathBrowser          */
if|if
condition|(
name|view
operator|.
name|getPathBrowser
argument_list|()
operator|.
name|getModel
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Entity
name|firstEntity
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|attribute
operator|.
name|getDbAttribute
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|CayenneMapEntry
argument_list|>
name|it
init|=
name|attribute
operator|.
name|getDbPathIterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|attribute
operator|.
name|getParent
argument_list|()
operator|instanceof
name|ObjEntity
condition|)
block|{
name|DbEntity
name|dbEnt
init|=
operator|(
operator|(
name|ObjEntity
operator|)
name|attribute
operator|.
name|getParent
argument_list|()
operator|)
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
name|attrib
init|=
name|dbEnt
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|DbRelationship
argument_list|>
name|rel
init|=
name|dbEnt
operator|.
name|getRelationships
argument_list|()
decl_stmt|;
if|if
condition|(
name|attrib
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|DbAttribute
argument_list|>
name|iter
init|=
name|attrib
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|firstEntity
operator|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getEntity
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|rel
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|DbRelationship
argument_list|>
name|iter
init|=
name|rel
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|firstEntity
operator|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getSourceEntity
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|firstEntity
operator|=
name|getFirstEntity
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|firstEntity
operator|!=
literal|null
condition|)
block|{
name|EntityTreeModel
name|treeModel
init|=
operator|new
name|EntityTreeModel
argument_list|(
name|firstEntity
argument_list|)
decl_stmt|;
name|treeModel
operator|.
name|setFilter
argument_list|(
operator|new
name|EntityTreeFilter
argument_list|()
block|{
specifier|public
name|boolean
name|attributeMatch
parameter_list|(
name|Object
name|node
parameter_list|,
name|Attribute
name|attr
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|Attribute
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|relationshipMatch
parameter_list|(
name|Object
name|node
parameter_list|,
name|Relationship
name|rel
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|Relationship
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|/**                          * We do not allow A->B->A chains, where relationships are to-one                          */
name|DbRelationship
name|prev
init|=
operator|(
name|DbRelationship
operator|)
name|node
decl_stmt|;
return|return
operator|!
operator|(
operator|!
name|rel
operator|.
name|isToMany
argument_list|()
operator|&&
name|prev
operator|.
name|getReverseRelationship
argument_list|()
operator|==
name|rel
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|view
operator|.
name|getPathBrowser
argument_list|()
operator|.
name|setModel
argument_list|(
name|treeModel
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|attribute
operator|.
name|getDbAttribute
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setSelectionPath
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|closeAction
parameter_list|()
block|{
name|view
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|setPath
parameter_list|()
block|{
name|StringBuilder
name|attributePath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|pathStr
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|TreePath
name|path
init|=
name|view
operator|.
name|getPathBrowser
argument_list|()
operator|.
name|getSelectionPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|getLastPathComponent
argument_list|()
operator|instanceof
name|DbAttribute
condition|)
block|{
name|Object
index|[]
name|pathComponents
init|=
name|path
operator|.
name|getPath
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pathComponents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|attrOrRel
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|pathComponents
index|[
name|i
index|]
operator|instanceof
name|DbAttribute
condition|)
block|{
name|pathStr
operator|.
name|append
argument_list|(
operator|(
operator|(
name|DbAttribute
operator|)
name|pathComponents
index|[
name|i
index|]
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attributePath
operator|.
name|append
argument_list|(
operator|(
operator|(
name|DbAttribute
operator|)
name|pathComponents
index|[
name|i
index|]
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|pathComponents
index|[
name|i
index|]
operator|instanceof
name|DbRelationship
condition|)
block|{
name|pathStr
operator|.
name|append
argument_list|(
operator|(
operator|(
name|DbRelationship
operator|)
name|pathComponents
index|[
name|i
index|]
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attributePath
operator|.
name|append
argument_list|(
operator|(
operator|(
name|DbRelationship
operator|)
name|pathComponents
index|[
name|i
index|]
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|attrOrRel
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|!=
name|pathComponents
operator|.
name|length
operator|-
literal|1
operator|&&
name|attrOrRel
condition|)
block|{
name|pathStr
operator|.
name|append
argument_list|(
literal|" -> "
argument_list|)
expr_stmt|;
name|attributePath
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|view
operator|.
name|getCurrentPathLabel
argument_list|()
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|view
operator|.
name|getCurrentPathLabel
argument_list|()
operator|.
name|setText
argument_list|(
name|pathStr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|attribute
operator|.
name|getDbAttributePath
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|attribute
operator|.
name|getDbAttributePath
argument_list|()
operator|.
name|equals
argument_list|(
name|attributePath
operator|.
name|toString
argument_list|()
argument_list|)
operator|||
operator|!
name|attribute
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|view
operator|.
name|getAttributeName
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
block|{
name|attributeSaved
operator|.
name|setDbAttributePath
argument_list|(
name|attributePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|attributeSaved
operator|.
name|setName
argument_list|(
name|view
operator|.
name|getAttributeName
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|attributePath
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|||
operator|!
name|attribute
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|view
operator|.
name|getAttributeName
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
block|{
name|attributeSaved
operator|.
name|setDbAttributePath
argument_list|(
name|attributePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|attributeSaved
operator|.
name|setName
argument_list|(
name|view
operator|.
name|getAttributeName
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|saveMapping
parameter_list|()
block|{
if|if
condition|(
name|setPath
argument_list|()
condition|)
block|{
if|if
condition|(
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
operator|(
name|Component
operator|)
name|getView
argument_list|()
argument_list|,
literal|"You have changed Db Attribute path. Do you want it to be saved?"
argument_list|,
literal|"Save ObjAttribute"
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
name|model
operator|.
name|setUpdatedValueAt
argument_list|(
name|attributeSaved
operator|.
name|getDbAttributePath
argument_list|()
argument_list|,
name|row
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|model
operator|.
name|setUpdatedValueAt
argument_list|(
name|attributeSaved
operator|.
name|getName
argument_list|()
argument_list|,
name|row
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|closeAction
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|valueChanged
parameter_list|(
name|TreeSelectionEvent
name|e
parameter_list|)
block|{
name|TreePath
name|selectedPath
init|=
name|e
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// first item in the path is Entity, so we must have
comment|// at least two elements to constitute a valid ordering path
if|if
condition|(
name|selectedPath
operator|==
literal|null
operator|||
name|selectedPath
operator|.
name|getPathCount
argument_list|()
operator|<
literal|2
condition|)
block|{
return|return;
block|}
name|DbEntity
name|target
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|selectedPath
operator|.
name|getLastPathComponent
argument_list|()
operator|instanceof
name|Relationship
condition|)
block|{
name|Relationship
name|rel
init|=
operator|(
name|Relationship
operator|)
name|selectedPath
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|target
operator|=
operator|(
name|DbEntity
operator|)
name|rel
operator|.
name|getTargetEntity
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|selectedPath
operator|.
name|getLastPathComponent
argument_list|()
operator|instanceof
name|Attribute
condition|)
block|{
name|Attribute
name|attr
init|=
operator|(
name|Attribute
operator|)
name|selectedPath
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|target
operator|=
operator|(
name|DbEntity
operator|)
name|attr
operator|.
name|getEntity
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
comment|/**              * Initialize root with one of mapped ObjEntities.              */
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|objEntities
init|=
name|target
operator|.
name|getDataMap
argument_list|()
operator|.
name|getMappedEntities
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DbRelationship
argument_list|>
name|relPath
init|=
operator|new
name|Vector
argument_list|<
name|DbRelationship
argument_list|>
argument_list|(
name|selectedPath
operator|.
name|getPathCount
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|selectedPath
operator|.
name|getPathCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|selectedPath
operator|.
name|getLastPathComponent
argument_list|()
operator|instanceof
name|Relationship
condition|)
block|{
name|relPath
operator|.
name|add
argument_list|(
operator|(
name|DbRelationship
operator|)
name|selectedPath
operator|.
name|getPathComponent
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|setObjectTarget
argument_list|(
name|objEntities
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|objEntities
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|objectTarget
operator|!=
literal|null
condition|)
block|{
name|updateTargetCombo
argument_list|(
name|objectTarget
operator|.
name|getDbEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateTargetCombo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setObjectTarget
parameter_list|(
name|ObjEntity
name|objectTarget
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|objectTarget
operator|!=
name|objectTarget
condition|)
block|{
name|this
operator|.
name|objectTarget
operator|=
name|objectTarget
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|updateTargetCombo
parameter_list|(
name|DbEntity
name|dbTarget
parameter_list|)
block|{
if|if
condition|(
name|dbTarget
operator|!=
literal|null
condition|)
block|{
comment|// copy those that have DbEntities mapped to dbTarget, and then sort
name|view
operator|.
name|getTargCombo
argument_list|()
operator|.
name|removeAllItems
argument_list|()
expr_stmt|;
name|this
operator|.
name|objectTargets
operator|=
operator|new
name|ArrayList
argument_list|<
name|ObjEntity
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|dbTarget
operator|!=
literal|null
condition|)
block|{
name|objectTargets
operator|.
name|addAll
argument_list|(
name|dbTarget
operator|.
name|getDataMap
argument_list|()
operator|.
name|getMappedEntities
argument_list|(
name|dbTarget
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|objectTargets
argument_list|,
name|Comparators
operator|.
name|getNamedObjectComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ObjEntity
name|obj
range|:
name|objectTargets
control|)
block|{
name|view
operator|.
name|getTargCombo
argument_list|()
operator|.
name|addItem
argument_list|(
name|obj
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|view
operator|.
name|getTargCombo
argument_list|()
operator|.
name|addItem
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Entity
name|getFirstEntity
parameter_list|()
block|{
name|Iterator
argument_list|<
name|CayenneMapEntry
argument_list|>
name|it
init|=
name|attribute
operator|.
name|getDbPathIterator
argument_list|()
decl_stmt|;
name|Entity
name|firstEnt
init|=
name|attribute
operator|.
name|getDbAttribute
argument_list|()
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|boolean
name|setEnt
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|ob
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ob
operator|instanceof
name|DbRelationship
condition|)
block|{
if|if
condition|(
operator|!
name|setEnt
condition|)
block|{
name|firstEnt
operator|=
operator|(
operator|(
name|DbRelationship
operator|)
name|ob
operator|)
operator|.
name|getSourceEntity
argument_list|()
expr_stmt|;
name|setEnt
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|ob
operator|instanceof
name|DbAttribute
condition|)
block|{
if|if
condition|(
operator|!
name|setEnt
condition|)
block|{
name|firstEnt
operator|=
operator|(
operator|(
name|DbAttribute
operator|)
name|ob
operator|)
operator|.
name|getEntity
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|firstEnt
return|;
block|}
comment|/**      * Selects path in browser      */
specifier|public
name|void
name|setSelectionPath
parameter_list|()
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|boolean
name|isAttributeLast
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|CayenneMapEntry
argument_list|>
name|it
init|=
name|attribute
operator|.
name|getDbPathIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|obj
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|DbAttribute
operator|&&
operator|!
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|isAttributeLast
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isAttributeLast
condition|)
block|{
name|Object
index|[]
name|path
init|=
operator|new
name|Object
index|[
name|list
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
decl_stmt|;
name|path
index|[
literal|0
index|]
operator|=
name|getFirstEntity
argument_list|()
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|list
operator|.
name|toArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|path
argument_list|,
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|.
name|getPathBrowser
argument_list|()
operator|.
name|setSelectionPath
argument_list|(
operator|new
name|TreePath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|.
name|getSaveButton
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

