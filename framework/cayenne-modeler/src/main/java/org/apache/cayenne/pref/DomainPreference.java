begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|pref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataObjectUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistenceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|DomainPreference
extends|extends
name|_DomainPreference
block|{
specifier|protected
name|DomainProperties
name|properties
decl_stmt|;
specifier|protected
name|Properties
name|getProperties
parameter_list|()
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|DomainProperties
argument_list|()
expr_stmt|;
name|String
name|values
init|=
name|getKeyValuePairs
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|properties
operator|.
name|load
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|values
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|PreferenceException
argument_list|(
literal|"Error loading properties."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|properties
return|;
block|}
specifier|protected
name|void
name|encodeProperties
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|properties
operator|==
literal|null
condition|)
block|{
name|setKeyValuePairs
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|properties
operator|.
name|store
argument_list|(
name|out
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|PreferenceException
argument_list|(
literal|"Error storing properties."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|setKeyValuePairs
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns a generic preference for associated with a given DomainPreference.      */
specifier|protected
name|PreferenceDetail
name|getPreference
parameter_list|()
block|{
name|PreferenceDetail
name|preference
init|=
operator|new
name|PreferenceDetail
argument_list|()
decl_stmt|;
name|preference
operator|.
name|setDomainPreference
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|preference
return|;
block|}
comment|/**      * Locates and returns a detail preference of a given class.      */
specifier|protected
name|PreferenceDetail
name|getPreference
parameter_list|(
name|Class
name|javaClass
parameter_list|,
name|boolean
name|create
parameter_list|)
block|{
comment|// detail object PK must match...
name|int
name|pk
init|=
name|DataObjectUtils
operator|.
name|intPKForObject
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|PreferenceDetail
name|preference
init|=
operator|(
name|PreferenceDetail
operator|)
name|DataObjectUtils
operator|.
name|objectForPK
argument_list|(
name|getObjectContext
argument_list|()
argument_list|,
name|javaClass
argument_list|,
name|pk
argument_list|)
decl_stmt|;
if|if
condition|(
name|preference
operator|!=
literal|null
condition|)
block|{
name|preference
operator|.
name|setDomainPreference
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preference
operator|!=
literal|null
operator|||
operator|!
name|create
condition|)
block|{
return|return
name|preference
return|;
block|}
name|preference
operator|=
operator|(
name|PreferenceDetail
operator|)
name|getObjectContext
argument_list|()
operator|.
name|newObject
argument_list|(
name|javaClass
argument_list|)
expr_stmt|;
name|preference
operator|.
name|setDomainPreference
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|getObjectContext
argument_list|()
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
return|return
name|preference
return|;
block|}
comment|/**      * Overrides super implementation to handle non-persistent properties on object state      * changes.      */
specifier|public
name|void
name|setPersistenceState
parameter_list|(
name|int
name|state
parameter_list|)
block|{
comment|// if invalidated
if|if
condition|(
name|state
operator|==
name|PersistenceState
operator|.
name|HOLLOW
condition|)
block|{
name|properties
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|setPersistenceState
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
class|class
name|DomainProperties
extends|extends
name|Properties
block|{
specifier|public
name|Object
name|setProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|Object
name|old
init|=
name|super
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|old
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|modified
argument_list|()
expr_stmt|;
block|}
return|return
name|old
return|;
block|}
name|void
name|modified
parameter_list|()
block|{
comment|// more efficient implementation should only call encode on commit using
comment|// DataContext events... still there is a bug that prevents DataObject from
comment|// changing its state during "willCommit", so for now do this...
name|encodeProperties
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

