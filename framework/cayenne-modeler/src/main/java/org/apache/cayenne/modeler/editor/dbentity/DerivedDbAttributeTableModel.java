begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|dbentity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DerivedDbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|AttributeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_comment
comment|/**  * Table model for derived DbAttributes.  *   * @author Andrus Adamchik  * @deprecated since 3.0M2 (scheduled for removal in 3.0M3)  */
end_comment

begin_class
specifier|public
class|class
name|DerivedDbAttributeTableModel
extends|extends
name|DbAttributeTableModel
block|{
comment|// Column indices
specifier|private
specifier|static
specifier|final
name|int
name|DB_ATTRIBUTE_NAME
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DB_ATTRIBUTE_SPEC
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DB_ATTRIBUTE_TYPE
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DB_ATTRIBUTE_GROUPBY
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DB_ATTRIBUTE_PRIMARY_KEY
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DB_ATTRIBUTE_MANDATORY
init|=
literal|5
decl_stmt|;
comment|/** 	 * Constructor for DerivedDbAttributeTableModel. 	 * @param entity 	 * @param mediator 	 * @param eventSource 	 */
specifier|public
name|DerivedDbAttributeTableModel
parameter_list|(
name|DbEntity
name|entity
parameter_list|,
name|ProjectController
name|mediator
parameter_list|,
name|Object
name|eventSource
parameter_list|)
block|{
name|super
argument_list|(
name|entity
argument_list|,
name|mediator
argument_list|,
name|eventSource
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see javax.swing.table.TableModel#getColumnClass(int) 	 */
specifier|public
name|Class
name|getColumnClass
parameter_list|(
name|int
name|col
parameter_list|)
block|{
switch|switch
condition|(
name|col
condition|)
block|{
case|case
name|DB_ATTRIBUTE_PRIMARY_KEY
case|:
case|case
name|DB_ATTRIBUTE_MANDATORY
case|:
case|case
name|DB_ATTRIBUTE_GROUPBY
case|:
return|return
name|Boolean
operator|.
name|class
return|;
default|default :
return|return
name|String
operator|.
name|class
return|;
block|}
block|}
specifier|public
name|int
name|mandatoryColumnInd
parameter_list|()
block|{
return|return
name|DB_ATTRIBUTE_MANDATORY
return|;
block|}
specifier|public
name|int
name|nameColumnInd
parameter_list|()
block|{
return|return
name|DB_ATTRIBUTE_NAME
return|;
block|}
specifier|public
name|int
name|typeColumnInd
parameter_list|()
block|{
return|return
name|DB_ATTRIBUTE_TYPE
return|;
block|}
comment|/** 	 * @see javax.swing.table.TableModel#getColumnCount() 	 */
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
literal|6
return|;
block|}
comment|/** 	 * @see javax.swing.table.TableModel#getColumnName(int) 	 */
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|col
parameter_list|)
block|{
switch|switch
condition|(
name|col
condition|)
block|{
case|case
name|DB_ATTRIBUTE_NAME
case|:
return|return
literal|"Name"
return|;
case|case
name|DB_ATTRIBUTE_SPEC
case|:
return|return
literal|"Spec"
return|;
case|case
name|DB_ATTRIBUTE_TYPE
case|:
return|return
literal|"Type"
return|;
case|case
name|DB_ATTRIBUTE_GROUPBY
case|:
return|return
literal|"Group By"
return|;
case|case
name|DB_ATTRIBUTE_PRIMARY_KEY
case|:
return|return
literal|"PK"
return|;
case|case
name|DB_ATTRIBUTE_MANDATORY
case|:
return|return
literal|"Mandatory"
return|;
default|default:
return|return
literal|""
return|;
block|}
block|}
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|DerivedDbAttribute
name|attr
init|=
operator|(
name|DerivedDbAttribute
operator|)
name|getAttribute
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|DB_ATTRIBUTE_NAME
case|:
return|return
name|getAttributeName
argument_list|(
name|attr
argument_list|)
return|;
case|case
name|DB_ATTRIBUTE_SPEC
case|:
return|return
name|getSpec
argument_list|(
name|attr
argument_list|)
return|;
case|case
name|DB_ATTRIBUTE_TYPE
case|:
return|return
name|getAttributeType
argument_list|(
name|attr
argument_list|)
return|;
case|case
name|DB_ATTRIBUTE_GROUPBY
case|:
return|return
name|isGroupBy
argument_list|(
name|attr
argument_list|)
return|;
case|case
name|DB_ATTRIBUTE_PRIMARY_KEY
case|:
return|return
name|isPrimaryKey
argument_list|(
name|attr
argument_list|)
return|;
case|case
name|DB_ATTRIBUTE_MANDATORY
case|:
return|return
name|isMandatory
argument_list|(
name|attr
argument_list|)
return|;
default|default :
return|return
literal|""
return|;
block|}
block|}
specifier|public
name|void
name|setUpdatedValueAt
parameter_list|(
name|Object
name|newVal
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
name|DerivedDbAttribute
name|attr
init|=
operator|(
name|DerivedDbAttribute
operator|)
name|getAttribute
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|AttributeEvent
name|e
init|=
operator|new
name|AttributeEvent
argument_list|(
name|eventSource
argument_list|,
name|attr
argument_list|,
name|entity
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|col
condition|)
block|{
case|case
name|DB_ATTRIBUTE_NAME
case|:
name|e
operator|.
name|setOldName
argument_list|(
name|attr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setAttributeName
argument_list|(
operator|(
name|String
operator|)
name|newVal
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|fireTableCellUpdated
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
expr_stmt|;
break|break;
case|case
name|DB_ATTRIBUTE_SPEC
case|:
name|setSpec
argument_list|(
operator|(
name|String
operator|)
name|newVal
argument_list|,
name|attr
argument_list|)
expr_stmt|;
break|break;
case|case
name|DB_ATTRIBUTE_TYPE
case|:
name|setAttributeType
argument_list|(
operator|(
name|String
operator|)
name|newVal
argument_list|,
name|attr
argument_list|)
expr_stmt|;
break|break;
case|case
name|DB_ATTRIBUTE_GROUPBY
case|:
name|setGroupBy
argument_list|(
operator|(
name|Boolean
operator|)
name|newVal
argument_list|,
name|attr
argument_list|)
expr_stmt|;
break|break;
case|case
name|DB_ATTRIBUTE_PRIMARY_KEY
case|:
if|if
condition|(
operator|!
name|setPrimaryKey
argument_list|(
operator|(
name|Boolean
operator|)
name|newVal
argument_list|,
name|attr
argument_list|,
name|row
argument_list|)
condition|)
block|{
return|return;
block|}
break|break;
case|case
name|DB_ATTRIBUTE_MANDATORY
case|:
name|setMandatory
argument_list|(
operator|(
name|Boolean
operator|)
name|newVal
argument_list|,
name|attr
argument_list|)
expr_stmt|;
break|break;
block|}
name|mediator
operator|.
name|fireDbAttributeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getSpec
parameter_list|(
name|DerivedDbAttribute
name|attr
parameter_list|)
block|{
return|return
name|attr
operator|.
name|getExpressionSpec
argument_list|()
return|;
block|}
specifier|public
name|void
name|setSpec
parameter_list|(
name|String
name|newVal
parameter_list|,
name|DerivedDbAttribute
name|attr
parameter_list|)
block|{
name|attr
operator|.
name|setExpressionSpec
argument_list|(
name|newVal
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Boolean
name|isGroupBy
parameter_list|(
name|DerivedDbAttribute
name|attr
parameter_list|)
block|{
return|return
name|attr
operator|.
name|isGroupBy
argument_list|()
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
specifier|public
name|void
name|setGroupBy
parameter_list|(
name|Boolean
name|newVal
parameter_list|,
name|DerivedDbAttribute
name|attr
parameter_list|)
block|{
name|attr
operator|.
name|setGroupBy
argument_list|(
name|newVal
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.cayenne.modeler.util.CayenneTableModel#getElementsClass() 	 */
specifier|public
name|Class
name|getElementsClass
parameter_list|()
block|{
return|return
name|DerivedDbAttribute
operator|.
name|class
return|;
block|}
block|}
end_class

end_unit

