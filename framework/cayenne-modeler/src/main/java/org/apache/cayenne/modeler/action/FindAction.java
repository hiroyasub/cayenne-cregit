begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Embeddable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EmbeddableAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|FindDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_class
specifier|public
class|class
name|FindAction
extends|extends
name|CayenneAction
block|{
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|Object
argument_list|>
name|paths
decl_stmt|;
specifier|public
specifier|static
name|String
name|getActionName
parameter_list|()
block|{
return|return
literal|"Find"
return|;
block|}
specifier|public
name|FindAction
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|super
argument_list|(
name|getActionName
argument_list|()
argument_list|,
name|application
argument_list|)
expr_stmt|;
block|}
comment|/**      * All entities that contain a pattern substring (case-indifferent) in the name are produced.      * @param e      */
specifier|public
name|void
name|performAction
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|JTextField
name|source
init|=
operator|(
name|JTextField
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|paths
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|source
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|source
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|DataMap
argument_list|>
name|it
init|=
operator|(
operator|(
name|DataChannelDescriptor
operator|)
name|getProjectController
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
operator|)
operator|.
name|getDataMaps
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DataMap
name|dm
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Query
argument_list|>
name|querIterator
init|=
name|dm
operator|.
name|getQueries
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|querIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Query
name|q
init|=
name|querIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|matchFound
argument_list|(
name|q
operator|.
name|getName
argument_list|()
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|Embeddable
argument_list|>
name|embIterator
init|=
name|dm
operator|.
name|getEmbeddables
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|embIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Embeddable
name|emb
init|=
name|embIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|matchFound
argument_list|(
name|emb
operator|.
name|getClassName
argument_list|()
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|emb
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|EmbeddableAttribute
argument_list|>
name|attrIterator
init|=
name|emb
operator|.
name|getAttributes
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|attrIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|EmbeddableAttribute
name|attr
init|=
name|attrIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|matchFound
argument_list|(
name|attr
operator|.
name|getName
argument_list|()
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Iterator
argument_list|<
name|DbEntity
argument_list|>
name|dbEntIterator
init|=
name|dm
operator|.
name|getDbEntities
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|dbEntIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbEntity
name|ent
init|=
name|dbEntIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|matchFound
argument_list|(
name|ent
operator|.
name|getName
argument_list|()
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|ent
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|DbAttribute
argument_list|>
name|attrIterator
init|=
name|ent
operator|.
name|getAttributes
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|attrIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbAttribute
name|attr
init|=
name|attrIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|matchFound
argument_list|(
name|attr
operator|.
name|getName
argument_list|()
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|DbRelationship
argument_list|>
name|relIterator
init|=
name|ent
operator|.
name|getRelationships
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|relIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbRelationship
name|rel
init|=
name|relIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|matchFound
argument_list|(
name|rel
operator|.
name|getName
argument_list|()
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Iterator
argument_list|<
name|ObjEntity
argument_list|>
name|entIterator
init|=
name|dm
operator|.
name|getObjEntities
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|entIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ObjEntity
name|ent
init|=
name|entIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|matchFound
argument_list|(
name|ent
operator|.
name|getName
argument_list|()
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|ent
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|ObjAttribute
argument_list|>
name|attrIterator
init|=
name|ent
operator|.
name|getAttributes
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|attrIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ObjAttribute
name|attr
init|=
name|attrIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|matchFound
argument_list|(
name|attr
operator|.
name|getName
argument_list|()
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|ObjRelationship
argument_list|>
name|relIterator
init|=
name|ent
operator|.
name|getRelationships
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|relIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ObjRelationship
name|rel
init|=
name|relIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|matchFound
argument_list|(
name|rel
operator|.
name|getName
argument_list|()
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|paths
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|source
operator|.
name|setBackground
argument_list|(
name|Color
operator|.
name|pink
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|paths
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
operator|new
name|FindDialog
argument_list|(
name|getApplication
argument_list|()
operator|.
name|getFrameController
argument_list|()
argument_list|,
name|paths
argument_list|)
operator|.
name|startupAction
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Iterator
name|it
init|=
name|paths
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|path
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|FindDialog
operator|.
name|jumpToResult
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|matchFound
parameter_list|(
name|String
name|entityName
parameter_list|,
name|Pattern
name|pattern
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|entityName
argument_list|)
decl_stmt|;
return|return
name|m
operator|.
name|find
argument_list|()
return|;
block|}
block|}
end_class

end_unit

