begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
package|;
end_package

begin_comment
comment|/**  * Defines standard scopes supported by the DI container.  *   * @since 3.1  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Scopes
block|{
specifier|public
specifier|static
specifier|final
name|Scope
name|NO_SCOPE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Scope
name|SINGLETON
decl_stmt|;
static|static
block|{
name|NO_SCOPE
operator|=
operator|new
name|Scope
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Provider
argument_list|<
name|T
argument_list|>
name|scope
parameter_list|(
name|Provider
argument_list|<
name|T
argument_list|>
name|unscoped
parameter_list|)
block|{
return|return
name|unscoped
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Scopes.NO_SCOPE"
return|;
block|}
block|}
expr_stmt|;
name|SINGLETON
operator|=
operator|new
name|Scope
argument_list|()
block|{
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Provider
argument_list|<
name|T
argument_list|>
name|scope
parameter_list|(
name|Provider
argument_list|<
name|T
argument_list|>
name|unscoped
parameter_list|)
block|{
return|return
operator|new
name|SingletonProvider
argument_list|<
name|T
argument_list|>
argument_list|(
name|unscoped
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Scopes.SINGLETON"
return|;
block|}
block|}
expr_stmt|;
block|}
block|}
end_class

end_unit

