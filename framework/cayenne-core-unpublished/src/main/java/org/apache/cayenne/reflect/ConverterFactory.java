begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A factory of property type converters.  *   * @since 1.2  */
end_comment

begin_class
specifier|public
class|class
name|ConverterFactory
block|{
specifier|static
specifier|final
name|ConverterFactory
name|factory
init|=
operator|new
name|ConverterFactory
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Converter
argument_list|<
name|?
argument_list|>
argument_list|>
name|converters
decl_stmt|;
specifier|private
name|EnumConverter
name|enumConveter
init|=
operator|new
name|EnumConverter
argument_list|()
decl_stmt|;
specifier|private
name|Converter
argument_list|<
name|Object
argument_list|>
name|toAnyConverter
init|=
operator|new
name|ToAnyConverter
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ConverterFactory
parameter_list|()
block|{
name|Converter
argument_list|<
name|String
argument_list|>
name|toStringConverter
init|=
operator|new
name|Converter
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|String
name|convert
parameter_list|(
name|Object
name|object
parameter_list|,
name|Class
argument_list|<
name|String
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|object
operator|!=
literal|null
condition|?
name|object
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
block|}
decl_stmt|;
name|Converter
argument_list|<
name|Boolean
argument_list|>
name|toBooleanConverter
init|=
operator|new
name|Converter
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|convert
parameter_list|(
name|Object
name|object
parameter_list|,
name|Class
argument_list|<
name|Boolean
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
name|type
operator|.
name|isPrimitive
argument_list|()
condition|?
name|Boolean
operator|.
name|FALSE
else|:
literal|null
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|object
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Integer
operator|||
name|object
operator|instanceof
name|Long
operator|||
name|object
operator|instanceof
name|Short
operator|||
name|object
operator|instanceof
name|Byte
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|Number
operator|)
name|object
operator|)
operator|.
name|longValue
argument_list|()
operator|==
literal|0
condition|)
return|return
name|Boolean
operator|.
name|FALSE
return|;
if|else if
condition|(
operator|(
operator|(
name|Number
operator|)
name|object
operator|)
operator|.
name|longValue
argument_list|()
operator|==
literal|1
condition|)
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
return|return
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|object
operator|.
name|toString
argument_list|()
argument_list|)
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
decl_stmt|;
name|Converter
argument_list|<
name|Long
argument_list|>
name|toLongConverter
init|=
operator|new
name|Converter
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Long
name|convert
parameter_list|(
name|Object
name|object
parameter_list|,
name|Class
argument_list|<
name|Long
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
name|type
operator|.
name|isPrimitive
argument_list|()
condition|?
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
else|:
literal|null
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|Long
condition|)
block|{
return|return
operator|(
name|Long
operator|)
name|object
return|;
block|}
return|return
operator|new
name|Long
argument_list|(
name|object
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Converter
argument_list|<
name|Integer
argument_list|>
name|toIntConverter
init|=
operator|new
name|Converter
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Integer
name|convert
parameter_list|(
name|Object
name|object
parameter_list|,
name|Class
argument_list|<
name|Integer
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
name|type
operator|.
name|isPrimitive
argument_list|()
condition|?
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
else|:
literal|null
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|Integer
condition|)
block|{
return|return
operator|(
name|Integer
operator|)
name|object
return|;
block|}
return|return
operator|new
name|Integer
argument_list|(
name|object
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Converter
argument_list|<
name|Byte
argument_list|>
name|toByteConverter
init|=
operator|new
name|Converter
argument_list|<
name|Byte
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Byte
name|convert
parameter_list|(
name|Object
name|object
parameter_list|,
name|Class
argument_list|<
name|Byte
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
name|type
operator|.
name|isPrimitive
argument_list|()
condition|?
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
else|:
literal|null
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|Byte
condition|)
block|{
return|return
operator|(
name|Byte
operator|)
name|object
return|;
block|}
return|return
operator|new
name|Byte
argument_list|(
name|object
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Converter
argument_list|<
name|Short
argument_list|>
name|toShortConverter
init|=
operator|new
name|Converter
argument_list|<
name|Short
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Short
name|convert
parameter_list|(
name|Object
name|object
parameter_list|,
name|Class
argument_list|<
name|Short
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
name|type
operator|.
name|isPrimitive
argument_list|()
condition|?
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
else|:
literal|null
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|Short
condition|)
block|{
return|return
operator|(
name|Short
operator|)
name|object
return|;
block|}
return|return
operator|new
name|Short
argument_list|(
name|object
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Converter
argument_list|<
name|Character
argument_list|>
name|toCharConverter
init|=
operator|new
name|Converter
argument_list|<
name|Character
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Character
name|convert
parameter_list|(
name|Object
name|object
parameter_list|,
name|Class
argument_list|<
name|Character
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
name|type
operator|.
name|isPrimitive
argument_list|()
condition|?
name|Character
operator|.
name|valueOf
argument_list|(
operator|(
name|char
operator|)
literal|0
argument_list|)
else|:
literal|null
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|Character
condition|)
block|{
return|return
operator|(
name|Character
operator|)
name|object
return|;
block|}
name|String
name|string
init|=
name|object
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|Character
operator|.
name|valueOf
argument_list|(
name|string
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|string
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
else|:
literal|0
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Converter
argument_list|<
name|Double
argument_list|>
name|toDoubleConverter
init|=
operator|new
name|Converter
argument_list|<
name|Double
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Double
name|convert
parameter_list|(
name|Object
name|object
parameter_list|,
name|Class
argument_list|<
name|Double
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
name|type
operator|.
name|isPrimitive
argument_list|()
condition|?
operator|new
name|Double
argument_list|(
literal|0.0d
argument_list|)
else|:
literal|null
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|Double
condition|)
block|{
return|return
operator|(
name|Double
operator|)
name|object
return|;
block|}
return|return
operator|new
name|Double
argument_list|(
name|object
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Converter
argument_list|<
name|Float
argument_list|>
name|toFloatConverter
init|=
operator|new
name|Converter
argument_list|<
name|Float
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Float
name|convert
parameter_list|(
name|Object
name|object
parameter_list|,
name|Class
argument_list|<
name|Float
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
name|type
operator|.
name|isPrimitive
argument_list|()
condition|?
operator|new
name|Float
argument_list|(
literal|0.0f
argument_list|)
else|:
literal|null
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|Float
condition|)
block|{
return|return
operator|(
name|Float
operator|)
name|object
return|;
block|}
return|return
operator|new
name|Float
argument_list|(
name|object
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Converter
argument_list|<
name|BigDecimal
argument_list|>
name|toBigDecimalConverter
init|=
operator|new
name|Converter
argument_list|<
name|BigDecimal
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|BigDecimal
name|convert
parameter_list|(
name|Object
name|object
parameter_list|,
name|Class
argument_list|<
name|BigDecimal
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|BigDecimal
condition|)
block|{
return|return
operator|(
name|BigDecimal
operator|)
name|object
return|;
block|}
return|return
operator|new
name|BigDecimal
argument_list|(
name|object
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Converter
argument_list|<
name|BigInteger
argument_list|>
name|toBigIntegerConverter
init|=
operator|new
name|Converter
argument_list|<
name|BigInteger
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|BigInteger
name|convert
parameter_list|(
name|Object
name|object
parameter_list|,
name|Class
argument_list|<
name|BigInteger
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|BigInteger
condition|)
block|{
return|return
operator|(
name|BigInteger
operator|)
name|object
return|;
block|}
return|return
operator|new
name|BigInteger
argument_list|(
name|object
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Converter
argument_list|<
name|Date
argument_list|>
name|toDateConverter
init|=
operator|new
name|Converter
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Date
name|convert
parameter_list|(
name|Object
name|value
parameter_list|,
name|Class
argument_list|<
name|Date
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|value
operator|instanceof
name|Date
condition|)
return|return
operator|(
name|Date
operator|)
name|value
return|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
return|return
operator|new
name|Date
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
return|return
operator|new
name|Date
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Converter
argument_list|<
name|Timestamp
argument_list|>
name|toTimestampConverter
init|=
operator|new
name|Converter
argument_list|<
name|Timestamp
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Timestamp
name|convert
parameter_list|(
name|Object
name|value
parameter_list|,
name|Class
argument_list|<
name|Timestamp
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|value
operator|instanceof
name|Timestamp
condition|)
return|return
operator|(
name|Timestamp
operator|)
name|value
return|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
return|return
operator|new
name|Timestamp
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
return|return
operator|new
name|Timestamp
argument_list|(
name|Date
operator|.
name|parse
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// TODO: byte[] converter...
name|converters
operator|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Converter
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|_addConverter
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
name|toBooleanConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
name|toBooleanConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|toShortConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|short
operator|.
name|class
argument_list|,
name|toShortConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|toByteConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|byte
operator|.
name|class
argument_list|,
name|toByteConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|toIntConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|toIntConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|toLongConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|long
operator|.
name|class
argument_list|,
name|toLongConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|toDoubleConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|double
operator|.
name|class
argument_list|,
name|toDoubleConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|Float
operator|.
name|class
argument_list|,
name|toFloatConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|float
operator|.
name|class
argument_list|,
name|toFloatConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|Character
operator|.
name|class
argument_list|,
name|toCharConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|char
operator|.
name|class
argument_list|,
name|toCharConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|toBigDecimalConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|,
name|toBigIntegerConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|Number
operator|.
name|class
argument_list|,
name|toBigDecimalConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|toStringConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
name|toDateConverter
argument_list|)
expr_stmt|;
name|_addConverter
argument_list|(
name|Timestamp
operator|.
name|class
argument_list|,
name|toTimestampConverter
argument_list|)
expr_stmt|;
block|}
comment|/**      * Converters are used by {@link PropertyUtils#setProperty(Object, String, Object)} to coerce      * generic Object values into the specific type expected by the named setter.      *       * @param type      * 		the Class to convert a value to; the destination type      * @param converter      * 		a converter used to convert the value from Object to T      * @since 3.2      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|addConverter
parameter_list|(
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
name|type
parameter_list|,
name|Converter
argument_list|<
name|T
argument_list|>
name|converter
parameter_list|)
block|{
name|factory
operator|.
name|_addConverter
argument_list|(
name|type
argument_list|,
name|converter
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|_addConverter
parameter_list|(
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
name|type
parameter_list|,
name|Converter
argument_list|<
name|T
argument_list|>
name|converter
parameter_list|)
block|{
name|converters
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|converter
argument_list|)
expr_stmt|;
block|}
parameter_list|<
name|T
parameter_list|>
name|Converter
argument_list|<
name|T
argument_list|>
name|getConverter
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null type"
argument_list|)
throw|;
block|}
comment|// check for enum BEFORE super call, as it will return a noop converter
if|if
condition|(
name|type
operator|.
name|isEnum
argument_list|()
condition|)
block|{
return|return
name|enumConveter
return|;
block|}
name|Converter
argument_list|<
name|T
argument_list|>
name|c
init|=
operator|(
name|Converter
argument_list|<
name|T
argument_list|>
operator|)
name|converters
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|c
operator|!=
literal|null
condition|?
name|c
else|:
operator|(
name|Converter
argument_list|<
name|T
argument_list|>
operator|)
name|toAnyConverter
return|;
block|}
block|}
end_class

end_unit

