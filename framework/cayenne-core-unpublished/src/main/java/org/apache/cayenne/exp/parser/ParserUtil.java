begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_class
class|class
name|ParserUtil
block|{
specifier|static
name|Object
name|makeEnum
parameter_list|(
name|String
name|enumPath
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|enumPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Null 'enumPath'"
argument_list|)
throw|;
block|}
name|int
name|dot
init|=
name|enumPath
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dot
operator|<=
literal|0
operator|||
name|dot
operator|==
name|enumPath
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Invalid enum path: "
operator|+
name|enumPath
argument_list|)
throw|;
block|}
name|String
name|className
init|=
name|enumPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dot
argument_list|)
decl_stmt|;
name|String
name|enumName
init|=
name|enumPath
operator|.
name|substring
argument_list|(
name|dot
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Class
name|enumClass
decl_stmt|;
try|try
block|{
name|enumClass
operator|=
name|Util
operator|.
name|getJavaClass
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Enum class not found: "
operator|+
name|className
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|enumClass
operator|.
name|isEnum
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Specified class is not an enum: "
operator|+
name|className
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|Enum
operator|.
name|valueOf
argument_list|(
name|enumClass
argument_list|,
name|enumName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Invalid enum path: "
operator|+
name|enumPath
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

