begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_comment
comment|/**  * A read-only ObjRelationship relationship that caches some information that is  * dynamically calculated in a superclass.  *   * @since 1.2  */
end_comment

begin_class
class|class
name|ClientObjRelationship
extends|extends
name|ObjRelationship
block|{
name|String
name|reverseRelationshipName
decl_stmt|;
comment|// note that field names are different from the ones defined by super for the same
comment|// property... This is needed so that Hessian sreialization mechanism could work.
name|boolean
name|clientReadOnly
decl_stmt|;
name|boolean
name|clientToMany
decl_stmt|;
name|ClientObjRelationship
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|reverseRelationshipName
parameter_list|,
name|boolean
name|toMany
parameter_list|,
name|boolean
name|readOnly
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|clientToMany
operator|=
name|toMany
expr_stmt|;
name|this
operator|.
name|clientReadOnly
operator|=
name|readOnly
expr_stmt|;
name|this
operator|.
name|reverseRelationshipName
operator|=
name|reverseRelationshipName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isToMany
parameter_list|()
block|{
return|return
name|clientToMany
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
block|{
return|return
name|clientReadOnly
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReverseRelationshipName
parameter_list|()
block|{
return|return
name|reverseRelationshipName
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjRelationship
name|getReverseRelationship
parameter_list|()
block|{
if|if
condition|(
name|reverseRelationshipName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Entity
name|target
init|=
name|getTargetEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|ObjRelationship
operator|)
name|target
operator|.
name|getRelationship
argument_list|(
name|reverseRelationshipName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

