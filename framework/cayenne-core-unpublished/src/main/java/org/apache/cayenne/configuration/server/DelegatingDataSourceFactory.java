begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|RuntimeProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|AdhocObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|BeforeScopeEnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|ScopeEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * A {@link DataSourceFactory} that delegates DataSource creation to another factory,  * which is determined dynamically per DataNodeDescriptor. The delegate class may be  * explicitly defined in the {@link DataNodeDescriptor}. If not, and if the descriptor has  * a configuration resource attached to it, {@link XMLPoolingDataSourceFactory} is used.  *<p>  * If the environment contains properties<em>cayenne.jdbc.url.domain_name.node_name</em>  * (or<em>cayenne.jdbc.url</em>) and<em>cayenne.jdbc.driver.domain_name.node_name</em>  * (or<em>cayenne.jdbc.driver</em>), any DataSourceFactory configured in the  * DataNodeDescriptor is ignored, and the {@link PropertyDataSourceFactory} is used.  *   * @since 3.1  */
end_comment

begin_class
specifier|public
class|class
name|DelegatingDataSourceFactory
implements|implements
name|DataSourceFactory
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DelegatingDataSourceFactory
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|AdhocObjectFactory
name|objectFactory
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|RuntimeProperties
name|properties
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|DataSource
argument_list|,
name|ScopeEventListener
argument_list|>
name|managedDataSources
decl_stmt|;
specifier|public
name|DelegatingDataSourceFactory
parameter_list|()
block|{
name|managedDataSources
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|DataSource
argument_list|,
name|ScopeEventListener
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DataSource
name|getDataSource
parameter_list|(
name|DataNodeDescriptor
name|nodeDescriptor
parameter_list|)
throws|throws
name|Exception
block|{
name|DataSource
name|dataSource
init|=
name|getDataSourceFactory
argument_list|(
name|nodeDescriptor
argument_list|)
operator|.
name|getDataSource
argument_list|(
name|nodeDescriptor
argument_list|)
decl_stmt|;
name|attachToScope
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
return|return
name|dataSource
return|;
block|}
annotation|@
name|BeforeScopeEnd
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
for|for
control|(
name|ScopeEventListener
name|listener
range|:
name|managedDataSources
operator|.
name|values
argument_list|()
control|)
block|{
name|listener
operator|.
name|beforeScopeEnd
argument_list|()
expr_stmt|;
block|}
name|managedDataSources
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Ensure that DataSource implementations returned from this factory receive      * {@link BeforeScopeEnd} events.      */
specifier|protected
name|void
name|attachToScope
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
block|{
if|if
condition|(
operator|!
name|managedDataSources
operator|.
name|containsKey
argument_list|(
name|dataSource
argument_list|)
condition|)
block|{
if|if
condition|(
name|dataSource
operator|instanceof
name|ScopeEventListener
condition|)
block|{
name|managedDataSources
operator|.
name|put
argument_list|(
name|dataSource
argument_list|,
operator|(
name|ScopeEventListener
operator|)
name|dataSource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|DataSourceFactory
name|getDataSourceFactory
parameter_list|(
name|DataNodeDescriptor
name|nodeDescriptor
parameter_list|)
block|{
name|String
name|typeName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|shouldConfigureDataSourceFromProperties
argument_list|(
name|nodeDescriptor
argument_list|)
condition|)
block|{
name|typeName
operator|=
name|PropertyDataSourceFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|typeName
operator|=
name|nodeDescriptor
operator|.
name|getDataSourceFactoryType
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|typeName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|nodeDescriptor
operator|.
name|getDataSourceDescriptor
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"DataNodeDescriptor '%s' has null 'dataSourceFactoryType' and 'dataSourceDescriptor' properties"
argument_list|,
name|nodeDescriptor
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|typeName
operator|=
name|XMLPoolingDataSourceFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|objectFactory
operator|.
name|newInstance
argument_list|(
name|DataSourceFactory
operator|.
name|class
argument_list|,
name|typeName
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|shouldConfigureDataSourceFromProperties
parameter_list|(
name|DataNodeDescriptor
name|nodeDescriptor
parameter_list|)
block|{
name|String
name|channelName
init|=
name|nodeDescriptor
operator|.
name|getDataChannelDescriptor
argument_list|()
operator|!=
literal|null
condition|?
name|nodeDescriptor
operator|.
name|getDataChannelDescriptor
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|driver
init|=
name|properties
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|JDBC_DRIVER_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|driver
operator|==
literal|null
operator|&&
name|channelName
operator|!=
literal|null
condition|)
block|{
name|driver
operator|=
name|properties
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|JDBC_DRIVER_PROPERTY
operator|+
literal|"."
operator|+
name|nodeDescriptor
operator|.
name|getDataChannelDescriptor
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|nodeDescriptor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|driver
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|url
init|=
name|properties
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|JDBC_URL_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
operator|&&
name|channelName
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|properties
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|JDBC_URL_PROPERTY
operator|+
literal|"."
operator|+
name|nodeDescriptor
operator|.
name|getDataChannelDescriptor
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|nodeDescriptor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|logger
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Found DataSourceFactory system property overrides for URL and Driver "
operator|+
literal|"of '%s.%s' node. Will ignore project DataSource configuration."
argument_list|,
name|channelName
argument_list|,
name|nodeDescriptor
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

