begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_comment
comment|/**  * An abstract superclass of queries with Expression qualifiers.  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|QualifiedQuery
extends|extends
name|AbstractQuery
block|{
specifier|protected
name|Expression
name|qualifier
decl_stmt|;
comment|/**      * Sets new query qualifier.      */
specifier|public
name|void
name|setQualifier
parameter_list|(
name|Expression
name|qualifier
parameter_list|)
block|{
name|this
operator|.
name|qualifier
operator|=
name|qualifier
expr_stmt|;
block|}
comment|/**      * Returns query qualifier.      */
specifier|public
name|Expression
name|getQualifier
parameter_list|()
block|{
return|return
name|qualifier
return|;
block|}
comment|/**      * Adds specified qualifier to the existing qualifier joining it using "AND".      */
specifier|public
name|void
name|andQualifier
parameter_list|(
name|Expression
name|e
parameter_list|)
block|{
name|qualifier
operator|=
operator|(
name|qualifier
operator|!=
literal|null
operator|)
condition|?
name|qualifier
operator|.
name|andExp
argument_list|(
name|e
argument_list|)
else|:
name|e
expr_stmt|;
block|}
comment|/**      * Adds specified qualifier to the existing qualifier joining it using "OR".      */
specifier|public
name|void
name|orQualifier
parameter_list|(
name|Expression
name|e
parameter_list|)
block|{
name|qualifier
operator|=
operator|(
name|qualifier
operator|!=
literal|null
operator|)
condition|?
name|qualifier
operator|.
name|orExp
argument_list|(
name|e
argument_list|)
else|:
name|e
expr_stmt|;
block|}
block|}
end_class

end_unit

