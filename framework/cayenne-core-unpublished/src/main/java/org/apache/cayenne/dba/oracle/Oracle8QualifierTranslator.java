begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|oracle
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|trans
operator|.
name|QueryAssembler
import|;
end_import

begin_comment
comment|/**  * Extends the TrimmingQualifierTranslator that Cayenne normally uses for Oracle.  * Overrides doAppendPart() to wrap the qualifierBuffer in parentheses if it contains an  * "OR" expression. This avoids a bug that can happen on Oracle8 if the query also  * contains a join.  *   * @since 3.0  */
end_comment

begin_class
class|class
name|Oracle8QualifierTranslator
extends|extends
name|OracleQualifierTranslator
block|{
specifier|public
name|Oracle8QualifierTranslator
parameter_list|(
name|QueryAssembler
name|queryAssembler
parameter_list|)
block|{
name|super
argument_list|(
name|queryAssembler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doAppendPart
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|doAppendPart
argument_list|()
expr_stmt|;
if|if
condition|(
name|out
operator|instanceof
name|StringBuilder
condition|)
block|{
name|StringBuilder
name|buffer
init|=
operator|(
name|StringBuilder
operator|)
name|out
decl_stmt|;
if|if
condition|(
name|buffer
operator|.
name|indexOf
argument_list|(
literal|" OR "
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|buffer
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|'('
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

