begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|bridge
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|entity
operator|.
name|cayenne
operator|.
name|MockCayenneEntity1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|entity
operator|.
name|cayenne
operator|.
name|MockCayenneEntity2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_class
specifier|public
class|class
name|DataMapMappingAssertion
extends|extends
name|Assert
block|{
specifier|public
name|void
name|testDataMap
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"n1"
argument_list|,
name|dataMap
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dataMap
operator|.
name|getObjEntities
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|dataMap
operator|.
name|getObjEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|ObjEntity
argument_list|>
name|entityIt
init|=
name|dataMap
operator|.
name|getObjEntities
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEntity1
argument_list|(
name|entityIt
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEntity2
argument_list|(
name|entityIt
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|dataMap
operator|.
name|getQueries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertEntity1
parameter_list|(
name|ObjEntity
name|entity1
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|entity1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MockCayenneEntity1"
argument_list|,
name|entity1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MockCayenneEntity1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|entity1
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertObjAttributes
argument_list|(
name|entity1
argument_list|)
expr_stmt|;
name|assertObjRelationships
argument_list|(
name|entity1
argument_list|)
expr_stmt|;
name|assertDbEntity
argument_list|(
name|entity1
operator|.
name|getDbEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertEntity2
parameter_list|(
name|ObjEntity
name|entity2
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|entity2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MockCayenneEntity2"
argument_list|,
name|entity2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MockCayenneEntity2
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|entity2
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertDbEntity
parameter_list|(
name|DbEntity
name|table
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mock_persistent_1"
argument_list|,
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"catalog1"
argument_list|,
name|table
operator|.
name|getCatalog
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"schema1"
argument_list|,
name|table
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
name|pks
init|=
name|table
operator|.
name|getPrimaryKeys
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DbAttribute
name|pk
init|=
operator|(
name|DbAttribute
operator|)
name|pks
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|pk
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pk
operator|.
name|isPrimaryKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pk
operator|.
name|isMandatory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid SQL type: "
operator|+
name|TypesMapping
operator|.
name|getSqlNameByType
argument_list|(
name|pk
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|pk
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|DbAttribute
name|column9
init|=
operator|(
name|DbAttribute
operator|)
name|table
operator|.
name|getAttribute
argument_list|(
literal|"column9"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|column9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|DATE
argument_list|,
name|column9
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|column9
operator|.
name|isPrimaryKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertDbRelationship
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertObjAttributes
parameter_list|(
name|ObjEntity
name|entity1
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|entity1
operator|.
name|getAttributeMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ObjAttribute
name|a1
init|=
operator|(
name|ObjAttribute
operator|)
name|entity1
operator|.
name|getAttribute
argument_list|(
literal|"attribute1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"attribute1"
argument_list|,
name|a1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"attribute1"
argument_list|,
name|a1
operator|.
name|getDbAttributeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|a1
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|ObjAttribute
name|a2
init|=
operator|(
name|ObjAttribute
operator|)
name|entity1
operator|.
name|getAttribute
argument_list|(
literal|"attribute2"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"attribute2"
argument_list|,
name|a2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"attribute2"
argument_list|,
name|a2
operator|.
name|getDbAttributeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|TYPE
operator|.
name|getName
argument_list|()
argument_list|,
name|a2
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|ObjAttribute
name|a3
init|=
operator|(
name|ObjAttribute
operator|)
name|entity1
operator|.
name|getAttribute
argument_list|(
literal|"attribute9"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"attribute9"
argument_list|,
name|a3
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"column9"
argument_list|,
name|a3
operator|.
name|getDbAttributeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Date
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|a3
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// PK must also be mapped
name|ObjAttribute
name|id
init|=
operator|(
name|ObjAttribute
operator|)
name|entity1
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertObjRelationships
parameter_list|(
name|ObjEntity
name|entity1
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|entity1
operator|.
name|getRelationshipMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ObjRelationship
name|attribute4
init|=
operator|(
name|ObjRelationship
operator|)
name|entity1
operator|.
name|getRelationship
argument_list|(
literal|"attribute4"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|attribute4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|attribute4
operator|.
name|isToMany
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"attribute4"
argument_list|,
name|attribute4
operator|.
name|getDbRelationshipPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MockCayenneTargetEntity2"
argument_list|,
name|attribute4
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
expr_stmt|;
name|ObjRelationship
name|attribute5
init|=
operator|(
name|ObjRelationship
operator|)
name|entity1
operator|.
name|getRelationship
argument_list|(
literal|"attribute5"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|attribute5
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|attribute5
operator|.
name|isToMany
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"attribute5"
argument_list|,
name|attribute5
operator|.
name|getDbRelationshipPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MockCayenneTargetEntity2"
argument_list|,
name|attribute5
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertDbRelationship
parameter_list|(
name|DbEntity
name|entity1
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|entity1
operator|.
name|getRelationshipMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DbRelationship
name|attribute4
init|=
operator|(
name|DbRelationship
operator|)
name|entity1
operator|.
name|getRelationship
argument_list|(
literal|"attribute4"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|attribute4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|attribute4
operator|.
name|isToMany
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MockCayenneTargetEntity2"
argument_list|,
name|attribute4
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|attribute4
operator|.
name|getJoins
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DbRelationship
name|attribute5
init|=
operator|(
name|DbRelationship
operator|)
name|entity1
operator|.
name|getRelationship
argument_list|(
literal|"attribute5"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|attribute5
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|attribute5
operator|.
name|isToMany
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MockCayenneTargetEntity2"
argument_list|,
name|attribute5
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|attribute5
operator|.
name|getJoins
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

