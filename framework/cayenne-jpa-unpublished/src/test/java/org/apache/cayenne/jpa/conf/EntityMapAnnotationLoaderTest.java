begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|IdClass
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|NamedQuery
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|entity
operator|.
name|MockEmbed1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|entity
operator|.
name|MockEmbed2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|entity
operator|.
name|MockEntity1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|entity
operator|.
name|MockEntity2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|entity
operator|.
name|MockEntity3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|entity
operator|.
name|MockEntity4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|entity
operator|.
name|MockEntity5
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|entity
operator|.
name|MockEntityMap1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|entity
operator|.
name|MockEntityMap2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|entity
operator|.
name|MockMappedSuperclass1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|entity
operator|.
name|MockMappedSuperclass2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|entity
operator|.
name|MockMappedSuperclass3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaAttributeOverride
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaBasic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaEntityMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|spi
operator|.
name|MockPersistenceUnitInfo
import|;
end_import

begin_class
specifier|public
class|class
name|EntityMapAnnotationLoaderTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testSortAnnotations1
parameter_list|()
throws|throws
name|Exception
block|{
name|EntityMapAnnotationLoader
name|loader
init|=
operator|new
name|EntityMapAnnotationLoader
argument_list|(
operator|new
name|EntityMapLoaderContext
argument_list|(
operator|new
name|MockPersistenceUnitInfo
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Annotation
index|[]
name|a1
init|=
operator|new
name|Annotation
index|[
literal|3
index|]
decl_stmt|;
name|a1
index|[
literal|0
index|]
operator|=
name|MockAnnotatedBean1
operator|.
name|class
operator|.
name|getAnnotation
argument_list|(
name|NamedQuery
operator|.
name|class
argument_list|)
expr_stmt|;
name|a1
index|[
literal|1
index|]
operator|=
name|MockAnnotatedBean1
operator|.
name|class
operator|.
name|getAnnotation
argument_list|(
name|IdClass
operator|.
name|class
argument_list|)
expr_stmt|;
name|a1
index|[
literal|2
index|]
operator|=
name|MockAnnotatedBean1
operator|.
name|class
operator|.
name|getAnnotation
argument_list|(
name|Entity
operator|.
name|class
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|a1
argument_list|,
name|loader
operator|.
name|typeAnnotationsSorter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Entity
operator|.
name|class
argument_list|,
name|a1
index|[
literal|0
index|]
operator|.
name|annotationType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NamedQuery
operator|.
name|class
argument_list|,
name|a1
index|[
literal|1
index|]
operator|.
name|annotationType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IdClass
operator|.
name|class
argument_list|,
name|a1
index|[
literal|2
index|]
operator|.
name|annotationType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSortAnnotations2
parameter_list|()
throws|throws
name|Exception
block|{
name|EntityMapLoaderContext
name|context
init|=
operator|new
name|EntityMapLoaderContext
argument_list|(
operator|new
name|MockPersistenceUnitInfo
argument_list|()
argument_list|)
decl_stmt|;
name|EntityMapAnnotationLoader
name|loader
init|=
operator|new
name|EntityMapAnnotationLoader
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|loader
operator|.
name|loadClassMapping
argument_list|(
name|MockAnnotatedBeanOrdering
operator|.
name|class
argument_list|)
expr_stmt|;
name|JpaEntityMap
name|map
init|=
name|context
operator|.
name|getEntityMap
argument_list|()
decl_stmt|;
name|JpaEntity
name|entity
init|=
name|map
operator|.
name|getEntities
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// regardless of the ordering of annotations, we should get the same result for
comment|// both attributes
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|entity
operator|.
name|getAttributes
argument_list|()
operator|.
name|getBasicAttributes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|JpaBasic
name|a1
init|=
name|entity
operator|.
name|getAttributes
argument_list|()
operator|.
name|getBasicAttribute
argument_list|(
literal|"attribute1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a1
operator|.
name|isLob
argument_list|()
argument_list|)
expr_stmt|;
name|JpaBasic
name|a2
init|=
name|entity
operator|.
name|getAttributes
argument_list|()
operator|.
name|getBasicAttribute
argument_list|(
literal|"attribute2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a2
operator|.
name|isLob
argument_list|()
argument_list|)
expr_stmt|;
name|JpaBasic
name|a3
init|=
name|entity
operator|.
name|getAttributes
argument_list|()
operator|.
name|getBasicAttribute
argument_list|(
literal|"attribute3"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a3
operator|.
name|isLob
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks that class-level AttributeOverride and embedded property AttributeOverride      * are both processed correctly.      */
specifier|public
name|void
name|testAttributeOverride
parameter_list|()
block|{
name|EntityMapLoaderContext
name|context
init|=
operator|new
name|EntityMapLoaderContext
argument_list|(
operator|new
name|MockPersistenceUnitInfo
argument_list|()
argument_list|)
decl_stmt|;
name|EntityMapAnnotationLoader
name|loader
init|=
operator|new
name|EntityMapAnnotationLoader
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|loader
operator|.
name|loadClassMapping
argument_list|(
name|MockAnnotatedBean2
operator|.
name|class
argument_list|)
expr_stmt|;
name|JpaEntityMap
name|map
init|=
name|context
operator|.
name|getEntityMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|JpaEntity
name|entity
init|=
name|map
operator|.
name|getEntities
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entity
operator|.
name|getAttributeOverrides
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|JpaAttributeOverride
name|entityOverride
init|=
name|entity
operator|.
name|getAttributeOverrides
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"entityAttribute"
argument_list|,
name|entityOverride
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests loading of all supported annotations. Uses mock annotated objects from the      * "entity" package that roughly correspond to the XML mapping tested under      * {@link EntityMapXMLLoaderTest#testDetails()}.      */
specifier|public
name|void
name|testLoadClassMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|EntityMapLoaderContext
name|context
init|=
operator|new
name|EntityMapLoaderContext
argument_list|(
operator|new
name|MockPersistenceUnitInfo
argument_list|()
argument_list|)
decl_stmt|;
name|EntityMapAnnotationLoader
name|loader
init|=
operator|new
name|EntityMapAnnotationLoader
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|loader
operator|.
name|loadClassMapping
argument_list|(
name|MockEntity1
operator|.
name|class
argument_list|)
expr_stmt|;
name|loader
operator|.
name|loadClassMapping
argument_list|(
name|MockEntity2
operator|.
name|class
argument_list|)
expr_stmt|;
name|loader
operator|.
name|loadClassMapping
argument_list|(
name|MockEntity3
operator|.
name|class
argument_list|)
expr_stmt|;
name|loader
operator|.
name|loadClassMapping
argument_list|(
name|MockEntity4
operator|.
name|class
argument_list|)
expr_stmt|;
name|loader
operator|.
name|loadClassMapping
argument_list|(
name|MockEntity5
operator|.
name|class
argument_list|)
expr_stmt|;
name|loader
operator|.
name|loadClassMapping
argument_list|(
name|MockEmbed1
operator|.
name|class
argument_list|)
expr_stmt|;
name|loader
operator|.
name|loadClassMapping
argument_list|(
name|MockEmbed2
operator|.
name|class
argument_list|)
expr_stmt|;
name|loader
operator|.
name|loadClassMapping
argument_list|(
name|MockMappedSuperclass1
operator|.
name|class
argument_list|)
expr_stmt|;
name|loader
operator|.
name|loadClassMapping
argument_list|(
name|MockMappedSuperclass2
operator|.
name|class
argument_list|)
expr_stmt|;
name|loader
operator|.
name|loadClassMapping
argument_list|(
name|MockMappedSuperclass3
operator|.
name|class
argument_list|)
expr_stmt|;
name|loader
operator|.
name|loadClassMapping
argument_list|(
name|MockEntityMap1
operator|.
name|class
argument_list|)
expr_stmt|;
name|loader
operator|.
name|loadClassMapping
argument_list|(
name|MockEntityMap2
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Found conflicts: "
operator|+
name|context
operator|.
name|getConflicts
argument_list|()
argument_list|,
name|context
operator|.
name|getConflicts
argument_list|()
operator|.
name|hasFailures
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|MappingAssertion
argument_list|()
operator|.
name|testEntityMap
argument_list|(
name|context
operator|.
name|getEntityMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

