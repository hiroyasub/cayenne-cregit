begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|spi
operator|.
name|PersistenceUnitTransactionType
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|conf
operator|.
name|JpaDataSourceFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ProviderTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testCreateEntityManagerFactory
parameter_list|()
block|{
comment|// JTA Unit
specifier|final
name|JpaUnit
name|u1
init|=
operator|new
name|JpaUnit
argument_list|()
block|{
annotation|@
name|Override
name|JpaDataSourceFactory
name|getJpaDataSourceFactory
parameter_list|()
block|{
return|return
operator|new
name|MockJpaDataSourceFactory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PersistenceUnitTransactionType
name|getTransactionType
parameter_list|()
block|{
return|return
name|PersistenceUnitTransactionType
operator|.
name|JTA
return|;
block|}
block|}
decl_stmt|;
name|u1
operator|.
name|setPersistenceUnitName
argument_list|(
literal|"U1"
argument_list|)
expr_stmt|;
name|Provider
name|p1
init|=
operator|new
name|Provider
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|JpaUnit
name|loadUnit
parameter_list|(
name|String
name|emName
parameter_list|)
block|{
return|return
name|u1
return|;
block|}
block|}
decl_stmt|;
name|EntityManagerFactory
name|emf1
init|=
name|p1
operator|.
name|createEntityManagerFactory
argument_list|(
literal|"U1"
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|emf1
operator|instanceof
name|JtaEntityManagerFactory
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCreateContainerEntityManagerFactory
parameter_list|()
block|{
name|Provider
name|p
init|=
operator|new
name|Provider
argument_list|()
decl_stmt|;
comment|// JTA Unit
name|JpaUnit
name|u1
init|=
operator|new
name|JpaUnit
argument_list|()
block|{
annotation|@
name|Override
name|JpaDataSourceFactory
name|getJpaDataSourceFactory
parameter_list|()
block|{
return|return
operator|new
name|MockJpaDataSourceFactory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PersistenceUnitTransactionType
name|getTransactionType
parameter_list|()
block|{
return|return
name|PersistenceUnitTransactionType
operator|.
name|JTA
return|;
block|}
block|}
decl_stmt|;
name|u1
operator|.
name|setPersistenceUnitName
argument_list|(
literal|"U1"
argument_list|)
expr_stmt|;
name|EntityManagerFactory
name|emf1
init|=
name|p
operator|.
name|createContainerEntityManagerFactory
argument_list|(
name|u1
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|emf1
operator|instanceof
name|JtaEntityManagerFactory
argument_list|)
expr_stmt|;
comment|// RESOURCE_LOCAL Unit
name|JpaUnit
name|u2
init|=
operator|new
name|JpaUnit
argument_list|()
block|{
annotation|@
name|Override
name|JpaDataSourceFactory
name|getJpaDataSourceFactory
parameter_list|()
block|{
return|return
operator|new
name|MockJpaDataSourceFactory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PersistenceUnitTransactionType
name|getTransactionType
parameter_list|()
block|{
return|return
name|PersistenceUnitTransactionType
operator|.
name|RESOURCE_LOCAL
return|;
block|}
block|}
decl_stmt|;
name|u2
operator|.
name|setPersistenceUnitName
argument_list|(
literal|"U2"
argument_list|)
expr_stmt|;
name|EntityManagerFactory
name|emf2
init|=
name|p
operator|.
name|createContainerEntityManagerFactory
argument_list|(
name|u2
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|emf2
operator|instanceof
name|ResourceLocalEntityManagerFactory
argument_list|)
expr_stmt|;
comment|// JTA Unit with RESOURCE_LOCAL override
name|JpaUnit
name|u3
init|=
operator|new
name|JpaUnit
argument_list|()
block|{
annotation|@
name|Override
name|JpaDataSourceFactory
name|getJpaDataSourceFactory
parameter_list|()
block|{
return|return
operator|new
name|MockJpaDataSourceFactory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PersistenceUnitTransactionType
name|getTransactionType
parameter_list|()
block|{
return|return
name|PersistenceUnitTransactionType
operator|.
name|JTA
return|;
block|}
block|}
decl_stmt|;
name|u3
operator|.
name|setPersistenceUnitName
argument_list|(
literal|"U3"
argument_list|)
expr_stmt|;
name|EntityManagerFactory
name|emf3
init|=
name|p
operator|.
name|createContainerEntityManagerFactory
argument_list|(
name|u3
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|Provider
operator|.
name|TRANSACTION_TYPE_PROPERTY
argument_list|,
name|PersistenceUnitTransactionType
operator|.
name|RESOURCE_LOCAL
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|emf3
operator|instanceof
name|ResourceLocalEntityManagerFactory
argument_list|)
expr_stmt|;
comment|// RESOURCE_LOCAL Unit with JTA override
name|JpaUnit
name|u4
init|=
operator|new
name|JpaUnit
argument_list|()
block|{
annotation|@
name|Override
name|JpaDataSourceFactory
name|getJpaDataSourceFactory
parameter_list|()
block|{
return|return
operator|new
name|MockJpaDataSourceFactory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PersistenceUnitTransactionType
name|getTransactionType
parameter_list|()
block|{
return|return
name|PersistenceUnitTransactionType
operator|.
name|RESOURCE_LOCAL
return|;
block|}
block|}
decl_stmt|;
name|u4
operator|.
name|setPersistenceUnitName
argument_list|(
literal|"U4"
argument_list|)
expr_stmt|;
name|EntityManagerFactory
name|emf4
init|=
name|p
operator|.
name|createContainerEntityManagerFactory
argument_list|(
name|u4
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|Provider
operator|.
name|TRANSACTION_TYPE_PROPERTY
argument_list|,
name|PersistenceUnitTransactionType
operator|.
name|JTA
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|emf4
operator|instanceof
name|JtaEntityManagerFactory
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

