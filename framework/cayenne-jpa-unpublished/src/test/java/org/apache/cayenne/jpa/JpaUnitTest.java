begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|spi
operator|.
name|ClassTransformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|spi
operator|.
name|PersistenceUnitTransactionType
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|JpaUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|Provider
import|;
end_import

begin_class
specifier|public
class|class
name|JpaUnitTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testTransactionType
parameter_list|()
block|{
name|JpaUnit
name|info
init|=
operator|new
name|JpaUnit
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addTransformer
parameter_list|(
name|ClassTransformer
name|transformer
parameter_list|)
block|{
block|}
block|}
decl_stmt|;
name|info
operator|.
name|addProperties
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|Provider
operator|.
name|TRANSACTION_TYPE_PROPERTY
argument_list|,
name|PersistenceUnitTransactionType
operator|.
name|JTA
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|PersistenceUnitTransactionType
operator|.
name|JTA
argument_list|,
name|info
operator|.
name|getTransactionType
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|addProperties
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|Provider
operator|.
name|TRANSACTION_TYPE_PROPERTY
argument_list|,
name|PersistenceUnitTransactionType
operator|.
name|RESOURCE_LOCAL
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|PersistenceUnitTransactionType
operator|.
name|RESOURCE_LOCAL
argument_list|,
name|info
operator|.
name|getTransactionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testClassLoader
parameter_list|()
block|{
name|JpaUnit
name|info
init|=
operator|new
name|JpaUnit
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addTransformer
parameter_list|(
name|ClassTransformer
name|transformer
parameter_list|)
block|{
block|}
block|}
decl_stmt|;
name|ClassLoader
name|topLoader
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[
literal|0
index|]
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|info
operator|.
name|setClassLoader
argument_list|(
name|topLoader
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|topLoader
argument_list|,
name|info
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetNewTempClassLoader
parameter_list|()
block|{
name|JpaUnit
name|info
init|=
operator|new
name|JpaUnit
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addTransformer
parameter_list|(
name|ClassTransformer
name|transformer
parameter_list|)
block|{
block|}
block|}
decl_stmt|;
name|ClassLoader
name|topLoader
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[
literal|0
index|]
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|info
operator|.
name|setClassLoader
argument_list|(
name|topLoader
argument_list|)
expr_stmt|;
name|ClassLoader
name|tmp1
init|=
name|info
operator|.
name|getNewTempClassLoader
argument_list|()
decl_stmt|;
name|ClassLoader
name|tmp2
init|=
name|info
operator|.
name|getNewTempClassLoader
argument_list|()
decl_stmt|;
name|assertNotSame
argument_list|(
name|topLoader
argument_list|,
name|tmp1
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|topLoader
argument_list|,
name|tmp2
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|tmp1
argument_list|,
name|tmp2
argument_list|)
expr_stmt|;
comment|// presumably spec requirements that ".. scope and classpath of this loader is
comment|// exactly the same as that of the loader returned by
comment|// PersistenceUnitInfo.getClassLoader..." means that it has to be a child of the
comment|// main ClassLoader
name|assertSame
argument_list|(
name|topLoader
argument_list|,
name|tmp1
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|topLoader
argument_list|,
name|tmp2
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

