begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|ProjectPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|HierarchicalTreeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|TraversalUtil
import|;
end_import

begin_comment
comment|/**  * Tests traversal annotations.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|EntityMapTraversalTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testTraversal
parameter_list|()
block|{
name|JpaEntityMap
name|map
init|=
operator|new
name|JpaEntityMap
argument_list|()
decl_stmt|;
name|JpaEntity
name|e1
init|=
operator|new
name|JpaEntity
argument_list|()
decl_stmt|;
name|map
operator|.
name|getEntities
argument_list|()
operator|.
name|add
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|JpaBasic
name|a1
init|=
operator|new
name|JpaBasic
argument_list|()
decl_stmt|;
name|e1
operator|.
name|getAttributes
argument_list|()
operator|.
name|getBasicAttributes
argument_list|()
operator|.
name|add
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|JpaId
name|a2
init|=
operator|new
name|JpaId
argument_list|()
decl_stmt|;
name|e1
operator|.
name|getAttributes
argument_list|()
operator|.
name|getIds
argument_list|()
operator|.
name|add
argument_list|(
name|a2
argument_list|)
expr_stmt|;
name|JpaColumn
name|c1
init|=
operator|new
name|JpaColumn
argument_list|()
decl_stmt|;
name|a1
operator|.
name|setColumn
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|JpaColumn
name|c2
init|=
operator|new
name|JpaColumn
argument_list|()
decl_stmt|;
name|a2
operator|.
name|setColumn
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|JpaMappedSuperclass
name|m1
init|=
operator|new
name|JpaMappedSuperclass
argument_list|()
decl_stmt|;
name|map
operator|.
name|getMappedSuperclasses
argument_list|()
operator|.
name|add
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|TestVisitor
name|visitor
init|=
operator|new
name|TestVisitor
argument_list|()
decl_stmt|;
name|TraversalUtil
operator|.
name|traverse
argument_list|(
name|map
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|visitor
operator|.
name|isVisited
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|visitor
operator|.
name|isVisited
argument_list|(
name|e1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|visitor
operator|.
name|isVisited
argument_list|(
name|a1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|visitor
operator|.
name|isVisited
argument_list|(
name|a2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|visitor
operator|.
name|isVisited
argument_list|(
name|c1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|visitor
operator|.
name|isVisited
argument_list|(
name|c2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|visitor
operator|.
name|isVisited
argument_list|(
name|m1
argument_list|)
argument_list|)
expr_stmt|;
block|}
class|class
name|TestVisitor
implements|implements
name|HierarchicalTreeVisitor
block|{
specifier|protected
name|Collection
name|visitedNodes
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|public
name|HierarchicalTreeVisitor
name|childVisitor
parameter_list|(
name|ProjectPath
name|path
parameter_list|,
name|Class
name|childType
parameter_list|)
block|{
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|isVisited
parameter_list|(
name|Object
name|node
parameter_list|)
block|{
return|return
name|visitedNodes
operator|.
name|contains
argument_list|(
name|node
argument_list|)
return|;
block|}
specifier|public
name|void
name|onFinishNode
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|visitedNodes
operator|.
name|add
argument_list|(
name|path
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|onStartNode
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

