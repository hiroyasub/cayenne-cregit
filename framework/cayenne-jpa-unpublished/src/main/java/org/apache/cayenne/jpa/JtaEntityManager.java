begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityTransaction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|TransactionRequiredException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|Synchronization
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|TransactionSynchronizationRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_comment
comment|/**  * An EntityManager that can participate in JTA transactions.  *   */
end_comment

begin_class
specifier|public
class|class
name|JtaEntityManager
extends|extends
name|ResourceLocalEntityManager
block|{
specifier|protected
name|Object
name|currentTxKey
decl_stmt|;
specifier|public
name|JtaEntityManager
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|JtaEntityManagerFactory
name|factory
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
specifier|private
name|JtaEntityManagerFactory
name|getJtaFactory
parameter_list|()
block|{
return|return
operator|(
name|JtaEntityManagerFactory
operator|)
name|getFactory
argument_list|()
return|;
block|}
comment|/**      * @throws IllegalStateException, as this entity manager is of JTA kind.      */
specifier|public
name|EntityTransaction
name|getTransaction
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"'getTransaction' is called on a JTA EntityManager"
argument_list|)
throw|;
block|}
comment|/**      * Indicates to the EntityManager that a JTA transaction is active. This method should      * be called on a JTA application managed EntityManager that was created outside the      * scope of the active transaction to associate it with the current JTA transaction.      *       * @throws TransactionRequiredException if there is no transaction.      */
annotation|@
name|Override
specifier|public
name|void
name|joinTransaction
parameter_list|()
block|{
if|if
condition|(
name|currentTxKey
operator|==
literal|null
condition|)
block|{
name|TransactionSynchronizationRegistry
name|registry
init|=
name|getJtaFactory
argument_list|()
operator|.
name|getTransactionRegistry
argument_list|()
decl_stmt|;
name|registry
operator|.
name|registerInterposedSynchronization
argument_list|(
operator|new
name|TransactionBinding
argument_list|()
argument_list|)
expr_stmt|;
name|currentTxKey
operator|=
name|registry
operator|.
name|getTransactionKey
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @throws TransactionRequiredException if there is no transaction.      */
annotation|@
name|Override
specifier|public
name|void
name|persist
parameter_list|(
name|Object
name|entity
parameter_list|)
block|{
name|checkTransaction
argument_list|()
expr_stmt|;
name|super
operator|.
name|persist
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
comment|/**      * @throws TransactionRequiredException if there is no transaction.      */
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|merge
parameter_list|(
name|T
name|entity
parameter_list|)
block|{
name|checkTransaction
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|merge
argument_list|(
name|entity
argument_list|)
return|;
block|}
comment|/**      * @throws TransactionRequiredException if there is no transaction.      */
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|Object
name|entity
parameter_list|)
block|{
name|checkTransaction
argument_list|()
expr_stmt|;
name|super
operator|.
name|remove
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
comment|/**      * @throws TransactionRequiredException if there is no transaction.      */
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|(
name|Object
name|entity
parameter_list|)
block|{
name|checkTransaction
argument_list|()
expr_stmt|;
name|super
operator|.
name|refresh
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
comment|/**      * @throws TransactionRequiredException if there is no transaction.      */
specifier|public
name|void
name|flush
parameter_list|()
block|{
name|checkTransaction
argument_list|()
expr_stmt|;
name|super
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
comment|/**      * @throws TransactionRequiredException if there is no transaction in progress.      */
specifier|protected
name|void
name|checkTransaction
parameter_list|()
throws|throws
name|TransactionRequiredException
block|{
if|if
condition|(
operator|!
name|getJtaFactory
argument_list|()
operator|.
name|isActiveTransaction
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TransactionRequiredException
argument_list|()
throw|;
block|}
block|}
class|class
name|TransactionBinding
implements|implements
name|Synchronization
block|{
specifier|public
name|void
name|afterCompletion
parameter_list|(
name|int
name|status
parameter_list|)
block|{
if|if
condition|(
name|status
operator|!=
name|Status
operator|.
name|STATUS_COMMITTED
condition|)
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
name|currentTxKey
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|beforeCompletion
parameter_list|()
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

