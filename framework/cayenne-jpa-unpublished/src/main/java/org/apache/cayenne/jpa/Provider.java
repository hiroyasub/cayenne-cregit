begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|spi
operator|.
name|PersistenceUnitInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|spi
operator|.
name|PersistenceUnitTransactionType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DbGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|ConnectionProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|AutoAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|enhancer
operator|.
name|Enhancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|bridge
operator|.
name|DataMapConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|conf
operator|.
name|EntityMapLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|conf
operator|.
name|EntityMapLoaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|enhancer
operator|.
name|JpaEnhancerVisitorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|instrument
operator|.
name|UnitClassTranformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaClassDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|reflect
operator|.
name|JpaClassDescriptorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptorMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|ResourceLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|SimpleValidationFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|ValidationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A PersistenceProvider implementation based on Cayenne stack. Wraps a Cayenne  * Configuration instance.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|Provider
extends|extends
name|JpaPersistenceProvider
block|{
specifier|public
specifier|static
specifier|final
name|String
name|CREATE_SCHEMA_PROPERTY
init|=
literal|"cayenne.schema.create"
decl_stmt|;
specifier|protected
name|Configuration
name|configuration
decl_stmt|;
specifier|protected
name|Log
name|logger
decl_stmt|;
comment|/**      * Creates a new PersistenceProvider with properties configured to run in a standalone      * mode with Cayenne stack.      */
specifier|public
name|Provider
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Provider
parameter_list|(
name|boolean
name|validateDescriptors
parameter_list|)
block|{
name|super
argument_list|(
name|validateDescriptors
argument_list|)
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
operator|new
name|LazyConfiguration
argument_list|()
expr_stmt|;
comment|// set a singleton that may be used by Cayenne
name|Configuration
operator|.
name|initializeSharedConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|configureDefaultProperties
parameter_list|()
block|{
if|if
condition|(
operator|!
name|defaultProperties
operator|.
name|containsKey
argument_list|(
name|DATA_SOURCE_FACTORY_PROPERTY
argument_list|)
condition|)
block|{
name|defaultProperties
operator|.
name|put
argument_list|(
name|DATA_SOURCE_FACTORY_PROPERTY
argument_list|,
name|DefaultDataSourceFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|defaultProperties
operator|.
name|containsKey
argument_list|(
name|TRANSACTION_TYPE_PROPERTY
argument_list|)
condition|)
block|{
name|defaultProperties
operator|.
name|put
argument_list|(
name|TRANSACTION_TYPE_PROPERTY
argument_list|,
name|PersistenceUnitTransactionType
operator|.
name|RESOURCE_LOCAL
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Maps PersistenceUnitInfo to Cayenne DataDomain and returns a      * {@link CjpaEntityManagerFactory} which is a DataDomain wrapper.      */
annotation|@
name|Override
comment|// TODO: andrus, 07/24/2006 - extract properties from the second map parameter as well
comment|// as PUI.
specifier|public
specifier|synchronized
name|EntityManagerFactory
name|createContainerEntityManagerFactory
parameter_list|(
name|PersistenceUnitInfo
name|info
parameter_list|,
name|Map
name|map
parameter_list|)
block|{
name|String
name|name
init|=
name|info
operator|.
name|getPersistenceUnitName
argument_list|()
decl_stmt|;
name|DataDomain
name|domain
init|=
name|configuration
operator|.
name|getDomain
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|domain
operator|==
literal|null
condition|)
block|{
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// configure Cayenne domain
name|domain
operator|=
operator|new
name|DataDomain
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|ClassDescriptorMap
name|descriptors
init|=
name|domain
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getClassDescriptorMap
argument_list|()
decl_stmt|;
name|descriptors
operator|.
name|addFactory
argument_list|(
operator|new
name|JpaClassDescriptorFactory
argument_list|(
name|descriptors
argument_list|)
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|addDomain
argument_list|(
name|domain
argument_list|)
expr_stmt|;
name|EntityMapLoader
name|loader
init|=
operator|new
name|EntityMapLoader
argument_list|(
name|info
argument_list|)
decl_stmt|;
comment|// we must set enhancer in this exact place, between JPA and Cayenne mapping
comment|// loading. By now all the JpaEntities are loaded (using separate unit class
comment|// loader) and Cayenne mapping will be using the App ClassLoader.
name|Map
argument_list|<
name|String
argument_list|,
name|JpaClassDescriptor
argument_list|>
name|managedClasses
init|=
name|loader
operator|.
name|getEntityMap
argument_list|()
operator|.
name|getMangedClasses
argument_list|()
decl_stmt|;
name|info
operator|.
name|addTransformer
argument_list|(
operator|new
name|UnitClassTranformer
argument_list|(
name|managedClasses
argument_list|,
operator|new
name|Enhancer
argument_list|(
operator|new
name|JpaEnhancerVisitorFactory
argument_list|(
name|managedClasses
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DataMapConverter
name|converter
init|=
operator|new
name|DataMapConverter
argument_list|()
decl_stmt|;
name|DataMap
name|cayenneMap
init|=
name|converter
operator|.
name|toDataMap
argument_list|(
name|name
argument_list|,
name|loader
operator|.
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|DataSource
name|dataSource
init|=
name|info
operator|.
name|getTransactionType
argument_list|()
operator|==
name|PersistenceUnitTransactionType
operator|.
name|JTA
condition|?
name|info
operator|.
name|getJtaDataSource
argument_list|()
else|:
name|info
operator|.
name|getNonJtaDataSource
argument_list|()
decl_stmt|;
name|DbAdapter
name|adapter
init|=
name|createCustomAdapter
argument_list|(
name|loader
operator|.
name|getContext
argument_list|()
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|DataNode
name|node
init|=
operator|new
name|DataNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|adapter
operator|==
literal|null
condition|)
block|{
name|adapter
operator|=
operator|new
name|AutoAdapter
argument_list|(
operator|new
name|NodeDataSource
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|setAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|node
operator|.
name|setDataSource
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|node
operator|.
name|addDataMap
argument_list|(
name|cayenneMap
argument_list|)
expr_stmt|;
name|domain
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|info
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|CREATE_SCHEMA_PROPERTY
argument_list|)
argument_list|)
condition|)
block|{
name|loadSchema
argument_list|(
name|dataSource
argument_list|,
name|adapter
argument_list|,
name|cayenneMap
argument_list|)
expr_stmt|;
block|}
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// report conflicts...
name|ValidationResult
name|conflicts
init|=
name|loader
operator|.
name|getContext
argument_list|()
operator|.
name|getConflicts
argument_list|()
decl_stmt|;
if|if
condition|(
name|conflicts
operator|.
name|hasFailures
argument_list|()
condition|)
block|{
for|for
control|(
name|Object
name|failure
range|:
name|conflicts
operator|.
name|getFailures
argument_list|()
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"*** mapping conflict: "
operator|+
name|failure
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"loaded persistence unit '"
operator|+
name|name
operator|+
literal|"' in "
operator|+
operator|(
name|t1
operator|-
name|t0
operator|)
operator|+
literal|" ms."
argument_list|)
expr_stmt|;
block|}
block|}
name|JpaEntityManagerFactory
name|factory
init|=
operator|new
name|JpaEntityManagerFactory
argument_list|(
name|domain
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|factory
operator|.
name|setDelegate
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|factory
return|;
block|}
comment|/**      * Loads database schema if it doesn't yet exist.      */
specifier|protected
name|void
name|loadSchema
parameter_list|(
name|DataSource
name|dataSource
parameter_list|,
name|DbAdapter
name|adapter
parameter_list|,
name|DataMap
name|map
parameter_list|)
block|{
name|Collection
name|tables
init|=
name|map
operator|.
name|getDbEntities
argument_list|()
decl_stmt|;
if|if
condition|(
name|tables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// sniff a first table precense
comment|// TODO: andrus 9/1/2006 - should we make this check a part of DbGenerator (and
comment|// query - a part of DbAdapter)?
name|DbEntity
name|table
init|=
operator|(
name|DbEntity
operator|)
name|tables
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|Connection
name|c
init|=
name|dataSource
operator|.
name|getConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|tableName
init|=
name|table
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
comment|// select all tables to avoid case sensitivity issues.
name|ResultSet
name|rs
init|=
name|c
operator|.
name|getMetaData
argument_list|()
operator|.
name|getTables
argument_list|(
name|table
operator|.
name|getCatalog
argument_list|()
argument_list|,
name|table
operator|.
name|getSchema
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|sqlName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_NAME"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableName
operator|.
name|equals
argument_list|(
name|sqlName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"table "
operator|+
name|table
operator|.
name|getFullyQualifiedName
argument_list|()
operator|+
literal|" is present; will skip schema generation."
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e1
parameter_list|)
block|{
comment|// db exists
name|logger
operator|.
name|debug
argument_list|(
literal|"error generating schema, assuming schema exists."
argument_list|)
expr_stmt|;
return|return;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"table "
operator|+
name|table
operator|.
name|getFullyQualifiedName
argument_list|()
operator|+
literal|" is absent; will continue with schema generation."
argument_list|)
expr_stmt|;
comment|// run generator
name|DbGenerator
name|generator
init|=
operator|new
name|DbGenerator
argument_list|(
name|adapter
argument_list|,
name|map
argument_list|)
decl_stmt|;
try|try
block|{
name|generator
operator|.
name|runGenerator
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
specifier|protected
name|DbAdapter
name|createCustomAdapter
parameter_list|(
name|EntityMapLoaderContext
name|context
parameter_list|,
name|PersistenceUnitInfo
name|info
parameter_list|)
block|{
name|String
name|adapterKey
init|=
name|DefaultDataSourceFactory
operator|.
name|getPropertyName
argument_list|(
name|info
operator|.
name|getPersistenceUnitName
argument_list|()
argument_list|,
name|ConnectionProperties
operator|.
name|ADAPTER_KEY
argument_list|)
decl_stmt|;
name|String
name|adapterClass
init|=
name|info
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|adapterKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|isEmptyString
argument_list|(
name|adapterClass
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
comment|// adapter class is not enhanced, so use a normal class loader
name|Class
name|dbAdapterClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|adapterClass
argument_list|,
literal|true
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|DbAdapter
operator|)
name|dbAdapterClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|context
operator|.
name|recordConflict
argument_list|(
operator|new
name|SimpleValidationFailure
argument_list|(
name|info
argument_list|,
literal|"Failed to load adapter '"
operator|+
name|adapterClass
operator|+
literal|"', message: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
comment|// TODO: andrus, 4/29/2006 - this is copied from non-public conf.NodeDataSource. In
comment|// Cayenne> 1.2 make it public.
class|class
name|NodeDataSource
implements|implements
name|DataSource
block|{
name|DataNode
name|node
decl_stmt|;
name|NodeDataSource
parameter_list|(
name|DataNode
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
specifier|public
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|node
operator|.
name|getDataSource
argument_list|()
operator|.
name|getConnection
argument_list|()
return|;
block|}
specifier|public
name|Connection
name|getConnection
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|node
operator|.
name|getDataSource
argument_list|()
operator|.
name|getConnection
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
return|;
block|}
specifier|public
name|PrintWriter
name|getLogWriter
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|node
operator|.
name|getDataSource
argument_list|()
operator|.
name|getLogWriter
argument_list|()
return|;
block|}
specifier|public
name|void
name|setLogWriter
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|SQLException
block|{
name|node
operator|.
name|getDataSource
argument_list|()
operator|.
name|setLogWriter
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setLoginTimeout
parameter_list|(
name|int
name|seconds
parameter_list|)
throws|throws
name|SQLException
block|{
name|node
operator|.
name|getDataSource
argument_list|()
operator|.
name|setLoginTimeout
argument_list|(
name|seconds
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getLoginTimeout
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|node
operator|.
name|getDataSource
argument_list|()
operator|.
name|getLoginTimeout
argument_list|()
return|;
block|}
block|}
class|class
name|LazyConfiguration
extends|extends
name|Configuration
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|canInitialize
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|Exception
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|didInitialize
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|protected
name|ResourceLocator
name|getResourceLocator
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|InputStream
name|getDomainConfiguration
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|InputStream
name|getMapConfiguration
parameter_list|(
name|String
name|name
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|InputStream
name|getViewConfiguration
parameter_list|(
name|String
name|location
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

