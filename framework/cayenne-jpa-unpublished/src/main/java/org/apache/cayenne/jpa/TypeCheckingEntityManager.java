begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityTransaction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|FlushModeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|LockModeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_comment
comment|/**  * An EntityManager decorator that checks that only properly enhanced entities are passwed  * to the underlying EntityManager.  *   */
end_comment

begin_comment
comment|// TODO: andrus, 2/18/2007 - in the future this wrapper can also enhance entities on the
end_comment

begin_comment
comment|// fly, for now it simply does the type checks before passing entities to the underlying
end_comment

begin_comment
comment|// EM.
end_comment

begin_class
specifier|public
class|class
name|TypeCheckingEntityManager
implements|implements
name|CayenneEntityManager
block|{
specifier|protected
name|CayenneEntityManager
name|entityManager
decl_stmt|;
specifier|public
name|TypeCheckingEntityManager
parameter_list|(
name|CayenneEntityManager
name|entityManager
parameter_list|)
block|{
name|this
operator|.
name|entityManager
operator|=
name|entityManager
expr_stmt|;
block|}
specifier|protected
name|void
name|checkEntityType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|entityClass
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|entityClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null entity class"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Persistent
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|entityClass
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Entity class must be Persistent, got: "
operator|+
name|entityClass
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|checkEntityType
parameter_list|(
name|Object
name|entity
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null entity"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|entity
operator|instanceof
name|Persistent
operator|)
condition|)
block|{
name|String
name|className
init|=
operator|(
name|entity
operator|!=
literal|null
operator|)
condition|?
name|entity
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|"<null>"
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"entity must be Persistent: "
operator|+
name|className
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|entityManager
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|entityManager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|entity
parameter_list|)
block|{
name|checkEntityType
argument_list|(
name|entity
argument_list|)
expr_stmt|;
return|return
name|entityManager
operator|.
name|contains
argument_list|(
name|entity
argument_list|)
return|;
block|}
specifier|public
name|Query
name|createNamedQuery
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|entityManager
operator|.
name|createNamedQuery
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Query
name|createNativeQuery
parameter_list|(
name|String
name|sqlString
parameter_list|,
name|Class
name|resultClass
parameter_list|)
block|{
name|checkEntityType
argument_list|(
name|resultClass
argument_list|)
expr_stmt|;
return|return
name|entityManager
operator|.
name|createNativeQuery
argument_list|(
name|sqlString
argument_list|,
name|resultClass
argument_list|)
return|;
block|}
specifier|public
name|Query
name|createNativeQuery
parameter_list|(
name|String
name|sqlString
parameter_list|,
name|String
name|resultSetMapping
parameter_list|)
block|{
return|return
name|entityManager
operator|.
name|createNativeQuery
argument_list|(
name|sqlString
argument_list|,
name|resultSetMapping
argument_list|)
return|;
block|}
specifier|public
name|Query
name|createNativeQuery
parameter_list|(
name|String
name|sqlString
parameter_list|)
block|{
return|return
name|entityManager
operator|.
name|createNativeQuery
argument_list|(
name|sqlString
argument_list|)
return|;
block|}
specifier|public
name|Query
name|createQuery
parameter_list|(
name|String
name|ejbqlString
parameter_list|)
block|{
return|return
name|entityManager
operator|.
name|createQuery
argument_list|(
name|ejbqlString
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|find
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|entityClass
parameter_list|,
name|Object
name|primaryKey
parameter_list|)
block|{
name|checkEntityType
argument_list|(
name|entityClass
argument_list|)
expr_stmt|;
return|return
name|entityManager
operator|.
name|find
argument_list|(
name|entityClass
argument_list|,
name|primaryKey
argument_list|)
return|;
block|}
specifier|public
name|void
name|flush
parameter_list|()
block|{
name|entityManager
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DataChannel
name|getChannel
parameter_list|()
block|{
return|return
name|entityManager
operator|.
name|getChannel
argument_list|()
return|;
block|}
specifier|public
name|Object
name|getDelegate
parameter_list|()
block|{
return|return
name|entityManager
operator|.
name|getDelegate
argument_list|()
return|;
block|}
specifier|public
name|FlushModeType
name|getFlushMode
parameter_list|()
block|{
return|return
name|entityManager
operator|.
name|getFlushMode
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getReference
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|entityClass
parameter_list|,
name|Object
name|primaryKey
parameter_list|)
block|{
return|return
name|entityManager
operator|.
name|getReference
argument_list|(
name|entityClass
argument_list|,
name|primaryKey
argument_list|)
return|;
block|}
specifier|public
name|EntityTransaction
name|getTransaction
parameter_list|()
block|{
return|return
name|entityManager
operator|.
name|getTransaction
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isOpen
parameter_list|()
block|{
return|return
name|entityManager
operator|.
name|isOpen
argument_list|()
return|;
block|}
specifier|public
name|void
name|joinTransaction
parameter_list|()
block|{
name|entityManager
operator|.
name|joinTransaction
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|lock
parameter_list|(
name|Object
name|entity
parameter_list|,
name|LockModeType
name|lockMode
parameter_list|)
block|{
name|entityManager
operator|.
name|lock
argument_list|(
name|entity
argument_list|,
name|lockMode
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|merge
parameter_list|(
name|T
name|entity
parameter_list|)
block|{
name|checkEntityType
argument_list|(
name|entity
argument_list|)
expr_stmt|;
return|return
name|entityManager
operator|.
name|merge
argument_list|(
name|entity
argument_list|)
return|;
block|}
specifier|public
name|void
name|persist
parameter_list|(
name|Object
name|entity
parameter_list|)
block|{
name|checkEntityType
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|entityManager
operator|.
name|persist
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|refresh
parameter_list|(
name|Object
name|entity
parameter_list|)
block|{
name|entityManager
operator|.
name|refresh
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|Object
name|entity
parameter_list|)
block|{
name|checkEntityType
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|entityManager
operator|.
name|remove
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFlushMode
parameter_list|(
name|FlushModeType
name|flushMode
parameter_list|)
block|{
name|entityManager
operator|.
name|setFlushMode
argument_list|(
name|flushMode
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

