begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|FetchType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|ManyToMany
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|TreeNodeChild
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLEncoder
import|;
end_import

begin_class
specifier|public
class|class
name|JpaManyToMany
extends|extends
name|JpaRelationship
block|{
specifier|protected
name|String
name|mappedBy
decl_stmt|;
specifier|protected
name|JpaJoinTable
name|joinTable
decl_stmt|;
specifier|protected
name|String
name|orderBy
decl_stmt|;
specifier|protected
name|String
name|mapKey
decl_stmt|;
specifier|public
name|JpaManyToMany
parameter_list|()
block|{
block|}
specifier|public
name|JpaManyToMany
parameter_list|(
name|ManyToMany
name|annotation
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Void
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|annotation
operator|.
name|targetEntity
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|targetEntityName
operator|=
name|annotation
operator|.
name|targetEntity
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|annotation
operator|.
name|cascade
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|cascade
operator|==
literal|null
condition|)
block|{
name|cascade
operator|=
operator|new
name|JpaCascade
argument_list|()
expr_stmt|;
block|}
name|cascade
operator|.
name|getCascades
argument_list|()
operator|.
name|add
argument_list|(
name|annotation
operator|.
name|cascade
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|fetch
operator|=
name|annotation
operator|.
name|fetch
argument_list|()
expr_stmt|;
name|mappedBy
operator|=
name|annotation
operator|.
name|mappedBy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|encodeAsXML
parameter_list|(
name|XMLEncoder
name|encoder
parameter_list|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"<many-to-many"
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|" name=\""
operator|+
name|name
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|targetEntityName
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|" target-entity=\""
operator|+
name|targetEntityName
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetch
operator|!=
literal|null
operator|&&
name|fetch
operator|!=
name|FetchType
operator|.
name|LAZY
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|" fetch=\""
operator|+
name|fetch
operator|.
name|name
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mappedBy
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|" mapped-by=\""
operator|+
name|mappedBy
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|encoder
operator|.
name|println
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|indent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|orderBy
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"<order-by>"
operator|+
name|orderBy
operator|+
literal|"</order-by>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapKey
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"<map-key name=\""
operator|+
name|mapKey
operator|+
literal|"\"/>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|joinTable
operator|!=
literal|null
condition|)
block|{
name|joinTable
operator|.
name|encodeAsXML
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cascade
operator|!=
literal|null
condition|)
block|{
name|cascade
operator|.
name|encodeAsXML
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
block|}
name|encoder
operator|.
name|indent
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|println
argument_list|(
literal|"</many-to-many>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isToMany
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|TreeNodeChild
specifier|public
name|JpaJoinTable
name|getJoinTable
parameter_list|()
block|{
return|return
name|joinTable
return|;
block|}
specifier|public
name|String
name|getMappedBy
parameter_list|()
block|{
return|return
name|mappedBy
return|;
block|}
specifier|public
name|void
name|setMappedBy
parameter_list|(
name|String
name|mappedBy
parameter_list|)
block|{
name|this
operator|.
name|mappedBy
operator|=
name|mappedBy
expr_stmt|;
block|}
specifier|public
name|String
name|getOrderBy
parameter_list|()
block|{
return|return
name|orderBy
return|;
block|}
specifier|public
name|void
name|setOrderBy
parameter_list|(
name|String
name|orderBy
parameter_list|)
block|{
name|this
operator|.
name|orderBy
operator|=
name|orderBy
expr_stmt|;
block|}
specifier|public
name|void
name|setJoinTable
parameter_list|(
name|JpaJoinTable
name|joinTable
parameter_list|)
block|{
name|this
operator|.
name|joinTable
operator|=
name|joinTable
expr_stmt|;
block|}
specifier|public
name|String
name|getMapKey
parameter_list|()
block|{
return|return
name|mapKey
return|;
block|}
specifier|public
name|void
name|setMapKey
parameter_list|(
name|String
name|mapKey
parameter_list|)
block|{
name|this
operator|.
name|mapKey
operator|=
name|mapKey
expr_stmt|;
block|}
block|}
end_class

end_unit

