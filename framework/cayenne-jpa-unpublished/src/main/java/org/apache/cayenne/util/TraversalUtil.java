begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|JpaProviderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|ProjectPath
import|;
end_import

begin_comment
comment|/**  * Defines tree traversal utility methods. Object tree sematics is determined using  * {@link org.apache.cayenne.util.TreeNodeChild} property getter annotation.  *   */
end_comment

begin_class
specifier|public
class|class
name|TraversalUtil
block|{
specifier|static
specifier|final
name|ClassTraversalDescriptor
name|noopDescriptor
init|=
operator|new
name|ClassTraversalDescriptor
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ClassTraversalDescriptor
argument_list|>
name|descriptors
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ClassTraversalDescriptor
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Method
index|[]
name|traversableGetters
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|nodeType
parameter_list|)
block|{
name|Collection
argument_list|<
name|Method
argument_list|>
name|getters
init|=
literal|null
decl_stmt|;
name|Method
index|[]
name|methods
init|=
name|nodeType
operator|.
name|getMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|methods
index|[
name|i
index|]
operator|.
name|isAnnotationPresent
argument_list|(
name|TreeNodeChild
operator|.
name|class
argument_list|)
operator|&&
operator|!
name|Void
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|methods
index|[
name|i
index|]
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|getters
operator|==
literal|null
condition|)
block|{
name|getters
operator|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
name|getters
operator|.
name|add
argument_list|(
name|methods
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|getters
operator|!=
literal|null
condition|?
name|getters
operator|.
name|toArray
argument_list|(
operator|new
name|Method
index|[
name|getters
operator|.
name|size
argument_list|()
index|]
argument_list|)
else|:
literal|null
return|;
block|}
specifier|static
specifier|synchronized
name|ClassTraversalDescriptor
name|getDescriptor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|nodeType
parameter_list|)
block|{
name|String
name|typeName
init|=
name|nodeType
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ClassTraversalDescriptor
name|descriptor
init|=
name|descriptors
operator|.
name|get
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|descriptor
operator|==
literal|null
condition|)
block|{
name|Method
index|[]
name|getters
init|=
name|traversableGetters
argument_list|(
name|nodeType
argument_list|)
decl_stmt|;
name|descriptor
operator|=
name|getters
operator|!=
literal|null
condition|?
operator|new
name|ClassTraversalDescriptor
argument_list|(
name|getters
argument_list|)
else|:
name|noopDescriptor
expr_stmt|;
name|descriptors
operator|.
name|put
argument_list|(
name|typeName
argument_list|,
name|descriptor
argument_list|)
expr_stmt|;
block|}
return|return
name|descriptor
return|;
block|}
comment|/**      * Performs tree traversal with a given visitor starting with a given node.      */
specifier|public
specifier|static
name|void
name|traverse
parameter_list|(
name|Object
name|treeRoot
parameter_list|,
name|HierarchicalTreeVisitor
name|visitor
parameter_list|)
block|{
name|traverse
argument_list|(
name|treeRoot
argument_list|,
name|visitor
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|traverse
parameter_list|(
name|Object
name|node
parameter_list|,
name|HierarchicalTreeVisitor
name|visitor
parameter_list|,
name|ProjectPath
name|parentPath
parameter_list|)
block|{
name|ProjectPath
name|path
init|=
name|parentPath
operator|!=
literal|null
condition|?
name|parentPath
operator|.
name|appendToPath
argument_list|(
name|node
argument_list|)
else|:
operator|new
name|ProjectPath
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|visitor
operator|.
name|onStartNode
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|ClassTraversalDescriptor
name|descriptor
init|=
name|getDescriptor
argument_list|(
name|node
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|childTypes
init|=
name|descriptor
operator|.
name|getTraversableChildTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|childTypes
operator|!=
literal|null
operator|&&
name|childTypes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|HierarchicalTreeVisitor
name|childVisitor
init|=
name|visitor
operator|.
name|childVisitor
argument_list|(
name|path
argument_list|,
name|childTypes
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|childVisitor
operator|!=
literal|null
condition|)
block|{
name|Object
name|child
init|=
name|descriptor
operator|.
name|getTraversableChild
argument_list|(
name|node
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|else if
condition|(
name|child
operator|instanceof
name|Collection
condition|)
block|{
name|Collection
argument_list|<
name|?
argument_list|>
name|children
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|child
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
operator|&&
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Object
name|collectionChild
range|:
name|children
control|)
block|{
name|traverse
argument_list|(
name|collectionChild
argument_list|,
name|childVisitor
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|traverse
argument_list|(
name|child
argument_list|,
name|childVisitor
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|visitor
operator|.
name|onFinishNode
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|ClassTraversalDescriptor
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|traversableChildTypes
decl_stmt|;
name|Method
index|[]
name|traversableGetters
decl_stmt|;
name|ClassTraversalDescriptor
parameter_list|()
block|{
block|}
name|ClassTraversalDescriptor
parameter_list|(
name|Method
index|[]
name|traversableChildGetters
parameter_list|)
block|{
name|this
operator|.
name|traversableGetters
operator|=
name|traversableChildGetters
expr_stmt|;
name|this
operator|.
name|traversableChildTypes
operator|=
operator|new
name|Class
index|[
name|traversableChildGetters
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|traversableChildGetters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|traversableChildGetters
index|[
name|i
index|]
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
if|if
condition|(
name|Collection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|type
operator|=
name|traversableChildGetters
index|[
name|i
index|]
operator|.
name|getAnnotation
argument_list|(
name|TreeNodeChild
operator|.
name|class
argument_list|)
operator|.
name|type
argument_list|()
expr_stmt|;
comment|// TODO: andrus, 4/27/2006 - determine type from collection generics
comment|// metadata.
if|if
condition|(
name|void
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|JpaProviderException
argument_list|(
literal|"No type for collection defined: "
operator|+
name|traversableChildGetters
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|traversableChildTypes
index|[
name|i
index|]
operator|=
name|type
expr_stmt|;
block|}
block|}
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|getTraversableChildTypes
parameter_list|()
block|{
return|return
name|traversableChildTypes
return|;
block|}
name|Object
name|getTraversableChild
parameter_list|(
name|Object
name|object
parameter_list|,
name|int
name|childIndex
parameter_list|)
block|{
try|try
block|{
return|return
name|traversableGetters
index|[
name|childIndex
index|]
operator|.
name|invoke
argument_list|(
name|object
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JpaProviderException
argument_list|(
literal|"Error reading traversible property"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

