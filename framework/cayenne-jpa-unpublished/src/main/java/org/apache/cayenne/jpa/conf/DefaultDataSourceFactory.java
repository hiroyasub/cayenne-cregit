begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InitialContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|spi
operator|.
name|PersistenceUnitInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|ConnectionLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|QueryLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|ConnectionProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conn
operator|.
name|PoolManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|JpaProviderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * A {@link JpaDataSourceFactory} that attempts to create a DataSource based on Cayenne  * provider-specific properties. If such properties are not present, a DataSource is  * obtained via JNDI.  *<p>  * Properties are specified in the correspondign section of the<em>persistence.xml</em>  * file. All property names related to a given named DataSource must be prefixed with  *<em>"CayenneDataSource.[datasource name]."</em>. The following properties are  * supported:  *</p>  *<ul>  *<li>cayenne.ds.[datasource name].jdbc.driver - (required) JDBC driver class</li>  *<li>cayenne.ds.[datasource name].jdbc.url - (required) Database URL</li>  *<li>cayenne.ds.[datasource name].jdbc.username - Database login id</li>  *<li>cayenne.ds.[datasource name].jdbc.password - Database password</li>  *<li>cayenne.ds.[datasource name].jdbc.minConnections - (optional) Minimal pool size</li>  *<li>cayenne.ds.[datasource name].jdbc.maxConnections - (optional) Maximum pool size</li>  *</ul>  *<p>  * Another optional property is<em>cayenne.ds.[datasource name].cayenne.adapter</em>.  * It is not strictly related to the DataSource configuration, but Cayenne provider will  * use to configure the same {@link org.apache.cayenne.access.DataNode} that will use the  * DataSource. If not set, an AutoAdapter is used.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|DefaultDataSourceFactory
implements|implements
name|JpaDataSourceFactory
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DATA_SOURCE_PREFIX
init|=
literal|"cayenne.ds."
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MIN_CONNECTIONS_SUFFIX
init|=
literal|"jdbc.minConnections"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MAX_CONNECTIONS_SUFFIX
init|=
literal|"jdbc.maxConnections"
decl_stmt|;
specifier|public
name|DataSource
name|getJtaDataSource
parameter_list|(
name|String
name|name
parameter_list|,
name|PersistenceUnitInfo
name|info
parameter_list|)
block|{
return|return
name|getDataSource
argument_list|(
name|name
argument_list|,
name|info
argument_list|)
return|;
block|}
specifier|public
name|DataSource
name|getNonJtaDataSource
parameter_list|(
name|String
name|name
parameter_list|,
name|PersistenceUnitInfo
name|info
parameter_list|)
block|{
return|return
name|getDataSource
argument_list|(
name|name
argument_list|,
name|info
argument_list|)
return|;
block|}
specifier|protected
name|DataSource
name|getJndiDataSource
parameter_list|(
name|String
name|name
parameter_list|,
name|PersistenceUnitInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
operator|(
name|DataSource
operator|)
operator|new
name|InitialContext
argument_list|()
operator|.
name|lookup
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|namingEx
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|DataSource
name|getDataSource
parameter_list|(
name|String
name|name
parameter_list|,
name|PersistenceUnitInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DataSource
name|ds
init|=
name|getCayenneDataSource
argument_list|(
name|name
argument_list|,
name|info
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ds
operator|!=
literal|null
condition|?
name|ds
else|:
name|getJndiDataSource
argument_list|(
name|name
argument_list|,
name|info
argument_list|)
return|;
block|}
specifier|protected
name|DataSource
name|getCayenneDataSource
parameter_list|(
name|String
name|name
parameter_list|,
name|Properties
name|properties
parameter_list|)
block|{
name|String
name|driverName
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|getDriverKey
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|isEmptyString
argument_list|(
name|driverName
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|url
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|getUrlKey
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|isEmptyString
argument_list|(
name|url
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|minConnection
decl_stmt|;
try|try
block|{
name|minConnection
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|getMinConnectionsKey
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|minConnection
operator|=
literal|1
expr_stmt|;
block|}
name|int
name|maxConnection
decl_stmt|;
try|try
block|{
name|maxConnection
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|getMaxConnectionsKey
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|maxConnection
operator|=
literal|1
expr_stmt|;
block|}
comment|// this code follows Cayenne DriverDataSourceFactory logic...
try|try
block|{
return|return
operator|new
name|PoolManager
argument_list|(
name|driverName
argument_list|,
name|url
argument_list|,
name|minConnection
argument_list|,
name|maxConnection
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|getUserKey
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|getPasswordKey
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ConnectionLogger
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|QueryLogger
operator|.
name|logConnectFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JpaProviderException
argument_list|(
literal|"Error creating connection pool"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|String
name|getDriverKey
parameter_list|(
name|String
name|dataSourceName
parameter_list|)
block|{
return|return
name|JpaUnit
operator|.
name|getDataSourcePropertyName
argument_list|(
name|dataSourceName
argument_list|,
name|ConnectionProperties
operator|.
name|DRIVER_KEY
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getUrlKey
parameter_list|(
name|String
name|dataSourceName
parameter_list|)
block|{
return|return
name|JpaUnit
operator|.
name|getDataSourcePropertyName
argument_list|(
name|dataSourceName
argument_list|,
name|ConnectionProperties
operator|.
name|URL_KEY
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getUserKey
parameter_list|(
name|String
name|dataSourceName
parameter_list|)
block|{
return|return
name|JpaUnit
operator|.
name|getDataSourcePropertyName
argument_list|(
name|dataSourceName
argument_list|,
name|ConnectionProperties
operator|.
name|USER_NAME_KEY
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getPasswordKey
parameter_list|(
name|String
name|dataSourceName
parameter_list|)
block|{
return|return
name|JpaUnit
operator|.
name|getDataSourcePropertyName
argument_list|(
name|dataSourceName
argument_list|,
name|ConnectionProperties
operator|.
name|PASSWORD_KEY
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getMinConnectionsKey
parameter_list|(
name|String
name|dataSourceName
parameter_list|)
block|{
return|return
name|JpaUnit
operator|.
name|getDataSourcePropertyName
argument_list|(
name|dataSourceName
argument_list|,
name|MIN_CONNECTIONS_SUFFIX
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getMaxConnectionsKey
parameter_list|(
name|String
name|dataSourceName
parameter_list|)
block|{
return|return
name|JpaUnit
operator|.
name|getDataSourcePropertyName
argument_list|(
name|dataSourceName
argument_list|,
name|MAX_CONNECTIONS_SUFFIX
argument_list|)
return|;
block|}
block|}
end_class

end_unit

