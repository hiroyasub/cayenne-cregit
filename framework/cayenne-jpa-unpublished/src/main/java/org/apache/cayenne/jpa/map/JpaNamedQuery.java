begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|NamedQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|TreeNodeChild
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLSerializable
import|;
end_import

begin_class
specifier|public
class|class
name|JpaNamedQuery
implements|implements
name|XMLSerializable
block|{
specifier|protected
name|String
name|name
decl_stmt|;
specifier|protected
name|String
name|query
decl_stmt|;
specifier|protected
name|Collection
argument_list|<
name|JpaQueryHint
argument_list|>
name|hints
decl_stmt|;
specifier|public
name|JpaNamedQuery
parameter_list|()
block|{
block|}
specifier|public
name|JpaNamedQuery
parameter_list|(
name|NamedQuery
name|annotation
parameter_list|)
block|{
name|name
operator|=
name|annotation
operator|.
name|name
argument_list|()
expr_stmt|;
name|query
operator|=
name|annotation
operator|.
name|query
argument_list|()
expr_stmt|;
name|getHints
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|annotation
operator|.
name|hints
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|hints
operator|.
name|add
argument_list|(
operator|new
name|JpaQueryHint
argument_list|(
name|annotation
operator|.
name|hints
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|encodeAsXML
parameter_list|(
name|XMLEncoder
name|encoder
parameter_list|)
block|{
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
specifier|public
name|void
name|setQuery
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
block|}
annotation|@
name|TreeNodeChild
argument_list|(
name|type
operator|=
name|JpaQueryHint
operator|.
name|class
argument_list|)
specifier|public
name|Collection
argument_list|<
name|JpaQueryHint
argument_list|>
name|getHints
parameter_list|()
block|{
if|if
condition|(
name|hints
operator|==
literal|null
condition|)
block|{
name|hints
operator|=
operator|new
name|ArrayList
argument_list|<
name|JpaQueryHint
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|hints
return|;
block|}
comment|/**      * Returns a hint matching hint name.      */
specifier|public
name|JpaQueryHint
name|getHint
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|hints
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|JpaQueryHint
name|hint
range|:
name|hints
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|hint
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|hint
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

