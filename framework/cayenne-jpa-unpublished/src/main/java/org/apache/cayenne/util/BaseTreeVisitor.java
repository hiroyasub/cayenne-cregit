begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|ProjectPath
import|;
end_import

begin_comment
comment|/**  * A common superclass for specialized tree visitors. Can also be used as a noop  * pass-through visitor for nodes that need no processing by themselves.  *   */
end_comment

begin_comment
comment|// TODO, andrus, 4/24/2006 - move to Cayenne core in 2.0
end_comment

begin_class
specifier|public
class|class
name|BaseTreeVisitor
implements|implements
name|HierarchicalTreeVisitor
block|{
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|HierarchicalTreeVisitor
argument_list|>
name|childVisitors
decl_stmt|;
specifier|protected
name|boolean
name|terminatingOnNoChildVisitor
decl_stmt|;
specifier|public
name|BaseTreeVisitor
parameter_list|()
block|{
name|this
operator|.
name|terminatingOnNoChildVisitor
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isTerminatingOnNoChildVisitor
parameter_list|()
block|{
return|return
name|terminatingOnNoChildVisitor
return|;
block|}
specifier|public
name|void
name|setTerminatingOnNoChildVisitor
parameter_list|(
name|boolean
name|terminatingOnNoChildVisitor
parameter_list|)
block|{
name|this
operator|.
name|terminatingOnNoChildVisitor
operator|=
name|terminatingOnNoChildVisitor
expr_stmt|;
block|}
specifier|public
name|HierarchicalTreeVisitor
name|childVisitor
parameter_list|(
name|ProjectPath
name|path
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|childType
parameter_list|)
block|{
if|if
condition|(
name|childVisitors
operator|==
literal|null
condition|)
block|{
return|return
name|terminatingOnNoChildVisitor
condition|?
literal|null
else|:
name|this
return|;
block|}
name|HierarchicalTreeVisitor
name|childVisitor
init|=
name|childVisitors
operator|.
name|get
argument_list|(
name|childType
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|childVisitor
operator|!=
literal|null
condition|?
name|childVisitor
else|:
name|terminatingOnNoChildVisitor
condition|?
literal|null
else|:
name|this
return|;
block|}
specifier|public
name|void
name|onFinishNode
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
block|}
specifier|public
name|boolean
name|onStartNode
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|addChildVisitor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|childClass
parameter_list|,
name|HierarchicalTreeVisitor
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|childVisitors
operator|==
literal|null
condition|)
block|{
name|childVisitors
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HierarchicalTreeVisitor
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|childVisitors
operator|.
name|put
argument_list|(
name|childClass
operator|.
name|getName
argument_list|()
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

