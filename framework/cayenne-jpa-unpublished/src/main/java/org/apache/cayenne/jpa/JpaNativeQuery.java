begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLTemplate
import|;
end_import

begin_class
class|class
name|JpaNativeQuery
extends|extends
name|JpaQuery
block|{
specifier|private
specifier|static
specifier|final
name|String
name|POSITIONAL_PARAM_PREFIX
init|=
literal|"positional_"
decl_stmt|;
name|JpaNativeQuery
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|String
name|sqlString
parameter_list|,
name|Class
name|resultClass
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|setQuery
argument_list|(
operator|new
name|SQLTemplate
argument_list|(
name|resultClass
argument_list|,
name|processSQLString
argument_list|(
name|sqlString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|JpaNativeQuery
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|String
name|sqlString
parameter_list|,
name|String
name|dataMapName
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|DataMap
name|map
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDataMap
argument_list|(
name|dataMapName
argument_list|)
decl_stmt|;
name|setQuery
argument_list|(
operator|new
name|SQLTemplate
argument_list|(
name|map
argument_list|,
name|processSQLString
argument_list|(
name|sqlString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|processSQLString
parameter_list|(
name|String
name|sqlString
parameter_list|)
block|{
comment|// named parameters are like ":parametername" and positional parameters
comment|// are like "?123". SQLTemplate support "$parametername"
comment|// TODO: improve convert as ':' could be used in sql. e.x. in
comment|// non-parametrized parameter or postgresql cast.
name|sqlString
operator|=
name|sqlString
operator|.
name|replace
argument_list|(
literal|':'
argument_list|,
literal|'$'
argument_list|)
expr_stmt|;
comment|// handle positional parameters like named
if|if
condition|(
name|sqlString
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// convert "?123" to "$positional_123"
name|sqlString
operator|=
name|sqlString
operator|.
name|replaceAll
argument_list|(
literal|"\\?([0-9]+)"
argument_list|,
literal|"\\$"
operator|+
name|POSITIONAL_PARAM_PREFIX
operator|+
literal|"$1"
argument_list|)
expr_stmt|;
block|}
return|return
name|sqlString
return|;
block|}
comment|/**      * Bind an argument to a positional parameter.      *       * @param position      * @param value      * @return the same query instance      * @throws IllegalArgumentException if position does not correspond to positional      *             parameter of query or argument is of incorrect type      */
specifier|public
name|Query
name|setParameter
parameter_list|(
name|int
name|position
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
comment|// Positional parameters are designated by the question
comment|// mark(?) prefix followed by an integer. For example: ?1.
name|String
name|name
init|=
name|POSITIONAL_PARAM_PREFIX
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|position
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|setParameter
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid positional parameter: "
operator|+
name|position
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

