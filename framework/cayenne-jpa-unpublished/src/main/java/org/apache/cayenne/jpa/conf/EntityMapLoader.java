begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|JarURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|Embeddable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|MappedSuperclass
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|spi
operator|.
name|PersistenceUnitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|JpaProviderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaClassDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaEntityMap
import|;
end_import

begin_comment
comment|/**  * Loads JPA mapping information from all sources per JPA specification.  *<h3>Specification Documentation, Chapter 6.2.1.6</h3>  *<p>  * The set of managed persistence classes that are managed by a persistence unit is  * defined by using one or more of the following:  *<ul>  *<li>One or more object/relational mapping XML files  *<li>One or more jar files that will be searched for classes  *<li>An explicit list of the classes  *<li>The annotated managed persistence classes contained in the root of the persistence  * unit (unless the exclude-unlisted-classes element is specified) [Java SE doesn't have  * to support that].  *</ul>  *<p>  * The result is undefined if multiple mapping files (including any orm.xml file)  * referenced within a single persistence unit contain overlapping mapping information for  * any given class.  *</p>  *<p>  * The resulting set of entities managed by the persistence unit [and contained in the  * returned entity map] is the union of these sources, with the mapping metadata  * annotations (or annotation defaults) for any given class being overridden by the XML  * mapping information file if there are both annotations as well as XML mappings for that  * class. The minimum portable level of overriding is at the level of the persistent field  * or property.  *</p>  *   */
end_comment

begin_class
specifier|public
class|class
name|EntityMapLoader
block|{
specifier|static
specifier|final
name|String
name|DESCRIPTOR_LOCATION
init|=
literal|"META-INF/orm.xml"
decl_stmt|;
specifier|protected
name|EntityMapLoaderContext
name|context
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|JpaClassDescriptor
argument_list|>
name|descriptors
decl_stmt|;
comment|/**      * Creates an EntityMapLoader for the persistence unit, merging entity information      * from all locations supported by the JPA specification.      */
specifier|public
name|EntityMapLoader
parameter_list|(
name|PersistenceUnitInfo
name|persistenceUnit
parameter_list|)
block|{
name|loadEntityMap
argument_list|(
name|persistenceUnit
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns an entity map with entity      */
specifier|public
name|JpaEntityMap
name|getEntityMap
parameter_list|()
block|{
return|return
name|context
operator|.
name|getEntityMap
argument_list|()
return|;
block|}
specifier|public
name|EntityMapLoaderContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
comment|/**      * Loads a combined entity map including managed class descriptors from all supported      * locations.      */
specifier|protected
name|void
name|loadEntityMap
parameter_list|(
name|PersistenceUnitInfo
name|persistenceUnit
parameter_list|)
throws|throws
name|JpaProviderException
block|{
name|this
operator|.
name|context
operator|=
operator|new
name|EntityMapLoaderContext
argument_list|(
name|persistenceUnit
argument_list|)
expr_stmt|;
try|try
block|{
name|loadFromAnnotations
argument_list|(
name|persistenceUnit
argument_list|)
expr_stmt|;
name|updateFromXML
argument_list|(
name|persistenceUnit
argument_list|)
expr_stmt|;
name|updateInheritanceHierarchy
argument_list|()
expr_stmt|;
name|updateFromDefaults
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JpaProviderException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JpaProviderException
argument_list|(
literal|"Error loading ORM descriptors"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|updateInheritanceHierarchy
parameter_list|()
block|{
name|JpaEntityMap
name|map
init|=
name|getEntityMap
argument_list|()
decl_stmt|;
for|for
control|(
name|JpaEntity
name|entity
range|:
name|map
operator|.
name|getEntities
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|superclass
init|=
name|entity
operator|.
name|getClassDescriptor
argument_list|()
operator|.
name|getManagedClass
argument_list|()
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
while|while
condition|(
name|superclass
operator|!=
literal|null
operator|&&
operator|!
name|superclass
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"java.lang.Object"
argument_list|)
condition|)
block|{
name|JpaEntity
name|superEntity
init|=
name|map
operator|.
name|getEntity
argument_list|(
name|superclass
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|superEntity
operator|!=
literal|null
condition|)
block|{
name|entity
operator|.
name|setSuperEntity
argument_list|(
name|superEntity
argument_list|)
expr_stmt|;
break|break;
block|}
name|superclass
operator|=
name|superclass
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Updates missing values with spec-compilant defaults.      */
specifier|protected
name|void
name|updateFromDefaults
parameter_list|()
block|{
operator|new
name|EntityMapDefaultsProcessor
argument_list|()
operator|.
name|applyDefaults
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * Updates mapping with data loaded from XML. JPA specification gives some leeway in      * processing conflicting mapping files. Cayenne provider strategy is "last mapping      * file overrides all".      *<h3>Specification Documentation, Chapter 6.2.1.6</h3>      *<p>      * An<em>orm.xml</em> file may be specified in the META-INF directory in the root      * of the persistence unit or in the META-INF directory of any jar file referenced by      * the persistence.xml. Alternatively, or in addition, other mapping files maybe      * referenced by the mapping-file elements of the persistence-unit element, and may be      * present anywhere on the classpath. An orm.xml file or other mapping file is loaded      * as a resource by the persistence provider.      */
specifier|protected
name|void
name|updateFromXML
parameter_list|(
name|PersistenceUnitInfo
name|unit
parameter_list|)
throws|throws
name|IOException
block|{
name|EntityMapMergeProcessor
name|merger
init|=
operator|new
name|EntityMapMergeProcessor
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|loadedLocations
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|EntityMapXMLLoader
name|loader
init|=
operator|new
name|EntityMapXMLLoader
argument_list|(
name|context
operator|.
name|getTempClassLoader
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// 1. load from the standard file called orm.xml
name|loadedLocations
operator|.
name|add
argument_list|(
name|DESCRIPTOR_LOCATION
argument_list|)
expr_stmt|;
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|standardDescriptors
init|=
name|context
operator|.
name|getTempClassLoader
argument_list|()
operator|.
name|getResources
argument_list|(
name|DESCRIPTOR_LOCATION
argument_list|)
decl_stmt|;
while|while
condition|(
name|standardDescriptors
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|JpaEntityMap
name|map
init|=
name|loader
operator|.
name|getEntityMap
argument_list|(
name|standardDescriptors
operator|.
name|nextElement
argument_list|()
argument_list|)
decl_stmt|;
name|merger
operator|.
name|mergeOverride
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|// 2. load from orm.xml within the jars
comment|// TODO: andrus, 4/20/2006 - load from the jar files
comment|// 3. load from explicitly specified descriptors
for|for
control|(
name|String
name|descriptor
range|:
name|unit
operator|.
name|getMappingFileNames
argument_list|()
control|)
block|{
comment|// avoid loading duplicates, such as META-INF/orm.xml that is also explicitly
comment|// mentioned in the unit...
if|if
condition|(
name|loadedLocations
operator|.
name|add
argument_list|(
name|descriptor
argument_list|)
condition|)
block|{
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|mappedDescriptors
init|=
name|context
operator|.
name|getTempClassLoader
argument_list|()
operator|.
name|getResources
argument_list|(
name|descriptor
argument_list|)
decl_stmt|;
while|while
condition|(
name|mappedDescriptors
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|JpaEntityMap
name|map
init|=
name|loader
operator|.
name|getEntityMap
argument_list|(
name|mappedDescriptors
operator|.
name|nextElement
argument_list|()
argument_list|)
decl_stmt|;
name|merger
operator|.
name|mergeOverride
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Loads JpaEntityMap based on metadata annotations of persistent classes.      */
specifier|protected
name|void
name|loadFromAnnotations
parameter_list|(
name|PersistenceUnitInfo
name|persistenceUnit
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|managedClassMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// must use Unit class loader to prevent loading an un-enahnced class in the
comment|// app ClassLoader
name|ClassLoader
name|loader
init|=
name|context
operator|.
name|getTempClassLoader
argument_list|()
decl_stmt|;
comment|// load explicitly mentioned classes
name|Collection
argument_list|<
name|String
argument_list|>
name|explicitClasses
init|=
name|persistenceUnit
operator|.
name|getManagedClassNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|explicitClasses
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|className
range|:
name|explicitClasses
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|managedClass
decl_stmt|;
try|try
block|{
name|managedClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JpaProviderException
argument_list|(
literal|"Class not found: "
operator|+
name|className
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|managedClassMap
operator|.
name|put
argument_list|(
name|className
argument_list|,
name|managedClass
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now detect potential managed classes from PU root and extra jars
if|if
condition|(
operator|!
name|persistenceUnit
operator|.
name|excludeUnlistedClasses
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|implicitClasses
init|=
name|listImplicitClasses
argument_list|(
name|persistenceUnit
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|className
range|:
name|implicitClasses
control|)
block|{
if|if
condition|(
name|managedClassMap
operator|.
name|containsKey
argument_list|(
name|className
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|managedClass
decl_stmt|;
try|try
block|{
name|managedClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JpaProviderException
argument_list|(
literal|"Class not found: "
operator|+
name|className
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|managedClass
operator|.
name|getAnnotation
argument_list|(
name|Entity
operator|.
name|class
argument_list|)
operator|!=
literal|null
operator|||
name|managedClass
operator|.
name|getAnnotation
argument_list|(
name|MappedSuperclass
operator|.
name|class
argument_list|)
operator|!=
literal|null
operator|||
name|managedClass
operator|.
name|getAnnotation
argument_list|(
name|Embeddable
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|managedClassMap
operator|.
name|put
argument_list|(
name|className
argument_list|,
name|managedClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|managedClassMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|EntityMapAnnotationLoader
name|annotationLoader
init|=
operator|new
name|EntityMapAnnotationLoader
argument_list|(
name|context
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|managedClass
range|:
name|managedClassMap
operator|.
name|values
argument_list|()
control|)
block|{
name|annotationLoader
operator|.
name|loadClassMapping
argument_list|(
name|managedClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns a collection of all classes that are located in the unit root and unit      * extra jars.      */
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|listImplicitClasses
parameter_list|(
name|PersistenceUnitInfo
name|persistenceUnit
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|URL
name|rootURL
init|=
name|persistenceUnit
operator|.
name|getPersistenceUnitRootUrl
argument_list|()
decl_stmt|;
if|if
condition|(
name|rootURL
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|rootURL
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|locateClassesInFolder
argument_list|(
name|rootURL
argument_list|,
name|classes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|locateClassesInJar
argument_list|(
name|rootURL
argument_list|,
name|classes
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|URL
name|jarURL
range|:
name|persistenceUnit
operator|.
name|getJarFileUrls
argument_list|()
control|)
block|{
if|if
condition|(
name|jarURL
operator|!=
literal|null
condition|)
block|{
comment|// that's unlikely ... but we can handle it just in case...
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|jarURL
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|locateClassesInFolder
argument_list|(
name|jarURL
argument_list|,
name|classes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|locateClassesInJar
argument_list|(
name|jarURL
argument_list|,
name|classes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|classes
return|;
block|}
specifier|private
name|void
name|locateClassesInFolder
parameter_list|(
name|URL
name|dirURL
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|classes
parameter_list|)
block|{
name|File
name|root
decl_stmt|;
try|try
block|{
name|root
operator|=
operator|new
name|File
argument_list|(
name|dirURL
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JpaProviderException
argument_list|(
literal|"Error converting url to file: "
operator|+
name|dirURL
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|locateClassesInFolder
argument_list|(
name|root
argument_list|,
name|root
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
name|classes
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|locateClassesInFolder
parameter_list|(
name|File
name|folder
parameter_list|,
name|int
name|rootPathLength
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|classes
parameter_list|)
block|{
name|File
index|[]
name|files
init|=
name|folder
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|files
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|locateClassesInFolder
argument_list|(
name|files
index|[
name|i
index|]
argument_list|,
name|rootPathLength
argument_list|,
name|classes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|name
init|=
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
name|int
name|suffixLen
init|=
literal|".class"
operator|.
name|length
argument_list|()
decl_stmt|;
name|String
name|absPath
init|=
name|files
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|absPath
operator|.
name|length
argument_list|()
operator|>
name|rootPathLength
operator|+
name|suffixLen
condition|)
block|{
name|classes
operator|.
name|add
argument_list|(
name|absPath
operator|.
name|substring
argument_list|(
name|rootPathLength
argument_list|,
name|absPath
operator|.
name|length
argument_list|()
operator|-
name|suffixLen
argument_list|)
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|locateClassesInJar
parameter_list|(
name|URL
name|jarURL
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|classes
parameter_list|)
block|{
try|try
block|{
name|JarURLConnection
name|connection
init|=
operator|(
name|JarURLConnection
operator|)
name|jarURL
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|JarFile
name|jar
init|=
name|connection
operator|.
name|getJarFile
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|JarEntry
argument_list|>
name|entries
init|=
name|jar
operator|.
name|entries
argument_list|()
decl_stmt|;
while|while
condition|(
name|entries
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|JarEntry
name|e
init|=
name|entries
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|e
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
name|int
name|suffixLen
init|=
literal|".class"
operator|.
name|length
argument_list|()
decl_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
name|suffixLen
argument_list|)
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JpaProviderException
argument_list|(
literal|"Error reading jar contents: "
operator|+
name|jarURL
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

