begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|UniqueConstraint
import|;
end_import

begin_class
specifier|public
class|class
name|JpaUniqueConstraint
block|{
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|columnNames
decl_stmt|;
specifier|public
name|JpaUniqueConstraint
parameter_list|()
block|{
block|}
specifier|public
name|JpaUniqueConstraint
parameter_list|(
name|UniqueConstraint
name|annotation
parameter_list|)
block|{
comment|// resolve collection
name|getColumnNames
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|annotation
operator|.
name|columnNames
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|columnNames
operator|.
name|add
argument_list|(
name|annotation
operator|.
name|columnNames
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getColumnNames
parameter_list|()
block|{
if|if
condition|(
name|columnNames
operator|==
literal|null
condition|)
block|{
name|columnNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
name|columnNames
return|;
block|}
block|}
end_class

end_unit

