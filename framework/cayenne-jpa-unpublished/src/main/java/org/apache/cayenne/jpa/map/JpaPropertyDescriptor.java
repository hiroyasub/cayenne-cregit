begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|AnnotatedElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|JpaProviderException
import|;
end_import

begin_comment
comment|/**  * A descriptor of a class property that may or may not be persistent.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|JpaPropertyDescriptor
block|{
specifier|protected
name|AnnotatedElement
name|member
decl_stmt|;
specifier|protected
name|String
name|name
decl_stmt|;
specifier|protected
name|Class
name|type
decl_stmt|;
specifier|protected
name|Type
name|genericType
decl_stmt|;
specifier|protected
name|Class
name|targetEntityType
decl_stmt|;
specifier|public
name|JpaPropertyDescriptor
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
name|this
operator|.
name|member
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|field
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|field
operator|.
name|getType
argument_list|()
expr_stmt|;
name|initTargetEntityType
argument_list|(
name|field
operator|.
name|getGenericType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JpaPropertyDescriptor
parameter_list|(
name|Method
name|getter
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|JpaClassDescriptor
operator|.
name|propertyNameForGetter
argument_list|(
name|getter
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JpaProviderException
argument_list|(
literal|"Invalid property getter name: "
operator|+
name|getter
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|member
operator|=
name|getter
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|getter
operator|.
name|getReturnType
argument_list|()
expr_stmt|;
name|initTargetEntityType
argument_list|(
name|getter
operator|.
name|getGenericReturnType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|initTargetEntityType
parameter_list|(
name|Type
name|genericType
parameter_list|)
block|{
name|this
operator|.
name|targetEntityType
operator|=
name|Void
operator|.
name|TYPE
expr_stmt|;
if|if
condition|(
name|Collection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|genericType
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|pType
init|=
operator|(
name|ParameterizedType
operator|)
name|genericType
decl_stmt|;
name|Type
index|[]
name|types
init|=
name|pType
operator|.
name|getActualTypeArguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|.
name|length
operator|==
literal|1
operator|&&
name|types
index|[
literal|0
index|]
operator|instanceof
name|Class
condition|)
block|{
name|this
operator|.
name|targetEntityType
operator|=
operator|(
name|Class
operator|)
name|types
index|[
literal|0
index|]
expr_stmt|;
return|return;
block|}
block|}
block|}
if|else if
condition|(
name|Map
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|genericType
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|pType
init|=
operator|(
name|ParameterizedType
operator|)
name|genericType
decl_stmt|;
name|Type
index|[]
name|types
init|=
name|pType
operator|.
name|getActualTypeArguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|.
name|length
operator|==
literal|2
operator|&&
name|types
index|[
literal|1
index|]
operator|instanceof
name|Class
condition|)
block|{
name|this
operator|.
name|targetEntityType
operator|=
operator|(
name|Class
operator|)
name|types
index|[
literal|1
index|]
expr_stmt|;
return|return;
block|}
block|}
block|}
else|else
block|{
name|targetEntityType
operator|=
name|type
expr_stmt|;
block|}
block|}
specifier|public
name|AnnotatedElement
name|getMember
parameter_list|()
block|{
return|return
name|member
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|Class
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|Class
name|getTargetEntityType
parameter_list|()
block|{
return|return
name|Void
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|targetEntityType
argument_list|)
condition|?
literal|null
else|:
name|targetEntityType
return|;
block|}
specifier|public
name|boolean
name|isStringType
parameter_list|()
block|{
return|return
name|String
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * Returns true if the property is a default simple attribute.      *<h3>JPA Spec, 2.1.6:</h3>      * If the type of the field or property is one of the following, it is mapped in the      * same way as it would if it were annotated as Basic: Java primitive types, wrappers      * of the primitive types, java.lang.String, java.math.BigInteger,      * java.math.BigDecimal, java.util.Date, java.util.Calendar, java.sql.Date,      * java.sql.Time, java.sql.Timestamp, byte[], Byte[], char[], Character[], enums, any      * other type that implements Serializable. See Sections 9.1.16 through 9.1.19. It is      * an error if no annotation is present and none of the above rules apply.      */
specifier|public
name|boolean
name|isDefaultNonRelationalType
parameter_list|()
block|{
return|return
name|isDefaultNonRelationalType
argument_list|(
name|getTargetEntityType
argument_list|()
argument_list|)
return|;
block|}
name|boolean
name|isDefaultNonRelationalType
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|isPrimitive
argument_list|()
operator|||
name|type
operator|.
name|isEnum
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|type
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|isDefaultNonRelationalType
argument_list|(
name|type
operator|.
name|getComponentType
argument_list|()
argument_list|)
return|;
block|}
comment|// it is sufficient to check serializability as all the types mentioned in the
comment|// spec are serializable
return|return
name|Serializable
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
end_class

end_unit

