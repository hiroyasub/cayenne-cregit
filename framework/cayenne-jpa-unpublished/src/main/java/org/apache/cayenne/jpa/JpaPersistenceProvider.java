begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|spi
operator|.
name|PersistenceProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|spi
operator|.
name|PersistenceUnitInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|spi
operator|.
name|PersistenceUnitTransactionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|instrument
operator|.
name|InstrumentUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|conf
operator|.
name|UnitLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|instrument
operator|.
name|InstrumentingUnitFactory
import|;
end_import

begin_comment
comment|/**  *<code>PersistenceProvider</code> implementation that doesn't provide its own ORM  * stack. Useful as a base implementation of concrete providers.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|JpaPersistenceProvider
implements|implements
name|PersistenceProvider
block|{
comment|// common properties
specifier|public
specifier|static
specifier|final
name|String
name|PROVIDER_PROPERTY
init|=
literal|"javax.persistence.provider"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TRANSACTION_TYPE_PROPERTY
init|=
literal|"javax.persistence.transactionType"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JTA_DATA_SOURCE_PROPERTY
init|=
literal|"javax.persistence.jtaDataSource"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NON_JTA_DATA_SOURCE_PROPERTY
init|=
literal|"javax.persistence.nonJtaDataSource"
decl_stmt|;
comment|// provider-specific properties
specifier|public
specifier|static
specifier|final
name|String
name|DATA_SOURCE_FACTORY_PROPERTY
init|=
literal|"org.apache.cayenne.jpa.jpaDataSourceFactory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|UNIT_FACTORY_PROPERTY
init|=
literal|"org.apache.cayenne.jpa.jpaUnitFactory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INSTRUMENTING_FACTORY_CLASS
init|=
name|InstrumentingUnitFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|protected
name|boolean
name|validateDescriptors
decl_stmt|;
specifier|protected
name|UnitLoader
name|unitLoader
decl_stmt|;
specifier|protected
name|Properties
name|defaultProperties
decl_stmt|;
comment|/**      * Creates a new JpaPersistenceProvider configuring it with default appropriate for      * running in conatiner.      */
specifier|public
name|JpaPersistenceProvider
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * A constructor that allows to specify whether descriptors should be validated      * against schema.      */
specifier|public
name|JpaPersistenceProvider
parameter_list|(
name|boolean
name|validateDescriptors
parameter_list|)
block|{
name|this
operator|.
name|validateDescriptors
operator|=
name|validateDescriptors
expr_stmt|;
name|this
operator|.
name|defaultProperties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|configureEnvironmentProperties
argument_list|()
expr_stmt|;
name|configureDefaultProperties
argument_list|()
expr_stmt|;
block|}
comment|/**      * Loads default properties from the Java environment.      */
specifier|protected
name|void
name|configureEnvironmentProperties
parameter_list|()
block|{
name|String
name|dsFactory
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|DATA_SOURCE_FACTORY_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|dsFactory
operator|!=
literal|null
condition|)
block|{
name|defaultProperties
operator|.
name|put
argument_list|(
name|DATA_SOURCE_FACTORY_PROPERTY
argument_list|,
name|dsFactory
argument_list|)
expr_stmt|;
block|}
name|String
name|transactionType
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|TRANSACTION_TYPE_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|transactionType
operator|!=
literal|null
condition|)
block|{
name|defaultProperties
operator|.
name|put
argument_list|(
name|TRANSACTION_TYPE_PROPERTY
argument_list|,
name|transactionType
argument_list|)
expr_stmt|;
block|}
name|String
name|unitFactory
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|UNIT_FACTORY_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|unitFactory
operator|==
literal|null
operator|&&
name|InstrumentUtil
operator|.
name|isAgentLoaded
argument_list|()
condition|)
block|{
name|unitFactory
operator|=
name|INSTRUMENTING_FACTORY_CLASS
expr_stmt|;
block|}
if|if
condition|(
name|unitFactory
operator|!=
literal|null
condition|)
block|{
name|defaultProperties
operator|.
name|put
argument_list|(
name|UNIT_FACTORY_PROPERTY
argument_list|,
name|unitFactory
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Configures default properties.      */
specifier|protected
name|void
name|configureDefaultProperties
parameter_list|()
block|{
if|if
condition|(
operator|!
name|defaultProperties
operator|.
name|containsKey
argument_list|(
name|DATA_SOURCE_FACTORY_PROPERTY
argument_list|)
condition|)
block|{
name|defaultProperties
operator|.
name|put
argument_list|(
name|DATA_SOURCE_FACTORY_PROPERTY
argument_list|,
name|DefaultDataSourceFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|defaultProperties
operator|.
name|containsKey
argument_list|(
name|TRANSACTION_TYPE_PROPERTY
argument_list|)
condition|)
block|{
name|defaultProperties
operator|.
name|put
argument_list|(
name|TRANSACTION_TYPE_PROPERTY
argument_list|,
name|PersistenceUnitTransactionType
operator|.
name|JTA
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|EntityManagerFactory
name|createEntityManagerFactory
parameter_list|(
name|String
name|emName
parameter_list|,
name|Map
name|map
parameter_list|)
block|{
comment|// TODO: Andrus, 2/11/2006 - cache loaded units (or factories)...
name|JpaUnit
name|ui
init|=
name|getUnitLoader
argument_list|()
operator|.
name|loadUnit
argument_list|(
name|emName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ui
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// override properties
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|ui
operator|.
name|addProperties
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|// set default properties if they are not set explicitly
name|Properties
name|properties
init|=
name|ui
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|property
range|:
name|defaultProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|properties
operator|.
name|containsKey
argument_list|(
name|property
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|property
operator|.
name|getKey
argument_list|()
argument_list|,
name|property
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check if we are allowed to handle this unit (JPA Spec, 7.2)
name|String
name|provider
init|=
name|ui
operator|.
name|getPersistenceProviderClassName
argument_list|()
decl_stmt|;
if|if
condition|(
name|provider
operator|!=
literal|null
operator|&&
operator|!
name|provider
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|createContainerEntityManagerFactory
argument_list|(
name|ui
argument_list|,
name|map
argument_list|)
return|;
block|}
comment|/**      * Returns unit loader, lazily creating it on first invocation.      */
specifier|protected
name|UnitLoader
name|getUnitLoader
parameter_list|()
block|{
if|if
condition|(
name|unitLoader
operator|==
literal|null
condition|)
block|{
name|JpaUnitFactory
name|factory
init|=
literal|null
decl_stmt|;
name|String
name|unitFactoryName
init|=
name|getDefaultProperty
argument_list|(
name|UNIT_FACTORY_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|unitFactoryName
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Class
name|factoryClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|unitFactoryName
argument_list|,
literal|true
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|factory
operator|=
operator|(
name|JpaUnitFactory
operator|)
name|factoryClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JpaProviderException
argument_list|(
literal|"Error loading unit infor factory '"
operator|+
name|unitFactoryName
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|unitLoader
operator|=
operator|new
name|UnitLoader
argument_list|(
name|factory
argument_list|,
name|validateDescriptors
argument_list|)
expr_stmt|;
block|}
return|return
name|unitLoader
return|;
block|}
comment|/**      * @param info metadata for use by PersistenceProvider.      * @param map a map of integration=level properties for use by the persistence      *            provider. May be null if no properties are specified.      */
specifier|public
specifier|abstract
name|EntityManagerFactory
name|createContainerEntityManagerFactory
parameter_list|(
name|PersistenceUnitInfo
name|info
parameter_list|,
name|Map
name|map
parameter_list|)
function_decl|;
specifier|public
name|String
name|getDefaultProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|defaultProperties
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
end_class

end_unit

