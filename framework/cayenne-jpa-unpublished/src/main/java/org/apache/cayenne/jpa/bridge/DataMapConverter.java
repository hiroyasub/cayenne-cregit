begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|bridge
package|;
end_package

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|JpaProviderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|conf
operator|.
name|EntityMapLoaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|AccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaBasic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaEntityListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaEntityListeners
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaEntityMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaJoinColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaManagedClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaManyToMany
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaManyToOne
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaNamedQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaOneToMany
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaOneToOne
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaPersistenceUnitDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaPersistenceUnitMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaQueryHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|ProjectPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|BaseTreeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|HierarchicalTreeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|TraversalUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|SimpleValidationFailure
import|;
end_import

begin_comment
comment|/**  * A converter between {@link org.apache.cayenne.jpa.map.JpaEntityMap} and Cayenne  * {@link org.apache.cayenne.map.DataMap}.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|DataMapConverter
block|{
specifier|protected
name|EntityMapLoaderContext
name|context
decl_stmt|;
specifier|protected
name|ProjectPath
name|targetPath
decl_stmt|;
specifier|protected
name|HierarchicalTreeVisitor
name|visitor
decl_stmt|;
specifier|public
specifier|synchronized
name|DataMap
name|toDataMap
parameter_list|(
name|String
name|name
parameter_list|,
name|EntityMapLoaderContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
comment|// reset
name|DataMap
name|dataMap
init|=
operator|new
name|DataMap
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|dataMap
operator|.
name|setDefaultPackage
argument_list|(
name|context
operator|.
name|getEntityMap
argument_list|()
operator|.
name|getPackageName
argument_list|()
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|setDefaultSchema
argument_list|(
name|context
operator|.
name|getEntityMap
argument_list|()
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|targetPath
operator|=
operator|new
name|ProjectPath
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|visitor
operator|==
literal|null
condition|)
block|{
name|visitor
operator|=
name|createVisitor
argument_list|()
expr_stmt|;
block|}
name|TraversalUtil
operator|.
name|traverse
argument_list|(
name|context
operator|.
name|getEntityMap
argument_list|()
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|postprocess
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
return|return
name|dataMap
return|;
block|}
comment|/**      * Connects missing reverse relationships.      */
specifier|protected
name|void
name|postprocess
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
comment|// connect relationships paired via "mappedBy"; if any other reverse relationships
comment|// are missing, Cayenne runtime downstream should take care of it
for|for
control|(
name|DbEntity
name|entity
range|:
name|dataMap
operator|.
name|getDbEntities
argument_list|()
control|)
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|entity
operator|.
name|getRelationships
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|JpaDbRelationship
name|relationship
init|=
operator|(
name|JpaDbRelationship
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|relationship
operator|.
name|getMappedBy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DbRelationship
name|owner
init|=
operator|(
name|DbRelationship
operator|)
name|relationship
operator|.
name|getTargetEntity
argument_list|()
operator|.
name|getRelationship
argument_list|(
name|relationship
operator|.
name|getMappedBy
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DbJoin
name|join
range|:
name|owner
operator|.
name|getJoins
argument_list|()
control|)
block|{
name|DbJoin
name|reverse
init|=
name|join
operator|.
name|createReverseJoin
argument_list|()
decl_stmt|;
name|reverse
operator|.
name|setRelationship
argument_list|(
name|relationship
argument_list|)
expr_stmt|;
name|relationship
operator|.
name|addJoin
argument_list|(
name|reverse
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|recordConflict
parameter_list|(
name|ProjectPath
name|path
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|context
operator|.
name|recordConflict
argument_list|(
operator|new
name|SimpleValidationFailure
argument_list|(
name|path
operator|.
name|getObject
argument_list|()
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a stateless instance of the JpaEntityMap traversal visitor. This method is      * lazily invoked and cached by this object.      */
specifier|protected
name|HierarchicalTreeVisitor
name|createVisitor
parameter_list|()
block|{
name|BaseTreeVisitor
name|listenersVisitor
init|=
operator|new
name|BaseTreeVisitor
argument_list|()
decl_stmt|;
name|listenersVisitor
operator|.
name|addChildVisitor
argument_list|(
name|JpaEntityListener
operator|.
name|class
argument_list|,
operator|new
name|JpaDefaultEntityListenerVisitor
argument_list|()
argument_list|)
expr_stmt|;
name|BaseTreeVisitor
name|defaultsVisitor
init|=
operator|new
name|BaseTreeVisitor
argument_list|()
decl_stmt|;
name|defaultsVisitor
operator|.
name|addChildVisitor
argument_list|(
name|JpaEntityListeners
operator|.
name|class
argument_list|,
name|listenersVisitor
argument_list|)
expr_stmt|;
name|BaseTreeVisitor
name|metadataVisitor
init|=
operator|new
name|BaseTreeVisitor
argument_list|()
decl_stmt|;
name|metadataVisitor
operator|.
name|addChildVisitor
argument_list|(
name|JpaPersistenceUnitDefaults
operator|.
name|class
argument_list|,
name|defaultsVisitor
argument_list|)
expr_stmt|;
name|BaseTreeVisitor
name|visitor
init|=
operator|new
name|BaseTreeVisitor
argument_list|()
decl_stmt|;
name|visitor
operator|.
name|addChildVisitor
argument_list|(
name|JpaEntity
operator|.
name|class
argument_list|,
operator|new
name|JpaEntityVisitor
argument_list|()
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|addChildVisitor
argument_list|(
name|JpaNamedQuery
operator|.
name|class
argument_list|,
operator|new
name|JpaNamedQueryVisitor
argument_list|()
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|addChildVisitor
argument_list|(
name|JpaPersistenceUnitMetadata
operator|.
name|class
argument_list|,
name|metadataVisitor
argument_list|)
expr_stmt|;
return|return
name|visitor
return|;
block|}
specifier|private
name|EntityListener
name|makeEntityListener
parameter_list|(
name|JpaEntityListener
name|jpaListener
parameter_list|)
block|{
name|EntityListener
name|listener
init|=
operator|new
name|EntityListener
argument_list|(
name|jpaListener
operator|.
name|getClassName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|jpaListener
operator|.
name|getPostLoad
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPostLoad
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|jpaListener
operator|.
name|getPostLoad
argument_list|()
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jpaListener
operator|.
name|getPostPersist
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPostPersist
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|jpaListener
operator|.
name|getPostPersist
argument_list|()
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jpaListener
operator|.
name|getPostRemove
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPostRemove
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|jpaListener
operator|.
name|getPostRemove
argument_list|()
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jpaListener
operator|.
name|getPostUpdate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPostUpdate
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|jpaListener
operator|.
name|getPostUpdate
argument_list|()
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jpaListener
operator|.
name|getPrePersist
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPrePersist
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|jpaListener
operator|.
name|getPrePersist
argument_list|()
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jpaListener
operator|.
name|getPreRemove
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPreRemove
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|jpaListener
operator|.
name|getPreRemove
argument_list|()
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jpaListener
operator|.
name|getPreUpdate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPreUpdate
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|jpaListener
operator|.
name|getPreUpdate
argument_list|()
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|listener
return|;
block|}
class|class
name|JpaDefaultEntityListenerVisitor
extends|extends
name|BaseTreeVisitor
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onStartNode
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|JpaEntityListener
name|jpaListener
init|=
operator|(
name|JpaEntityListener
operator|)
name|path
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|DataMap
name|map
init|=
operator|(
name|DataMap
operator|)
name|targetPath
operator|.
name|firstInstanceOf
argument_list|(
name|DataMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|EntityListener
name|listener
init|=
name|makeEntityListener
argument_list|(
name|jpaListener
argument_list|)
decl_stmt|;
name|map
operator|.
name|addDefaultEntityListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
class|class
name|JpaEntityListenerVisitor
extends|extends
name|BaseTreeVisitor
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onStartNode
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|JpaEntityListener
name|jpaListener
init|=
operator|(
name|JpaEntityListener
operator|)
name|path
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|EntityListener
name|listener
init|=
name|makeEntityListener
argument_list|(
name|jpaListener
argument_list|)
decl_stmt|;
name|ObjEntity
name|entity
init|=
operator|(
name|ObjEntity
operator|)
name|targetPath
operator|.
name|firstInstanceOf
argument_list|(
name|ObjEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|entity
operator|.
name|addEntityListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
class|class
name|JpaBasicVisitor
extends|extends
name|NestedVisitor
block|{
annotation|@
name|Override
name|Object
name|createObject
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|JpaBasic
name|jpaBasic
init|=
operator|(
name|JpaBasic
operator|)
name|path
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|ObjEntity
name|parentCayenneEntity
init|=
operator|(
name|ObjEntity
operator|)
name|targetPath
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|ObjAttribute
name|cayenneAttribute
init|=
operator|new
name|ObjAttribute
argument_list|(
name|jpaBasic
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|cayenneAttribute
operator|.
name|setType
argument_list|(
name|getAttributeType
argument_list|(
name|path
argument_list|,
name|jpaBasic
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cayenneAttribute
operator|.
name|setDbAttributeName
argument_list|(
name|jpaBasic
operator|.
name|getColumn
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|parentCayenneEntity
operator|.
name|addAttribute
argument_list|(
name|cayenneAttribute
argument_list|)
expr_stmt|;
return|return
name|cayenneAttribute
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|getAttributeType
parameter_list|(
name|ProjectPath
name|path
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|AccessType
name|access
init|=
literal|null
decl_stmt|;
name|JpaManagedClass
name|entity
init|=
name|path
operator|.
name|firstInstanceOf
argument_list|(
name|JpaManagedClass
operator|.
name|class
argument_list|)
decl_stmt|;
name|access
operator|=
name|entity
operator|.
name|getAccess
argument_list|()
expr_stmt|;
if|if
condition|(
name|access
operator|==
literal|null
condition|)
block|{
name|JpaEntityMap
name|map
init|=
name|path
operator|.
name|firstInstanceOf
argument_list|(
name|JpaEntityMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|access
operator|=
name|map
operator|.
name|getAccess
argument_list|()
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|objectClass
init|=
name|targetPath
operator|.
name|firstInstanceOf
argument_list|(
name|ObjEntity
operator|.
name|class
argument_list|)
operator|.
name|getJavaClass
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|access
operator|==
name|AccessType
operator|.
name|FIELD
condition|)
block|{
return|return
name|lookupFieldInHierarchy
argument_list|(
name|objectClass
argument_list|,
name|name
argument_list|)
operator|.
name|getType
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|PropertyDescriptor
argument_list|(
name|name
argument_list|,
name|objectClass
argument_list|)
operator|.
name|getPropertyType
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JpaProviderException
argument_list|(
literal|"Error resolving attribute '"
operator|+
name|name
operator|+
literal|"', access type:"
operator|+
name|access
operator|+
literal|", class: "
operator|+
name|objectClass
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|Field
name|lookupFieldInHierarchy
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|beanClass
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|SecurityException
throws|,
name|NoSuchFieldException
block|{
try|try
block|{
return|return
name|beanClass
operator|.
name|getDeclaredField
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|superClass
init|=
name|beanClass
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superClass
operator|==
literal|null
operator|||
name|superClass
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
return|return
name|lookupFieldInHierarchy
argument_list|(
name|superClass
argument_list|,
name|fieldName
argument_list|)
return|;
block|}
block|}
block|}
class|class
name|JpaVersionVisitor
extends|extends
name|JpaBasicVisitor
block|{
annotation|@
name|Override
name|Object
name|createObject
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|JpaVersion
name|version
init|=
operator|(
name|JpaVersion
operator|)
name|path
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|ObjEntity
name|parentCayenneEntity
init|=
operator|(
name|ObjEntity
operator|)
name|targetPath
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|ObjAttribute
name|cayenneAttribute
init|=
operator|new
name|ObjAttribute
argument_list|(
name|version
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|cayenneAttribute
operator|.
name|setType
argument_list|(
name|getAttributeType
argument_list|(
name|path
argument_list|,
name|version
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cayenneAttribute
operator|.
name|setDbAttributeName
argument_list|(
name|version
operator|.
name|getColumn
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|parentCayenneEntity
operator|.
name|addAttribute
argument_list|(
name|cayenneAttribute
argument_list|)
expr_stmt|;
return|return
name|cayenneAttribute
return|;
block|}
block|}
class|class
name|JpaColumnVisitor
extends|extends
name|BaseTreeVisitor
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onStartNode
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|JpaColumn
name|jpaColumn
init|=
operator|(
name|JpaColumn
operator|)
name|path
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|JpaAttribute
name|attribute
init|=
operator|(
name|JpaAttribute
operator|)
name|path
operator|.
name|getObjectParent
argument_list|()
decl_stmt|;
name|DbAttribute
name|dbAttribute
init|=
operator|new
name|DbAttribute
argument_list|(
name|jpaColumn
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|attribute
operator|instanceof
name|JpaBasic
condition|)
block|{
name|JpaBasic
name|basic
init|=
operator|(
name|JpaBasic
operator|)
name|attribute
decl_stmt|;
name|dbAttribute
operator|.
name|setType
argument_list|(
name|basic
operator|.
name|getDefaultJdbcType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|attribute
operator|instanceof
name|JpaVersion
condition|)
block|{
name|JpaVersion
name|version
init|=
operator|(
name|JpaVersion
operator|)
name|attribute
decl_stmt|;
name|dbAttribute
operator|.
name|setType
argument_list|(
name|version
operator|.
name|getDefaultJdbcType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dbAttribute
operator|.
name|setMandatory
argument_list|(
operator|!
name|jpaColumn
operator|.
name|isNullable
argument_list|()
argument_list|)
expr_stmt|;
name|dbAttribute
operator|.
name|setMaxLength
argument_list|(
name|jpaColumn
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// DbAttribute "no scale" means -1, not 0 like in JPA.
if|if
condition|(
name|jpaColumn
operator|.
name|getScale
argument_list|()
operator|>
literal|0
condition|)
block|{
name|dbAttribute
operator|.
name|setScale
argument_list|(
name|jpaColumn
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// DbAttribute "no precision" means -1, not 0 like in JPA.
if|if
condition|(
name|jpaColumn
operator|.
name|getPrecision
argument_list|()
operator|>
literal|0
condition|)
block|{
name|dbAttribute
operator|.
name|setAttributePrecision
argument_list|(
name|jpaColumn
operator|.
name|getPrecision
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jpaColumn
operator|.
name|getTable
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JpaProviderException
argument_list|(
literal|"No default table defined for JpaColumn "
operator|+
name|jpaColumn
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|DbEntity
name|entity
init|=
name|targetPath
operator|.
name|firstInstanceOf
argument_list|(
name|DataMap
operator|.
name|class
argument_list|)
operator|.
name|getDbEntity
argument_list|(
name|jpaColumn
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JpaProviderException
argument_list|(
literal|"No DbEntity defined for table  "
operator|+
name|jpaColumn
operator|.
name|getTable
argument_list|()
argument_list|)
throw|;
block|}
name|entity
operator|.
name|addAttribute
argument_list|(
name|dbAttribute
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
class|class
name|JpaIdVisitor
extends|extends
name|JpaBasicVisitor
block|{
annotation|@
name|Override
name|Object
name|createObject
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|JpaId
name|id
init|=
operator|(
name|JpaId
operator|)
name|path
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|ObjEntity
name|parentCayenneEntity
init|=
operator|(
name|ObjEntity
operator|)
name|targetPath
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|ObjAttribute
name|cayenneAttribute
init|=
operator|new
name|ObjAttribute
argument_list|(
name|id
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|cayenneAttribute
operator|.
name|setType
argument_list|(
name|getAttributeType
argument_list|(
name|path
argument_list|,
name|id
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cayenneAttribute
operator|.
name|setDbAttributeName
argument_list|(
name|id
operator|.
name|getColumn
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|parentCayenneEntity
operator|.
name|addAttribute
argument_list|(
name|cayenneAttribute
argument_list|)
expr_stmt|;
return|return
name|cayenneAttribute
return|;
block|}
block|}
class|class
name|JpaIdColumnVisitor
extends|extends
name|BaseTreeVisitor
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onStartNode
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|JpaColumn
name|jpaColumn
init|=
operator|(
name|JpaColumn
operator|)
name|path
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|DbAttribute
name|dbAttribute
init|=
operator|new
name|DbAttribute
argument_list|(
name|jpaColumn
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|JpaId
name|jpaId
init|=
name|path
operator|.
name|firstInstanceOf
argument_list|(
name|JpaId
operator|.
name|class
argument_list|)
decl_stmt|;
name|dbAttribute
operator|.
name|setType
argument_list|(
name|jpaId
operator|.
name|getDefaultJdbcType
argument_list|()
argument_list|)
expr_stmt|;
name|dbAttribute
operator|.
name|setMaxLength
argument_list|(
name|jpaColumn
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|dbAttribute
operator|.
name|setMandatory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbAttribute
operator|.
name|setPrimaryKey
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|jpaColumn
operator|.
name|getScale
argument_list|()
operator|>
literal|0
condition|)
block|{
name|dbAttribute
operator|.
name|setScale
argument_list|(
name|jpaColumn
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jpaColumn
operator|.
name|getPrecision
argument_list|()
operator|>
literal|0
condition|)
block|{
name|dbAttribute
operator|.
name|setAttributePrecision
argument_list|(
name|jpaColumn
operator|.
name|getPrecision
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jpaColumn
operator|.
name|getTable
argument_list|()
operator|==
literal|null
condition|)
block|{
name|recordConflict
argument_list|(
name|path
argument_list|,
literal|"No table defined for JpaColumn '"
operator|+
name|jpaColumn
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|DbEntity
name|entity
init|=
name|targetPath
operator|.
name|firstInstanceOf
argument_list|(
name|DataMap
operator|.
name|class
argument_list|)
operator|.
name|getDbEntity
argument_list|(
name|jpaColumn
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
name|recordConflict
argument_list|(
name|path
argument_list|,
literal|"Invalid table definition for JpaColumn: "
operator|+
name|jpaColumn
operator|.
name|getTable
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|entity
operator|.
name|addAttribute
argument_list|(
name|dbAttribute
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
class|class
name|JpaJoinColumnVisitor
extends|extends
name|BaseTreeVisitor
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onStartNode
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|JpaJoinColumn
name|jpaJoin
init|=
operator|(
name|JpaJoinColumn
operator|)
name|path
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|JpaRelationship
name|jpaRelationship
init|=
operator|(
name|JpaRelationship
operator|)
name|path
operator|.
name|getObjectParent
argument_list|()
decl_stmt|;
name|JpaEntity
name|targetEntity
init|=
name|context
operator|.
name|getEntityMap
argument_list|()
operator|.
name|entityForClass
argument_list|(
name|jpaRelationship
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
decl_stmt|;
name|JpaId
name|jpaTargetId
init|=
name|targetEntity
operator|.
name|getAttributes
argument_list|()
operator|.
name|getId
argument_list|(
name|jpaJoin
operator|.
name|getReferencedColumnName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|jpaTargetId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null id "
operator|+
name|targetEntity
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|jpaJoin
operator|.
name|getReferencedColumnName
argument_list|()
argument_list|)
throw|;
block|}
name|DbRelationship
name|dbRelationship
init|=
operator|(
name|DbRelationship
operator|)
name|targetPath
operator|.
name|getObject
argument_list|()
decl_stmt|;
comment|// add FK
name|DbAttribute
name|src
init|=
operator|new
name|DbAttribute
argument_list|(
name|jpaJoin
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// TODO: andrus, 5/2/2006 - infer this from Jpa relationship
name|src
operator|.
name|setMandatory
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|src
operator|.
name|setMaxLength
argument_list|(
name|jpaTargetId
operator|.
name|getColumn
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|src
operator|.
name|setType
argument_list|(
name|jpaTargetId
operator|.
name|getDefaultJdbcType
argument_list|()
argument_list|)
expr_stmt|;
name|Entity
name|srcEntity
init|=
name|dbRelationship
operator|.
name|getSourceEntity
argument_list|()
decl_stmt|;
name|srcEntity
operator|.
name|addAttribute
argument_list|(
name|src
argument_list|)
expr_stmt|;
comment|// add join
name|DbJoin
name|join
init|=
operator|new
name|DbJoin
argument_list|(
name|dbRelationship
argument_list|,
name|src
operator|.
name|getName
argument_list|()
argument_list|,
name|jpaTargetId
operator|.
name|getColumn
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|dbRelationship
operator|.
name|addJoin
argument_list|(
name|join
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
class|class
name|JpaEntityVisitor
extends|extends
name|NestedVisitor
block|{
name|JpaEntityVisitor
parameter_list|()
block|{
name|BaseTreeVisitor
name|listenersVisitor
init|=
operator|new
name|BaseTreeVisitor
argument_list|()
decl_stmt|;
name|listenersVisitor
operator|.
name|addChildVisitor
argument_list|(
name|JpaEntityListener
operator|.
name|class
argument_list|,
operator|new
name|JpaEntityListenerVisitor
argument_list|()
argument_list|)
expr_stmt|;
name|BaseTreeVisitor
name|attributeVisitor
init|=
operator|new
name|BaseTreeVisitor
argument_list|()
decl_stmt|;
name|attributeVisitor
operator|.
name|addChildVisitor
argument_list|(
name|JpaManyToOne
operator|.
name|class
argument_list|,
operator|new
name|JpaManyToOneVisitor
argument_list|()
argument_list|)
expr_stmt|;
name|attributeVisitor
operator|.
name|addChildVisitor
argument_list|(
name|JpaOneToOne
operator|.
name|class
argument_list|,
operator|new
name|JpaOneToOneVisitor
argument_list|()
argument_list|)
expr_stmt|;
name|attributeVisitor
operator|.
name|addChildVisitor
argument_list|(
name|JpaOneToMany
operator|.
name|class
argument_list|,
operator|new
name|JpaOneToManyVisitor
argument_list|()
argument_list|)
expr_stmt|;
name|attributeVisitor
operator|.
name|addChildVisitor
argument_list|(
name|JpaManyToMany
operator|.
name|class
argument_list|,
operator|new
name|JpaManyToManyVisitor
argument_list|()
argument_list|)
expr_stmt|;
name|JpaBasicVisitor
name|basicVisitor
init|=
operator|new
name|JpaBasicVisitor
argument_list|()
decl_stmt|;
name|basicVisitor
operator|.
name|addChildVisitor
argument_list|(
name|JpaColumn
operator|.
name|class
argument_list|,
operator|new
name|JpaColumnVisitor
argument_list|()
argument_list|)
expr_stmt|;
name|attributeVisitor
operator|.
name|addChildVisitor
argument_list|(
name|JpaBasic
operator|.
name|class
argument_list|,
name|basicVisitor
argument_list|)
expr_stmt|;
name|JpaVersionVisitor
name|versionVisitor
init|=
operator|new
name|JpaVersionVisitor
argument_list|()
decl_stmt|;
name|versionVisitor
operator|.
name|addChildVisitor
argument_list|(
name|JpaColumn
operator|.
name|class
argument_list|,
operator|new
name|JpaColumnVisitor
argument_list|()
argument_list|)
expr_stmt|;
name|attributeVisitor
operator|.
name|addChildVisitor
argument_list|(
name|JpaVersion
operator|.
name|class
argument_list|,
name|versionVisitor
argument_list|)
expr_stmt|;
name|JpaIdVisitor
name|idVisitor
init|=
operator|new
name|JpaIdVisitor
argument_list|()
decl_stmt|;
name|idVisitor
operator|.
name|addChildVisitor
argument_list|(
name|JpaColumn
operator|.
name|class
argument_list|,
operator|new
name|JpaIdColumnVisitor
argument_list|()
argument_list|)
expr_stmt|;
name|attributeVisitor
operator|.
name|addChildVisitor
argument_list|(
name|JpaId
operator|.
name|class
argument_list|,
name|idVisitor
argument_list|)
expr_stmt|;
comment|// TODO: andrus 8/6/2006 - handle Embedded, EmbeddedId, AttributeOverride
name|addChildVisitor
argument_list|(
name|JpaAttributes
operator|.
name|class
argument_list|,
name|attributeVisitor
argument_list|)
expr_stmt|;
name|addChildVisitor
argument_list|(
name|JpaTable
operator|.
name|class
argument_list|,
operator|new
name|JpaTableVisitor
argument_list|()
argument_list|)
expr_stmt|;
name|addChildVisitor
argument_list|(
name|JpaNamedQuery
operator|.
name|class
argument_list|,
operator|new
name|JpaNamedQueryVisitor
argument_list|()
argument_list|)
expr_stmt|;
name|addChildVisitor
argument_list|(
name|JpaEntityListeners
operator|.
name|class
argument_list|,
name|listenersVisitor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|createObject
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|JpaEntity
name|jpaEntity
init|=
operator|(
name|JpaEntity
operator|)
name|path
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|ObjEntity
name|cayenneEntity
init|=
operator|new
name|ObjEntity
argument_list|(
name|jpaEntity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|cayenneEntity
operator|.
name|setClassName
argument_list|(
name|jpaEntity
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|initCallbacks
argument_list|(
name|jpaEntity
argument_list|,
name|cayenneEntity
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DataMap
operator|)
name|targetPath
operator|.
name|getObject
argument_list|()
operator|)
operator|.
name|addObjEntity
argument_list|(
name|cayenneEntity
argument_list|)
expr_stmt|;
return|return
name|cayenneEntity
return|;
block|}
specifier|private
name|void
name|initCallbacks
parameter_list|(
name|JpaEntity
name|jpaEntity
parameter_list|,
name|ObjEntity
name|cayenneEntity
parameter_list|)
block|{
if|if
condition|(
name|jpaEntity
operator|.
name|getPostLoad
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cayenneEntity
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPostLoad
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|jpaEntity
operator|.
name|getPostLoad
argument_list|()
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jpaEntity
operator|.
name|getPostPersist
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cayenneEntity
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPostPersist
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|jpaEntity
operator|.
name|getPostPersist
argument_list|()
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jpaEntity
operator|.
name|getPostRemove
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cayenneEntity
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPostRemove
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|jpaEntity
operator|.
name|getPostRemove
argument_list|()
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jpaEntity
operator|.
name|getPostUpdate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cayenneEntity
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPostUpdate
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|jpaEntity
operator|.
name|getPostUpdate
argument_list|()
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jpaEntity
operator|.
name|getPrePersist
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cayenneEntity
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPrePersist
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|jpaEntity
operator|.
name|getPrePersist
argument_list|()
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jpaEntity
operator|.
name|getPreRemove
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cayenneEntity
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPreRemove
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|jpaEntity
operator|.
name|getPreRemove
argument_list|()
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jpaEntity
operator|.
name|getPreUpdate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cayenneEntity
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPreUpdate
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|jpaEntity
operator|.
name|getPreUpdate
argument_list|()
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
class|class
name|JpaManyToOneVisitor
extends|extends
name|JpaRelationshipVisitor
block|{
annotation|@
name|Override
name|Object
name|createObject
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|ObjRelationship
name|objRelationship
init|=
operator|(
name|ObjRelationship
operator|)
name|super
operator|.
name|createObject
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|objRelationship
operator|.
name|getDbRelationships
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
class|class
name|JpaOneToManyVisitor
extends|extends
name|JpaRelationshipVisitor
block|{
annotation|@
name|Override
name|Object
name|createObject
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|ObjRelationship
name|objRelationship
init|=
operator|(
name|ObjRelationship
operator|)
name|super
operator|.
name|createObject
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|JpaDbRelationship
name|relationship
init|=
operator|(
name|JpaDbRelationship
operator|)
name|objRelationship
operator|.
name|getDbRelationships
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|relationship
operator|!=
literal|null
condition|)
block|{
name|JpaOneToMany
name|jpaRelationship
init|=
operator|(
name|JpaOneToMany
operator|)
name|path
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|relationship
operator|.
name|setMappedBy
argument_list|(
name|jpaRelationship
operator|.
name|getMappedBy
argument_list|()
argument_list|)
expr_stmt|;
name|objRelationship
operator|.
name|setMapKey
argument_list|(
name|jpaRelationship
operator|.
name|getMapKey
argument_list|()
argument_list|)
expr_stmt|;
name|objRelationship
operator|.
name|setCollectionType
argument_list|(
name|jpaRelationship
operator|.
name|getPropertyDescriptor
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|relationship
return|;
block|}
block|}
class|class
name|JpaOneToOneVisitor
extends|extends
name|JpaRelationshipVisitor
block|{
annotation|@
name|Override
name|Object
name|createObject
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|ObjRelationship
name|objRelationship
init|=
operator|(
name|ObjRelationship
operator|)
name|super
operator|.
name|createObject
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|JpaDbRelationship
name|relationship
init|=
operator|(
name|JpaDbRelationship
operator|)
name|objRelationship
operator|.
name|getDbRelationships
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|relationship
operator|!=
literal|null
condition|)
block|{
name|JpaOneToOne
name|jpaRelationship
init|=
operator|(
name|JpaOneToOne
operator|)
name|path
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|relationship
operator|.
name|setMappedBy
argument_list|(
name|jpaRelationship
operator|.
name|getMappedBy
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|relationship
return|;
block|}
block|}
class|class
name|JpaManyToManyVisitor
extends|extends
name|JpaRelationshipVisitor
block|{
annotation|@
name|Override
name|Object
name|createObject
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|ObjRelationship
name|objRelationship
init|=
operator|(
name|ObjRelationship
operator|)
name|super
operator|.
name|createObject
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|JpaDbRelationship
name|relationship
init|=
operator|(
name|JpaDbRelationship
operator|)
name|objRelationship
operator|.
name|getDbRelationships
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|relationship
operator|!=
literal|null
condition|)
block|{
name|JpaManyToMany
name|jpaRelationship
init|=
operator|(
name|JpaManyToMany
operator|)
name|path
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|relationship
operator|.
name|setMappedBy
argument_list|(
name|jpaRelationship
operator|.
name|getMappedBy
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|relationship
return|;
block|}
block|}
specifier|abstract
class|class
name|JpaRelationshipVisitor
extends|extends
name|NestedVisitor
block|{
name|JpaRelationshipVisitor
parameter_list|()
block|{
name|addChildVisitor
argument_list|(
name|JpaJoinColumn
operator|.
name|class
argument_list|,
operator|new
name|JpaJoinColumnVisitor
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|Object
name|createObject
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|JpaRelationship
name|relationship
init|=
operator|(
name|JpaRelationship
operator|)
name|path
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|ObjEntity
name|cayenneSrcEntity
init|=
operator|(
name|ObjEntity
operator|)
name|targetPath
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|ObjRelationship
name|cayenneRelationship
init|=
operator|new
name|ObjRelationship
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|cayenneSrcEntity
operator|.
name|addRelationship
argument_list|(
name|cayenneRelationship
argument_list|)
expr_stmt|;
name|JpaEntity
name|jpaTargetEntity
init|=
operator|(
operator|(
name|JpaEntityMap
operator|)
name|path
operator|.
name|getRoot
argument_list|()
operator|)
operator|.
name|entityForClass
argument_list|(
name|relationship
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|jpaTargetEntity
operator|==
literal|null
condition|)
block|{
name|recordConflict
argument_list|(
name|path
argument_list|,
literal|"Unknown target entity '"
operator|+
name|relationship
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|cayenneRelationship
operator|.
name|setTargetEntityName
argument_list|(
name|jpaTargetEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|DbEntity
name|cayenneSrcDbEntity
init|=
name|cayenneSrcEntity
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
name|DbEntity
name|cayenneTargetDbEntity
init|=
name|cayenneSrcEntity
operator|.
name|getDataMap
argument_list|()
operator|.
name|getDbEntity
argument_list|(
name|jpaTargetEntity
operator|.
name|getTable
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cayenneTargetDbEntity
operator|==
literal|null
condition|)
block|{
name|cayenneTargetDbEntity
operator|=
operator|new
name|DbEntity
argument_list|(
name|jpaTargetEntity
operator|.
name|getTable
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cayenneSrcEntity
operator|.
name|getDataMap
argument_list|()
operator|.
name|addDbEntity
argument_list|(
name|cayenneTargetDbEntity
argument_list|)
expr_stmt|;
block|}
name|JpaDbRelationship
name|dbRelationship
init|=
operator|new
name|JpaDbRelationship
argument_list|(
name|cayenneRelationship
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|dbRelationship
operator|.
name|setTargetEntity
argument_list|(
name|cayenneTargetDbEntity
argument_list|)
expr_stmt|;
name|dbRelationship
operator|.
name|setToMany
argument_list|(
name|relationship
operator|.
name|isToMany
argument_list|()
argument_list|)
expr_stmt|;
name|cayenneSrcDbEntity
operator|.
name|addRelationship
argument_list|(
name|dbRelationship
argument_list|)
expr_stmt|;
name|cayenneRelationship
operator|.
name|addDbRelationship
argument_list|(
name|dbRelationship
argument_list|)
expr_stmt|;
return|return
name|cayenneRelationship
return|;
block|}
block|}
class|class
name|JpaNamedQueryVisitor
extends|extends
name|NestedVisitor
block|{
annotation|@
name|Override
name|Object
name|createObject
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|JpaNamedQuery
name|jpaQuery
init|=
operator|(
name|JpaNamedQuery
operator|)
name|path
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|JpaIndirectQuery
name|cayenneQuery
decl_stmt|;
name|JpaQueryHint
name|hint
init|=
name|jpaQuery
operator|.
name|getHint
argument_list|(
name|QueryHints
operator|.
name|QUERY_TYPE_HINT
argument_list|)
decl_stmt|;
if|if
condition|(
name|hint
operator|!=
literal|null
operator|&&
operator|!
name|Util
operator|.
name|isEmptyString
argument_list|(
name|hint
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
comment|// query class is not enhanced, so use normal class loader
name|Class
argument_list|<
name|?
argument_list|>
name|cayenneQueryClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|hint
operator|.
name|getValue
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|JpaIndirectQuery
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|cayenneQueryClass
argument_list|)
condition|)
block|{
name|recordConflict
argument_list|(
name|path
argument_list|,
literal|"Unknown type for Cayenne query '"
operator|+
name|jpaQuery
operator|.
name|getName
argument_list|()
operator|+
literal|"': "
operator|+
name|cayenneQueryClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|cayenneQuery
operator|=
operator|(
name|JpaIndirectQuery
operator|)
name|cayenneQueryClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|recordConflict
argument_list|(
name|path
argument_list|,
literal|"Problem while creating Cayenne query '"
operator|+
name|jpaQuery
operator|.
name|getName
argument_list|()
operator|+
literal|"', exception"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
comment|// by default use EJBQL query...
name|cayenneQuery
operator|=
operator|new
name|JpaEjbQLQuery
argument_list|()
expr_stmt|;
block|}
name|cayenneQuery
operator|.
name|setName
argument_list|(
name|jpaQuery
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cayenneQuery
operator|.
name|setJpaQuery
argument_list|(
name|jpaQuery
argument_list|)
expr_stmt|;
name|DataMap
name|parentMap
init|=
operator|(
name|DataMap
operator|)
name|targetPath
operator|.
name|firstInstanceOf
argument_list|(
name|DataMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjEntity
name|parentEntity
init|=
operator|(
name|ObjEntity
operator|)
name|targetPath
operator|.
name|firstInstanceOf
argument_list|(
name|ObjEntity
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentEntity
operator|!=
literal|null
condition|)
block|{
name|cayenneQuery
operator|.
name|setParentEntity
argument_list|(
name|parentEntity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cayenneQuery
operator|.
name|setParentMap
argument_list|(
name|parentMap
argument_list|)
expr_stmt|;
block|}
name|parentMap
operator|.
name|addQuery
argument_list|(
name|cayenneQuery
argument_list|)
expr_stmt|;
return|return
name|cayenneQuery
return|;
block|}
block|}
class|class
name|JpaTableVisitor
extends|extends
name|NestedVisitor
block|{
annotation|@
name|Override
name|Object
name|createObject
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|JpaTable
name|jpaTable
init|=
operator|(
name|JpaTable
operator|)
name|path
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|ObjEntity
name|parentCayenneEntity
init|=
operator|(
name|ObjEntity
operator|)
name|targetPath
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|DbEntity
name|cayenneEntity
init|=
name|parentCayenneEntity
operator|.
name|getDataMap
argument_list|()
operator|.
name|getDbEntity
argument_list|(
name|jpaTable
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cayenneEntity
operator|==
literal|null
condition|)
block|{
name|cayenneEntity
operator|=
operator|new
name|DbEntity
argument_list|(
name|jpaTable
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|parentCayenneEntity
operator|.
name|getDataMap
argument_list|()
operator|.
name|addDbEntity
argument_list|(
name|cayenneEntity
argument_list|)
expr_stmt|;
block|}
name|cayenneEntity
operator|.
name|setCatalog
argument_list|(
name|jpaTable
operator|.
name|getCatalog
argument_list|()
argument_list|)
expr_stmt|;
name|cayenneEntity
operator|.
name|setSchema
argument_list|(
name|jpaTable
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|parentCayenneEntity
operator|.
name|setDbEntity
argument_list|(
name|cayenneEntity
argument_list|)
expr_stmt|;
return|return
name|cayenneEntity
return|;
block|}
block|}
comment|/**      * A superclass of visitors that need to push/pop processed object from the stack.      */
specifier|abstract
class|class
name|NestedVisitor
extends|extends
name|BaseTreeVisitor
block|{
specifier|abstract
name|Object
name|createObject
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|boolean
name|onStartNode
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|Object
name|object
init|=
name|createObject
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|!=
literal|null
condition|)
block|{
name|targetPath
operator|=
name|targetPath
operator|.
name|appendToPath
argument_list|(
name|object
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFinishNode
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|targetPath
operator|=
name|targetPath
operator|.
name|subpathWithSize
argument_list|(
name|targetPath
operator|.
name|getPath
argument_list|()
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

