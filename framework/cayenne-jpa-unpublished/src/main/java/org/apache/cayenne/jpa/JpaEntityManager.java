begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityTransaction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|FlushModeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|LockModeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|PersistenceContextType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|PersistenceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|TransactionRequiredException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|spi
operator|.
name|PersistenceUnitInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|spi
operator|.
name|PersistenceUnitTransactionType
import|;
end_import

begin_comment
comment|/**  * Base implementation of a non-JTA EntityManager.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|JpaEntityManager
implements|implements
name|EntityManager
block|{
specifier|protected
name|PersistenceContextType
name|contextType
decl_stmt|;
specifier|protected
name|FlushModeType
name|flushMode
decl_stmt|;
specifier|protected
name|JpaEntityManagerFactory
name|factory
decl_stmt|;
specifier|protected
name|EntityTransaction
name|transaction
decl_stmt|;
specifier|protected
name|boolean
name|open
decl_stmt|;
specifier|protected
name|Object
name|delegate
decl_stmt|;
comment|/**      * Creates a new JpaEntityManager, initializing it with a parent factory.      */
specifier|public
name|JpaEntityManager
parameter_list|(
name|JpaEntityManagerFactory
name|factory
parameter_list|)
block|{
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null entity manager factory"
argument_list|)
throw|;
block|}
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
name|this
operator|.
name|open
operator|=
literal|true
expr_stmt|;
block|}
specifier|protected
name|PersistenceUnitInfo
name|getPersistenceUnitInfo
parameter_list|()
block|{
return|return
name|factory
operator|.
name|getPersistenceUnitInfo
argument_list|()
return|;
block|}
comment|/**      * Set the lock mode for an entity object contained in the persistence context.      */
specifier|public
specifier|abstract
name|void
name|lock
parameter_list|(
name|Object
name|entity
parameter_list|,
name|LockModeType
name|lockMode
parameter_list|)
function_decl|;
comment|/**      * Close an application-managed EntityManager. After an EntityManager has been closed,      * all methods on the EntityManager instance will throw the IllegalStateException      * except for isOpen, which will return false. This method can only be called when the      * EntityManager is not associated with an active transaction.      *       * @throws IllegalStateException if the EntityManager is associated with an active      *             transaction or if the EntityManager is container-managed.      */
specifier|public
name|void
name|close
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|transaction
operator|!=
literal|null
operator|&&
name|transaction
operator|.
name|isActive
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Active transaction in progress"
argument_list|)
throw|;
block|}
name|open
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Determine whether the EntityManager is open.      *       * @return true until the EntityManager has been closed.      */
specifier|public
name|boolean
name|isOpen
parameter_list|()
block|{
return|return
name|open
operator|&&
operator|(
name|factory
operator|==
literal|null
operator|||
name|factory
operator|.
name|isOpen
argument_list|()
operator|)
return|;
block|}
comment|/**      * Make an instance managed and persistent.      *       * @param entity an object to be made persistent      * @throws IllegalArgumentException if not an entity.      * @throws TransactionRequiredException if there is no transaction and the persistence      *             context is of type PersistenceContextType.TRANSACTION      */
specifier|public
name|void
name|persist
parameter_list|(
name|Object
name|entity
parameter_list|)
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|checkTransaction
argument_list|()
expr_stmt|;
name|persistInternal
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|persistInternal
parameter_list|(
name|Object
name|entity
parameter_list|)
function_decl|;
comment|/**      * Merge the state of the given entity into the current persistence context. Cayenne:      * Is this like localObject(s)?      *       * @param entity      * @return the instance that the state was merged to      * @throws IllegalArgumentException if instance is not an entity or is a removed      *             entity      * @throws TransactionRequiredException if there is no transaction and the persistence      *             context is of type PersistenceContextType.TRANSACTION      */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|merge
parameter_list|(
name|T
name|entity
parameter_list|)
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|checkTransaction
argument_list|()
expr_stmt|;
return|return
name|mergeInternal
argument_list|(
name|entity
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
parameter_list|<
name|T
parameter_list|>
name|T
name|mergeInternal
parameter_list|(
name|T
name|entity
parameter_list|)
function_decl|;
comment|/**      * Remove the entity instance.      *       * @param entity      * @throws IllegalArgumentException if not an entity or if a detached entity      * @throws TransactionRequiredException if there is no transaction and the persistence      *             context is of type PersistenceContextType.TRANSACTION      */
specifier|public
name|void
name|remove
parameter_list|(
name|Object
name|entity
parameter_list|)
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|checkTransaction
argument_list|()
expr_stmt|;
name|removeInternal
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|removeInternal
parameter_list|(
name|Object
name|entity
parameter_list|)
function_decl|;
comment|/**      * Find by primary key.      *       * @param entityClass      * @param primaryKey      * @return the found entity instance or null if the entity does not exist      * @throws IllegalArgumentException if the first argument does not denote an entity      *             type or the second argument is not a valid type for that      */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|find
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|entityClass
parameter_list|,
name|Object
name|primaryKey
parameter_list|)
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|findInternal
argument_list|(
name|entityClass
argument_list|,
name|primaryKey
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
parameter_list|<
name|T
parameter_list|>
name|T
name|findInternal
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|entityClass
parameter_list|,
name|Object
name|primaryKey
parameter_list|)
function_decl|;
comment|/**      * Get an instance, whose state may be lazily fetched. If the requested instance does      * not exist in the database, throws EntityNotFoundException when the instance state      * is first accessed. (The persistence provider runtime is permitted to throw the      * EntityNotFoundException when getReference is called.) The application should not      * expect that theinstance state will be available upon detachment, unless it was      * accessed by the application while the entity manager was open.      *       * @param entityClass      * @param primaryKey      * @return the found entity instance      * @throws IllegalArgumentException if the first argument does not denote an entity      *             type or the second argument is not a valid type for that entityÕs      *             primary key      * @throws EntityNotFoundException if the entity state cannot be accessed      */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getReference
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|entityClass
parameter_list|,
name|Object
name|primaryKey
parameter_list|)
block|{
name|checkClosed
argument_list|()
expr_stmt|;
comment|// TODO: force refresh?
name|T
name|ref
init|=
name|find
argument_list|(
name|entityClass
argument_list|,
name|primaryKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EntityNotFoundException
argument_list|(
literal|"Could not find "
operator|+
name|entityClass
operator|.
name|toString
argument_list|()
operator|+
literal|" with primary key value "
operator|+
name|primaryKey
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|ref
return|;
block|}
comment|/**      * Synchronize the persistence context to the underlying database.      *       * @throws TransactionRequiredException if there is no transaction      * @throws PersistenceException if the flush fails      */
specifier|public
name|void
name|flush
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|checkTransaction
argument_list|()
expr_stmt|;
name|flushInternal
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|flushInternal
parameter_list|()
function_decl|;
comment|/**      * Set the flush mode that applies to all objects contained in the persistence      * context.      *       * @param flushMode      */
specifier|public
name|void
name|setFlushMode
parameter_list|(
name|FlushModeType
name|flushMode
parameter_list|)
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|this
operator|.
name|flushMode
operator|=
name|flushMode
expr_stmt|;
block|}
comment|/**      * Get the flush mode that applies to all objects contained in the persistence      * context.      *       * @return flushMode      */
specifier|public
name|FlushModeType
name|getFlushMode
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|flushMode
return|;
block|}
comment|/**      * Refresh the state of the instance from the database, overwriting changes made to      * the entity, if any.      *       * @param entity      * @throws IllegalArgumentException if not an entity or entity is not managed      * @throws TransactionRequiredException if there is no transaction and the persistence      *             context is of type PersistenceContextType.TRANSACTION      * @throws EntityNotFoundException if the entity no longer exists in the database      */
specifier|public
name|void
name|refresh
parameter_list|(
name|Object
name|entity
parameter_list|)
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|refreshInternal
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|refreshInternal
parameter_list|(
name|Object
name|entity
parameter_list|)
function_decl|;
comment|/**      * Clear the persistence context, causing all managed entities to become detached.      * Changes made to entities that have not been flushed to the database will not be      * persisted.      */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
comment|// TODO: Andrus, 2/10/2006 - implement
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"TODO"
argument_list|)
throw|;
block|}
comment|/**      * Check if the instance belongs to the current persistence context.      *       * @throws IllegalArgumentException if not an entity      */
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|entity
parameter_list|)
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|containsInternal
argument_list|(
name|entity
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|boolean
name|containsInternal
parameter_list|(
name|Object
name|entity
parameter_list|)
function_decl|;
comment|/**      * Create an instance of Query for executing an EJB QL statement.      *       * @param ejbqlString an EJB QL query string      * @return the new query instance      * @throws IllegalArgumentException if query string is not valid      */
specifier|public
name|Query
name|createQuery
parameter_list|(
name|String
name|ejbqlString
parameter_list|)
block|{
name|checkClosed
argument_list|()
expr_stmt|;
comment|// TODO: Andrus, 2/10/2006 - implement
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"TODO"
argument_list|)
throw|;
block|}
comment|/**      * Create an instance of Query for executing a named query (in EJB QL or native SQL).      *       * @param name the name of a query defined in metadata      * @return the new query instance      * @throws IllegalArgumentException if a query has not been defined with the given      *             name      */
specifier|public
specifier|abstract
name|Query
name|createNamedQuery
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
comment|/**      * Create an instance of Query for executing a native SQL statement, e.g., for update      * or delete.      *       * @param sqlString a native SQL query string      * @return the new query instance      */
specifier|public
specifier|abstract
name|Query
name|createNativeQuery
parameter_list|(
name|String
name|sqlString
parameter_list|)
function_decl|;
comment|/**      * Create an instance of Query for executing a native SQL query.      *       * @param sqlString a native SQL query string      * @param resultClass the class of the resulting instance(s)      * @return the new query instance      */
specifier|public
specifier|abstract
name|Query
name|createNativeQuery
parameter_list|(
name|String
name|sqlString
parameter_list|,
name|Class
name|resultClass
parameter_list|)
function_decl|;
comment|/**      * Create an instance of Query for executing a native SQL query.      *       * @param sqlString a native SQL query string      * @param resultSetMapping the name of the result set mapping      * @return the new query instance      */
specifier|public
name|Query
name|createNativeQuery
parameter_list|(
name|String
name|sqlString
parameter_list|,
name|String
name|resultSetMapping
parameter_list|)
block|{
name|checkClosed
argument_list|()
expr_stmt|;
comment|// TODO: Andrus, 2/10/2006 - implement
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"TODO"
argument_list|)
throw|;
block|}
comment|/**      * Return the resource-level transaction object. The EntityTransaction instance may be      * used serially to begin and commit multiple transactions.      *       * @return EntityTransaction instance      * @throws IllegalStateException if invoked on a JTA EntityManager.      */
specifier|public
name|EntityTransaction
name|getTransaction
parameter_list|()
block|{
comment|// note - allowed to be called on a closed EM
if|if
condition|(
name|factory
operator|.
name|getUnitInfo
argument_list|()
operator|.
name|getTransactionType
argument_list|()
operator|==
name|PersistenceUnitTransactionType
operator|.
name|JTA
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"'getTransaction' is called on a JTA EntityManager"
argument_list|)
throw|;
block|}
if|if
condition|(
name|transaction
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|transaction
operator|=
name|createResourceLocalTransaction
argument_list|()
expr_stmt|;
block|}
return|return
name|transaction
return|;
block|}
comment|/**      * A method that creates a new resource-local transaction.      */
specifier|protected
specifier|abstract
name|EntityTransaction
name|createResourceLocalTransaction
parameter_list|()
function_decl|;
comment|/**      * Indicates to the EntityManager that a JTA transaction is active. This method should      * be called on a JTA application managed EntityManager that was created outside the      * scope of the active transaction to associate it with the current JTA transaction.      *       * @throws TransactionRequiredException if there is no transaction.      */
specifier|public
specifier|abstract
name|void
name|joinTransaction
parameter_list|()
function_decl|;
comment|/**      * Returns the underlying provider object for the EntityManager, if available.      */
specifier|public
name|Object
name|getDelegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
comment|/**      * Sets the underlying provider object for the EntityManager.      */
specifier|public
name|void
name|setDelegate
parameter_list|(
name|Object
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
comment|/*      * Throws an exception if called on closed factory.      */
specifier|protected
name|void
name|checkClosed
parameter_list|()
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"An attempt to access closed EntityManagerFactory."
argument_list|)
throw|;
block|}
block|}
comment|/**      * @throws TransactionRequiredException if there is no transaction and the persistence      *             context is of type PersistenceContextType.TRANSACTION      */
specifier|protected
name|void
name|checkTransaction
parameter_list|()
throws|throws
name|TransactionRequiredException
block|{
if|if
condition|(
operator|(
name|transaction
operator|==
literal|null
operator|)
operator|&&
operator|(
name|contextType
operator|==
name|PersistenceContextType
operator|.
name|TRANSACTION
operator|)
condition|)
block|{
throw|throw
operator|new
name|TransactionRequiredException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

