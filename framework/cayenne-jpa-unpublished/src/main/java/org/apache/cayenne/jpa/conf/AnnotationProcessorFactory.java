begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|AnnotatedElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A factory for annotation processors. Concrete subclasses can simply define inner  * classes for the each type of annotation processors they support.  * {@link #createProcessor(String)} method will use naming conventions to determine the  * type of the processor.  *   */
end_comment

begin_class
specifier|abstract
class|class
name|AnnotationProcessorFactory
block|{
specifier|static
specifier|final
name|String
name|ANNOTATIONS_PACKAGE
init|=
literal|"javax.persistence."
decl_stmt|;
specifier|static
specifier|final
name|String
name|PROCESSOR_NAME_SUFFIX
init|=
literal|"Processor"
decl_stmt|;
specifier|static
specifier|final
name|AnnotationProcessor
name|NOOP_PROCESSOR
init|=
operator|new
name|AnnotationProcessor
argument_list|()
block|{
specifier|public
name|void
name|onFinishElement
parameter_list|(
name|AnnotatedElement
name|element
parameter_list|,
name|AnnotationProcessorStack
name|context
parameter_list|)
block|{
block|}
specifier|public
name|void
name|onStartElement
parameter_list|(
name|AnnotatedElement
name|element
parameter_list|,
name|AnnotationProcessorStack
name|context
parameter_list|)
block|{
block|}
block|}
decl_stmt|;
comment|/**      * Dervies processor inner class name, applying naming conventions.      */
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|processorClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|factoryClass
parameter_list|,
name|String
name|annotationFQN
parameter_list|)
block|{
if|if
condition|(
name|annotationFQN
operator|.
name|startsWith
argument_list|(
name|ANNOTATIONS_PACKAGE
argument_list|)
condition|)
block|{
comment|// derive the processor name from the annotation unqualified name, so that we
comment|// do not have to configure the processors manually
comment|// assume that the processor class is an inner class of a concrete factory...
name|String
name|processorName
init|=
name|factoryClass
operator|.
name|getName
argument_list|()
operator|+
literal|"$"
operator|+
name|annotationFQN
operator|.
name|substring
argument_list|(
name|ANNOTATIONS_PACKAGE
operator|.
name|length
argument_list|()
argument_list|)
operator|+
name|PROCESSOR_NAME_SUFFIX
decl_stmt|;
try|try
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|processorName
argument_list|,
literal|true
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// there are a few unsupported annotations in the JPA package related
comment|// to Java EE conatiners
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Returns an annotation class handled by the processor, applying naming conventions.      */
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|annotationClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|processorClass
parameter_list|)
block|{
name|String
name|name
init|=
name|processorClass
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|endsWith
argument_list|(
name|PROCESSOR_NAME_SUFFIX
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|split
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'$'
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|className
init|=
name|name
operator|.
name|substring
argument_list|(
name|split
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|annotationFQN
init|=
name|ANNOTATIONS_PACKAGE
operator|+
name|className
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|className
operator|.
name|length
argument_list|()
operator|-
name|PROCESSOR_NAME_SUFFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|annotationFQN
argument_list|,
literal|true
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// there are a few unsupported annotations in the JPA package related
comment|// to Java EE containers
return|return
literal|null
return|;
block|}
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AnnotationProcessor
argument_list|>
name|processors
decl_stmt|;
name|AnnotationProcessorFactory
parameter_list|()
block|{
name|this
operator|.
name|processors
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AnnotationProcessor
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns processor for a given annotation, caching it ofr future use. Returns null      * if an annotation is not a JPA annotation.      */
name|AnnotationProcessor
name|getProcessor
parameter_list|(
name|Annotation
name|annotation
parameter_list|)
block|{
name|String
name|annotationName
init|=
name|annotation
operator|.
name|annotationType
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|AnnotationProcessor
name|processor
init|=
name|processors
operator|.
name|get
argument_list|(
name|annotationName
argument_list|)
decl_stmt|;
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
name|processor
operator|=
name|createProcessor
argument_list|(
name|annotationName
argument_list|)
expr_stmt|;
name|processors
operator|.
name|put
argument_list|(
name|annotationName
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
return|return
name|processor
operator|==
name|NOOP_PROCESSOR
condition|?
literal|null
else|:
name|processor
return|;
block|}
comment|/**      * Creates a new processor for the annotation full class name.      */
name|AnnotationProcessor
name|createProcessor
parameter_list|(
name|String
name|annotationFQN
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|processorClass
init|=
name|processorClass
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|annotationFQN
argument_list|)
decl_stmt|;
if|if
condition|(
name|processorClass
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
operator|(
name|AnnotationProcessor
operator|)
name|processorClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|NOOP_PROCESSOR
return|;
block|}
block|}
comment|// not a JPA annotation...
return|return
name|NOOP_PROCESSOR
return|;
block|}
block|}
end_class

end_unit

