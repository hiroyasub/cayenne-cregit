begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|TableGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLSerializable
import|;
end_import

begin_comment
comment|/**  * A primary key generator based on a database table.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|JpaTableGenerator
implements|implements
name|XMLSerializable
block|{
specifier|protected
name|String
name|name
decl_stmt|;
specifier|protected
name|String
name|table
decl_stmt|;
specifier|protected
name|String
name|catalog
decl_stmt|;
specifier|protected
name|String
name|schema
decl_stmt|;
specifier|protected
name|String
name|pkColumnName
decl_stmt|;
specifier|protected
name|String
name|valueColumnName
decl_stmt|;
specifier|protected
name|String
name|pkColumnValue
decl_stmt|;
specifier|protected
name|int
name|initialValue
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|allocationSize
init|=
literal|50
decl_stmt|;
specifier|protected
name|Collection
argument_list|<
name|JpaUniqueConstraint
argument_list|>
name|uniqueConstraints
decl_stmt|;
specifier|public
name|JpaTableGenerator
parameter_list|()
block|{
block|}
specifier|public
name|JpaTableGenerator
parameter_list|(
name|TableGenerator
name|annotation
parameter_list|)
block|{
name|name
operator|=
name|annotation
operator|.
name|name
argument_list|()
expr_stmt|;
name|table
operator|=
name|annotation
operator|.
name|table
argument_list|()
expr_stmt|;
name|catalog
operator|=
name|annotation
operator|.
name|catalog
argument_list|()
expr_stmt|;
name|schema
operator|=
name|annotation
operator|.
name|schema
argument_list|()
expr_stmt|;
name|pkColumnName
operator|=
name|annotation
operator|.
name|pkColumnName
argument_list|()
expr_stmt|;
name|valueColumnName
operator|=
name|annotation
operator|.
name|valueColumnName
argument_list|()
expr_stmt|;
name|pkColumnValue
operator|=
name|annotation
operator|.
name|pkColumnValue
argument_list|()
expr_stmt|;
name|initialValue
operator|=
name|annotation
operator|.
name|initialValue
argument_list|()
expr_stmt|;
name|allocationSize
operator|=
name|annotation
operator|.
name|allocationSize
argument_list|()
expr_stmt|;
name|getUniqueConstraints
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|annotation
operator|.
name|uniqueConstraints
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|uniqueConstraints
operator|.
name|add
argument_list|(
operator|new
name|JpaUniqueConstraint
argument_list|(
name|annotation
operator|.
name|uniqueConstraints
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|encodeAsXML
parameter_list|(
name|XMLEncoder
name|encoder
parameter_list|)
block|{
block|}
specifier|public
name|int
name|getAllocationSize
parameter_list|()
block|{
return|return
name|allocationSize
return|;
block|}
specifier|public
name|void
name|setAllocationSize
parameter_list|(
name|int
name|allocationSize
parameter_list|)
block|{
name|this
operator|.
name|allocationSize
operator|=
name|allocationSize
expr_stmt|;
block|}
specifier|public
name|String
name|getCatalog
parameter_list|()
block|{
return|return
name|catalog
return|;
block|}
specifier|public
name|void
name|setCatalog
parameter_list|(
name|String
name|catalog
parameter_list|)
block|{
name|this
operator|.
name|catalog
operator|=
name|catalog
expr_stmt|;
block|}
specifier|public
name|int
name|getInitialValue
parameter_list|()
block|{
return|return
name|initialValue
return|;
block|}
specifier|public
name|void
name|setInitialValue
parameter_list|(
name|int
name|initialValue
parameter_list|)
block|{
name|this
operator|.
name|initialValue
operator|=
name|initialValue
expr_stmt|;
block|}
comment|/**      * Returns table generator name.      *<h3>Specification Documenatation</h3>      *<p>      *<b>Description:</b> A unique generator name that can be referenced by one or more      * classes to be the generator for id values.      *</p>      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getPkColumnName
parameter_list|()
block|{
return|return
name|pkColumnName
return|;
block|}
specifier|public
name|void
name|setPkColumnName
parameter_list|(
name|String
name|pkColumnName
parameter_list|)
block|{
name|this
operator|.
name|pkColumnName
operator|=
name|pkColumnName
expr_stmt|;
block|}
specifier|public
name|String
name|getPkColumnValue
parameter_list|()
block|{
return|return
name|pkColumnValue
return|;
block|}
specifier|public
name|void
name|setPkColumnValue
parameter_list|(
name|String
name|pkColumnValue
parameter_list|)
block|{
name|this
operator|.
name|pkColumnValue
operator|=
name|pkColumnValue
expr_stmt|;
block|}
specifier|public
name|String
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
specifier|public
name|void
name|setSchema
parameter_list|(
name|String
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
comment|/**      * Returns table generator table name.      *<h3>Specification Documentation</h3>      *<p>      *<b>Description:</b> Name of table that stores the generated id value.      *</p>      *<p>      *<b>Default:</b> Name is chosen by persistence provider.      *</p>      */
specifier|public
name|String
name|getTable
parameter_list|()
block|{
return|return
name|table
return|;
block|}
specifier|public
name|void
name|setTable
parameter_list|(
name|String
name|table
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
block|}
specifier|public
name|String
name|getValueColumnName
parameter_list|()
block|{
return|return
name|valueColumnName
return|;
block|}
specifier|public
name|void
name|setValueColumnName
parameter_list|(
name|String
name|valueColumnName
parameter_list|)
block|{
name|this
operator|.
name|valueColumnName
operator|=
name|valueColumnName
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|JpaUniqueConstraint
argument_list|>
name|getUniqueConstraints
parameter_list|()
block|{
if|if
condition|(
name|uniqueConstraints
operator|==
literal|null
condition|)
block|{
name|uniqueConstraints
operator|=
operator|new
name|ArrayList
argument_list|<
name|JpaUniqueConstraint
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
name|uniqueConstraints
return|;
block|}
block|}
end_class

end_unit

