begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|hessian
operator|.
name|service
operator|.
name|HessianUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|DataRowTest
extends|extends
name|CayenneCase
block|{
specifier|public
name|void
name|testHessianSerializability
parameter_list|()
throws|throws
name|Exception
block|{
name|DataRow
name|s1
init|=
operator|new
name|DataRow
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|s1
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|DataRow
name|s2
init|=
operator|(
name|DataRow
operator|)
name|HessianUtil
operator|.
name|cloneViaServerClientSerialization
argument_list|(
name|s1
argument_list|,
operator|new
name|EntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s1
operator|.
name|getVersion
argument_list|()
argument_list|,
name|s2
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s1
operator|.
name|getReplacesVersion
argument_list|()
argument_list|,
name|s2
operator|.
name|getReplacesVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// at the moment there are no serializers that can go from client to server.
comment|// DataRow s3 = (DataRow) HessianUtil.cloneViaClientServerSerialization(
comment|// s1,
comment|// new EntityResolver());
comment|//
comment|// assertNotSame(s1, s3);
comment|// assertEquals(s1, s3);
block|}
specifier|public
name|void
name|testVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|DataRow
name|s1
init|=
operator|new
name|DataRow
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|DataRow
name|s2
init|=
operator|new
name|DataRow
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|DataRow
name|s3
init|=
operator|new
name|DataRow
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|s1
operator|.
name|getVersion
argument_list|()
operator|==
name|s2
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|s2
operator|.
name|getVersion
argument_list|()
operator|==
name|s3
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|s3
operator|.
name|getVersion
argument_list|()
operator|==
name|s1
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @deprecated since 3.0 - unused.      */
specifier|public
name|void
name|testCreateObjectId
parameter_list|()
throws|throws
name|Exception
block|{
comment|// must provide a map container for the entities
name|DataMap
name|entityContainer
init|=
operator|new
name|DataMap
argument_list|()
decl_stmt|;
name|ObjEntity
name|objEntity
init|=
operator|new
name|ObjEntity
argument_list|(
literal|"456"
argument_list|)
decl_stmt|;
name|entityContainer
operator|.
name|addObjEntity
argument_list|(
name|objEntity
argument_list|)
expr_stmt|;
name|DbEntity
name|dbe
init|=
operator|new
name|DbEntity
argument_list|(
literal|"123"
argument_list|)
decl_stmt|;
name|objEntity
operator|.
name|setDbEntityName
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|entityContainer
operator|.
name|addDbEntity
argument_list|(
name|dbe
argument_list|)
expr_stmt|;
name|DbAttribute
name|at
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"xyz"
argument_list|)
decl_stmt|;
name|at
operator|.
name|setPrimaryKey
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbe
operator|.
name|addAttribute
argument_list|(
name|at
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|entityClass
init|=
name|Number
operator|.
name|class
decl_stmt|;
name|objEntity
operator|.
name|setClassName
argument_list|(
name|entityClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test same id created by different methods
name|DataRow
name|map
init|=
operator|new
name|DataRow
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|at
operator|.
name|getName
argument_list|()
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|DataRow
name|map2
init|=
operator|new
name|DataRow
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|map2
operator|.
name|put
argument_list|(
name|at
operator|.
name|getName
argument_list|()
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|ObjectId
name|ref
init|=
operator|new
name|ObjectId
argument_list|(
name|objEntity
operator|.
name|getName
argument_list|()
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|ObjectId
name|oid
init|=
name|map2
operator|.
name|createObjectId
argument_list|(
name|objEntity
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ref
argument_list|,
name|oid
argument_list|)
expr_stmt|;
block|}
comment|/**      * @deprecated since 3.0 - unused.      */
specifier|public
name|void
name|testCreateObjectIdNulls
parameter_list|()
throws|throws
name|Exception
block|{
comment|// must provide a map container for the entities
name|DataMap
name|entityContainer
init|=
operator|new
name|DataMap
argument_list|()
decl_stmt|;
name|DbEntity
name|dbe
init|=
operator|new
name|DbEntity
argument_list|(
literal|"123"
argument_list|)
decl_stmt|;
name|entityContainer
operator|.
name|addDbEntity
argument_list|(
name|dbe
argument_list|)
expr_stmt|;
name|DbAttribute
name|at
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"xyz"
argument_list|)
decl_stmt|;
name|at
operator|.
name|setPrimaryKey
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbe
operator|.
name|addAttribute
argument_list|(
name|at
argument_list|)
expr_stmt|;
comment|// assert that data row is smart enough to throw on null ids...
name|DataRow
name|map
init|=
operator|new
name|DataRow
argument_list|(
literal|10
argument_list|)
decl_stmt|;
try|try
block|{
name|map
operator|.
name|createObjectId
argument_list|(
literal|"T"
argument_list|,
name|dbe
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must have failed... Null pk"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|ex
parameter_list|)
block|{
comment|// expected...
block|}
block|}
block|}
end_class

end_unit

