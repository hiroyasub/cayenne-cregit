begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|ServerCase
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|ExpressionTest
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|ObjectContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ServerRuntime
name|runtime
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUpAfterInjection
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"Equals"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|objects
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|SelectQuery
name|query1
init|=
operator|new
name|SelectQuery
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|Painting
operator|.
name|TO_ARTIST_PROPERTY
argument_list|,
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|objects
operator|.
name|addAll
argument_list|(
name|context
operator|.
name|performQuery
argument_list|(
name|query1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|deleteObjects
argument_list|(
name|objects
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFromStringLong
parameter_list|()
block|{
name|Expression
name|e
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"216201000180L"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
literal|216201000180L
argument_list|)
argument_list|,
name|e
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFromStringPath
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"object.path"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Expression
operator|.
name|OBJ_PATH
argument_list|,
name|e1
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Expression
name|e2
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"db:object.path"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Expression
operator|.
name|DB_PATH
argument_list|,
name|e2
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Expression
name|e3
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"object+.path"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Expression
operator|.
name|OBJ_PATH
argument_list|,
name|e3
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Expression
name|e4
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"db:object.path+"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Expression
operator|.
name|DB_PATH
argument_list|,
name|e4
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFromStringScalar
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"a = 'abc'"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|e1
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFromStringEnum
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"a = enum:org.apache.cayenne.exp.ExpEnum1.ONE"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpEnum1
operator|.
name|ONE
argument_list|,
name|e1
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Expression
name|e2
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"a = enum:org.apache.cayenne.exp.ExpEnum1.TWO"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpEnum1
operator|.
name|TWO
argument_list|,
name|e2
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Expression
name|e3
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"a = enum:org.apache.cayenne.exp.ExpEnum1.THREE"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpEnum1
operator|.
name|THREE
argument_list|,
name|e3
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Expression
operator|.
name|fromString
argument_list|(
literal|"a = enum:org.apache.cayenne.exp.ExpEnum1.BOGUS"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't throw on bad enum"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExpressionException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|Expression
operator|.
name|fromString
argument_list|(
literal|"a = enum:BOGUS"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't throw on bad enum"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExpressionException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testExpWithParametersNullHandling_CAY847
parameter_list|()
block|{
name|Expression
name|e
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"X = $x"
argument_list|)
decl_stmt|;
name|e
operator|=
name|e
operator|.
name|expWithParameters
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"x"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"X = null"
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testToEJBQL1
parameter_list|()
block|{
name|Expression
name|e
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"artistName = \"bla\""
argument_list|)
decl_stmt|;
comment|// note single quotes - EJBQL does not support doublequotes...
name|assertEquals
argument_list|(
literal|"x.artistName = 'bla'"
argument_list|,
name|e
operator|.
name|toEJBQL
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEncodeAsEJBQL1
parameter_list|()
block|{
name|Expression
name|e
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"artistName = 'bla'"
argument_list|)
decl_stmt|;
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|e
operator|.
name|encodeAsEJBQL
argument_list|(
name|pw
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|ejbql
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.artistName = 'bla'"
argument_list|,
name|ejbql
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEncodeAsEJBQL2
parameter_list|()
block|{
name|Expression
name|e
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"artistName.stuff = $name"
argument_list|)
decl_stmt|;
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|e
operator|.
name|encodeAsEJBQL
argument_list|(
name|pw
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|ejbql
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.artistName.stuff = :name"
argument_list|,
name|ejbql
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEncodeAsEJBQL3_EncodeListOfParameters
parameter_list|()
block|{
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|e
operator|.
name|encodeAsEJBQL
argument_list|(
name|pw
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|ejbql
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.artistName in ('a', 'b', 'c')"
argument_list|,
name|ejbql
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEncodeAsEJBQL_PersistentParamater
parameter_list|()
block|{
name|Artist
name|a
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|ObjectId
name|aId
init|=
operator|new
name|ObjectId
argument_list|(
literal|"Artist"
argument_list|,
name|Artist
operator|.
name|ARTIST_ID_PK_COLUMN
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|a
operator|.
name|setObjectId
argument_list|(
name|aId
argument_list|)
expr_stmt|;
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"artist"
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|e
operator|.
name|encodeAsEJBQL
argument_list|(
name|pw
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|ejbql
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.artist = 1"
argument_list|,
name|ejbql
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEncodeAsEJBQLNotEquals
parameter_list|()
block|{
name|Expression
name|e
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"artistName != 'bla'"
argument_list|)
decl_stmt|;
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|e
operator|.
name|encodeAsEJBQL
argument_list|(
name|pw
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|ejbql
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.artistName<> 'bla'"
argument_list|,
name|ejbql
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEncodeAsEJBQL_Enum
parameter_list|()
block|{
name|Expression
name|e
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"a = enum:org.apache.cayenne.exp.ExpEnum1.THREE"
argument_list|)
decl_stmt|;
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|e
operator|.
name|encodeAsEJBQL
argument_list|(
name|pw
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|ejbql
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.a = enum:org.apache.cayenne.exp.ExpEnum1.THREE"
argument_list|,
name|ejbql
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEncodeAsString_StringLiteral
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"a = 'abc'"
argument_list|)
decl_stmt|;
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|e1
operator|.
name|encodeAsString
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a = \"abc\""
argument_list|,
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEncodeAsString_Enum
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"a = enum:org.apache.cayenne.exp.ExpEnum1.TWO"
argument_list|)
decl_stmt|;
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|e1
operator|.
name|encodeAsString
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a = enum:org.apache.cayenne.exp.ExpEnum1.TWO"
argument_list|,
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEqualsObjects
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|context
operator|instanceof
name|DataContext
argument_list|)
expr_stmt|;
name|DataContext
name|context2
init|=
operator|(
name|DataContext
operator|)
name|runtime
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|Artist
name|a1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a1
operator|.
name|setArtistName
argument_list|(
literal|"Equals"
argument_list|)
expr_stmt|;
name|Painting
name|p1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|p1
operator|.
name|setToArtist
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setPaintingTitle
argument_list|(
literal|"painting1"
argument_list|)
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|Painting
operator|.
name|TO_ARTIST_PROPERTY
argument_list|,
name|a1
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertNotSame
argument_list|(
name|context2
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|objects
init|=
name|context2
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2 same objects in different contexts
name|assertTrue
argument_list|(
name|e
operator|.
name|match
argument_list|(
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// we change one object - so the objects are different now (PersistenceState
comment|// different)
name|a1
operator|.
name|setArtistName
argument_list|(
literal|"newName"
argument_list|)
expr_stmt|;
name|SelectQuery
name|q2
init|=
operator|new
name|SelectQuery
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|ex2
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|Painting
operator|.
name|TO_ARTIST_PROPERTY
argument_list|,
name|a1
argument_list|)
decl_stmt|;
name|q2
operator|.
name|setQualifier
argument_list|(
name|ex2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ex2
operator|.
name|match
argument_list|(
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|a2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a1
operator|.
name|setArtistName
argument_list|(
literal|"Equals"
argument_list|)
expr_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|ex
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|Painting
operator|.
name|TO_ARTIST_PROPERTY
argument_list|,
name|a2
argument_list|)
decl_stmt|;
name|q
operator|.
name|setQualifier
argument_list|(
name|ex
argument_list|)
expr_stmt|;
comment|// 2 different objects in different contexts
name|assertFalse
argument_list|(
name|ex
operator|.
name|match
argument_list|(
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFirst
parameter_list|()
block|{
name|List
argument_list|<
name|Painting
argument_list|>
name|paintingList
init|=
operator|new
name|ArrayList
argument_list|<
name|Painting
argument_list|>
argument_list|()
decl_stmt|;
name|Painting
name|p1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|p1
operator|.
name|setPaintingTitle
argument_list|(
literal|"x1"
argument_list|)
expr_stmt|;
name|paintingList
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|Painting
name|p2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|p2
operator|.
name|setPaintingTitle
argument_list|(
literal|"x2"
argument_list|)
expr_stmt|;
name|paintingList
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|Painting
name|p3
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|p3
operator|.
name|setPaintingTitle
argument_list|(
literal|"x3"
argument_list|)
expr_stmt|;
name|paintingList
operator|.
name|add
argument_list|(
name|p3
argument_list|)
expr_stmt|;
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
literal|"paintingTitle"
argument_list|,
literal|"x%"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|p1
argument_list|,
name|e1
operator|.
name|first
argument_list|(
name|paintingList
argument_list|)
argument_list|)
expr_stmt|;
name|Expression
name|e3
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"paintingTitle"
argument_list|,
literal|"x3"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|p3
argument_list|,
name|e3
operator|.
name|first
argument_list|(
name|paintingList
argument_list|)
argument_list|)
expr_stmt|;
name|Expression
name|e4
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"paintingTitle"
argument_list|,
literal|"x4"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|e4
operator|.
name|first
argument_list|(
name|paintingList
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

