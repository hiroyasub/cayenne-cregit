begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_comment
comment|/**  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|DataMapProjectTest
extends|extends
name|CayenneCase
block|{
specifier|protected
name|DataMapProject
name|p
decl_stmt|;
specifier|protected
name|File
name|f
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|f
operator|=
operator|new
name|File
argument_list|(
name|getTestDir
argument_list|()
argument_list|,
literal|"Untitled.map.xml"
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't delete file: "
operator|+
name|f
argument_list|)
throw|;
block|}
block|}
comment|// copy shared datamap to the test location
name|DataMap
name|m
init|=
name|getNode
argument_list|()
operator|.
name|getDataMaps
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|m
operator|.
name|encodeAsXML
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|p
operator|=
operator|new
name|DataMapProject
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testProjectFileForObject
parameter_list|()
throws|throws
name|Exception
block|{
name|p
operator|.
name|map
operator|=
operator|new
name|DataMap
argument_list|(
literal|"m1"
argument_list|)
expr_stmt|;
name|ProjectFile
name|pf
init|=
name|p
operator|.
name|projectFileForObject
argument_list|(
name|p
operator|.
name|map
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|pf
argument_list|)
expr_stmt|;
name|pf
operator|=
name|p
operator|.
name|projectFileForObject
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|pf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pf
operator|instanceof
name|DataMapFile
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|p
operator|.
name|map
argument_list|,
name|pf
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConstructor
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|f
operator|.
name|getCanonicalFile
argument_list|()
argument_list|,
name|p
operator|.
name|getMainFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|projectFileForObject
argument_list|(
name|p
argument_list|)
operator|instanceof
name|DataMapFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTreeNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|Iterator
name|treeNodes
init|=
name|p
operator|.
name|treeNodes
argument_list|()
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|treeNodes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|len
operator|++
expr_stmt|;
name|treeNodes
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|len
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

