begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|art
operator|.
name|CharPkTestEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_comment
comment|/**  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|DataContextCharPKTest
extends|extends
name|CayenneCase
block|{
specifier|protected
name|DataContext
name|ctxt
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|deleteTestData
argument_list|()
expr_stmt|;
name|ctxt
operator|=
name|createDataContext
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testInsert
parameter_list|()
throws|throws
name|Exception
block|{
name|CharPkTestEntity
name|object
init|=
operator|(
name|CharPkTestEntity
operator|)
name|ctxt
operator|.
name|newObject
argument_list|(
literal|"CharPkTestEntity"
argument_list|)
decl_stmt|;
name|object
operator|.
name|setOtherCol
argument_list|(
literal|"object-XYZ"
argument_list|)
expr_stmt|;
name|object
operator|.
name|setPkCol
argument_list|(
literal|"PK1"
argument_list|)
expr_stmt|;
name|ctxt
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|SQLTemplate
name|q
init|=
operator|new
name|SQLTemplate
argument_list|(
name|CharPkTestEntity
operator|.
name|class
argument_list|,
literal|"SELECT * FROM CHAR_PK_TEST"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setFetchingDataRows
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
name|rows
init|=
name|ctxt
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
name|row
init|=
operator|(
name|Map
operator|)
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|row
operator|.
name|get
argument_list|(
literal|"OTHER_COL"
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"other_col"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"object-XYZ"
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|val
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"PK_COL"
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"pk_col"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"PK1"
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|CharPkTestEntity
name|object
init|=
operator|(
name|CharPkTestEntity
operator|)
name|ctxt
operator|.
name|newObject
argument_list|(
literal|"CharPkTestEntity"
argument_list|)
decl_stmt|;
name|object
operator|.
name|setOtherCol
argument_list|(
literal|"object-XYZ"
argument_list|)
expr_stmt|;
name|object
operator|.
name|setPkCol
argument_list|(
literal|"PK1"
argument_list|)
expr_stmt|;
name|ctxt
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ctxt
operator|.
name|deleteObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|ctxt
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|SQLTemplate
name|q
init|=
operator|new
name|SQLTemplate
argument_list|(
name|CharPkTestEntity
operator|.
name|class
argument_list|,
literal|"SELECT * FROM CHAR_PK_TEST"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setFetchingDataRows
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
name|rows
init|=
name|ctxt
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|CharPkTestEntity
name|object
init|=
operator|(
name|CharPkTestEntity
operator|)
name|ctxt
operator|.
name|newObject
argument_list|(
literal|"CharPkTestEntity"
argument_list|)
decl_stmt|;
name|object
operator|.
name|setOtherCol
argument_list|(
literal|"object-XYZ"
argument_list|)
expr_stmt|;
name|object
operator|.
name|setPkCol
argument_list|(
literal|"PK1"
argument_list|)
expr_stmt|;
name|ctxt
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|object
operator|.
name|setOtherCol
argument_list|(
literal|"UPDATED"
argument_list|)
expr_stmt|;
name|ctxt
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|SQLTemplate
name|q
init|=
operator|new
name|SQLTemplate
argument_list|(
name|CharPkTestEntity
operator|.
name|class
argument_list|,
literal|"SELECT * FROM CHAR_PK_TEST"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setFetchingDataRows
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
name|rows
init|=
name|ctxt
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
name|row
init|=
operator|(
name|Map
operator|)
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|row
operator|.
name|get
argument_list|(
literal|"OTHER_COL"
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
name|row
operator|.
name|get
argument_list|(
literal|"other_col"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"UPDATED"
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

