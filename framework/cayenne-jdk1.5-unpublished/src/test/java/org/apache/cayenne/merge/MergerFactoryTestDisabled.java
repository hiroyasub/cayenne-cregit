begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|merge
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneDataObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|QueryLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_class
specifier|public
class|class
name|MergerFactoryTestDisabled
extends|extends
name|CayenneCase
block|{
specifier|private
name|DataNode
name|node
decl_stmt|;
specifier|private
name|DataMap
name|map
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|deleteTestData
argument_list|()
expr_stmt|;
name|createTestData
argument_list|(
literal|"testArtists"
argument_list|)
expr_stmt|;
name|node
operator|=
name|getDomain
argument_list|()
operator|.
name|getDataNodes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|map
operator|=
name|getDomain
argument_list|()
operator|.
name|getMap
argument_list|(
literal|"testmap"
argument_list|)
expr_stmt|;
comment|// clone the DataMap so that we can manipulate it without worries
name|map
operator|=
operator|(
name|DataMap
operator|)
name|Util
operator|.
name|cloneViaSerialization
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|filterDataMap
argument_list|(
name|node
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|DbMerger
name|merger
init|=
operator|new
name|DbMerger
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MergerToken
argument_list|>
name|tokens
init|=
name|merger
operator|.
name|createMergeTokens
argument_list|(
name|node
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|execute
argument_list|(
name|map
argument_list|,
name|node
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|XXtestAddAndDropColumnToDb
parameter_list|()
throws|throws
name|Exception
block|{
name|DbEntity
name|dbEntity
init|=
name|map
operator|.
name|getDbEntity
argument_list|(
literal|"PAINTING"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
comment|// create and add new column to model and db
name|DbAttribute
name|column
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"NEWCOL1"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|dbEntity
argument_list|)
decl_stmt|;
name|column
operator|.
name|setMandatory
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|column
operator|.
name|setMaxLength
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// try merge once more to check that is was merged
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// remove it from model and db
name|dbEntity
operator|.
name|removeAttribute
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|XXtestChangeVarcharSizeToDb
parameter_list|()
throws|throws
name|Exception
block|{
name|DbEntity
name|dbEntity
init|=
name|map
operator|.
name|getDbEntity
argument_list|(
literal|"PAINTING"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
comment|// create and add new column to model and db
name|DbAttribute
name|column
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"NEWCOL2"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|dbEntity
argument_list|)
decl_stmt|;
name|column
operator|.
name|setMandatory
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|column
operator|.
name|setMaxLength
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// check that is was merged
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// change size
name|column
operator|.
name|setMaxLength
argument_list|(
literal|20
argument_list|)
expr_stmt|;
comment|// merge to db
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// check that is was merged
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// clean up
name|dbEntity
operator|.
name|removeAttribute
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|XXtestMultipleTokensToDb
parameter_list|()
throws|throws
name|Exception
block|{
name|DbEntity
name|dbEntity
init|=
name|map
operator|.
name|getDbEntity
argument_list|(
literal|"PAINTING"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|DbAttribute
name|column1
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"NEWCOL3"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|dbEntity
argument_list|)
decl_stmt|;
name|column1
operator|.
name|setMandatory
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|column1
operator|.
name|setMaxLength
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|column1
argument_list|)
expr_stmt|;
name|DbAttribute
name|column2
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"NEWCOL4"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|dbEntity
argument_list|)
decl_stmt|;
name|column2
operator|.
name|setMandatory
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|column2
operator|.
name|setMaxLength
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|column2
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// check that is was merged
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// change size
name|column1
operator|.
name|setMaxLength
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|column2
operator|.
name|setMaxLength
argument_list|(
literal|30
argument_list|)
expr_stmt|;
comment|// merge to db
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// check that is was merged
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// clean up
name|dbEntity
operator|.
name|removeAttribute
argument_list|(
name|column1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|removeAttribute
argument_list|(
name|column2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddTableToDb
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTableIfPresent
argument_list|(
name|node
argument_list|,
literal|"NEW_TABLE"
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DbEntity
name|dbEntity
init|=
operator|new
name|DbEntity
argument_list|(
literal|"NEW_TABLE"
argument_list|)
decl_stmt|;
name|DbAttribute
name|column1
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"ID"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|dbEntity
argument_list|)
decl_stmt|;
name|column1
operator|.
name|setMandatory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|column1
operator|.
name|setPrimaryKey
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|column1
argument_list|)
expr_stmt|;
name|DbAttribute
name|column2
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|dbEntity
argument_list|)
decl_stmt|;
name|column2
operator|.
name|setMaxLength
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|column2
operator|.
name|setMandatory
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|column2
argument_list|)
expr_stmt|;
name|map
operator|.
name|addDbEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ObjEntity
name|objEntity
init|=
operator|new
name|ObjEntity
argument_list|(
literal|"NewTable"
argument_list|)
decl_stmt|;
name|objEntity
operator|.
name|setDbEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|ObjAttribute
name|oatr1
init|=
operator|new
name|ObjAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|oatr1
operator|.
name|setDbAttribute
argument_list|(
name|column2
argument_list|)
expr_stmt|;
name|oatr1
operator|.
name|setType
argument_list|(
literal|"java.lang.String"
argument_list|)
expr_stmt|;
name|objEntity
operator|.
name|addAttribute
argument_list|(
name|oatr1
argument_list|)
expr_stmt|;
name|map
operator|.
name|addObjEntity
argument_list|(
name|objEntity
argument_list|)
expr_stmt|;
comment|// try to insert some rows to check that pk stuff is working
name|DataContext
name|ctxt
init|=
name|createDataContext
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|CayenneDataObject
name|dao
init|=
operator|(
name|CayenneDataObject
operator|)
name|ctxt
operator|.
name|newObject
argument_list|(
name|objEntity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|dao
operator|.
name|writeProperty
argument_list|(
name|oatr1
operator|.
name|getName
argument_list|()
argument_list|,
literal|"test "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|ctxt
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// clear up
name|map
operator|.
name|removeObjEntity
argument_list|(
name|objEntity
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|map
operator|.
name|removeDbEntity
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ctxt
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|clearCache
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|getObjEntity
argument_list|(
name|objEntity
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|getDbEntity
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|getDbEntities
argument_list|()
operator|.
name|contains
argument_list|(
name|dbEntity
argument_list|)
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|XXtestAddForeignKeyWithTable
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTableIfPresent
argument_list|(
name|node
argument_list|,
literal|"NEW_TABLE"
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DbEntity
name|dbEntity
init|=
operator|new
name|DbEntity
argument_list|(
literal|"NEW_TABLE"
argument_list|)
decl_stmt|;
name|DbAttribute
name|column1
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"ID"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|dbEntity
argument_list|)
decl_stmt|;
name|column1
operator|.
name|setMandatory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|column1
operator|.
name|setPrimaryKey
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|column1
argument_list|)
expr_stmt|;
name|DbAttribute
name|column2
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|dbEntity
argument_list|)
decl_stmt|;
name|column2
operator|.
name|setMaxLength
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|column2
operator|.
name|setMandatory
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|column2
argument_list|)
expr_stmt|;
name|DbAttribute
name|column3
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"ARTIST_ID"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|dbEntity
argument_list|)
decl_stmt|;
name|column3
operator|.
name|setMandatory
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|column3
argument_list|)
expr_stmt|;
name|map
operator|.
name|addDbEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|DbEntity
name|artistDbEntity
init|=
name|map
operator|.
name|getDbEntity
argument_list|(
literal|"ARTIST"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|artistDbEntity
argument_list|)
expr_stmt|;
comment|// relation from new_table to artist
name|DbRelationship
name|r1
init|=
operator|new
name|DbRelationship
argument_list|(
literal|"toArtistR1"
argument_list|)
decl_stmt|;
name|r1
operator|.
name|setSourceEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setTargetEntity
argument_list|(
name|artistDbEntity
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setToMany
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|r1
operator|.
name|addJoin
argument_list|(
operator|new
name|DbJoin
argument_list|(
name|r1
argument_list|,
literal|"ARTIST_ID"
argument_list|,
literal|"ARTIST_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addRelationship
argument_list|(
name|r1
argument_list|)
expr_stmt|;
comment|// relation from artist to new_table
name|DbRelationship
name|r2
init|=
operator|new
name|DbRelationship
argument_list|(
literal|"toNewTableR2"
argument_list|)
decl_stmt|;
name|r2
operator|.
name|setSourceEntity
argument_list|(
name|artistDbEntity
argument_list|)
expr_stmt|;
name|r2
operator|.
name|setTargetEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|r2
operator|.
name|setToMany
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|r2
operator|.
name|addJoin
argument_list|(
operator|new
name|DbJoin
argument_list|(
name|r2
argument_list|,
literal|"ARTIST_ID"
argument_list|,
literal|"ARTIST_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|artistDbEntity
operator|.
name|addRelationship
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DataContext
name|ctxt
init|=
name|createDataContext
argument_list|()
decl_stmt|;
comment|// remove relationships
name|dbEntity
operator|.
name|removeRelationship
argument_list|(
name|r1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|artistDbEntity
operator|.
name|removeRelationship
argument_list|(
name|r2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ctxt
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|clearCache
argument_list|()
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// clear up
comment|// map.removeObjEntity(objEntity.getName(), true);
name|map
operator|.
name|removeDbEntity
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ctxt
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|clearCache
argument_list|()
expr_stmt|;
comment|// assertNull(map.getObjEntity(objEntity.getName()));
name|assertNull
argument_list|(
name|map
operator|.
name|getDbEntity
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|getDbEntities
argument_list|()
operator|.
name|contains
argument_list|(
name|dbEntity
argument_list|)
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|XXtestAddForeignKeyAfterTable
parameter_list|()
throws|throws
name|Exception
block|{
name|dropTableIfPresent
argument_list|(
name|node
argument_list|,
literal|"NEW_TABLE"
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DbEntity
name|dbEntity
init|=
operator|new
name|DbEntity
argument_list|(
literal|"NEW_TABLE"
argument_list|)
decl_stmt|;
name|DbAttribute
name|column1
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"ID"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|dbEntity
argument_list|)
decl_stmt|;
name|column1
operator|.
name|setMandatory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|column1
operator|.
name|setPrimaryKey
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|column1
argument_list|)
expr_stmt|;
name|DbAttribute
name|column2
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"NAME"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|dbEntity
argument_list|)
decl_stmt|;
name|column2
operator|.
name|setMaxLength
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|column2
operator|.
name|setMandatory
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|column2
argument_list|)
expr_stmt|;
name|DbAttribute
name|column3
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"ARTIST_ID"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|dbEntity
argument_list|)
decl_stmt|;
name|column3
operator|.
name|setMandatory
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|column3
argument_list|)
expr_stmt|;
name|map
operator|.
name|addDbEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|DbEntity
name|artistDbEntity
init|=
name|map
operator|.
name|getDbEntity
argument_list|(
literal|"ARTIST"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|artistDbEntity
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// relation from new_table to artist
name|DbRelationship
name|r1
init|=
operator|new
name|DbRelationship
argument_list|(
literal|"toArtistR1"
argument_list|)
decl_stmt|;
name|r1
operator|.
name|setSourceEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setTargetEntity
argument_list|(
name|artistDbEntity
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setToMany
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|r1
operator|.
name|addJoin
argument_list|(
operator|new
name|DbJoin
argument_list|(
name|r1
argument_list|,
literal|"ARTIST_ID"
argument_list|,
literal|"ARTIST_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addRelationship
argument_list|(
name|r1
argument_list|)
expr_stmt|;
comment|// relation from artist to new_table
name|DbRelationship
name|r2
init|=
operator|new
name|DbRelationship
argument_list|(
literal|"toNewTableR2"
argument_list|)
decl_stmt|;
name|r2
operator|.
name|setSourceEntity
argument_list|(
name|artistDbEntity
argument_list|)
expr_stmt|;
name|r2
operator|.
name|setTargetEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|r2
operator|.
name|setToMany
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|r2
operator|.
name|addJoin
argument_list|(
operator|new
name|DbJoin
argument_list|(
name|r2
argument_list|,
literal|"ARTIST_ID"
argument_list|,
literal|"ARTIST_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|artistDbEntity
operator|.
name|addRelationship
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DataContext
name|ctxt
init|=
name|createDataContext
argument_list|()
decl_stmt|;
comment|// remove relationships
name|dbEntity
operator|.
name|removeRelationship
argument_list|(
name|r1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|artistDbEntity
operator|.
name|removeRelationship
argument_list|(
name|r2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ctxt
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|clearCache
argument_list|()
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// clear up
comment|// map.removeObjEntity(objEntity.getName(), true);
name|map
operator|.
name|removeDbEntity
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ctxt
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|clearCache
argument_list|()
expr_stmt|;
comment|// assertNull(map.getObjEntity(objEntity.getName()));
name|assertNull
argument_list|(
name|map
operator|.
name|getDbEntity
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|getDbEntities
argument_list|()
operator|.
name|contains
argument_list|(
name|dbEntity
argument_list|)
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
name|node
argument_list|,
name|map
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertTokensAndExecute
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|DataMap
name|map
parameter_list|,
name|int
name|expectedToDb
parameter_list|,
name|int
name|expectedToModel
parameter_list|)
throws|throws
name|Exception
block|{
name|DbMerger
name|merger
init|=
operator|new
name|DbMerger
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MergerToken
argument_list|>
name|tokens
init|=
name|merger
operator|.
name|createMergeTokens
argument_list|(
name|node
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|assertTokens
argument_list|(
name|tokens
argument_list|,
name|expectedToDb
argument_list|,
name|expectedToModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|execute
argument_list|(
name|map
argument_list|,
name|node
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertTokens
parameter_list|(
name|List
argument_list|<
name|MergerToken
argument_list|>
name|tokens
parameter_list|,
name|int
name|expectedToDb
parameter_list|,
name|int
name|expectedToModel
parameter_list|)
block|{
name|int
name|actualToDb
init|=
literal|0
decl_stmt|;
name|int
name|actualToModel
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MergerToken
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|token
operator|.
name|getDirection
argument_list|()
operator|.
name|equals
argument_list|(
name|MergeDirection
operator|.
name|TO_DB
argument_list|)
condition|)
block|{
name|actualToDb
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|token
operator|.
name|getDirection
argument_list|()
operator|.
name|equals
argument_list|(
name|MergeDirection
operator|.
name|TO_MODEL
argument_list|)
condition|)
block|{
name|actualToModel
operator|++
expr_stmt|;
block|}
block|}
name|logTokens
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tokens to db"
argument_list|,
name|expectedToDb
argument_list|,
name|actualToDb
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tokens to model"
argument_list|,
name|expectedToModel
argument_list|,
name|actualToModel
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|logTokens
parameter_list|(
name|List
argument_list|<
name|MergerToken
argument_list|>
name|tokens
parameter_list|)
block|{
for|for
control|(
name|MergerToken
name|token
range|:
name|tokens
control|)
block|{
name|QueryLogger
operator|.
name|log
argument_list|(
literal|"token: "
operator|+
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|instanceof
name|AbstractToDbToken
condition|)
block|{
name|QueryLogger
operator|.
name|log
argument_list|(
literal|"  \\-->  "
operator|+
operator|(
operator|(
name|AbstractToDbToken
operator|)
name|token
operator|)
operator|.
name|createSql
argument_list|(
name|node
operator|.
name|getAdapter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|dropTableIfPresent
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|DbEntity
name|entity
init|=
operator|new
name|DbEntity
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|AbstractToDbToken
name|t
init|=
operator|(
name|AbstractToDbToken
operator|)
name|node
operator|.
name|getAdapter
argument_list|()
operator|.
name|mergerFactory
argument_list|()
operator|.
name|createDropTableToDb
argument_list|(
name|entity
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|sql
range|:
name|t
operator|.
name|createSql
argument_list|(
name|node
operator|.
name|getAdapter
argument_list|()
argument_list|)
control|)
block|{
name|executeSql
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
comment|/**      * Remote binary pk {@link DbEntity} for {@link DbAdapter} not supporting that and so      * on.      */
specifier|private
name|void
name|filterDataMap
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|DataMap
name|map
parameter_list|)
block|{
comment|// copied from AbstractAccessStack.dbEntitiesInInsertOrder
name|boolean
name|excludeLOB
init|=
operator|!
name|getAccessStackAdapter
argument_list|()
operator|.
name|supportsLobs
argument_list|()
decl_stmt|;
name|boolean
name|excludeBinPK
init|=
operator|!
name|getAccessStackAdapter
argument_list|()
operator|.
name|supportsBinaryPK
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|excludeLOB
operator|||
name|excludeBinPK
operator|)
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|DbEntity
argument_list|>
name|entitiesToRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|DbEntity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DbEntity
name|ent
range|:
name|map
operator|.
name|getDbEntities
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeBinPK
condition|)
block|{
for|for
control|(
name|DbAttribute
name|attr
range|:
name|ent
operator|.
name|getAttributes
argument_list|()
control|)
block|{
comment|// check for BIN PK or FK to BIN Pk
if|if
condition|(
name|attr
operator|.
name|getType
argument_list|()
operator|==
name|Types
operator|.
name|BINARY
operator|||
name|attr
operator|.
name|getType
argument_list|()
operator|==
name|Types
operator|.
name|VARBINARY
operator|||
name|attr
operator|.
name|getType
argument_list|()
operator|==
name|Types
operator|.
name|LONGVARBINARY
condition|)
block|{
if|if
condition|(
name|attr
operator|.
name|isPrimaryKey
argument_list|()
operator|||
name|attr
operator|.
name|isForeignKey
argument_list|()
condition|)
block|{
name|entitiesToRemove
operator|.
name|add
argument_list|(
name|ent
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|DbEntity
name|e
range|:
name|entitiesToRemove
control|)
block|{
name|QueryLogger
operator|.
name|log
argument_list|(
literal|"filter away "
operator|+
name|e
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|removeDbEntity
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|execute
parameter_list|(
name|DataMap
name|map
parameter_list|,
name|DataNode
name|node
parameter_list|,
name|List
argument_list|<
name|MergerToken
argument_list|>
name|tokens
parameter_list|)
throws|throws
name|Exception
block|{
name|MergerContext
name|mergerContext
init|=
operator|new
name|ExecutingMergerContext
argument_list|(
name|map
argument_list|,
name|node
argument_list|)
decl_stmt|;
for|for
control|(
name|MergerToken
name|tok
range|:
name|tokens
control|)
block|{
name|tok
operator|.
name|execute
argument_list|(
name|mergerContext
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|executeSql
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|Statement
name|st
init|=
literal|null
decl_stmt|;
try|try
block|{
name|QueryLogger
operator|.
name|log
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|conn
operator|=
name|getConnection
argument_list|()
expr_stmt|;
name|st
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|st
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|QueryLogger
operator|.
name|logQueryError
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|st
operator|!=
literal|null
condition|)
block|{
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|deleteTestData
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

