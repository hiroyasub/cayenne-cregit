begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|PeopleCase
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|EntityResolverInheritanceTest
extends|extends
name|PeopleCase
block|{
specifier|protected
name|EntityResolver
name|resolver
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|resolver
operator|=
operator|new
name|EntityResolver
argument_list|(
name|getDomain
argument_list|()
operator|.
name|getDataMaps
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ObjEntity
name|getAbstractPerson
parameter_list|()
block|{
return|return
name|getObjEntity
argument_list|(
literal|"AbstractPerson"
argument_list|)
return|;
block|}
specifier|private
name|ObjEntity
name|getEmployee
parameter_list|()
block|{
return|return
name|getObjEntity
argument_list|(
literal|"Employee"
argument_list|)
return|;
block|}
specifier|private
name|ObjEntity
name|getManager
parameter_list|()
block|{
return|return
name|getObjEntity
argument_list|(
literal|"Manager"
argument_list|)
return|;
block|}
specifier|public
name|void
name|testLookupAbstractPersonTree
parameter_list|()
throws|throws
name|Exception
block|{
name|EntityInheritanceTree
name|tree
init|=
name|resolver
operator|.
name|lookupInheritanceTree
argument_list|(
name|getAbstractPerson
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tree
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|getAbstractPerson
argument_list|()
argument_list|,
name|tree
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLookupEmployeeTree
parameter_list|()
throws|throws
name|Exception
block|{
name|EntityInheritanceTree
name|tree
init|=
name|resolver
operator|.
name|lookupInheritanceTree
argument_list|(
name|getEmployee
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tree
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|getEmployee
argument_list|()
argument_list|,
name|tree
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLookupManagerTree
parameter_list|()
throws|throws
name|Exception
block|{
name|EntityInheritanceTree
name|tree
init|=
name|resolver
operator|.
name|lookupInheritanceTree
argument_list|(
name|getManager
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLookupTreeRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjEntity
name|super1
init|=
operator|new
name|ObjEntity
argument_list|(
literal|"super1"
argument_list|)
decl_stmt|;
name|ObjEntity
name|sub1
init|=
operator|new
name|ObjEntity
argument_list|(
literal|"sub1"
argument_list|)
decl_stmt|;
name|ObjEntity
name|sub2
init|=
operator|new
name|ObjEntity
argument_list|(
literal|"sub2"
argument_list|)
decl_stmt|;
name|super1
operator|.
name|setClassName
argument_list|(
literal|"java.lang.Float"
argument_list|)
expr_stmt|;
name|sub1
operator|.
name|setSuperEntityName
argument_list|(
literal|"super1"
argument_list|)
expr_stmt|;
name|sub1
operator|.
name|setClassName
argument_list|(
literal|"java.lang.Object"
argument_list|)
expr_stmt|;
name|sub2
operator|.
name|setSuperEntityName
argument_list|(
literal|"super1"
argument_list|)
expr_stmt|;
name|sub2
operator|.
name|setClassName
argument_list|(
literal|"java.lang.Integer"
argument_list|)
expr_stmt|;
name|DataMap
name|map
init|=
operator|new
name|DataMap
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|map
operator|.
name|addObjEntity
argument_list|(
name|super1
argument_list|)
expr_stmt|;
name|map
operator|.
name|addObjEntity
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|map
operator|.
name|addObjEntity
argument_list|(
name|sub2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|resolver
operator|.
name|lookupInheritanceTree
argument_list|(
name|super1
argument_list|)
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|addDataMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|EntityInheritanceTree
name|tree
init|=
name|resolver
operator|.
name|lookupInheritanceTree
argument_list|(
name|super1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tree
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|super1
argument_list|,
name|tree
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

