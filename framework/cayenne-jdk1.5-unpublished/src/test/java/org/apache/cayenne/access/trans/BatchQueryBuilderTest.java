begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|trans
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|JdbcAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|BatchQuery
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|BatchQueryBuilderTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testConstructor
parameter_list|()
throws|throws
name|Exception
block|{
name|DbAdapter
name|adapter
init|=
operator|new
name|JdbcAdapter
argument_list|()
decl_stmt|;
name|BatchQueryBuilder
name|builder
init|=
operator|new
name|BatchQueryBuilder
argument_list|(
name|adapter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|createSqlString
parameter_list|(
name|BatchQuery
name|batch
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|assertSame
argument_list|(
name|adapter
argument_list|,
name|builder
operator|.
name|getAdapter
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAppendDbAttribute1
parameter_list|()
throws|throws
name|Exception
block|{
name|DbAdapter
name|adapter
init|=
operator|new
name|JdbcAdapter
argument_list|()
decl_stmt|;
name|String
name|trimFunction
init|=
literal|"testTrim"
decl_stmt|;
name|BatchQueryBuilder
name|builder
init|=
operator|new
name|BatchQueryBuilder
argument_list|(
name|adapter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|createSqlString
parameter_list|(
name|BatchQuery
name|batch
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|builder
operator|.
name|setTrimFunction
argument_list|(
name|trimFunction
argument_list|)
expr_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|DbAttribute
name|attr
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"testAttr"
argument_list|,
name|Types
operator|.
name|CHAR
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|builder
operator|.
name|appendDbAttribute
argument_list|(
name|buf
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testTrim(testAttr)"
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|attr
operator|=
operator|new
name|DbAttribute
argument_list|(
literal|"testAttr"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|appendDbAttribute
argument_list|(
name|buf
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testAttr"
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAppendDbAttribute2
parameter_list|()
throws|throws
name|Exception
block|{
name|DbAdapter
name|adapter
init|=
operator|new
name|JdbcAdapter
argument_list|()
decl_stmt|;
name|BatchQueryBuilder
name|builder
init|=
operator|new
name|BatchQueryBuilder
argument_list|(
name|adapter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|createSqlString
parameter_list|(
name|BatchQuery
name|batch
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|DbAttribute
name|attr
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"testAttr"
argument_list|,
name|Types
operator|.
name|CHAR
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|builder
operator|.
name|appendDbAttribute
argument_list|(
name|buf
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testAttr"
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|attr
operator|=
operator|new
name|DbAttribute
argument_list|(
literal|"testAttr"
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|appendDbAttribute
argument_list|(
name|buf
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testAttr"
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

