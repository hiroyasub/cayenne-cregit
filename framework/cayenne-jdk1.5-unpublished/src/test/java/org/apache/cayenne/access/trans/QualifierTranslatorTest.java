begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|trans
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|art
operator|.
name|Gallery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|TstBinaryExpSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|TstExpressionCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|TstExpressionSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|TstTernaryExpSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|TstUnaryExpSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|MockQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QualifiedQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_class
specifier|public
class|class
name|QualifierTranslatorTest
extends|extends
name|CayenneCase
block|{
specifier|protected
name|TstQueryAssembler
name|qa
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
name|qa
operator|=
operator|new
name|TstQueryAssembler
argument_list|(
name|getNode
argument_list|()
argument_list|,
operator|new
name|SelectQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNonQualifiedQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|qa
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|qa
operator|=
operator|new
name|TstQueryAssembler
argument_list|(
name|getNode
argument_list|()
argument_list|,
operator|new
name|MockQuery
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|QualifierTranslator
argument_list|(
name|qa
argument_list|)
operator|.
name|appendPart
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|ccex
parameter_list|)
block|{
comment|// exception expected
block|}
finally|finally
block|{
name|qa
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testNullQualifier
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
operator|new
name|QualifierTranslator
argument_list|(
name|qa
argument_list|)
operator|.
name|appendPart
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|qa
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|out
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUnary
parameter_list|()
throws|throws
name|Exception
block|{
name|doExpressionTest
argument_list|(
operator|new
name|TstUnaryExpSuite
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBinary
parameter_list|()
throws|throws
name|Exception
block|{
name|doExpressionTest
argument_list|(
operator|new
name|TstBinaryExpSuite
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTernary
parameter_list|()
throws|throws
name|Exception
block|{
name|doExpressionTest
argument_list|(
operator|new
name|TstTernaryExpSuite
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testExtras
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectId
name|oid1
init|=
operator|new
name|ObjectId
argument_list|(
literal|"Gallery"
argument_list|,
literal|"GALLERY_ID"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ObjectId
name|oid2
init|=
operator|new
name|ObjectId
argument_list|(
literal|"Gallery"
argument_list|,
literal|"GALLERY_ID"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Gallery
name|g1
init|=
operator|new
name|Gallery
argument_list|()
decl_stmt|;
name|Gallery
name|g2
init|=
operator|new
name|Gallery
argument_list|()
decl_stmt|;
name|g1
operator|.
name|setObjectId
argument_list|(
name|oid1
argument_list|)
expr_stmt|;
name|g2
operator|.
name|setObjectId
argument_list|(
name|oid2
argument_list|)
expr_stmt|;
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"toGallery"
argument_list|,
name|g1
argument_list|)
decl_stmt|;
name|Expression
name|e2
init|=
name|e1
operator|.
name|orExp
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"toGallery"
argument_list|,
name|g2
argument_list|)
argument_list|)
decl_stmt|;
name|TstExpressionCase
name|extraCase
init|=
operator|new
name|TstExpressionCase
argument_list|(
literal|"Exhibit"
argument_list|,
name|e2
argument_list|,
literal|"(ta.GALLERY_ID = ?) OR (ta.GALLERY_ID = ?)"
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|TstExpressionSuite
name|suite
init|=
operator|new
name|TstExpressionSuite
argument_list|()
block|{         }
decl_stmt|;
name|suite
operator|.
name|addCase
argument_list|(
name|extraCase
argument_list|)
expr_stmt|;
name|doExpressionTest
argument_list|(
name|suite
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doExpressionTest
parameter_list|(
name|TstExpressionSuite
name|suite
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|TstExpressionCase
index|[]
name|cases
init|=
name|suite
operator|.
name|cases
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|cases
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|QualifiedQuery
name|q
init|=
operator|(
name|QualifiedQuery
operator|)
name|qa
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|setQualifier
argument_list|(
name|cases
index|[
name|i
index|]
operator|.
name|getCayenneExp
argument_list|()
argument_list|)
expr_stmt|;
name|ObjEntity
name|ent
init|=
name|getObjEntity
argument_list|(
name|cases
index|[
name|i
index|]
operator|.
name|getRootEntity
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ent
argument_list|)
expr_stmt|;
name|q
operator|.
name|setRoot
argument_list|(
name|ent
argument_list|)
expr_stmt|;
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
operator|new
name|QualifierTranslator
argument_list|(
name|qa
argument_list|)
operator|.
name|appendPart
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|cases
index|[
name|i
index|]
operator|.
name|assertTranslatedWell
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Failed case: ["
operator|+
name|i
operator|+
literal|"]: "
operator|+
name|cases
index|[
name|i
index|]
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|qa
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

