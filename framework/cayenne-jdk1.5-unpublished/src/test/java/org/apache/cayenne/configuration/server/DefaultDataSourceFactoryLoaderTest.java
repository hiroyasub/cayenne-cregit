begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|AdhocObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DefaultAdhocObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|mock
operator|.
name|MockDataSourceFactory1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|DataSourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|DefaultDataSourceFactoryLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|PropertyDataSourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|XMLPoolingDataSourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conn
operator|.
name|DataSourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Binder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|DIBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
operator|.
name|ResourceLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
operator|.
name|mock
operator|.
name|MockResourceLocator
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultDataSourceFactoryLoaderTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testGetDataSourceFactory_Implicit
parameter_list|()
throws|throws
name|Exception
block|{
name|DataNodeDescriptor
name|nodeDescriptor
init|=
operator|new
name|DataNodeDescriptor
argument_list|()
decl_stmt|;
name|nodeDescriptor
operator|.
name|setName
argument_list|(
literal|"node1"
argument_list|)
expr_stmt|;
name|nodeDescriptor
operator|.
name|setDataSourceDescriptor
argument_list|(
operator|new
name|DataSourceInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Module
name|testModule
init|=
operator|new
name|Module
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|AdhocObjectFactory
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|DefaultAdhocObjectFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|ResourceLocator
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockResourceLocator
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Injector
name|injector
init|=
name|DIBootstrap
operator|.
name|createInjector
argument_list|(
name|testModule
argument_list|)
decl_stmt|;
name|DefaultDataSourceFactoryLoader
name|factoryLoader
init|=
operator|new
name|DefaultDataSourceFactoryLoader
argument_list|()
decl_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|factoryLoader
argument_list|)
expr_stmt|;
name|DataSourceFactory
name|factory
init|=
name|factoryLoader
operator|.
name|getDataSourceFactory
argument_list|(
name|nodeDescriptor
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|factory
operator|instanceof
name|XMLPoolingDataSourceFactory
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetDataSourceFactory_Explicit
parameter_list|()
throws|throws
name|Exception
block|{
name|DataNodeDescriptor
name|nodeDescriptor
init|=
operator|new
name|DataNodeDescriptor
argument_list|()
decl_stmt|;
name|nodeDescriptor
operator|.
name|setName
argument_list|(
literal|"node1"
argument_list|)
expr_stmt|;
name|nodeDescriptor
operator|.
name|setDataSourceFactoryType
argument_list|(
name|MockDataSourceFactory1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Module
name|testModule
init|=
operator|new
name|Module
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|AdhocObjectFactory
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|DefaultAdhocObjectFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|ResourceLocator
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockResourceLocator
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Injector
name|injector
init|=
name|DIBootstrap
operator|.
name|createInjector
argument_list|(
name|testModule
argument_list|)
decl_stmt|;
name|DefaultDataSourceFactoryLoader
name|factoryLoader
init|=
operator|new
name|DefaultDataSourceFactoryLoader
argument_list|()
decl_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|factoryLoader
argument_list|)
expr_stmt|;
name|DataSourceFactory
name|factory
init|=
name|factoryLoader
operator|.
name|getDataSourceFactory
argument_list|(
name|nodeDescriptor
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|factory
operator|instanceof
name|MockDataSourceFactory1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Injection on the factory hasn't been performed"
argument_list|,
name|injector
argument_list|,
operator|(
operator|(
name|MockDataSourceFactory1
operator|)
name|factory
operator|)
operator|.
name|getInjector
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetDataSourceFactory_Property
parameter_list|()
throws|throws
name|Exception
block|{
name|DataChannelDescriptor
name|channelDescriptor
init|=
operator|new
name|DataChannelDescriptor
argument_list|()
decl_stmt|;
name|channelDescriptor
operator|.
name|setName
argument_list|(
literal|"X"
argument_list|)
expr_stmt|;
name|DataNodeDescriptor
name|nodeDescriptor
init|=
operator|new
name|DataNodeDescriptor
argument_list|()
decl_stmt|;
name|nodeDescriptor
operator|.
name|setName
argument_list|(
literal|"node1"
argument_list|)
expr_stmt|;
name|nodeDescriptor
operator|.
name|setDataSourceFactoryType
argument_list|(
name|MockDataSourceFactory1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|nodeDescriptor
operator|.
name|setDataChannelDescriptor
argument_list|(
name|channelDescriptor
argument_list|)
expr_stmt|;
name|Module
name|testModule
init|=
operator|new
name|Module
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|AdhocObjectFactory
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|DefaultAdhocObjectFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|ResourceLocator
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockResourceLocator
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Injector
name|injector
init|=
name|DIBootstrap
operator|.
name|createInjector
argument_list|(
name|testModule
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|PropertyDataSourceFactory
operator|.
name|JDBC_DRIVER_PROPERTY
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|PropertyDataSourceFactory
operator|.
name|JDBC_URL_PROPERTY
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|DefaultDataSourceFactoryLoader
name|factoryLoader
init|=
operator|new
name|DefaultDataSourceFactoryLoader
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|factoryLoader
argument_list|)
expr_stmt|;
name|DataSourceFactory
name|factory
init|=
name|factoryLoader
operator|.
name|getDataSourceFactory
argument_list|(
name|nodeDescriptor
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|factory
operator|instanceof
name|PropertyDataSourceFactory
argument_list|)
expr_stmt|;
name|properties
operator|.
name|remove
argument_list|(
name|PropertyDataSourceFactory
operator|.
name|JDBC_URL_PROPERTY
argument_list|)
expr_stmt|;
name|factory
operator|=
name|factoryLoader
operator|.
name|getDataSourceFactory
argument_list|(
name|nodeDescriptor
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|factory
operator|instanceof
name|PropertyDataSourceFactory
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|PropertyDataSourceFactory
operator|.
name|JDBC_URL_PROPERTY
operator|+
literal|".X.node2"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|factory
operator|=
name|factoryLoader
operator|.
name|getDataSourceFactory
argument_list|(
name|nodeDescriptor
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|factory
operator|instanceof
name|PropertyDataSourceFactory
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|PropertyDataSourceFactory
operator|.
name|JDBC_URL_PROPERTY
operator|+
literal|".X.node1"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|factory
operator|=
name|factoryLoader
operator|.
name|getDataSourceFactory
argument_list|(
name|nodeDescriptor
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|factory
operator|instanceof
name|PropertyDataSourceFactory
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

