begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_class
specifier|public
class|class
name|ExpressionTraversalTest
extends|extends
name|CayenneCase
block|{
specifier|protected
name|TstTraversalHandler
name|handler
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|handler
operator|=
operator|new
name|TstTraversalHandler
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testUnary
parameter_list|()
throws|throws
name|Exception
block|{
name|doExpressionTest
argument_list|(
operator|new
name|TstUnaryExpSuite
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBinary
parameter_list|()
throws|throws
name|Exception
block|{
name|doExpressionTest
argument_list|(
operator|new
name|TstBinaryExpSuite
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTernary
parameter_list|()
throws|throws
name|Exception
block|{
name|doExpressionTest
argument_list|(
operator|new
name|TstTernaryExpSuite
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doExpressionTest
parameter_list|(
name|TstExpressionSuite
name|suite
parameter_list|)
throws|throws
name|Exception
block|{
name|TstExpressionCase
index|[]
name|cases
init|=
name|suite
operator|.
name|cases
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|cases
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|handler
operator|.
name|reset
argument_list|()
expr_stmt|;
name|cases
index|[
name|i
index|]
operator|.
name|getCayenneExp
argument_list|()
operator|.
name|traverse
argument_list|(
name|handler
argument_list|)
expr_stmt|;
comment|// assert statistics
name|handler
operator|.
name|assertConsistency
argument_list|()
expr_stmt|;
name|cases
index|[
name|i
index|]
operator|.
name|assertParsedWell
argument_list|(
name|handler
operator|.
name|getNodeCount
argument_list|()
argument_list|,
name|handler
operator|.
name|getLeafs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

