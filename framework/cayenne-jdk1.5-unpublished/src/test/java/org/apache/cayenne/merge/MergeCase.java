begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|merge
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|QueryLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|MapLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_class
specifier|public
class|class
name|MergeCase
extends|extends
name|CayenneCase
block|{
specifier|protected
name|DataDomain
name|dom
decl_stmt|;
specifier|protected
name|DataNode
name|node
decl_stmt|;
specifier|protected
name|DataMap
name|map
decl_stmt|;
specifier|private
specifier|final
name|Log
name|logObj
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ARTIST"
argument_list|,
literal|"PAINTING"
argument_list|,
literal|"NEW_TABLE"
argument_list|,
literal|"NEW_TABLE2"
argument_list|)
decl_stmt|;
specifier|protected
name|DbMerger
name|createMerger
parameter_list|()
block|{
return|return
operator|new
name|DbMerger
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|includeTableName
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
return|return
name|tableNames
operator|.
name|contains
argument_list|(
name|tableName
operator|.
name|toUpperCase
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|protected
name|List
argument_list|<
name|MergerToken
argument_list|>
name|createMergeTokens
parameter_list|()
block|{
return|return
name|createMerger
argument_list|()
operator|.
name|createMergeTokens
argument_list|(
name|node
argument_list|,
name|map
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|deleteTestData
argument_list|()
expr_stmt|;
name|createTestData
argument_list|(
literal|"testArtists"
argument_list|)
expr_stmt|;
name|DataNode
name|orgNode
init|=
name|getDomain
argument_list|()
operator|.
name|getDataNodes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// clone DataMap by saving and loading from XML as to avoid modifying shared test
comment|// DataMap
name|DataMap
name|originalMap
init|=
name|getDomain
argument_list|()
operator|.
name|getMap
argument_list|(
literal|"testmap"
argument_list|)
decl_stmt|;
name|StringWriter
name|out
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|outWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|originalMap
operator|.
name|encodeAsXML
argument_list|(
name|outWriter
argument_list|)
expr_stmt|;
name|outWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|StringReader
name|in
init|=
operator|new
name|StringReader
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|=
operator|new
name|MapLoader
argument_list|()
operator|.
name|loadDataMap
argument_list|(
operator|new
name|InputSource
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
comment|// map must operate in an EntityResolve namespace...
name|EntityResolver
name|testResolver
init|=
operator|new
name|EntityResolver
argument_list|()
decl_stmt|;
name|testResolver
operator|.
name|addDataMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|node
operator|=
operator|new
name|DataNode
argument_list|(
literal|"mergenode"
argument_list|)
expr_stmt|;
name|node
operator|.
name|setAdapter
argument_list|(
name|orgNode
operator|.
name|getAdapter
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|setDataSource
argument_list|(
name|orgNode
operator|.
name|getDataSource
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|addDataMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|dom
operator|=
operator|new
name|DataDomain
argument_list|(
literal|"mergetestdomain"
argument_list|)
expr_stmt|;
name|dom
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|filterDataMap
argument_list|(
name|node
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MergerToken
argument_list|>
name|tokens
init|=
name|createMergeTokens
argument_list|()
decl_stmt|;
name|execute
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
name|assertTokensAndExecute
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remote binary pk {@link DbEntity} for {@link DbAdapter} not supporting that and so      * on.      */
specifier|private
name|void
name|filterDataMap
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|DataMap
name|map
parameter_list|)
block|{
comment|// copied from AbstractAccessStack.dbEntitiesInInsertOrder
name|boolean
name|excludeLOB
init|=
operator|!
name|getAccessStackAdapter
argument_list|()
operator|.
name|supportsLobs
argument_list|()
decl_stmt|;
name|boolean
name|excludeBinPK
init|=
operator|!
name|getAccessStackAdapter
argument_list|()
operator|.
name|supportsBinaryPK
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|excludeLOB
operator|||
name|excludeBinPK
operator|)
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|DbEntity
argument_list|>
name|entitiesToRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|DbEntity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DbEntity
name|ent
range|:
name|map
operator|.
name|getDbEntities
argument_list|()
control|)
block|{
if|if
condition|(
name|excludeBinPK
condition|)
block|{
for|for
control|(
name|DbAttribute
name|attr
range|:
name|ent
operator|.
name|getAttributes
argument_list|()
control|)
block|{
comment|// check for BIN PK or FK to BIN Pk
if|if
condition|(
name|attr
operator|.
name|getType
argument_list|()
operator|==
name|Types
operator|.
name|BINARY
operator|||
name|attr
operator|.
name|getType
argument_list|()
operator|==
name|Types
operator|.
name|VARBINARY
operator|||
name|attr
operator|.
name|getType
argument_list|()
operator|==
name|Types
operator|.
name|LONGVARBINARY
condition|)
block|{
if|if
condition|(
name|attr
operator|.
name|isPrimaryKey
argument_list|()
operator|||
name|attr
operator|.
name|isForeignKey
argument_list|()
condition|)
block|{
name|entitiesToRemove
operator|.
name|add
argument_list|(
name|ent
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|DbEntity
name|e
range|:
name|entitiesToRemove
control|)
block|{
name|logObj
operator|.
name|info
argument_list|(
literal|"filter away "
operator|+
name|e
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|removeDbEntity
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|execute
parameter_list|(
name|List
argument_list|<
name|MergerToken
argument_list|>
name|tokens
parameter_list|)
throws|throws
name|Exception
block|{
name|MergerContext
name|mergerContext
init|=
operator|new
name|ExecutingMergerContext
argument_list|(
name|map
argument_list|,
name|node
argument_list|)
decl_stmt|;
for|for
control|(
name|MergerToken
name|tok
range|:
name|tokens
control|)
block|{
name|tok
operator|.
name|execute
argument_list|(
name|mergerContext
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|execute
parameter_list|(
name|MergerToken
name|token
parameter_list|)
throws|throws
name|Exception
block|{
name|MergerContext
name|mergerContext
init|=
operator|new
name|ExecutingMergerContext
argument_list|(
name|map
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|token
operator|.
name|execute
argument_list|(
name|mergerContext
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|executeSql
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|Statement
name|st
init|=
literal|null
decl_stmt|;
try|try
block|{
name|QueryLogger
operator|.
name|log
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|conn
operator|=
name|getConnection
argument_list|()
expr_stmt|;
name|st
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|st
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|QueryLogger
operator|.
name|logQueryError
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|st
operator|!=
literal|null
condition|)
block|{
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|assertTokens
parameter_list|(
name|List
argument_list|<
name|MergerToken
argument_list|>
name|tokens
parameter_list|,
name|int
name|expectedToDb
parameter_list|,
name|int
name|expectedToModel
parameter_list|)
block|{
name|int
name|actualToDb
init|=
literal|0
decl_stmt|;
name|int
name|actualToModel
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MergerToken
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|token
operator|.
name|getDirection
argument_list|()
operator|.
name|isToDb
argument_list|()
condition|)
block|{
name|actualToDb
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|token
operator|.
name|getDirection
argument_list|()
operator|.
name|isToModel
argument_list|()
condition|)
block|{
name|actualToModel
operator|++
expr_stmt|;
block|}
block|}
name|logTokens
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tokens to db"
argument_list|,
name|expectedToDb
argument_list|,
name|actualToDb
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tokens to model"
argument_list|,
name|expectedToModel
argument_list|,
name|actualToModel
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertTokensAndExecute
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|DataMap
name|map
parameter_list|,
name|int
name|expectedToDb
parameter_list|,
name|int
name|expectedToModel
parameter_list|)
block|{
name|List
argument_list|<
name|MergerToken
argument_list|>
name|tokens
init|=
name|createMergeTokens
argument_list|()
decl_stmt|;
name|assertTokens
argument_list|(
name|tokens
argument_list|,
name|expectedToDb
argument_list|,
name|expectedToModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|execute
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|assertTokensAndExecute
parameter_list|(
name|int
name|expectedToDb
parameter_list|,
name|int
name|expectedToModel
parameter_list|)
block|{
name|List
argument_list|<
name|MergerToken
argument_list|>
name|tokens
init|=
name|createMergeTokens
argument_list|()
decl_stmt|;
name|assertTokens
argument_list|(
name|tokens
argument_list|,
name|expectedToDb
argument_list|,
name|expectedToModel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|execute
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|logTokens
parameter_list|(
name|List
argument_list|<
name|MergerToken
argument_list|>
name|tokens
parameter_list|)
block|{
for|for
control|(
name|MergerToken
name|token
range|:
name|tokens
control|)
block|{
name|logObj
operator|.
name|info
argument_list|(
literal|"token: "
operator|+
name|token
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|MergerFactory
name|mergerFactory
parameter_list|()
block|{
return|return
name|node
operator|.
name|getAdapter
argument_list|()
operator|.
name|mergerFactory
argument_list|()
return|;
block|}
specifier|protected
name|void
name|dropTableIfPresent
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|DbEntity
name|entity
init|=
operator|new
name|DbEntity
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|AbstractToDbToken
name|t
init|=
operator|(
name|AbstractToDbToken
operator|)
name|mergerFactory
argument_list|()
operator|.
name|createDropTableToDb
argument_list|(
name|entity
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|sql
range|:
name|t
operator|.
name|createSql
argument_list|(
name|node
operator|.
name|getAdapter
argument_list|()
argument_list|)
control|)
block|{
name|executeSql
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
annotation|@
name|Override
specifier|protected
name|DataContext
name|createDataContext
parameter_list|()
block|{
return|return
name|dom
operator|.
name|createDataContext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|deleteTestData
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

