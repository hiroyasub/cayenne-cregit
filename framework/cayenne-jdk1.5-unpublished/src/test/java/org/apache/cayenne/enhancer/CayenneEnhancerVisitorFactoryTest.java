begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|enhancer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|MockObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistenceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_class
specifier|public
class|class
name|CayenneEnhancerVisitorFactoryTest
extends|extends
name|TestCase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|C1
init|=
literal|"org.apache.cayenne.enhancer.MockPojo1"
decl_stmt|;
specifier|protected
name|ClassLoader
name|loader
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|managedClasses
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|managedClasses
operator|.
name|add
argument_list|(
name|C1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|enhancedPropertyMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|c1
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|c1
operator|.
name|add
argument_list|(
literal|"attribute1"
argument_list|)
expr_stmt|;
name|enhancedPropertyMap
operator|.
name|put
argument_list|(
name|C1
argument_list|,
name|c1
argument_list|)
expr_stmt|;
name|ObjAttribute
name|a1
init|=
operator|new
name|ObjAttribute
argument_list|(
literal|"attribute1"
argument_list|)
decl_stmt|;
name|ObjAttribute
name|a2
init|=
operator|new
name|ObjAttribute
argument_list|(
literal|"attribute2"
argument_list|)
decl_stmt|;
name|ObjAttribute
name|a3
init|=
operator|new
name|ObjAttribute
argument_list|(
literal|"attribute3"
argument_list|)
decl_stmt|;
name|ObjEntity
name|e
init|=
operator|new
name|ObjEntity
argument_list|(
literal|"E1"
argument_list|)
decl_stmt|;
name|e
operator|.
name|addAttribute
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|e
operator|.
name|addAttribute
argument_list|(
name|a2
argument_list|)
expr_stmt|;
name|e
operator|.
name|addAttribute
argument_list|(
name|a3
argument_list|)
expr_stmt|;
name|e
operator|.
name|setClassName
argument_list|(
name|C1
argument_list|)
expr_stmt|;
name|DataMap
name|map
init|=
operator|new
name|DataMap
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|map
operator|.
name|addObjEntity
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|EnhancerVisitorFactory
name|factory
init|=
operator|new
name|CayenneEnhancerVisitorFactory
argument_list|(
operator|new
name|EntityResolver
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|map
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|loader
operator|=
operator|new
name|EnhancingClassLoader
argument_list|(
operator|new
name|Enhancer
argument_list|(
name|factory
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPersistentInterfaceInjected
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
name|e1Class
init|=
name|Class
operator|.
name|forName
argument_list|(
name|C1
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e1Class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|C1
argument_list|,
name|e1Class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Persistent
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|e1Class
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPersistenceFieldsInjected
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
name|e1Class
init|=
name|Class
operator|.
name|forName
argument_list|(
name|C1
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e1Class
argument_list|)
expr_stmt|;
name|Field
name|objectContext
init|=
name|e1Class
operator|.
name|getDeclaredField
argument_list|(
literal|"$cay_objectContext"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ObjectContext
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|objectContext
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|objectContext
operator|.
name|getModifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Modifier
operator|.
name|isProtected
argument_list|(
name|objectContext
operator|.
name|getModifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|Modifier
operator|.
name|isFinal
argument_list|(
name|objectContext
operator|.
name|getModifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Modifier
operator|.
name|isTransient
argument_list|(
name|objectContext
operator|.
name|getModifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Field
name|persistenceState
init|=
name|e1Class
operator|.
name|getDeclaredField
argument_list|(
literal|"$cay_persistenceState"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Integer
operator|.
name|TYPE
operator|.
name|isAssignableFrom
argument_list|(
name|persistenceState
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|persistenceState
operator|.
name|getModifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Modifier
operator|.
name|isProtected
argument_list|(
name|persistenceState
operator|.
name|getModifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|Modifier
operator|.
name|isFinal
argument_list|(
name|persistenceState
operator|.
name|getModifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|Modifier
operator|.
name|isTransient
argument_list|(
name|persistenceState
operator|.
name|getModifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Field
name|objectId
init|=
name|e1Class
operator|.
name|getDeclaredField
argument_list|(
literal|"$cay_objectId"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ObjectId
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|objectId
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|objectId
operator|.
name|getModifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Modifier
operator|.
name|isProtected
argument_list|(
name|objectId
operator|.
name|getModifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|Modifier
operator|.
name|isFinal
argument_list|(
name|objectId
operator|.
name|getModifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|Modifier
operator|.
name|isTransient
argument_list|(
name|objectId
operator|.
name|getModifiers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testObjectContentInjectedProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
name|e1Class
init|=
name|Class
operator|.
name|forName
argument_list|(
name|C1
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e1Class
argument_list|)
expr_stmt|;
name|Method
name|getObjectContext
init|=
name|e1Class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getObjectContext"
argument_list|,
operator|(
name|Class
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|Method
name|setObjectContext
init|=
name|e1Class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"setObjectContext"
argument_list|,
name|ObjectContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|e1Class
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|getObjectContext
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectContext
name|oc
init|=
operator|new
name|MockObjectContext
argument_list|()
decl_stmt|;
name|setObjectContext
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
name|oc
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oc
argument_list|,
name|getObjectContext
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPersistenceStateInjectedProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
name|e1Class
init|=
name|Class
operator|.
name|forName
argument_list|(
name|C1
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e1Class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|C1
argument_list|,
name|e1Class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Method
name|getPersistenceState
init|=
name|e1Class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getPersistenceState"
argument_list|,
operator|(
name|Class
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|Method
name|setPersistenceState
init|=
name|e1Class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"setPersistenceState"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|e1Class
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getPersistenceState
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|setPersistenceState
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|new
name|Integer
argument_list|(
name|PersistenceState
operator|.
name|DELETED
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|state
init|=
name|getPersistenceState
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|DELETED
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStringGetterIntercepted
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
name|e1Class
init|=
name|Class
operator|.
name|forName
argument_list|(
name|C1
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e1Class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|C1
argument_list|,
name|e1Class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|e1Class
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// attempt calling on detached object - must not fail
name|Method
name|getAttribute1
init|=
name|e1Class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getAttribute1"
argument_list|,
operator|(
name|Class
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|getAttribute1
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// now call on attached object
specifier|final
name|Object
index|[]
name|prepared
init|=
operator|new
name|Object
index|[
literal|3
index|]
decl_stmt|;
name|ObjectContext
name|context
init|=
operator|new
name|MockObjectContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|prepareForAccess
parameter_list|(
name|Persistent
name|object
parameter_list|,
name|String
name|property
parameter_list|,
name|boolean
name|lazyFaulting
parameter_list|)
block|{
name|prepared
index|[
literal|0
index|]
operator|=
name|object
expr_stmt|;
name|prepared
index|[
literal|1
index|]
operator|=
name|property
expr_stmt|;
name|prepared
index|[
literal|2
index|]
operator|=
operator|(
name|lazyFaulting
operator|)
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Method
name|setObjectContext
init|=
name|e1Class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"setObjectContext"
argument_list|,
name|ObjectContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|setObjectContext
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|getAttribute1
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|o
argument_list|,
name|prepared
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"attribute1"
argument_list|,
name|prepared
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|prepared
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStringSetterIntercepted
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
name|e1Class
init|=
name|Class
operator|.
name|forName
argument_list|(
name|C1
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e1Class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|C1
argument_list|,
name|e1Class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|e1Class
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// attempt calling on detached object - must not fail
name|Method
name|getAttribute1
init|=
name|e1Class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getAttribute1"
argument_list|,
operator|(
name|Class
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|Method
name|setAttribute1
init|=
name|e1Class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"setAttribute1"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|getAttribute1
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|setAttribute1
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"x"
argument_list|,
name|getAttribute1
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// now call on attached object
specifier|final
name|Object
index|[]
name|change
init|=
operator|new
name|Object
index|[
literal|4
index|]
decl_stmt|;
name|ObjectContext
name|context
init|=
operator|new
name|MockObjectContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|Persistent
name|object
parameter_list|,
name|String
name|property
parameter_list|,
name|Object
name|oldValue
parameter_list|,
name|Object
name|newValue
parameter_list|)
block|{
name|change
index|[
literal|0
index|]
operator|=
name|object
expr_stmt|;
name|change
index|[
literal|1
index|]
operator|=
name|property
expr_stmt|;
name|change
index|[
literal|2
index|]
operator|=
name|oldValue
expr_stmt|;
name|change
index|[
literal|3
index|]
operator|=
name|newValue
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Method
name|setObjectContext
init|=
name|e1Class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"setObjectContext"
argument_list|,
name|ObjectContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|setObjectContext
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|setAttribute1
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"y"
argument_list|,
name|getAttribute1
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|o
argument_list|,
name|change
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"attribute1"
argument_list|,
name|change
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"x"
argument_list|,
name|change
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"y"
argument_list|,
name|change
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIntGetterIntercepted
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
name|e1Class
init|=
name|Class
operator|.
name|forName
argument_list|(
name|C1
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|e1Class
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// attempt calling on detached object - must not fail
name|Method
name|getAttribute2
init|=
name|e1Class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getAttribute2"
argument_list|,
operator|(
name|Class
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|,
name|getAttribute2
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// now call on attached object
specifier|final
name|Object
index|[]
name|prepared
init|=
operator|new
name|Object
index|[
literal|3
index|]
decl_stmt|;
name|ObjectContext
name|context
init|=
operator|new
name|MockObjectContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|prepareForAccess
parameter_list|(
name|Persistent
name|object
parameter_list|,
name|String
name|property
parameter_list|,
name|boolean
name|lazyFaulting
parameter_list|)
block|{
name|prepared
index|[
literal|0
index|]
operator|=
name|object
expr_stmt|;
name|prepared
index|[
literal|1
index|]
operator|=
name|property
expr_stmt|;
name|prepared
index|[
literal|2
index|]
operator|=
operator|(
name|lazyFaulting
operator|)
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Method
name|setObjectContext
init|=
name|e1Class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"setObjectContext"
argument_list|,
name|ObjectContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|setObjectContext
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|,
name|getAttribute2
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|o
argument_list|,
name|prepared
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"attribute2"
argument_list|,
name|prepared
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|prepared
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIntSetterIntercepted
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
name|e1Class
init|=
name|Class
operator|.
name|forName
argument_list|(
name|C1
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|e1Class
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// attempt calling on detached object - must not fail
name|Method
name|getAttribute2
init|=
name|e1Class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getAttribute2"
argument_list|,
operator|(
name|Class
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|Method
name|setAttribute2
init|=
name|e1Class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"setAttribute2"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|,
name|getAttribute2
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|setAttribute2
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|new
name|Integer
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|3
argument_list|)
argument_list|,
name|getAttribute2
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// now call on attached object
specifier|final
name|Object
index|[]
name|change
init|=
operator|new
name|Object
index|[
literal|4
index|]
decl_stmt|;
name|ObjectContext
name|context
init|=
operator|new
name|MockObjectContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|Persistent
name|object
parameter_list|,
name|String
name|property
parameter_list|,
name|Object
name|oldValue
parameter_list|,
name|Object
name|newValue
parameter_list|)
block|{
name|change
index|[
literal|0
index|]
operator|=
name|object
expr_stmt|;
name|change
index|[
literal|1
index|]
operator|=
name|property
expr_stmt|;
name|change
index|[
literal|2
index|]
operator|=
name|oldValue
expr_stmt|;
name|change
index|[
literal|3
index|]
operator|=
name|newValue
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Method
name|setObjectContext
init|=
name|e1Class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"setObjectContext"
argument_list|,
name|ObjectContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|setObjectContext
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|setAttribute2
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|new
name|Integer
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|4
argument_list|)
argument_list|,
name|getAttribute2
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|o
argument_list|,
name|change
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"attribute2"
argument_list|,
name|change
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|3
argument_list|)
argument_list|,
name|change
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|4
argument_list|)
argument_list|,
name|change
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDoubleGetterIntercepted
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
name|e1Class
init|=
name|Class
operator|.
name|forName
argument_list|(
name|C1
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|e1Class
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// attempt calling on detached object - must not fail
name|Method
name|getAttribute3
init|=
name|e1Class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getAttribute3"
argument_list|,
operator|(
name|Class
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Double
argument_list|(
literal|0d
argument_list|)
argument_list|,
name|getAttribute3
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// now call on attached object
specifier|final
name|Object
index|[]
name|prepared
init|=
operator|new
name|Object
index|[
literal|3
index|]
decl_stmt|;
name|ObjectContext
name|context
init|=
operator|new
name|MockObjectContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|prepareForAccess
parameter_list|(
name|Persistent
name|object
parameter_list|,
name|String
name|property
parameter_list|,
name|boolean
name|lazyFaulting
parameter_list|)
block|{
name|prepared
index|[
literal|0
index|]
operator|=
name|object
expr_stmt|;
name|prepared
index|[
literal|1
index|]
operator|=
name|property
expr_stmt|;
name|prepared
index|[
literal|2
index|]
operator|=
operator|(
name|lazyFaulting
operator|)
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Method
name|setObjectContext
init|=
name|e1Class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"setObjectContext"
argument_list|,
name|ObjectContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|setObjectContext
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Double
argument_list|(
literal|0d
argument_list|)
argument_list|,
name|getAttribute3
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|o
argument_list|,
name|prepared
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"attribute3"
argument_list|,
name|prepared
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|prepared
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDoubleSetterIntercepted
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
name|e1Class
init|=
name|Class
operator|.
name|forName
argument_list|(
name|C1
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|e1Class
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// attempt calling on detached object - must not fail
name|Method
name|getAttribute3
init|=
name|e1Class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getAttribute3"
argument_list|,
operator|(
name|Class
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|Method
name|setAttribute3
init|=
name|e1Class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"setAttribute3"
argument_list|,
name|Double
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Double
argument_list|(
literal|0d
argument_list|)
argument_list|,
name|getAttribute3
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|setAttribute3
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|new
name|Double
argument_list|(
literal|3.1d
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Double
argument_list|(
literal|3.1d
argument_list|)
argument_list|,
name|getAttribute3
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// now call on attached object
specifier|final
name|Object
index|[]
name|change
init|=
operator|new
name|Object
index|[
literal|4
index|]
decl_stmt|;
name|ObjectContext
name|context
init|=
operator|new
name|MockObjectContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|Persistent
name|object
parameter_list|,
name|String
name|property
parameter_list|,
name|Object
name|oldValue
parameter_list|,
name|Object
name|newValue
parameter_list|)
block|{
name|change
index|[
literal|0
index|]
operator|=
name|object
expr_stmt|;
name|change
index|[
literal|1
index|]
operator|=
name|property
expr_stmt|;
name|change
index|[
literal|2
index|]
operator|=
name|oldValue
expr_stmt|;
name|change
index|[
literal|3
index|]
operator|=
name|newValue
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Method
name|setObjectContext
init|=
name|e1Class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"setObjectContext"
argument_list|,
name|ObjectContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|setObjectContext
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|setAttribute3
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|new
name|Double
argument_list|(
literal|5.3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Double
argument_list|(
literal|5.3
argument_list|)
argument_list|,
name|getAttribute3
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|o
argument_list|,
name|change
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"attribute3"
argument_list|,
name|change
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Double
argument_list|(
literal|3.1
argument_list|)
argument_list|,
name|change
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Double
argument_list|(
literal|5.3
argument_list|)
argument_list|,
name|change
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

