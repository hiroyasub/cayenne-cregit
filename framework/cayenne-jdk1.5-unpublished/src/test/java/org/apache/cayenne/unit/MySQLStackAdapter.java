begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Procedure
import|;
end_import

begin_comment
comment|/**  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|MySQLStackAdapter
extends|extends
name|AccessStackAdapter
block|{
specifier|static
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|NO_CONSTRAINTS_TABLES
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"REFLEXIVE_AND_TO_ONE"
argument_list|,
literal|"ARTGROUP"
argument_list|,
literal|"FK_OF_DIFFERENT_TYPE"
argument_list|)
decl_stmt|;
specifier|public
name|MySQLStackAdapter
parameter_list|(
name|DbAdapter
name|adapter
parameter_list|)
block|{
name|super
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|supportsLobs
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsCaseSensitiveLike
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|supportsStoredProcedures
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|supportsTrimChar
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|createdTables
parameter_list|(
name|Connection
name|con
parameter_list|,
name|DataMap
name|map
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|map
operator|.
name|getProcedureMap
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"cayenne_tst_select_proc"
argument_list|)
condition|)
block|{
name|executeDDL
argument_list|(
name|con
argument_list|,
literal|"mysql"
argument_list|,
literal|"create-select-sp.sql"
argument_list|)
expr_stmt|;
name|executeDDL
argument_list|(
name|con
argument_list|,
literal|"mysql"
argument_list|,
literal|"create-update-sp.sql"
argument_list|)
expr_stmt|;
name|executeDDL
argument_list|(
name|con
argument_list|,
literal|"mysql"
argument_list|,
literal|"create-update-sp2.sql"
argument_list|)
expr_stmt|;
name|executeDDL
argument_list|(
name|con
argument_list|,
literal|"mysql"
argument_list|,
literal|"create-out-sp.sql"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|willDropTables
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|DataMap
name|map
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|tablesToDrop
parameter_list|)
throws|throws
name|Exception
block|{
comment|// special DROP CONSTRAINT syntax for MySQL
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|constraintsMap
init|=
name|getConstraints
argument_list|(
name|conn
argument_list|,
name|map
argument_list|,
name|tablesToDrop
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|constraintsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|constraints
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|constraints
operator|==
literal|null
operator|||
name|constraints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Object
name|tableName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|constraint
range|:
name|constraints
control|)
block|{
name|StringBuffer
name|drop
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|drop
operator|.
name|append
argument_list|(
literal|"ALTER TABLE "
argument_list|)
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
operator|.
name|append
argument_list|(
literal|" DROP FOREIGN KEY "
argument_list|)
operator|.
name|append
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
name|executeDDL
argument_list|(
name|conn
argument_list|,
name|drop
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Procedure
name|proc
init|=
name|map
operator|.
name|getProcedure
argument_list|(
literal|"cayenne_tst_select_proc"
argument_list|)
decl_stmt|;
if|if
condition|(
name|proc
operator|!=
literal|null
operator|&&
name|proc
operator|.
name|getDataMap
argument_list|()
operator|==
name|map
condition|)
block|{
name|executeDDL
argument_list|(
name|conn
argument_list|,
literal|"mysql"
argument_list|,
literal|"drop-select-sp.sql"
argument_list|)
expr_stmt|;
name|executeDDL
argument_list|(
name|conn
argument_list|,
literal|"mysql"
argument_list|,
literal|"drop-update-sp.sql"
argument_list|)
expr_stmt|;
name|executeDDL
argument_list|(
name|conn
argument_list|,
literal|"mysql"
argument_list|,
literal|"drop-update-sp2.sql"
argument_list|)
expr_stmt|;
name|executeDDL
argument_list|(
name|conn
argument_list|,
literal|"mysql"
argument_list|,
literal|"drop-out-sp.sql"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|supportsFKConstraints
parameter_list|(
name|DbEntity
name|entity
parameter_list|)
block|{
comment|// MySQL supports that, but there are problems deleting objects from such
comment|// tables...
return|return
operator|!
name|NO_CONSTRAINTS_TABLES
operator|.
name|contains
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

