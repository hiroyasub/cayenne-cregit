begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|MockOperationObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|OptimisticLockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|trans
operator|.
name|DeleteBatchQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|JdbcAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|DeleteBatchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|locking
operator|.
name|SimpleLockingTestEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|LockingCase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mockrunner
operator|.
name|jdbc
operator|.
name|PreparedStatementResultSetHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mockrunner
operator|.
name|mock
operator|.
name|jdbc
operator|.
name|MockConnection
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|BatchActionLockingTest
extends|extends
name|LockingCase
block|{
specifier|public
name|void
name|testRunAsIndividualQueriesSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|EntityResolver
name|resolver
init|=
name|getDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
comment|// test with adapter that supports keys...
name|DbAdapter
name|adapter
init|=
name|buildAdapter
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|DbEntity
name|dbEntity
init|=
name|resolver
operator|.
name|lookupObjEntity
argument_list|(
name|SimpleLockingTestEntity
operator|.
name|class
argument_list|)
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
name|List
name|qualifierAttributes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|dbEntity
operator|.
name|getAttribute
argument_list|(
literal|"LOCKING_TEST_ID"
argument_list|)
argument_list|,
name|dbEntity
operator|.
name|getAttribute
argument_list|(
literal|"NAME"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
name|nullAttributeNames
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"NAME"
argument_list|)
decl_stmt|;
name|Map
name|qualifierSnapshot
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|qualifierSnapshot
operator|.
name|put
argument_list|(
literal|"LOCKING_TEST_ID"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|DeleteBatchQuery
name|batchQuery
init|=
operator|new
name|DeleteBatchQuery
argument_list|(
name|dbEntity
argument_list|,
name|qualifierAttributes
argument_list|,
name|nullAttributeNames
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|batchQuery
operator|.
name|setUsingOptimisticLocking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|batchQuery
operator|.
name|add
argument_list|(
name|qualifierSnapshot
argument_list|)
expr_stmt|;
name|DeleteBatchQueryBuilder
name|batchQueryBuilder
init|=
operator|new
name|DeleteBatchQueryBuilder
argument_list|(
name|adapter
argument_list|)
decl_stmt|;
name|MockConnection
name|mockConnection
init|=
operator|new
name|MockConnection
argument_list|()
decl_stmt|;
name|PreparedStatementResultSetHandler
name|preparedStatementResultSetHandler
init|=
name|mockConnection
operator|.
name|getPreparedStatementResultSetHandler
argument_list|()
decl_stmt|;
name|preparedStatementResultSetHandler
operator|.
name|setExactMatch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|preparedStatementResultSetHandler
operator|.
name|setCaseSensitive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|preparedStatementResultSetHandler
operator|.
name|prepareUpdateCount
argument_list|(
literal|"DELETE"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|generatesKeys
init|=
literal|false
decl_stmt|;
name|BatchAction
name|action
init|=
operator|new
name|BatchAction
argument_list|(
name|batchQuery
argument_list|,
name|adapter
argument_list|,
name|resolver
argument_list|)
decl_stmt|;
name|action
operator|.
name|runAsIndividualQueries
argument_list|(
name|mockConnection
argument_list|,
name|batchQueryBuilder
argument_list|,
operator|new
name|MockOperationObserver
argument_list|()
argument_list|,
name|generatesKeys
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mockConnection
operator|.
name|getNumberCommits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mockConnection
operator|.
name|getNumberRollbacks
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRunAsIndividualQueriesOptimisticLockingFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|EntityResolver
name|resolver
init|=
name|getDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
comment|// test with adapter that supports keys...
name|DbAdapter
name|adapter
init|=
name|buildAdapter
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|DbEntity
name|dbEntity
init|=
name|resolver
operator|.
name|lookupObjEntity
argument_list|(
name|SimpleLockingTestEntity
operator|.
name|class
argument_list|)
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
name|List
name|qualifierAttributes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|dbEntity
operator|.
name|getAttribute
argument_list|(
literal|"LOCKING_TEST_ID"
argument_list|)
argument_list|,
name|dbEntity
operator|.
name|getAttribute
argument_list|(
literal|"NAME"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
name|nullAttributeNames
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"NAME"
argument_list|)
decl_stmt|;
name|Map
name|qualifierSnapshot
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|qualifierSnapshot
operator|.
name|put
argument_list|(
literal|"LOCKING_TEST_ID"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|DeleteBatchQuery
name|batchQuery
init|=
operator|new
name|DeleteBatchQuery
argument_list|(
name|dbEntity
argument_list|,
name|qualifierAttributes
argument_list|,
name|nullAttributeNames
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|batchQuery
operator|.
name|setUsingOptimisticLocking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|batchQuery
operator|.
name|add
argument_list|(
name|qualifierSnapshot
argument_list|)
expr_stmt|;
name|DeleteBatchQueryBuilder
name|batchQueryBuilder
init|=
operator|new
name|DeleteBatchQueryBuilder
argument_list|(
name|adapter
argument_list|)
decl_stmt|;
name|MockConnection
name|mockConnection
init|=
operator|new
name|MockConnection
argument_list|()
decl_stmt|;
name|PreparedStatementResultSetHandler
name|preparedStatementResultSetHandler
init|=
name|mockConnection
operator|.
name|getPreparedStatementResultSetHandler
argument_list|()
decl_stmt|;
name|preparedStatementResultSetHandler
operator|.
name|setExactMatch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|preparedStatementResultSetHandler
operator|.
name|setCaseSensitive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|preparedStatementResultSetHandler
operator|.
name|prepareUpdateCount
argument_list|(
literal|"DELETE"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|boolean
name|generatesKeys
init|=
literal|false
decl_stmt|;
name|BatchAction
name|action
init|=
operator|new
name|BatchAction
argument_list|(
name|batchQuery
argument_list|,
name|adapter
argument_list|,
name|resolver
argument_list|)
decl_stmt|;
try|try
block|{
name|action
operator|.
name|runAsIndividualQueries
argument_list|(
name|mockConnection
argument_list|,
name|batchQueryBuilder
argument_list|,
operator|new
name|MockOperationObserver
argument_list|()
argument_list|,
name|generatesKeys
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"No OptimisticLockingFailureException thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OptimisticLockException
name|e
parameter_list|)
block|{
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mockConnection
operator|.
name|getNumberCommits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mockConnection
operator|.
name|getNumberRollbacks
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DbAdapter
name|buildAdapter
parameter_list|(
name|boolean
name|supportGeneratedKeys
parameter_list|)
block|{
name|JdbcAdapter
name|adapter
init|=
operator|new
name|JdbcAdapter
argument_list|()
decl_stmt|;
name|adapter
operator|.
name|setSupportsGeneratedKeys
argument_list|(
name|supportGeneratedKeys
argument_list|)
expr_stmt|;
return|return
name|adapter
return|;
block|}
block|}
end_class

end_unit

