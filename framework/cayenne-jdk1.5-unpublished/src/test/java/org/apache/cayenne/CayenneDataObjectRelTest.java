begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|ToManyList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|ArtGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Gallery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|PaintingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CaseDataFactory
import|;
end_import

begin_class
specifier|public
class|class
name|CayenneDataObjectRelTest
extends|extends
name|CayenneDOTestBase
block|{
specifier|private
name|void
name|prepareNestedProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|Artist
name|a1
init|=
name|super
operator|.
name|newArtist
argument_list|()
decl_stmt|;
name|Painting
name|p1
init|=
name|super
operator|.
name|newPainting
argument_list|()
decl_stmt|;
name|PaintingInfo
name|pi1
init|=
name|super
operator|.
name|newPaintingInfo
argument_list|()
decl_stmt|;
name|Gallery
name|g1
init|=
name|super
operator|.
name|newGallery
argument_list|()
decl_stmt|;
name|p1
operator|.
name|setToArtist
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setToPaintingInfo
argument_list|(
name|pi1
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setToGallery
argument_list|(
name|g1
argument_list|)
expr_stmt|;
name|ctxt
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ctxt
operator|=
name|createDataContext
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testReadNestedProperty1
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareNestedProperties
argument_list|()
expr_stmt|;
name|Painting
name|p1
init|=
name|fetchPainting
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|artistName
argument_list|,
name|p1
operator|.
name|readNestedProperty
argument_list|(
literal|"toArtist.artistName"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReadNestedProperty2
parameter_list|()
throws|throws
name|Exception
block|{
name|prepareNestedProperties
argument_list|()
expr_stmt|;
name|Painting
name|p1
init|=
name|fetchPainting
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|p1
operator|.
name|getToArtist
argument_list|()
operator|.
name|readNestedProperty
argument_list|(
literal|"paintingArray"
argument_list|)
operator|instanceof
name|List
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReciprocalRel1
parameter_list|()
throws|throws
name|Exception
block|{
name|CaseDataFactory
operator|.
name|createArtistWithPainting
argument_list|(
name|artistName
argument_list|,
operator|new
name|String
index|[]
block|{
name|paintingName
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Painting
name|p1
init|=
name|fetchPainting
argument_list|()
decl_stmt|;
name|Artist
name|a1
init|=
name|p1
operator|.
name|getToArtist
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artistName
argument_list|,
name|a1
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|paintings
init|=
name|a1
operator|.
name|getPaintingArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|paintings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Painting
name|p2
init|=
operator|(
name|Painting
operator|)
name|paintings
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReadToOneRel1
parameter_list|()
throws|throws
name|Exception
block|{
comment|// read to-one relationship
name|CaseDataFactory
operator|.
name|createArtistWithPainting
argument_list|(
name|artistName
argument_list|,
operator|new
name|String
index|[]
block|{
name|paintingName
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Painting
name|p1
init|=
name|fetchPainting
argument_list|()
decl_stmt|;
name|Artist
name|a1
init|=
name|p1
operator|.
name|getToArtist
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|HOLLOW
argument_list|,
name|a1
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artistName
argument_list|,
name|a1
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|a1
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReadToOneRel2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test chained calls to read relationships
name|CaseDataFactory
operator|.
name|createArtistWithPainting
argument_list|(
name|artistName
argument_list|,
operator|new
name|String
index|[]
block|{
name|paintingName
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PaintingInfo
name|pi1
init|=
name|fetchPaintingInfo
argument_list|(
name|paintingName
argument_list|)
decl_stmt|;
name|Painting
name|p1
init|=
name|pi1
operator|.
name|getPainting
argument_list|()
decl_stmt|;
name|p1
operator|.
name|getPaintingTitle
argument_list|()
expr_stmt|;
name|Artist
name|a1
init|=
name|p1
operator|.
name|getToArtist
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|HOLLOW
argument_list|,
name|a1
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artistName
argument_list|,
name|a1
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|a1
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReadToOneRel3
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test null relationship destination
name|CaseDataFactory
operator|.
name|createArtistWithPainting
argument_list|(
name|artistName
argument_list|,
operator|new
name|String
index|[]
block|{
name|paintingName
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Painting
name|p1
init|=
name|fetchPainting
argument_list|()
decl_stmt|;
name|Gallery
name|g1
init|=
name|p1
operator|.
name|getToGallery
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|g1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReadToManyRel1
parameter_list|()
throws|throws
name|Exception
block|{
name|CaseDataFactory
operator|.
name|createArtistWithPainting
argument_list|(
name|artistName
argument_list|,
operator|new
name|String
index|[]
block|{
name|paintingName
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Artist
name|a1
init|=
name|fetchArtist
argument_list|()
decl_stmt|;
name|List
name|plist
init|=
name|a1
operator|.
name|getPaintingArray
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plist
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plist
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
operator|(
operator|(
name|Painting
operator|)
name|plist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|paintingName
argument_list|,
operator|(
operator|(
name|Painting
operator|)
name|plist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getPaintingTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReadToManyRel2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test empty relationship
name|CaseDataFactory
operator|.
name|createArtistWithPainting
argument_list|(
name|artistName
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Artist
name|a1
init|=
name|fetchArtist
argument_list|()
decl_stmt|;
name|List
name|plist
init|=
name|a1
operator|.
name|getPaintingArray
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|plist
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|plist
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReflexiveRelationshipInsertOrder1
parameter_list|()
block|{
name|DataContext
name|dc
init|=
name|this
operator|.
name|createDataContext
argument_list|()
decl_stmt|;
name|ArtGroup
name|parentGroup
init|=
operator|(
name|ArtGroup
operator|)
name|dc
operator|.
name|newObject
argument_list|(
literal|"ArtGroup"
argument_list|)
decl_stmt|;
name|parentGroup
operator|.
name|setName
argument_list|(
literal|"parent"
argument_list|)
expr_stmt|;
name|ArtGroup
name|childGroup1
init|=
operator|(
name|ArtGroup
operator|)
name|dc
operator|.
name|newObject
argument_list|(
literal|"ArtGroup"
argument_list|)
decl_stmt|;
name|childGroup1
operator|.
name|setName
argument_list|(
literal|"child1"
argument_list|)
expr_stmt|;
name|childGroup1
operator|.
name|setToParentGroup
argument_list|(
name|parentGroup
argument_list|)
expr_stmt|;
name|dc
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testReflexiveRelationshipInsertOrder2
parameter_list|()
block|{
comment|// Create in a different order and see what happens
name|DataContext
name|dc
init|=
name|this
operator|.
name|createDataContext
argument_list|()
decl_stmt|;
name|ArtGroup
name|childGroup1
init|=
operator|(
name|ArtGroup
operator|)
name|dc
operator|.
name|newObject
argument_list|(
literal|"ArtGroup"
argument_list|)
decl_stmt|;
name|childGroup1
operator|.
name|setName
argument_list|(
literal|"child1"
argument_list|)
expr_stmt|;
name|ArtGroup
name|parentGroup
init|=
operator|(
name|ArtGroup
operator|)
name|dc
operator|.
name|newObject
argument_list|(
literal|"ArtGroup"
argument_list|)
decl_stmt|;
name|parentGroup
operator|.
name|setName
argument_list|(
literal|"parent"
argument_list|)
expr_stmt|;
name|childGroup1
operator|.
name|setToParentGroup
argument_list|(
name|parentGroup
argument_list|)
expr_stmt|;
name|dc
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testReflexiveRelationshipInsertOrder3
parameter_list|()
block|{
comment|// Tey multiple children, one created before parent, one after
name|DataContext
name|dc
init|=
name|this
operator|.
name|createDataContext
argument_list|()
decl_stmt|;
name|ArtGroup
name|childGroup1
init|=
operator|(
name|ArtGroup
operator|)
name|dc
operator|.
name|newObject
argument_list|(
literal|"ArtGroup"
argument_list|)
decl_stmt|;
name|childGroup1
operator|.
name|setName
argument_list|(
literal|"child1"
argument_list|)
expr_stmt|;
name|ArtGroup
name|parentGroup
init|=
operator|(
name|ArtGroup
operator|)
name|dc
operator|.
name|newObject
argument_list|(
literal|"ArtGroup"
argument_list|)
decl_stmt|;
name|parentGroup
operator|.
name|setName
argument_list|(
literal|"parent"
argument_list|)
expr_stmt|;
name|childGroup1
operator|.
name|setToParentGroup
argument_list|(
name|parentGroup
argument_list|)
expr_stmt|;
name|ArtGroup
name|childGroup2
init|=
operator|(
name|ArtGroup
operator|)
name|dc
operator|.
name|newObject
argument_list|(
literal|"ArtGroup"
argument_list|)
decl_stmt|;
name|childGroup2
operator|.
name|setName
argument_list|(
literal|"child2"
argument_list|)
expr_stmt|;
name|childGroup2
operator|.
name|setToParentGroup
argument_list|(
name|parentGroup
argument_list|)
expr_stmt|;
name|dc
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testReflexiveRelationshipInsertOrder4
parameter_list|()
block|{
comment|// Tey multiple children, one created before parent, one after
name|DataContext
name|dc
init|=
name|this
operator|.
name|createDataContext
argument_list|()
decl_stmt|;
name|ArtGroup
name|childGroup1
init|=
operator|(
name|ArtGroup
operator|)
name|dc
operator|.
name|newObject
argument_list|(
literal|"ArtGroup"
argument_list|)
decl_stmt|;
name|childGroup1
operator|.
name|setName
argument_list|(
literal|"child1"
argument_list|)
expr_stmt|;
name|ArtGroup
name|parentGroup
init|=
operator|(
name|ArtGroup
operator|)
name|dc
operator|.
name|newObject
argument_list|(
literal|"ArtGroup"
argument_list|)
decl_stmt|;
name|parentGroup
operator|.
name|setName
argument_list|(
literal|"parent"
argument_list|)
expr_stmt|;
name|childGroup1
operator|.
name|setToParentGroup
argument_list|(
name|parentGroup
argument_list|)
expr_stmt|;
name|ArtGroup
name|childGroup2
init|=
operator|(
name|ArtGroup
operator|)
name|dc
operator|.
name|newObject
argument_list|(
literal|"ArtGroup"
argument_list|)
decl_stmt|;
name|childGroup2
operator|.
name|setName
argument_list|(
literal|"subchild"
argument_list|)
expr_stmt|;
name|childGroup2
operator|.
name|setToParentGroup
argument_list|(
name|childGroup1
argument_list|)
expr_stmt|;
name|dc
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testCrossContextRelationshipException
parameter_list|()
block|{
name|DataContext
name|otherContext
init|=
name|createDataContext
argument_list|()
decl_stmt|;
comment|// Create this object in one context...
name|Artist
name|artist
init|=
operator|(
name|Artist
operator|)
name|ctxt
operator|.
name|newObject
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
comment|// ...and this object in another context
name|Painting
name|painting
init|=
operator|(
name|Painting
operator|)
name|otherContext
operator|.
name|newObject
argument_list|(
literal|"Painting"
argument_list|)
decl_stmt|;
comment|// Check setting a toOne relationship
try|try
block|{
name|painting
operator|.
name|setToArtist
argument_list|(
name|artist
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to set a cross-context relationship"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|e
parameter_list|)
block|{
comment|// Fine.. it should throw an exception
block|}
name|assertNull
argument_list|(
name|painting
operator|.
name|getToArtist
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure it wasn't set
comment|// Now try the reverse (toMany) relationship
try|try
block|{
name|artist
operator|.
name|addToPaintingArray
argument_list|(
name|painting
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to add a cross-context relationship"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|e
parameter_list|)
block|{
comment|// Fine.. it should throw an exception
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|artist
operator|.
name|getPaintingArray
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testComplexInsertUpdateOrdering
parameter_list|()
block|{
name|Artist
name|artist
init|=
operator|(
name|Artist
operator|)
name|ctxt
operator|.
name|newObject
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
name|artist
operator|.
name|setArtistName
argument_list|(
literal|"a name"
argument_list|)
expr_stmt|;
name|ctxt
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// Cause an update and an insert that need correct ordering
name|Painting
name|painting
init|=
operator|(
name|Painting
operator|)
name|ctxt
operator|.
name|newObject
argument_list|(
literal|"Painting"
argument_list|)
decl_stmt|;
name|painting
operator|.
name|setPaintingTitle
argument_list|(
literal|"a painting"
argument_list|)
expr_stmt|;
name|artist
operator|.
name|addToPaintingArray
argument_list|(
name|painting
argument_list|)
expr_stmt|;
name|ctxt
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ctxt
operator|.
name|deleteObject
argument_list|(
name|artist
argument_list|)
expr_stmt|;
name|ctxt
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
specifier|private
name|PaintingInfo
name|fetchPaintingInfo
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
literal|"PaintingInfo"
argument_list|,
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"painting.paintingTitle"
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|List
name|pts
init|=
name|ctxt
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
return|return
operator|(
name|pts
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|?
operator|(
name|PaintingInfo
operator|)
name|pts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|void
name|testNewToMany
parameter_list|()
throws|throws
name|Exception
block|{
name|Artist
name|artist
init|=
name|ctxt
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|artist
operator|.
name|setArtistName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|artist
operator|.
name|readPropertyDirectly
argument_list|(
literal|"paintingArray"
argument_list|)
operator|instanceof
name|ToManyList
argument_list|)
expr_stmt|;
name|ToManyList
name|list
init|=
operator|(
name|ToManyList
operator|)
name|artist
operator|.
name|readPropertyDirectly
argument_list|(
literal|"paintingArray"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|ctxt
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

