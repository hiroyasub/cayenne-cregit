begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|art
operator|.
name|ArtGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|art
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|MockDataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_comment
comment|/**  * Test case for objects with flattened relationships.  *   */
end_comment

begin_comment
comment|// TODO: redefine all test cases in terms of entities in "relationships" map
end_comment

begin_comment
comment|// and merge this test case with FlattenedRelationshipsTst that inherits
end_comment

begin_comment
comment|// from RelationshipTestCase.
end_comment

begin_class
specifier|public
class|class
name|CayenneDataObjectFlattenedRelTest
extends|extends
name|CayenneCase
block|{
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|deleteTestData
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testReadFlattenedRelationship
parameter_list|()
throws|throws
name|Exception
block|{
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|createTestData
argument_list|(
literal|"testReadFlattenedRelationship"
argument_list|)
expr_stmt|;
name|Artist
name|a1
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|33001
argument_list|)
decl_stmt|;
name|List
name|groupList
init|=
name|a1
operator|.
name|getGroupArray
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|groupList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|groupList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReadFlattenedRelationship2
parameter_list|()
throws|throws
name|Exception
block|{
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|createTestData
argument_list|(
literal|"testReadFlattenedRelationship2"
argument_list|)
expr_stmt|;
name|Artist
name|a1
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|33001
argument_list|)
decl_stmt|;
name|List
name|groupList
init|=
name|a1
operator|.
name|getGroupArray
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|groupList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|groupList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
operator|(
operator|(
name|ArtGroup
operator|)
name|groupList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g1"
argument_list|,
operator|(
operator|(
name|ArtGroup
operator|)
name|groupList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddToFlattenedRelationship
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestData
argument_list|(
literal|"testAddToFlattenedRelationship"
argument_list|)
expr_stmt|;
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|Artist
name|a1
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|33001
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|a1
operator|.
name|getGroupArray
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|ArtGroup
operator|.
name|class
argument_list|,
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"name"
argument_list|,
literal|"g1"
argument_list|)
argument_list|)
decl_stmt|;
name|List
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|hasChanges
argument_list|()
argument_list|)
expr_stmt|;
name|ArtGroup
name|group
init|=
operator|(
name|ArtGroup
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|a1
operator|.
name|addToGroupArray
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|hasChanges
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|groupList
init|=
name|a1
operator|.
name|getGroupArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|groupList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g1"
argument_list|,
operator|(
operator|(
name|ArtGroup
operator|)
name|groupList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure that the commit doesn't fail
name|a1
operator|.
name|getObjectContext
argument_list|()
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// and check again
name|assertFalse
argument_list|(
name|context
operator|.
name|hasChanges
argument_list|()
argument_list|)
expr_stmt|;
comment|// refetch artist with a different context
name|context
operator|=
name|createDataContext
argument_list|()
expr_stmt|;
name|a1
operator|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|33001
argument_list|)
expr_stmt|;
name|groupList
operator|=
name|a1
operator|.
name|getGroupArray
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|groupList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g1"
argument_list|,
operator|(
operator|(
name|ArtGroup
operator|)
name|groupList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test case to show up a bug in committing more than once
specifier|public
name|void
name|testDoubleCommitAddToFlattenedRelationship
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestData
argument_list|(
literal|"testDoubleCommitAddToFlattenedRelationship"
argument_list|)
expr_stmt|;
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|Artist
name|a1
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|33001
argument_list|)
decl_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|ArtGroup
operator|.
name|class
argument_list|,
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"name"
argument_list|,
literal|"g1"
argument_list|)
argument_list|)
decl_stmt|;
name|List
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ArtGroup
name|group
init|=
operator|(
name|ArtGroup
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|a1
operator|.
name|addToGroupArray
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|List
name|groupList
init|=
name|a1
operator|.
name|getGroupArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|groupList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g1"
argument_list|,
operator|(
operator|(
name|ArtGroup
operator|)
name|groupList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure that the commit doesn't fail
name|a1
operator|.
name|getObjectContext
argument_list|()
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
try|try
block|{
comment|// The bug caused the second commit to fail (the link record
comment|// was inserted again)
name|a1
operator|.
name|getObjectContext
argument_list|()
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should not have thrown an exception"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testRemoveFromFlattenedRelationship
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestData
argument_list|(
literal|"testRemoveFromFlattenedRelationship"
argument_list|)
expr_stmt|;
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|Artist
name|a1
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|33001
argument_list|)
decl_stmt|;
name|ArtGroup
name|group
init|=
name|a1
operator|.
name|getGroupArray
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|a1
operator|.
name|removeFromGroupArray
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|List
name|groupList
init|=
name|a1
operator|.
name|getGroupArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|groupList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure that the commit doesn't fail
name|a1
operator|.
name|getObjectContext
argument_list|()
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// and check again
name|groupList
operator|=
name|a1
operator|.
name|getGroupArray
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|groupList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Shows up a possible bug in ordering of deletes, when a flattened relationships link
comment|// record is deleted
comment|// at the same time (same transaction) as one of the record to which it links.
specifier|public
name|void
name|testRemoveFlattenedRelationshipAndRootRecord
parameter_list|()
throws|throws
name|Exception
block|{
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|createTestData
argument_list|(
literal|"testRemoveFlattenedRelationshipAndRootRecord"
argument_list|)
expr_stmt|;
name|Artist
name|a1
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|33001
argument_list|)
decl_stmt|;
name|ArtGroup
name|group
init|=
name|a1
operator|.
name|getGroupArray
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|a1
operator|.
name|removeFromGroupArray
argument_list|(
name|group
argument_list|)
expr_stmt|;
comment|// Cause the delete of the link record
name|context
operator|.
name|deleteObject
argument_list|(
name|a1
argument_list|)
expr_stmt|;
comment|// Cause the deletion of the artist
try|try
block|{
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should not have thrown the exception :"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testAddRemoveFlattenedRelationship1
parameter_list|()
throws|throws
name|Exception
block|{
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|createTestData
argument_list|(
literal|"testAddRemoveFlattenedRelationship1"
argument_list|)
expr_stmt|;
name|Artist
name|a1
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|33001
argument_list|)
decl_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|ArtGroup
operator|.
name|class
argument_list|,
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"name"
argument_list|,
literal|"g1"
argument_list|)
argument_list|)
decl_stmt|;
name|List
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ArtGroup
name|group
init|=
operator|(
name|ArtGroup
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|a1
operator|.
name|addToGroupArray
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|group
operator|.
name|removeFromArtistArray
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|blockQueries
argument_list|()
expr_stmt|;
try|try
block|{
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|unblockQueries
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testAddRemoveFlattenedRelationship2
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestData
argument_list|(
literal|"testAddRemoveFlattenedRelationship2"
argument_list|)
expr_stmt|;
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|Artist
name|a1
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|33001
argument_list|)
decl_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|ArtGroup
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ArtGroup
name|g1
init|=
operator|(
name|ArtGroup
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ArtGroup
name|g2
init|=
operator|(
name|ArtGroup
operator|)
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|a1
operator|.
name|addToGroupArray
argument_list|(
name|g1
argument_list|)
expr_stmt|;
name|a1
operator|.
name|addToGroupArray
argument_list|(
name|g2
argument_list|)
expr_stmt|;
comment|// test that there is no delete query issued when a flattened join is first
comment|// added
comment|// and then deleted AND there are some other changes (CAY-548)
name|a1
operator|.
name|removeFromGroupArray
argument_list|(
name|g1
argument_list|)
expr_stmt|;
name|MockDataNode
name|engine
init|=
name|MockDataNode
operator|.
name|interceptNode
argument_list|(
name|getDomain
argument_list|()
argument_list|,
name|getNode
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|engine
operator|.
name|getRunCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|engine
operator|.
name|stopInterceptNode
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

