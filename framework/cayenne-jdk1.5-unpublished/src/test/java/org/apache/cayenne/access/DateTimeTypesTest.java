begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|art
operator|.
name|CalendarEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|art
operator|.
name|DateTestEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_comment
comment|/**  * Tests Date handling in Cayenne.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|DateTimeTypesTest
extends|extends
name|CayenneCase
block|{
specifier|protected
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|deleteTestData
argument_list|()
expr_stmt|;
name|context
operator|=
name|createDataContext
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testCalendar
parameter_list|()
throws|throws
name|Exception
block|{
name|CalendarEntity
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|CalendarEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|2002
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|test
operator|.
name|setCalendarField
argument_list|(
name|cal
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|CalendarEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|CalendarEntity
name|testRead
init|=
operator|(
name|CalendarEntity
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testRead
operator|.
name|getCalendarField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cal
argument_list|,
name|testRead
operator|.
name|getCalendarField
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|.
name|setCalendarField
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testDate
parameter_list|()
throws|throws
name|Exception
block|{
name|DateTestEntity
name|test
init|=
operator|(
name|DateTestEntity
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"DateTestEntity"
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|2002
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Date
name|nowDate
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|test
operator|.
name|setDateColumn
argument_list|(
name|nowDate
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|DateTestEntity
name|testRead
init|=
operator|(
name|DateTestEntity
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testRead
operator|.
name|getDateColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nowDate
argument_list|,
name|testRead
operator|.
name|getDateColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTime
parameter_list|()
throws|throws
name|Exception
block|{
name|DateTestEntity
name|test
init|=
operator|(
name|DateTestEntity
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"DateTestEntity"
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|1970
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|Date
name|nowTime
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|test
operator|.
name|setTimeColumn
argument_list|(
name|nowTime
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|DateTestEntity
name|testRead
init|=
operator|(
name|DateTestEntity
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testRead
operator|.
name|getTimeColumn
argument_list|()
argument_list|)
expr_stmt|;
comment|// OpenBase fails to store seconds for the time
comment|// FrontBase returns time with 1 hour offset (I guess "TIME WITH TIMEZONE" may
comment|// need to be used as a default FB type?)
comment|// so this test is approximate...
name|long
name|delta
init|=
name|nowTime
operator|.
name|getTime
argument_list|()
operator|-
name|testRead
operator|.
name|getTimeColumn
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|""
operator|+
name|delta
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|delta
argument_list|)
operator|<=
literal|1000
operator|*
literal|60
operator|*
literal|60
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTimestamp
parameter_list|()
throws|throws
name|Exception
block|{
name|DateTestEntity
name|test
init|=
operator|(
name|DateTestEntity
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"DateTestEntity"
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|2003
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|)
expr_stmt|;
comment|// most databases fail millisecond accuracy
comment|// cal.set(Calendar.MILLISECOND, 55);
name|Date
name|now
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|test
operator|.
name|setTimestampColumn
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|DateTestEntity
name|testRead
init|=
operator|(
name|DateTestEntity
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testRead
operator|.
name|getTimestampColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|now
argument_list|,
name|testRead
operator|.
name|getTimestampColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

