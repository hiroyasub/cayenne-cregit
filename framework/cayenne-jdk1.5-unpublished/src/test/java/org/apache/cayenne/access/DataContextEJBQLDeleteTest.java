begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|art
operator|.
name|MeaningfulPKTest1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|art
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Cayenne
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|EJBQLQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_class
specifier|public
class|class
name|DataContextEJBQLDeleteTest
extends|extends
name|CayenneCase
block|{
specifier|protected
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteTestData
argument_list|()
expr_stmt|;
name|context
operator|=
name|getDomain
argument_list|()
operator|.
name|createDataContext
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteNoIdVar
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestData
argument_list|(
literal|"prepare"
argument_list|)
expr_stmt|;
name|String
name|ejbql
init|=
literal|"delete from Painting"
decl_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
name|ejbql
argument_list|)
decl_stmt|;
name|QueryResponse
name|result
init|=
name|createDataContext
argument_list|()
operator|.
name|performGenericQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|int
index|[]
name|count
init|=
name|result
operator|.
name|firstUpdateCount
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteNoQualifier
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestData
argument_list|(
literal|"prepare"
argument_list|)
expr_stmt|;
name|String
name|ejbql
init|=
literal|"delete from Painting AS p"
decl_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
name|ejbql
argument_list|)
decl_stmt|;
name|QueryResponse
name|result
init|=
name|createDataContext
argument_list|()
operator|.
name|performGenericQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|int
index|[]
name|count
init|=
name|result
operator|.
name|firstUpdateCount
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteSameEntityQualifier
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestData
argument_list|(
literal|"prepare"
argument_list|)
expr_stmt|;
name|String
name|ejbql
init|=
literal|"delete from Painting AS p WHERE p.paintingTitle = 'P2'"
decl_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
name|ejbql
argument_list|)
decl_stmt|;
name|QueryResponse
name|result
init|=
name|createDataContext
argument_list|()
operator|.
name|performGenericQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|int
index|[]
name|count
init|=
name|result
operator|.
name|firstUpdateCount
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|createDataContext
argument_list|()
argument_list|,
name|Painting
operator|.
name|class
argument_list|,
literal|33001
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|createDataContext
argument_list|()
argument_list|,
name|Painting
operator|.
name|class
argument_list|,
literal|33002
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDeleteIdVar
parameter_list|()
throws|throws
name|Exception
block|{
name|insertValue
argument_list|()
expr_stmt|;
name|EJBQLQuery
name|q
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select m.pkAttribute from MeaningfulPKTest1 m"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|id
init|=
name|createDataContext
argument_list|()
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|String
name|ejbql
init|=
literal|"delete from MeaningfulPKTest1 m WHERE m.pkAttribute in (:id)"
decl_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
name|ejbql
argument_list|)
decl_stmt|;
name|query
operator|.
name|setParameter
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|QueryResponse
name|result
init|=
name|createDataContext
argument_list|()
operator|.
name|performGenericQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|int
index|[]
name|count
init|=
name|result
operator|.
name|firstUpdateCount
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|420
argument_list|,
name|count
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|insertValue
parameter_list|()
block|{
name|MeaningfulPKTest1
name|obj
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|420
condition|;
name|i
operator|++
control|)
block|{
name|obj
operator|=
operator|(
name|MeaningfulPKTest1
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"MeaningfulPKTest1"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setPkAttribute
argument_list|(
operator|new
name|Integer
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setDescr
argument_list|(
literal|"a"
operator|+
name|i
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

