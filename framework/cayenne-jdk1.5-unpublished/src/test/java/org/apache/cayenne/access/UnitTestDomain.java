begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_class
specifier|public
class|class
name|UnitTestDomain
extends|extends
name|DataDomain
block|{
specifier|protected
name|boolean
name|blockingQueries
decl_stmt|;
specifier|protected
name|int
name|queryCount
decl_stmt|;
specifier|public
name|UnitTestDomain
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UnitTestDomain
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
name|properties
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|restartQueryCounter
parameter_list|()
block|{
name|queryCount
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|int
name|getQueryCount
parameter_list|()
block|{
return|return
name|queryCount
return|;
block|}
specifier|public
name|boolean
name|isBlockingQueries
parameter_list|()
block|{
return|return
name|blockingQueries
return|;
block|}
specifier|public
name|void
name|setBlockingQueries
parameter_list|(
name|boolean
name|blockingQueries
parameter_list|)
block|{
name|this
operator|.
name|blockingQueries
operator|=
name|blockingQueries
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|QueryResponse
name|onQuery
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
return|return
operator|new
name|UnitTestDomainQueryAction
argument_list|(
name|context
argument_list|,
name|this
argument_list|,
name|query
argument_list|)
operator|.
name|execute
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|performQueries
parameter_list|(
name|Collection
name|queries
parameter_list|,
name|OperationObserver
name|callback
parameter_list|)
block|{
name|checkQueryAllowed
argument_list|(
name|queries
argument_list|)
expr_stmt|;
name|super
operator|.
name|performQueries
argument_list|(
name|queries
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkQueryAllowed
parameter_list|(
name|Collection
name|queries
parameter_list|)
throws|throws
name|AssertionFailedError
block|{
if|if
condition|(
name|blockingQueries
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Query is unexpected: "
operator|+
name|queries
argument_list|)
expr_stmt|;
block|}
name|queryCount
operator|++
expr_stmt|;
block|}
block|}
end_class

end_unit

