begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_comment
comment|/**  * @author Andrus Adamchik  * @deprecated since 3.0  */
end_comment

begin_class
specifier|public
class|class
name|ClassGeneratorSingleTemplateTest
extends|extends
name|ClassGeneratorTestBase
block|{
specifier|protected
name|ClassGenerator
name|createGenerator
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|ClassGenerator
argument_list|(
name|MapClassGenerator
operator|.
name|SINGLE_CLASS_TEMPLATE
argument_list|,
name|ClassGenerator
operator|.
name|VERSION_1_1
argument_list|)
return|;
block|}
specifier|public
name|void
name|testNoImports
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup fixture
name|ObjEntity
name|testEntity
init|=
operator|new
name|ObjEntity
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|cgen
operator|.
name|getClassGenerationInfo
argument_list|()
operator|.
name|setClassName
argument_list|(
literal|"JavaClass"
argument_list|)
expr_stmt|;
name|cgen
operator|.
name|getClassGenerationInfo
argument_list|()
operator|.
name|setSuperPrefix
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|cgen
operator|.
name|getClassGenerationInfo
argument_list|()
operator|.
name|setSuperClassName
argument_list|(
literal|"123.567.Super"
argument_list|)
expr_stmt|;
name|String
name|generated
init|=
name|generatedString
argument_list|(
name|testEntity
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|generated
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generated
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|generated
operator|.
name|indexOf
argument_list|(
literal|"import "
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testImports
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup fixture
name|ObjEntity
name|testEntity
init|=
operator|new
name|ObjEntity
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|ObjRelationship
name|toMany
init|=
operator|new
name|ObjRelationship
argument_list|(
literal|"tomany"
argument_list|)
block|{
specifier|public
name|boolean
name|isToMany
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|testEntity
operator|.
name|addRelationship
argument_list|(
name|toMany
argument_list|)
expr_stmt|;
name|cgen
operator|.
name|getClassGenerationInfo
argument_list|()
operator|.
name|setClassName
argument_list|(
literal|"JavaClass"
argument_list|)
expr_stmt|;
name|cgen
operator|.
name|getClassGenerationInfo
argument_list|()
operator|.
name|setSuperPrefix
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|cgen
operator|.
name|getClassGenerationInfo
argument_list|()
operator|.
name|setSuperClassName
argument_list|(
literal|"123.567.Super"
argument_list|)
expr_stmt|;
name|String
name|generated
init|=
name|generatedString
argument_list|(
name|testEntity
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|generated
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generated
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|generated
operator|.
name|indexOf
argument_list|(
literal|"import java.util.List;"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testClassStructure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup fixture
name|ObjEntity
name|testEntity
init|=
operator|new
name|ObjEntity
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|cgen
operator|.
name|getClassGenerationInfo
argument_list|()
operator|.
name|setClassName
argument_list|(
literal|"JavaClass"
argument_list|)
expr_stmt|;
name|cgen
operator|.
name|getClassGenerationInfo
argument_list|()
operator|.
name|setSuperPrefix
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|cgen
operator|.
name|getClassGenerationInfo
argument_list|()
operator|.
name|setSuperClassName
argument_list|(
literal|"123.567.Super"
argument_list|)
expr_stmt|;
name|String
name|generated
init|=
name|generatedString
argument_list|(
name|testEntity
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|generated
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generated
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|classNameIndex
init|=
name|generated
operator|.
name|indexOf
argument_list|(
literal|"class JavaClass "
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|classNameIndex
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|superClassIndex
init|=
name|generated
operator|.
name|indexOf
argument_list|(
literal|"extends 123.567.Super"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|classNameIndex
operator|<
name|superClassIndex
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAttributes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup fixture
name|ObjEntity
name|testEntity
init|=
operator|new
name|ObjEntity
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|ObjAttribute
name|a1
init|=
operator|new
name|ObjAttribute
argument_list|(
literal|"a1"
argument_list|)
decl_stmt|;
name|a1
operator|.
name|setType
argument_list|(
literal|"dummy1"
argument_list|)
expr_stmt|;
name|testEntity
operator|.
name|addAttribute
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|ObjAttribute
name|a2
init|=
operator|new
name|ObjAttribute
argument_list|(
literal|"a2"
argument_list|)
decl_stmt|;
name|a2
operator|.
name|setType
argument_list|(
literal|"dummy2"
argument_list|)
expr_stmt|;
name|testEntity
operator|.
name|addAttribute
argument_list|(
name|a2
argument_list|)
expr_stmt|;
name|cgen
operator|.
name|getClassGenerationInfo
argument_list|()
operator|.
name|setClassName
argument_list|(
literal|"C"
argument_list|)
expr_stmt|;
name|cgen
operator|.
name|getClassGenerationInfo
argument_list|()
operator|.
name|setSuperPrefix
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|cgen
operator|.
name|getClassGenerationInfo
argument_list|()
operator|.
name|setSuperClassName
argument_list|(
literal|"SC"
argument_list|)
expr_stmt|;
name|String
name|generated
init|=
name|generatedString
argument_list|(
name|testEntity
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|generated
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generated
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generated
operator|.
name|indexOf
argument_list|(
literal|"setA1(dummy1 a1)"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generated
operator|.
name|indexOf
argument_list|(
literal|"dummy1 getA1()"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generated
operator|.
name|indexOf
argument_list|(
literal|"setA2(dummy2 a2)"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generated
operator|.
name|indexOf
argument_list|(
literal|"dummy2 getA2()"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReservedName
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup fixture
name|ObjEntity
name|testEntity
init|=
operator|new
name|ObjEntity
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|ObjAttribute
name|attribute
init|=
operator|new
name|ObjAttribute
argument_list|(
literal|"abstract"
argument_list|)
decl_stmt|;
name|attribute
operator|.
name|setType
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
name|testEntity
operator|.
name|addAttribute
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
name|cgen
operator|.
name|getClassGenerationInfo
argument_list|()
operator|.
name|setClassName
argument_list|(
literal|"C"
argument_list|)
expr_stmt|;
name|cgen
operator|.
name|getClassGenerationInfo
argument_list|()
operator|.
name|setSuperPrefix
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|cgen
operator|.
name|getClassGenerationInfo
argument_list|()
operator|.
name|setSuperClassName
argument_list|(
literal|"SC"
argument_list|)
expr_stmt|;
name|String
name|generated
init|=
name|generatedString
argument_list|(
name|testEntity
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|generated
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generated
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|generated
operator|.
name|indexOf
argument_list|(
literal|"setAbstract(dummy abstract)"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No 'abstract' property found: "
operator|+
name|generated
argument_list|,
name|generated
operator|.
name|indexOf
argument_list|(
literal|"setAbstract(dummy _abstract)"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

