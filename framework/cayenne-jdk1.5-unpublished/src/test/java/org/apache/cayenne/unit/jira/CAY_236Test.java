begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|jira
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|MapLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|DataMapFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|ProjectFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|BasicCase
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|CAY_236Test
extends|extends
name|BasicCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TABLE1_BY
init|=
literal|"\u0442\u0430\u0431\u043bi\u0446\u04301"
decl_stmt|;
specifier|public
name|void
name|testLoadUTF8
parameter_list|()
throws|throws
name|Exception
block|{
name|MapLoader
name|loader
init|=
operator|new
name|MapLoader
argument_list|()
decl_stmt|;
comment|// the idea here is to avoid passing the reader to the loader, and make sure the
comment|// loader does the right thing (i.e. loads UTF-8 encoded file) itself.
name|DataMap
name|map
init|=
name|loader
operator|.
name|loadDataMap
argument_list|(
literal|"i18n/by/DataMap.map.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
operator|.
name|getDbEntity
argument_list|(
name|TABLE1_BY
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStoreUTF8
parameter_list|()
throws|throws
name|Exception
block|{
name|MapLoader
name|loader
init|=
operator|new
name|MapLoader
argument_list|()
decl_stmt|;
comment|// the idea here is to avoid passing the reader to the loader, and make sure the
comment|// loader does the right thing (i.e. loads UTF-8 encoded file) itself.
name|DataMap
name|map
init|=
name|loader
operator|.
name|loadDataMap
argument_list|(
literal|"i18n/by/DataMap.map.xml"
argument_list|)
decl_stmt|;
name|File
name|mapFile
init|=
operator|new
name|File
argument_list|(
name|getTestDir
argument_list|()
argument_list|,
literal|"CAY_236Map.map.xml"
argument_list|)
decl_stmt|;
name|TestProjectFile
name|file
init|=
operator|new
name|TestProjectFile
argument_list|(
name|map
argument_list|,
literal|"DataMap"
argument_list|,
name|mapFile
argument_list|)
decl_stmt|;
name|file
operator|.
name|saveTemp
argument_list|()
expr_stmt|;
name|String
name|contents
init|=
name|fileContents
argument_list|(
name|mapFile
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|contents
operator|.
name|contains
argument_list|(
name|TABLE1_BY
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|fileContents
parameter_list|(
name|File
name|f
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|FileInputStream
name|fin
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|InputStreamReader
name|fr
init|=
operator|new
name|InputStreamReader
argument_list|(
name|fin
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
name|fr
argument_list|)
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
class|class
name|TestProjectFile
extends|extends
name|ProjectFile
block|{
name|DataMap
name|map
decl_stmt|;
name|String
name|location
decl_stmt|;
name|File
name|file
decl_stmt|;
name|TestProjectFile
parameter_list|(
name|DataMap
name|map
parameter_list|,
name|String
name|location
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLocationSuffix
parameter_list|()
block|{
return|return
name|DataMapFile
operator|.
name|LOCATION_SUFFIX
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canHandle
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|map
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getObjectName
parameter_list|()
block|{
return|return
name|location
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|save
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|Exception
block|{
name|map
operator|.
name|encodeAsXML
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|File
name|tempFileForFile
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|file
return|;
block|}
annotation|@
name|Override
specifier|public
name|File
name|resolveFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
block|}
block|}
end_class

end_unit

