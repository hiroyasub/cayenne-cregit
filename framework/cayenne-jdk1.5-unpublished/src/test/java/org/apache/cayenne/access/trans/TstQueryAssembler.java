begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|trans
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|JoinType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_class
specifier|public
class|class
name|TstQueryAssembler
extends|extends
name|QueryAssembler
block|{
specifier|protected
name|List
name|dbRels
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|public
name|TstQueryAssembler
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|Query
name|q
parameter_list|)
block|{
name|super
operator|.
name|setAdapter
argument_list|(
name|node
operator|.
name|getAdapter
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|super
operator|.
name|setConnection
argument_list|(
name|node
operator|.
name|getDataSource
argument_list|()
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error getting connection..."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|super
operator|.
name|setEntityResolver
argument_list|(
name|node
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|setQuery
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
throws|throws
name|SQLException
block|{
name|super
operator|.
name|getConnection
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * @deprecated since 3.0      */
annotation|@
name|Override
specifier|public
name|void
name|dbRelationshipAdded
parameter_list|(
name|DbRelationship
name|dbRel
parameter_list|)
block|{
name|dbRels
operator|.
name|add
argument_list|(
name|dbRel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dbRelationshipAdded
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|,
name|JoinType
name|joinType
parameter_list|)
block|{
name|dbRels
operator|.
name|add
argument_list|(
name|relationship
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|aliasForTable
parameter_list|(
name|DbEntity
name|dbEnt
parameter_list|)
block|{
return|return
literal|"ta"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsTableAliases
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|createSqlString
parameter_list|()
block|{
return|return
literal|"SELECT * FROM ARTIST"
return|;
block|}
specifier|public
name|List
name|getAttributes
parameter_list|()
block|{
return|return
name|attributes
return|;
block|}
specifier|public
name|List
name|getValues
parameter_list|()
block|{
return|return
name|values
return|;
block|}
block|}
end_class

end_unit

