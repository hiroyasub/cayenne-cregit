begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|ProjectPathTest
extends|extends
name|CayenneCase
block|{
specifier|public
name|void
name|testConstructor
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
index|[]
name|path
init|=
operator|new
name|Object
index|[
literal|0
index|]
decl_stmt|;
name|ProjectPath
name|pp
init|=
operator|new
name|ProjectPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|path
argument_list|,
name|pp
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetObject1
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
index|[]
name|path
init|=
operator|new
name|Object
index|[]
block|{
operator|new
name|Object
argument_list|()
block|,
operator|new
name|Object
argument_list|()
block|}
decl_stmt|;
name|ProjectPath
name|p
init|=
operator|new
name|ProjectPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|path
index|[
literal|1
index|]
argument_list|,
name|p
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetObject2
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
index|[]
name|path
init|=
operator|new
name|Object
index|[]
block|{
operator|new
name|Object
argument_list|()
block|}
decl_stmt|;
name|ProjectPath
name|p
init|=
operator|new
name|ProjectPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|path
index|[
literal|0
index|]
argument_list|,
name|p
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetObject3
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
index|[]
name|path
init|=
operator|new
name|Object
index|[]
block|{}
decl_stmt|;
name|ProjectPath
name|p
init|=
operator|new
name|ProjectPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|p
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAppendToPath1
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectPath
name|path
init|=
operator|new
name|ProjectPath
argument_list|()
decl_stmt|;
name|Object
name|obj1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|path
operator|=
name|path
operator|.
name|appendToPath
argument_list|(
name|obj1
argument_list|)
expr_stmt|;
name|Object
index|[]
name|p
init|=
name|path
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|obj1
argument_list|,
name|p
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAppendToPath2
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectPath
name|path
init|=
operator|new
name|ProjectPath
argument_list|()
decl_stmt|;
name|path
operator|=
name|path
operator|.
name|appendToPath
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|appendToPath
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|obj1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|path
operator|=
name|path
operator|.
name|appendToPath
argument_list|(
name|obj1
argument_list|)
expr_stmt|;
name|Object
index|[]
name|p
init|=
name|path
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|p
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|obj1
argument_list|,
name|p
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetObjectParent1
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
index|[]
name|path
init|=
operator|new
name|Object
index|[]
block|{
operator|new
name|Object
argument_list|()
block|,
operator|new
name|Object
argument_list|()
block|}
decl_stmt|;
name|assertSame
argument_list|(
name|path
index|[
literal|0
index|]
argument_list|,
operator|new
name|ProjectPath
argument_list|(
name|path
argument_list|)
operator|.
name|getObjectParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetObjectParent2
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
index|[]
name|path
init|=
operator|new
name|Object
index|[]
block|{
operator|new
name|Object
argument_list|()
block|}
decl_stmt|;
name|assertNull
argument_list|(
operator|new
name|ProjectPath
argument_list|(
name|path
argument_list|)
operator|.
name|getObjectParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFirstInstanceOf1
parameter_list|()
throws|throws
name|Exception
block|{
name|ProjectPath
name|path
init|=
operator|new
name|ProjectPath
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|path
operator|.
name|firstInstanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFirstInstanceOf2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|str
init|=
literal|"sdsadsad"
decl_stmt|;
name|ProjectPath
name|path
init|=
operator|new
name|ProjectPath
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|str
argument_list|,
name|path
operator|.
name|firstInstanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

