begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ParameterizedQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|BeanFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|xml
operator|.
name|XmlBeanFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|InputStreamResource
import|;
end_import

begin_comment
comment|/**  * DataSetFactory that loads DataSets from XML using Spring.  *   */
end_comment

begin_class
specifier|public
class|class
name|XMLDataSetFactory
implements|implements
name|DataSetFactory
block|{
specifier|protected
name|String
name|location
decl_stmt|;
specifier|protected
name|Map
name|dataSets
decl_stmt|;
specifier|public
name|XMLDataSetFactory
parameter_list|()
block|{
name|this
operator|.
name|dataSets
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns a Collection of Cayenne queries for a given test.      */
specifier|public
name|Query
name|getDataSetQuery
parameter_list|(
name|Class
name|testCase
parameter_list|,
name|String
name|testName
parameter_list|,
name|Map
name|parameters
parameter_list|)
block|{
comment|// use test case class name as a key to locate BeanFactory
comment|// use test name to locate DataSet
name|BeanFactory
name|factory
init|=
name|getFactory
argument_list|(
name|testCase
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// name is either a Collection or an individual query
name|Object
name|object
init|=
name|factory
operator|.
name|getBean
argument_list|(
name|testName
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No query exists for test name:"
operator|+
name|testName
argument_list|)
throw|;
block|}
name|QueryChain
name|chain
init|=
operator|new
name|QueryChain
argument_list|()
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|Collection
condition|)
block|{
name|Iterator
name|it
init|=
operator|(
operator|(
name|Collection
operator|)
name|object
operator|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|chain
operator|.
name|addQuery
argument_list|(
name|processQuery
argument_list|(
operator|(
name|Query
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Query
condition|)
block|{
name|chain
operator|.
name|addQuery
argument_list|(
name|processQuery
argument_list|(
operator|(
name|Query
operator|)
name|object
argument_list|,
name|parameters
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid object type for name '"
operator|+
name|testName
operator|+
literal|"': "
operator|+
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|chain
return|;
block|}
specifier|protected
name|Query
name|processQuery
parameter_list|(
name|Query
name|query
parameter_list|,
name|Map
name|parameters
parameter_list|)
block|{
if|if
condition|(
name|parameters
operator|==
literal|null
condition|)
block|{
return|return
name|query
return|;
block|}
return|return
operator|(
name|query
operator|instanceof
name|ParameterizedQuery
operator|)
condition|?
operator|(
operator|(
name|ParameterizedQuery
operator|)
name|query
operator|)
operator|.
name|createQuery
argument_list|(
name|parameters
argument_list|)
else|:
name|query
return|;
block|}
specifier|protected
name|BeanFactory
name|getFactory
parameter_list|(
name|Class
name|testCase
parameter_list|)
block|{
if|if
condition|(
name|testCase
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Null test case"
argument_list|)
throw|;
block|}
comment|// lookup BeanFactory in the class hierarchy...
name|BeanFactory
name|factory
init|=
literal|null
decl_stmt|;
name|Class
name|aClass
init|=
name|testCase
decl_stmt|;
while|while
condition|(
name|factory
operator|==
literal|null
operator|&&
name|aClass
operator|!=
literal|null
condition|)
block|{
name|factory
operator|=
name|loadForClass
argument_list|(
name|aClass
argument_list|)
expr_stmt|;
name|aClass
operator|=
name|aClass
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"DataSet resource not found: "
operator|+
name|testCase
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|factory
return|;
block|}
specifier|protected
name|BeanFactory
name|loadForClass
parameter_list|(
name|Class
name|testCase
parameter_list|)
block|{
name|BeanFactory
name|factory
init|=
operator|(
name|BeanFactory
operator|)
name|dataSets
operator|.
name|get
argument_list|(
name|testCase
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|StringBuffer
name|resourceName
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|resourceName
operator|.
name|append
argument_list|(
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|location
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|resourceName
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|name
init|=
name|testCase
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// strip "org.apache.cayenne"
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"org.apache.cayenne."
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|"org.apache.cayenne."
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|resourceName
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|".xml"
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|resourceName
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|factory
operator|=
operator|new
name|XmlBeanFactory
argument_list|(
operator|new
name|InputStreamResource
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|dataSets
operator|.
name|put
argument_list|(
name|testCase
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
return|return
name|factory
return|;
block|}
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
specifier|public
name|void
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
block|}
end_class

end_unit

