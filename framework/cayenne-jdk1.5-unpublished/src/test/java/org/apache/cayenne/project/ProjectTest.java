begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|ProjectTest
extends|extends
name|CayenneCase
block|{
specifier|protected
name|Project
name|p
decl_stmt|;
specifier|protected
name|File
name|f
decl_stmt|;
comment|/**      * @see junit.framework.TestCase#setUp()      */
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|f
operator|=
operator|new
name|File
argument_list|(
literal|"xyz"
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|TstProject
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testModified
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|p
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setModified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testProcessSave
parameter_list|()
throws|throws
name|Exception
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|SaveEmulator
name|file
init|=
operator|new
name|SaveEmulator
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|p
operator|.
name|processSave
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|file
operator|.
name|saveTempCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|file
operator|.
name|commitCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|file
operator|.
name|undoCount
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testProcessSaveFail
parameter_list|()
throws|throws
name|Exception
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|SaveEmulator
name|file
init|=
operator|new
name|SaveEmulator
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
try|try
block|{
name|p
operator|.
name|processSave
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Save must have failed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProjectException
name|ex
parameter_list|)
block|{
comment|// exception expected
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|file
operator|.
name|saveTempCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|file
operator|.
name|commitCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|file
operator|.
name|undoCount
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|SaveEmulator
extends|extends
name|ProjectFile
block|{
specifier|protected
name|int
name|commitCount
decl_stmt|;
specifier|protected
name|int
name|undoCount
decl_stmt|;
specifier|protected
name|int
name|deleteCount
decl_stmt|;
specifier|protected
name|int
name|saveTempCount
decl_stmt|;
specifier|protected
name|boolean
name|shouldFail
decl_stmt|;
specifier|public
name|SaveEmulator
parameter_list|(
name|boolean
name|shouldFail
parameter_list|)
block|{
name|this
operator|.
name|shouldFail
operator|=
name|shouldFail
expr_stmt|;
block|}
comment|/**          * @see org.apache.cayenne.project.ProjectFile#canHandle(Object)          */
annotation|@
name|Override
specifier|public
name|boolean
name|canHandle
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|/**          * @see org.apache.cayenne.project.ProjectFile#createProjectFile(Object)          */
specifier|public
name|ProjectFile
name|createProjectFile
parameter_list|(
name|Project
name|project
parameter_list|,
name|Object
name|obj
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/**          * @see org.apache.cayenne.project.ProjectFile#getObject()          */
annotation|@
name|Override
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**          * @see org.apache.cayenne.project.ProjectFile#getObjectName()          */
annotation|@
name|Override
specifier|public
name|String
name|getObjectName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**          * @see org.apache.cayenne.project.ProjectFile#saveToFile(File)          */
annotation|@
name|Override
specifier|public
name|void
name|save
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|Exception
block|{
block|}
comment|/**          * @see org.apache.cayenne.project.ProjectFile#saveCommit()          */
annotation|@
name|Override
specifier|public
name|File
name|saveCommit
parameter_list|()
block|{
name|commitCount
operator|++
expr_stmt|;
return|return
operator|new
name|File
argument_list|(
literal|"abc"
argument_list|)
return|;
block|}
comment|/**          * @see org.apache.cayenne.project.ProjectFile#saveDelete()          */
specifier|public
name|boolean
name|saveDelete
parameter_list|()
block|{
name|deleteCount
operator|++
expr_stmt|;
return|return
operator|!
name|shouldFail
return|;
block|}
comment|/**          * @see org.apache.cayenne.project.ProjectFile#saveTemp()          */
annotation|@
name|Override
specifier|public
name|void
name|saveTemp
parameter_list|()
throws|throws
name|Exception
block|{
name|saveTempCount
operator|++
expr_stmt|;
if|if
condition|(
name|shouldFail
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"You forced me to fail..."
argument_list|)
throw|;
block|}
block|}
comment|/**          * @see org.apache.cayenne.project.ProjectFile#saveUndo()          */
annotation|@
name|Override
specifier|public
name|void
name|saveUndo
parameter_list|()
block|{
name|undoCount
operator|++
expr_stmt|;
block|}
comment|/**          * @see org.apache.cayenne.project.ProjectFile#getFileName()          */
annotation|@
name|Override
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**          * @see org.apache.cayenne.project.ProjectFile#getOldFileName()          */
annotation|@
name|Override
specifier|public
name|String
name|getOldLocation
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**          * @see org.apache.cayenne.project.ProjectFile#resolveFile()          */
annotation|@
name|Override
specifier|public
name|File
name|resolveFile
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
literal|"abc"
argument_list|)
return|;
block|}
comment|/**          * @see org.apache.cayenne.project.ProjectFile#resolveOldFile()          */
annotation|@
name|Override
specifier|public
name|File
name|resolveOldFile
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
literal|"xyz"
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

