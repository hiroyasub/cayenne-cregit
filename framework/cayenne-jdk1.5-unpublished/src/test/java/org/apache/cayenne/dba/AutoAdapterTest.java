begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|SQLTemplateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mockrunner
operator|.
name|mock
operator|.
name|jdbc
operator|.
name|MockConnection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mockrunner
operator|.
name|mock
operator|.
name|jdbc
operator|.
name|MockDataSource
import|;
end_import

begin_class
specifier|public
class|class
name|AutoAdapterTest
extends|extends
name|CayenneCase
block|{
specifier|public
name|void
name|testAddFactory
parameter_list|()
block|{
name|DbAdapterFactory
name|mockFactory
init|=
operator|new
name|DbAdapterFactory
argument_list|()
block|{
specifier|public
name|DbAdapter
name|createAdapter
parameter_list|(
name|DatabaseMetaData
name|md
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AutoAdapter
operator|.
name|addFactory
argument_list|(
name|mockFactory
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AutoAdapter
operator|.
name|defaultFactories
operator|.
name|contains
argument_list|(
name|mockFactory
argument_list|)
argument_list|)
expr_stmt|;
name|AutoAdapter
operator|.
name|defaultFactories
operator|.
name|remove
argument_list|(
name|mockFactory
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetAdapter
parameter_list|()
block|{
name|MockDbAdapter
name|realAdapter
init|=
operator|new
name|MockDbAdapter
argument_list|()
decl_stmt|;
name|MockDbAdapterFactory
name|factory
init|=
operator|new
name|MockDbAdapterFactory
argument_list|(
name|realAdapter
argument_list|)
decl_stmt|;
name|MockDataSource
name|dataSource
init|=
operator|new
name|MockDataSource
argument_list|()
decl_stmt|;
name|dataSource
operator|.
name|setupConnection
argument_list|(
operator|new
name|MockConnection
argument_list|()
argument_list|)
expr_stmt|;
name|AutoAdapter
name|adapter
init|=
operator|new
name|AutoAdapter
argument_list|(
name|factory
argument_list|,
name|dataSource
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|realAdapter
argument_list|,
name|adapter
operator|.
name|getAdapter
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetDefaultAdapter
parameter_list|()
throws|throws
name|Exception
block|{
name|AutoAdapter
name|adapter
init|=
operator|new
name|AutoAdapter
argument_list|(
name|getNode
argument_list|()
operator|.
name|getDataSource
argument_list|()
argument_list|)
decl_stmt|;
name|DbAdapter
name|detected
init|=
name|adapter
operator|.
name|getAdapter
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|detected
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getNode
argument_list|()
operator|.
name|getAdapter
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|detected
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCreateSQLTemplateAction
parameter_list|()
block|{
name|AutoAdapter
name|adapter
init|=
operator|new
name|AutoAdapter
argument_list|(
name|getNode
argument_list|()
operator|.
name|getDataSource
argument_list|()
argument_list|)
decl_stmt|;
name|SQLTemplateAction
name|action
init|=
operator|(
name|SQLTemplateAction
operator|)
name|adapter
operator|.
name|getAction
argument_list|(
operator|new
name|SQLTemplate
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
literal|"select * from artist"
argument_list|)
argument_list|,
name|getNode
argument_list|()
argument_list|)
decl_stmt|;
comment|// it is important for SQLTemplateAction to be used with unwrapped adapter, as the
comment|// adapter class name is used as a key to the correct SQL template.
name|assertNotNull
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|action
operator|.
name|getAdapter
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|action
operator|.
name|getAdapter
argument_list|()
operator|instanceof
name|AutoAdapter
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|adapter
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|action
operator|.
name|getAdapter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

