begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|select
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|ExtendedTypeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|horizontalinherit
operator|.
name|AbstractSuperEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|horizontalinherit
operator|.
name|SubEntity1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|InheritanceCase
import|;
end_import

begin_class
specifier|public
class|class
name|EntityTreeSegmentBuilderHorizontalTest
extends|extends
name|InheritanceCase
block|{
specifier|public
name|void
name|testBuildSegmentColumnsLeafWithDbEntityLessSuper
parameter_list|()
block|{
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|SubEntity1
operator|.
name|class
argument_list|)
decl_stmt|;
name|EntityResolver
name|resolver
init|=
name|getDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
name|QueryMetadata
name|md
init|=
name|query
operator|.
name|getMetaData
argument_list|(
name|resolver
argument_list|)
decl_stmt|;
name|ClassDescriptor
name|descriptor
init|=
name|md
operator|.
name|getClassDescriptor
argument_list|()
decl_stmt|;
name|ExtendedTypeMap
name|converters
init|=
name|getDomain
argument_list|()
operator|.
name|getDataNodes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAdapter
argument_list|()
operator|.
name|getExtendedTypes
argument_list|()
decl_stmt|;
name|SelectDescriptor
argument_list|<
name|Object
argument_list|>
name|select
init|=
operator|new
name|EntityTreeSegmentBuilder
argument_list|(
name|md
argument_list|,
name|converters
argument_list|,
name|descriptor
argument_list|)
operator|.
name|buildSegment
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|SelectColumn
argument_list|>
name|columns
init|=
name|select
operator|.
name|getColumns
argument_list|()
decl_stmt|;
name|DbEntity
name|e0
init|=
name|resolver
operator|.
name|getDbEntity
argument_list|(
literal|"INHERITANCE_SUB_ENTITY1"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|columnNames0
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ID"
argument_list|,
literal|"SUPER_INT_DB_ATTR"
argument_list|,
literal|"SUPER_STRING_DB_ATTR"
argument_list|,
literal|"SUBENTITY_STRING_DB_ATTR"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|SelectColumn
name|column
range|:
name|columns
control|)
block|{
name|columnNames0
operator|.
name|remove
argument_list|(
name|column
operator|.
name|getColumnName
argument_list|(
name|e0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Missing columns for 'INHERITANCE_SUB_ENTITY1': "
operator|+
name|columnNames0
argument_list|,
name|columnNames0
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected columns present"
argument_list|,
literal|4
argument_list|,
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBuildSegmentColumnsSuper
parameter_list|()
block|{
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|AbstractSuperEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|EntityResolver
name|resolver
init|=
name|getDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
name|QueryMetadata
name|md
init|=
name|query
operator|.
name|getMetaData
argument_list|(
name|resolver
argument_list|)
decl_stmt|;
name|ClassDescriptor
name|descriptor
init|=
name|md
operator|.
name|getClassDescriptor
argument_list|()
decl_stmt|;
name|ExtendedTypeMap
name|converters
init|=
name|getDomain
argument_list|()
operator|.
name|getDataNodes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAdapter
argument_list|()
operator|.
name|getExtendedTypes
argument_list|()
decl_stmt|;
name|SelectDescriptor
argument_list|<
name|Object
argument_list|>
name|select
init|=
operator|new
name|EntityTreeSegmentBuilder
argument_list|(
name|md
argument_list|,
name|converters
argument_list|,
name|descriptor
argument_list|)
operator|.
name|buildSegment
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|SelectColumn
argument_list|>
name|columns
init|=
name|select
operator|.
name|getColumns
argument_list|()
decl_stmt|;
name|DbEntity
name|e0
init|=
name|resolver
operator|.
name|getDbEntity
argument_list|(
literal|"INHERITANCE_SUB_ENTITY1"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|columnNames0
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"CAYENNE:ENTITY"
argument_list|,
literal|"ID"
argument_list|,
literal|"SUPER_INT_DB_ATTR"
argument_list|,
literal|"SUPER_STRING_DB_ATTR"
argument_list|,
literal|"SUBENTITY_STRING_DB_ATTR"
argument_list|,
literal|"'1'"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|DbEntity
name|e1
init|=
name|resolver
operator|.
name|getDbEntity
argument_list|(
literal|"INHERITANCE_SUB_ENTITY2"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|columnNames1
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"CAYENNE:ENTITY"
argument_list|,
literal|"ID"
argument_list|,
literal|"SUPER_INT_DB_ATTR"
argument_list|,
literal|"OVERRIDDEN_STRING_DB_ATTR"
argument_list|,
literal|"'1'"
argument_list|,
literal|"SUBENTITY_INT_DB_ATTR"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|DbEntity
name|e2
init|=
name|resolver
operator|.
name|getDbEntity
argument_list|(
literal|"INHERITANCE_SUB_ENTITY3"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|columnNames2
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"CAYENNE:ENTITY"
argument_list|,
literal|"ID"
argument_list|,
literal|"OVERRIDDEN_INT_DB_ATTR"
argument_list|,
literal|"OVERRIDDEN_STRING_DB_ATTR"
argument_list|,
literal|"'1'"
argument_list|,
literal|"1"
argument_list|,
literal|"SUBENTITY_BOOL_ATTR"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|SelectColumn
name|column
range|:
name|columns
control|)
block|{
name|columnNames0
operator|.
name|remove
argument_list|(
name|column
operator|.
name|getColumnName
argument_list|(
name|e0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|columnNames1
operator|.
name|remove
argument_list|(
name|column
operator|.
name|getColumnName
argument_list|(
name|e1
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|columnNames2
operator|.
name|remove
argument_list|(
name|column
operator|.
name|getColumnName
argument_list|(
name|e2
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Missing columns for 'INHERITANCE_SUB_ENTITY1': "
operator|+
name|columnNames0
argument_list|,
name|columnNames0
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing columns for 'INHERITANCE_SUB_ENTITY2': "
operator|+
name|columnNames1
argument_list|,
name|columnNames1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing columns for 'INHERITANCE_SUB_ENTITY3': "
operator|+
name|columnNames2
argument_list|,
name|columnNames2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected columns present"
argument_list|,
literal|7
argument_list|,
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

