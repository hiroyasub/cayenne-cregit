begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneDataObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|ToStringBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|TestObject
extends|extends
name|CayenneDataObject
block|{
specifier|protected
name|String
name|name
init|=
literal|""
decl_stmt|;
specifier|protected
name|int
name|age
decl_stmt|;
specifier|protected
name|boolean
name|open
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|TestObject
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|TestObject
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|TestObject
name|parent
init|=
literal|null
decl_stmt|;
specifier|public
name|TestObject
parameter_list|()
block|{
name|this
argument_list|(
literal|""
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestObject
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|age
parameter_list|,
name|boolean
name|open
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|age
operator|=
name|age
expr_stmt|;
name|this
operator|.
name|open
operator|=
name|open
expr_stmt|;
block|}
specifier|public
name|int
name|getAge
parameter_list|()
block|{
return|return
name|age
return|;
block|}
specifier|public
name|void
name|setAge
parameter_list|(
name|int
name|age
parameter_list|)
block|{
name|this
operator|.
name|age
operator|=
name|age
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|boolean
name|isOpen
parameter_list|()
block|{
return|return
name|open
return|;
block|}
specifier|public
name|void
name|setOpen
parameter_list|(
name|boolean
name|open
parameter_list|)
block|{
name|this
operator|.
name|open
operator|=
name|open
expr_stmt|;
block|}
specifier|public
name|TestObject
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
specifier|public
name|void
name|setParent
parameter_list|(
name|TestObject
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
specifier|public
name|void
name|setChildren
parameter_list|(
name|List
argument_list|<
name|TestObject
argument_list|>
name|children
parameter_list|)
block|{
name|this
operator|.
name|children
operator|=
name|children
expr_stmt|;
block|}
specifier|public
name|void
name|addChild
parameter_list|(
name|TestObject
name|child
parameter_list|)
block|{
name|children
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeChild
parameter_list|(
name|TestObject
name|child
parameter_list|)
block|{
name|children
operator|.
name|remove
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TestObject
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|o
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|TestObject
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TestObject
name|test
init|=
operator|(
name|TestObject
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|name
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|parent
argument_list|,
name|test
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
operator|(
name|test
operator|.
name|getAge
argument_list|()
operator|==
name|age
operator|)
operator|&&
operator|(
name|test
operator|.
name|isOpen
argument_list|()
operator|==
name|open
operator|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|encodeAsXML
parameter_list|(
name|XMLEncoder
name|encoder
parameter_list|)
block|{
name|encoder
operator|.
name|setRoot
argument_list|(
literal|"Test"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// "parent" must come first to fully test 1-to-1 relationships, per CAY-597.
name|encoder
operator|.
name|encodeProperty
argument_list|(
literal|"parent"
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|encodeProperty
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|encodeProperty
argument_list|(
literal|"age"
argument_list|,
operator|new
name|Integer
argument_list|(
name|age
argument_list|)
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|encodeProperty
argument_list|(
literal|"open"
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|open
argument_list|)
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|encodeProperty
argument_list|(
literal|"children"
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|decodeFromXML
parameter_list|(
name|XMLDecoder
name|decoder
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|decoder
operator|.
name|decodeObject
argument_list|(
literal|"parent"
argument_list|)
condition|)
block|{
name|parent
operator|=
operator|(
name|TestObject
operator|)
name|decoder
operator|.
name|decodeObject
argument_list|(
literal|"parent"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|decoder
operator|.
name|decodeInteger
argument_list|(
literal|"age"
argument_list|)
condition|)
block|{
name|age
operator|=
name|decoder
operator|.
name|decodeInteger
argument_list|(
literal|"age"
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|decoder
operator|.
name|decodeBoolean
argument_list|(
literal|"open"
argument_list|)
condition|)
block|{
name|open
operator|=
name|decoder
operator|.
name|decodeBoolean
argument_list|(
literal|"open"
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
name|name
operator|=
name|decoder
operator|.
name|decodeString
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|children
operator|=
operator|(
name|List
argument_list|<
name|TestObject
argument_list|>
operator|)
name|decoder
operator|.
name|decodeObject
argument_list|(
literal|"children"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|ToStringBuilder
argument_list|(
name|this
argument_list|)
operator|.
name|append
argument_list|(
literal|"parent"
argument_list|,
name|parent
argument_list|)
operator|.
name|append
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"age"
argument_list|,
name|age
argument_list|)
operator|.
name|append
argument_list|(
literal|"open"
argument_list|,
name|open
argument_list|)
operator|.
name|append
argument_list|(
literal|"children#"
argument_list|,
name|children
operator|!=
literal|null
condition|?
name|children
operator|.
name|size
argument_list|()
else|:
operator|-
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

