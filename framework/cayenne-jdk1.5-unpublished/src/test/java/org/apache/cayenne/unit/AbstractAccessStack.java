begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DbGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|QueryLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Defines a set of algorithms useful for a generic AccessStack.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractAccessStack
block|{
specifier|private
specifier|static
name|Log
name|logObj
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AbstractAccessStack
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// hardcoded dependent entities that should be excluded
comment|// if LOBs are not supported
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|EXTRA_EXCLUDED_FOR_NO_LOB
init|=
operator|new
name|String
index|[]
block|{
literal|"CLOB_DETAIL"
block|}
decl_stmt|;
specifier|protected
name|CayenneResources
name|resources
decl_stmt|;
specifier|public
name|AccessStackAdapter
name|getAdapter
parameter_list|(
name|DataNode
name|node
parameter_list|)
block|{
return|return
name|resources
operator|.
name|getAccessStackAdapter
argument_list|(
name|node
operator|.
name|getAdapter
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|DataDomain
name|getDomain
parameter_list|()
function_decl|;
comment|/**      * Helper method that orders DbEntities to satisfy referential constraints and returns      * an ordered list.      */
specifier|protected
name|List
name|dbEntitiesInInsertOrder
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|DataMap
name|map
parameter_list|)
block|{
name|List
name|entities
init|=
operator|new
name|ArrayList
argument_list|(
name|map
operator|.
name|getDbEntities
argument_list|()
argument_list|)
decl_stmt|;
comment|// filter varios unsupported tests...
comment|// LOBs
name|boolean
name|excludeLOB
init|=
operator|!
name|getAdapter
argument_list|(
name|node
argument_list|)
operator|.
name|supportsLobs
argument_list|()
decl_stmt|;
name|boolean
name|excludeBinPK
init|=
operator|!
name|getAdapter
argument_list|(
name|node
argument_list|)
operator|.
name|supportsBinaryPK
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludeLOB
operator|||
name|excludeBinPK
condition|)
block|{
name|Iterator
name|it
init|=
name|entities
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
name|filtered
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbEntity
name|ent
init|=
operator|(
name|DbEntity
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// check for LOB attributes
if|if
condition|(
name|excludeLOB
condition|)
block|{
if|if
condition|(
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|EXTRA_EXCLUDED_FOR_NO_LOB
argument_list|,
name|ent
operator|.
name|getName
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
block|{
continue|continue;
block|}
name|boolean
name|hasLob
init|=
literal|false
decl_stmt|;
name|Iterator
name|attrs
init|=
name|ent
operator|.
name|getAttributes
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|attrs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbAttribute
name|attr
init|=
operator|(
name|DbAttribute
operator|)
name|attrs
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|attr
operator|.
name|getType
argument_list|()
operator|==
name|Types
operator|.
name|BLOB
operator|||
name|attr
operator|.
name|getType
argument_list|()
operator|==
name|Types
operator|.
name|CLOB
condition|)
block|{
name|hasLob
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|hasLob
condition|)
block|{
continue|continue;
block|}
block|}
comment|// check for BIN PK
if|if
condition|(
name|excludeBinPK
condition|)
block|{
name|boolean
name|skip
init|=
literal|false
decl_stmt|;
name|Iterator
name|attrs
init|=
name|ent
operator|.
name|getAttributes
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|attrs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// check for BIN PK or FK to BIN Pk
name|DbAttribute
name|attr
init|=
operator|(
name|DbAttribute
operator|)
name|attrs
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|attr
operator|.
name|getType
argument_list|()
operator|==
name|Types
operator|.
name|BINARY
operator|||
name|attr
operator|.
name|getType
argument_list|()
operator|==
name|Types
operator|.
name|VARBINARY
operator|||
name|attr
operator|.
name|getType
argument_list|()
operator|==
name|Types
operator|.
name|LONGVARBINARY
condition|)
block|{
if|if
condition|(
name|attr
operator|.
name|isPrimaryKey
argument_list|()
operator|||
name|attr
operator|.
name|isForeignKey
argument_list|()
condition|)
block|{
name|skip
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|skip
condition|)
block|{
continue|continue;
block|}
block|}
name|filtered
operator|.
name|add
argument_list|(
name|ent
argument_list|)
expr_stmt|;
block|}
name|entities
operator|=
name|filtered
expr_stmt|;
block|}
name|node
operator|.
name|getEntitySorter
argument_list|()
operator|.
name|sortDbEntities
argument_list|(
name|entities
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|entities
return|;
block|}
specifier|protected
name|void
name|deleteTestData
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|DataMap
name|map
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|conn
init|=
name|node
operator|.
name|getDataSource
argument_list|()
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|List
name|list
init|=
name|this
operator|.
name|dbEntitiesInInsertOrder
argument_list|(
name|node
argument_list|,
name|map
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|conn
operator|.
name|getAutoCommit
argument_list|()
condition|)
block|{
name|conn
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ListIterator
name|it
init|=
name|list
operator|.
name|listIterator
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|DbEntity
name|ent
init|=
operator|(
name|DbEntity
operator|)
name|it
operator|.
name|previous
argument_list|()
decl_stmt|;
name|String
name|deleteSql
init|=
literal|"DELETE FROM "
operator|+
name|ent
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|deleteSql
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error deleting test data for entity '"
operator|+
name|ent
operator|.
name|getName
argument_list|()
operator|+
literal|"': "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|conn
operator|.
name|commit
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|dropSchema
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|DataMap
name|map
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|conn
init|=
name|node
operator|.
name|getDataSource
argument_list|()
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|List
name|list
init|=
name|dbEntitiesInInsertOrder
argument_list|(
name|node
argument_list|,
name|map
argument_list|)
decl_stmt|;
try|try
block|{
name|DatabaseMetaData
name|md
init|=
name|conn
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|ResultSet
name|tables
init|=
name|md
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"%"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
name|allTables
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|tables
operator|.
name|next
argument_list|()
condition|)
block|{
comment|// 'toUpperCase' is needed since most databases
comment|// are case insensitive, and some will convert names to lower case
comment|// (PostgreSQL)
name|String
name|name
init|=
name|tables
operator|.
name|getString
argument_list|(
literal|"TABLE_NAME"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
name|allTables
operator|.
name|add
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tables
operator|.
name|close
argument_list|()
expr_stmt|;
name|getAdapter
argument_list|(
name|node
argument_list|)
operator|.
name|willDropTables
argument_list|(
name|conn
argument_list|,
name|map
argument_list|,
name|allTables
argument_list|)
expr_stmt|;
comment|// drop all tables in the map
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ListIterator
name|it
init|=
name|list
operator|.
name|listIterator
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|DbEntity
name|ent
init|=
operator|(
name|DbEntity
operator|)
name|it
operator|.
name|previous
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|allTables
operator|.
name|contains
argument_list|(
name|ent
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|String
name|dropSql
init|=
name|node
operator|.
name|getAdapter
argument_list|()
operator|.
name|dropTable
argument_list|(
name|ent
argument_list|)
decl_stmt|;
name|logObj
operator|.
name|info
argument_list|(
name|dropSql
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
name|dropSql
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqe
parameter_list|)
block|{
name|logObj
operator|.
name|warn
argument_list|(
literal|"Can't drop table "
operator|+
name|ent
operator|.
name|getName
argument_list|()
operator|+
literal|", ignoring..."
argument_list|,
name|sqe
argument_list|)
expr_stmt|;
block|}
block|}
name|getAdapter
argument_list|(
name|node
argument_list|)
operator|.
name|droppedTables
argument_list|(
name|conn
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|dropPKSupport
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|DataMap
name|map
parameter_list|)
throws|throws
name|Exception
block|{
name|List
name|filteredEntities
init|=
name|dbEntitiesInInsertOrder
argument_list|(
name|node
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|node
operator|.
name|getAdapter
argument_list|()
operator|.
name|getPkGenerator
argument_list|()
operator|.
name|dropAutoPk
argument_list|(
name|node
argument_list|,
name|filteredEntities
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createPKSupport
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|DataMap
name|map
parameter_list|)
throws|throws
name|Exception
block|{
name|List
name|filteredEntities
init|=
name|dbEntitiesInInsertOrder
argument_list|(
name|node
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|node
operator|.
name|getAdapter
argument_list|()
operator|.
name|getPkGenerator
argument_list|()
operator|.
name|createAutoPk
argument_list|(
name|node
argument_list|,
name|filteredEntities
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createSchema
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|DataMap
name|map
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|conn
init|=
name|node
operator|.
name|getDataSource
argument_list|()
operator|.
name|getConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|getAdapter
argument_list|(
name|node
argument_list|)
operator|.
name|willCreateTables
argument_list|(
name|conn
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|tableCreateQueries
argument_list|(
name|node
argument_list|,
name|map
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|query
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|QueryLogger
operator|.
name|logQuery
argument_list|(
name|query
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
name|getAdapter
argument_list|(
name|node
argument_list|)
operator|.
name|createdTables
argument_list|(
name|conn
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns iterator of preprocessed table create queries.      */
specifier|protected
name|Iterator
name|tableCreateQueries
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|DataMap
name|map
parameter_list|)
throws|throws
name|Exception
block|{
name|DbAdapter
name|adapter
init|=
name|node
operator|.
name|getAdapter
argument_list|()
decl_stmt|;
name|DbGenerator
name|gen
init|=
operator|new
name|DbGenerator
argument_list|(
name|adapter
argument_list|,
name|map
argument_list|,
literal|null
argument_list|,
name|getDomain
argument_list|()
argument_list|)
decl_stmt|;
name|List
name|orderedEnts
init|=
name|dbEntitiesInInsertOrder
argument_list|(
name|node
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|List
name|queries
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|// table definitions
name|Iterator
name|it
init|=
name|orderedEnts
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbEntity
name|ent
init|=
operator|(
name|DbEntity
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|queries
operator|.
name|add
argument_list|(
name|adapter
operator|.
name|createTable
argument_list|(
name|ent
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// FK constraints
name|it
operator|=
name|orderedEnts
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbEntity
name|ent
init|=
operator|(
name|DbEntity
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|getAdapter
argument_list|(
name|node
argument_list|)
operator|.
name|supportsFKConstraints
argument_list|(
name|ent
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|List
name|qs
init|=
name|gen
operator|.
name|createConstraintsQueries
argument_list|(
name|ent
argument_list|)
decl_stmt|;
name|queries
operator|.
name|addAll
argument_list|(
name|qs
argument_list|)
expr_stmt|;
block|}
return|return
name|queries
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
end_class

end_unit

