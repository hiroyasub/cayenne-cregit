begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|ArtistExhibit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|ClobTestEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Exhibit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Gallery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|AccessStackAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|ServerCase
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|SelectQueryTest
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|protected
name|ObjectContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|DBHelper
name|dbHelper
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|AccessStackAdapter
name|accessStackAdapter
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUpAfterInjection
parameter_list|()
throws|throws
name|Exception
block|{
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"PAINTING_INFO"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"PAINTING"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"ARTIST_EXHIBIT"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"ARTIST_GROUP"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"ARTIST"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createClobDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|tClobTest
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"CLOB_TEST"
argument_list|)
decl_stmt|;
name|tClobTest
operator|.
name|setColumns
argument_list|(
literal|"CLOB_TEST_ID"
argument_list|,
literal|"CLOB_COL"
argument_list|)
expr_stmt|;
name|tClobTest
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
name|tClobTest
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"clob1"
argument_list|)
expr_stmt|;
name|tClobTest
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"clob2"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createArtistsDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|tArtist
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"ARTIST"
argument_list|)
decl_stmt|;
name|tArtist
operator|.
name|setColumns
argument_list|(
literal|"ARTIST_ID"
argument_list|,
literal|"ARTIST_NAME"
argument_list|,
literal|"DATE_OF_BIRTH"
argument_list|)
expr_stmt|;
name|long
name|dateBase
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|tArtist
operator|.
name|insert
argument_list|(
name|i
argument_list|,
literal|"artist"
operator|+
name|i
argument_list|,
operator|new
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|(
name|dateBase
operator|+
literal|10000
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|createArtistsWildcardDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|tArtist
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"ARTIST"
argument_list|)
decl_stmt|;
name|tArtist
operator|.
name|setColumns
argument_list|(
literal|"ARTIST_ID"
argument_list|,
literal|"ARTIST_NAME"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"_X"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"Y_"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFetchLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|setFetchLimit
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|objects
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFetchOffset
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|int
name|totalRows
init|=
name|context
operator|.
name|performQuery
argument_list|(
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|addOrdering
argument_list|(
literal|"db:"
operator|+
name|Artist
operator|.
name|ARTIST_ID_PK_COLUMN
argument_list|,
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFetchOffset
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|totalRows
operator|-
literal|5
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist6"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDbEntityRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|DbEntity
name|artistDbEntity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"ARTIST"
argument_list|)
decl_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|artistDbEntity
argument_list|)
decl_stmt|;
name|List
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|DataRow
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFetchLimitWithOffset
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|addOrdering
argument_list|(
literal|"db:"
operator|+
name|Artist
operator|.
name|ARTIST_ID_PK_COLUMN
argument_list|,
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFetchOffset
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFetchLimit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist16"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFetchOffsetWithQualifier
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|Expression
operator|.
name|fromString
argument_list|(
literal|"db:ARTIST_ID> 3"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFetchOffset
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|objects
operator|.
name|size
argument_list|()
decl_stmt|;
name|SelectQuery
name|sizeQ
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|sizeQ
operator|.
name|setQualifier
argument_list|(
name|Expression
operator|.
name|fromString
argument_list|(
literal|"db:ARTIST_ID> 3"
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|objects1
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|sizeQ
argument_list|)
decl_stmt|;
name|int
name|sizeAll
init|=
name|objects1
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|sizeAll
operator|-
literal|5
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFetchLimitWithQualifier
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|Expression
operator|.
name|fromString
argument_list|(
literal|"db:ARTIST_ID> 3"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFetchLimit
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectAllObjectsRootEntityName
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectAllObjectsRootClass
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectAllObjectsRootObjEntity
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|ObjEntity
name|artistEntity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|lookupObjEntity
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|artistEntity
argument_list|)
decl_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectLikeExactMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist1"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectNotLikeSingleWildcardMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|notLikeExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist11%"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|19
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectNotLikeIgnoreCaseSingleWildcardMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|notLikeIgnoreCaseExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"aRtIsT11%"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|19
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectLikeCaseSensitive
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|accessStackAdapter
operator|.
name|supportsCaseSensitiveLike
argument_list|()
condition|)
block|{
return|return;
block|}
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"aRtIsT%"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectLikeSingleWildcardMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist11%"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectLikeSingleWildcardMatchAndEscape
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsWildcardDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|andQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"=_%"
argument_list|,
literal|'='
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectLikeMultipleWildcardMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist1%"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Test how "like ignore case" works when using uppercase parameter. */
specifier|public
name|void
name|testSelectLikeIgnoreCaseObjects1
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|likeIgnoreCaseExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"ARTIST%"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Test how "like ignore case" works when using lowercase parameter. */
specifier|public
name|void
name|testSelectLikeIgnoreCaseObjects2
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|likeIgnoreCaseExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist%"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Test how "like ignore case" works when using uppercase parameter. */
specifier|public
name|void
name|testSelectLikeIgnoreCaseClob
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|accessStackAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|createClobDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|ClobTestEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|likeIgnoreCaseExp
argument_list|(
literal|"clobCol"
argument_list|,
literal|"clob%"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testSelectEqualsClob
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|accessStackAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|createClobDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|ClobTestEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"clobCol"
argument_list|,
literal|"clob1"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testSelectNotEqualsClob
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|accessStackAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|createClobDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|ClobTestEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|noMatchExp
argument_list|(
literal|"clobCol"
argument_list|,
literal|"clob1"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testSelectIn
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"artistName in ('artist1', 'artist2')"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectParameterizedIn
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"artistName in $list"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|query
operator|=
name|query
operator|.
name|queryWithParameters
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"list"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"artist1"
block|,
literal|"artist2"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectParameterizedEmptyIn
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"artistName in $list"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|query
operator|=
name|query
operator|.
name|queryWithParameters
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"list"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectParameterizedEmptyNotIn
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"artistName not in $list"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|query
operator|=
name|query
operator|.
name|queryWithParameters
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"list"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectEmptyIn
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
literal|"artistName"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectEmptyNotIn
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|notInExp
argument_list|(
literal|"artistName"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectBooleanTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|expTrue
argument_list|()
decl_stmt|;
name|qual
operator|=
name|qual
operator|.
name|andExp
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist1"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectBooleanNotTrueOr
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|expTrue
argument_list|()
decl_stmt|;
name|qual
operator|=
name|qual
operator|.
name|notExp
argument_list|()
expr_stmt|;
name|qual
operator|=
name|qual
operator|.
name|orExp
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist1"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectBooleanFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|expFalse
argument_list|()
decl_stmt|;
name|qual
operator|=
name|qual
operator|.
name|andExp
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist1"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectBooleanFalseOr
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|expFalse
argument_list|()
decl_stmt|;
name|qual
operator|=
name|qual
operator|.
name|orExp
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist1"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that all queries specified in prefetch are executed in a more complex      * prefetch scenario.      */
specifier|public
name|void
name|testRouteWithPrefetches
parameter_list|()
block|{
name|EntityResolver
name|resolver
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
name|MockQueryRouter
name|router
init|=
operator|new
name|MockQueryRouter
argument_list|()
decl_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|q
operator|.
name|route
argument_list|(
name|router
argument_list|,
name|resolver
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|router
operator|.
name|getQueryCount
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|addPrefetch
argument_list|(
literal|"paintingArray"
argument_list|)
expr_stmt|;
name|router
operator|.
name|reset
argument_list|()
expr_stmt|;
name|q
operator|.
name|route
argument_list|(
name|router
argument_list|,
name|resolver
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|router
operator|.
name|getQueryCount
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|addPrefetch
argument_list|(
literal|"paintingArray.toGallery"
argument_list|)
expr_stmt|;
name|router
operator|.
name|reset
argument_list|()
expr_stmt|;
name|q
operator|.
name|route
argument_list|(
name|router
argument_list|,
name|resolver
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|router
operator|.
name|getQueryCount
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|addPrefetch
argument_list|(
literal|"artistExhibitArray.toExhibit"
argument_list|)
expr_stmt|;
name|router
operator|.
name|reset
argument_list|()
expr_stmt|;
name|q
operator|.
name|route
argument_list|(
name|router
argument_list|,
name|resolver
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|router
operator|.
name|getQueryCount
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|removePrefetch
argument_list|(
literal|"paintingArray"
argument_list|)
expr_stmt|;
name|router
operator|.
name|reset
argument_list|()
expr_stmt|;
name|q
operator|.
name|route
argument_list|(
name|router
argument_list|,
name|resolver
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|router
operator|.
name|getQueryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that all queries specified in prefetch are executed in a more complex      * prefetch scenario with no reverse obj relationships.      */
specifier|public
name|void
name|testRouteQueryWithPrefetchesNoReverse
parameter_list|()
block|{
name|EntityResolver
name|resolver
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
name|ObjEntity
name|paintingEntity
init|=
name|resolver
operator|.
name|lookupObjEntity
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjEntity
name|galleryEntity
init|=
name|resolver
operator|.
name|lookupObjEntity
argument_list|(
name|Gallery
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjEntity
name|artistExhibitEntity
init|=
name|resolver
operator|.
name|lookupObjEntity
argument_list|(
name|ArtistExhibit
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjEntity
name|exhibitEntity
init|=
name|resolver
operator|.
name|lookupObjEntity
argument_list|(
name|Exhibit
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjRelationship
name|paintingToArtistRel
init|=
operator|(
name|ObjRelationship
operator|)
name|paintingEntity
operator|.
name|getRelationship
argument_list|(
literal|"toArtist"
argument_list|)
decl_stmt|;
name|paintingEntity
operator|.
name|removeRelationship
argument_list|(
literal|"toArtist"
argument_list|)
expr_stmt|;
name|ObjRelationship
name|galleryToPaintingRel
init|=
operator|(
name|ObjRelationship
operator|)
name|galleryEntity
operator|.
name|getRelationship
argument_list|(
literal|"paintingArray"
argument_list|)
decl_stmt|;
name|galleryEntity
operator|.
name|removeRelationship
argument_list|(
literal|"paintingArray"
argument_list|)
expr_stmt|;
name|ObjRelationship
name|artistExhibitToArtistRel
init|=
operator|(
name|ObjRelationship
operator|)
name|artistExhibitEntity
operator|.
name|getRelationship
argument_list|(
literal|"toArtist"
argument_list|)
decl_stmt|;
name|artistExhibitEntity
operator|.
name|removeRelationship
argument_list|(
literal|"toArtist"
argument_list|)
expr_stmt|;
name|ObjRelationship
name|exhibitToArtistExhibitRel
init|=
operator|(
name|ObjRelationship
operator|)
name|exhibitEntity
operator|.
name|getRelationship
argument_list|(
literal|"artistExhibitArray"
argument_list|)
decl_stmt|;
name|exhibitEntity
operator|.
name|removeRelationship
argument_list|(
literal|"artistExhibitArray"
argument_list|)
expr_stmt|;
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist1"
argument_list|)
decl_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
literal|"Artist"
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|q
operator|.
name|addPrefetch
argument_list|(
literal|"paintingArray"
argument_list|)
expr_stmt|;
name|q
operator|.
name|addPrefetch
argument_list|(
literal|"paintingArray.toGallery"
argument_list|)
expr_stmt|;
name|q
operator|.
name|addPrefetch
argument_list|(
literal|"artistExhibitArray.toExhibit"
argument_list|)
expr_stmt|;
try|try
block|{
name|MockQueryRouter
name|router
init|=
operator|new
name|MockQueryRouter
argument_list|()
decl_stmt|;
name|q
operator|.
name|route
argument_list|(
name|router
argument_list|,
name|resolver
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|router
operator|.
name|getQueryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|paintingEntity
operator|.
name|addRelationship
argument_list|(
name|paintingToArtistRel
argument_list|)
expr_stmt|;
name|galleryEntity
operator|.
name|addRelationship
argument_list|(
name|galleryToPaintingRel
argument_list|)
expr_stmt|;
name|artistExhibitEntity
operator|.
name|addRelationship
argument_list|(
name|artistExhibitToArtistRel
argument_list|)
expr_stmt|;
name|exhibitEntity
operator|.
name|addRelationship
argument_list|(
name|exhibitToArtistExhibitRel
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test prefetching with qualifier on the root query being the path to the prefetch.      */
specifier|public
name|void
name|testRouteQueryWithPrefetchesPrefetchExpressionPath
parameter_list|()
block|{
comment|// find the painting not matching the artist (this is the case where such prefetch
comment|// at least makes sense)
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|noMatchExp
argument_list|(
literal|"toArtist"
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
decl_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|Painting
operator|.
name|class
argument_list|,
name|exp
argument_list|)
decl_stmt|;
name|q
operator|.
name|addPrefetch
argument_list|(
literal|"toArtist"
argument_list|)
expr_stmt|;
comment|// test how prefetches are resolved in this case - this was a stumbling block for
comment|// a while
name|EntityResolver
name|resolver
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
name|MockQueryRouter
name|router
init|=
operator|new
name|MockQueryRouter
argument_list|()
decl_stmt|;
name|q
operator|.
name|route
argument_list|(
name|router
argument_list|,
name|resolver
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|router
operator|.
name|getQueryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLeftJoinAndPrefetchToMany
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"paintingArray+.toGallery"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|query
operator|.
name|addPrefetch
argument_list|(
literal|"artistExhibitArray"
argument_list|)
expr_stmt|;
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLeftJoinAndPrefetchToOne
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Painting
operator|.
name|class
argument_list|,
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"toArtist+.artistName"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|query
operator|.
name|addPrefetch
argument_list|(
literal|"toGallery"
argument_list|)
expr_stmt|;
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

