begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|select
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|ExtendedTypeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inherit
operator|.
name|AbstractPerson
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inherit
operator|.
name|CustomerRepresentative
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|PeopleCase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mockrunner
operator|.
name|mock
operator|.
name|jdbc
operator|.
name|MockResultSet
import|;
end_import

begin_class
specifier|public
class|class
name|EntityTreeSegmentBuilderTest
extends|extends
name|PeopleCase
block|{
specifier|public
name|void
name|testBuildSegmentColumnsLeaf
parameter_list|()
block|{
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|CustomerRepresentative
operator|.
name|class
argument_list|)
decl_stmt|;
name|EntityResolver
name|resolver
init|=
name|getDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
name|QueryMetadata
name|md
init|=
name|query
operator|.
name|getMetaData
argument_list|(
name|resolver
argument_list|)
decl_stmt|;
name|ClassDescriptor
name|descriptor
init|=
name|md
operator|.
name|getClassDescriptor
argument_list|()
decl_stmt|;
name|ExtendedTypeMap
name|converters
init|=
name|getDomain
argument_list|()
operator|.
name|getDataNodes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAdapter
argument_list|()
operator|.
name|getExtendedTypes
argument_list|()
decl_stmt|;
name|SelectDescriptor
argument_list|<
name|Object
argument_list|>
name|select
init|=
operator|new
name|EntityTreeSegmentBuilder
argument_list|(
name|md
argument_list|,
name|converters
argument_list|,
name|descriptor
argument_list|)
operator|.
name|buildSegment
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|SelectColumn
argument_list|>
name|columns
init|=
name|select
operator|.
name|getColumns
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"CLIENT_COMPANY_ID"
argument_list|,
literal|"CLIENT_CONTACT_TYPE"
argument_list|,
literal|"NAME"
argument_list|,
literal|"PERSON_ID"
argument_list|,
literal|"PERSON_TYPE"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|SelectColumn
name|column
range|:
name|columns
control|)
block|{
name|columnNames
operator|.
name|remove
argument_list|(
name|column
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Missing columns: "
operator|+
name|columnNames
argument_list|,
name|columnNames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected columns present"
argument_list|,
literal|5
argument_list|,
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBuildSegmentRowReaderInheritanceLeaf
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|CustomerRepresentative
operator|.
name|class
argument_list|)
decl_stmt|;
name|EntityResolver
name|resolver
init|=
name|getDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
name|QueryMetadata
name|md
init|=
name|query
operator|.
name|getMetaData
argument_list|(
name|resolver
argument_list|)
decl_stmt|;
name|ClassDescriptor
name|descriptor
init|=
name|md
operator|.
name|getClassDescriptor
argument_list|()
decl_stmt|;
name|ExtendedTypeMap
name|converters
init|=
name|getDomain
argument_list|()
operator|.
name|getDataNodes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAdapter
argument_list|()
operator|.
name|getExtendedTypes
argument_list|()
decl_stmt|;
name|SelectDescriptor
argument_list|<
name|Object
argument_list|>
name|select
init|=
operator|new
name|EntityTreeSegmentBuilder
argument_list|(
name|md
argument_list|,
name|converters
argument_list|,
name|descriptor
argument_list|)
operator|.
name|buildSegment
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|SelectColumn
argument_list|>
name|columns
init|=
name|select
operator|.
name|getColumns
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|crRowMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|crRowMap
operator|.
name|put
argument_list|(
literal|"PERSON_ID"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|crRowMap
operator|.
name|put
argument_list|(
literal|"PERSON_TYPE"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|crRowMap
operator|.
name|put
argument_list|(
literal|"NAME"
argument_list|,
literal|"E2"
argument_list|)
expr_stmt|;
name|crRowMap
operator|.
name|put
argument_list|(
literal|"CLIENT_CONTACT_TYPE"
argument_list|,
literal|"XX"
argument_list|)
expr_stmt|;
name|crRowMap
operator|.
name|put
argument_list|(
literal|"CLIENT_COMPANY_ID"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|crRow
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|MockResultSet
name|rs
init|=
operator|new
name|MockResultSet
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
for|for
control|(
name|SelectColumn
name|column
range|:
name|columns
control|)
block|{
name|rs
operator|.
name|addColumn
argument_list|(
name|column
operator|.
name|getColumnName
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|crRow
operator|.
name|add
argument_list|(
name|crRowMap
operator|.
name|get
argument_list|(
name|column
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rs
operator|.
name|addRow
argument_list|(
name|crRow
argument_list|)
expr_stmt|;
name|RowReader
argument_list|<
name|Object
argument_list|>
name|reader
init|=
name|select
operator|.
name|getRowReader
argument_list|(
name|rs
argument_list|)
decl_stmt|;
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
name|DataRow
name|crRowRead
init|=
operator|(
name|DataRow
operator|)
name|reader
operator|.
name|readRow
argument_list|(
name|rs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"CustomerRepresentative"
argument_list|,
name|crRowRead
operator|.
name|getEntityName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid row read: "
operator|+
name|crRowRead
argument_list|,
name|crRowMap
argument_list|,
name|crRowRead
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBuildSegmentColumns
parameter_list|()
block|{
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|AbstractPerson
operator|.
name|class
argument_list|)
decl_stmt|;
name|EntityResolver
name|resolver
init|=
name|getDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
name|QueryMetadata
name|md
init|=
name|query
operator|.
name|getMetaData
argument_list|(
name|resolver
argument_list|)
decl_stmt|;
name|ClassDescriptor
name|descriptor
init|=
name|md
operator|.
name|getClassDescriptor
argument_list|()
decl_stmt|;
name|ExtendedTypeMap
name|converters
init|=
name|getDomain
argument_list|()
operator|.
name|getDataNodes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAdapter
argument_list|()
operator|.
name|getExtendedTypes
argument_list|()
decl_stmt|;
name|SelectDescriptor
argument_list|<
name|Object
argument_list|>
name|select
init|=
operator|new
name|EntityTreeSegmentBuilder
argument_list|(
name|md
argument_list|,
name|converters
argument_list|,
name|descriptor
argument_list|)
operator|.
name|buildSegment
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|SelectColumn
argument_list|>
name|columns
init|=
name|select
operator|.
name|getColumns
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"CLIENT_COMPANY_ID"
argument_list|,
literal|"CLIENT_CONTACT_TYPE"
argument_list|,
literal|"DEPARTMENT_ID"
argument_list|,
literal|"NAME"
argument_list|,
literal|"PERSON_ID"
argument_list|,
literal|"PERSON_TYPE"
argument_list|,
literal|"SALARY"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|SelectColumn
name|column
range|:
name|columns
control|)
block|{
name|columnNames
operator|.
name|remove
argument_list|(
name|column
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Missing columns: "
operator|+
name|columnNames
argument_list|,
name|columnNames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected columns present"
argument_list|,
literal|7
argument_list|,
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBuildSegmentRowReader
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|AbstractPerson
operator|.
name|class
argument_list|)
decl_stmt|;
name|EntityResolver
name|resolver
init|=
name|getDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
name|QueryMetadata
name|md
init|=
name|query
operator|.
name|getMetaData
argument_list|(
name|resolver
argument_list|)
decl_stmt|;
name|ClassDescriptor
name|descriptor
init|=
name|md
operator|.
name|getClassDescriptor
argument_list|()
decl_stmt|;
name|ExtendedTypeMap
name|converters
init|=
name|getDomain
argument_list|()
operator|.
name|getDataNodes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAdapter
argument_list|()
operator|.
name|getExtendedTypes
argument_list|()
decl_stmt|;
name|SelectDescriptor
argument_list|<
name|Object
argument_list|>
name|select
init|=
operator|new
name|EntityTreeSegmentBuilder
argument_list|(
name|md
argument_list|,
name|converters
argument_list|,
name|descriptor
argument_list|)
operator|.
name|buildSegment
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|SelectColumn
argument_list|>
name|columns
init|=
name|select
operator|.
name|getColumns
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|employeeRowMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|employeeRowMap
operator|.
name|put
argument_list|(
literal|"PERSON_ID"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|employeeRowMap
operator|.
name|put
argument_list|(
literal|"PERSON_TYPE"
argument_list|,
literal|"EE"
argument_list|)
expr_stmt|;
name|employeeRowMap
operator|.
name|put
argument_list|(
literal|"NAME"
argument_list|,
literal|"E1"
argument_list|)
expr_stmt|;
name|employeeRowMap
operator|.
name|put
argument_list|(
literal|"SALARY"
argument_list|,
operator|new
name|Float
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
name|employeeRowMap
operator|.
name|put
argument_list|(
literal|"DEPARTMENT_ID"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|managerRowMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|managerRowMap
operator|.
name|put
argument_list|(
literal|"PERSON_ID"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|managerRowMap
operator|.
name|put
argument_list|(
literal|"PERSON_TYPE"
argument_list|,
literal|"EM"
argument_list|)
expr_stmt|;
name|managerRowMap
operator|.
name|put
argument_list|(
literal|"NAME"
argument_list|,
literal|"E2"
argument_list|)
expr_stmt|;
name|managerRowMap
operator|.
name|put
argument_list|(
literal|"SALARY"
argument_list|,
operator|new
name|Float
argument_list|(
literal|2.0
argument_list|)
argument_list|)
expr_stmt|;
name|managerRowMap
operator|.
name|put
argument_list|(
literal|"DEPARTMENT_ID"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|crRowMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|crRowMap
operator|.
name|put
argument_list|(
literal|"PERSON_ID"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|crRowMap
operator|.
name|put
argument_list|(
literal|"PERSON_TYPE"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|crRowMap
operator|.
name|put
argument_list|(
literal|"NAME"
argument_list|,
literal|"E2"
argument_list|)
expr_stmt|;
name|crRowMap
operator|.
name|put
argument_list|(
literal|"CLIENT_CONTACT_TYPE"
argument_list|,
literal|"XX"
argument_list|)
expr_stmt|;
name|crRowMap
operator|.
name|put
argument_list|(
literal|"CLIENT_COMPANY_ID"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|employeeRow
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|managerRow
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|crRow
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|MockResultSet
name|rs
init|=
operator|new
name|MockResultSet
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
for|for
control|(
name|SelectColumn
name|column
range|:
name|columns
control|)
block|{
name|rs
operator|.
name|addColumn
argument_list|(
name|column
operator|.
name|getColumnName
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|employeeRow
operator|.
name|add
argument_list|(
name|employeeRowMap
operator|.
name|get
argument_list|(
name|column
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|managerRow
operator|.
name|add
argument_list|(
name|managerRowMap
operator|.
name|get
argument_list|(
name|column
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|crRow
operator|.
name|add
argument_list|(
name|crRowMap
operator|.
name|get
argument_list|(
name|column
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rs
operator|.
name|addRow
argument_list|(
name|employeeRow
argument_list|)
expr_stmt|;
name|rs
operator|.
name|addRow
argument_list|(
name|managerRow
argument_list|)
expr_stmt|;
name|rs
operator|.
name|addRow
argument_list|(
name|crRow
argument_list|)
expr_stmt|;
name|RowReader
argument_list|<
name|Object
argument_list|>
name|reader
init|=
name|select
operator|.
name|getRowReader
argument_list|(
name|rs
argument_list|)
decl_stmt|;
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
name|DataRow
name|employeeRowRead
init|=
operator|(
name|DataRow
operator|)
name|reader
operator|.
name|readRow
argument_list|(
name|rs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Employee"
argument_list|,
name|employeeRowRead
operator|.
name|getEntityName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid row read: "
operator|+
name|employeeRowRead
argument_list|,
name|employeeRowMap
argument_list|,
name|employeeRowRead
argument_list|)
expr_stmt|;
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
name|DataRow
name|managerRowRead
init|=
operator|(
name|DataRow
operator|)
name|reader
operator|.
name|readRow
argument_list|(
name|rs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Manager"
argument_list|,
name|managerRowRead
operator|.
name|getEntityName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid row read: "
operator|+
name|managerRowRead
argument_list|,
name|managerRowMap
argument_list|,
name|managerRowRead
argument_list|)
expr_stmt|;
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
name|DataRow
name|crRowRead
init|=
operator|(
name|DataRow
operator|)
name|reader
operator|.
name|readRow
argument_list|(
name|rs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"CustomerRepresentative"
argument_list|,
name|crRowRead
operator|.
name|getEntityName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid row read: "
operator|+
name|crRowRead
argument_list|,
name|crRowMap
argument_list|,
name|crRowRead
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

