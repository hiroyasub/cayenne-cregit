begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|ReturnTypesMap1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_class
specifier|public
class|class
name|DataContextCharTypeTest
extends|extends
name|CayenneCase
block|{
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|deleteTestData
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testCharTrimming
parameter_list|()
block|{
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|ReturnTypesMap1
name|map1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|map1
operator|.
name|setCharColumn
argument_list|(
literal|"  text   "
argument_list|)
expr_stmt|;
name|ReturnTypesMap1
name|map2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|map2
operator|.
name|setCharColumn
argument_list|(
literal|"  text"
argument_list|)
expr_stmt|;
name|ReturnTypesMap1
name|map3
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|map3
operator|.
name|setCharColumn
argument_list|(
literal|"text     "
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|ReturnTypesMap1
operator|.
name|CHAR_COLUMN_PROPERTY
argument_list|,
literal|"  text"
argument_list|)
decl_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|,
name|qual
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ReturnTypesMap1
argument_list|>
name|result
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"CHAR type trimming is not valid."
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCharColumn
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"  text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"CHAR type trimming is not valid."
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCharColumn
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"  text"
argument_list|)
argument_list|)
expr_stmt|;
name|qual
operator|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|ReturnTypesMap1
operator|.
name|CHAR_COLUMN_PROPERTY
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|SelectQuery
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|,
name|qual
argument_list|)
expr_stmt|;
name|result
operator|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"CHAR type trimming is not valid."
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCharColumn
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

