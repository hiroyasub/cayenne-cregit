begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|jira
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataObjectUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|ExtendedTypeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inherit
operator|.
name|Manager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|PeopleCase
import|;
end_import

begin_comment
comment|/**  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|CAY_207Test
extends|extends
name|PeopleCase
block|{
specifier|protected
name|DataMap
name|testMap
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|deleteTestData
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testCAY_207Super1
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestData
argument_list|(
literal|"testCAY_207"
argument_list|)
expr_stmt|;
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|prepare
argument_list|()
expr_stmt|;
try|try
block|{
comment|// M1
name|Manager
name|o1
init|=
name|DataObjectUtils
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Manager
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|o1
operator|instanceof
name|CAY_207Manager1
argument_list|)
expr_stmt|;
name|Object
name|p1
init|=
name|o1
operator|.
name|readProperty
argument_list|(
literal|"clientContactType"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid property class: "
operator|+
name|p1
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|p1
operator|instanceof
name|CAY_207String1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCAY_207Super2
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestData
argument_list|(
literal|"testCAY_207"
argument_list|)
expr_stmt|;
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|prepare
argument_list|()
expr_stmt|;
try|try
block|{
name|Manager
name|o2
init|=
name|DataObjectUtils
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Manager
operator|.
name|class
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|o2
operator|instanceof
name|CAY_207Manager2
argument_list|)
expr_stmt|;
name|Object
name|p2
init|=
name|o2
operator|.
name|readProperty
argument_list|(
literal|"clientContactType"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid property class: "
operator|+
name|p2
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|p2
operator|instanceof
name|CAY_207String2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCAY_207Subclass1
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestData
argument_list|(
literal|"testCAY_207"
argument_list|)
expr_stmt|;
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|prepare
argument_list|()
expr_stmt|;
try|try
block|{
comment|// M1
name|Manager
name|o1
init|=
name|DataObjectUtils
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|CAY_207Manager1
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|o1
operator|instanceof
name|CAY_207Manager1
argument_list|)
expr_stmt|;
name|Object
name|p1
init|=
name|o1
operator|.
name|readProperty
argument_list|(
literal|"clientContactType"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid property class: "
operator|+
name|p1
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|p1
operator|instanceof
name|CAY_207String1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCAY_207Subclass2
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestData
argument_list|(
literal|"testCAY_207"
argument_list|)
expr_stmt|;
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|prepare
argument_list|()
expr_stmt|;
try|try
block|{
name|Manager
name|o2
init|=
name|DataObjectUtils
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|CAY_207Manager2
operator|.
name|class
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|o2
operator|instanceof
name|CAY_207Manager2
argument_list|)
expr_stmt|;
name|Object
name|p2
init|=
name|o2
operator|.
name|readProperty
argument_list|(
literal|"clientContactType"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid property class: "
operator|+
name|p2
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|p2
operator|instanceof
name|CAY_207String2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCAY_207Save
parameter_list|()
throws|throws
name|Exception
block|{
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|prepare
argument_list|()
expr_stmt|;
try|try
block|{
name|CAY_207Manager2
name|o2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|CAY_207Manager2
operator|.
name|class
argument_list|)
decl_stmt|;
name|o2
operator|.
name|setPersonType
argument_list|(
literal|"M2"
argument_list|)
expr_stmt|;
name|o2
operator|.
name|setName
argument_list|(
literal|"aaaa"
argument_list|)
expr_stmt|;
name|o2
operator|.
name|setClientContactType
argument_list|(
operator|new
name|CAY_207String1
argument_list|(
literal|"T1:AAAAA"
argument_list|)
argument_list|)
expr_stmt|;
comment|// should succeed...
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|int
name|pk
init|=
name|DataObjectUtils
operator|.
name|intPKForObject
argument_list|(
name|o2
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"SELECT #result('CLIENT_CONTACT_TYPE' 'String' 'CLIENT_CONTACT_TYPE') "
operator|+
literal|"FROM PERSON WHERE PERSON_ID = "
operator|+
name|pk
decl_stmt|;
name|SQLTemplate
name|template
init|=
operator|new
name|SQLTemplate
argument_list|(
name|CAY_207Manager2
operator|.
name|class
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|template
operator|.
name|setFetchingDataRows
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
name|rows
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|template
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"T1:AAAAA"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"CLIENT_CONTACT_TYPE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|prepare
parameter_list|()
block|{
name|prepareDataMap
argument_list|()
expr_stmt|;
name|DataDomain
name|domain
init|=
name|getDomain
argument_list|()
decl_stmt|;
name|DataNode
name|node
init|=
name|domain
operator|.
name|lookupDataNode
argument_list|(
name|domain
operator|.
name|getMap
argument_list|(
literal|"people"
argument_list|)
argument_list|)
decl_stmt|;
name|domain
operator|.
name|removeDataNode
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|addDataMap
argument_list|(
name|testMap
argument_list|)
expr_stmt|;
name|domain
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|ExtendedTypeMap
name|map
init|=
name|node
operator|.
name|getAdapter
argument_list|()
operator|.
name|getExtendedTypes
argument_list|()
decl_stmt|;
name|map
operator|.
name|registerType
argument_list|(
operator|new
name|CAY_207StringType1
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|registerType
argument_list|(
operator|new
name|CAY_207StringType2
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|cleanup
parameter_list|(
name|DataContext
name|context
parameter_list|)
block|{
name|DataDomain
name|domain
init|=
name|getDomain
argument_list|()
decl_stmt|;
name|domain
operator|.
name|removeMap
argument_list|(
name|testMap
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|DataNode
name|node
init|=
name|domain
operator|.
name|lookupDataNode
argument_list|(
name|domain
operator|.
name|getMap
argument_list|(
literal|"people"
argument_list|)
argument_list|)
decl_stmt|;
name|ExtendedTypeMap
name|map
init|=
name|node
operator|.
name|getAdapter
argument_list|()
operator|.
name|getExtendedTypes
argument_list|()
decl_stmt|;
name|map
operator|.
name|unregisterType
argument_list|(
name|CAY_207String1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|unregisterType
argument_list|(
name|CAY_207String2
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Overrides super implementation to add a few extra entities to this DataContext      * without affecting others.      */
specifier|protected
name|void
name|prepareDataMap
parameter_list|()
block|{
if|if
condition|(
name|testMap
operator|==
literal|null
condition|)
block|{
name|DataDomain
name|domain
init|=
name|getDomain
argument_list|()
decl_stmt|;
name|ObjEntity
name|manager
init|=
name|domain
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|lookupObjEntity
argument_list|(
name|Manager
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjEntity
name|m1
init|=
operator|new
name|ObjEntity
argument_list|(
literal|"Manager1"
argument_list|)
decl_stmt|;
name|m1
operator|.
name|setSuperEntityName
argument_list|(
name|manager
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|m1
operator|.
name|setDeclaredQualifier
argument_list|(
name|Expression
operator|.
name|fromString
argument_list|(
literal|"personType = \"M1\""
argument_list|)
argument_list|)
expr_stmt|;
name|m1
operator|.
name|setClassName
argument_list|(
name|CAY_207Manager1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ObjAttribute
name|ma1
init|=
operator|new
name|ObjAttribute
argument_list|(
literal|"clientContactType"
argument_list|)
decl_stmt|;
name|ma1
operator|.
name|setDbAttributePath
argument_list|(
literal|"CLIENT_CONTACT_TYPE"
argument_list|)
expr_stmt|;
name|ma1
operator|.
name|setType
argument_list|(
name|CAY_207String1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ma1
operator|.
name|setEntity
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|m1
operator|.
name|addAttribute
argument_list|(
name|ma1
argument_list|)
expr_stmt|;
name|ObjEntity
name|m2
init|=
operator|new
name|ObjEntity
argument_list|(
literal|"Manager2"
argument_list|)
decl_stmt|;
name|m2
operator|.
name|setSuperEntityName
argument_list|(
name|manager
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|m2
operator|.
name|setDeclaredQualifier
argument_list|(
name|Expression
operator|.
name|fromString
argument_list|(
literal|"personType = \"M2\""
argument_list|)
argument_list|)
expr_stmt|;
name|m2
operator|.
name|setClassName
argument_list|(
name|CAY_207Manager2
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ObjAttribute
name|ma2
init|=
operator|new
name|ObjAttribute
argument_list|(
literal|"clientContactType"
argument_list|)
decl_stmt|;
name|ma2
operator|.
name|setDbAttributePath
argument_list|(
literal|"CLIENT_CONTACT_TYPE"
argument_list|)
expr_stmt|;
name|ma2
operator|.
name|setType
argument_list|(
name|CAY_207String2
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ma2
operator|.
name|setEntity
argument_list|(
name|m2
argument_list|)
expr_stmt|;
name|m2
operator|.
name|addAttribute
argument_list|(
name|ma2
argument_list|)
expr_stmt|;
name|testMap
operator|=
operator|new
name|DataMap
argument_list|(
literal|"CAY-207"
argument_list|)
expr_stmt|;
name|testMap
operator|.
name|addObjEntity
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|testMap
operator|.
name|addObjEntity
argument_list|(
name|m2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

