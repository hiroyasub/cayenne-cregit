begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inherit
operator|.
name|AbstractPerson
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inherit
operator|.
name|Employee
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inherit
operator|.
name|Manager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|PeopleCase
import|;
end_import

begin_class
specifier|public
class|class
name|SingleTableInheritanceTest
extends|extends
name|PeopleCase
block|{
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|deleteTestData
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testMatchingOnSuperAttributes
parameter_list|()
block|{
name|QueryChain
name|insert
init|=
operator|new
name|QueryChain
argument_list|()
decl_stmt|;
name|insert
operator|.
name|addQuery
argument_list|(
operator|new
name|SQLTemplate
argument_list|(
name|AbstractPerson
operator|.
name|class
argument_list|,
literal|"INSERT INTO PERSON (PERSON_ID, NAME, PERSON_TYPE) VALUES (1, 'E1', 'EE')"
argument_list|)
argument_list|)
expr_stmt|;
name|insert
operator|.
name|addQuery
argument_list|(
operator|new
name|SQLTemplate
argument_list|(
name|AbstractPerson
operator|.
name|class
argument_list|,
literal|"INSERT INTO PERSON (PERSON_ID, NAME, PERSON_TYPE) VALUES (2, 'E2', 'EM')"
argument_list|)
argument_list|)
expr_stmt|;
name|createDataContext
argument_list|()
operator|.
name|performGenericQuery
argument_list|(
name|insert
argument_list|)
expr_stmt|;
comment|// fetch on leaf, but match on a super attribute
name|SelectQuery
name|select
init|=
operator|new
name|SelectQuery
argument_list|(
name|Manager
operator|.
name|class
argument_list|)
decl_stmt|;
name|select
operator|.
name|andQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|AbstractPerson
operator|.
name|NAME_PROPERTY
argument_list|,
literal|"E2"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Manager
argument_list|>
name|results
init|=
name|createDataContext
argument_list|()
operator|.
name|performQuery
argument_list|(
name|select
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"E2"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMatchingOnSuperAttributesWithPrefetch
parameter_list|()
block|{
name|QueryChain
name|insert
init|=
operator|new
name|QueryChain
argument_list|()
decl_stmt|;
name|insert
operator|.
name|addQuery
argument_list|(
operator|new
name|SQLTemplate
argument_list|(
name|AbstractPerson
operator|.
name|class
argument_list|,
literal|"INSERT INTO PERSON (PERSON_ID, NAME, PERSON_TYPE) VALUES (1, 'E1', 'EE')"
argument_list|)
argument_list|)
expr_stmt|;
name|insert
operator|.
name|addQuery
argument_list|(
operator|new
name|SQLTemplate
argument_list|(
name|AbstractPerson
operator|.
name|class
argument_list|,
literal|"INSERT INTO PERSON (PERSON_ID, NAME, PERSON_TYPE) VALUES (2, 'E2', 'EM')"
argument_list|)
argument_list|)
expr_stmt|;
name|createDataContext
argument_list|()
operator|.
name|performGenericQuery
argument_list|(
name|insert
argument_list|)
expr_stmt|;
comment|// fetch on leaf, but match on a super attribute
name|SelectQuery
name|select
init|=
operator|new
name|SelectQuery
argument_list|(
name|Employee
operator|.
name|class
argument_list|)
decl_stmt|;
name|select
operator|.
name|addPrefetch
argument_list|(
name|Employee
operator|.
name|TO_DEPARTMENT_PROPERTY
argument_list|)
expr_stmt|;
name|select
operator|.
name|andQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|AbstractPerson
operator|.
name|NAME_PROPERTY
argument_list|,
literal|"E2"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Manager
argument_list|>
name|results
init|=
name|createDataContext
argument_list|()
operator|.
name|performQuery
argument_list|(
name|select
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"E2"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPaginatedQueries
parameter_list|()
block|{
name|QueryChain
name|insert
init|=
operator|new
name|QueryChain
argument_list|()
decl_stmt|;
name|insert
operator|.
name|addQuery
argument_list|(
operator|new
name|SQLTemplate
argument_list|(
name|AbstractPerson
operator|.
name|class
argument_list|,
literal|"INSERT INTO PERSON (PERSON_ID, NAME, PERSON_TYPE) VALUES (1, 'E1', 'EE')"
argument_list|)
argument_list|)
expr_stmt|;
name|insert
operator|.
name|addQuery
argument_list|(
operator|new
name|SQLTemplate
argument_list|(
name|AbstractPerson
operator|.
name|class
argument_list|,
literal|"INSERT INTO PERSON (PERSON_ID, NAME, PERSON_TYPE) VALUES (2, 'E2', 'EM')"
argument_list|)
argument_list|)
expr_stmt|;
name|insert
operator|.
name|addQuery
argument_list|(
operator|new
name|SQLTemplate
argument_list|(
name|AbstractPerson
operator|.
name|class
argument_list|,
literal|"INSERT INTO PERSON (PERSON_ID, NAME, PERSON_TYPE) VALUES (3, 'E3', 'EE')"
argument_list|)
argument_list|)
expr_stmt|;
name|insert
operator|.
name|addQuery
argument_list|(
operator|new
name|SQLTemplate
argument_list|(
name|AbstractPerson
operator|.
name|class
argument_list|,
literal|"INSERT INTO PERSON (PERSON_ID, NAME, PERSON_TYPE) VALUES (4, 'E4', 'EM')"
argument_list|)
argument_list|)
expr_stmt|;
name|insert
operator|.
name|addQuery
argument_list|(
operator|new
name|SQLTemplate
argument_list|(
name|AbstractPerson
operator|.
name|class
argument_list|,
literal|"INSERT INTO PERSON (PERSON_ID, NAME, PERSON_TYPE) VALUES (5, 'E5', 'EE')"
argument_list|)
argument_list|)
expr_stmt|;
name|createDataContext
argument_list|()
operator|.
name|performGenericQuery
argument_list|(
name|insert
argument_list|)
expr_stmt|;
name|SelectQuery
name|select
init|=
operator|new
name|SelectQuery
argument_list|(
name|AbstractPerson
operator|.
name|class
argument_list|)
decl_stmt|;
name|select
operator|.
name|addOrdering
argument_list|(
literal|"db:"
operator|+
name|AbstractPerson
operator|.
name|PERSON_ID_PK_COLUMN
argument_list|,
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
name|select
operator|.
name|setPageSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AbstractPerson
argument_list|>
name|results
init|=
name|createDataContext
argument_list|()
operator|.
name|performQuery
argument_list|(
name|select
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Employee
argument_list|)
expr_stmt|;
comment|// this is where things would blow up per CAY-1142
name|assertTrue
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|Manager
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|instanceof
name|Manager
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|instanceof
name|Employee
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

