begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|DataNodeConfigInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|ResourceLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|ZipUtil
import|;
end_import

begin_comment
comment|/**  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|DeploymentConfiguratorTest
extends|extends
name|CayenneCase
block|{
specifier|private
specifier|static
specifier|final
name|File
name|baseDir
init|=
operator|new
name|File
argument_list|(
name|CayenneResources
operator|.
name|getResources
argument_list|()
operator|.
name|getTestDir
argument_list|()
argument_list|,
literal|"cdeploy"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|File
name|src
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"cdeploy-test.jar"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|File
name|altFile
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"alt-cayenne.xml"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|File
name|altNodeFile
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"alt-node1.xml"
argument_list|)
decl_stmt|;
specifier|protected
name|DeploymentConfigurator
name|task
decl_stmt|;
specifier|protected
name|Project
name|project
decl_stmt|;
specifier|protected
name|File
name|dest
decl_stmt|;
static|static
block|{
name|extractFiles
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|extractFiles
parameter_list|()
block|{
name|baseDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|ResourceLocator
name|locator
init|=
operator|new
name|ResourceLocator
argument_list|()
decl_stmt|;
name|locator
operator|.
name|setSkipAbsolutePath
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|locator
operator|.
name|setSkipClasspath
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|locator
operator|.
name|setSkipCurrentDirectory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|locator
operator|.
name|setSkipHomeDirectory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|URL
name|url1
init|=
name|locator
operator|.
name|findResource
argument_list|(
literal|"cdeploy/cdeploy-test.jar"
argument_list|)
decl_stmt|;
name|Util
operator|.
name|copy
argument_list|(
name|url1
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|URL
name|url2
init|=
name|locator
operator|.
name|findResource
argument_list|(
literal|"cdeploy/alt-cayenne.xml"
argument_list|)
decl_stmt|;
name|Util
operator|.
name|copy
argument_list|(
name|url2
argument_list|,
name|altFile
argument_list|)
expr_stmt|;
name|URL
name|url3
init|=
name|locator
operator|.
name|findResource
argument_list|(
literal|"cdeploy/alt-node1.xml"
argument_list|)
decl_stmt|;
name|Util
operator|.
name|copy
argument_list|(
name|url3
argument_list|,
name|altNodeFile
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create test dir
name|File
name|testDir
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|File
name|tmp
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"test"
operator|+
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tmp
operator|.
name|exists
argument_list|()
condition|)
block|{
name|tmp
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|testDir
operator|=
name|tmp
expr_stmt|;
break|break;
block|}
block|}
name|project
operator|=
operator|new
name|Project
argument_list|()
expr_stmt|;
name|project
operator|.
name|setBaseDir
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|dest
operator|=
operator|new
name|File
argument_list|(
name|project
operator|.
name|getBaseDir
argument_list|()
argument_list|,
literal|"test-out.jar"
argument_list|)
expr_stmt|;
name|task
operator|=
operator|new
name|DeploymentConfigurator
argument_list|()
expr_stmt|;
name|task
operator|.
name|setProject
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|task
operator|.
name|setTaskName
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|task
operator|.
name|setLocation
argument_list|(
name|Location
operator|.
name|UNKNOWN_LOCATION
argument_list|)
expr_stmt|;
name|task
operator|.
name|setSrc
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|task
operator|.
name|setDest
argument_list|(
name|dest
argument_list|)
expr_stmt|;
comment|// assert setup success
name|assertTrue
argument_list|(
name|testDir
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dest
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|dest
argument_list|,
name|task
operator|.
name|getInfo
argument_list|()
operator|.
name|getDestJar
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|src
argument_list|,
name|task
operator|.
name|getInfo
argument_list|()
operator|.
name|getSourceJar
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|task
operator|=
literal|null
expr_stmt|;
name|project
operator|=
literal|null
expr_stmt|;
name|dest
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|testPassThrough
parameter_list|()
throws|throws
name|Exception
block|{
comment|// run task
name|task
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// check results
name|assertTrue
argument_list|(
name|dest
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAltFile
parameter_list|()
throws|throws
name|Exception
block|{
name|task
operator|.
name|setAltProjectFile
argument_list|(
name|altFile
argument_list|)
expr_stmt|;
comment|// run task
name|task
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// check results
name|assertTrue
argument_list|(
name|dest
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|ZipUtil
operator|.
name|unzip
argument_list|(
name|dest
argument_list|,
name|project
operator|.
name|getBaseDir
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|newRoot
init|=
operator|new
name|File
argument_list|(
name|project
operator|.
name|getBaseDir
argument_list|()
argument_list|,
name|Configuration
operator|.
name|DEFAULT_DOMAIN_FILE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|newRoot
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|altFile
operator|.
name|length
argument_list|()
argument_list|,
name|newRoot
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAltNode
parameter_list|()
throws|throws
name|Exception
block|{
name|DataNodeConfigInfo
name|node
init|=
operator|new
name|DataNodeConfigInfo
argument_list|()
decl_stmt|;
name|node
operator|.
name|setName
argument_list|(
literal|"node1"
argument_list|)
expr_stmt|;
name|node
operator|.
name|setAdapter
argument_list|(
literal|"non-existent-adapter"
argument_list|)
expr_stmt|;
name|task
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// run task
name|task
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// check results
name|assertTrue
argument_list|(
name|dest
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|ZipUtil
operator|.
name|unzip
argument_list|(
name|dest
argument_list|,
name|project
operator|.
name|getBaseDir
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|newRoot
init|=
operator|new
name|File
argument_list|(
name|project
operator|.
name|getBaseDir
argument_list|()
argument_list|,
name|Configuration
operator|.
name|DEFAULT_DOMAIN_FILE
argument_list|)
decl_stmt|;
name|String
name|fileContents
init|=
name|Util
operator|.
name|stringFromFile
argument_list|(
name|newRoot
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fileContents
operator|.
name|contains
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileContents
operator|.
name|contains
argument_list|(
name|node
operator|.
name|getAdapter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSameJar
parameter_list|()
throws|throws
name|Exception
block|{
name|Util
operator|.
name|copy
argument_list|(
name|src
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|long
name|size
init|=
name|dest
operator|.
name|length
argument_list|()
decl_stmt|;
name|task
operator|.
name|setSrc
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|task
operator|.
name|setAltProjectFile
argument_list|(
name|altFile
argument_list|)
expr_stmt|;
comment|// run task
name|task
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// check results
name|assertFalse
argument_list|(
name|size
operator|==
name|dest
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

