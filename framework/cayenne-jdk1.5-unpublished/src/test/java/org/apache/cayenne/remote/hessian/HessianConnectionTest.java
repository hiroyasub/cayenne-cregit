begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|hessian
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|hessian
operator|.
name|HessianConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|RemoteService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|RemoteSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|ClientMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|service
operator|.
name|MissingSessionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|RemoteException
import|;
end_import

begin_class
specifier|public
class|class
name|HessianConnectionTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testConstructor1Arg
parameter_list|()
block|{
name|HessianConnection
name|c
init|=
operator|new
name|HessianConnection
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|c
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConstructor3Arg
parameter_list|()
block|{
name|HessianConnection
name|c
init|=
operator|new
name|HessianConnection
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|c
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|c
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|c
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|c
operator|.
name|getSharedSessionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMissingSessionException
parameter_list|()
block|{
comment|// Set up the test objects.  We want to mock out RemoteService.
name|HessianConnection
name|c
init|=
operator|new
name|HessianConnection
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|c
operator|.
name|service
operator|=
operator|new
name|RemoteService
argument_list|()
block|{
specifier|public
name|RemoteSession
name|establishSession
parameter_list|()
throws|throws
name|RemoteException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|RemoteSession
name|establishSharedSession
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RemoteException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Object
name|processMessage
parameter_list|(
name|ClientMessage
name|message
parameter_list|)
throws|throws
name|RemoteException
throws|,
name|Throwable
block|{
throw|throw
operator|new
name|MissingSessionException
argument_list|()
throw|;
block|}
block|}
expr_stmt|;
try|try
block|{
name|c
operator|.
name|doSendMessage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|e
parameter_list|)
block|{
comment|// Verify that CayenneRuntimeExceptions are not wrapped in another CayenneRuntimeException.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|MissingSessionException
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

