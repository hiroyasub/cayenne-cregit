begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|EJBQLQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inherit
operator|.
name|CustomerRepresentative
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inherit
operator|.
name|Employee
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inherit
operator|.
name|Manager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|ServerCase
operator|.
name|PEOPLE_PROJECT
argument_list|)
specifier|public
class|class
name|DataContextEJBQLInheritanceTest
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|protected
name|ObjectContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|DBHelper
name|dbHelper
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUpAfterInjection
parameter_list|()
throws|throws
name|Exception
block|{
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"PERSON"
argument_list|)
expr_stmt|;
name|TableHelper
name|person
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"PERSON"
argument_list|)
decl_stmt|;
name|person
operator|.
name|setColumns
argument_list|(
literal|"PERSON_ID"
argument_list|,
literal|"NAME"
argument_list|,
literal|"PERSON_TYPE"
argument_list|,
literal|"SALARY"
argument_list|)
operator|.
name|setColumnTypes
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|Types
operator|.
name|CHAR
argument_list|,
name|Types
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|person
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"a"
argument_list|,
literal|"EE"
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
name|person
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"b"
argument_list|,
literal|"EE"
argument_list|,
literal|25000
argument_list|)
expr_stmt|;
name|person
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|"c"
argument_list|,
literal|"EM"
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|person
operator|.
name|insert
argument_list|(
literal|5
argument_list|,
literal|"d"
argument_list|,
literal|"EM"
argument_list|,
literal|40000
argument_list|)
expr_stmt|;
name|person
operator|.
name|insert
argument_list|(
literal|6
argument_list|,
literal|"e"
argument_list|,
literal|"C"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelect
parameter_list|()
throws|throws
name|Exception
block|{
name|EJBQLQuery
name|superclass
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select p from AbstractPerson p ORDER BY p.name"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|superclassResult
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|superclass
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|superclassResult
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Employee
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|superclassResult
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Employee
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|superclassResult
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Manager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|superclassResult
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Manager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|superclassResult
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CustomerRepresentative
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|superclassResult
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|EJBQLQuery
name|subclass
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select e from Employee e ORDER BY e.name"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|subclassResult
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|subclass
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|subclassResult
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Employee
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|subclassResult
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Employee
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|subclassResult
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Manager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|subclassResult
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Manager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|subclassResult
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

