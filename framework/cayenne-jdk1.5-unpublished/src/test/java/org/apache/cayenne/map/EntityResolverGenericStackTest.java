begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneDataObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|ServerCase
operator|.
name|DEFAULT_PROJECT
argument_list|)
specifier|public
class|class
name|EntityResolverGenericStackTest
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|EntityResolver
name|resolver
decl_stmt|;
specifier|public
name|void
name|testObjEntityLookupDuplicates
parameter_list|()
block|{
name|DataMap
name|generic
init|=
name|resolver
operator|.
name|getDataMap
argument_list|(
literal|"generic"
argument_list|)
decl_stmt|;
name|EntityResolver
name|resolver
init|=
operator|new
name|EntityResolver
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|generic
argument_list|)
argument_list|)
decl_stmt|;
name|ObjEntity
name|g1
init|=
name|resolver
operator|.
name|getObjEntity
argument_list|(
literal|"Generic1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|g1
argument_list|)
expr_stmt|;
name|ObjEntity
name|g2
init|=
name|resolver
operator|.
name|getObjEntity
argument_list|(
literal|"Generic2"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|g2
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|g1
argument_list|,
name|g2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|resolver
operator|.
name|lookupObjEntity
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|resolver
operator|.
name|lookupObjEntity
argument_list|(
name|CayenneDataObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"two entities mapped to the same class... resolver must have thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_class

end_unit

