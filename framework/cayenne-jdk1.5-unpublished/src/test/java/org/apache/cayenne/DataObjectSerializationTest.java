begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|art
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|ToManyList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|DataObjectSerializationTest
extends|extends
name|CayenneCase
block|{
specifier|public
name|void
name|testSerializeTransient
parameter_list|()
throws|throws
name|Exception
block|{
name|Artist
name|artist
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|artist
operator|.
name|setArtistName
argument_list|(
literal|"artist1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|TRANSIENT
argument_list|,
name|artist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|artist
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|Artist
name|deserialized
init|=
operator|(
name|Artist
operator|)
name|Util
operator|.
name|cloneViaSerialization
argument_list|(
name|artist
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|TRANSIENT
argument_list|,
name|deserialized
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|deserialized
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist1"
argument_list|,
name|deserialized
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSerializeNew
parameter_list|()
throws|throws
name|Exception
block|{
name|DataContext
name|context
init|=
name|super
operator|.
name|createDataContext
argument_list|()
decl_stmt|;
name|Artist
name|artist
init|=
operator|(
name|Artist
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
name|artist
operator|.
name|setArtistName
argument_list|(
literal|"artist1"
argument_list|)
expr_stmt|;
comment|// resolve relationship fault
name|artist
operator|.
name|getPaintingArray
argument_list|()
expr_stmt|;
name|Artist
name|deserialized
init|=
operator|(
name|Artist
operator|)
name|Util
operator|.
name|cloneViaSerialization
argument_list|(
name|artist
argument_list|)
decl_stmt|;
comment|// everything must be deserialized, but DataContext link should stay null
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|NEW
argument_list|,
name|deserialized
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deserialized
operator|.
name|getObjectId
argument_list|()
operator|.
name|isTemporary
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist1"
argument_list|,
name|deserialized
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"CDO serialized by itself shouldn't have a DataContext: "
operator|+
name|deserialized
operator|.
name|getObjectContext
argument_list|()
argument_list|,
name|deserialized
operator|.
name|getObjectContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// test that to-many relationships are initialized
name|List
name|paintings
init|=
name|deserialized
operator|.
name|getPaintingArray
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|paintings
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|paintings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSerializeNewWithFaults
parameter_list|()
throws|throws
name|Exception
block|{
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|Artist
name|artist
init|=
operator|(
name|Artist
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
name|artist
operator|.
name|setArtistName
argument_list|(
literal|"artist1"
argument_list|)
expr_stmt|;
name|Artist
name|deserialized
init|=
operator|(
name|Artist
operator|)
name|Util
operator|.
name|cloneViaSerialization
argument_list|(
name|artist
argument_list|)
decl_stmt|;
comment|// everything must be deserialized, but DataContext link should stay null
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|NEW
argument_list|,
name|deserialized
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deserialized
operator|.
name|getObjectId
argument_list|()
operator|.
name|isTemporary
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist1"
argument_list|,
name|deserialized
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"CDO serialized by itself shouldn't have a DataContext: "
operator|+
name|deserialized
operator|.
name|getObjectContext
argument_list|()
argument_list|,
name|deserialized
operator|.
name|getObjectContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// test that to-many relationships are initialized
name|assertTrue
argument_list|(
name|deserialized
operator|.
name|readPropertyDirectly
argument_list|(
literal|"paintingArray"
argument_list|)
operator|instanceof
name|ToManyList
argument_list|)
expr_stmt|;
name|ToManyList
name|list
init|=
operator|(
name|ToManyList
operator|)
name|artist
operator|.
name|readPropertyDirectly
argument_list|(
literal|"paintingArray"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSerializeCommitted
parameter_list|()
throws|throws
name|Exception
block|{
name|DataContext
name|context
init|=
name|super
operator|.
name|createDataContext
argument_list|()
decl_stmt|;
name|Artist
name|artist
init|=
operator|(
name|Artist
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
name|artist
operator|.
name|setArtistName
argument_list|(
literal|"artist1"
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|artist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectId
name|id
init|=
name|artist
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|Artist
name|deserialized
init|=
operator|(
name|Artist
operator|)
name|Util
operator|.
name|cloneViaSerialization
argument_list|(
name|artist
argument_list|)
decl_stmt|;
comment|// everything must be deserialized, but DataContext link should stay null,
comment|// and properties shouldn't be populated
comment|// deserizalized committed object is HOLLOW
name|assertEquals
argument_list|(
literal|"Unexpected persistence state: "
operator|+
name|PersistenceState
operator|.
name|persistenceStateName
argument_list|(
name|deserialized
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
argument_list|,
name|PersistenceState
operator|.
name|HOLLOW
argument_list|,
name|deserialized
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|deserialized
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
comment|// properties of committed objects are not set...when DataContext is
comment|// attached to an object, object can populate itself from snapshot
name|assertNull
argument_list|(
name|deserialized
operator|.
name|getObjectContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|deserialized
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

