begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|horizontalinherit
operator|.
name|SubEntity2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|InheritanceCase
import|;
end_import

begin_class
specifier|public
class|class
name|PersistentDescriptorVisitTest
extends|extends
name|InheritanceCase
block|{
specifier|public
name|void
name|testVisitDeclaredProperties
parameter_list|()
block|{
specifier|final
name|ClassDescriptor
name|subentity1
init|=
name|getDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getClassDescriptor
argument_list|(
literal|"SubEntity1"
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|attributeCount
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
name|subentity1
operator|.
name|visitDeclaredProperties
argument_list|(
operator|new
name|PropertyVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|visitAttribute
parameter_list|(
name|AttributeProperty
name|property
parameter_list|)
block|{
name|attributeCount
index|[
literal|0
index|]
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
name|attributeCount
index|[
literal|0
index|]
operator|<
literal|2
argument_list|)
expr_stmt|;
name|ObjAttribute
name|attribute
init|=
name|property
operator|.
name|getAttribute
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|subentity1
operator|.
name|getEntity
argument_list|()
argument_list|,
name|attribute
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitToMany
parameter_list|(
name|ToManyProperty
name|property
parameter_list|)
block|{
name|fail
argument_list|(
literal|"No relationships expected"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitToOne
parameter_list|(
name|ToOneProperty
name|property
parameter_list|)
block|{
name|fail
argument_list|(
literal|"No relationships expected"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|attributeCount
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testVisitProperties
parameter_list|()
block|{
specifier|final
name|ClassDescriptor
name|subentity2
init|=
name|getDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getClassDescriptor
argument_list|(
literal|"SubEntity2"
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|attributeCount
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
name|subentity2
operator|.
name|visitProperties
argument_list|(
operator|new
name|PropertyVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|visitAttribute
parameter_list|(
name|AttributeProperty
name|property
parameter_list|)
block|{
name|attributeCount
index|[
literal|0
index|]
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
name|attributeCount
index|[
literal|0
index|]
operator|<
literal|4
argument_list|)
expr_stmt|;
name|ObjAttribute
name|attribute
init|=
name|property
operator|.
name|getAttribute
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|subentity2
operator|.
name|getEntity
argument_list|()
argument_list|,
name|attribute
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|attribute
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|SubEntity2
operator|.
name|SUB_ENTITY_INT_ATTR_PROPERTY
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"SUBENTITY_INT_DB_ATTR"
argument_list|,
name|attribute
operator|.
name|getDbAttributePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|attribute
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|SubEntity2
operator|.
name|SUPER_INT_ATTR_PROPERTY
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"SUPER_INT_DB_ATTR"
argument_list|,
name|attribute
operator|.
name|getDbAttributePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|attribute
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|SubEntity2
operator|.
name|SUPER_STRING_ATTR_PROPERTY
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"OVERRIDDEN_STRING_DB_ATTR"
argument_list|,
name|attribute
operator|.
name|getDbAttributePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Unexpected attribute: "
operator|+
name|attribute
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitToMany
parameter_list|(
name|ToManyProperty
name|property
parameter_list|)
block|{
name|fail
argument_list|(
literal|"No relationships expected"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitToOne
parameter_list|(
name|ToOneProperty
name|property
parameter_list|)
block|{
name|fail
argument_list|(
literal|"No relationships expected"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|attributeCount
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

