begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|BasicCase
import|;
end_import

begin_comment
comment|/**  * ClassGenerationInfo tests that are not template-specific.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|ClassGeneratorTest
extends|extends
name|BasicCase
block|{
specifier|protected
name|ClassGenerationInfo
name|cgen
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|cgen
operator|=
operator|new
name|ClassGenerationInfo
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|cgen
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|testFormatVariableName
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|cgen
operator|.
name|formatVariableName
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_abstract"
argument_list|,
name|cgen
operator|.
name|formatVariableName
argument_list|(
literal|"abstract"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_finally"
argument_list|,
name|cgen
operator|.
name|formatVariableName
argument_list|(
literal|"finally"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testClassName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|className
init|=
literal|"aaa"
decl_stmt|;
name|cgen
operator|.
name|setClassName
argument_list|(
name|className
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|className
argument_list|,
name|cgen
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSuperPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|prefix
init|=
literal|"pr_"
decl_stmt|;
name|cgen
operator|.
name|setSuperPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|prefix
argument_list|,
name|cgen
operator|.
name|getSuperPrefix
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPackageName
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|cgen
operator|.
name|isUsingPackage
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|pkgName
init|=
literal|"aaa.org"
decl_stmt|;
name|cgen
operator|.
name|setPackageName
argument_list|(
name|pkgName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pkgName
argument_list|,
name|cgen
operator|.
name|getPackageName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cgen
operator|.
name|isUsingPackage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSuperClassName
parameter_list|()
throws|throws
name|Exception
block|{
name|cgen
operator|.
name|setSuperClassName
argument_list|(
literal|"super!!!"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"super!!!"
argument_list|,
name|cgen
operator|.
name|getSuperClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testContainingListProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|cgen
operator|.
name|entity
operator|=
operator|new
name|ObjEntity
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cgen
operator|.
name|isContainingListProperties
argument_list|()
argument_list|)
expr_stmt|;
name|ObjRelationship
name|toOne
init|=
operator|new
name|ObjRelationship
argument_list|(
literal|"toone"
argument_list|)
decl_stmt|;
name|cgen
operator|.
name|entity
operator|.
name|addRelationship
argument_list|(
name|toOne
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|toOne
operator|.
name|isToMany
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cgen
operator|.
name|isContainingListProperties
argument_list|()
argument_list|)
expr_stmt|;
name|ObjRelationship
name|toMany
init|=
operator|new
name|ObjRelationship
argument_list|(
literal|"tomany"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isToMany
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|cgen
operator|.
name|entity
operator|.
name|addRelationship
argument_list|(
name|toMany
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|toMany
operator|.
name|isToMany
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cgen
operator|.
name|isContainingListProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

