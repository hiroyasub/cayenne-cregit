begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|ConfigStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|DriverDataSourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|RuntimeLoadDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|RuntimeSaveDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|db2
operator|.
name|DB2Adapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|mysql
operator|.
name|MySQLAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_class
specifier|public
class|class
name|ApplicationProjectUpgradeTest
extends|extends
name|CayenneCase
block|{
specifier|public
name|void
name|testUpgradeFrom1_1
parameter_list|()
throws|throws
name|Exception
block|{
comment|// copy files first as upgrade is done in-place
name|File
name|upgradeScratchDir
init|=
operator|new
name|File
argument_list|(
name|getTestDir
argument_list|()
argument_list|,
literal|"upgrade/1.1"
argument_list|)
decl_stmt|;
name|upgradeScratchDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|URL
name|upgradeSrcUrl
init|=
name|CayenneResources
operator|.
name|getResourceURL
argument_list|(
literal|"upgrade/1.1"
argument_list|)
decl_stmt|;
name|File
name|upgradeSrcDir
init|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|upgradeSrcUrl
operator|.
name|toExternalForm
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|File
index|[]
name|files
init|=
name|upgradeSrcDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|Util
operator|.
name|copy
argument_list|(
name|file
argument_list|,
operator|new
name|File
argument_list|(
name|upgradeScratchDir
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|File
name|cayenneXml
init|=
operator|new
name|File
argument_list|(
name|upgradeScratchDir
argument_list|,
literal|"cayenne.xml"
argument_list|)
decl_stmt|;
name|ApplicationProject
name|p
init|=
operator|new
name|ApplicationProject
argument_list|(
name|cayenneXml
argument_list|,
name|buildProjectConfiguration
argument_list|(
name|cayenneXml
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationUpgradeHandler
name|handler
init|=
name|ApplicationUpgradeHandler
operator|.
name|sharedHandler
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Project
operator|.
name|UPGRADE_STATUS_OLD
argument_list|,
name|handler
operator|.
name|checkForUpgrades
argument_list|(
name|p
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|performUpgrade
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|ApplicationProject
name|p1
init|=
operator|new
name|ApplicationProject
argument_list|(
name|cayenneXml
argument_list|,
name|buildProjectConfiguration
argument_list|(
name|cayenneXml
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Project
operator|.
name|UPGRADE_STATUS_CURRENT
argument_list|,
name|handler
operator|.
name|checkForUpgrades
argument_list|(
name|p1
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DataDomain
name|dd
init|=
name|p1
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getDomain
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|DataNode
name|dn
init|=
name|dd
operator|.
name|getNode
argument_list|(
literal|"defaultNode"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dn
operator|.
name|getAdapter
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MySQLAdapter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|dn
operator|.
name|getAdapter
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DriverDataSourceFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|dn
operator|.
name|getDataSourceFactory
argument_list|()
argument_list|)
expr_stmt|;
name|DataMap
name|testmap
init|=
name|dd
operator|.
name|getMap
argument_list|(
literal|"testmap"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testmap
argument_list|)
expr_stmt|;
name|SQLTemplate
name|query
init|=
operator|(
name|SQLTemplate
operator|)
name|testmap
operator|.
name|getQuery
argument_list|(
literal|"NonSelectingQuery"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|query
operator|.
name|getCustomTemplate
argument_list|(
name|DB2Adapter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|query
operator|.
name|getCustomTemplate
argument_list|(
literal|"invalid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUpgradeFrom1_2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// copy files first as upgrade is done in-place
name|File
name|upgradeScratchDir
init|=
operator|new
name|File
argument_list|(
name|getTestDir
argument_list|()
argument_list|,
literal|"upgrade/1.2"
argument_list|)
decl_stmt|;
name|upgradeScratchDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|URL
name|upgradeSrcUrl
init|=
name|CayenneResources
operator|.
name|getResourceURL
argument_list|(
literal|"upgrade/1.2"
argument_list|)
decl_stmt|;
name|File
name|upgradeSrcDir
init|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|upgradeSrcUrl
operator|.
name|toExternalForm
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|File
index|[]
name|files
init|=
name|upgradeSrcDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|Util
operator|.
name|copy
argument_list|(
name|file
argument_list|,
operator|new
name|File
argument_list|(
name|upgradeScratchDir
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|File
name|cayenneXml
init|=
operator|new
name|File
argument_list|(
name|upgradeScratchDir
argument_list|,
literal|"cayenne.xml"
argument_list|)
decl_stmt|;
name|ApplicationProject
name|p
init|=
operator|new
name|ApplicationProject
argument_list|(
name|cayenneXml
argument_list|,
name|buildProjectConfiguration
argument_list|(
name|cayenneXml
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationUpgradeHandler
name|handler
init|=
name|ApplicationUpgradeHandler
operator|.
name|sharedHandler
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Project
operator|.
name|UPGRADE_STATUS_OLD
argument_list|,
name|handler
operator|.
name|checkForUpgrades
argument_list|(
name|p
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|performUpgrade
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|ApplicationProject
name|p1
init|=
operator|new
name|ApplicationProject
argument_list|(
name|cayenneXml
argument_list|,
name|buildProjectConfiguration
argument_list|(
name|cayenneXml
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Project
operator|.
name|UPGRADE_STATUS_CURRENT
argument_list|,
name|handler
operator|.
name|checkForUpgrades
argument_list|(
name|p1
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DataDomain
name|dd
init|=
name|p1
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getDomain
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dd
argument_list|)
expr_stmt|;
name|DataNode
name|dn
init|=
name|dd
operator|.
name|getNode
argument_list|(
literal|"defaultNode"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dn
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|dn
operator|.
name|getAdapter
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MySQLAdapter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|dn
operator|.
name|getAdapter
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DriverDataSourceFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|dn
operator|.
name|getDataSourceFactory
argument_list|()
argument_list|)
expr_stmt|;
name|DataMap
name|testmap
init|=
name|dd
operator|.
name|getMap
argument_list|(
literal|"testmap"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testmap
argument_list|)
expr_stmt|;
name|SQLTemplate
name|query
init|=
operator|(
name|SQLTemplate
operator|)
name|testmap
operator|.
name|getQuery
argument_list|(
literal|"NonSelectingQuery"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|query
operator|.
name|getCustomTemplate
argument_list|(
name|DB2Adapter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|query
operator|.
name|getCustomTemplate
argument_list|(
literal|"invalid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// coped from the Modeler ProjectAction.
specifier|protected
name|Configuration
name|buildProjectConfiguration
parameter_list|(
name|File
name|projectFile
parameter_list|)
block|{
name|ProjectConfiguration
name|config
init|=
operator|new
name|ProjectConfiguration
argument_list|(
name|projectFile
argument_list|)
decl_stmt|;
name|config
operator|.
name|setLoaderDelegate
argument_list|(
operator|new
name|RuntimeLoadDelegate
argument_list|(
name|config
argument_list|,
operator|new
name|ConfigStatus
argument_list|()
argument_list|)
block|{
specifier|protected
name|void
name|updateDefaults
parameter_list|(
name|DataDomain
name|domain
parameter_list|)
block|{
comment|// do nothing...
block|}
annotation|@
name|Override
specifier|protected
name|DataNode
name|createDataNode
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
return|return
operator|new
name|DataNode
argument_list|(
name|nodeName
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|DataSource
name|getDataSource
parameter_list|()
block|{
return|return
name|dataSource
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|config
operator|.
name|setSaverDelegate
argument_list|(
operator|new
name|RuntimeSaveDelegate
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
block|}
end_class

end_unit

