begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|ExpressionFactoryExtrasTest
extends|extends
name|TestCase
block|{
specifier|protected
name|TstTraversalHandler
name|handler
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|handler
operator|=
operator|new
name|TstTraversalHandler
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testMatchAllExp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create expressions and check the counts,
comment|// leaf count should be (2N) : 2 leafs for each pair
comment|// node count should be (2N + 1) for nodes with more than 1 pair
comment|// and 2N for a single pair : 2 nodes for each pair + 1 list node
comment|// where N is map size
comment|// check for N in (1..3)
for|for
control|(
name|int
name|n
init|=
literal|1
init|;
name|n
operator|<=
literal|3
condition|;
name|n
operator|++
control|)
block|{
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// populate map
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|n
condition|;
name|i
operator|++
control|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"k"
operator|+
name|i
argument_list|,
literal|"v"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|matchAllExp
argument_list|(
name|map
argument_list|,
name|Expression
operator|.
name|LESS_THAN
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|handler
operator|.
name|traverseExpression
argument_list|(
name|exp
argument_list|)
expr_stmt|;
comment|// assert statistics
name|handler
operator|.
name|assertConsistency
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Failed: "
operator|+
name|exp
argument_list|,
literal|2
operator|*
name|n
argument_list|,
name|handler
operator|.
name|getLeafs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Failed: "
operator|+
name|exp
argument_list|,
name|n
operator|<
literal|2
condition|?
literal|2
operator|*
name|n
else|:
literal|2
operator|*
name|n
operator|+
literal|1
argument_list|,
name|handler
operator|.
name|getNodeCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testJoinExp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create expressions and check the counts,
comment|// leaf count should be (2N) : 2 leafs for each expression
comment|// node count should be N> 1 ? 2 * N + 1 : 2 * N
comment|// where N is map size
comment|// check for N in (1..5)
for|for
control|(
name|int
name|n
init|=
literal|1
init|;
name|n
operator|<=
literal|5
condition|;
name|n
operator|++
control|)
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|// populate map
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|n
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
operator|(
literal|"k"
operator|+
name|i
operator|)
argument_list|,
literal|"v"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|joinExp
argument_list|(
name|Expression
operator|.
name|AND
argument_list|,
name|list
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|handler
operator|.
name|traverseExpression
argument_list|(
name|exp
argument_list|)
expr_stmt|;
comment|// assert statistics
name|handler
operator|.
name|assertConsistency
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Failed: "
operator|+
name|exp
argument_list|,
literal|2
operator|*
name|n
argument_list|,
name|handler
operator|.
name|getLeafs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Failed: "
operator|+
name|exp
argument_list|,
name|n
operator|>
literal|1
condition|?
literal|2
operator|*
name|n
operator|+
literal|1
else|:
literal|2
operator|*
name|n
argument_list|,
name|handler
operator|.
name|getNodeCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

