begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Cayenne
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|frontbase
operator|.
name|FrontBaseAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|openbase
operator|.
name|OpenBaseAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|SQLResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|CapsStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|CompoundFkTestEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|CompoundPkTestEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|util
operator|.
name|SQLTemplateCustomizer
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|ServerCase
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|DataContextSQLTemplateTest
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|protected
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|DBHelper
name|dbHelper
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|SQLTemplateCustomizer
name|sqlTemplateCustomizer
decl_stmt|;
specifier|protected
name|TableHelper
name|tPainting
decl_stmt|;
specifier|protected
name|TableHelper
name|tArtist
decl_stmt|;
specifier|protected
name|TableHelper
name|tCompoundPkTest
decl_stmt|;
specifier|protected
name|TableHelper
name|tCompoundFkTest
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUpAfterInjection
parameter_list|()
throws|throws
name|Exception
block|{
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"PAINTING_INFO"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"PAINTING"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"ARTIST_EXHIBIT"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"ARTIST"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"COMPOUND_FK_TEST"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"COMPOUND_PK_TEST"
argument_list|)
expr_stmt|;
name|tArtist
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"ARTIST"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|setColumns
argument_list|(
literal|"ARTIST_ID"
argument_list|,
literal|"ARTIST_NAME"
argument_list|)
expr_stmt|;
name|tPainting
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"PAINTING"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|setColumns
argument_list|(
literal|"PAINTING_ID"
argument_list|,
literal|"PAINTING_TITLE"
argument_list|,
literal|"ARTIST_ID"
argument_list|,
literal|"ESTIMATED_PRICE"
argument_list|)
expr_stmt|;
name|tCompoundPkTest
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"COMPOUND_PK_TEST"
argument_list|)
expr_stmt|;
name|tCompoundPkTest
operator|.
name|setColumns
argument_list|(
literal|"KEY1"
argument_list|,
literal|"KEY2"
argument_list|)
expr_stmt|;
name|tCompoundFkTest
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"COMPOUND_FK_TEST"
argument_list|)
expr_stmt|;
name|tCompoundFkTest
operator|.
name|setColumns
argument_list|(
literal|"PKEY"
argument_list|,
literal|"F_KEY1"
argument_list|,
literal|"F_KEY2"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createFourArtists
parameter_list|()
throws|throws
name|Exception
block|{
name|tArtist
operator|.
name|insert
argument_list|(
literal|11
argument_list|,
literal|"artist2"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|101
argument_list|,
literal|"artist3"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|201
argument_list|,
literal|"artist4"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|3001
argument_list|,
literal|"artist5"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createFourArtistsAndThreePaintingsDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtists
argument_list|()
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|6
argument_list|,
literal|"p_artist3"
argument_list|,
literal|11
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|7
argument_list|,
literal|"p_artist2"
argument_list|,
literal|101
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|8
argument_list|,
literal|"p_artist4"
argument_list|,
literal|null
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createTwoCompoundPKsAndCompoundFKsDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|tCompoundPkTest
operator|.
name|insert
argument_list|(
literal|"a1"
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
name|tCompoundPkTest
operator|.
name|insert
argument_list|(
literal|"b1"
argument_list|,
literal|"b2"
argument_list|)
expr_stmt|;
name|tCompoundFkTest
operator|.
name|insert
argument_list|(
literal|6
argument_list|,
literal|"a1"
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
name|tCompoundFkTest
operator|.
name|insert
argument_list|(
literal|7
argument_list|,
literal|"b1"
argument_list|,
literal|"b2"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSQLResultSetMappingMixed
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtistsAndThreePaintingsDataSet
argument_list|()
expr_stmt|;
name|String
name|sql
init|=
literal|"SELECT #result('t0.ARTIST_ID' 'long' 'X'), #result('t0.ARTIST_NAME' 'String' 'Y'), #result('t0.DATE_OF_BIRTH' 'Date' 'Z'), #result('count(t1.PAINTING_ID)' 'int' 'C') "
operator|+
literal|"FROM ARTIST t0 LEFT JOIN PAINTING t1 ON (t0.ARTIST_ID = t1.ARTIST_ID) "
operator|+
literal|"GROUP BY t0.ARTIST_ID, t0.ARTIST_NAME, t0.DATE_OF_BIRTH "
operator|+
literal|"ORDER BY t0.ARTIST_ID"
decl_stmt|;
name|DataMap
name|map
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDataMap
argument_list|(
literal|"testmap"
argument_list|)
decl_stmt|;
name|SQLTemplate
name|query
init|=
operator|new
name|SQLTemplate
argument_list|(
name|map
argument_list|,
name|sql
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|query
operator|.
name|setColumnNamesCapitalization
argument_list|(
name|CapsStrategy
operator|.
name|UPPER
argument_list|)
expr_stmt|;
name|EntityResult
name|artistResult
init|=
operator|new
name|EntityResult
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|artistResult
operator|.
name|addDbField
argument_list|(
name|Artist
operator|.
name|ARTIST_ID_PK_COLUMN
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
name|artistResult
operator|.
name|addObjectField
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME_PROPERTY
argument_list|,
literal|"Y"
argument_list|)
expr_stmt|;
name|artistResult
operator|.
name|addObjectField
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH_PROPERTY
argument_list|,
literal|"Z"
argument_list|)
expr_stmt|;
name|SQLResult
name|rsMap
init|=
operator|new
name|SQLResult
argument_list|()
decl_stmt|;
name|rsMap
operator|.
name|addEntityResult
argument_list|(
name|artistResult
argument_list|)
expr_stmt|;
name|rsMap
operator|.
name|addColumnResult
argument_list|(
literal|"C"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResult
argument_list|(
name|rsMap
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|o1
init|=
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected Object[]: "
operator|+
name|o1
argument_list|,
name|o1
operator|instanceof
name|Object
index|[]
argument_list|)
expr_stmt|;
name|Object
index|[]
name|array1
init|=
operator|(
name|Object
index|[]
operator|)
name|o1
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|array1
operator|.
name|length
argument_list|)
expr_stmt|;
name|Object
index|[]
name|array2
init|=
operator|(
name|Object
index|[]
operator|)
name|objects
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|array2
operator|.
name|length
argument_list|)
expr_stmt|;
name|Object
index|[]
name|array3
init|=
operator|(
name|Object
index|[]
operator|)
name|objects
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|array3
operator|.
name|length
argument_list|)
expr_stmt|;
name|Object
index|[]
name|array4
init|=
operator|(
name|Object
index|[]
operator|)
name|objects
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|array3
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|,
name|array1
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|,
name|array2
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|,
name|array3
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|,
name|array4
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected DataObject: "
operator|+
name|array1
index|[
literal|0
index|]
argument_list|,
name|array1
index|[
literal|0
index|]
operator|instanceof
name|Artist
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSQLResultSetMappingScalar
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtists
argument_list|()
expr_stmt|;
name|String
name|sql
init|=
literal|"SELECT count(1) AS X FROM ARTIST"
decl_stmt|;
name|DataMap
name|map
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDataMap
argument_list|(
literal|"testmap"
argument_list|)
decl_stmt|;
name|SQLTemplate
name|query
init|=
operator|new
name|SQLTemplate
argument_list|(
name|map
argument_list|,
name|sql
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|query
operator|.
name|setTemplate
argument_list|(
name|FrontBaseAdapter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"SELECT COUNT(ARTIST_ID) X FROM ARTIST"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setTemplate
argument_list|(
name|OpenBaseAdapter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"SELECT COUNT(ARTIST_ID) X FROM ARTIST"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setColumnNamesCapitalization
argument_list|(
name|CapsStrategy
operator|.
name|UPPER
argument_list|)
expr_stmt|;
name|SQLResult
name|rsMap
init|=
operator|new
name|SQLResult
argument_list|()
decl_stmt|;
name|rsMap
operator|.
name|addColumnResult
argument_list|(
literal|"X"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResult
argument_list|(
name|rsMap
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected Number: "
operator|+
name|o
argument_list|,
name|o
operator|instanceof
name|Number
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|o
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSQLResultSetMappingScalarArray
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtists
argument_list|()
expr_stmt|;
name|String
name|sql
init|=
literal|"SELECT count(1) AS X, 77 AS Y FROM ARTIST"
decl_stmt|;
name|DataMap
name|map
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDataMap
argument_list|(
literal|"testmap"
argument_list|)
decl_stmt|;
name|SQLTemplate
name|query
init|=
operator|new
name|SQLTemplate
argument_list|(
name|map
argument_list|,
name|sql
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|query
operator|.
name|setTemplate
argument_list|(
name|FrontBaseAdapter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"SELECT COUNT(ARTIST_ID) X, 77 Y FROM ARTIST GROUP BY Y"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setTemplate
argument_list|(
name|OpenBaseAdapter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"SELECT COUNT(ARTIST_ID) X, 77 Y FROM ARTIST GROUP BY 77"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setColumnNamesCapitalization
argument_list|(
name|CapsStrategy
operator|.
name|UPPER
argument_list|)
expr_stmt|;
name|SQLResult
name|rsMap
init|=
operator|new
name|SQLResult
argument_list|()
decl_stmt|;
name|rsMap
operator|.
name|addColumnResult
argument_list|(
literal|"X"
argument_list|)
expr_stmt|;
name|rsMap
operator|.
name|addColumnResult
argument_list|(
literal|"Y"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResult
argument_list|(
name|rsMap
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Object
index|[]
argument_list|)
expr_stmt|;
name|Object
index|[]
name|row
init|=
operator|(
name|Object
index|[]
operator|)
name|o
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|row
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|row
index|[
literal|0
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|77
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|row
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testColumnNamesCapitalization
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtistsAndThreePaintingsDataSet
argument_list|()
expr_stmt|;
name|String
name|template
init|=
literal|"SELECT * FROM ARTIST ORDER BY ARTIST_ID"
decl_stmt|;
name|SQLTemplate
name|query
init|=
operator|new
name|SQLTemplate
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|query
operator|.
name|setColumnNamesCapitalization
argument_list|(
name|CapsStrategy
operator|.
name|LOWER
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFetchingDataRows
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DataRow
argument_list|>
name|rows
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|DataRow
name|row1
init|=
name|rows
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|row1
operator|.
name|containsKey
argument_list|(
literal|"ARTIST_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row1
operator|.
name|containsKey
argument_list|(
literal|"artist_id"
argument_list|)
argument_list|)
expr_stmt|;
name|DataRow
name|row2
init|=
name|rows
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|row2
operator|.
name|containsKey
argument_list|(
literal|"ARTIST_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row2
operator|.
name|containsKey
argument_list|(
literal|"artist_id"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setColumnNamesCapitalization
argument_list|(
name|CapsStrategy
operator|.
name|UPPER
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DataRow
argument_list|>
name|rowsUpper
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|DataRow
name|row3
init|=
name|rowsUpper
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|row3
operator|.
name|containsKey
argument_list|(
literal|"artist_id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row3
operator|.
name|containsKey
argument_list|(
literal|"ARTIST_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|DataRow
name|row4
init|=
name|rowsUpper
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|row4
operator|.
name|containsKey
argument_list|(
literal|"artist_id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row4
operator|.
name|containsKey
argument_list|(
literal|"ARTIST_ID"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFetchDataRows
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtists
argument_list|()
expr_stmt|;
name|String
name|template
init|=
literal|"SELECT * FROM ARTIST ORDER BY ARTIST_ID"
decl_stmt|;
name|SQLTemplate
name|query
init|=
operator|new
name|SQLTemplate
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|sqlTemplateCustomizer
operator|.
name|updateSQLTemplate
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFetchingDataRows
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DataRow
argument_list|>
name|rows
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DataRow
name|row2
init|=
name|rows
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|row2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|id
init|=
name|row2
operator|.
name|get
argument_list|(
literal|"ARTIST_ID"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|101
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFetchObjects
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtists
argument_list|()
expr_stmt|;
name|String
name|template
init|=
literal|"SELECT * FROM ARTIST ORDER BY ARTIST_ID"
decl_stmt|;
name|SQLTemplate
name|query
init|=
name|sqlTemplateCustomizer
operator|.
name|createSQLTemplate
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|query
operator|.
name|setFetchingDataRows
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|objects
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|Artist
argument_list|)
expr_stmt|;
name|Artist
name|artist2
init|=
operator|(
name|Artist
operator|)
name|objects
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"artist3"
argument_list|,
name|artist2
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBindObjectEqualShort
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtistsAndThreePaintingsDataSet
argument_list|()
expr_stmt|;
name|Artist
name|a
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|101
argument_list|)
decl_stmt|;
name|String
name|template
init|=
literal|"SELECT * FROM PAINTING "
operator|+
literal|"WHERE #bindObjectEqual($a) ORDER BY PAINTING_ID"
decl_stmt|;
name|SQLTemplate
name|query
init|=
operator|new
name|SQLTemplate
argument_list|(
name|Painting
operator|.
name|class
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|query
operator|.
name|setColumnNamesCapitalization
argument_list|(
name|CapsStrategy
operator|.
name|UPPER
argument_list|)
expr_stmt|;
name|query
operator|.
name|setParameters
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Painting
name|p
init|=
operator|(
name|Painting
operator|)
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|Cayenne
operator|.
name|intPKForObject
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBindObjectNotEqualShort
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtistsAndThreePaintingsDataSet
argument_list|()
expr_stmt|;
name|Artist
name|a
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|101
argument_list|)
decl_stmt|;
name|String
name|template
init|=
literal|"SELECT * FROM PAINTING "
operator|+
literal|"WHERE #bindObjectNotEqual($a) ORDER BY PAINTING_ID"
decl_stmt|;
name|SQLTemplate
name|query
init|=
operator|new
name|SQLTemplate
argument_list|(
name|Painting
operator|.
name|class
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|query
operator|.
name|setColumnNamesCapitalization
argument_list|(
name|CapsStrategy
operator|.
name|UPPER
argument_list|)
expr_stmt|;
name|query
operator|.
name|setParameters
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
comment|// null comparison is unpredictable across DB's ... some would return true on null
comment|//<> value, some - false
name|assertTrue
argument_list|(
name|objects
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|||
name|objects
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Painting
name|p
init|=
operator|(
name|Painting
operator|)
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|Cayenne
operator|.
name|intPKForObject
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBindObjectEqualFull
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtistsAndThreePaintingsDataSet
argument_list|()
expr_stmt|;
name|Artist
name|a
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|101
argument_list|)
decl_stmt|;
name|String
name|template
init|=
literal|"SELECT * FROM PAINTING t0"
operator|+
literal|" WHERE #bindObjectEqual($a [ 't0.ARTIST_ID' ] [ 'ARTIST_ID' ] ) ORDER BY PAINTING_ID"
decl_stmt|;
name|SQLTemplate
name|query
init|=
operator|new
name|SQLTemplate
argument_list|(
name|Painting
operator|.
name|class
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|query
operator|.
name|setColumnNamesCapitalization
argument_list|(
name|CapsStrategy
operator|.
name|UPPER
argument_list|)
expr_stmt|;
name|query
operator|.
name|setParameters
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Painting
name|p
init|=
operator|(
name|Painting
operator|)
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|Cayenne
operator|.
name|intPKForObject
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBindObjectEqualFullNonArray
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtistsAndThreePaintingsDataSet
argument_list|()
expr_stmt|;
name|Artist
name|a
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|101
argument_list|)
decl_stmt|;
name|String
name|template
init|=
literal|"SELECT * FROM PAINTING t0"
operator|+
literal|" WHERE #bindObjectEqual($a 't0.ARTIST_ID' 'ARTIST_ID' ) ORDER BY PAINTING_ID"
decl_stmt|;
name|SQLTemplate
name|query
init|=
operator|new
name|SQLTemplate
argument_list|(
name|Painting
operator|.
name|class
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|query
operator|.
name|setColumnNamesCapitalization
argument_list|(
name|CapsStrategy
operator|.
name|UPPER
argument_list|)
expr_stmt|;
name|query
operator|.
name|setParameters
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Painting
name|p
init|=
operator|(
name|Painting
operator|)
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|Cayenne
operator|.
name|intPKForObject
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBindObjectEqualNull
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtistsAndThreePaintingsDataSet
argument_list|()
expr_stmt|;
name|String
name|template
init|=
literal|"SELECT * FROM PAINTING t0"
operator|+
literal|" WHERE #bindObjectEqual($a [ 't0.ARTIST_ID' ] [ 'ARTIST_ID' ] ) ORDER BY PAINTING_ID"
decl_stmt|;
name|SQLTemplate
name|query
init|=
operator|new
name|SQLTemplate
argument_list|(
name|Painting
operator|.
name|class
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|query
operator|.
name|setColumnNamesCapitalization
argument_list|(
name|CapsStrategy
operator|.
name|UPPER
argument_list|)
expr_stmt|;
name|query
operator|.
name|setParameters
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Painting
name|p
init|=
operator|(
name|Painting
operator|)
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|Cayenne
operator|.
name|intPKForObject
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBindObjectNotEqualFull
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtistsAndThreePaintingsDataSet
argument_list|()
expr_stmt|;
name|Artist
name|a
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|101
argument_list|)
decl_stmt|;
name|String
name|template
init|=
literal|"SELECT * FROM PAINTING t0"
operator|+
literal|" WHERE #bindObjectNotEqual($a [ 't0.ARTIST_ID' ] [ 'ARTIST_ID' ] ) ORDER BY PAINTING_ID"
decl_stmt|;
name|SQLTemplate
name|query
init|=
operator|new
name|SQLTemplate
argument_list|(
name|Painting
operator|.
name|class
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|query
operator|.
name|setColumnNamesCapitalization
argument_list|(
name|CapsStrategy
operator|.
name|UPPER
argument_list|)
expr_stmt|;
name|query
operator|.
name|setParameters
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
comment|// null comparison is unpredictable across DB's ... some would return true on null
comment|//<> value, some - false
name|assertTrue
argument_list|(
name|objects
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|||
name|objects
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Painting
name|p
init|=
operator|(
name|Painting
operator|)
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|Cayenne
operator|.
name|intPKForObject
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBindObjectEqualCompound
parameter_list|()
throws|throws
name|Exception
block|{
name|createTwoCompoundPKsAndCompoundFKsDataSet
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pk
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|pk
operator|.
name|put
argument_list|(
name|CompoundPkTestEntity
operator|.
name|KEY1_PK_COLUMN
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|pk
operator|.
name|put
argument_list|(
name|CompoundPkTestEntity
operator|.
name|KEY2_PK_COLUMN
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
name|CompoundPkTestEntity
name|a
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|CompoundPkTestEntity
operator|.
name|class
argument_list|,
name|pk
argument_list|)
decl_stmt|;
name|String
name|template
init|=
literal|"SELECT * FROM COMPOUND_FK_TEST t0"
operator|+
literal|" WHERE #bindObjectEqual($a [ 't0.F_KEY1', 't0.F_KEY2' ] [ 'KEY1', 'KEY2' ] ) ORDER BY PKEY"
decl_stmt|;
name|SQLTemplate
name|query
init|=
operator|new
name|SQLTemplate
argument_list|(
name|CompoundFkTestEntity
operator|.
name|class
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|query
operator|.
name|setColumnNamesCapitalization
argument_list|(
name|CapsStrategy
operator|.
name|UPPER
argument_list|)
expr_stmt|;
name|query
operator|.
name|setParameters
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CompoundFkTestEntity
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CompoundFkTestEntity
name|p
init|=
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|Cayenne
operator|.
name|intPKForObject
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBindObjectNotEqualCompound
parameter_list|()
throws|throws
name|Exception
block|{
name|createTwoCompoundPKsAndCompoundFKsDataSet
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pk
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|pk
operator|.
name|put
argument_list|(
name|CompoundPkTestEntity
operator|.
name|KEY1_PK_COLUMN
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|pk
operator|.
name|put
argument_list|(
name|CompoundPkTestEntity
operator|.
name|KEY2_PK_COLUMN
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
name|CompoundPkTestEntity
name|a
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|CompoundPkTestEntity
operator|.
name|class
argument_list|,
name|pk
argument_list|)
decl_stmt|;
name|String
name|template
init|=
literal|"SELECT * FROM COMPOUND_FK_TEST t0"
operator|+
literal|" WHERE #bindObjectNotEqual($a [ 't0.F_KEY1', 't0.F_KEY2' ] [ 'KEY1', 'KEY2' ] ) ORDER BY PKEY"
decl_stmt|;
name|SQLTemplate
name|query
init|=
operator|new
name|SQLTemplate
argument_list|(
name|CompoundFkTestEntity
operator|.
name|class
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|query
operator|.
name|setColumnNamesCapitalization
argument_list|(
name|CapsStrategy
operator|.
name|UPPER
argument_list|)
expr_stmt|;
name|query
operator|.
name|setParameters
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CompoundFkTestEntity
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CompoundFkTestEntity
name|p
init|=
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|Cayenne
operator|.
name|intPKForObject
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBindObjectNotEqualNull
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtistsAndThreePaintingsDataSet
argument_list|()
expr_stmt|;
name|String
name|template
init|=
literal|"SELECT * FROM PAINTING t0"
operator|+
literal|" WHERE #bindObjectNotEqual($a [ 't0.ARTIST_ID' ] [ 'ARTIST_ID' ] ) ORDER BY PAINTING_ID"
decl_stmt|;
name|SQLTemplate
name|query
init|=
operator|new
name|SQLTemplate
argument_list|(
name|Painting
operator|.
name|class
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|query
operator|.
name|setColumnNamesCapitalization
argument_list|(
name|CapsStrategy
operator|.
name|UPPER
argument_list|)
expr_stmt|;
name|query
operator|.
name|setParameters
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Painting
name|p1
init|=
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|Cayenne
operator|.
name|intPKForObject
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|Painting
name|p2
init|=
name|objects
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|Cayenne
operator|.
name|intPKForObject
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBindEqualNull
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtistsAndThreePaintingsDataSet
argument_list|()
expr_stmt|;
name|String
name|template
init|=
literal|"SELECT * FROM PAINTING t0"
operator|+
literal|" WHERE t0.ARTIST_ID #bindEqual($id) ORDER BY PAINTING_ID"
decl_stmt|;
name|SQLTemplate
name|query
init|=
operator|new
name|SQLTemplate
argument_list|(
name|Painting
operator|.
name|class
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|query
operator|.
name|setColumnNamesCapitalization
argument_list|(
name|CapsStrategy
operator|.
name|UPPER
argument_list|)
expr_stmt|;
name|query
operator|.
name|setParameters
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"id"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Painting
name|p
init|=
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|Cayenne
operator|.
name|intPKForObject
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFetchLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtists
argument_list|()
expr_stmt|;
name|int
name|fetchLimit
init|=
literal|2
decl_stmt|;
comment|// sanity check
name|assertTrue
argument_list|(
name|fetchLimit
operator|<
literal|4
argument_list|)
expr_stmt|;
name|String
name|template
init|=
literal|"SELECT * FROM ARTIST ORDER BY ARTIST_ID"
decl_stmt|;
name|SQLTemplate
name|query
init|=
name|sqlTemplateCustomizer
operator|.
name|createSQLTemplate
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|query
operator|.
name|setFetchLimit
argument_list|(
name|fetchLimit
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fetchLimit
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Artist
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFetchOffset
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtists
argument_list|()
expr_stmt|;
name|int
name|fetchOffset
init|=
literal|2
decl_stmt|;
comment|// sanity check
name|assertTrue
argument_list|(
name|fetchOffset
operator|<
literal|4
argument_list|)
expr_stmt|;
name|String
name|template
init|=
literal|"SELECT * FROM ARTIST ORDER BY ARTIST_ID"
decl_stmt|;
name|SQLTemplate
name|query
init|=
name|sqlTemplateCustomizer
operator|.
name|createSQLTemplate
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|query
operator|.
name|setFetchOffset
argument_list|(
name|fetchOffset
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|-
name|fetchOffset
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Artist
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFetchOffsetFetchLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtists
argument_list|()
expr_stmt|;
name|String
name|template
init|=
literal|"SELECT * FROM ARTIST ORDER BY ARTIST_ID"
decl_stmt|;
name|SQLTemplate
name|query
init|=
name|sqlTemplateCustomizer
operator|.
name|createSQLTemplate
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|query
operator|.
name|setFetchOffset
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFetchLimit
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Artist
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPageSize
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtists
argument_list|()
expr_stmt|;
name|int
name|pageSize
init|=
literal|3
decl_stmt|;
comment|// sanity check
name|assertTrue
argument_list|(
name|pageSize
operator|<
literal|4
argument_list|)
expr_stmt|;
name|String
name|template
init|=
literal|"SELECT * FROM ARTIST ORDER BY ARTIST_ID"
decl_stmt|;
name|SQLTemplate
name|query
init|=
name|sqlTemplateCustomizer
operator|.
name|createSQLTemplate
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|query
operator|.
name|setPageSize
argument_list|(
name|pageSize
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Artist
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|objects
operator|instanceof
name|IncrementalFaultList
argument_list|<
name|?
argument_list|>
argument_list|)
expr_stmt|;
name|IncrementalFaultList
argument_list|<
name|?
argument_list|>
name|pagedList
init|=
operator|(
name|IncrementalFaultList
argument_list|<
name|?
argument_list|>
operator|)
name|objects
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|-
name|pageSize
argument_list|,
name|pagedList
operator|.
name|getUnfetchedObjects
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if we can resolve subsequent pages
name|Artist
name|artist
init|=
operator|(
name|Artist
operator|)
name|objects
operator|.
name|get
argument_list|(
name|pageSize
argument_list|)
decl_stmt|;
name|int
name|expectUnresolved
init|=
literal|4
operator|-
name|pageSize
operator|-
name|pageSize
decl_stmt|;
if|if
condition|(
name|expectUnresolved
operator|<
literal|0
condition|)
block|{
name|expectUnresolved
operator|=
literal|0
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectUnresolved
argument_list|,
name|pagedList
operator|.
name|getUnfetchedObjects
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist"
operator|+
operator|(
name|pageSize
operator|+
literal|2
operator|)
argument_list|,
name|artist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIteratedQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtists
argument_list|()
expr_stmt|;
name|String
name|template
init|=
literal|"SELECT * FROM ARTIST ORDER BY ARTIST_ID"
decl_stmt|;
name|SQLTemplate
name|query
init|=
name|sqlTemplateCustomizer
operator|.
name|createSQLTemplate
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|ResultIterator
name|it
init|=
name|context
operator|.
name|performIteratedQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNextRow
argument_list|()
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|DataRow
name|row
init|=
operator|(
name|DataRow
operator|)
name|it
operator|.
name|nextRow
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|row
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist"
operator|+
operator|(
literal|1
operator|+
name|i
operator|)
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|"ARTIST_NAME"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|it
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testQueryWithLineBreakAfterMacro
parameter_list|()
throws|throws
name|Exception
block|{
name|createFourArtists
argument_list|()
expr_stmt|;
comment|// see CAY-726 for details
name|String
name|template
init|=
literal|"SELECT #result('count(*)' 'int' 'X')"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
operator|+
literal|"FROM ARTIST"
decl_stmt|;
name|SQLTemplate
name|query
init|=
name|sqlTemplateCustomizer
operator|.
name|createSQLTemplate
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|query
operator|.
name|setFetchingDataRows
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|result
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
operator|(
name|DataRow
operator|)
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

