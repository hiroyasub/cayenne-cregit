begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|ProjectFileTest
extends|extends
name|CayenneCase
block|{
specifier|protected
name|ProjectFile
name|pf
decl_stmt|;
comment|/**     * @see junit.framework.TestCase#setUp()     */
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|pf
operator|=
operator|new
name|TestProjectFile
argument_list|(
literal|"name.ext"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSynchronizeLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"name.ext"
argument_list|,
name|pf
operator|.
name|location
argument_list|)
expr_stmt|;
name|pf
operator|.
name|synchronizeLocation
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|TestProjectFile
operator|.
name|OBJ_NAME
argument_list|,
name|pf
operator|.
name|location
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRenamed
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|pf
operator|.
name|isRenamed
argument_list|()
argument_list|)
expr_stmt|;
name|pf
operator|.
name|synchronizeLocation
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|pf
operator|.
name|isRenamed
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|TestProjectFile
operator|.
name|OBJ_NAME
argument_list|,
name|pf
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testOldLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"name.ext"
argument_list|,
name|pf
operator|.
name|getOldLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// inner class to allow testing of the abstract ProjectFile
class|class
name|TestProjectFile
extends|extends
name|ProjectFile
block|{
specifier|public
specifier|static
specifier|final
name|String
name|OBJ_NAME
init|=
literal|"obj"
decl_stmt|;
comment|/**          * Constructor for TestProjectFile.          * @param name          * @param extension          */
specifier|public
name|TestProjectFile
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
comment|/**          * @see org.apache.cayenne.project.ProjectFile#getObject()          */
annotation|@
name|Override
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**          * @see org.apache.cayenne.project.ProjectFile#getObjectName()          */
annotation|@
name|Override
specifier|public
name|String
name|getObjectName
parameter_list|()
block|{
return|return
name|OBJ_NAME
return|;
block|}
comment|/**          * @see org.apache.cayenne.project.ProjectFile#saveToFile(File)          */
annotation|@
name|Override
specifier|public
name|void
name|save
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|Exception
block|{
block|}
comment|/**          * @see org.apache.cayenne.project.ProjectFile#createFileWrapper(Object)          */
specifier|public
name|ProjectFile
name|createProjectFile
parameter_list|(
name|Project
name|project
parameter_list|,
name|Object
name|obj
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/**          * @see org.apache.cayenne.project.ProjectFile#isObjectSupported(Object)          */
annotation|@
name|Override
specifier|public
name|boolean
name|canHandle
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

