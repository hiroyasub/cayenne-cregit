begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|art
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|art
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistenceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_class
specifier|public
class|class
name|ToManyListTest
extends|extends
name|CayenneCase
block|{
specifier|protected
name|DataContext
name|context
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|context
operator|=
name|createDataContext
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ToManyList
name|createForNewArtist
parameter_list|()
block|{
name|Artist
name|artist
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|ToManyList
argument_list|(
name|artist
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY_PROPERTY
argument_list|)
return|;
block|}
specifier|private
name|ToManyList
name|createForExistingArtist
parameter_list|()
block|{
name|Artist
name|artist
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|artist
operator|.
name|setArtistName
argument_list|(
literal|"aa"
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
return|return
operator|new
name|ToManyList
argument_list|(
name|artist
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY_PROPERTY
argument_list|)
return|;
block|}
specifier|public
name|void
name|testNewAddRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|ToManyList
name|list
init|=
name|createForNewArtist
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Expected resolved list when created with a new object"
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Painting
name|p1
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Painting
name|p2
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|remove
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSavedUnresolvedAddRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|ToManyList
name|list
init|=
name|createForExistingArtist
argument_list|()
decl_stmt|;
comment|// immediately tag Artist as MODIFIED, since we are messing up with relationship
comment|// bypassing normal CayenneDataObject methods
operator|(
operator|(
name|Artist
operator|)
name|list
operator|.
name|getRelationshipOwner
argument_list|()
operator|)
operator|.
name|setPersistenceState
argument_list|(
name|PersistenceState
operator|.
name|MODIFIED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List must be unresolved for an existing object"
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|Painting
name|p1
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List must be unresolved when adding an object..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|addedToUnresolved
operator|.
name|contains
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|Painting
name|p2
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List must be unresolved when adding an object..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|addedToUnresolved
operator|.
name|contains
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|remove
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List must be unresolved when removing an object..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|list
operator|.
name|addedToUnresolved
operator|.
name|contains
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
comment|// now resolve
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"List must be resolved after checking a size..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|objectList
operator|.
name|contains
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSavedUnresolvedMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|ToManyList
name|list
init|=
name|createForExistingArtist
argument_list|()
decl_stmt|;
name|Painting
name|p1
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|p1
operator|.
name|setPaintingTitle
argument_list|(
literal|"p1"
argument_list|)
expr_stmt|;
comment|// list being tested is a separate copy from
comment|// the relationship list that Artist has, so adding a painting
comment|// here will not add the painting to the array being tested
operator|(
operator|(
name|Artist
operator|)
name|list
operator|.
name|getRelationshipOwner
argument_list|()
operator|)
operator|.
name|addToPaintingArray
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// immediately tag Artist as MODIFIED, since we are messing up with relationship
comment|// bypassing normal CayenneDataObject methods
operator|(
operator|(
name|Artist
operator|)
name|list
operator|.
name|getRelationshipOwner
argument_list|()
operator|)
operator|.
name|setPersistenceState
argument_list|(
name|PersistenceState
operator|.
name|MODIFIED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List must be unresolved..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List must be unresolved when adding an object..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|addedToUnresolved
operator|.
name|contains
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|Painting
name|p2
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List must be unresolved when adding an object..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|addedToUnresolved
operator|.
name|contains
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
comment|// now resolve the list and see how merge worked
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"List must be resolved after checking a size..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|objectList
operator|.
name|contains
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|objectList
operator|.
name|contains
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testThrowOutDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|ToManyList
name|list
init|=
name|createForExistingArtist
argument_list|()
decl_stmt|;
name|Painting
name|p1
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|p1
operator|.
name|setPaintingTitle
argument_list|(
literal|"p1"
argument_list|)
expr_stmt|;
name|Painting
name|p2
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|p2
operator|.
name|setPaintingTitle
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
comment|// list being tested is a separate copy from
comment|// the relationship list that Artist has, so adding a painting
comment|// here will not add the painting to the array being tested
operator|(
operator|(
name|Artist
operator|)
name|list
operator|.
name|getRelationshipOwner
argument_list|()
operator|)
operator|.
name|addToPaintingArray
argument_list|(
name|p1
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Artist
operator|)
name|list
operator|.
name|getRelationshipOwner
argument_list|()
operator|)
operator|.
name|addToPaintingArray
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// immediately tag Artist as MODIFIED, since we are messing up with relationship
comment|// bypassing normal CayenneDataObject methods
operator|(
operator|(
name|Artist
operator|)
name|list
operator|.
name|getRelationshipOwner
argument_list|()
operator|)
operator|.
name|setPersistenceState
argument_list|(
name|PersistenceState
operator|.
name|MODIFIED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List must be unresolved..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List must be unresolved when adding an object..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|addedToUnresolved
operator|.
name|contains
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|addedToUnresolved
operator|.
name|contains
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
comment|// now delete p2 and resolve list
operator|(
operator|(
name|Artist
operator|)
name|list
operator|.
name|getRelationshipOwner
argument_list|()
operator|)
operator|.
name|removeFromPaintingArray
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|context
operator|.
name|deleteObject
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List must be unresolved..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List must be unresolved when an object was deleted externally..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|addedToUnresolved
operator|.
name|contains
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|addedToUnresolved
operator|.
name|contains
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
comment|// now resolve the list and see how merge worked
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"List must be resolved after checking a size..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Deleted object must have been purged..."
argument_list|,
literal|1
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|objectList
operator|.
name|contains
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Deleted object must have been purged..."
argument_list|,
name|list
operator|.
name|objectList
operator|.
name|contains
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRealRelationship
parameter_list|()
throws|throws
name|Exception
block|{
name|Artist
name|artist
init|=
operator|(
name|Artist
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|artist
operator|.
name|setArtistName
argument_list|(
literal|"aaa"
argument_list|)
expr_stmt|;
name|Painting
name|p1
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|p1
operator|.
name|setPaintingTitle
argument_list|(
literal|"p1"
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|context
operator|.
name|invalidateObjects
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artist
argument_list|)
argument_list|)
expr_stmt|;
name|ToManyList
name|list
init|=
operator|(
name|ToManyList
operator|)
name|artist
operator|.
name|getPaintingArray
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"List must be unresolved..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|Painting
name|p2
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|p2
operator|.
name|setPaintingTitle
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
name|artist
operator|.
name|addToPaintingArray
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|artist
operator|.
name|addToPaintingArray
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List must be unresolved..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List must be unresolved..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"List must be resolved..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|contains
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|contains
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRealRelationshipRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|Artist
name|artist
init|=
operator|(
name|Artist
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|artist
operator|.
name|setArtistName
argument_list|(
literal|"aaa"
argument_list|)
expr_stmt|;
name|Painting
name|p1
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|p1
operator|.
name|setPaintingTitle
argument_list|(
literal|"p1"
argument_list|)
expr_stmt|;
name|artist
operator|.
name|addToPaintingArray
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|context
operator|.
name|invalidateObjects
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|artist
argument_list|)
argument_list|)
expr_stmt|;
name|ToManyList
name|list
init|=
operator|(
name|ToManyList
operator|)
name|artist
operator|.
name|getPaintingArray
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"List must be unresolved..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|Painting
name|p2
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|artist
operator|.
name|addToPaintingArray
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List must be unresolved..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|addedToUnresolved
operator|.
name|contains
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|rollbackChanges
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"List must be unresolved..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
comment|// call to "contains" must trigger list resolution
name|assertTrue
argument_list|(
name|list
operator|.
name|contains
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|list
operator|.
name|contains
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"List must be resolved..."
argument_list|,
name|list
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

