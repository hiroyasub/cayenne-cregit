begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|BasicCase
import|;
end_import

begin_class
specifier|public
class|class
name|ClasspathResourceFinderTest
extends|extends
name|BasicCase
block|{
specifier|public
name|void
name|testClassLoader
parameter_list|()
block|{
name|ClasspathResourceFinder
name|finder
init|=
operator|new
name|ClasspathResourceFinder
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|finder
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|ClassLoader
name|cl1
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|finder
operator|.
name|setClassLoader
argument_list|(
name|cl1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|cl1
argument_list|,
name|finder
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetResourceClassLoader
parameter_list|()
block|{
name|ClasspathResourceFinder
name|f1
init|=
operator|new
name|ClasspathResourceFinder
argument_list|()
decl_stmt|;
name|ClassLoader
name|cl1
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|f1
operator|.
name|setClassLoader
argument_list|(
name|cl1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|cl1
argument_list|,
name|f1
operator|.
name|getResourceClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|ClasspathResourceFinder
name|f2
init|=
operator|new
name|ClasspathResourceFinder
argument_list|()
decl_stmt|;
name|ClassLoader
name|cl2
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|ClassLoader
name|old
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|cl2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|cl2
argument_list|,
name|f2
operator|.
name|getResourceClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ClasspathResourceFinder
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|f2
operator|.
name|getResourceClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|old
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testRootPaths
parameter_list|()
block|{
name|ClasspathResourceFinder
name|f1
init|=
operator|new
name|ClasspathResourceFinder
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|f1
operator|.
name|rootPaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f1
operator|.
name|rootPaths
operator|.
name|contains
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|f1
operator|.
name|addRootPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|f1
operator|.
name|rootPaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f1
operator|.
name|rootPaths
operator|.
name|contains
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|f1
operator|.
name|addRootPath
argument_list|(
literal|"/my/package/name/"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|f1
operator|.
name|rootPaths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|""
operator|+
name|f1
operator|.
name|rootPaths
argument_list|,
name|f1
operator|.
name|rootPaths
operator|.
name|contains
argument_list|(
literal|"my/package/name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetResource
parameter_list|()
block|{
name|ClasspathResourceFinder
name|f1
init|=
operator|new
name|ClasspathResourceFinder
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|f1
operator|.
name|getResource
argument_list|(
literal|"org/apache/cayenne/Persistent.class"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|f1
operator|.
name|getResource
argument_list|(
literal|"/apache/cayenne/Persistent.class"
argument_list|)
argument_list|)
expr_stmt|;
name|f1
operator|.
name|addRootPath
argument_list|(
literal|"org"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|f1
operator|.
name|getResource
argument_list|(
literal|"/apache/cayenne/Persistent.class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetResources
parameter_list|()
block|{
name|ClasspathResourceFinder
name|f1
init|=
operator|new
name|ClasspathResourceFinder
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|URL
argument_list|>
name|r1
init|=
name|f1
operator|.
name|getResources
argument_list|(
literal|"org/apache/cayenne/Persistent.class"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|URL
argument_list|>
name|r2
init|=
name|f1
operator|.
name|getResources
argument_list|(
literal|"/apache/cayenne/Persistent.class"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|f1
operator|.
name|addRootPath
argument_list|(
literal|"org"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|URL
argument_list|>
name|r3
init|=
name|f1
operator|.
name|getResources
argument_list|(
literal|"/apache/cayenne/Persistent.class"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|r3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r3
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

