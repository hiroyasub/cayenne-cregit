begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|EJBQLQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inheritance
operator|.
name|vertical
operator|.
name|Iv1Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inheritance
operator|.
name|vertical
operator|.
name|Iv1Sub1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inheritance
operator|.
name|vertical
operator|.
name|Iv2Sub1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inheritance
operator|.
name|vertical
operator|.
name|Iv2Sub2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inheritance
operator|.
name|vertical
operator|.
name|IvRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inheritance
operator|.
name|vertical
operator|.
name|IvSub1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inheritance
operator|.
name|vertical
operator|.
name|IvSub1Sub1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inheritance
operator|.
name|vertical
operator|.
name|IvSub2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|ServerCase
operator|.
name|INHERTITANCE_VERTICAL_PROJECT
argument_list|)
specifier|public
class|class
name|VerticalInheritanceTest
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|protected
name|ObjectContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|DBHelper
name|dbHelper
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUpAfterInjection
parameter_list|()
throws|throws
name|Exception
block|{
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"IV_SUB1_SUB1"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"IV_SUB1"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"IV_SUB2"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"IV_ROOT"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"IV1_SUB1"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"IV1_ROOT"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"IV2_SUB1_TO_IV2_SUB2"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"IV2_SUB2"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"IV2_SUB1"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"IV2_ROOT"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsert_Root
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|ivRootTable
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_ROOT"
argument_list|)
decl_stmt|;
name|ivRootTable
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"NAME"
argument_list|,
literal|"DISCRIMINATOR"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ivRootTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
name|IvRoot
name|root
init|=
name|context
operator|.
name|newObject
argument_list|(
name|IvRoot
operator|.
name|class
argument_list|)
decl_stmt|;
name|root
operator|.
name|setName
argument_list|(
literal|"XyZ"
argument_list|)
expr_stmt|;
name|root
operator|.
name|getObjectContext
argument_list|()
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivRootTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
name|Object
index|[]
name|rootData
init|=
name|ivRootTable
operator|.
name|select
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rootData
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rootData
index|[
literal|0
index|]
operator|instanceof
name|Number
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|rootData
index|[
literal|0
index|]
operator|)
operator|.
name|intValue
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XyZ"
argument_list|,
name|rootData
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rootData
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsert_Sub1
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|ivRootTable
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_ROOT"
argument_list|)
decl_stmt|;
name|ivRootTable
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"NAME"
argument_list|,
literal|"DISCRIMINATOR"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub1Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB1"
argument_list|)
decl_stmt|;
name|ivSub1Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB1_NAME"
argument_list|)
expr_stmt|;
name|IvSub1
name|sub1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|IvSub1
operator|.
name|class
argument_list|)
decl_stmt|;
name|sub1
operator|.
name|setName
argument_list|(
literal|"XyZX"
argument_list|)
expr_stmt|;
name|sub1
operator|.
name|getObjectContext
argument_list|()
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivRootTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivSub1Table
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
name|Object
index|[]
name|data
init|=
name|ivRootTable
operator|.
name|select
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
index|[
literal|0
index|]
operator|instanceof
name|Number
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|data
index|[
literal|0
index|]
operator|)
operator|.
name|intValue
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XyZX"
argument_list|,
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IvSub1"
argument_list|,
name|data
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Object
index|[]
name|subdata
init|=
name|ivSub1Table
operator|.
name|select
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|subdata
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|,
name|subdata
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|subdata
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ivSub1Table
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
name|ivRootTable
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
name|IvSub1
name|sub11
init|=
name|context
operator|.
name|newObject
argument_list|(
name|IvSub1
operator|.
name|class
argument_list|)
decl_stmt|;
name|sub11
operator|.
name|setName
argument_list|(
literal|"XyZXY"
argument_list|)
expr_stmt|;
name|sub11
operator|.
name|setSub1Name
argument_list|(
literal|"BdE2"
argument_list|)
expr_stmt|;
name|sub11
operator|.
name|getObjectContext
argument_list|()
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|data
operator|=
name|ivRootTable
operator|.
name|select
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
index|[
literal|0
index|]
operator|instanceof
name|Number
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|data
index|[
literal|0
index|]
operator|)
operator|.
name|intValue
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XyZXY"
argument_list|,
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IvSub1"
argument_list|,
name|data
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|subdata
operator|=
name|ivSub1Table
operator|.
name|select
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|subdata
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|,
name|subdata
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BdE2"
argument_list|,
name|subdata
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsert_Sub2
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|ivRootTable
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_ROOT"
argument_list|)
decl_stmt|;
name|ivRootTable
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"NAME"
argument_list|,
literal|"DISCRIMINATOR"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub2Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB2"
argument_list|)
decl_stmt|;
name|ivSub2Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB2_NAME"
argument_list|,
literal|"SUB2_ATTR"
argument_list|)
expr_stmt|;
name|IvSub2
name|sub2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|IvSub2
operator|.
name|class
argument_list|)
decl_stmt|;
name|sub2
operator|.
name|setName
argument_list|(
literal|"XyZX"
argument_list|)
expr_stmt|;
name|sub2
operator|.
name|getObjectContext
argument_list|()
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivRootTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivSub2Table
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
name|Object
index|[]
name|data
init|=
name|ivRootTable
operator|.
name|select
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
index|[
literal|0
index|]
operator|instanceof
name|Number
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|data
index|[
literal|0
index|]
operator|)
operator|.
name|intValue
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XyZX"
argument_list|,
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IvSub2"
argument_list|,
name|data
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Object
index|[]
name|subdata
init|=
name|ivSub2Table
operator|.
name|select
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|subdata
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|,
name|subdata
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|subdata
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|subdata
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ivSub2Table
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
name|ivRootTable
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
name|IvSub2
name|sub21
init|=
name|context
operator|.
name|newObject
argument_list|(
name|IvSub2
operator|.
name|class
argument_list|)
decl_stmt|;
name|sub21
operator|.
name|setName
argument_list|(
literal|"XyZXY"
argument_list|)
expr_stmt|;
name|sub21
operator|.
name|setSub2Name
argument_list|(
literal|"BdE2"
argument_list|)
expr_stmt|;
name|sub21
operator|.
name|setSub2Attr
argument_list|(
literal|"aTtR"
argument_list|)
expr_stmt|;
name|sub21
operator|.
name|getObjectContext
argument_list|()
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|data
operator|=
name|ivRootTable
operator|.
name|select
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
index|[
literal|0
index|]
operator|instanceof
name|Number
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|data
index|[
literal|0
index|]
operator|)
operator|.
name|intValue
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XyZXY"
argument_list|,
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IvSub2"
argument_list|,
name|data
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|subdata
operator|=
name|ivSub2Table
operator|.
name|select
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|subdata
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|,
name|subdata
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BdE2"
argument_list|,
name|subdata
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aTtR"
argument_list|,
name|subdata
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|sub21
operator|.
name|setSub2Attr
argument_list|(
literal|"BUuT"
argument_list|)
expr_stmt|;
name|sub21
operator|.
name|getObjectContext
argument_list|()
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|subdata
operator|=
name|ivSub2Table
operator|.
name|select
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|subdata
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|,
name|subdata
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BdE2"
argument_list|,
name|subdata
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BUuT"
argument_list|,
name|subdata
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|sub21
operator|.
name|getObjectContext
argument_list|()
operator|.
name|deleteObject
argument_list|(
name|sub21
argument_list|)
expr_stmt|;
name|sub21
operator|.
name|getObjectContext
argument_list|()
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ivRootTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ivSub2Table
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsert_Sub1Sub1
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|ivRootTable
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_ROOT"
argument_list|)
decl_stmt|;
name|ivRootTable
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"NAME"
argument_list|,
literal|"DISCRIMINATOR"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub1Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB1"
argument_list|)
decl_stmt|;
name|ivSub1Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB1_NAME"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub1Sub1Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB1_SUB1"
argument_list|)
decl_stmt|;
name|ivSub1Sub1Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB1_SUB1_NAME"
argument_list|)
expr_stmt|;
name|IvSub1Sub1
name|sub1Sub1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|IvSub1Sub1
operator|.
name|class
argument_list|)
decl_stmt|;
name|sub1Sub1
operator|.
name|setName
argument_list|(
literal|"XyZN"
argument_list|)
expr_stmt|;
name|sub1Sub1
operator|.
name|setSub1Name
argument_list|(
literal|"mDA"
argument_list|)
expr_stmt|;
name|sub1Sub1
operator|.
name|setSub1Sub1Name
argument_list|(
literal|"3DQa"
argument_list|)
expr_stmt|;
name|sub1Sub1
operator|.
name|getObjectContext
argument_list|()
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivRootTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivSub1Table
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivSub1Sub1Table
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
name|Object
index|[]
name|data
init|=
name|ivRootTable
operator|.
name|select
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
index|[
literal|0
index|]
operator|instanceof
name|Number
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|data
index|[
literal|0
index|]
operator|)
operator|.
name|intValue
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XyZN"
argument_list|,
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IvSub1Sub1"
argument_list|,
name|data
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Object
index|[]
name|subdata
init|=
name|ivSub1Table
operator|.
name|select
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|subdata
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|,
name|subdata
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mDA"
argument_list|,
name|subdata
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Object
index|[]
name|subsubdata
init|=
name|ivSub1Sub1Table
operator|.
name|select
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|subsubdata
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|,
name|subsubdata
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3DQa"
argument_list|,
name|subsubdata
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectQuery_SuperSub
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|ivRootTable
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_ROOT"
argument_list|)
decl_stmt|;
name|ivRootTable
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"NAME"
argument_list|,
literal|"DISCRIMINATOR"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub1Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB1"
argument_list|)
decl_stmt|;
name|ivSub1Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB1_NAME"
argument_list|)
expr_stmt|;
comment|// insert
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"xROOT"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1_ROOT"
argument_list|,
literal|"IvSub1"
argument_list|)
expr_stmt|;
name|ivSub1Table
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1"
argument_list|)
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|IvRoot
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IvRoot
argument_list|>
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// since we don't have ordering, need to analyze results in an order agnostic
comment|// fashion
name|Map
argument_list|<
name|String
argument_list|,
name|IvRoot
argument_list|>
name|resultTypes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|IvRoot
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IvRoot
name|result
range|:
name|results
control|)
block|{
name|resultTypes
operator|.
name|put
argument_list|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|resultTypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|IvRoot
name|root
init|=
name|resultTypes
operator|.
name|get
argument_list|(
name|IvRoot
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xROOT"
argument_list|,
name|root
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|root
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
name|IvSub1
name|sub1
init|=
operator|(
name|IvSub1
operator|)
name|resultTypes
operator|.
name|get
argument_list|(
name|IvSub1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1_ROOT"
argument_list|,
name|sub1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IvSub1"
argument_list|,
name|sub1
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectQuery_DeepAndWide
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|ivRootTable
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_ROOT"
argument_list|)
decl_stmt|;
name|ivRootTable
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"NAME"
argument_list|,
literal|"DISCRIMINATOR"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub1Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB1"
argument_list|)
decl_stmt|;
name|ivSub1Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB1_NAME"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub2Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB2"
argument_list|)
decl_stmt|;
name|ivSub2Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB2_NAME"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub1Sub1Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB1_SUB1"
argument_list|)
decl_stmt|;
name|ivSub1Sub1Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB1_SUB1_NAME"
argument_list|)
expr_stmt|;
comment|// insert
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"xROOT"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1_ROOT"
argument_list|,
literal|"IvSub1"
argument_list|)
expr_stmt|;
name|ivSub1Table
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1"
argument_list|)
expr_stmt|;
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"xSUB1_SUB1_ROOT"
argument_list|,
literal|"IvSub1Sub1"
argument_list|)
expr_stmt|;
name|ivSub1Table
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"xSUB1_SUB1_SUBROOT"
argument_list|)
expr_stmt|;
name|ivSub1Sub1Table
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"xSUB1_SUB1"
argument_list|)
expr_stmt|;
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|"xROOT_SUB2"
argument_list|,
literal|"IvSub2"
argument_list|)
expr_stmt|;
name|ivSub2Table
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|"xSUB2"
argument_list|)
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|IvRoot
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IvRoot
argument_list|>
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// since we don't have ordering, need to analyze results in an order agnostic
comment|// fashion
name|Map
argument_list|<
name|String
argument_list|,
name|IvRoot
argument_list|>
name|resultTypes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|IvRoot
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IvRoot
name|result
range|:
name|results
control|)
block|{
name|resultTypes
operator|.
name|put
argument_list|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|resultTypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|IvRoot
name|root
init|=
name|resultTypes
operator|.
name|get
argument_list|(
name|IvRoot
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xROOT"
argument_list|,
name|root
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|root
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
name|IvSub1
name|sub1
init|=
operator|(
name|IvSub1
operator|)
name|resultTypes
operator|.
name|get
argument_list|(
name|IvSub1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1_ROOT"
argument_list|,
name|sub1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IvSub1"
argument_list|,
name|sub1
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
name|IvSub1Sub1
name|sub1Sub1
init|=
operator|(
name|IvSub1Sub1
operator|)
name|resultTypes
operator|.
name|get
argument_list|(
name|IvSub1Sub1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sub1Sub1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1_SUB1_ROOT"
argument_list|,
name|sub1Sub1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IvSub1Sub1"
argument_list|,
name|sub1Sub1
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1_SUB1_SUBROOT"
argument_list|,
name|sub1Sub1
operator|.
name|getSub1Name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1_SUB1"
argument_list|,
name|sub1Sub1
operator|.
name|getSub1Sub1Name
argument_list|()
argument_list|)
expr_stmt|;
name|IvSub2
name|sub2
init|=
operator|(
name|IvSub2
operator|)
name|resultTypes
operator|.
name|get
argument_list|(
name|IvSub2
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sub2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xROOT_SUB2"
argument_list|,
name|sub2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IvSub2"
argument_list|,
name|sub2
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB2"
argument_list|,
name|sub2
operator|.
name|getSub2Name
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectQuery_MiddleLeaf
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|ivRootTable
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_ROOT"
argument_list|)
decl_stmt|;
name|ivRootTable
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"NAME"
argument_list|,
literal|"DISCRIMINATOR"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub1Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB1"
argument_list|)
decl_stmt|;
name|ivSub1Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB1_NAME"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub2Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB2"
argument_list|)
decl_stmt|;
name|ivSub2Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB2_NAME"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub1Sub1Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB1_SUB1"
argument_list|)
decl_stmt|;
name|ivSub1Sub1Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB1_SUB1_NAME"
argument_list|)
expr_stmt|;
comment|// insert
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"xROOT"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1_ROOT"
argument_list|,
literal|"IvSub1"
argument_list|)
expr_stmt|;
name|ivSub1Table
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1"
argument_list|)
expr_stmt|;
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"xSUB1_SUB1_ROOT"
argument_list|,
literal|"IvSub1Sub1"
argument_list|)
expr_stmt|;
name|ivSub1Table
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"xSUB1_SUB1_SUBROOT"
argument_list|)
expr_stmt|;
name|ivSub1Sub1Table
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"xSUB1_SUB1"
argument_list|)
expr_stmt|;
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|"xROOT_SUB2"
argument_list|,
literal|"IvSub2"
argument_list|)
expr_stmt|;
name|ivSub2Table
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|"xSUB2"
argument_list|)
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|IvSub1
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IvRoot
argument_list|>
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// since we don't have ordering, need to analyze results in an order agnostic
comment|// fashion
name|Map
argument_list|<
name|String
argument_list|,
name|IvRoot
argument_list|>
name|resultTypes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|IvRoot
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IvRoot
name|result
range|:
name|results
control|)
block|{
name|resultTypes
operator|.
name|put
argument_list|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|resultTypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|IvSub1
name|sub1
init|=
operator|(
name|IvSub1
operator|)
name|resultTypes
operator|.
name|get
argument_list|(
name|IvSub1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1_ROOT"
argument_list|,
name|sub1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IvSub1"
argument_list|,
name|sub1
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
name|IvSub1Sub1
name|sub1Sub1
init|=
operator|(
name|IvSub1Sub1
operator|)
name|resultTypes
operator|.
name|get
argument_list|(
name|IvSub1Sub1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sub1Sub1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1_SUB1_ROOT"
argument_list|,
name|sub1Sub1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IvSub1Sub1"
argument_list|,
name|sub1Sub1
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1_SUB1_SUBROOT"
argument_list|,
name|sub1Sub1
operator|.
name|getSub1Name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1_SUB1"
argument_list|,
name|sub1Sub1
operator|.
name|getSub1Sub1Name
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDelete_Mix
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|ivRootTable
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_ROOT"
argument_list|)
decl_stmt|;
name|ivRootTable
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"NAME"
argument_list|,
literal|"DISCRIMINATOR"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub1Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB1"
argument_list|)
decl_stmt|;
name|ivSub1Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB1_NAME"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub2Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB2"
argument_list|)
decl_stmt|;
name|ivSub2Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB2_NAME"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub1Sub1Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB1_SUB1"
argument_list|)
decl_stmt|;
name|ivSub1Sub1Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB1_SUB1_NAME"
argument_list|)
expr_stmt|;
comment|// insert
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"xROOT"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1_ROOT"
argument_list|,
literal|"IvSub1"
argument_list|)
expr_stmt|;
name|ivSub1Table
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1"
argument_list|)
expr_stmt|;
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"xSUB1_SUB1_ROOT"
argument_list|,
literal|"IvSub1Sub1"
argument_list|)
expr_stmt|;
name|ivSub1Table
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"xSUB1_SUB1_SUBROOT"
argument_list|)
expr_stmt|;
name|ivSub1Sub1Table
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"xSUB1_SUB1"
argument_list|)
expr_stmt|;
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|"xROOT_SUB2"
argument_list|,
literal|"IvSub2"
argument_list|)
expr_stmt|;
name|ivSub2Table
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|"xSUB2"
argument_list|)
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|IvRoot
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IvRoot
argument_list|>
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|IvRoot
argument_list|>
name|resultTypes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|IvRoot
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IvRoot
name|result
range|:
name|results
control|)
block|{
name|resultTypes
operator|.
name|put
argument_list|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|resultTypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|IvRoot
name|root
init|=
name|resultTypes
operator|.
name|get
argument_list|(
name|IvRoot
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|deleteObject
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|IvSub1
name|sub1
init|=
operator|(
name|IvSub1
operator|)
name|resultTypes
operator|.
name|get
argument_list|(
name|IvSub1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|deleteObject
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ivRootTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivSub1Table
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivSub1Sub1Table
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ivSub2Table
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectQuery_AttributeOverrides
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|iv1RootTable
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV1_ROOT"
argument_list|)
decl_stmt|;
name|iv1RootTable
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"NAME"
argument_list|,
literal|"DISCRIMINATOR"
argument_list|)
expr_stmt|;
name|TableHelper
name|iv1Sub1Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV1_SUB1"
argument_list|)
decl_stmt|;
name|iv1Sub1Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB1_NAME"
argument_list|)
expr_stmt|;
comment|// insert
name|iv1RootTable
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"xROOT"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|iv1RootTable
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1_ROOT"
argument_list|,
literal|"Iv1Sub1"
argument_list|)
expr_stmt|;
name|iv1Sub1Table
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1"
argument_list|)
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Iv1Root
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Iv1Root
argument_list|>
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// since we don't have ordering, need to analyze results in an order agnostic
comment|// fashion
name|Map
argument_list|<
name|String
argument_list|,
name|Iv1Root
argument_list|>
name|resultTypes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Iv1Root
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iv1Root
name|result
range|:
name|results
control|)
block|{
name|resultTypes
operator|.
name|put
argument_list|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|resultTypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iv1Root
name|root
init|=
name|resultTypes
operator|.
name|get
argument_list|(
name|Iv1Root
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xROOT"
argument_list|,
name|root
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|root
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
name|Iv1Sub1
name|sub1
init|=
operator|(
name|Iv1Sub1
operator|)
name|resultTypes
operator|.
name|get
argument_list|(
name|Iv1Sub1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1"
argument_list|,
name|sub1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEjbqlQuery_AttributeOverrides
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|iv1RootTable
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV1_ROOT"
argument_list|)
decl_stmt|;
name|iv1RootTable
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"NAME"
argument_list|,
literal|"DISCRIMINATOR"
argument_list|)
expr_stmt|;
name|TableHelper
name|iv1Sub1Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV1_SUB1"
argument_list|)
decl_stmt|;
name|iv1Sub1Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB1_NAME"
argument_list|)
expr_stmt|;
comment|// insert
name|iv1RootTable
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"xROOT"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|iv1RootTable
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1_ROOT"
argument_list|,
literal|"Iv1Sub1"
argument_list|)
expr_stmt|;
name|iv1Sub1Table
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1"
argument_list|)
expr_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"SELECT iv1root FROM Iv1Root iv1root"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Iv1Root
argument_list|>
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Iv1Root
argument_list|>
name|resultTypes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Iv1Root
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iv1Root
name|result
range|:
name|results
control|)
block|{
name|resultTypes
operator|.
name|put
argument_list|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|resultTypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iv1Root
name|root
init|=
name|resultTypes
operator|.
name|get
argument_list|(
name|Iv1Root
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xROOT"
argument_list|,
name|root
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|root
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
name|Iv1Sub1
name|sub1
init|=
operator|(
name|Iv1Sub1
operator|)
name|resultTypes
operator|.
name|get
argument_list|(
name|Iv1Sub1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1"
argument_list|,
name|sub1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEjbqlQuery_SuperSub
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|ivRootTable
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_ROOT"
argument_list|)
decl_stmt|;
name|ivRootTable
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"NAME"
argument_list|,
literal|"DISCRIMINATOR"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub1Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB1"
argument_list|)
decl_stmt|;
name|ivSub1Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB1_NAME"
argument_list|)
expr_stmt|;
comment|// insert
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"xROOT"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1_ROOT"
argument_list|,
literal|"IvSub1"
argument_list|)
expr_stmt|;
name|ivSub1Table
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1"
argument_list|)
expr_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"SELECT ivroot FROM IvRoot ivroot"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IvRoot
argument_list|>
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|IvRoot
argument_list|>
name|resultTypes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|IvRoot
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IvRoot
name|result
range|:
name|results
control|)
block|{
name|resultTypes
operator|.
name|put
argument_list|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|resultTypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|IvRoot
name|root
init|=
name|resultTypes
operator|.
name|get
argument_list|(
name|IvRoot
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xROOT"
argument_list|,
name|root
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|root
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
name|IvSub1
name|sub1
init|=
operator|(
name|IvSub1
operator|)
name|resultTypes
operator|.
name|get
argument_list|(
name|IvSub1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1_ROOT"
argument_list|,
name|sub1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IvSub1"
argument_list|,
name|sub1
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEjbqlQuery_MiddleLeaf
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|ivRootTable
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_ROOT"
argument_list|)
decl_stmt|;
name|ivRootTable
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"NAME"
argument_list|,
literal|"DISCRIMINATOR"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub1Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB1"
argument_list|)
decl_stmt|;
name|ivSub1Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB1_NAME"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub2Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB2"
argument_list|)
decl_stmt|;
name|ivSub2Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB2_NAME"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub1Sub1Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB1_SUB1"
argument_list|)
decl_stmt|;
name|ivSub1Sub1Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB1_SUB1_NAME"
argument_list|)
expr_stmt|;
comment|// insert
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"xROOT"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1_ROOT"
argument_list|,
literal|"IvSub1"
argument_list|)
expr_stmt|;
name|ivSub1Table
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1"
argument_list|)
expr_stmt|;
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"xSUB1_SUB1_ROOT"
argument_list|,
literal|"IvSub1Sub1"
argument_list|)
expr_stmt|;
name|ivSub1Table
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"xSUB1_SUB1_SUBROOT"
argument_list|)
expr_stmt|;
name|ivSub1Sub1Table
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"xSUB1_SUB1"
argument_list|)
expr_stmt|;
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|"xROOT_SUB2"
argument_list|,
literal|"IvSub2"
argument_list|)
expr_stmt|;
name|ivSub2Table
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|"xSUB2"
argument_list|)
expr_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"SELECT DISTINCT ivsub1 FROM IvSub1 ivsub1"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IvRoot
argument_list|>
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|IvRoot
argument_list|>
name|resultTypes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|IvRoot
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IvRoot
name|result
range|:
name|results
control|)
block|{
name|resultTypes
operator|.
name|put
argument_list|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|resultTypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|IvSub1
name|sub1
init|=
operator|(
name|IvSub1
operator|)
name|resultTypes
operator|.
name|get
argument_list|(
name|IvSub1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1_ROOT"
argument_list|,
name|sub1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IvSub1"
argument_list|,
name|sub1
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
name|IvSub1Sub1
name|sub1Sub1
init|=
operator|(
name|IvSub1Sub1
operator|)
name|resultTypes
operator|.
name|get
argument_list|(
name|IvSub1Sub1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sub1Sub1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1_SUB1_ROOT"
argument_list|,
name|sub1Sub1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IvSub1Sub1"
argument_list|,
name|sub1Sub1
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1_SUB1_SUBROOT"
argument_list|,
name|sub1Sub1
operator|.
name|getSub1Name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1_SUB1"
argument_list|,
name|sub1Sub1
operator|.
name|getSub1Sub1Name
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEjbqlQuery_DeepAndWide
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|ivRootTable
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_ROOT"
argument_list|)
decl_stmt|;
name|ivRootTable
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"NAME"
argument_list|,
literal|"DISCRIMINATOR"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub1Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB1"
argument_list|)
decl_stmt|;
name|ivSub1Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB1_NAME"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub2Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB2"
argument_list|)
decl_stmt|;
name|ivSub2Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB2_NAME"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub1Sub1Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB1_SUB1"
argument_list|)
decl_stmt|;
name|ivSub1Sub1Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB1_SUB1_NAME"
argument_list|)
expr_stmt|;
comment|// insert
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"xROOT"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1_ROOT"
argument_list|,
literal|"IvSub1"
argument_list|)
expr_stmt|;
name|ivSub1Table
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1"
argument_list|)
expr_stmt|;
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"xSUB1_SUB1_ROOT"
argument_list|,
literal|"IvSub1Sub1"
argument_list|)
expr_stmt|;
name|ivSub1Table
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"xSUB1_SUB1_SUBROOT"
argument_list|)
expr_stmt|;
name|ivSub1Sub1Table
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"xSUB1_SUB1"
argument_list|)
expr_stmt|;
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|"xROOT_SUB2"
argument_list|,
literal|"IvSub2"
argument_list|)
expr_stmt|;
name|ivSub2Table
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|"xSUB2"
argument_list|)
expr_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"SELECT DISTINCT ivroot FROM IvRoot ivroot"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IvRoot
argument_list|>
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|IvRoot
argument_list|>
name|resultTypes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|IvRoot
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IvRoot
name|result
range|:
name|results
control|)
block|{
name|resultTypes
operator|.
name|put
argument_list|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|resultTypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|IvRoot
name|root
init|=
name|resultTypes
operator|.
name|get
argument_list|(
name|IvRoot
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xROOT"
argument_list|,
name|root
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|root
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
name|IvSub1
name|sub1
init|=
operator|(
name|IvSub1
operator|)
name|resultTypes
operator|.
name|get
argument_list|(
name|IvSub1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1_ROOT"
argument_list|,
name|sub1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IvSub1"
argument_list|,
name|sub1
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
name|IvSub1Sub1
name|sub1Sub1
init|=
operator|(
name|IvSub1Sub1
operator|)
name|resultTypes
operator|.
name|get
argument_list|(
name|IvSub1Sub1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sub1Sub1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1_SUB1_ROOT"
argument_list|,
name|sub1Sub1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IvSub1Sub1"
argument_list|,
name|sub1Sub1
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1_SUB1_SUBROOT"
argument_list|,
name|sub1Sub1
operator|.
name|getSub1Name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1_SUB1"
argument_list|,
name|sub1Sub1
operator|.
name|getSub1Sub1Name
argument_list|()
argument_list|)
expr_stmt|;
name|IvSub2
name|sub2
init|=
operator|(
name|IvSub2
operator|)
name|resultTypes
operator|.
name|get
argument_list|(
name|IvSub2
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sub2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xROOT_SUB2"
argument_list|,
name|sub2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IvSub2"
argument_list|,
name|sub2
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB2"
argument_list|,
name|sub2
operator|.
name|getSub2Name
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEjbqlQuery_Flattened
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|ivRootTable
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV2_ROOT"
argument_list|)
decl_stmt|;
name|ivRootTable
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"NAME"
argument_list|,
literal|"DISCRIMINATOR"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub1Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV2_SUB1"
argument_list|)
decl_stmt|;
name|ivSub1Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB1_NAME"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub2Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV2_SUB2"
argument_list|)
decl_stmt|;
name|ivSub2Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB2_NAME"
argument_list|,
literal|"SUB2_ATTR"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub1ToSub2Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV2_SUB1_TO_IV2_SUB2"
argument_list|)
decl_stmt|;
name|ivSub1ToSub2Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB1_ID"
argument_list|,
literal|"SUB2_ID"
argument_list|)
expr_stmt|;
comment|// insert
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"xROOT"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1_ROOT"
argument_list|,
literal|"Iv2Sub1"
argument_list|)
expr_stmt|;
name|ivSub1Table
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1"
argument_list|)
expr_stmt|;
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"xSUB2_ROOT"
argument_list|,
literal|"Iv2Sub2"
argument_list|)
expr_stmt|;
name|ivSub2Table
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"xSUB2"
argument_list|,
literal|"ySUB2"
argument_list|)
expr_stmt|;
name|ivSub1ToSub2Table
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"SELECT DISTINCT s1 FROM Iv2Sub1 s1 JOIN "
operator|+
literal|"s1.iv2sub2s s2 WHERE s2.sub2Attr = 'ySUB2'"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Iv2Sub1
argument_list|>
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iv2Sub1
name|sub1
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1"
argument_list|,
name|sub1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Iv2Sub1"
argument_list|,
name|sub1
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Iv2Sub2
argument_list|>
name|sub2s
init|=
name|sub1
operator|.
name|getIv2sub2s
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|sub2s
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sub2s
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iv2Sub2
name|sub2
init|=
name|sub2s
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sub2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB2"
argument_list|,
name|sub2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Iv2Sub2"
argument_list|,
name|sub2
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ySUB2"
argument_list|,
name|sub2
operator|.
name|getSub2Attr
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"SELECT COUNT(DISTINCT s1) FROM Iv2Sub1 s1 JOIN "
operator|+
literal|"s1.iv2sub2s s2 WHERE s2.sub2Attr = 'ySUB2'"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|countResult
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countResult
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|count
init|=
operator|(
name|Long
operator|)
name|countResult
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"SELECT DISTINCT s1 FROM Iv2Sub1 s1 JOIN "
operator|+
literal|"s1.iv2sub2s s2 WHERE s2 = :sub2"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setParameter
argument_list|(
literal|"sub2"
argument_list|,
name|sub2
argument_list|)
expr_stmt|;
name|results
operator|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sub1
operator|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|sub1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xSUB1"
argument_list|,
name|sub1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Iv2Sub1"
argument_list|,
name|sub1
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

