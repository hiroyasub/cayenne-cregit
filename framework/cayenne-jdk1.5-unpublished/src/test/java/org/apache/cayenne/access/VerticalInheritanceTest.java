begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inheritance
operator|.
name|vertical
operator|.
name|IvRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|AccessStack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneResources
import|;
end_import

begin_class
specifier|public
class|class
name|VerticalInheritanceTest
extends|extends
name|CayenneCase
block|{
annotation|@
name|Override
specifier|protected
name|AccessStack
name|buildAccessStack
parameter_list|()
block|{
return|return
name|CayenneResources
operator|.
name|getResources
argument_list|()
operator|.
name|getAccessStack
argument_list|(
literal|"InheritanceVerticalStack"
argument_list|)
return|;
block|}
specifier|public
name|void
name|testSelectQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|DBHelper
name|dbHelper
init|=
name|getDbHelper
argument_list|()
decl_stmt|;
name|TableHelper
name|ivRootTable
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_ROOT"
argument_list|)
decl_stmt|;
name|ivRootTable
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"NAME"
argument_list|)
expr_stmt|;
name|TableHelper
name|ivSub1Table
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"IV_SUB1"
argument_list|)
decl_stmt|;
name|ivSub1Table
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"SUB1_NAME"
argument_list|)
expr_stmt|;
comment|// delete
name|ivSub1Table
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
name|ivRootTable
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
comment|// insert
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"xROOT"
argument_list|)
expr_stmt|;
name|ivRootTable
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1_ROOT"
argument_list|)
expr_stmt|;
name|ivSub1Table
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"xSUB1"
argument_list|)
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|IvRoot
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// List<IvRoot> results = createDataContext().performQuery(query);
comment|// assertEquals(2, results.size());
block|}
block|}
end_class

end_unit

