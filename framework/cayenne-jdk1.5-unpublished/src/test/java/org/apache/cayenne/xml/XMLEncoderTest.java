begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneResources
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|XMLEncoderTest
extends|extends
name|TestCase
block|{
specifier|static
specifier|final
name|String
name|XML_DATA_DIR
init|=
literal|"xmlcoding/"
decl_stmt|;
specifier|static
specifier|final
name|boolean
name|windows
decl_stmt|;
static|static
block|{
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"WINDOWS"
argument_list|)
condition|)
block|{
name|windows
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|windows
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testObjectWithNullProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLEncoder
name|encoder
init|=
operator|new
name|XMLEncoder
argument_list|()
decl_stmt|;
name|TestObject
name|test
init|=
operator|new
name|TestObject
argument_list|()
decl_stmt|;
name|test
operator|.
name|setName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|test
operator|.
name|encodeAsXML
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEncodeSimpleCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLEncoder
name|encoder
init|=
operator|new
name|XMLEncoder
argument_list|()
decl_stmt|;
name|TestObject
name|test
init|=
operator|new
name|TestObject
argument_list|()
decl_stmt|;
name|test
operator|.
name|addChild
argument_list|(
operator|new
name|TestObject
argument_list|(
literal|"Bill"
argument_list|,
literal|98
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
operator|new
name|TestObject
argument_list|(
literal|"Sue"
argument_list|,
literal|45
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|setRoot
argument_list|(
literal|"Test"
argument_list|,
name|test
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|encodeProperty
argument_list|(
literal|"children"
argument_list|,
name|test
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|encoder
operator|.
name|nodeToString
argument_list|(
name|encoder
operator|.
name|getRootNode
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|comp
init|=
name|loadTestFileAsString
argument_list|(
literal|"encoded-simple-collection.xml"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|comp
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|loadTestFileAsString
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|CayenneResources
operator|.
name|getResource
argument_list|(
name|XML_DATA_DIR
operator|+
name|filename
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuffer
name|comp
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|ready
argument_list|()
condition|)
block|{
name|comp
operator|.
name|append
argument_list|(
name|in
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|windows
condition|)
block|{
name|comp
operator|.
name|append
argument_list|(
literal|"\r"
argument_list|)
expr_stmt|;
block|}
name|comp
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|comp
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|testEncodeComplexCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLEncoder
name|encoder
init|=
operator|new
name|XMLEncoder
argument_list|()
decl_stmt|;
name|TestObject
name|obj1
init|=
operator|new
name|TestObject
argument_list|()
decl_stmt|;
name|obj1
operator|.
name|setName
argument_list|(
literal|"George"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|addChild
argument_list|(
operator|new
name|TestObject
argument_list|(
literal|"Bill"
argument_list|,
literal|62
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|addChild
argument_list|(
operator|new
name|TestObject
argument_list|(
literal|"Sue"
argument_list|,
literal|8
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|TestObject
name|obj2
init|=
operator|new
name|TestObject
argument_list|(
literal|"Joe"
argument_list|,
literal|31
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|obj2
operator|.
name|addChild
argument_list|(
operator|new
name|TestObject
argument_list|(
literal|"Harry"
argument_list|,
literal|23
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|addChild
argument_list|(
name|obj2
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|encoder
operator|.
name|encode
argument_list|(
literal|"TestObjects"
argument_list|,
name|obj1
argument_list|)
decl_stmt|;
name|String
name|comp
init|=
name|loadTestFileAsString
argument_list|(
literal|"encoded-complex-collection.xml"
argument_list|)
decl_stmt|;
comment|// there are differences in attribute order encoding, so there can be more than
comment|// one valid output depending on the parser used...
if|if
condition|(
operator|!
name|comp
operator|.
name|equals
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|comp
operator|=
name|loadTestFileAsString
argument_list|(
literal|"encoded-complex-collection-alt1.xml"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|comp
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSimpleMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLEncoder
name|encoder
init|=
operator|new
name|XMLEncoder
argument_list|(
name|CayenneResources
operator|.
name|getResourceURL
argument_list|(
name|XML_DATA_DIR
operator|+
literal|"simple-mapping.xml"
argument_list|)
operator|.
name|toExternalForm
argument_list|()
argument_list|)
decl_stmt|;
name|TestObject
name|test
init|=
operator|new
name|TestObject
argument_list|()
decl_stmt|;
name|test
operator|.
name|setAge
argument_list|(
literal|57
argument_list|)
expr_stmt|;
name|test
operator|.
name|setName
argument_list|(
literal|"George"
argument_list|)
expr_stmt|;
name|test
operator|.
name|setOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|encoder
operator|.
name|encode
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|String
name|comp
init|=
name|loadTestFileAsString
argument_list|(
literal|"simple-mapped.xml"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|comp
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|//  Added test for 1-to-1 relationship mappings, per CAY-597.
specifier|public
name|void
name|test1To1Mapping
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLEncoder
name|encoder
init|=
operator|new
name|XMLEncoder
argument_list|(
name|CayenneResources
operator|.
name|getResourceURL
argument_list|(
name|XML_DATA_DIR
operator|+
literal|"1to1-mapping.xml"
argument_list|)
operator|.
name|toExternalForm
argument_list|()
argument_list|)
decl_stmt|;
name|TestObject
name|grandParent
init|=
operator|new
name|TestObject
argument_list|()
decl_stmt|;
name|grandParent
operator|.
name|setAge
argument_list|(
literal|117
argument_list|)
expr_stmt|;
name|grandParent
operator|.
name|setName
argument_list|(
literal|"Sue"
argument_list|)
expr_stmt|;
name|grandParent
operator|.
name|setOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TestObject
name|parent
init|=
operator|new
name|TestObject
argument_list|()
decl_stmt|;
name|parent
operator|.
name|setAge
argument_list|(
literal|94
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setName
argument_list|(
literal|"Bill"
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setParent
argument_list|(
name|grandParent
argument_list|)
expr_stmt|;
name|TestObject
name|child
init|=
operator|new
name|TestObject
argument_list|()
decl_stmt|;
name|child
operator|.
name|setAge
argument_list|(
literal|57
argument_list|)
expr_stmt|;
name|child
operator|.
name|setName
argument_list|(
literal|"George"
argument_list|)
expr_stmt|;
name|child
operator|.
name|setOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|child
operator|.
name|setParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|encoder
operator|.
name|encode
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|String
name|comp
init|=
name|loadTestFileAsString
argument_list|(
literal|"1to1-mapped.xml"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|comp
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|// Added test for 1-to-1 relationships, per CAY-597.
specifier|public
name|void
name|testEncode1To1
parameter_list|()
throws|throws
name|Exception
block|{
name|TestObject
name|grandParent
init|=
operator|new
name|TestObject
argument_list|()
decl_stmt|;
name|grandParent
operator|.
name|setAge
argument_list|(
literal|117
argument_list|)
expr_stmt|;
name|grandParent
operator|.
name|setName
argument_list|(
literal|"Sue"
argument_list|)
expr_stmt|;
name|grandParent
operator|.
name|setOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TestObject
name|parent
init|=
operator|new
name|TestObject
argument_list|()
decl_stmt|;
name|parent
operator|.
name|setAge
argument_list|(
literal|94
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setName
argument_list|(
literal|"Bill"
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setParent
argument_list|(
name|grandParent
argument_list|)
expr_stmt|;
name|TestObject
name|child
init|=
operator|new
name|TestObject
argument_list|()
decl_stmt|;
name|child
operator|.
name|setAge
argument_list|(
literal|57
argument_list|)
expr_stmt|;
name|child
operator|.
name|setName
argument_list|(
literal|"George"
argument_list|)
expr_stmt|;
name|child
operator|.
name|setOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|child
operator|.
name|setParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
operator|new
name|XMLEncoder
argument_list|()
operator|.
name|encode
argument_list|(
literal|"Test"
argument_list|,
name|child
argument_list|)
decl_stmt|;
name|String
name|comp
init|=
name|loadTestFileAsString
argument_list|(
literal|"1to1-encoded.xml"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|comp
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCollectionMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLEncoder
name|encoder
init|=
operator|new
name|XMLEncoder
argument_list|(
name|CayenneResources
operator|.
name|getResourceURL
argument_list|(
name|XML_DATA_DIR
operator|+
literal|"collection-mapping.xml"
argument_list|)
operator|.
name|toExternalForm
argument_list|()
argument_list|)
decl_stmt|;
name|TestObject
name|george
init|=
operator|new
name|TestObject
argument_list|()
decl_stmt|;
name|george
operator|.
name|setAge
argument_list|(
literal|76
argument_list|)
expr_stmt|;
name|george
operator|.
name|setName
argument_list|(
literal|"George"
argument_list|)
expr_stmt|;
name|george
operator|.
name|addChild
argument_list|(
operator|new
name|TestObject
argument_list|(
literal|"Bill"
argument_list|,
literal|34
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|TestObject
name|sue
init|=
operator|new
name|TestObject
argument_list|(
literal|"Sue"
argument_list|,
literal|31
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|sue
operator|.
name|addChild
argument_list|(
operator|new
name|TestObject
argument_list|(
literal|"Mike"
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|george
operator|.
name|addChild
argument_list|(
name|sue
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|encoder
operator|.
name|encode
argument_list|(
name|george
argument_list|)
decl_stmt|;
name|String
name|comp
init|=
name|loadTestFileAsString
argument_list|(
literal|"collection-mapped.xml"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|comp
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEncodeDataObjectsList
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TestObject
argument_list|>
name|dataObjects
init|=
operator|new
name|ArrayList
argument_list|<
name|TestObject
argument_list|>
argument_list|()
decl_stmt|;
name|dataObjects
operator|.
name|add
argument_list|(
operator|new
name|TestObject
argument_list|(
literal|"George"
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|dataObjects
operator|.
name|add
argument_list|(
operator|new
name|TestObject
argument_list|(
literal|"Mary"
argument_list|,
literal|28
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|dataObjects
operator|.
name|add
argument_list|(
operator|new
name|TestObject
argument_list|(
literal|"Joe"
argument_list|,
literal|31
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
operator|new
name|XMLEncoder
argument_list|()
operator|.
name|encode
argument_list|(
literal|"EncodedTestList"
argument_list|,
name|dataObjects
argument_list|)
decl_stmt|;
name|String
name|comp
init|=
name|loadTestFileAsString
argument_list|(
literal|"data-objects-encoded.xml"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|comp
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDataObjectsListMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TestObject
argument_list|>
name|dataObjects
init|=
operator|new
name|ArrayList
argument_list|<
name|TestObject
argument_list|>
argument_list|()
decl_stmt|;
name|dataObjects
operator|.
name|add
argument_list|(
operator|new
name|TestObject
argument_list|(
literal|"George"
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|dataObjects
operator|.
name|add
argument_list|(
operator|new
name|TestObject
argument_list|(
literal|"Mary"
argument_list|,
literal|28
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|dataObjects
operator|.
name|add
argument_list|(
operator|new
name|TestObject
argument_list|(
literal|"Joe"
argument_list|,
literal|31
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
operator|new
name|XMLEncoder
argument_list|(
name|CayenneResources
operator|.
name|getResourceURL
argument_list|(
name|XML_DATA_DIR
operator|+
literal|"simple-mapping.xml"
argument_list|)
operator|.
name|toExternalForm
argument_list|()
argument_list|)
operator|.
name|encode
argument_list|(
literal|"EncodedTestList"
argument_list|,
name|dataObjects
argument_list|)
decl_stmt|;
name|String
name|comp
init|=
name|loadTestFileAsString
argument_list|(
literal|"data-objects-mapped.xml"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|comp
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

