begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|enhancer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|ClassAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|ClassVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|FieldVisitor
import|;
end_import

begin_comment
comment|/**  * Enhances classes passed through the visitor to add embeddable fields and methods needed  * by Cayenne.  *   * @since 3.0  */
end_comment

begin_class
specifier|public
class|class
name|EmbeddableVisitor
extends|extends
name|ClassAdapter
block|{
specifier|private
specifier|static
name|String
name|OWNER_FEILD
init|=
literal|"owner"
decl_stmt|;
specifier|private
specifier|static
name|String
name|EMBEDDED_PROPERTY_FEILD
init|=
literal|"embeddedProperty"
decl_stmt|;
specifier|protected
name|EnhancementHelper
name|helper
decl_stmt|;
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|reservedFieldNames
decl_stmt|;
specifier|protected
name|boolean
name|checkReserved
decl_stmt|;
specifier|public
name|EmbeddableVisitor
parameter_list|(
name|ClassVisitor
name|visitor
parameter_list|)
block|{
name|super
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|this
operator|.
name|helper
operator|=
operator|new
name|EnhancementHelper
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|checkReserved
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|reservedFieldNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|reservedFieldNames
operator|.
name|add
argument_list|(
name|helper
operator|.
name|getPropertyField
argument_list|(
name|OWNER_FEILD
argument_list|)
argument_list|)
expr_stmt|;
name|reservedFieldNames
operator|.
name|add
argument_list|(
name|helper
operator|.
name|getPropertyField
argument_list|(
name|EMBEDDED_PROPERTY_FEILD
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks that no double enhancement happens.      */
annotation|@
name|Override
specifier|public
name|FieldVisitor
name|visitField
parameter_list|(
name|int
name|access
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|String
name|signature
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|checkReserved
operator|&&
name|reservedFieldNames
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoubleEnhanceException
argument_list|(
literal|"Embeddable class already contains field "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|visitField
argument_list|(
name|access
argument_list|,
name|name
argument_list|,
name|desc
argument_list|,
name|signature
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitEnd
parameter_list|()
block|{
comment|// 'checkReserved' flipping makes the visitor thread-unsafe... pay attention if
comment|// we are to ever reuse the visitor for multiple classes...
name|checkReserved
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|helper
operator|.
name|createField
argument_list|(
name|Persistent
operator|.
name|class
argument_list|,
name|OWNER_FEILD
argument_list|)
expr_stmt|;
name|helper
operator|.
name|createField
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|EMBEDDED_PROPERTY_FEILD
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|checkReserved
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

