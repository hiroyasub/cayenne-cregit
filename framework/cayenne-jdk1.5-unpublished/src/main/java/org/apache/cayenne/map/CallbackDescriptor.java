begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A mapping descriptor of a single callback event.  *   * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|CallbackDescriptor
implements|implements
name|Serializable
block|{
specifier|protected
name|int
name|callbackType
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|callbackMethods
decl_stmt|;
specifier|public
name|CallbackDescriptor
parameter_list|(
name|int
name|callbackType
parameter_list|)
block|{
name|setCallbackType
argument_list|(
name|callbackType
argument_list|)
expr_stmt|;
name|this
operator|.
name|callbackMethods
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes all callback methods.      */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|callbackMethods
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns all callback methods for this callback event.      *       * @return Returns all callback methods      */
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getCallbackMethods
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|callbackMethods
argument_list|)
return|;
block|}
specifier|public
name|void
name|addCallbackMethod
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|callbackMethods
operator|.
name|add
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeCallbackMethod
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|callbackMethods
operator|.
name|remove
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getCallbackType
parameter_list|()
block|{
return|return
name|callbackType
return|;
block|}
name|void
name|setCallbackType
parameter_list|(
name|int
name|callbackType
parameter_list|)
block|{
if|if
condition|(
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|CallbackMap
operator|.
name|CALLBACKS
argument_list|,
name|callbackType
argument_list|)
operator|!=
name|callbackType
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid callback: "
operator|+
name|callbackType
argument_list|)
throw|;
block|}
name|this
operator|.
name|callbackType
operator|=
name|callbackType
expr_stmt|;
block|}
comment|/**      * moves specified callback method to the specified position      *       * @param callbackMethod callbacm method name (should exist)      * @param destinationIndex destinationi index (should be valid)      * @return true if any changes were made      */
specifier|public
name|boolean
name|moveMethod
parameter_list|(
name|String
name|callbackMethod
parameter_list|,
name|int
name|destinationIndex
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|callbackMethodsList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|callbackMethods
argument_list|)
decl_stmt|;
name|int
name|currentIndex
init|=
name|callbackMethodsList
operator|.
name|indexOf
argument_list|(
name|callbackMethod
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentIndex
operator|<
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown callback method: "
operator|+
name|callbackMethod
argument_list|)
throw|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|destinationIndex
operator|>
name|currentIndex
condition|)
block|{
name|callbackMethodsList
operator|.
name|add
argument_list|(
name|destinationIndex
operator|+
literal|1
argument_list|,
name|callbackMethod
argument_list|)
expr_stmt|;
name|callbackMethodsList
operator|.
name|remove
argument_list|(
name|currentIndex
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|destinationIndex
operator|<
name|currentIndex
condition|)
block|{
name|callbackMethodsList
operator|.
name|add
argument_list|(
name|destinationIndex
argument_list|,
name|callbackMethod
argument_list|)
expr_stmt|;
name|callbackMethodsList
operator|.
name|remove
argument_list|(
name|currentIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|callbackMethods
operator|.
name|clear
argument_list|()
expr_stmt|;
name|callbackMethods
operator|.
name|addAll
argument_list|(
name|callbackMethodsList
argument_list|)
expr_stmt|;
block|}
return|return
name|changed
return|;
block|}
comment|/**      * Replaces a callback method at the specified position      *       * @param index callback method index      * @param method new callback method      */
specifier|public
name|void
name|setCallbackMethodAt
parameter_list|(
name|int
name|index
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|callbackMethodsList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|callbackMethods
argument_list|)
decl_stmt|;
name|callbackMethodsList
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|callbackMethods
operator|.
name|clear
argument_list|()
expr_stmt|;
name|callbackMethods
operator|.
name|addAll
argument_list|(
name|callbackMethodsList
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

