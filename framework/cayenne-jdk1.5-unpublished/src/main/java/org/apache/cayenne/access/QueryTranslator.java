begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityInheritanceTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_comment
comment|/**  * Defines API for translation Cayenne queries to JDBC PreparedStatements.  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|QueryTranslator
block|{
comment|/**       * Query being translated.       */
specifier|protected
name|Query
name|query
decl_stmt|;
comment|/**      * JDBC database connection needed to create PreparedStatement. Prior to 1.2 this      * property was called "con".      */
specifier|protected
name|Connection
name|connection
decl_stmt|;
comment|/** Adapter helping to do SQL literal conversions, etc. */
specifier|protected
name|DbAdapter
name|adapter
decl_stmt|;
comment|/**      * Provides access to Cayenne mapping info.      *       * @since 1.2      */
specifier|protected
name|EntityResolver
name|entityResolver
decl_stmt|;
comment|/**      * Creates PreparedStatement.<code>logLevel</code> parameter is supplied to allow      * control of logging of produced SQL.      */
specifier|public
specifier|abstract
name|PreparedStatement
name|createStatement
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**       * Returns query object being processed.       */
specifier|public
name|Query
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
specifier|public
name|void
name|setQuery
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
block|}
comment|/**      * Returns Connection object used by this translator.      *       * @since 1.2      */
specifier|public
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
comment|/**      * @since 1.2      */
specifier|public
name|void
name|setConnection
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
specifier|public
name|DbAdapter
name|getAdapter
parameter_list|()
block|{
return|return
name|adapter
return|;
block|}
specifier|public
name|void
name|setAdapter
parameter_list|(
name|DbAdapter
name|adapter
parameter_list|)
block|{
name|this
operator|.
name|adapter
operator|=
name|adapter
expr_stmt|;
block|}
comment|/**      * Returns an EntityInheritanceTree for the root entity.      *       * @since 1.1      */
specifier|public
name|EntityInheritanceTree
name|getRootInheritanceTree
parameter_list|()
block|{
return|return
name|getEntityResolver
argument_list|()
operator|.
name|lookupInheritanceTree
argument_list|(
name|getRootEntity
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|ObjEntity
name|getRootEntity
parameter_list|()
block|{
return|return
name|query
operator|.
name|getMetaData
argument_list|(
name|getEntityResolver
argument_list|()
argument_list|)
operator|.
name|getObjEntity
argument_list|()
return|;
block|}
specifier|public
name|DbEntity
name|getRootDbEntity
parameter_list|()
block|{
return|return
name|query
operator|.
name|getMetaData
argument_list|(
name|getEntityResolver
argument_list|()
argument_list|)
operator|.
name|getDbEntity
argument_list|()
return|;
block|}
comment|/**      * @since 1.2      */
specifier|public
name|EntityResolver
name|getEntityResolver
parameter_list|()
block|{
return|return
name|entityResolver
return|;
block|}
comment|/**      * @since 1.2      */
specifier|public
name|void
name|setEntityResolver
parameter_list|(
name|EntityResolver
name|entityResolver
parameter_list|)
block|{
name|this
operator|.
name|entityResolver
operator|=
name|entityResolver
expr_stmt|;
block|}
block|}
end_class

end_unit

