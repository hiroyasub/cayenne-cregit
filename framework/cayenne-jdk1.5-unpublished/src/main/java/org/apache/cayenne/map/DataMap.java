begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNodeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DbEntityListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EntityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|ObjEntityListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|NamedQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|ToStringBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLSerializable
import|;
end_import

begin_comment
comment|/**  * Stores a collection of related mapping objects that describe database and object layers  * of an application. DataMap contains DbEntities mapping database tables, ObjEntities -  * mapping persistent Java classes, Procedures - mapping database stored procedures.  */
end_comment

begin_class
specifier|public
class|class
name|DataMap
implements|implements
name|Serializable
implements|,
name|ConfigurationNode
implements|,
name|XMLSerializable
implements|,
name|MappingNamespace
implements|,
name|DbEntityListener
implements|,
name|ObjEntityListener
block|{
comment|/**      * Defines whether a DataMap supports client entities.      *       * @since 1.2      */
specifier|public
specifier|static
specifier|final
name|String
name|CLIENT_SUPPORTED_PROPERTY
init|=
literal|"clientSupported"
decl_stmt|;
comment|/**      * Defines the name of the property for default client Java class package.      *       * @since 1.2      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CLIENT_PACKAGE_PROPERTY
init|=
literal|"defaultClientPackage"
decl_stmt|;
comment|/**      * Defines the name of the property for default client Java superclass.      *       * @since 3.0      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CLIENT_SUPERCLASS_PROPERTY
init|=
literal|"defaultClientSuperclass"
decl_stmt|;
comment|/**      * Defines the name of the property for default DB schema.      *       * @since 1.1      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SCHEMA_PROPERTY
init|=
literal|"defaultSchema"
decl_stmt|;
comment|/**      * Defines the name of the property for default Java class package.      *       * @since 1.1      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_PACKAGE_PROPERTY
init|=
literal|"defaultPackage"
decl_stmt|;
comment|/**      * Defines the name of the property for default Java superclass.      *       * @since 1.1      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SUPERCLASS_PROPERTY
init|=
literal|"defaultSuperclass"
decl_stmt|;
comment|/**      * Defines the name of the property for default DB schema.      *       * @since 1.1      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_LOCK_TYPE_PROPERTY
init|=
literal|"defaultLockType"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_QUOTE_SQL_IDENTIFIERS_PROPERTY
init|=
literal|"quoteSqlIdentifiers"
decl_stmt|;
comment|/**      * The namespace in which the data map XML file will be created. This is also the URI      * to locate a copy of the schema document.      */
specifier|public
specifier|static
specifier|final
name|String
name|SCHEMA_XSD
init|=
literal|"http://cayenne.apache.org/schema/3.0/modelMap"
decl_stmt|;
specifier|protected
name|String
name|name
decl_stmt|;
specifier|protected
name|String
name|location
decl_stmt|;
specifier|protected
name|MappingNamespace
name|namespace
decl_stmt|;
specifier|protected
name|Boolean
name|quotingSQLIdentifiers
decl_stmt|;
specifier|protected
name|String
name|defaultSchema
decl_stmt|;
specifier|protected
name|String
name|defaultPackage
decl_stmt|;
specifier|protected
name|String
name|defaultSuperclass
decl_stmt|;
specifier|protected
name|int
name|defaultLockType
decl_stmt|;
specifier|protected
name|boolean
name|clientSupported
decl_stmt|;
specifier|protected
name|String
name|defaultClientPackage
decl_stmt|;
specifier|protected
name|String
name|defaultClientSuperclass
decl_stmt|;
specifier|private
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Embeddable
argument_list|>
name|embeddablesMap
decl_stmt|;
specifier|private
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ObjEntity
argument_list|>
name|objEntityMap
decl_stmt|;
specifier|private
name|SortedMap
argument_list|<
name|String
argument_list|,
name|DbEntity
argument_list|>
name|dbEntityMap
decl_stmt|;
specifier|private
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Procedure
argument_list|>
name|procedureMap
decl_stmt|;
specifier|private
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Query
argument_list|>
name|queryMap
decl_stmt|;
specifier|private
name|SortedMap
argument_list|<
name|String
argument_list|,
name|SQLResult
argument_list|>
name|results
decl_stmt|;
specifier|private
name|List
argument_list|<
name|EntityListener
argument_list|>
name|defaultEntityListeners
decl_stmt|;
comment|/**      * @since 3.1      */
specifier|protected
name|Resource
name|configurationSource
decl_stmt|;
comment|/**      * Creates a new unnamed DataMap.      */
specifier|public
name|DataMap
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new named DataMap.      */
specifier|public
name|DataMap
parameter_list|(
name|String
name|mapName
parameter_list|)
block|{
name|this
argument_list|(
name|mapName
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DataMap
parameter_list|(
name|String
name|mapName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|embeddablesMap
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Embeddable
argument_list|>
argument_list|()
expr_stmt|;
name|objEntityMap
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|ObjEntity
argument_list|>
argument_list|()
expr_stmt|;
name|dbEntityMap
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|DbEntity
argument_list|>
argument_list|()
expr_stmt|;
name|procedureMap
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Procedure
argument_list|>
argument_list|()
expr_stmt|;
name|queryMap
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Query
argument_list|>
argument_list|()
expr_stmt|;
name|defaultEntityListeners
operator|=
operator|new
name|ArrayList
argument_list|<
name|EntityListener
argument_list|>
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|results
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|SQLResult
argument_list|>
argument_list|()
expr_stmt|;
name|setName
argument_list|(
name|mapName
argument_list|)
expr_stmt|;
name|initWithProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since 3.1      */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|acceptVisitor
parameter_list|(
name|ConfigurationNodeVisitor
argument_list|<
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
return|return
name|visitor
operator|.
name|visitDataMap
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|boolean
name|isQuotingSQLIdentifiers
parameter_list|()
block|{
return|return
name|quotingSQLIdentifiers
return|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|void
name|setQuotingSQLIdentifiers
parameter_list|(
name|boolean
name|quotingSqlIdentifiers
parameter_list|)
block|{
name|this
operator|.
name|quotingSQLIdentifiers
operator|=
name|quotingSqlIdentifiers
expr_stmt|;
block|}
comment|/**      * Performs DataMap initialization from a set of properties, using defaults for the      * missing properties.      *       * @since 1.1      */
specifier|public
name|void
name|initWithProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
comment|// must init defaults even if properties are empty
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
name|Collections
operator|.
name|EMPTY_MAP
expr_stmt|;
block|}
name|Object
name|lockType
init|=
name|properties
operator|.
name|get
argument_list|(
name|DEFAULT_LOCK_TYPE_PROPERTY
argument_list|)
decl_stmt|;
name|Object
name|packageName
init|=
name|properties
operator|.
name|get
argument_list|(
name|DEFAULT_PACKAGE_PROPERTY
argument_list|)
decl_stmt|;
name|Object
name|schema
init|=
name|properties
operator|.
name|get
argument_list|(
name|DEFAULT_SCHEMA_PROPERTY
argument_list|)
decl_stmt|;
name|Object
name|superclass
init|=
name|properties
operator|.
name|get
argument_list|(
name|DEFAULT_SUPERCLASS_PROPERTY
argument_list|)
decl_stmt|;
name|Object
name|clientEntities
init|=
name|properties
operator|.
name|get
argument_list|(
name|CLIENT_SUPPORTED_PROPERTY
argument_list|)
decl_stmt|;
name|Object
name|clientPackageName
init|=
name|properties
operator|.
name|get
argument_list|(
name|DEFAULT_CLIENT_PACKAGE_PROPERTY
argument_list|)
decl_stmt|;
name|Object
name|clientSuperclass
init|=
name|properties
operator|.
name|get
argument_list|(
name|DEFAULT_CLIENT_SUPERCLASS_PROPERTY
argument_list|)
decl_stmt|;
name|Object
name|quoteSqlIdentifier
init|=
name|properties
operator|.
name|get
argument_list|(
name|DEFAULT_QUOTE_SQL_IDENTIFIERS_PROPERTY
argument_list|)
decl_stmt|;
name|this
operator|.
name|defaultLockType
operator|=
literal|"optimistic"
operator|.
name|equals
argument_list|(
name|lockType
argument_list|)
condition|?
name|ObjEntity
operator|.
name|LOCK_TYPE_OPTIMISTIC
else|:
name|ObjEntity
operator|.
name|LOCK_TYPE_NONE
expr_stmt|;
name|this
operator|.
name|defaultPackage
operator|=
operator|(
name|packageName
operator|!=
literal|null
operator|)
condition|?
name|packageName
operator|.
name|toString
argument_list|()
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|quotingSQLIdentifiers
operator|=
operator|(
name|quoteSqlIdentifier
operator|!=
literal|null
operator|)
condition|?
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|quoteSqlIdentifier
operator|.
name|toString
argument_list|()
argument_list|)
else|:
literal|false
expr_stmt|;
name|this
operator|.
name|defaultSchema
operator|=
operator|(
name|schema
operator|!=
literal|null
operator|)
condition|?
name|schema
operator|.
name|toString
argument_list|()
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|defaultSuperclass
operator|=
operator|(
name|superclass
operator|!=
literal|null
operator|)
condition|?
name|superclass
operator|.
name|toString
argument_list|()
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|clientSupported
operator|=
operator|(
name|clientEntities
operator|!=
literal|null
operator|)
condition|?
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|clientEntities
operator|.
name|toString
argument_list|()
argument_list|)
else|:
literal|false
expr_stmt|;
name|this
operator|.
name|defaultClientPackage
operator|=
operator|(
name|clientPackageName
operator|!=
literal|null
operator|)
condition|?
name|clientPackageName
operator|.
name|toString
argument_list|()
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|defaultClientSuperclass
operator|=
operator|(
name|clientSuperclass
operator|!=
literal|null
operator|)
condition|?
name|clientSuperclass
operator|.
name|toString
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
comment|/**      * Returns a DataMap stripped of any server-side information, such as DbEntity      * mapping, or ObjEntities that are not allowed in the client tier. Returns null if      * this DataMap as a whole does not support client tier persistence.      *       * @since 1.2      */
specifier|public
name|DataMap
name|getClientDataMap
parameter_list|(
name|EntityResolver
name|serverResolver
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isClientSupported
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DataMap
name|clientMap
init|=
operator|new
name|DataMap
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// create client entities for entities
for|for
control|(
name|ObjEntity
name|entity
range|:
name|getObjEntities
argument_list|()
control|)
block|{
if|if
condition|(
name|entity
operator|.
name|isClientAllowed
argument_list|()
condition|)
block|{
name|clientMap
operator|.
name|addObjEntity
argument_list|(
name|entity
operator|.
name|getClientEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// create proxies for named queries
for|for
control|(
name|Query
name|q
range|:
name|getQueries
argument_list|()
control|)
block|{
name|NamedQuery
name|proxy
init|=
operator|new
name|NamedQuery
argument_list|(
name|q
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|setName
argument_list|(
name|q
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// resolve metadata so that client can have access to it without knowing about
comment|// the server query.
name|proxy
operator|.
name|initMetadata
argument_list|(
name|q
operator|.
name|getMetaData
argument_list|(
name|serverResolver
argument_list|)
argument_list|)
expr_stmt|;
name|clientMap
operator|.
name|addQuery
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
return|return
name|clientMap
return|;
block|}
comment|/**      * Prints itself as a well-formed complete XML document. In comparison,      * {@link #encodeAsXML(XMLEncoder)}stores DataMap assuming it is a part of a bigger      * document.      *       * @since 1.1      * @deprecated since 3.1, as {@link XMLSerializable} objects should only save XML      *             segments. Saving full XML files is responsibilty of the callers.      */
specifier|public
name|void
name|encodeAsXML
parameter_list|(
name|PrintWriter
name|pw
parameter_list|)
block|{
name|XMLEncoder
name|encoder
init|=
operator|new
name|XMLEncoder
argument_list|(
name|pw
argument_list|,
literal|"\t"
argument_list|)
decl_stmt|;
name|encoder
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"utf-8\"?>"
argument_list|)
expr_stmt|;
name|encodeAsXML
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
block|}
comment|/**      * Prints itself as XML to the provided PrintWriter.      *       * @since 1.1      */
specifier|public
name|void
name|encodeAsXML
parameter_list|(
name|XMLEncoder
name|encoder
parameter_list|)
block|{
name|encoder
operator|.
name|println
argument_list|(
literal|"<data-map xmlns=\"http://cayenne.apache.org/schema/3.0/modelMap\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|println
argument_list|(
literal|"  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|println
argument_list|(
literal|"  xsi:schemaLocation=\""
operator|+
name|SCHEMA_XSD
operator|+
literal|" "
operator|+
name|SCHEMA_XSD
operator|+
literal|".xsd\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|println
argument_list|(
literal|"  project-version=\""
operator|+
name|Project
operator|.
name|CURRENT_PROJECT_VERSION
operator|+
literal|"\">"
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|indent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// properties
if|if
condition|(
name|defaultLockType
operator|==
name|ObjEntity
operator|.
name|LOCK_TYPE_OPTIMISTIC
condition|)
block|{
name|encoder
operator|.
name|printProperty
argument_list|(
name|DEFAULT_LOCK_TYPE_PROPERTY
argument_list|,
literal|"optimistic"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Util
operator|.
name|isEmptyString
argument_list|(
name|defaultPackage
argument_list|)
condition|)
block|{
name|encoder
operator|.
name|printProperty
argument_list|(
name|DEFAULT_PACKAGE_PROPERTY
argument_list|,
name|defaultPackage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Util
operator|.
name|isEmptyString
argument_list|(
name|defaultSchema
argument_list|)
condition|)
block|{
name|encoder
operator|.
name|printProperty
argument_list|(
name|DEFAULT_SCHEMA_PROPERTY
argument_list|,
name|defaultSchema
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Util
operator|.
name|isEmptyString
argument_list|(
name|defaultSuperclass
argument_list|)
condition|)
block|{
name|encoder
operator|.
name|printProperty
argument_list|(
name|DEFAULT_SUPERCLASS_PROPERTY
argument_list|,
name|defaultSuperclass
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|quotingSQLIdentifiers
condition|)
block|{
name|encoder
operator|.
name|printProperty
argument_list|(
name|DEFAULT_QUOTE_SQL_IDENTIFIERS_PROPERTY
argument_list|,
name|quotingSQLIdentifiers
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clientSupported
condition|)
block|{
name|encoder
operator|.
name|printProperty
argument_list|(
name|CLIENT_SUPPORTED_PROPERTY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Util
operator|.
name|isEmptyString
argument_list|(
name|defaultClientPackage
argument_list|)
condition|)
block|{
name|encoder
operator|.
name|printProperty
argument_list|(
name|DEFAULT_CLIENT_PACKAGE_PROPERTY
argument_list|,
name|defaultClientPackage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Util
operator|.
name|isEmptyString
argument_list|(
name|defaultClientSuperclass
argument_list|)
condition|)
block|{
name|encoder
operator|.
name|printProperty
argument_list|(
name|DEFAULT_CLIENT_SUPERCLASS_PROPERTY
argument_list|,
name|defaultClientSuperclass
argument_list|)
expr_stmt|;
block|}
comment|// embeddables
name|encoder
operator|.
name|print
argument_list|(
name|getEmbeddableMap
argument_list|()
argument_list|)
expr_stmt|;
comment|// procedures
name|encoder
operator|.
name|print
argument_list|(
name|getProcedureMap
argument_list|()
argument_list|)
expr_stmt|;
comment|// DbEntities
for|for
control|(
name|DbEntity
name|dbe
range|:
name|getDbEntityMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|dbe
operator|.
name|encodeAsXML
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
block|}
comment|// others...
name|encoder
operator|.
name|print
argument_list|(
name|getObjEntityMap
argument_list|()
argument_list|)
expr_stmt|;
name|encodeDBRelationshipsAsXML
argument_list|(
name|getDbEntityMap
argument_list|()
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
name|encodeOBJRelationshipsAsXML
argument_list|(
name|getObjEntityMap
argument_list|()
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|getQueryMap
argument_list|()
argument_list|)
expr_stmt|;
comment|// write entity listeners
for|for
control|(
name|EntityListener
name|entityListener
range|:
name|getDefaultEntityListeners
argument_list|()
control|)
block|{
name|entityListener
operator|.
name|encodeAsXML
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
block|}
name|encoder
operator|.
name|indent
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|println
argument_list|(
literal|"</data-map>"
argument_list|)
expr_stmt|;
block|}
comment|// stores relationships for the map of entities
specifier|private
specifier|final
name|void
name|encodeDBRelationshipsAsXML
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|DbEntity
argument_list|>
name|entityMap
parameter_list|,
name|XMLEncoder
name|encoder
parameter_list|)
block|{
for|for
control|(
name|Entity
name|entity
range|:
name|entityMap
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Relationship
name|relationship
range|:
name|entity
operator|.
name|getRelationships
argument_list|()
control|)
block|{
comment|// filter out synthetic
if|if
condition|(
operator|!
name|relationship
operator|.
name|isRuntime
argument_list|()
condition|)
block|{
name|relationship
operator|.
name|encodeAsXML
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// stores relationships for the map of entities
specifier|private
specifier|final
name|void
name|encodeOBJRelationshipsAsXML
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ObjEntity
argument_list|>
name|entityMap
parameter_list|,
name|XMLEncoder
name|encoder
parameter_list|)
block|{
for|for
control|(
name|ObjEntity
name|entity
range|:
name|entityMap
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Relationship
name|relationship
range|:
name|entity
operator|.
name|getDeclaredRelationships
argument_list|()
control|)
block|{
comment|// filter out synthetic
if|if
condition|(
operator|!
name|relationship
operator|.
name|isRuntime
argument_list|()
condition|)
block|{
name|relationship
operator|.
name|encodeAsXML
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|ToStringBuilder
argument_list|(
name|this
argument_list|)
operator|.
name|append
argument_list|(
literal|"name"
argument_list|,
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Returns the name of this DataMap.      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Set the name of this DataMap.      */
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Adds all Object and DB entities and Queries from another map to this map.      * Overwrites all existing entities and queries with the new ones.      *<p>      *<i>TODO: will need to implement advanced merge that allows different policies for      * overwriting entities / queries.</i>      *</p>      */
specifier|public
name|void
name|mergeWithDataMap
parameter_list|(
name|DataMap
name|map
parameter_list|)
block|{
for|for
control|(
name|DbEntity
name|ent
range|:
operator|new
name|ArrayList
argument_list|<
name|DbEntity
argument_list|>
argument_list|(
name|map
operator|.
name|getDbEntities
argument_list|()
argument_list|)
control|)
block|{
name|this
operator|.
name|removeDbEntity
argument_list|(
name|ent
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|addDbEntity
argument_list|(
name|ent
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ObjEntity
name|ent
range|:
operator|new
name|ArrayList
argument_list|<
name|ObjEntity
argument_list|>
argument_list|(
name|map
operator|.
name|getObjEntities
argument_list|()
argument_list|)
control|)
block|{
name|this
operator|.
name|removeObjEntity
argument_list|(
name|ent
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|addObjEntity
argument_list|(
name|ent
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Query
name|query
range|:
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|(
name|map
operator|.
name|getQueries
argument_list|()
argument_list|)
control|)
block|{
name|this
operator|.
name|removeQuery
argument_list|(
name|query
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|addQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns "location" property value. Location is abstract and can depend on how the      * DataMap was loaded. E.g. location can be a File on the filesystem or a location      * within a JAR.      */
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
comment|/**      * Sets "location" property.      */
specifier|public
name|void
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
comment|/**      * Returns a sorted unmodifiable map of ObjEntities contained in this DataMap, keyed      * by ObjEntity name.      */
specifier|public
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ObjEntity
argument_list|>
name|getObjEntityMap
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSortedMap
argument_list|(
name|objEntityMap
argument_list|)
return|;
block|}
comment|/**      * Returns a sorted unmodifiable map of DbEntities contained in this DataMap, keyed by      * DbEntity name.      */
specifier|public
name|SortedMap
argument_list|<
name|String
argument_list|,
name|DbEntity
argument_list|>
name|getDbEntityMap
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSortedMap
argument_list|(
name|dbEntityMap
argument_list|)
return|;
block|}
comment|/**      * Returns a named query associated with this DataMap.      *       * @since 1.1      */
specifier|public
name|Query
name|getQuery
parameter_list|(
name|String
name|queryName
parameter_list|)
block|{
name|Query
name|query
init|=
name|queryMap
operator|.
name|get
argument_list|(
name|queryName
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
return|return
name|query
return|;
block|}
return|return
name|namespace
operator|!=
literal|null
condition|?
name|namespace
operator|.
name|getQuery
argument_list|(
name|queryName
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * Stores a query under its name.      *       * @since 1.1      */
specifier|public
name|void
name|addQuery
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Can't add null query."
argument_list|)
throw|;
block|}
if|if
condition|(
name|query
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Query name can't be null."
argument_list|)
throw|;
block|}
comment|// TODO: change method signature to return replaced procedure and make sure the
comment|// Modeler handles it...
name|Object
name|existingQuery
init|=
name|queryMap
operator|.
name|get
argument_list|(
name|query
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingQuery
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|existingQuery
operator|==
name|query
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"An attempt to override entity '"
operator|+
name|query
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|queryMap
operator|.
name|put
argument_list|(
name|query
operator|.
name|getName
argument_list|()
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes a named query from the DataMap.      *       * @since 1.1      */
specifier|public
name|void
name|removeQuery
parameter_list|(
name|String
name|queryName
parameter_list|)
block|{
name|queryMap
operator|.
name|remove
argument_list|(
name|queryName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes all stored embeddable objects from the map.      *       * @since 3.0      */
specifier|public
name|void
name|clearEmbeddables
parameter_list|()
block|{
name|embeddablesMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|void
name|clearResultSets
parameter_list|()
block|{
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * @since 1.1      */
specifier|public
name|void
name|clearQueries
parameter_list|()
block|{
name|queryMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * @since 1.2      */
specifier|public
name|void
name|clearObjEntities
parameter_list|()
block|{
name|objEntityMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * @since 1.2      */
specifier|public
name|void
name|clearDbEntities
parameter_list|()
block|{
name|dbEntityMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * @since 1.2      */
specifier|public
name|void
name|clearProcedures
parameter_list|()
block|{
name|procedureMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * @since 1.1      */
specifier|public
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Query
argument_list|>
name|getQueryMap
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSortedMap
argument_list|(
name|queryMap
argument_list|)
return|;
block|}
comment|/**      * Returns an unmodifiable collection of mapped queries.      *       * @since 1.1      */
specifier|public
name|Collection
argument_list|<
name|Query
argument_list|>
name|getQueries
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|queryMap
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Adds an embeddable object to the DataMap.      *       * @since 3.0      */
specifier|public
name|void
name|addEmbeddable
parameter_list|(
name|Embeddable
name|embeddable
parameter_list|)
block|{
if|if
condition|(
name|embeddable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null embeddable"
argument_list|)
throw|;
block|}
if|if
condition|(
name|embeddable
operator|.
name|getClassName
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Attempt to add Embeddable with no class name."
argument_list|)
throw|;
block|}
comment|// TODO: change method signature to return replaced entity and make sure the
comment|// Modeler handles it...
name|Object
name|existing
init|=
name|embeddablesMap
operator|.
name|get
argument_list|(
name|embeddable
operator|.
name|getClassName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|existing
operator|==
name|embeddable
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"An attempt to override embeddable '"
operator|+
name|embeddable
operator|.
name|getClassName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|embeddablesMap
operator|.
name|put
argument_list|(
name|embeddable
operator|.
name|getClassName
argument_list|()
argument_list|,
name|embeddable
argument_list|)
expr_stmt|;
name|embeddable
operator|.
name|setDataMap
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a named SQLResultSet to the DataMap.      *       * @since 3.0      */
specifier|public
name|void
name|addResult
parameter_list|(
name|SQLResult
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null result"
argument_list|)
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Attempt to add resultSetMapping with no name."
argument_list|)
throw|;
block|}
name|Object
name|existing
init|=
name|results
operator|.
name|get
argument_list|(
name|result
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|existing
operator|==
name|result
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"An attempt to override resultSetMapping '"
operator|+
name|result
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|results
operator|.
name|put
argument_list|(
name|result
operator|.
name|getName
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a new ObjEntity to this DataMap.      */
specifier|public
name|void
name|addObjEntity
parameter_list|(
name|ObjEntity
name|entity
parameter_list|)
block|{
if|if
condition|(
name|entity
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Attempt to add ObjEntity with no name."
argument_list|)
throw|;
block|}
comment|// TODO: change method signature to return replaced entity and make sure the
comment|// Modeler handles it...
name|Object
name|existingEntity
init|=
name|objEntityMap
operator|.
name|get
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingEntity
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|existingEntity
operator|==
name|entity
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"An attempt to override entity '"
operator|+
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|objEntityMap
operator|.
name|put
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|,
name|entity
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setDataMap
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a new DbEntity to this DataMap.      */
specifier|public
name|void
name|addDbEntity
parameter_list|(
name|DbEntity
name|entity
parameter_list|)
block|{
if|if
condition|(
name|entity
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Attempt to add DbEntity with no name."
argument_list|)
throw|;
block|}
comment|// TODO: change method signature to return replaced entity and make sure the
comment|// Modeler handles it...
name|Object
name|existingEntity
init|=
name|dbEntityMap
operator|.
name|get
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingEntity
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|existingEntity
operator|==
name|entity
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"An attempt to override entity '"
operator|+
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|dbEntityMap
operator|.
name|put
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|,
name|entity
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setDataMap
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns an unmodifiable collection of ObjEntities stored in this DataMap.      */
specifier|public
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|getObjEntities
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|objEntityMap
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Embeddable
argument_list|>
name|getEmbeddableMap
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|embeddablesMap
argument_list|)
return|;
block|}
comment|/**      * Returns a collection of {@link Embeddable} mappings stored in the DataMap.      *       * @since 3.0      */
specifier|public
name|Collection
argument_list|<
name|Embeddable
argument_list|>
name|getEmbeddables
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|embeddablesMap
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SQLResult
argument_list|>
name|getResultsMap
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|results
argument_list|)
return|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|Collection
argument_list|<
name|SQLResult
argument_list|>
name|getResults
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|results
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|Embeddable
name|getEmbeddable
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|Embeddable
name|e
init|=
name|embeddablesMap
operator|.
name|get
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
return|return
name|e
return|;
block|}
return|return
name|namespace
operator|!=
literal|null
condition|?
name|namespace
operator|.
name|getEmbeddable
argument_list|(
name|className
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|SQLResult
name|getResult
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|SQLResult
name|rsMapping
init|=
name|results
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|rsMapping
operator|!=
literal|null
condition|)
block|{
return|return
name|rsMapping
return|;
block|}
return|return
name|namespace
operator|!=
literal|null
condition|?
name|namespace
operator|.
name|getResult
argument_list|(
name|name
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * Returns an unmodifiable list of default {@link EntityListener} objects. Note that      * since the order of listeners is significant a list, not just a generic Collection      * is returned.      *       * @since 3.0      */
specifier|public
name|List
argument_list|<
name|EntityListener
argument_list|>
name|getDefaultEntityListeners
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|defaultEntityListeners
argument_list|)
return|;
block|}
comment|/**      * Adds a new EntityListener.      *       * @since 3.0      * @throws IllegalArgumentException if a listener for the same class name is already      *             registered.      */
specifier|public
name|void
name|addDefaultEntityListener
parameter_list|(
name|EntityListener
name|listener
parameter_list|)
block|{
for|for
control|(
name|EntityListener
name|next
range|:
name|defaultEntityListeners
control|)
block|{
if|if
condition|(
name|listener
operator|.
name|getClassName
argument_list|()
operator|.
name|equals
argument_list|(
name|next
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Duplicate default listener for "
operator|+
name|next
operator|.
name|getClassName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|defaultEntityListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes a listener matching class name.      *       * @since 3.0      */
specifier|public
name|void
name|removeDefaultEntityListener
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|Iterator
argument_list|<
name|EntityListener
argument_list|>
name|it
init|=
name|defaultEntityListeners
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|EntityListener
name|next
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|next
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/**      * @since 3.0      */
specifier|public
name|EntityListener
name|getDefaultEntityListener
parameter_list|(
name|String
name|className
parameter_list|)
block|{
for|for
control|(
name|EntityListener
name|listener
range|:
name|defaultEntityListeners
control|)
block|{
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|listener
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|listener
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns all DbEntities in this DataMap.      */
specifier|public
name|Collection
argument_list|<
name|DbEntity
argument_list|>
name|getDbEntities
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|dbEntityMap
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns DbEntity matching the<code>name</code> parameter. No dependencies will be      * searched.      */
specifier|public
name|DbEntity
name|getDbEntity
parameter_list|(
name|String
name|dbEntityName
parameter_list|)
block|{
name|DbEntity
name|entity
init|=
name|dbEntityMap
operator|.
name|get
argument_list|(
name|dbEntityName
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
return|return
name|entity
return|;
block|}
return|return
name|namespace
operator|!=
literal|null
condition|?
name|namespace
operator|.
name|getDbEntity
argument_list|(
name|dbEntityName
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * Returns an ObjEntity for a DataObject class name.      *       * @since 1.1      */
specifier|public
name|ObjEntity
name|getObjEntityForJavaClass
parameter_list|(
name|String
name|javaClassName
parameter_list|)
block|{
if|if
condition|(
name|javaClassName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|ObjEntity
name|entity
range|:
name|getObjEntities
argument_list|()
control|)
block|{
if|if
condition|(
name|javaClassName
operator|.
name|equals
argument_list|(
name|entity
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|entity
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns an ObjEntity for a given name. If it is not found in this DataMap, it will      * search a parent EntityNamespace.      */
specifier|public
name|ObjEntity
name|getObjEntity
parameter_list|(
name|String
name|objEntityName
parameter_list|)
block|{
name|ObjEntity
name|entity
init|=
name|objEntityMap
operator|.
name|get
argument_list|(
name|objEntityName
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
return|return
name|entity
return|;
block|}
return|return
name|namespace
operator|!=
literal|null
condition|?
name|namespace
operator|.
name|getObjEntity
argument_list|(
name|objEntityName
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * Returns all ObjEntities mapped to the given DbEntity.      */
specifier|public
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|getMappedEntities
parameter_list|(
name|DbEntity
name|dbEntity
parameter_list|)
block|{
if|if
condition|(
name|dbEntity
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|allEntities
init|=
operator|(
name|namespace
operator|!=
literal|null
operator|)
condition|?
name|namespace
operator|.
name|getObjEntities
argument_list|()
else|:
name|getObjEntities
argument_list|()
decl_stmt|;
if|if
condition|(
name|allEntities
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjEntity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjEntity
name|entity
range|:
name|allEntities
control|)
block|{
if|if
condition|(
name|entity
operator|.
name|getDbEntity
argument_list|()
operator|==
name|dbEntity
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Removes an {@link Embeddable} descriptor with matching class name.      *       * @since 3.0      */
specifier|public
name|void
name|removeEmbeddable
parameter_list|(
name|String
name|className
parameter_list|)
block|{
comment|// TODO: andrus, 1/25/2007 - clean up references like removeDbEntity does.
name|embeddablesMap
operator|.
name|remove
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|void
name|removeResult
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|results
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * "Dirty" remove of the DbEntity from the data map.      */
specifier|public
name|void
name|removeDbEntity
parameter_list|(
name|String
name|dbEntityName
parameter_list|)
block|{
name|removeDbEntity
argument_list|(
name|dbEntityName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes DbEntity from the DataMap. If<code>clearDependencies</code> is true, all      * DbRelationships that reference this entity are also removed. ObjEntities that rely      * on this entity are cleaned up.      *       * @since 1.1      */
specifier|public
name|void
name|removeDbEntity
parameter_list|(
name|String
name|dbEntityName
parameter_list|,
name|boolean
name|clearDependencies
parameter_list|)
block|{
name|DbEntity
name|dbEntityToDelete
init|=
name|dbEntityMap
operator|.
name|remove
argument_list|(
name|dbEntityName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbEntityToDelete
operator|!=
literal|null
operator|&&
name|clearDependencies
condition|)
block|{
for|for
control|(
name|DbEntity
name|dbEnt
range|:
name|this
operator|.
name|getDbEntities
argument_list|()
control|)
block|{
comment|// take a copy since we're going to modify the entity
for|for
control|(
name|Relationship
name|rel
range|:
operator|new
name|ArrayList
argument_list|<
name|Relationship
argument_list|>
argument_list|(
name|dbEnt
operator|.
name|getRelationships
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|dbEntityName
operator|.
name|equals
argument_list|(
name|rel
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
condition|)
block|{
name|dbEnt
operator|.
name|removeRelationship
argument_list|(
name|rel
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Remove all obj relationships referencing removed DbRelationships.
for|for
control|(
name|ObjEntity
name|objEnt
range|:
name|this
operator|.
name|getObjEntities
argument_list|()
control|)
block|{
if|if
condition|(
name|dbEntityToDelete
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|objEnt
operator|.
name|getDbEntityName
argument_list|()
argument_list|)
condition|)
block|{
name|objEnt
operator|.
name|clearDbMapping
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Relationship
name|rel
range|:
name|objEnt
operator|.
name|getRelationships
argument_list|()
control|)
block|{
for|for
control|(
name|DbRelationship
name|dbRel
range|:
operator|(
operator|(
name|ObjRelationship
operator|)
name|rel
operator|)
operator|.
name|getDbRelationships
argument_list|()
control|)
block|{
if|if
condition|(
name|dbRel
operator|.
name|getTargetEntity
argument_list|()
operator|==
name|dbEntityToDelete
condition|)
block|{
operator|(
operator|(
name|ObjRelationship
operator|)
name|rel
operator|)
operator|.
name|clearDbRelationships
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**      * "Dirty" remove of the ObjEntity from the data map.      */
specifier|public
name|void
name|removeObjEntity
parameter_list|(
name|String
name|objEntityName
parameter_list|)
block|{
name|removeObjEntity
argument_list|(
name|objEntityName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes ObjEntity from the DataMap. If<code>clearDependencies</code> is true, all      * ObjRelationships that reference this entity are also removed.      *       * @since 1.1      */
specifier|public
name|void
name|removeObjEntity
parameter_list|(
name|String
name|objEntityName
parameter_list|,
name|boolean
name|clearDependencies
parameter_list|)
block|{
name|ObjEntity
name|entity
init|=
name|objEntityMap
operator|.
name|remove
argument_list|(
name|objEntityName
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
operator|&&
name|clearDependencies
condition|)
block|{
comment|// remove relationships that point to this entity
for|for
control|(
name|ObjEntity
name|ent
range|:
name|getObjEntities
argument_list|()
control|)
block|{
comment|// take a copy since we're going to modify the entity
for|for
control|(
name|Relationship
name|relationship
range|:
operator|new
name|ArrayList
argument_list|<
name|Relationship
argument_list|>
argument_list|(
name|ent
operator|.
name|getRelationships
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|objEntityName
operator|.
name|equals
argument_list|(
name|relationship
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
operator|||
name|objEntityName
operator|.
name|equals
argument_list|(
name|relationship
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
condition|)
block|{
name|ent
operator|.
name|removeRelationship
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Returns stored procedures associated with this DataMap.      */
specifier|public
name|Collection
argument_list|<
name|Procedure
argument_list|>
name|getProcedures
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|procedureMap
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns a Procedure for a given name or null if no such procedure exists. If      * Procedure is not found in this DataMap, a parent EntityNamcespace is searched.      */
specifier|public
name|Procedure
name|getProcedure
parameter_list|(
name|String
name|procedureName
parameter_list|)
block|{
name|Procedure
name|procedure
init|=
name|procedureMap
operator|.
name|get
argument_list|(
name|procedureName
argument_list|)
decl_stmt|;
if|if
condition|(
name|procedure
operator|!=
literal|null
condition|)
block|{
return|return
name|procedure
return|;
block|}
return|return
name|namespace
operator|!=
literal|null
condition|?
name|namespace
operator|.
name|getProcedure
argument_list|(
name|procedureName
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * Adds stored procedure to the list of procedures. If there is another procedure      * registered under the same name, throws an IllegalArgumentException.      */
specifier|public
name|void
name|addProcedure
parameter_list|(
name|Procedure
name|procedure
parameter_list|)
block|{
if|if
condition|(
name|procedure
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Attempt to add procedure with no name."
argument_list|)
throw|;
block|}
comment|// TODO: change method signature to return replaced procedure and make sure the
comment|// Modeler handles it...
name|Object
name|existingProcedure
init|=
name|procedureMap
operator|.
name|get
argument_list|(
name|procedure
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingProcedure
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|existingProcedure
operator|==
name|procedure
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"An attempt to override procedure '"
operator|+
name|procedure
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|procedureMap
operator|.
name|put
argument_list|(
name|procedure
operator|.
name|getName
argument_list|()
argument_list|,
name|procedure
argument_list|)
expr_stmt|;
name|procedure
operator|.
name|setDataMap
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeProcedure
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|procedureMap
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a sorted unmodifiable map of Procedures in this DataMap keyed by name.      */
specifier|public
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Procedure
argument_list|>
name|getProcedureMap
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSortedMap
argument_list|(
name|procedureMap
argument_list|)
return|;
block|}
comment|/**      * Returns a parent namespace where this DataMap resides. Parent EntityNamespace is      * used to establish relationships with entities in other DataMaps.      *       * @since 1.1      */
specifier|public
name|MappingNamespace
name|getNamespace
parameter_list|()
block|{
return|return
name|namespace
return|;
block|}
comment|/**      * Sets a parent namespace where this DataMap resides. Parent EntityNamespace is used      * to establish relationships with entities in other DataMaps.      *       * @since 1.1      */
specifier|public
name|void
name|setNamespace
parameter_list|(
name|MappingNamespace
name|namespace
parameter_list|)
block|{
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
block|}
comment|/**      * @since 1.1      */
specifier|public
name|int
name|getDefaultLockType
parameter_list|()
block|{
return|return
name|defaultLockType
return|;
block|}
comment|/**      * @since 1.1      */
specifier|public
name|void
name|setDefaultLockType
parameter_list|(
name|int
name|defaultLockType
parameter_list|)
block|{
name|this
operator|.
name|defaultLockType
operator|=
name|defaultLockType
expr_stmt|;
block|}
comment|/**      * @since 1.2      */
specifier|public
name|boolean
name|isClientSupported
parameter_list|()
block|{
return|return
name|clientSupported
return|;
block|}
comment|/**      * @since 1.2      */
specifier|public
name|void
name|setClientSupported
parameter_list|(
name|boolean
name|clientSupport
parameter_list|)
block|{
name|this
operator|.
name|clientSupported
operator|=
name|clientSupport
expr_stmt|;
block|}
comment|/**      * Returns default client package.      *       * @since 1.2      */
specifier|public
name|String
name|getDefaultClientPackage
parameter_list|()
block|{
return|return
name|defaultClientPackage
return|;
block|}
comment|/**      * @since 1.2      */
specifier|public
name|void
name|setDefaultClientPackage
parameter_list|(
name|String
name|defaultClientPackage
parameter_list|)
block|{
name|this
operator|.
name|defaultClientPackage
operator|=
name|defaultClientPackage
expr_stmt|;
block|}
comment|/**      * Returns default client superclass.      *       * @since 3.0      */
specifier|public
name|String
name|getDefaultClientSuperclass
parameter_list|()
block|{
return|return
name|defaultClientSuperclass
return|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|void
name|setDefaultClientSuperclass
parameter_list|(
name|String
name|defaultClientSuperclass
parameter_list|)
block|{
name|this
operator|.
name|defaultClientSuperclass
operator|=
name|defaultClientSuperclass
expr_stmt|;
block|}
comment|/**      * @since 1.1      */
specifier|public
name|String
name|getDefaultPackage
parameter_list|()
block|{
return|return
name|defaultPackage
return|;
block|}
comment|/**      * @since 1.1      */
specifier|public
name|void
name|setDefaultPackage
parameter_list|(
name|String
name|defaultPackage
parameter_list|)
block|{
name|this
operator|.
name|defaultPackage
operator|=
name|defaultPackage
expr_stmt|;
block|}
comment|/**      * @since 1.1      */
specifier|public
name|String
name|getDefaultSchema
parameter_list|()
block|{
return|return
name|defaultSchema
return|;
block|}
comment|/**      * @since 1.1      */
specifier|public
name|void
name|setDefaultSchema
parameter_list|(
name|String
name|defaultSchema
parameter_list|)
block|{
name|this
operator|.
name|defaultSchema
operator|=
name|defaultSchema
expr_stmt|;
block|}
comment|/**      * @since 1.1      */
specifier|public
name|String
name|getDefaultSuperclass
parameter_list|()
block|{
return|return
name|defaultSuperclass
return|;
block|}
comment|/**      * @since 1.1      */
specifier|public
name|void
name|setDefaultSuperclass
parameter_list|(
name|String
name|defaultSuperclass
parameter_list|)
block|{
name|this
operator|.
name|defaultSuperclass
operator|=
name|defaultSuperclass
expr_stmt|;
block|}
comment|/**      * DbEntity property changed. May be name, attribute or relationship added or removed,      * etc. Attribute and relationship property changes are handled in respective      * listeners.      *       * @since 1.2      */
specifier|public
name|void
name|dbEntityChanged
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|Entity
name|entity
init|=
name|e
operator|.
name|getEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|instanceof
name|DbEntity
condition|)
block|{
name|DbEntity
name|dbEntity
init|=
operator|(
name|DbEntity
operator|)
name|entity
decl_stmt|;
name|dbEntity
operator|.
name|dbEntityChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// finish up the name change here because we
comment|// do not have direct access to the dbEntityMap
if|if
condition|(
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
comment|// remove the entity from the map with the old name
name|dbEntityMap
operator|.
name|remove
argument_list|(
name|e
operator|.
name|getOldName
argument_list|()
argument_list|)
expr_stmt|;
comment|// add the entity back in with the new name
name|dbEntityMap
operator|.
name|put
argument_list|(
name|e
operator|.
name|getNewName
argument_list|()
argument_list|,
name|dbEntity
argument_list|)
expr_stmt|;
comment|// important - clear parent namespace:
name|MappingNamespace
name|ns
init|=
name|getNamespace
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|instanceof
name|EntityResolver
condition|)
block|{
operator|(
operator|(
name|EntityResolver
operator|)
name|ns
operator|)
operator|.
name|clearCache
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** New entity has been created/added. */
specifier|public
name|void
name|dbEntityAdded
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
comment|// does nothing currently
block|}
comment|/** Entity has been removed. */
specifier|public
name|void
name|dbEntityRemoved
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
comment|// does nothing currently
block|}
comment|/**      * ObjEntity property changed. May be name, attribute or relationship added or      * removed, etc. Attribute and relationship property changes are handled in respective      * listeners.      *       * @since 1.2      */
specifier|public
name|void
name|objEntityChanged
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|Entity
name|entity
init|=
name|e
operator|.
name|getEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|instanceof
name|ObjEntity
condition|)
block|{
name|ObjEntity
name|objEntity
init|=
operator|(
name|ObjEntity
operator|)
name|entity
decl_stmt|;
name|objEntity
operator|.
name|objEntityChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// finish up the name change here because we
comment|// do not have direct access to the objEntityMap
if|if
condition|(
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
comment|// remove the entity from the map with the old name
name|objEntityMap
operator|.
name|remove
argument_list|(
name|e
operator|.
name|getOldName
argument_list|()
argument_list|)
expr_stmt|;
comment|// add the entity back in with the new name
name|objEntityMap
operator|.
name|put
argument_list|(
name|e
operator|.
name|getNewName
argument_list|()
argument_list|,
name|objEntity
argument_list|)
expr_stmt|;
comment|// important - clear parent namespace:
name|MappingNamespace
name|ns
init|=
name|getNamespace
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|instanceof
name|EntityResolver
condition|)
block|{
operator|(
operator|(
name|EntityResolver
operator|)
name|ns
operator|)
operator|.
name|clearCache
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** New entity has been created/added. */
specifier|public
name|void
name|objEntityAdded
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
comment|// does nothing currently
block|}
comment|/** Entity has been removed. */
specifier|public
name|void
name|objEntityRemoved
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
comment|// does nothing currently
block|}
comment|/**      * @since 3.1      */
specifier|public
name|Resource
name|getConfigurationSource
parameter_list|()
block|{
return|return
name|configurationSource
return|;
block|}
comment|/**      * @since 3.1      */
specifier|public
name|void
name|setConfigurationSource
parameter_list|(
name|Resource
name|configurationSource
parameter_list|)
block|{
name|this
operator|.
name|configurationSource
operator|=
name|configurationSource
expr_stmt|;
block|}
block|}
end_class

end_unit

