begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * ProjectFile is an adapter from an object in Cayenne project  * to its representation in the file system.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ProjectFile
block|{
specifier|protected
name|String
name|location
decl_stmt|;
specifier|protected
name|File
name|tempFile
decl_stmt|;
specifier|protected
name|Project
name|projectObj
decl_stmt|;
specifier|public
name|ProjectFile
parameter_list|()
block|{
block|}
comment|/**      * Constructor for ProjectFile.      */
specifier|public
name|ProjectFile
parameter_list|(
name|Project
name|project
parameter_list|,
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|projectObj
operator|=
name|project
expr_stmt|;
block|}
comment|/**      * Builds a filename from the object name and "file suffix".      */
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
name|String
name|oName
init|=
name|getObjectName
argument_list|()
decl_stmt|;
if|if
condition|(
name|oName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null name."
argument_list|)
throw|;
block|}
return|return
name|oName
operator|+
name|getLocationSuffix
argument_list|()
return|;
block|}
comment|/**     * Returns saved location of a file.     */
specifier|public
name|String
name|getOldLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
comment|/**      * Returns suffix to append to object name when       * creating a file name. Default implementation       * returns empty string.      */
specifier|public
name|String
name|getLocationSuffix
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
comment|/**      * Returns a project object associated with this file.      */
specifier|public
specifier|abstract
name|Object
name|getObject
parameter_list|()
function_decl|;
comment|/**      * Returns a name of associated object, that is also       * used as a file name.      */
specifier|public
specifier|abstract
name|String
name|getObjectName
parameter_list|()
function_decl|;
comment|/**      * Saves an underlying object to the file.       * The procedure is dependent on the type of      * object and is implemented by concrete subclasses.      */
specifier|public
specifier|abstract
name|void
name|save
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Returns true if this file wrapper can handle a      * specified object.      */
specifier|public
specifier|abstract
name|boolean
name|canHandle
parameter_list|(
name|Object
name|obj
parameter_list|)
function_decl|;
comment|/**      * Returns true if this file wrapper can handle an      * internally stored object.      */
specifier|public
name|boolean
name|canHandleObject
parameter_list|()
block|{
return|return
name|canHandle
argument_list|(
name|getObject
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Replaces internally stored filename with the current object name.      */
specifier|public
name|void
name|synchronizeLocation
parameter_list|()
block|{
name|location
operator|=
name|getLocation
argument_list|()
expr_stmt|;
block|}
comment|/**      * This method is called by project to let file know that      * it will be saved. Default implementation is a noop.      */
specifier|public
name|void
name|willSave
parameter_list|()
block|{
block|}
comment|/**      * Saves ProjectFile's underlying object to a temporary       * file, returning this file to the caller. If any problems are       * encountered during saving, an Exception is thrown.      */
specifier|public
name|void
name|saveTemp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// cleanup any previous temp files
if|if
condition|(
name|tempFile
operator|!=
literal|null
operator|&&
name|tempFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tempFile
operator|=
literal|null
expr_stmt|;
block|}
comment|// check write permissions for the target final file...
name|File
name|finalFile
init|=
name|resolveFile
argument_list|()
decl_stmt|;
name|checkWritePermissions
argument_list|(
name|finalFile
argument_list|)
expr_stmt|;
comment|// ...but save to temp file first
name|tempFile
operator|=
name|tempFileForFile
argument_list|(
name|finalFile
argument_list|)
expr_stmt|;
comment|// must encode as UTF-8 - a default used by all Cayenne XML files
name|FileOutputStream
name|fout
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
name|OutputStreamWriter
name|fw
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|fout
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
try|try
block|{
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|fw
argument_list|)
decl_stmt|;
try|try
block|{
name|save
argument_list|(
name|pw
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns a file which is a canonical representation of the       * file to store a wrapped object. If an object was renamed,       * the<b>new</b> name is returned.      */
specifier|public
name|File
name|resolveFile
parameter_list|()
block|{
return|return
name|getProject
argument_list|()
operator|.
name|resolveFile
argument_list|(
name|getLocation
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns a file which is a canonical representation of the       * file to store a wrapped object. If an object was renamed,       * the<b>old</b> name is returned. Returns null if this file       * has never been saved before.       */
specifier|public
name|File
name|resolveOldFile
parameter_list|()
block|{
name|String
name|oldLocation
init|=
name|getOldLocation
argument_list|()
decl_stmt|;
return|return
operator|(
name|oldLocation
operator|!=
literal|null
operator|)
condition|?
name|getProject
argument_list|()
operator|.
name|resolveFile
argument_list|(
name|oldLocation
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * Finishes saving the underlying object.      */
specifier|public
name|File
name|saveCommit
parameter_list|()
throws|throws
name|ProjectException
block|{
name|File
name|finalFile
init|=
name|resolveFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|tempFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|finalFile
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|finalFile
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ProjectException
argument_list|(
literal|"Unable to remove old master file : "
operator|+
name|finalFile
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|tempFile
operator|.
name|renameTo
argument_list|(
name|finalFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ProjectException
argument_list|(
literal|"Unable to move "
operator|+
name|tempFile
operator|+
literal|" to "
operator|+
name|finalFile
argument_list|)
throw|;
block|}
name|tempFile
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|finalFile
return|;
block|}
comment|/**      * Cleans up after unsuccessful or canceled save attempt.      */
specifier|public
name|void
name|saveUndo
parameter_list|()
block|{
if|if
condition|(
name|tempFile
operator|!=
literal|null
operator|&&
name|tempFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tempFile
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**       * Returns the project.       * @return Project       */
specifier|public
name|Project
name|getProject
parameter_list|()
block|{
return|return
name|projectObj
return|;
block|}
specifier|public
name|boolean
name|isRenamed
parameter_list|()
block|{
return|return
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|location
argument_list|,
name|getLocation
argument_list|()
argument_list|)
return|;
block|}
comment|/**       * Creates a temporary file for the master file.      */
specifier|protected
name|File
name|tempFileForFile
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|parent
init|=
name|f
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|f
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|length
argument_list|()
operator|<
literal|3
condition|)
block|{
name|name
operator|=
literal|"cayenne-project"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|parent
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|parent
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error creating directory tree: "
operator|+
name|parent
argument_list|)
throw|;
block|}
block|}
return|return
name|File
operator|.
name|createTempFile
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|parent
argument_list|)
return|;
block|}
specifier|protected
name|void
name|checkWritePermissions
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Target file is a directory: "
operator|+
name|file
argument_list|)
throw|;
block|}
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|file
operator|.
name|canWrite
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't write to file: "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"ProjectFile ["
argument_list|)
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]: name = "
argument_list|)
expr_stmt|;
if|if
condition|(
name|getObject
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"*null*"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
name|getObjectName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

