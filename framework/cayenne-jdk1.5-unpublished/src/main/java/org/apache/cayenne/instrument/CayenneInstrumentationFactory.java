begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|instrument
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|instrument
operator|.
name|Instrumentation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_comment
comment|/**  * An instrumentation factory based on CayenneAgent.  *   * @since 3.0  */
end_comment

begin_class
specifier|public
class|class
name|CayenneInstrumentationFactory
implements|implements
name|InstrumentationFactory
block|{
specifier|static
specifier|final
name|String
name|AGENT_CLASS
init|=
literal|"org.apache.cayenne.instrument.CayenneAgent"
decl_stmt|;
specifier|public
name|Instrumentation
name|getInstrumentation
parameter_list|()
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|agent
init|=
name|Class
operator|.
name|forName
argument_list|(
name|AGENT_CLASS
argument_list|,
literal|false
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|Method
name|getInstrumentation
init|=
name|agent
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getInstrumentation"
argument_list|)
decl_stmt|;
return|return
operator|(
name|Instrumentation
operator|)
name|getInstrumentation
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

