begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ValueHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyUtils
import|;
end_import

begin_comment
comment|/**  * A List implementation that would maintain its internal ordering based on some object  * numeric "index" property. When objects are added to the list at a certain index, an  * "index" property is modified to reflect list order, when objects are removed, their  * index property is set to the negative number.  *<p>  * For performance reasons this implementation does not guarantee that there is no gaps in  * the integer ordering sequence (i.e. generally  *<code>object.getIndexProperty() != list.indexOf(object)</code>). However it  * guarantees the right ordering based on index property.  *   * @since 1.2  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|IndexPropertyList
extends|extends
name|AbstractList
implements|implements
name|ValueHolder
block|{
comment|/**      * A default gap maintained between elements index property values. Gaps bigger than 1      * ensure faster and less intrusive additions and removals.      */
specifier|static
specifier|final
name|int
name|DEFAULT_GAP
init|=
literal|3
decl_stmt|;
comment|/**      * A list used for the actual objects storage.      */
specifier|protected
name|List
name|list
decl_stmt|;
specifier|protected
name|String
name|indexProperty
decl_stmt|;
name|boolean
name|dirty
decl_stmt|;
name|Comparator
name|comparator
decl_stmt|;
comment|/**      * Creates an empty NumericPropertyOrderedList.      */
specifier|public
name|IndexPropertyList
parameter_list|(
name|String
name|indexProperty
parameter_list|)
block|{
name|this
argument_list|(
name|indexProperty
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a NumericPropertyOrderedList that decorates another list. If the list is      * not known to be properly sorted, caller must set<em>sortNeeded</em> to true.      * This will result in sorting the original list on first access attempt.      */
specifier|public
name|IndexPropertyList
parameter_list|(
name|String
name|indexProperty
parameter_list|,
name|List
name|objects
parameter_list|,
name|boolean
name|sortNeeded
parameter_list|)
block|{
if|if
condition|(
name|indexProperty
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null sortProperty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|objects
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null objects list."
argument_list|)
throw|;
block|}
name|this
operator|.
name|indexProperty
operator|=
name|indexProperty
expr_stmt|;
name|this
operator|.
name|list
operator|=
name|objects
expr_stmt|;
comment|// be lazy - don't sort here, as (a) it may never be needed and (b) a list can be
comment|// a Cayenne fault, so resolving it too early is undesirable
name|this
operator|.
name|dirty
operator|=
name|sortNeeded
expr_stmt|;
block|}
name|ValueHolder
name|getWrappedValueHolder
parameter_list|()
block|{
return|return
operator|(
name|list
operator|instanceof
name|ValueHolder
operator|)
condition|?
operator|(
name|ValueHolder
operator|)
name|list
else|:
literal|null
return|;
block|}
specifier|public
name|boolean
name|isFault
parameter_list|()
block|{
name|ValueHolder
name|h
init|=
name|getWrappedValueHolder
argument_list|()
decl_stmt|;
return|return
operator|(
name|h
operator|!=
literal|null
operator|)
condition|?
name|h
operator|.
name|isFault
argument_list|()
else|:
literal|false
return|;
block|}
specifier|public
name|Object
name|setValueDirectly
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
name|ValueHolder
name|h
init|=
name|getWrappedValueHolder
argument_list|()
decl_stmt|;
return|return
name|h
operator|!=
literal|null
condition|?
name|h
operator|.
name|setValueDirectly
argument_list|(
name|value
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
name|ValueHolder
name|h
init|=
name|getWrappedValueHolder
argument_list|()
decl_stmt|;
return|return
name|h
operator|!=
literal|null
condition|?
name|h
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|Object
name|getValue
parameter_list|()
throws|throws
name|CayenneRuntimeException
block|{
name|ValueHolder
name|h
init|=
name|getWrappedValueHolder
argument_list|()
decl_stmt|;
return|return
name|h
operator|!=
literal|null
condition|?
name|h
operator|.
name|getValue
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
name|Object
name|getValueDirectly
parameter_list|()
throws|throws
name|CayenneRuntimeException
block|{
name|ValueHolder
name|h
init|=
name|getWrappedValueHolder
argument_list|()
decl_stmt|;
return|return
name|h
operator|!=
literal|null
condition|?
name|h
operator|.
name|getValueDirectly
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
name|void
name|invalidate
parameter_list|()
block|{
name|ValueHolder
name|h
init|=
name|getWrappedValueHolder
argument_list|()
decl_stmt|;
if|if
condition|(
name|h
operator|!=
literal|null
condition|)
block|{
name|h
operator|.
name|invalidate
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Changes list state to "dirty" forcing reordering on next access.      */
specifier|public
name|void
name|touch
parameter_list|()
block|{
name|this
operator|.
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Object
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|dirty
condition|)
block|{
name|sort
argument_list|()
expr_stmt|;
block|}
return|return
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
if|if
condition|(
name|dirty
condition|)
block|{
name|sort
argument_list|()
expr_stmt|;
block|}
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|Object
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|Object
name|element
parameter_list|)
block|{
if|if
condition|(
name|dirty
condition|)
block|{
name|sort
argument_list|()
expr_stmt|;
block|}
name|Object
name|removed
init|=
name|list
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|!=
literal|null
condition|)
block|{
name|int
name|indexValue
init|=
operator|(
name|removed
operator|!=
literal|null
operator|)
condition|?
name|getIndexValue
argument_list|(
name|removed
argument_list|)
else|:
name|calculateIndexValue
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|setIndexValue
argument_list|(
name|element
argument_list|,
name|indexValue
argument_list|)
expr_stmt|;
name|shift
argument_list|(
name|index
operator|+
literal|1
argument_list|,
name|indexValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|removed
operator|!=
literal|null
operator|&&
name|removed
operator|!=
name|element
condition|)
block|{
name|setIndexValue
argument_list|(
name|removed
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|removed
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|Object
name|element
parameter_list|)
block|{
if|if
condition|(
name|dirty
condition|)
block|{
name|sort
argument_list|()
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|!=
literal|null
condition|)
block|{
name|int
name|indexValue
init|=
name|calculateIndexValue
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|setIndexValue
argument_list|(
name|element
argument_list|,
name|indexValue
argument_list|)
expr_stmt|;
name|shift
argument_list|(
name|index
operator|+
literal|1
argument_list|,
name|indexValue
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Object
name|remove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|dirty
condition|)
block|{
name|sort
argument_list|()
expr_stmt|;
block|}
name|Object
name|removed
init|=
name|list
operator|.
name|remove
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|removed
operator|!=
literal|null
condition|)
block|{
name|setIndexValue
argument_list|(
name|removed
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|removed
return|;
block|}
comment|// ============================================
comment|// ***** Methods to maintain ordering ******
comment|// ============================================
comment|/**      * Calculates an index value at the specified list index. Note that using this value      * may require a shift of the objects following this index.      */
specifier|protected
name|int
name|calculateIndexValue
parameter_list|(
name|int
name|listIndex
parameter_list|)
block|{
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
name|listIndex
argument_list|)
throw|;
block|}
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|listIndex
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// handle lists with teo or more elements...
comment|// last element
if|if
condition|(
name|listIndex
operator|==
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
return|return
name|getIndexValue
argument_list|(
name|get
argument_list|(
name|listIndex
operator|-
literal|1
argument_list|)
argument_list|)
operator|+
name|DEFAULT_GAP
return|;
block|}
name|int
name|from
init|=
operator|(
name|listIndex
operator|==
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
name|getIndexValue
argument_list|(
name|get
argument_list|(
name|listIndex
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|to
init|=
name|getIndexValue
argument_list|(
name|get
argument_list|(
name|listIndex
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|to
operator|-
name|from
operator|>
literal|1
operator|)
condition|?
operator|(
name|to
operator|-
name|from
operator|)
operator|/
literal|2
operator|+
name|from
else|:
name|from
operator|+
name|DEFAULT_GAP
return|;
block|}
specifier|protected
name|int
name|getIndexValue
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|Number
name|n
init|=
operator|(
name|Number
operator|)
name|PropertyUtils
operator|.
name|getProperty
argument_list|(
name|object
argument_list|,
name|indexProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Null index property '"
operator|+
name|indexProperty
operator|+
literal|"' for object "
operator|+
name|object
argument_list|)
throw|;
block|}
return|return
name|n
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|protected
name|void
name|setIndexValue
parameter_list|(
name|Object
name|object
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|PropertyUtils
operator|.
name|setProperty
argument_list|(
name|object
argument_list|,
name|indexProperty
argument_list|,
operator|new
name|Integer
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|shift
parameter_list|(
name|int
name|startIndex
parameter_list|,
name|int
name|afterIndexValue
parameter_list|)
block|{
name|int
name|size
init|=
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startIndex
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|object
init|=
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|indexValue
init|=
name|getIndexValue
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexValue
operator|>
name|afterIndexValue
condition|)
block|{
break|break;
block|}
name|int
name|newValue
init|=
name|calculateIndexValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|setIndexValue
argument_list|(
name|object
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|afterIndexValue
operator|=
name|newValue
expr_stmt|;
block|}
block|}
comment|/**      * Sorts internal list.      */
specifier|protected
name|void
name|sort
parameter_list|()
block|{
if|if
condition|(
operator|!
name|dirty
condition|)
block|{
return|return;
block|}
comment|// do not directly sort Cayenne lists, sort the underlying list instead to avoid a
comment|// bunch of additions/removals
name|Collections
operator|.
name|sort
argument_list|(
name|unwrapList
argument_list|()
argument_list|,
name|getComparator
argument_list|()
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|false
expr_stmt|;
block|}
name|List
name|unwrapList
parameter_list|()
block|{
if|if
condition|(
name|list
operator|instanceof
name|PersistentObjectList
condition|)
block|{
return|return
operator|(
operator|(
name|PersistentObjectList
operator|)
name|list
operator|)
operator|.
name|resolvedObjectList
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|list
return|;
block|}
block|}
comment|/**      * Returns a property Comaparator, creating it on demand.      */
name|Comparator
name|getComparator
parameter_list|()
block|{
if|if
condition|(
name|comparator
operator|==
literal|null
condition|)
block|{
name|comparator
operator|=
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
if|if
condition|(
operator|(
name|o1
operator|==
literal|null
operator|&&
name|o2
operator|==
literal|null
operator|)
operator|||
name|o1
operator|==
name|o2
condition|)
block|{
return|return
literal|0
return|;
block|}
if|else if
condition|(
name|o1
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|else if
condition|(
name|o2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
name|Comparable
name|p1
init|=
operator|(
name|Comparable
operator|)
name|PropertyUtils
operator|.
name|getProperty
argument_list|(
name|o1
argument_list|,
name|indexProperty
argument_list|)
decl_stmt|;
name|Comparable
name|p2
init|=
operator|(
name|Comparable
operator|)
name|PropertyUtils
operator|.
name|getProperty
argument_list|(
name|o2
argument_list|,
name|indexProperty
argument_list|)
decl_stmt|;
return|return
operator|(
name|p1
operator|==
literal|null
operator|)
condition|?
operator|-
literal|1
else|:
name|p1
operator|.
name|compareTo
argument_list|(
name|p2
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
return|return
name|comparator
return|;
block|}
block|}
end_class

end_unit

