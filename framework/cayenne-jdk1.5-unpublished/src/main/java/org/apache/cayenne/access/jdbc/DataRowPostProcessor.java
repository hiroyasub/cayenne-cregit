begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|trans
operator|.
name|SelectTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|ExtendedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityInheritanceTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_comment
comment|/**  * Deals with DataRow type conversion in inheritance situations.  *   * @since 1.2  */
end_comment

begin_class
class|class
name|DataRowPostProcessor
block|{
specifier|private
name|EntityInheritanceTree
name|inheritanceTree
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|ColumnOverride
argument_list|>
argument_list|>
name|columnOverrides
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|ColumnOverride
argument_list|>
name|defaultOverrides
decl_stmt|;
comment|// factory method
specifier|static
name|DataRowPostProcessor
name|createPostProcessor
parameter_list|(
name|SelectTranslator
name|translator
parameter_list|)
block|{
name|Map
name|attributeOverrides
init|=
name|translator
operator|.
name|getAttributeOverrides
argument_list|()
decl_stmt|;
if|if
condition|(
name|attributeOverrides
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ColumnDescriptor
index|[]
name|columns
init|=
name|translator
operator|.
name|getResultColumns
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|ColumnOverride
argument_list|>
argument_list|>
name|columnOverrides
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|ColumnOverride
argument_list|>
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|attributeOverrides
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ObjAttribute
name|attribute
init|=
operator|(
name|ObjAttribute
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Entity
name|entity
init|=
name|attribute
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|String
name|key
init|=
literal|null
decl_stmt|;
name|int
name|jdbcType
init|=
name|TypesMapping
operator|.
name|NOT_DEFINED
decl_stmt|;
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|columns
index|[
name|i
index|]
operator|==
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
comment|// if attribute type is the same as column, there is no conflict
if|if
condition|(
operator|!
name|attribute
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|columns
index|[
name|i
index|]
operator|.
name|getJavaClass
argument_list|()
argument_list|)
condition|)
block|{
comment|// note that JDBC index is "1" based
name|index
operator|=
name|i
operator|+
literal|1
expr_stmt|;
name|jdbcType
operator|=
name|columns
index|[
name|i
index|]
operator|.
name|getJdbcType
argument_list|()
expr_stmt|;
name|key
operator|=
name|columns
index|[
name|i
index|]
operator|.
name|getDataRowKey
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|index
operator|<
literal|1
condition|)
block|{
continue|continue;
block|}
name|ExtendedType
name|converter
init|=
name|translator
operator|.
name|getAdapter
argument_list|()
operator|.
name|getExtendedTypes
argument_list|()
operator|.
name|getRegisteredType
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|ColumnOverride
argument_list|>
name|overrides
init|=
name|columnOverrides
operator|.
name|get
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|overrides
operator|==
literal|null
condition|)
block|{
name|overrides
operator|=
operator|new
name|ArrayList
argument_list|<
name|ColumnOverride
argument_list|>
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|columnOverrides
operator|.
name|put
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|,
name|overrides
argument_list|)
expr_stmt|;
block|}
name|overrides
operator|.
name|add
argument_list|(
operator|new
name|ColumnOverride
argument_list|(
name|index
argument_list|,
name|key
argument_list|,
name|converter
argument_list|,
name|jdbcType
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// inject null post-processor
return|return
name|columnOverrides
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|DataRowPostProcessor
argument_list|(
name|translator
operator|.
name|getRootInheritanceTree
argument_list|()
argument_list|,
name|columnOverrides
argument_list|)
return|;
block|}
specifier|private
name|DataRowPostProcessor
parameter_list|(
name|EntityInheritanceTree
name|inheritanceTree
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|ColumnOverride
argument_list|>
argument_list|>
name|columnOverrides
parameter_list|)
block|{
if|if
condition|(
name|inheritanceTree
operator|!=
literal|null
operator|&&
name|inheritanceTree
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|inheritanceTree
operator|=
name|inheritanceTree
expr_stmt|;
name|this
operator|.
name|columnOverrides
operator|=
name|columnOverrides
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|columnOverrides
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No inheritance - there must be only one override set"
argument_list|)
throw|;
block|}
name|defaultOverrides
operator|=
name|columnOverrides
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|postprocessRow
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|DataRow
name|row
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|ColumnOverride
argument_list|>
name|overrides
init|=
name|getOverrides
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|overrides
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|ColumnOverride
name|override
range|:
name|overrides
control|)
block|{
name|Object
name|newValue
init|=
name|override
operator|.
name|converter
operator|.
name|materializeObject
argument_list|(
name|resultSet
argument_list|,
name|override
operator|.
name|index
argument_list|,
name|override
operator|.
name|jdbcType
argument_list|)
decl_stmt|;
name|row
operator|.
name|put
argument_list|(
name|override
operator|.
name|key
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|final
name|Collection
argument_list|<
name|ColumnOverride
argument_list|>
name|getOverrides
parameter_list|(
name|DataRow
name|row
parameter_list|)
block|{
if|if
condition|(
name|defaultOverrides
operator|!=
literal|null
condition|)
block|{
return|return
name|defaultOverrides
return|;
block|}
else|else
block|{
name|ObjEntity
name|entity
init|=
name|inheritanceTree
operator|.
name|entityMatchingRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
return|return
name|entity
operator|!=
literal|null
condition|?
name|columnOverrides
operator|.
name|get
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
block|}
specifier|static
specifier|final
class|class
name|ColumnOverride
block|{
name|int
name|index
decl_stmt|;
name|int
name|jdbcType
decl_stmt|;
name|String
name|key
decl_stmt|;
name|ExtendedType
name|converter
decl_stmt|;
name|ColumnOverride
parameter_list|(
name|int
name|index
parameter_list|,
name|String
name|key
parameter_list|,
name|ExtendedType
name|converter
parameter_list|,
name|int
name|jdbcType
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|converter
operator|=
name|converter
expr_stmt|;
name|this
operator|.
name|jdbcType
operator|=
name|jdbcType
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

