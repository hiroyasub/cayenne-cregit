begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|ConfigStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|DriverDataSourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|RuntimeLoadDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_comment
comment|/**  * Represents Cayenne application project.  */
end_comment

begin_class
specifier|public
class|class
name|ApplicationProject
extends|extends
name|Project
block|{
specifier|protected
name|Configuration
name|configuration
decl_stmt|;
comment|/**      * Constructor for ApplicationProject.      *       * @param projectFile      */
specifier|public
name|ApplicationProject
parameter_list|(
name|File
name|projectFile
parameter_list|)
block|{
name|this
argument_list|(
name|projectFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since 1.2      */
specifier|public
name|ApplicationProject
parameter_list|(
name|File
name|projectFile
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
comment|// normalize project file...
if|if
condition|(
name|projectFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|projectFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|projectFile
operator|=
operator|new
name|File
argument_list|(
name|projectFile
operator|.
name|getPath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|Configuration
operator|.
name|DEFAULT_DOMAIN_FILE
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|projectFile
operator|=
name|projectFile
operator|.
name|getCanonicalFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProjectException
argument_list|(
literal|"Bad project file: "
operator|+
name|projectFile
argument_list|)
throw|;
block|}
block|}
name|configuration
operator|=
operator|new
name|ProjectConfiguration
argument_list|(
name|projectFile
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setLoaderDelegate
argument_list|(
operator|new
name|ProjectLoader
argument_list|(
name|configuration
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|initialize
argument_list|(
name|projectFile
argument_list|)
expr_stmt|;
name|postInitialize
argument_list|(
name|projectFile
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since 1.1      */
annotation|@
name|Override
specifier|public
name|void
name|upgrade
parameter_list|()
throws|throws
name|ProjectException
block|{
name|ApplicationUpgradeHandler
operator|.
name|sharedHandler
argument_list|()
operator|.
name|performUpgrade
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initializes internal<code>Configuration</code> object and then calls super.      */
annotation|@
name|Override
specifier|protected
name|void
name|postInitialize
parameter_list|(
name|File
name|projectFile
parameter_list|)
block|{
name|loadProject
argument_list|()
expr_stmt|;
name|super
operator|.
name|postInitialize
argument_list|(
name|projectFile
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since 1.2      */
specifier|protected
name|void
name|loadProject
parameter_list|()
block|{
comment|// try to initialize configuration
if|if
condition|(
name|configuration
operator|.
name|canInitialize
argument_list|()
condition|)
block|{
try|try
block|{
name|configuration
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProjectException
argument_list|(
literal|"Error initializaing project configuration."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|configuration
operator|.
name|didInitialize
argument_list|()
expr_stmt|;
block|}
comment|// set default version
if|if
condition|(
name|configuration
operator|.
name|getProjectVersion
argument_list|()
operator|==
literal|null
condition|)
block|{
name|configuration
operator|.
name|setProjectVersion
argument_list|(
name|ApplicationUpgradeHandler
operator|.
name|sharedHandler
argument_list|()
operator|.
name|supportedVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns Cayenne configuration object associated with this project.      */
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
comment|/**      * Sets Cayenne configuration object associated with this project.      */
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|ProjectConfiguration
name|config
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|config
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkForUpgrades
parameter_list|()
block|{
name|this
operator|.
name|upgradeStatus
operator|=
name|ApplicationUpgradeHandler
operator|.
name|sharedHandler
argument_list|()
operator|.
name|checkForUpgrades
argument_list|(
name|configuration
argument_list|,
name|upgradeMessages
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.cayenne.project.Project#getChildren()      */
annotation|@
name|Override
specifier|public
name|List
name|getChildren
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|DataDomain
argument_list|>
argument_list|(
name|this
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getDomains
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns appropriate ProjectFile or null if object does not require a file of its      * own. In case of ApplicationProject, the nodes that require separate filed are: the      * project itself, each DataMap, each driver DataNode.      */
annotation|@
name|Override
specifier|public
name|ProjectFile
name|projectFileForObject
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|requiresProjectFile
argument_list|(
name|obj
argument_list|)
condition|)
block|{
name|String
name|domainFileName
init|=
name|this
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getDomainConfigurationName
argument_list|()
decl_stmt|;
name|ApplicationProjectFile
name|file
init|=
operator|new
name|ApplicationProjectFile
argument_list|(
name|this
argument_list|,
name|domainFileName
argument_list|)
decl_stmt|;
comment|// inject save delegate...
name|file
operator|.
name|setSaveDelegate
argument_list|(
name|configuration
operator|.
name|getSaverDelegate
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
if|else if
condition|(
name|requiresMapFile
argument_list|(
name|obj
argument_list|)
condition|)
block|{
return|return
operator|new
name|DataMapFile
argument_list|(
name|this
argument_list|,
operator|(
name|DataMap
operator|)
name|obj
argument_list|)
return|;
block|}
if|else if
condition|(
name|requiresNodeFile
argument_list|(
name|obj
argument_list|)
condition|)
block|{
return|return
operator|new
name|DataNodeFile
argument_list|(
name|this
argument_list|,
operator|(
name|DataNode
operator|)
name|obj
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|boolean
name|requiresProjectFile
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|==
name|this
return|;
block|}
specifier|protected
name|boolean
name|requiresMapFile
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|DataMap
return|;
block|}
specifier|protected
name|boolean
name|requiresNodeFile
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|DataNode
condition|)
block|{
name|DataNode
name|node
init|=
operator|(
name|DataNode
operator|)
name|obj
decl_stmt|;
comment|// only driver datasource factory requires a file
if|if
condition|(
name|DriverDataSourceFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getDataSourceFactory
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|ConfigStatus
name|getLoadStatus
parameter_list|()
block|{
return|return
operator|(
name|configuration
operator|!=
literal|null
operator|)
condition|?
name|configuration
operator|.
name|getLoadStatus
argument_list|()
else|:
operator|new
name|ConfigStatus
argument_list|()
return|;
block|}
specifier|final
class|class
name|ProjectLoader
extends|extends
name|RuntimeLoadDelegate
block|{
specifier|public
name|ProjectLoader
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|,
name|config
operator|.
name|getLoadStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|updateDefaults
parameter_list|(
name|DataDomain
name|domain
parameter_list|)
block|{
comment|// do nothing...
block|}
annotation|@
name|Override
specifier|public
name|void
name|shouldLoadDataDomain
parameter_list|(
name|String
name|domainName
parameter_list|)
block|{
name|super
operator|.
name|shouldLoadDataDomain
argument_list|(
name|domainName
argument_list|)
expr_stmt|;
try|try
block|{
comment|// disable class indexing
name|findDomain
argument_list|(
name|domainName
argument_list|)
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|setIndexedByClass
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Domain is not loaded: "
operator|+
name|domainName
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|shouldLoadDataDomainProperties
parameter_list|(
name|String
name|domainName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
comment|// remove factory property to avoid instantiation attempts for unknown/invalid
comment|// classes
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|propertiesClone
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|String
name|dataContextFactory
init|=
name|propertiesClone
operator|.
name|remove
argument_list|(
name|DataDomain
operator|.
name|DATA_CONTEXT_FACTORY_PROPERTY
argument_list|)
decl_stmt|;
name|super
operator|.
name|shouldLoadDataDomainProperties
argument_list|(
name|domainName
argument_list|,
name|propertiesClone
argument_list|)
expr_stmt|;
comment|// stick property back in...
if|if
condition|(
name|dataContextFactory
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|findDomain
argument_list|(
name|domainName
argument_list|)
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|DataDomain
operator|.
name|DATA_CONTEXT_FACTORY_PROPERTY
argument_list|,
name|dataContextFactory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Domain is not loaded: "
operator|+
name|domainName
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

