begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|ResourceFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|DataMapFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|ResourceLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_comment
comment|/**  * Default MapLoader. Its responsibilities include reading DataMaps from XML files and  * saving DataMap objects back to XML.  */
end_comment

begin_class
specifier|public
class|class
name|MapLoader
extends|extends
name|DefaultHandler
block|{
comment|// TODO: andrus, 7/17/2006 - these variables, and project upgrade logic should be
comment|// refactored out of the MapLoader. In fact we should either modify raw XML during the
comment|// upgrade, or implement some consistent upgrade API across various loaders
specifier|final
specifier|static
name|String
name|_1_2_PACKAGE_PREFIX
init|=
literal|"org.objectstyle.cayenne."
decl_stmt|;
specifier|final
specifier|static
name|String
name|_2_0_PACKAGE_PREFIX
init|=
literal|"org.apache.cayenne."
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DATA_MAP_TAG
init|=
literal|"data-map"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_TAG
init|=
literal|"property"
decl_stmt|;
comment|/**      * @since 3.0      */
specifier|public
specifier|static
specifier|final
name|String
name|EMBEDDABLE_TAG
init|=
literal|"embeddable"
decl_stmt|;
comment|/**      * @since 3.0      */
specifier|public
specifier|static
specifier|final
name|String
name|EMBEDDABLE_ATTRIBUTE_TAG
init|=
literal|"embeddable-attribute"
decl_stmt|;
comment|/**      * @since 3.0      */
specifier|public
specifier|static
specifier|final
name|String
name|EMBEDDED_ATTRIBUTE_TAG
init|=
literal|"embedded-attribute"
decl_stmt|;
comment|/**      * @since 3.0      */
specifier|public
specifier|static
specifier|final
name|String
name|EMBEDDABLE_ATTRIBUTE_OVERRIDE_TAG
init|=
literal|"embeddable-attribute-override"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DB_ENTITY_TAG
init|=
literal|"db-entity"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OBJ_ENTITY_TAG
init|=
literal|"obj-entity"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DB_ATTRIBUTE_TAG
init|=
literal|"db-attribute"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OBJ_ATTRIBUTE_TAG
init|=
literal|"obj-attribute"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OBJ_ATTRIBUTE_OVERRIDE_TAG
init|=
literal|"attribute-override"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OBJ_RELATIONSHIP_TAG
init|=
literal|"obj-relationship"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DB_RELATIONSHIP_TAG
init|=
literal|"db-relationship"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DB_RELATIONSHIP_REF_TAG
init|=
literal|"db-relationship-ref"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DB_ATTRIBUTE_PAIR_TAG
init|=
literal|"db-attribute-pair"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROCEDURE_TAG
init|=
literal|"procedure"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROCEDURE_PARAMETER_TAG
init|=
literal|"procedure-parameter"
decl_stmt|;
comment|// lifecycle listeners and callbacks related
specifier|public
specifier|static
specifier|final
name|String
name|ENTITY_LISTENER_TAG
init|=
literal|"entity-listener"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PRE_PERSIST_TAG
init|=
literal|"pre-persist"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|POST_PERSIST_TAG
init|=
literal|"post-persist"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PRE_UPDATE_TAG
init|=
literal|"pre-update"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|POST_UPDATE_TAG
init|=
literal|"post-update"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PRE_REMOVE_TAG
init|=
literal|"pre-remove"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|POST_REMOVE_TAG
init|=
literal|"post-remove"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|POST_LOAD_TAG
init|=
literal|"post-load"
decl_stmt|;
comment|// Query-related
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_TAG
init|=
literal|"query"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_SQL_TAG
init|=
literal|"sql"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_EJBQL_TAG
init|=
literal|"ejbql"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_QUALIFIER_TAG
init|=
literal|"qualifier"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_ORDERING_TAG
init|=
literal|"ordering"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_PREFETCH_TAG
init|=
literal|"prefetch"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TRUE
init|=
literal|"true"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FALSE
init|=
literal|"false"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DB_KEY_GENERATOR_TAG
init|=
literal|"db-key-generator"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DB_GENERATOR_TYPE_TAG
init|=
literal|"db-generator-type"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DB_GENERATOR_NAME_TAG
init|=
literal|"db-generator-name"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DB_KEY_CACHE_SIZE_TAG
init|=
literal|"db-key-cache-size"
decl_stmt|;
comment|/**      * @since 3.0      */
specifier|public
specifier|static
specifier|final
name|String
name|OBJ_ENTITY_ROOT
init|=
literal|"obj-entity"
decl_stmt|;
comment|/**      * @since 3.0      */
specifier|public
specifier|static
specifier|final
name|String
name|DB_ENTITY_ROOT
init|=
literal|"db-entity"
decl_stmt|;
comment|/**      * @since 3.0      */
specifier|public
specifier|static
specifier|final
name|String
name|PROCEDURE_ROOT
init|=
literal|"procedure"
decl_stmt|;
comment|/**      * @since 3.0      */
specifier|public
specifier|static
specifier|final
name|String
name|DATA_MAP_ROOT
init|=
literal|"data-map"
decl_stmt|;
comment|/**      * @since 3.0      */
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_CLASS_ROOT
init|=
literal|"java-class"
decl_stmt|;
comment|// Reading from XML
specifier|private
name|DataMap
name|dataMap
decl_stmt|;
specifier|private
name|DbEntity
name|dbEntity
decl_stmt|;
specifier|private
name|ObjEntity
name|objEntity
decl_stmt|;
specifier|private
name|EntityListener
name|entityListener
decl_stmt|;
specifier|private
name|Embeddable
name|embeddable
decl_stmt|;
specifier|private
name|EmbeddedAttribute
name|embeddedAttribute
decl_stmt|;
specifier|private
name|DbRelationship
name|dbRelationship
decl_stmt|;
specifier|private
name|ObjRelationship
name|objRelationship
decl_stmt|;
specifier|private
name|DbAttribute
name|attrib
decl_stmt|;
specifier|private
name|Procedure
name|procedure
decl_stmt|;
specifier|private
name|QueryLoader
name|queryBuilder
decl_stmt|;
specifier|private
name|String
name|sqlKey
decl_stmt|;
specifier|private
name|String
name|ejbqlKey
decl_stmt|;
specifier|private
name|String
name|descending
decl_stmt|;
specifier|private
name|String
name|ignoreCase
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|StartClosure
argument_list|>
name|startTagOpMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|EndClosure
argument_list|>
name|endTagOpMap
decl_stmt|;
specifier|private
name|String
name|currentTag
decl_stmt|;
specifier|private
name|Attributes
name|currentAttributes
decl_stmt|;
specifier|private
name|StringBuilder
name|charactersBuffer
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mapProperties
decl_stmt|;
specifier|public
name|MapLoader
parameter_list|()
block|{
comment|// compile tag processors.
name|startTagOpMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|StartClosure
argument_list|>
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|EndClosure
argument_list|>
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|DB_ENTITY_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartDbEntity
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|DB_ATTRIBUTE_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartDbAttribute
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|OBJ_ENTITY_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartObjEntity
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|OBJ_ATTRIBUTE_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartObjAttribute
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|OBJ_ATTRIBUTE_OVERRIDE_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartAttributeOverride
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|EMBEDDABLE_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartEmbeddable
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|EMBEDDABLE_ATTRIBUTE_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartEmbeddableAttribute
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|EMBEDDABLE_ATTRIBUTE_OVERRIDE_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartEmbeddableAttributeOverride
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|EMBEDDED_ATTRIBUTE_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartEmbeddedAttribute
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|DB_RELATIONSHIP_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartDbRelationship
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|DB_ATTRIBUTE_PAIR_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartDbAttributePair
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|OBJ_RELATIONSHIP_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartObjRelationship
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|DB_RELATIONSHIP_REF_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartDbRelationshipRef
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|PROCEDURE_PARAMETER_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartProcedureParameter
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|PROCEDURE_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartProcedure
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|QUERY_EJBQL_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|charactersBuffer
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|processStartEjbqlQuery
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|QUERY_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartQuery
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|QUERY_SQL_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|charactersBuffer
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|processStartQuerySQL
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|QUERY_ORDERING_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|charactersBuffer
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|processStartQueryOrdering
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|DB_KEY_GENERATOR_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartDbKeyGenerator
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|PROPERTY_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// properties can belong to query or DataMap
if|if
condition|(
name|queryBuilder
operator|!=
literal|null
condition|)
block|{
name|processStartQueryProperty
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processStartDataMapProperty
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|ENTITY_LISTENER_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartEntitylistener
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|PRE_PERSIST_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartPrePersist
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|POST_PERSIST_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartPostPersist
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|PRE_UPDATE_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartPreUpdate
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|POST_UPDATE_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartPostUpdate
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|PRE_REMOVE_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartPreRemove
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|POST_REMOVE_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartPostRemove
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|POST_LOAD_TAG
argument_list|,
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|processStartPostLoad
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|StartClosure
name|resetBuffer
init|=
operator|new
name|StartClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|charactersBuffer
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|QUERY_PREFETCH_TAG
argument_list|,
name|resetBuffer
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|QUERY_QUALIFIER_TAG
argument_list|,
name|resetBuffer
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|DB_GENERATOR_TYPE_TAG
argument_list|,
name|resetBuffer
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|DB_GENERATOR_NAME_TAG
argument_list|,
name|resetBuffer
argument_list|)
expr_stmt|;
name|startTagOpMap
operator|.
name|put
argument_list|(
name|DB_KEY_CACHE_SIZE_TAG
argument_list|,
name|resetBuffer
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|.
name|put
argument_list|(
name|DATA_MAP_TAG
argument_list|,
operator|new
name|EndClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
block|{
name|processEndDataMap
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|.
name|put
argument_list|(
name|DB_ENTITY_TAG
argument_list|,
operator|new
name|EndClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
block|{
name|processEndDbEntity
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|.
name|put
argument_list|(
name|OBJ_ENTITY_TAG
argument_list|,
operator|new
name|EndClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
block|{
name|processEndObjEntity
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|.
name|put
argument_list|(
name|EMBEDDABLE_TAG
argument_list|,
operator|new
name|EndClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
block|{
name|processEndEmbeddable
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|.
name|put
argument_list|(
name|EMBEDDABLE_ATTRIBUTE_TAG
argument_list|,
operator|new
name|EndClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
block|{
name|processEndEmbeddedAttribute
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|.
name|put
argument_list|(
name|DB_ATTRIBUTE_TAG
argument_list|,
operator|new
name|EndClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
block|{
name|processEndDbAttribute
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|.
name|put
argument_list|(
name|DB_RELATIONSHIP_TAG
argument_list|,
operator|new
name|EndClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
block|{
name|processEndDbRelationship
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|.
name|put
argument_list|(
name|OBJ_RELATIONSHIP_TAG
argument_list|,
operator|new
name|EndClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
block|{
name|processEndObjRelationship
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|.
name|put
argument_list|(
name|DB_GENERATOR_TYPE_TAG
argument_list|,
operator|new
name|EndClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
block|{
name|processEndDbGeneratorType
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|.
name|put
argument_list|(
name|DB_GENERATOR_NAME_TAG
argument_list|,
operator|new
name|EndClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
block|{
name|processEndDbGeneratorName
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|.
name|put
argument_list|(
name|DB_KEY_CACHE_SIZE_TAG
argument_list|,
operator|new
name|EndClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
block|{
name|processEndDbKeyCacheSize
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|.
name|put
argument_list|(
name|PROCEDURE_PARAMETER_TAG
argument_list|,
operator|new
name|EndClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
block|{
name|processEndProcedureParameter
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|.
name|put
argument_list|(
name|PROCEDURE_TAG
argument_list|,
operator|new
name|EndClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
block|{
name|processEndProcedure
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|.
name|put
argument_list|(
name|QUERY_TAG
argument_list|,
operator|new
name|EndClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
block|{
name|processEndQuery
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|.
name|put
argument_list|(
name|QUERY_SQL_TAG
argument_list|,
operator|new
name|EndClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
block|{
name|processEndQuerySQL
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|.
name|put
argument_list|(
name|QUERY_EJBQL_TAG
argument_list|,
operator|new
name|EndClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
block|{
name|processEndEjbqlQuery
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|.
name|put
argument_list|(
name|QUERY_QUALIFIER_TAG
argument_list|,
operator|new
name|EndClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
block|{
name|processEndQualifier
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|.
name|put
argument_list|(
name|QUERY_ORDERING_TAG
argument_list|,
operator|new
name|EndClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
block|{
name|processEndQueryOrdering
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|.
name|put
argument_list|(
name|QUERY_PREFETCH_TAG
argument_list|,
operator|new
name|EndClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
block|{
name|processEndQueryPrefetch
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|endTagOpMap
operator|.
name|put
argument_list|(
name|ENTITY_LISTENER_TAG
argument_list|,
operator|new
name|EndClosure
argument_list|()
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
block|{
name|processEndEntitylistener
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartEntitylistener
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|entityListener
operator|=
operator|new
name|EntityListener
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"class"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|objEntity
operator|!=
literal|null
condition|)
block|{
comment|// we are inside of obj-entity tag
name|objEntity
operator|.
name|addEntityListener
argument_list|(
name|entityListener
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dataMap
operator|!=
literal|null
condition|)
block|{
comment|// we are inside of datamap tag
name|dataMap
operator|.
name|addDefaultEntityListener
argument_list|(
name|entityListener
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processEndEntitylistener
parameter_list|()
block|{
name|entityListener
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|processStartPrePersist
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|String
name|methodName
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"method-name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityListener
operator|!=
literal|null
condition|)
block|{
comment|// new "entity-listener" tag as a child of "obj-entity"
name|entityListener
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPrePersist
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|objEntity
operator|!=
literal|null
condition|)
block|{
comment|// new callback tags - children of "obj-entity"
name|objEntity
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPrePersist
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processStartPostPersist
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|String
name|methodName
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"method-name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityListener
operator|!=
literal|null
condition|)
block|{
name|entityListener
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPostPersist
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|objEntity
operator|!=
literal|null
condition|)
block|{
name|objEntity
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPostPersist
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processStartPreUpdate
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|String
name|methodName
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"method-name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityListener
operator|!=
literal|null
condition|)
block|{
name|entityListener
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPreUpdate
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|objEntity
operator|!=
literal|null
condition|)
block|{
name|objEntity
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPreUpdate
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processStartPostUpdate
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|String
name|methodName
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"method-name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityListener
operator|!=
literal|null
condition|)
block|{
name|entityListener
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPostUpdate
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|objEntity
operator|!=
literal|null
condition|)
block|{
name|objEntity
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPostUpdate
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processStartPreRemove
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|String
name|methodName
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"method-name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityListener
operator|!=
literal|null
condition|)
block|{
name|entityListener
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPreRemove
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|objEntity
operator|!=
literal|null
condition|)
block|{
name|objEntity
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPreRemove
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processStartPostRemove
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|String
name|methodName
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"method-name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityListener
operator|!=
literal|null
condition|)
block|{
name|entityListener
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPostRemove
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|objEntity
operator|!=
literal|null
condition|)
block|{
name|objEntity
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPostRemove
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processStartPostLoad
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|String
name|methodName
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"method-name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityListener
operator|!=
literal|null
condition|)
block|{
name|entityListener
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPostLoad
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|objEntity
operator|!=
literal|null
condition|)
block|{
name|objEntity
operator|.
name|getCallbackMap
argument_list|()
operator|.
name|getPostLoad
argument_list|()
operator|.
name|addCallbackMethod
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Loads a DataMap from XML input source.      */
specifier|public
specifier|synchronized
name|DataMap
name|loadDataMap
parameter_list|(
name|InputSource
name|src
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
if|if
condition|(
name|src
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null InputSource."
argument_list|)
throw|;
block|}
try|try
block|{
name|String
name|mapName
init|=
name|mapNameFromLocation
argument_list|(
name|src
operator|.
name|getSystemId
argument_list|()
argument_list|)
decl_stmt|;
name|dataMap
operator|=
operator|new
name|DataMap
argument_list|(
name|mapName
argument_list|)
expr_stmt|;
name|XMLReader
name|parser
init|=
name|Util
operator|.
name|createXmlReader
argument_list|()
decl_stmt|;
name|parser
operator|.
name|setContentHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setErrorHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|dataMap
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Wrong DataMap format, last processed tag: "
operator|+
name|constructCurrentStateString
argument_list|()
argument_list|,
name|Util
operator|.
name|unwindException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|dataMap
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error loading DataMap, last processed tag: "
operator|+
name|constructCurrentStateString
argument_list|()
argument_list|,
name|Util
operator|.
name|unwindException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|dataMap
return|;
block|}
comment|/**      * Constructs error message for displaying as exception message      */
specifier|private
name|Appendable
name|constructCurrentStateString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
operator|.
name|append
argument_list|(
name|currentTag
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentAttributes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentAttributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|currentAttributes
operator|.
name|getLocalName
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|currentAttributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
return|return
name|sb
return|;
block|}
comment|/**      * Loads DataMap from file specified by<code>uri</code> parameter.      *       * @throws CayenneRuntimeException if source URI does not resolve to a valid map files      */
specifier|public
name|DataMap
name|loadDataMap
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
comment|// configure resource locator
name|ResourceFinder
name|locator
init|=
name|createResourceFinder
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|locator
operator|.
name|getResource
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't find data map "
operator|+
name|uri
argument_list|)
throw|;
block|}
name|InputStream
name|in
decl_stmt|;
try|try
block|{
name|in
operator|=
name|url
operator|.
name|openStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|InputSource
name|inSrc
init|=
operator|new
name|InputSource
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|inSrc
operator|.
name|setSystemId
argument_list|(
name|uri
argument_list|)
expr_stmt|;
return|return
name|loadDataMap
argument_list|(
name|inSrc
argument_list|)
return|;
block|}
finally|finally
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
block|}
block|}
block|}
comment|/**      * Helper method to guess the map name from its location.      */
specifier|protected
name|String
name|mapNameFromLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
return|return
literal|"Untitled"
return|;
block|}
name|int
name|lastSlash
init|=
name|location
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastSlash
operator|<
literal|0
condition|)
block|{
name|lastSlash
operator|=
name|location
operator|.
name|lastIndexOf
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastSlash
operator|>=
literal|0
operator|&&
name|lastSlash
operator|+
literal|1
operator|<
name|location
operator|.
name|length
argument_list|()
condition|)
block|{
name|location
operator|=
name|location
operator|.
name|substring
argument_list|(
name|lastSlash
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|location
operator|.
name|endsWith
argument_list|(
name|DataMapFile
operator|.
name|LOCATION_SUFFIX
argument_list|)
condition|)
block|{
name|location
operator|=
name|location
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|location
operator|.
name|length
argument_list|()
operator|-
name|DataMapFile
operator|.
name|LOCATION_SUFFIX
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|location
return|;
block|}
comment|/**      * Creates, configures and returns ResourceLocator object used to lookup DataMap      * files.      *       * @deprecated since 3.0 use {@link #createResourceFinder()}.      */
annotation|@
name|Deprecated
specifier|protected
name|ResourceLocator
name|configLocator
parameter_list|()
block|{
return|return
operator|(
name|ResourceLocator
operator|)
name|createResourceFinder
argument_list|()
return|;
block|}
comment|/**      * Creates, configures and returns a default ResourceFinder.      *       * @since 3.0      */
specifier|protected
name|ResourceFinder
name|createResourceFinder
parameter_list|()
block|{
name|ResourceLocator
name|locator
init|=
operator|new
name|ResourceLocator
argument_list|()
decl_stmt|;
comment|// absolute paths are usually passed by the Modeler
comment|// while runtime would use classpath
name|locator
operator|.
name|setSkipAbsolutePath
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|locator
operator|.
name|setSkipClasspath
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|locator
operator|.
name|setSkipCurrentDirectory
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|locator
operator|.
name|setSkipHomeDirectory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|locator
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|namespaceUri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|rememberCurrentState
argument_list|(
name|localName
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|StartClosure
name|op
init|=
name|startTagOpMap
operator|.
name|get
argument_list|(
name|localName
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|!=
literal|null
condition|)
block|{
name|op
operator|.
name|execute
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
name|EndClosure
name|op
init|=
name|endTagOpMap
operator|.
name|get
argument_list|(
name|localName
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|!=
literal|null
condition|)
block|{
name|op
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|resetCurrentState
argument_list|()
expr_stmt|;
name|charactersBuffer
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|processStartEmbeddable
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|embeddable
operator|=
operator|new
name|Embeddable
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"className"
argument_list|)
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|addEmbeddable
argument_list|(
name|embeddable
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartEmbeddableAttribute
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"db-attribute-name"
argument_list|)
decl_stmt|;
name|EmbeddableAttribute
name|ea
init|=
operator|new
name|EmbeddableAttribute
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|ea
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|ea
operator|.
name|setDbAttributeName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|embeddable
operator|.
name|addAttribute
argument_list|(
name|ea
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartEmbeddedAttribute
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"type"
argument_list|)
decl_stmt|;
name|embeddedAttribute
operator|=
operator|new
name|EmbeddedAttribute
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|embeddedAttribute
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|objEntity
operator|.
name|addAttribute
argument_list|(
name|embeddedAttribute
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartEmbeddableAttributeOverride
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|dbName
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"db-attribute-path"
argument_list|)
decl_stmt|;
name|embeddedAttribute
operator|.
name|addAttributeOverride
argument_list|(
name|name
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartDbEntity
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|dbEntity
operator|=
operator|new
name|DbEntity
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|setSchema
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"schema"
argument_list|)
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|setCatalog
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"catalog"
argument_list|)
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|addDbEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartDbAttribute
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"type"
argument_list|)
decl_stmt|;
name|attrib
operator|=
operator|new
name|DbAttribute
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|attrib
operator|.
name|setType
argument_list|(
name|TypesMapping
operator|.
name|getSqlTypeByName
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|attrib
argument_list|)
expr_stmt|;
name|String
name|length
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"length"
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|!=
literal|null
condition|)
block|{
name|attrib
operator|.
name|setMaxLength
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// this is an obsolete 1.2 'precision' attribute that really meant 'scale'
name|String
name|pseudoPrecision
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"precision"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pseudoPrecision
operator|!=
literal|null
condition|)
block|{
name|attrib
operator|.
name|setScale
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|pseudoPrecision
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|precision
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"attributePrecision"
argument_list|)
decl_stmt|;
if|if
condition|(
name|precision
operator|!=
literal|null
condition|)
block|{
name|attrib
operator|.
name|setAttributePrecision
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|precision
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|scale
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"scale"
argument_list|)
decl_stmt|;
if|if
condition|(
name|scale
operator|!=
literal|null
condition|)
block|{
name|attrib
operator|.
name|setScale
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|scale
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|attrib
operator|.
name|setPrimaryKey
argument_list|(
name|TRUE
operator|.
name|equalsIgnoreCase
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"isPrimaryKey"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attrib
operator|.
name|setMandatory
argument_list|(
name|TRUE
operator|.
name|equalsIgnoreCase
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"isMandatory"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attrib
operator|.
name|setGenerated
argument_list|(
name|TRUE
operator|.
name|equalsIgnoreCase
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"isGenerated"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartDbKeyGenerator
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|DbKeyGenerator
name|pkGenerator
init|=
operator|new
name|DbKeyGenerator
argument_list|()
decl_stmt|;
name|dbEntity
operator|.
name|setPrimaryKeyGenerator
argument_list|(
name|pkGenerator
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartQuerySQL
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|this
operator|.
name|sqlKey
operator|=
name|convertClassNameFromV1_2
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"adapter-class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartEjbqlQuery
parameter_list|(
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
name|this
operator|.
name|ejbqlKey
operator|=
name|convertClassNameFromV1_2
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"adapter-class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartObjEntity
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|objEntity
operator|=
operator|new
name|ObjEntity
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|objEntity
operator|.
name|setClassName
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"className"
argument_list|)
argument_list|)
expr_stmt|;
name|objEntity
operator|.
name|setClientClassName
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"clientClassName"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|isAbstract
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"abstract"
argument_list|)
decl_stmt|;
name|objEntity
operator|.
name|setAbstract
argument_list|(
name|TRUE
operator|.
name|equalsIgnoreCase
argument_list|(
name|isAbstract
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|readOnly
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"readOnly"
argument_list|)
decl_stmt|;
name|objEntity
operator|.
name|setReadOnly
argument_list|(
name|TRUE
operator|.
name|equalsIgnoreCase
argument_list|(
name|readOnly
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|serverOnly
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"serverOnly"
argument_list|)
decl_stmt|;
name|objEntity
operator|.
name|setServerOnly
argument_list|(
name|TRUE
operator|.
name|equalsIgnoreCase
argument_list|(
name|serverOnly
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|excludeSuperclassListeners
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"exclude-superclass-listeners"
argument_list|)
decl_stmt|;
name|objEntity
operator|.
name|setExcludingSuperclassListeners
argument_list|(
name|TRUE
operator|.
name|equalsIgnoreCase
argument_list|(
name|excludeSuperclassListeners
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|excludeDefaultListeners
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"exclude-default-listeners"
argument_list|)
decl_stmt|;
name|objEntity
operator|.
name|setExcludingDefaultListeners
argument_list|(
name|TRUE
operator|.
name|equalsIgnoreCase
argument_list|(
name|excludeDefaultListeners
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|lockType
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"lock-type"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"optimistic"
operator|.
name|equals
argument_list|(
name|lockType
argument_list|)
condition|)
block|{
name|objEntity
operator|.
name|setDeclaredLockType
argument_list|(
name|ObjEntity
operator|.
name|LOCK_TYPE_OPTIMISTIC
argument_list|)
expr_stmt|;
block|}
name|String
name|superEntityName
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"superEntityName"
argument_list|)
decl_stmt|;
if|if
condition|(
name|superEntityName
operator|!=
literal|null
condition|)
block|{
name|objEntity
operator|.
name|setSuperEntityName
argument_list|(
name|superEntityName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|objEntity
operator|.
name|setSuperClassName
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"superClassName"
argument_list|)
argument_list|)
expr_stmt|;
name|objEntity
operator|.
name|setClientSuperClassName
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"clientSuperClassName"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|objEntity
operator|.
name|setDbEntityName
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"dbEntityName"
argument_list|)
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|addObjEntity
argument_list|(
name|objEntity
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartObjAttribute
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|lock
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"lock"
argument_list|)
decl_stmt|;
name|ObjAttribute
name|oa
init|=
operator|new
name|ObjAttribute
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|oa
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|oa
operator|.
name|setUsedForLocking
argument_list|(
name|TRUE
operator|.
name|equalsIgnoreCase
argument_list|(
name|lock
argument_list|)
argument_list|)
expr_stmt|;
name|objEntity
operator|.
name|addAttribute
argument_list|(
name|oa
argument_list|)
expr_stmt|;
name|String
name|dbPath
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"db-attribute-path"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbPath
operator|==
literal|null
condition|)
block|{
name|dbPath
operator|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"db-attribute-name"
argument_list|)
expr_stmt|;
block|}
name|oa
operator|.
name|setDbAttributePath
argument_list|(
name|dbPath
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartAttributeOverride
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|dbPath
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"db-attribute-path"
argument_list|)
decl_stmt|;
name|objEntity
operator|.
name|addAttributeOverride
argument_list|(
name|name
argument_list|,
name|dbPath
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartDbRelationship
parameter_list|(
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"MapLoader::processStartDbRelationship(),"
operator|+
literal|" Unable to parse name. Attributes:\n"
operator|+
name|printAttributes
argument_list|(
name|atts
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|sourceName
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"source"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"MapLoader::processStartDbRelationship() - null source entity"
argument_list|)
throw|;
block|}
name|DbEntity
name|source
init|=
name|dataMap
operator|.
name|getDbEntity
argument_list|(
name|sourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|toManyString
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"toMany"
argument_list|)
decl_stmt|;
name|boolean
name|toMany
init|=
name|toManyString
operator|!=
literal|null
operator|&&
name|toManyString
operator|.
name|equalsIgnoreCase
argument_list|(
name|TRUE
argument_list|)
decl_stmt|;
name|String
name|toDependPkString
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"toDependentPK"
argument_list|)
decl_stmt|;
name|boolean
name|toDependentPK
init|=
name|toDependPkString
operator|!=
literal|null
operator|&&
name|toDependPkString
operator|.
name|equalsIgnoreCase
argument_list|(
name|TRUE
argument_list|)
decl_stmt|;
name|dbRelationship
operator|=
operator|new
name|DbRelationship
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|dbRelationship
operator|.
name|setSourceEntity
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|dbRelationship
operator|.
name|setTargetEntityName
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"target"
argument_list|)
argument_list|)
expr_stmt|;
name|dbRelationship
operator|.
name|setToMany
argument_list|(
name|toMany
argument_list|)
expr_stmt|;
name|dbRelationship
operator|.
name|setToDependentPK
argument_list|(
name|toDependentPK
argument_list|)
expr_stmt|;
name|source
operator|.
name|addRelationship
argument_list|(
name|dbRelationship
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartDbRelationshipRef
parameter_list|(
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// db-relationship-ref element is deprecated and is supported for backwards
comment|// compatibility only
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"MapLoader::processStartDbRelationshipRef()"
operator|+
literal|", Null DbRelationship name for "
operator|+
name|objRelationship
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|path
init|=
name|objRelationship
operator|.
name|getDbRelationshipPath
argument_list|()
decl_stmt|;
name|path
operator|=
operator|(
name|path
operator|!=
literal|null
operator|)
condition|?
name|path
operator|+
literal|"."
operator|+
name|name
else|:
name|name
expr_stmt|;
name|objRelationship
operator|.
name|setDbRelationshipPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartDbAttributePair
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|DbJoin
name|join
init|=
operator|new
name|DbJoin
argument_list|(
name|dbRelationship
argument_list|)
decl_stmt|;
name|join
operator|.
name|setSourceName
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"source"
argument_list|)
argument_list|)
expr_stmt|;
name|join
operator|.
name|setTargetName
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"target"
argument_list|)
argument_list|)
expr_stmt|;
name|dbRelationship
operator|.
name|addJoin
argument_list|(
name|join
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartObjRelationship
parameter_list|(
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|name
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"MapLoader::processStartObjRelationship(),"
operator|+
literal|" Unable to parse target. Attributes:\n"
operator|+
name|printAttributes
argument_list|(
name|atts
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|collectionType
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"collection-type"
argument_list|)
decl_stmt|;
name|String
name|mapKey
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"map-key"
argument_list|)
decl_stmt|;
name|String
name|sourceName
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"source"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"MapLoader::processStartObjRelationship(),"
operator|+
literal|" Unable to parse source. Attributes:\n"
operator|+
name|printAttributes
argument_list|(
name|atts
argument_list|)
argument_list|)
throw|;
block|}
name|ObjEntity
name|source
init|=
name|dataMap
operator|.
name|getObjEntity
argument_list|(
name|sourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"MapLoader::processStartObjRelationship(),"
operator|+
literal|" Unable to find source "
operator|+
name|sourceName
argument_list|)
throw|;
block|}
name|String
name|deleteRuleName
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"deleteRule"
argument_list|)
decl_stmt|;
name|int
name|deleteRule
init|=
operator|(
name|deleteRuleName
operator|!=
literal|null
operator|)
condition|?
name|DeleteRule
operator|.
name|deleteRuleForName
argument_list|(
name|deleteRuleName
argument_list|)
else|:
name|DeleteRule
operator|.
name|NO_ACTION
decl_stmt|;
name|objRelationship
operator|=
operator|new
name|ObjRelationship
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|objRelationship
operator|.
name|setSourceEntity
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|objRelationship
operator|.
name|setTargetEntityName
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"target"
argument_list|)
argument_list|)
expr_stmt|;
name|objRelationship
operator|.
name|setDeleteRule
argument_list|(
name|deleteRule
argument_list|)
expr_stmt|;
name|objRelationship
operator|.
name|setUsedForLocking
argument_list|(
name|TRUE
operator|.
name|equalsIgnoreCase
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"lock"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|objRelationship
operator|.
name|setDbRelationshipPath
argument_list|(
operator|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"db-relationship-path"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|objRelationship
operator|.
name|setCollectionType
argument_list|(
name|collectionType
argument_list|)
expr_stmt|;
name|objRelationship
operator|.
name|setMapKey
argument_list|(
name|mapKey
argument_list|)
expr_stmt|;
name|source
operator|.
name|addRelationship
argument_list|(
name|objRelationship
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartProcedure
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|name
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|name
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"MapLoader::processStartProcedure(),"
operator|+
literal|" no procedure name."
argument_list|)
throw|;
block|}
name|String
name|schema
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"schema"
argument_list|)
decl_stmt|;
name|String
name|catalog
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"catalog"
argument_list|)
decl_stmt|;
name|String
name|returningValue
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"returningValue"
argument_list|)
decl_stmt|;
name|procedure
operator|=
operator|new
name|Procedure
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|procedure
operator|.
name|setReturningValue
argument_list|(
name|returningValue
operator|!=
literal|null
operator|&&
name|returningValue
operator|.
name|equalsIgnoreCase
argument_list|(
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|procedure
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|procedure
operator|.
name|setCatalog
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|addProcedure
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartProcedureParameter
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|name
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"MapLoader::processStartProcedureParameter(),"
operator|+
literal|" no procedure parameter name."
argument_list|)
throw|;
block|}
name|ProcedureParameter
name|parameter
init|=
operator|new
name|ProcedureParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|parameter
operator|.
name|setType
argument_list|(
name|TypesMapping
operator|.
name|getSqlTypeByName
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|length
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"length"
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|!=
literal|null
condition|)
block|{
name|parameter
operator|.
name|setMaxLength
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|precision
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"precision"
argument_list|)
decl_stmt|;
if|if
condition|(
name|precision
operator|!=
literal|null
condition|)
block|{
name|parameter
operator|.
name|setPrecision
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|precision
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|direction
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"direction"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"in"
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
condition|)
block|{
name|parameter
operator|.
name|setDirection
argument_list|(
name|ProcedureParameter
operator|.
name|IN_PARAMETER
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"out"
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
condition|)
block|{
name|parameter
operator|.
name|setDirection
argument_list|(
name|ProcedureParameter
operator|.
name|OUT_PARAMETER
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"in_out"
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
condition|)
block|{
name|parameter
operator|.
name|setDirection
argument_list|(
name|ProcedureParameter
operator|.
name|IN_OUT_PARAMETER
argument_list|)
expr_stmt|;
block|}
name|procedure
operator|.
name|addCallParameter
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartQuery
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|name
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|name
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"MapLoader::processStartQuery(), no query name."
argument_list|)
throw|;
block|}
name|String
name|builder
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"factory"
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|SelectQueryBuilder
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: this is a hack to migrate between 1.1M6 and 1.1M7...
comment|// remove this at some point
if|if
condition|(
name|builder
operator|.
name|equals
argument_list|(
literal|"org.objectstyle.cayenne.query.SelectQueryBuilder"
argument_list|)
condition|)
block|{
name|builder
operator|=
name|SelectQueryBuilder
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
comment|// upgrade from v.<= 1.2
else|else
block|{
name|builder
operator|=
name|convertClassNameFromV1_2
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|queryBuilder
operator|=
operator|(
name|QueryLoader
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|builder
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"MapLoader::processStartQuery(), invalid query builder: "
operator|+
name|builder
argument_list|)
throw|;
block|}
name|String
name|rootType
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"root"
argument_list|)
decl_stmt|;
name|String
name|rootName
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"root-name"
argument_list|)
decl_stmt|;
name|String
name|resultEntity
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"result-entity"
argument_list|)
decl_stmt|;
name|queryBuilder
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|setRoot
argument_list|(
name|dataMap
argument_list|,
name|rootType
argument_list|,
name|rootName
argument_list|)
expr_stmt|;
comment|// TODO: Andrus, 2/13/2006 'result-type' is only used in ProcedureQuery and is
comment|// deprecated in 1.2
if|if
condition|(
operator|!
name|Util
operator|.
name|isEmptyString
argument_list|(
name|resultEntity
argument_list|)
condition|)
block|{
name|queryBuilder
operator|.
name|setResultEntity
argument_list|(
name|resultEntity
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processStartQueryProperty
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|name
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|name
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"MapLoader::processStartQueryProperty(), no property name."
argument_list|)
throw|;
block|}
name|String
name|value
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|value
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"MapLoader::processStartQueryProperty(), no property value."
argument_list|)
throw|;
block|}
name|queryBuilder
operator|.
name|addProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartDataMapProperty
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|name
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|name
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"MapLoader::processStartDataMapProperty(), no property name."
argument_list|)
throw|;
block|}
name|String
name|value
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|value
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"MapLoader::processStartDataMapProperty(), no property value."
argument_list|)
throw|;
block|}
if|if
condition|(
name|mapProperties
operator|==
literal|null
condition|)
block|{
name|mapProperties
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|mapProperties
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processEndQueryPrefetch
parameter_list|()
block|{
name|queryBuilder
operator|.
name|addPrefetch
argument_list|(
name|charactersBuffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processStartQueryOrdering
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|descending
operator|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"descending"
argument_list|)
expr_stmt|;
name|ignoreCase
operator|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"ignore-case"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processEndQuery
parameter_list|()
block|{
name|dataMap
operator|.
name|addQuery
argument_list|(
name|queryBuilder
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|queryBuilder
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|processEndEjbqlQuery
parameter_list|()
throws|throws
name|SAXException
block|{
name|queryBuilder
operator|.
name|setEjbql
argument_list|(
name|charactersBuffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ejbqlKey
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|processEndQuerySQL
parameter_list|()
block|{
name|queryBuilder
operator|.
name|addSql
argument_list|(
name|charactersBuffer
operator|.
name|toString
argument_list|()
argument_list|,
name|sqlKey
argument_list|)
expr_stmt|;
name|sqlKey
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|processEndQualifier
parameter_list|()
block|{
name|String
name|qualifier
init|=
name|charactersBuffer
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|qualifier
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|// qualifier can belong to ObjEntity, DbEntity or a query
if|if
condition|(
name|objEntity
operator|!=
literal|null
condition|)
block|{
name|objEntity
operator|.
name|setDeclaredQualifier
argument_list|(
name|Expression
operator|.
name|fromString
argument_list|(
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dbEntity
operator|!=
literal|null
condition|)
block|{
name|dbEntity
operator|.
name|setQualifier
argument_list|(
name|Expression
operator|.
name|fromString
argument_list|(
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queryBuilder
operator|.
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processEndQueryOrdering
parameter_list|()
block|{
name|String
name|path
init|=
name|charactersBuffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|queryBuilder
operator|.
name|addOrdering
argument_list|(
name|path
argument_list|,
name|descending
argument_list|,
name|ignoreCase
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processEndDbAttribute
parameter_list|()
block|{
name|attrib
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|processEndDbEntity
parameter_list|()
block|{
name|dbEntity
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|processEndProcedure
parameter_list|()
block|{
name|procedure
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|processEndProcedureParameter
parameter_list|()
block|{
block|}
specifier|private
name|void
name|processEndDbGeneratorType
parameter_list|()
block|{
if|if
condition|(
name|dbEntity
operator|==
literal|null
condition|)
return|return;
name|DbKeyGenerator
name|pkGenerator
init|=
name|dbEntity
operator|.
name|getPrimaryKeyGenerator
argument_list|()
decl_stmt|;
if|if
condition|(
name|pkGenerator
operator|==
literal|null
condition|)
return|return;
name|pkGenerator
operator|.
name|setGeneratorType
argument_list|(
name|charactersBuffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pkGenerator
operator|.
name|getGeneratorType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|dbEntity
operator|.
name|setPrimaryKeyGenerator
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processEndDbGeneratorName
parameter_list|()
block|{
if|if
condition|(
name|dbEntity
operator|==
literal|null
condition|)
return|return;
name|DbKeyGenerator
name|pkGenerator
init|=
name|dbEntity
operator|.
name|getPrimaryKeyGenerator
argument_list|()
decl_stmt|;
if|if
condition|(
name|pkGenerator
operator|==
literal|null
condition|)
return|return;
name|pkGenerator
operator|.
name|setGeneratorName
argument_list|(
name|charactersBuffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processEndDbKeyCacheSize
parameter_list|()
block|{
if|if
condition|(
name|dbEntity
operator|==
literal|null
condition|)
return|return;
name|DbKeyGenerator
name|pkGenerator
init|=
name|dbEntity
operator|.
name|getPrimaryKeyGenerator
argument_list|()
decl_stmt|;
if|if
condition|(
name|pkGenerator
operator|==
literal|null
condition|)
return|return;
try|try
block|{
name|pkGenerator
operator|.
name|setKeyCacheSize
argument_list|(
operator|new
name|Integer
argument_list|(
name|charactersBuffer
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|pkGenerator
operator|.
name|setKeyCacheSize
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processEndDataMap
parameter_list|()
block|{
if|if
condition|(
name|mapProperties
operator|!=
literal|null
condition|)
block|{
name|dataMap
operator|.
name|initWithProperties
argument_list|(
name|mapProperties
argument_list|)
expr_stmt|;
block|}
name|mapProperties
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|processEndObjEntity
parameter_list|()
block|{
name|objEntity
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|processEndEmbeddable
parameter_list|()
block|{
name|embeddable
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|processEndEmbeddedAttribute
parameter_list|()
block|{
name|embeddedAttribute
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|processEndDbRelationship
parameter_list|()
block|{
name|dbRelationship
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|processEndObjRelationship
parameter_list|()
block|{
name|objRelationship
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Prints the attributes. Used for error reporting purposes. */
specifier|private
name|StringBuffer
name|printAttributes
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|name
decl_stmt|,
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atts
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|value
operator|=
name|atts
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|name
operator|=
name|atts
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Name: "
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"\tValue: "
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
block|{
if|if
condition|(
name|charactersBuffer
operator|!=
literal|null
condition|)
block|{
name|charactersBuffer
operator|.
name|append
argument_list|(
name|text
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|rememberCurrentState
parameter_list|(
name|String
name|tag
parameter_list|,
name|Attributes
name|attrs
parameter_list|)
block|{
name|currentTag
operator|=
name|tag
expr_stmt|;
name|currentAttributes
operator|=
name|attrs
expr_stmt|;
block|}
specifier|private
name|void
name|resetCurrentState
parameter_list|()
block|{
name|currentTag
operator|=
literal|null
expr_stmt|;
name|currentAttributes
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * @since 2.0      */
name|String
name|convertClassNameFromV1_2
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// upgrade from v.<= 1.2
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|_1_2_PACKAGE_PREFIX
argument_list|)
condition|)
block|{
return|return
name|_2_0_PACKAGE_PREFIX
operator|+
name|name
operator|.
name|substring
argument_list|(
name|_1_2_PACKAGE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
return|return
name|name
return|;
block|}
specifier|abstract
class|class
name|StartClosure
block|{
specifier|abstract
name|void
name|execute
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
function_decl|;
block|}
specifier|abstract
class|class
name|EndClosure
block|{
specifier|abstract
name|void
name|execute
parameter_list|()
throws|throws
name|SAXException
function_decl|;
block|}
block|}
end_class

end_unit

