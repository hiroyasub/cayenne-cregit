begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|derby
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|trans
operator|.
name|QueryAssembler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|trans
operator|.
name|TrimmingQualifierTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTNotEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|SimpleNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_class
specifier|public
class|class
name|DerbyQualifierTranslator
extends|extends
name|TrimmingQualifierTranslator
block|{
specifier|public
name|DerbyQualifierTranslator
parameter_list|(
name|QueryAssembler
name|queryAssembler
parameter_list|,
name|String
name|trimFunction
parameter_list|)
block|{
name|super
argument_list|(
name|queryAssembler
argument_list|,
name|trimFunction
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processColumnWithQuoteSqlIdentifiers
parameter_list|(
name|DbAttribute
name|dbAttr
parameter_list|,
name|Expression
name|pathExp
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleNode
name|parent
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pathExp
operator|instanceof
name|SimpleNode
condition|)
block|{
name|parent
operator|=
operator|(
name|SimpleNode
operator|)
operator|(
operator|(
name|SimpleNode
operator|)
name|pathExp
operator|)
operator|.
name|jjtGetParent
argument_list|()
expr_stmt|;
block|}
comment|// problem in derby : Comparisons between 'CLOB (UCS_BASIC)' and 'CLOB (UCS_BASIC)' are not supported.
comment|// we need do it by casting the Clob to VARCHAR.
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|(
name|parent
operator|instanceof
name|ASTEqual
operator|||
name|parent
operator|instanceof
name|ASTNotEqual
operator|)
operator|&&
name|dbAttr
operator|.
name|getType
argument_list|()
operator|==
name|Types
operator|.
name|CLOB
operator|&&
name|parent
operator|.
name|getOperandCount
argument_list|()
operator|==
literal|2
operator|&&
name|parent
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|String
condition|)
block|{
name|Integer
name|size
init|=
name|parent
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
decl_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|"CAST("
argument_list|)
expr_stmt|;
name|super
operator|.
name|processColumnWithQuoteSqlIdentifiers
argument_list|(
name|dbAttr
argument_list|,
name|pathExp
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|" AS VARCHAR("
operator|+
name|size
operator|+
literal|"))"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|processColumnWithQuoteSqlIdentifiers
argument_list|(
name|dbAttr
argument_list|,
name|pathExp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

