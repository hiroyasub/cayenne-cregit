begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|select
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|ExtendedTypeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|EntityResultSegment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_comment
comment|/**  * A class used as a builder of SelectDescriptors of any complexity.  *   * @since 3.0  */
end_comment

begin_class
specifier|public
class|class
name|SelectDescriptorBuilder
block|{
specifier|private
name|ExtendedTypeMap
name|extendedTypes
decl_stmt|;
specifier|private
specifier|transient
name|ScalarSegmentBuilder
name|scalarSegmentBuilder
decl_stmt|;
specifier|private
specifier|transient
name|EntitySegmentBuilder
name|entitySegmentBuilder
decl_stmt|;
specifier|public
name|SelectDescriptorBuilder
parameter_list|(
name|ExtendedTypeMap
name|extendedTypes
parameter_list|)
block|{
name|this
operator|.
name|extendedTypes
operator|=
name|extendedTypes
expr_stmt|;
block|}
specifier|public
name|SelectDescriptor
argument_list|<
name|?
argument_list|>
name|fromQueryMetadata
parameter_list|(
name|QueryMetadata
name|queryMetadata
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|segmentDescriptors
init|=
name|queryMetadata
operator|.
name|getResultSetMapping
argument_list|()
decl_stmt|;
name|int
name|resultWidth
init|=
name|segmentDescriptors
operator|!=
literal|null
condition|?
name|segmentDescriptors
operator|.
name|size
argument_list|()
else|:
literal|1
decl_stmt|;
if|if
condition|(
name|resultWidth
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Empty result descriptor"
argument_list|)
throw|;
block|}
name|int
name|entitySegments
init|=
literal|0
decl_stmt|,
name|scalarSegments
init|=
literal|0
decl_stmt|;
name|SelectDescriptor
argument_list|<
name|Object
argument_list|>
index|[]
name|segments
init|=
operator|new
name|SelectDescriptor
index|[
name|resultWidth
index|]
decl_stmt|;
if|if
condition|(
name|segmentDescriptors
operator|==
literal|null
condition|)
block|{
name|segments
index|[
literal|0
index|]
operator|=
name|getEntitySegmentBuilder
argument_list|(
name|queryMetadata
argument_list|)
operator|.
name|getSegment
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|entitySegments
operator|++
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultWidth
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|segmentDescriptor
init|=
name|segmentDescriptors
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|segmentDescriptor
operator|instanceof
name|EntityResultSegment
condition|)
block|{
name|segments
index|[
name|i
index|]
operator|=
name|getEntitySegmentBuilder
argument_list|(
name|queryMetadata
argument_list|)
operator|.
name|getSegment
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|entitySegments
operator|++
expr_stmt|;
block|}
else|else
block|{
name|segments
index|[
name|i
index|]
operator|=
name|getScalarSegmentBuilder
argument_list|(
name|segmentDescriptors
argument_list|)
operator|.
name|getSegment
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|scalarSegments
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|// sanity check - paginated queries are only possible if there is an "id" of each
comment|// row. for now this means single entity queries...
if|if
condition|(
name|queryMetadata
operator|.
name|getPageSize
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|entitySegments
operator|!=
literal|1
operator|||
name|scalarSegments
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Paginated queries are only supported for a single entity result"
argument_list|)
throw|;
block|}
block|}
comment|// do some small optimizations for the common 1 segment results...
if|if
condition|(
name|resultWidth
operator|==
literal|1
condition|)
block|{
return|return
name|segments
index|[
literal|0
index|]
return|;
block|}
return|return
operator|new
name|CompoundSelectDescriptor
argument_list|(
name|segments
argument_list|)
return|;
block|}
specifier|protected
name|EntitySegmentBuilder
name|getEntitySegmentBuilder
parameter_list|(
name|QueryMetadata
name|queryMetadata
parameter_list|)
block|{
if|if
condition|(
name|entitySegmentBuilder
operator|==
literal|null
condition|)
block|{
name|entitySegmentBuilder
operator|=
operator|new
name|EntitySegmentBuilder
argument_list|(
name|extendedTypes
argument_list|,
name|queryMetadata
argument_list|)
expr_stmt|;
block|}
return|return
name|entitySegmentBuilder
return|;
block|}
specifier|protected
name|ScalarSegmentBuilder
name|getScalarSegmentBuilder
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|segmentDescriptors
parameter_list|)
block|{
if|if
condition|(
name|scalarSegmentBuilder
operator|==
literal|null
condition|)
block|{
name|scalarSegmentBuilder
operator|=
operator|new
name|ScalarSegmentBuilder
argument_list|(
name|extendedTypes
argument_list|,
name|segmentDescriptors
argument_list|)
expr_stmt|;
block|}
return|return
name|scalarSegmentBuilder
return|;
block|}
block|}
end_class

end_unit

