begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tx
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_comment
comment|/**  * @since 3.2  */
end_comment

begin_class
specifier|public
class|class
name|DefaultTransactionManager
implements|implements
name|TransactionManager
block|{
specifier|private
name|DataDomain
name|dataDomain
decl_stmt|;
specifier|public
name|DefaultTransactionManager
parameter_list|(
annotation|@
name|Inject
name|DataDomain
name|dataDomain
parameter_list|)
block|{
name|this
operator|.
name|dataDomain
operator|=
name|dataDomain
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|performInTransaction
parameter_list|(
name|TransactionalOperation
argument_list|<
name|T
argument_list|>
name|op
parameter_list|)
block|{
comment|// join existing tx if it is in progress... in such case do not try to
comment|// commit or roll it back
name|Transaction
name|currentTx
init|=
name|Transaction
operator|.
name|getThreadTransaction
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTx
operator|!=
literal|null
condition|)
block|{
return|return
name|op
operator|.
name|perform
argument_list|()
return|;
block|}
comment|// start a new tx and manage it till the end
name|Transaction
name|tx
init|=
name|dataDomain
operator|.
name|createTransaction
argument_list|()
decl_stmt|;
name|Transaction
operator|.
name|bindThreadTransaction
argument_list|(
name|tx
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|op
operator|.
name|perform
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|tx
operator|.
name|setRollbackOnly
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|Transaction
operator|.
name|bindThreadTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx
operator|.
name|getStatus
argument_list|()
operator|==
name|Transaction
operator|.
name|STATUS_MARKED_ROLLEDBACK
condition|)
block|{
try|try
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|rollbackEx
parameter_list|)
block|{
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

