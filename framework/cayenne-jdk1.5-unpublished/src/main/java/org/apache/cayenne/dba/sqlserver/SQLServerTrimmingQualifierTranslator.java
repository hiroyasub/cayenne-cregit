begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|sqlserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|trans
operator|.
name|QueryAssembler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|trans
operator|.
name|TrimmingQualifierTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_comment
comment|/**  * @since 3.0  */
end_comment

begin_class
class|class
name|SQLServerTrimmingQualifierTranslator
extends|extends
name|TrimmingQualifierTranslator
block|{
comment|// since LIKE IGNORE CASE requires more contextual information than the super
comment|// translator can provide, we are using an internal element stack to trace translation
comment|// context.. Maybe it is a good idea to introduce it in the superclass?
specifier|private
name|List
argument_list|<
name|Expression
argument_list|>
name|expressionStack
decl_stmt|;
name|SQLServerTrimmingQualifierTranslator
parameter_list|(
name|QueryAssembler
name|queryAssembler
parameter_list|,
name|String
name|trimFunction
parameter_list|)
block|{
name|super
argument_list|(
name|queryAssembler
argument_list|,
name|trimFunction
argument_list|)
expr_stmt|;
name|expressionStack
operator|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startNode
parameter_list|(
name|Expression
name|node
parameter_list|,
name|Expression
name|parentNode
parameter_list|)
block|{
name|push
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|super
operator|.
name|startNode
argument_list|(
name|node
argument_list|,
name|parentNode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processColumn
parameter_list|(
name|DbAttribute
name|dbAttr
parameter_list|)
throws|throws
name|IOException
block|{
name|Expression
name|node
init|=
name|peek
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|likeCI
init|=
name|node
operator|!=
literal|null
operator|&&
name|dbAttr
operator|.
name|getType
argument_list|()
operator|==
name|Types
operator|.
name|CLOB
operator|&&
operator|(
name|node
operator|.
name|getType
argument_list|()
operator|==
name|Expression
operator|.
name|LIKE_IGNORE_CASE
operator|||
name|node
operator|.
name|getType
argument_list|()
operator|==
name|Expression
operator|.
name|NOT_LIKE_IGNORE_CASE
operator|)
decl_stmt|;
if|if
condition|(
name|likeCI
condition|)
block|{
try|try
block|{
name|out
operator|.
name|append
argument_list|(
literal|"CAST("
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error appending content"
argument_list|,
name|ioex
argument_list|)
throw|;
block|}
block|}
name|super
operator|.
name|processColumn
argument_list|(
name|dbAttr
argument_list|)
expr_stmt|;
if|if
condition|(
name|likeCI
condition|)
block|{
try|try
block|{
name|out
operator|.
name|append
argument_list|(
literal|" AS NVARCHAR(MAX))"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error appending content"
argument_list|,
name|ioex
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endNode
parameter_list|(
name|Expression
name|node
parameter_list|,
name|Expression
name|parentNode
parameter_list|)
block|{
name|super
operator|.
name|endNode
argument_list|(
name|node
argument_list|,
name|parentNode
argument_list|)
expr_stmt|;
name|pop
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|push
parameter_list|(
name|Expression
name|node
parameter_list|)
block|{
name|expressionStack
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|pop
parameter_list|()
block|{
name|int
name|len
init|=
name|expressionStack
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|expressionStack
operator|.
name|remove
argument_list|(
name|len
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Expression
name|peek
parameter_list|(
name|int
name|tailIndex
parameter_list|)
block|{
name|int
name|index
init|=
name|expressionStack
operator|.
name|size
argument_list|()
operator|-
name|tailIndex
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|expressionStack
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
end_class

end_unit

