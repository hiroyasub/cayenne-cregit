begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * @since 3.2  */
end_comment

begin_class
class|class
name|MappingCache
block|{
specifier|private
specifier|static
specifier|final
name|ObjEntity
name|OBJ_DUPLICATE_MARKER
init|=
operator|new
name|ObjEntity
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MappingCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Query
argument_list|>
name|queryCache
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Embeddable
argument_list|>
name|embeddableCache
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|SQLResult
argument_list|>
name|resultsCache
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|DbEntity
argument_list|>
name|dbEntityCache
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|ObjEntity
argument_list|>
name|objEntityCache
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Procedure
argument_list|>
name|procedureCache
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|EntityInheritanceTree
argument_list|>
name|entityInheritanceCache
decl_stmt|;
name|MappingCache
parameter_list|(
name|Collection
argument_list|<
name|DataMap
argument_list|>
name|maps
parameter_list|)
block|{
name|this
operator|.
name|embeddableCache
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Embeddable
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|queryCache
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Query
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|dbEntityCache
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DbEntity
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|objEntityCache
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ObjEntity
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|procedureCache
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Procedure
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|entityInheritanceCache
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|EntityInheritanceTree
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|resultsCache
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SQLResult
argument_list|>
argument_list|()
expr_stmt|;
name|index
argument_list|(
name|maps
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|index
parameter_list|(
name|Collection
argument_list|<
name|DataMap
argument_list|>
name|maps
parameter_list|)
block|{
comment|// index DbEntities separately and before ObjEntities to avoid infinite
comment|// loops when looking up DbEntities during ObjEntity index op
for|for
control|(
name|DataMap
name|map
range|:
name|maps
control|)
block|{
for|for
control|(
name|DbEntity
name|de
range|:
name|map
operator|.
name|getDbEntities
argument_list|()
control|)
block|{
name|dbEntityCache
operator|.
name|put
argument_list|(
name|de
operator|.
name|getName
argument_list|()
argument_list|,
name|de
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|DataMap
name|map
range|:
name|maps
control|)
block|{
comment|// index ObjEntities
for|for
control|(
name|ObjEntity
name|oe
range|:
name|map
operator|.
name|getObjEntities
argument_list|()
control|)
block|{
comment|// index by name
name|objEntityCache
operator|.
name|put
argument_list|(
name|oe
operator|.
name|getName
argument_list|()
argument_list|,
name|oe
argument_list|)
expr_stmt|;
comment|// index by class.. use class name as a key to avoid class
comment|// loading here...
name|String
name|className
init|=
name|oe
operator|.
name|getJavaClassName
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|classKey
init|=
name|classKey
argument_list|(
name|className
argument_list|)
decl_stmt|;
comment|// allow duplicates, but put a special marker indicating
comment|// that this entity can't be looked up by class
name|Object
name|existing
init|=
name|objEntityCache
operator|.
name|get
argument_list|(
name|classKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|existing
operator|!=
name|OBJ_DUPLICATE_MARKER
condition|)
block|{
name|objEntityCache
operator|.
name|put
argument_list|(
name|classKey
argument_list|,
name|OBJ_DUPLICATE_MARKER
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|objEntityCache
operator|.
name|put
argument_list|(
name|classKey
argument_list|,
name|oe
argument_list|)
expr_stmt|;
block|}
block|}
comment|// index stored procedures
for|for
control|(
name|Procedure
name|proc
range|:
name|map
operator|.
name|getProcedures
argument_list|()
control|)
block|{
name|procedureCache
operator|.
name|put
argument_list|(
name|proc
operator|.
name|getName
argument_list|()
argument_list|,
name|proc
argument_list|)
expr_stmt|;
block|}
comment|// index embeddables
name|embeddableCache
operator|.
name|putAll
argument_list|(
name|map
operator|.
name|getEmbeddableMap
argument_list|()
argument_list|)
expr_stmt|;
comment|// index queries
for|for
control|(
name|Query
name|query
range|:
name|map
operator|.
name|getQueries
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|query
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Object
name|existingQuery
init|=
name|queryCache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingQuery
operator|!=
literal|null
operator|&&
name|query
operator|!=
name|existingQuery
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"More than one Query for name"
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
block|}
comment|// restart the map iterator to index inheritance
for|for
control|(
name|DataMap
name|map
range|:
name|maps
control|)
block|{
comment|// index ObjEntity inheritance
for|for
control|(
name|ObjEntity
name|oe
range|:
name|map
operator|.
name|getObjEntities
argument_list|()
control|)
block|{
comment|// build inheritance tree
name|EntityInheritanceTree
name|node
init|=
name|entityInheritanceCache
operator|.
name|get
argument_list|(
name|oe
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|node
operator|=
operator|new
name|EntityInheritanceTree
argument_list|(
name|oe
argument_list|)
expr_stmt|;
name|entityInheritanceCache
operator|.
name|put
argument_list|(
name|oe
operator|.
name|getName
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|String
name|superOEName
init|=
name|oe
operator|.
name|getSuperEntityName
argument_list|()
decl_stmt|;
if|if
condition|(
name|superOEName
operator|!=
literal|null
condition|)
block|{
name|EntityInheritanceTree
name|superNode
init|=
name|entityInheritanceCache
operator|.
name|get
argument_list|(
name|superOEName
argument_list|)
decl_stmt|;
if|if
condition|(
name|superNode
operator|==
literal|null
condition|)
block|{
comment|// do direct entity lookup to avoid recursive cache
comment|// rebuild
name|ObjEntity
name|superOE
init|=
name|objEntityCache
operator|.
name|get
argument_list|(
name|superOEName
argument_list|)
decl_stmt|;
if|if
condition|(
name|superOE
operator|!=
literal|null
condition|)
block|{
name|superNode
operator|=
operator|new
name|EntityInheritanceTree
argument_list|(
name|superOE
argument_list|)
expr_stmt|;
name|entityInheritanceCache
operator|.
name|put
argument_list|(
name|superOEName
argument_list|,
name|superNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// bad mapping? Or most likely some classloader
comment|// issue
name|logger
operator|.
name|warn
argument_list|(
literal|"No super entity mapping for '"
operator|+
name|superOEName
operator|+
literal|"'"
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|superNode
operator|.
name|addChildNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Generates a map key for the object class.      */
specifier|private
name|String
name|classKey
parameter_list|(
name|String
name|className
parameter_list|)
block|{
comment|// need to ensure that there is no conflict with entity names... I guess
comment|// such prefix is enough to guarantee that:
return|return
literal|"^cl^"
operator|+
name|className
return|;
block|}
name|Embeddable
name|getEmbeddable
parameter_list|(
name|String
name|className
parameter_list|)
block|{
return|return
name|embeddableCache
operator|.
name|get
argument_list|(
name|className
argument_list|)
return|;
block|}
name|SQLResult
name|getResult
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|resultsCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
name|EntityInheritanceTree
name|getInheritanceTree
parameter_list|(
name|String
name|entityName
parameter_list|)
block|{
return|return
name|entityInheritanceCache
operator|.
name|get
argument_list|(
name|entityName
argument_list|)
return|;
block|}
name|Procedure
name|getProcedure
parameter_list|(
name|String
name|procedureName
parameter_list|)
block|{
return|return
name|procedureCache
operator|.
name|get
argument_list|(
name|procedureName
argument_list|)
return|;
block|}
name|Query
name|getQuery
parameter_list|(
name|String
name|queryName
parameter_list|)
block|{
return|return
name|queryCache
operator|.
name|get
argument_list|(
name|queryName
argument_list|)
return|;
block|}
name|DbEntity
name|getDbEntity
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|dbEntityCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
name|ObjEntity
name|getObjEntity
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|entityClass
parameter_list|)
block|{
return|return
name|getObjEntity
argument_list|(
name|classKey
argument_list|(
name|entityClass
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|ObjEntity
name|getObjEntity
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ObjEntity
name|entity
init|=
name|objEntityCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
name|OBJ_DUPLICATE_MARKER
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't perform lookup. There is more than one ObjEntity mapped to "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|entity
return|;
block|}
block|}
end_class

end_unit

