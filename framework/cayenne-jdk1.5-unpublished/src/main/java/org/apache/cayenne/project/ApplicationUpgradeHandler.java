begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * A Cayenne project upgrade handler that relies on individual loaders to be able to read  * older versions and convert them to the latest version in memory. This handler simply  * checks the version to trigger the update in the calling UI, and saves what's been  * already loaded.  *   * @since 1.1  */
end_comment

begin_class
specifier|abstract
class|class
name|ApplicationUpgradeHandler
block|{
specifier|private
specifier|static
specifier|final
name|ApplicationUpgradeHandler
name|sharedInstance
init|=
operator|new
name|UpgradeHandler_3_0_0_1
argument_list|()
decl_stmt|;
specifier|static
name|ApplicationUpgradeHandler
name|sharedHandler
parameter_list|()
block|{
return|return
name|sharedInstance
return|;
block|}
specifier|abstract
name|String
name|supportedVersion
parameter_list|()
function_decl|;
specifier|abstract
name|int
name|checkForUpgrades
parameter_list|(
name|Configuration
name|project
parameter_list|,
name|Collection
name|appendMessages
parameter_list|)
function_decl|;
specifier|abstract
name|void
name|performUpgrade
parameter_list|(
name|ApplicationProject
name|project
parameter_list|)
throws|throws
name|ProjectException
function_decl|;
name|int
name|compareVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|double
name|supported
init|=
name|decodeVersion
argument_list|(
name|supportedVersion
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|newVersion
init|=
name|decodeVersion
argument_list|(
name|version
argument_list|)
decl_stmt|;
return|return
name|supported
operator|<
name|newVersion
condition|?
operator|-
literal|1
else|:
operator|(
name|supported
operator|==
name|newVersion
operator|)
condition|?
literal|0
else|:
literal|1
return|;
block|}
specifier|static
name|double
name|decodeVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
if|if
condition|(
name|version
operator|==
literal|null
operator|||
name|version
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// leave the first dot, and treat remaining as a fraction
comment|// remove all non digit chars
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
name|version
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|dotProcessed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|version
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|nextChar
init|=
name|version
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextChar
operator|==
literal|'.'
operator|&&
operator|!
name|dotProcessed
condition|)
block|{
name|dotProcessed
operator|=
literal|true
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|nextChar
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|nextChar
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|static
class|class
name|UpgradeHandler_3_0_0_1
extends|extends
name|UpgradeHandler_3_0
block|{
annotation|@
name|Override
name|String
name|supportedVersion
parameter_list|()
block|{
return|return
literal|"3.0.0.1"
return|;
block|}
block|}
specifier|static
class|class
name|UpgradeHandler_3_0
extends|extends
name|UpgradeHandler_2_0
block|{
annotation|@
name|Override
name|String
name|supportedVersion
parameter_list|()
block|{
return|return
literal|"3.0"
return|;
block|}
block|}
specifier|static
class|class
name|UpgradeHandler_2_0
extends|extends
name|UpgradeHandler_1_1
block|{
annotation|@
name|Override
name|String
name|supportedVersion
parameter_list|()
block|{
return|return
literal|"2.0"
return|;
block|}
block|}
specifier|static
class|class
name|UpgradeHandler_1_1
extends|extends
name|ApplicationUpgradeHandler
block|{
annotation|@
name|Override
name|String
name|supportedVersion
parameter_list|()
block|{
return|return
literal|"1.1"
return|;
block|}
annotation|@
name|Override
name|void
name|performUpgrade
parameter_list|(
name|ApplicationProject
name|project
parameter_list|)
throws|throws
name|ProjectException
block|{
name|project
operator|.
name|setModified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|project
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setProjectVersion
argument_list|(
name|supportedVersion
argument_list|()
argument_list|)
expr_stmt|;
name|project
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|int
name|checkForUpgrades
parameter_list|(
name|Configuration
name|project
parameter_list|,
name|Collection
name|appendMessages
parameter_list|)
block|{
name|String
name|loadedVersion
init|=
name|project
operator|.
name|getProjectVersion
argument_list|()
decl_stmt|;
name|int
name|versionState
init|=
name|compareVersion
argument_list|(
name|loadedVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionState
operator|<
literal|0
condition|)
block|{
name|appendMessages
operator|.
name|add
argument_list|(
literal|"Newer Project Version Detected"
argument_list|)
expr_stmt|;
return|return
name|Project
operator|.
name|UPGRADE_STATUS_NEW
return|;
block|}
if|else if
condition|(
name|versionState
operator|>
literal|0
condition|)
block|{
name|appendMessages
operator|.
name|add
argument_list|(
literal|"Older Project Version Detected"
argument_list|)
expr_stmt|;
return|return
name|Project
operator|.
name|UPGRADE_STATUS_OLD
return|;
block|}
else|else
block|{
return|return
name|Project
operator|.
name|UPGRADE_STATUS_CURRENT
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

