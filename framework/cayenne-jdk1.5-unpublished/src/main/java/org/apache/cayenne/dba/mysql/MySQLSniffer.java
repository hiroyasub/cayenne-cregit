begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|mysql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapterFactory
import|;
end_import

begin_comment
comment|/**  * Detects MySQL database from JDBC metadata.  *   * @since 1.2  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|MySQLSniffer
implements|implements
name|DbAdapterFactory
block|{
specifier|public
name|DbAdapter
name|createAdapter
parameter_list|(
name|DatabaseMetaData
name|md
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|dbName
init|=
name|md
operator|.
name|getDatabaseProductName
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbName
operator|==
literal|null
operator|||
name|dbName
operator|.
name|toUpperCase
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"MYSQL"
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// if InnoDB is used as a default engine, allow PK
name|Statement
name|statement
init|=
name|md
operator|.
name|getConnection
argument_list|()
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|boolean
name|supportFK
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ResultSet
name|rs
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
literal|"SHOW VARIABLES LIKE 'table_type'"
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|tableType
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|supportFK
operator|=
name|tableType
operator|!=
literal|null
operator|&&
name|tableType
operator|.
name|toUpperCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"INNODB"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|MySQLAdapter
name|adapter
init|=
operator|new
name|MySQLAdapter
argument_list|()
decl_stmt|;
name|adapter
operator|.
name|setSupportsFkConstraints
argument_list|(
name|supportFK
argument_list|)
expr_stmt|;
return|return
name|adapter
return|;
block|}
block|}
end_class

end_unit

