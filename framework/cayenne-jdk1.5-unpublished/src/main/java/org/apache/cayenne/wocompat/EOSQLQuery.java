begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|wocompat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLTemplate
import|;
end_import

begin_comment
comment|/**  * A descriptor of SQLTemplate loaded from EOModel. It is an informal "decorator" of  * Cayenne SQLTemplate to provide access to the extra information of WebObjects  * EOFetchSpecification.  *   * @since 1.2  */
end_comment

begin_class
specifier|public
class|class
name|EOSQLQuery
extends|extends
name|SQLTemplate
block|{
specifier|protected
name|Map
name|plistMap
decl_stmt|;
specifier|public
name|EOSQLQuery
parameter_list|(
name|ObjEntity
name|root
parameter_list|,
name|Map
name|plistMap
parameter_list|)
block|{
name|super
argument_list|(
name|root
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|plistMap
operator|=
name|plistMap
expr_stmt|;
name|initFromPlist
argument_list|(
name|plistMap
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|initFromPlist
parameter_list|(
name|Map
name|plistMap
parameter_list|)
block|{
name|setResolvingInherited
argument_list|(
literal|"YES"
operator|.
name|equalsIgnoreCase
argument_list|(
operator|(
name|String
operator|)
name|plistMap
operator|.
name|get
argument_list|(
literal|"isDeep"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setRefreshingObjects
argument_list|(
literal|"YES"
operator|.
name|equalsIgnoreCase
argument_list|(
operator|(
name|String
operator|)
name|plistMap
operator|.
name|get
argument_list|(
literal|"refreshesRefetchedObjects"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|fetchLimit
init|=
name|plistMap
operator|.
name|get
argument_list|(
literal|"fetchLimit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fetchLimit
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|fetchLimit
operator|instanceof
name|Number
condition|)
block|{
name|setFetchLimit
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|fetchLimit
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setFetchLimit
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|fetchLimit
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfex
parameter_list|)
block|{
comment|// ignoring...
block|}
block|}
comment|//query
comment|// TODO: doesn't work with Stored Procedures.
name|Map
name|hints
init|=
operator|(
name|Map
operator|)
name|plistMap
operator|.
name|get
argument_list|(
literal|"hints"
argument_list|)
decl_stmt|;
if|if
condition|(
name|hints
operator|!=
literal|null
operator|&&
operator|!
name|hints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|sqlExpression
init|=
operator|(
name|String
operator|)
name|hints
operator|.
name|get
argument_list|(
literal|"EOCustomQueryExpressionHintKey"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sqlExpression
operator|!=
literal|null
condition|)
block|{
name|setDefaultTemplate
argument_list|(
name|sqlExpression
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

