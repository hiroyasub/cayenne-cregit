begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|DataSourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|DriverDataSourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conn
operator|.
name|DataSourceInfo
import|;
end_import

begin_comment
comment|/**  * Factory of DataSource objects used by the project model. Always tries to locate file  * with direct connection info.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|ProjectDataSourceFactory
implements|implements
name|DataSourceFactory
block|{
specifier|protected
name|File
name|projectDir
decl_stmt|;
specifier|protected
name|boolean
name|loadFromXML
decl_stmt|;
specifier|protected
name|Configuration
name|parentConfiguration
decl_stmt|;
specifier|public
name|ProjectDataSourceFactory
parameter_list|(
name|File
name|projectDir
parameter_list|)
block|{
name|this
operator|.
name|projectDir
operator|=
name|projectDir
expr_stmt|;
block|}
specifier|public
name|ProjectDataSourceFactory
parameter_list|(
name|File
name|projectDir
parameter_list|,
name|boolean
name|loadFromXML
parameter_list|)
block|{
name|this
operator|.
name|projectDir
operator|=
name|projectDir
expr_stmt|;
name|this
operator|.
name|loadFromXML
operator|=
name|loadFromXML
expr_stmt|;
block|}
specifier|public
name|void
name|initializeWithParentConfiguration
parameter_list|(
name|Configuration
name|parentConfiguration
parameter_list|)
block|{
name|this
operator|.
name|parentConfiguration
operator|=
name|parentConfiguration
expr_stmt|;
block|}
specifier|public
name|DataSource
name|getDataSource
parameter_list|(
name|String
name|location
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|ProjectDataSource
argument_list|(
name|getDriverInfo
argument_list|(
name|location
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns a {@link DataSourceInfo} object, loading it from XML file if the factory is      * configured to do so.      */
specifier|protected
name|DataSourceInfo
name|getDriverInfo
parameter_list|(
name|String
name|location
parameter_list|)
throws|throws
name|Exception
block|{
name|DataSourceInfo
name|info
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|loadFromXML
condition|)
block|{
try|try
block|{
name|info
operator|=
operator|new
name|XMLConfigLoader
argument_list|()
operator|.
name|loadDriverInfo
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigurationException
name|e
parameter_list|)
block|{
comment|// ignoring...
block|}
block|}
return|return
name|info
operator|!=
literal|null
condition|?
name|info
else|:
operator|new
name|DataSourceInfo
argument_list|()
return|;
block|}
comment|// a helper class that exposes non public methods of DriverDataSourceFactory to load
comment|// DS XML
specifier|final
class|class
name|XMLConfigLoader
extends|extends
name|DriverDataSourceFactory
block|{
name|XMLConfigLoader
parameter_list|()
throws|throws
name|Exception
block|{
name|super
argument_list|()
expr_stmt|;
name|initializeWithParentConfiguration
argument_list|(
name|ProjectDataSourceFactory
operator|.
name|this
operator|.
name|parentConfiguration
argument_list|)
expr_stmt|;
block|}
name|DataSourceInfo
name|loadDriverInfo
parameter_list|(
name|String
name|location
parameter_list|)
throws|throws
name|Exception
block|{
name|load
argument_list|(
name|location
argument_list|)
expr_stmt|;
return|return
name|driverInfo
return|;
block|}
block|}
block|}
end_class

end_unit

