begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ValueHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|PersistentObjectList
import|;
end_import

begin_comment
comment|/**  * Provides access to a property implemented as a List Field.  *   * @since 1.2  * @author Andrus Adamchik  * @deprecated since 3.0 replaced by non-public classes.  */
end_comment

begin_class
specifier|public
class|class
name|ListProperty
extends|extends
name|BaseToManyProperty
block|{
specifier|public
name|ListProperty
parameter_list|(
name|ClassDescriptor
name|owner
parameter_list|,
name|ClassDescriptor
name|targetDescriptor
parameter_list|,
name|Accessor
name|accessor
parameter_list|,
name|String
name|reverseName
parameter_list|)
block|{
name|super
argument_list|(
name|owner
argument_list|,
name|targetDescriptor
argument_list|,
name|accessor
argument_list|,
name|reverseName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a List for an object. Expects an object to be an instance of Persistent.      */
specifier|protected
name|ValueHolder
name|createCollectionValueHolder
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|PropertyException
block|{
if|if
condition|(
operator|!
operator|(
name|object
operator|instanceof
name|Persistent
operator|)
condition|)
block|{
throw|throw
operator|new
name|PropertyException
argument_list|(
literal|"ValueHolders for non-persistent objects are not supported."
argument_list|,
name|this
argument_list|,
name|object
argument_list|)
throw|;
block|}
return|return
operator|new
name|PersistentObjectList
argument_list|(
operator|(
name|Persistent
operator|)
name|object
argument_list|,
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isFault
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|Object
name|target
init|=
name|accessor
operator|.
name|getValue
argument_list|(
name|object
argument_list|)
decl_stmt|;
return|return
name|target
operator|==
literal|null
operator|||
name|target
operator|instanceof
name|Fault
operator|||
operator|(
operator|(
name|ValueHolder
operator|)
name|target
operator|)
operator|.
name|isFault
argument_list|()
return|;
block|}
specifier|public
name|void
name|invalidate
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|ValueHolder
name|list
init|=
operator|(
name|ValueHolder
operator|)
name|readPropertyDirectly
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|invalidate
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

