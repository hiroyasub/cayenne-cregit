begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|dbsync
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * @since 3.0  */
end_comment

begin_class
specifier|public
class|class
name|ThrowOnPartialSchemaStrategy
extends|extends
name|BaseSchemaUpdateStrategy
block|{
specifier|final
specifier|static
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ThrowOnPartialSchemaStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * @since 3.0      */
annotation|@
name|Override
specifier|protected
name|void
name|processSchemaUpdate
parameter_list|(
name|DataNode
name|dataNode
parameter_list|)
block|{
name|SchemaAnalyzer
name|analyzer
init|=
operator|new
name|SchemaAnalyzer
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|schemas
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|DatabaseMetaData
name|md
init|=
literal|null
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|=
name|dataNode
operator|.
name|getDataSource
argument_list|()
operator|.
name|getConnection
argument_list|()
expr_stmt|;
try|try
block|{
name|md
operator|=
name|connection
operator|.
name|getMetaData
argument_list|()
expr_stmt|;
name|ResultSet
name|rs
init|=
name|md
operator|.
name|getSchemas
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|schemaName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|schemas
operator|.
name|add
argument_list|(
name|schemaName
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|analyzer
operator|.
name|analyzeSchemas
argument_list|(
name|schemas
argument_list|,
name|md
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Exception analyzing schema, ignoring"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|DbEntity
argument_list|>
name|entities
init|=
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntities
argument_list|()
decl_stmt|;
name|boolean
name|isIncluded
init|=
name|analyzer
operator|.
name|compareTables
argument_list|(
name|md
argument_list|,
name|entities
argument_list|)
decl_stmt|;
if|if
condition|(
name|isIncluded
operator|&&
name|analyzer
operator|.
name|getErrorMessage
argument_list|()
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|analyzer
operator|.
name|compareColumns
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Exception analyzing schema, ignoring"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|processSchemaUpdate
argument_list|(
name|dataNode
argument_list|,
name|analyzer
operator|.
name|getTableNoInDB
argument_list|()
argument_list|,
name|analyzer
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
name|entities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|processSchemaUpdate
parameter_list|(
name|DataNode
name|dataNode
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|mergerOnlyTable
parameter_list|,
name|String
name|errorMessage
parameter_list|,
name|int
name|entitiesSize
parameter_list|)
block|{
if|if
condition|(
name|mergerOnlyTable
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|errorMessage
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Full schema is present"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Error - missing or partial schema detected"
argument_list|)
expr_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Schema mismatch detected"
argument_list|)
decl_stmt|;
if|if
condition|(
name|errorMessage
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|mergerOnlyTable
operator|.
name|size
argument_list|()
operator|==
name|entitiesSize
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|": no schema found"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|mergerOnlyTable
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|": missing table '"
argument_list|)
operator|.
name|append
argument_list|(
name|mergerOnlyTable
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

