begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_comment
comment|/**  * Utility class to perform zip/unzip operations on files and directories.  *   * @deprecated since 3.1. This class is unused and will be removed in the future  *             versions..  */
end_comment

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|ZipUtil
block|{
comment|/**      * Constructor for ZipUtil.      */
specifier|public
name|ZipUtil
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Unpacks a zip file to the target directory.      *       * @param zipFile      * @param destDir      * @throws IOException      */
specifier|public
specifier|static
name|void
name|unzip
parameter_list|(
name|File
name|zipFile
parameter_list|,
name|File
name|destDir
parameter_list|)
throws|throws
name|IOException
block|{
name|ZipFile
name|zip
init|=
operator|new
name|ZipFile
argument_list|(
name|zipFile
argument_list|)
decl_stmt|;
try|try
block|{
name|Enumeration
argument_list|<
name|?
extends|extends
name|ZipEntry
argument_list|>
name|en
init|=
name|zip
operator|.
name|entries
argument_list|()
decl_stmt|;
name|int
name|bufSize
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
while|while
condition|(
name|en
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|ZipEntry
name|entry
init|=
name|en
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|(
name|destDir
operator|!=
literal|null
operator|)
condition|?
operator|new
name|File
argument_list|(
name|destDir
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
else|:
operator|new
name|File
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error creating directory: "
operator|+
name|file
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|File
name|parent
init|=
name|file
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|parent
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|parent
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error creating directory: "
operator|+
name|parent
argument_list|)
throw|;
block|}
block|}
name|InputStream
name|in
init|=
name|zip
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
decl_stmt|;
try|try
block|{
name|OutputStream
name|out
init|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|,
name|bufSize
argument_list|)
decl_stmt|;
try|try
block|{
name|Util
operator|.
name|copyPipe
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|bufSize
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|zip
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Recursively zips a set of root entries into a zipfile, compressing the contents.      *       * @param zipFile target zip file.      * @param parentDir a directory containing source files to zip.      * @param sources an array of files and/or directories to zip.      * @param pathSeparator path separator for zip entries.      * @throws IOException      */
specifier|public
specifier|static
name|void
name|zip
parameter_list|(
name|File
name|zipFile
parameter_list|,
name|File
name|parentDir
parameter_list|,
name|File
index|[]
name|sources
parameter_list|,
name|char
name|pathSeparator
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|stripPath
init|=
operator|(
name|parentDir
operator|!=
literal|null
operator|)
condition|?
name|parentDir
operator|.
name|getPath
argument_list|()
else|:
literal|""
decl_stmt|;
if|if
condition|(
name|stripPath
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|stripPath
operator|.
name|endsWith
argument_list|(
name|File
operator|.
name|separator
argument_list|)
condition|)
block|{
name|stripPath
operator|+=
name|File
operator|.
name|separator
expr_stmt|;
block|}
name|ZipOutputStream
name|out
init|=
operator|new
name|ZipOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|zipFile
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|setMethod
argument_list|(
name|ZipOutputStream
operator|.
name|DEFLATED
argument_list|)
expr_stmt|;
try|try
block|{
comment|// something like an Ant directory scanner wouldn't hurt here
for|for
control|(
name|File
name|source
range|:
name|sources
control|)
block|{
if|if
condition|(
operator|!
name|source
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"File or directory does not exist: "
operator|+
name|source
argument_list|)
throw|;
block|}
if|if
condition|(
name|source
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|zipDirectory
argument_list|(
name|out
argument_list|,
name|stripPath
argument_list|,
name|source
argument_list|,
name|pathSeparator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zipFile
argument_list|(
name|out
argument_list|,
name|stripPath
argument_list|,
name|source
argument_list|,
name|pathSeparator
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Uses code fragments from Jakarta-Ant, Copyright: Apache Software Foundation.      */
specifier|private
specifier|static
name|void
name|zipDirectory
parameter_list|(
name|ZipOutputStream
name|out
parameter_list|,
name|String
name|stripPath
parameter_list|,
name|File
name|dir
parameter_list|,
name|char
name|pathSeparator
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|entries
init|=
name|dir
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|entries
operator|==
literal|null
operator|||
name|entries
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|// recurse via entries
for|for
control|(
name|String
name|entry
range|:
name|entries
control|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|zipDirectory
argument_list|(
name|out
argument_list|,
name|stripPath
argument_list|,
name|file
argument_list|,
name|pathSeparator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zipFile
argument_list|(
name|out
argument_list|,
name|stripPath
argument_list|,
name|file
argument_list|,
name|pathSeparator
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Uses code fragments from Jakarta-Ant, Copyright: Apache Software Foundation.      */
specifier|private
specifier|static
name|void
name|zipFile
parameter_list|(
name|ZipOutputStream
name|out
parameter_list|,
name|String
name|stripPath
parameter_list|,
name|File
name|file
parameter_list|,
name|char
name|pathSeparator
parameter_list|)
throws|throws
name|IOException
block|{
name|ZipEntry
name|ze
init|=
operator|new
name|ZipEntry
argument_list|(
name|processPath
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|stripPath
argument_list|,
name|pathSeparator
argument_list|)
argument_list|)
decl_stmt|;
name|ze
operator|.
name|setTime
argument_list|(
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|putNextEntry
argument_list|(
name|ze
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|8
operator|*
literal|1024
index|]
decl_stmt|;
name|BufferedInputStream
name|in
init|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|count
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|count
operator|!=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|processPath
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|stripPath
parameter_list|,
name|char
name|pathSeparator
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
name|stripPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid entry: "
operator|+
name|path
operator|+
literal|"; expected to start with "
operator|+
name|stripPath
argument_list|)
throw|;
block|}
return|return
name|path
operator|.
name|substring
argument_list|(
name|stripPath
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
name|pathSeparator
argument_list|)
return|;
block|}
block|}
end_class

end_unit

