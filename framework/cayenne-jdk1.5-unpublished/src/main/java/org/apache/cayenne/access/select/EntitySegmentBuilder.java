begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|select
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|ExtendedTypeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_comment
comment|/**  * Builder of the leaf entity segment that has no persistent subclasses or superclasses.  *   * @since 3.0  */
end_comment

begin_class
class|class
name|EntitySegmentBuilder
extends|extends
name|MappedColumnBuilder
block|{
specifier|protected
name|QueryMetadata
name|metadata
decl_stmt|;
specifier|protected
name|ObjEntity
name|entity
decl_stmt|;
name|EntitySegmentBuilder
parameter_list|(
name|QueryMetadata
name|metadata
parameter_list|,
name|ExtendedTypeMap
name|extendedTypes
parameter_list|,
name|ObjEntity
name|entity
parameter_list|)
block|{
name|super
argument_list|(
name|extendedTypes
argument_list|)
expr_stmt|;
name|this
operator|.
name|entity
operator|=
name|entity
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
block|}
name|List
argument_list|<
name|EntitySelectColumn
argument_list|>
name|buildColumns
parameter_list|()
block|{
if|if
condition|(
name|metadata
operator|.
name|getPageSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|appendId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|appendAll
argument_list|()
expr_stmt|;
block|}
return|return
name|columns
return|;
block|}
name|EntitySegment
name|buildSegment
parameter_list|()
block|{
name|buildColumns
argument_list|()
expr_stmt|;
name|RowReader
argument_list|<
name|Object
argument_list|>
name|rowReader
decl_stmt|;
comment|// read single column ID as scalar
if|if
condition|(
name|metadata
operator|.
name|getPageSize
argument_list|()
operator|>
literal|0
operator|&&
name|columns
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|EntitySelectColumn
name|column
init|=
name|columns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|rowReader
operator|=
operator|new
name|ScalarRowReader
argument_list|(
name|column
operator|.
name|getConverter
argument_list|()
argument_list|,
name|column
operator|.
name|getJdbcType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rowReader
operator|=
operator|new
name|EntityRowReader
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|,
name|columns
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|EntitySegment
argument_list|(
name|rowReader
argument_list|,
name|columns
argument_list|)
return|;
block|}
specifier|protected
name|void
name|appendId
parameter_list|()
block|{
comment|// append meaningful attributes prior to any special DbAttributes; this way if
comment|// there is an overlap between meaningful and Db attributes, the right Java
comment|// type will be used.
name|appendIdObjAttributes
argument_list|()
expr_stmt|;
name|appendIdDbAttributes
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|appendAll
parameter_list|()
block|{
comment|// append meaningful attributes prior to any special DbAttributes; this way if
comment|// there is an overlap between meaningful and Db attributes, the right Java
comment|// type will be used.
name|appendObjAttributes
argument_list|()
expr_stmt|;
name|appendIdDbAttributes
argument_list|()
expr_stmt|;
name|appendFK
argument_list|()
expr_stmt|;
name|appendJointPrefetches
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|appendIdObjAttributes
parameter_list|()
block|{
for|for
control|(
name|ObjAttribute
name|attribute
range|:
name|entity
operator|.
name|getDeclaredAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|attribute
operator|.
name|isPrimaryKey
argument_list|()
condition|)
block|{
name|append
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|appendObjAttributes
parameter_list|()
block|{
for|for
control|(
name|ObjAttribute
name|attribute
range|:
name|entity
operator|.
name|getDeclaredAttributes
argument_list|()
control|)
block|{
name|append
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|appendIdDbAttributes
parameter_list|()
block|{
comment|// if this ObjENtity inherits DbEntity from super, we will rely in super
comment|// descriptor to map ID columns
if|if
condition|(
name|entity
operator|.
name|getDbEntityName
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DbAttribute
name|attribute
range|:
name|entity
operator|.
name|getDbEntity
argument_list|()
operator|.
name|getPrimaryKeys
argument_list|()
control|)
block|{
name|append
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|appendFK
parameter_list|()
block|{
for|for
control|(
name|ObjRelationship
name|relationship
range|:
name|entity
operator|.
name|getDeclaredRelationships
argument_list|()
control|)
block|{
name|DbRelationship
name|dbRel
init|=
name|relationship
operator|.
name|getDbRelationships
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DbJoin
argument_list|>
name|joins
init|=
name|dbRel
operator|.
name|getJoins
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|joins
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|append
argument_list|(
name|joins
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|appendJointPrefetches
parameter_list|()
block|{
if|if
condition|(
name|metadata
operator|.
name|getPrefetchTree
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"TODO: joint prefetches"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

