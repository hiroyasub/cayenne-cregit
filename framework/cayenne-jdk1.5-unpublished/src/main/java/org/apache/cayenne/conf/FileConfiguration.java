begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * FileConfiguration loads a Cayenne configuraton file from a given location in the file  * system.  *   */
end_comment

begin_class
specifier|public
class|class
name|FileConfiguration
extends|extends
name|DefaultConfiguration
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FileConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The domain file used for this configuration      */
specifier|protected
name|File
name|projectFile
decl_stmt|;
comment|/**      * Default constructor. Simply calls      * {@link FileConfiguration#FileConfiguration(String)} with      * {@link Configuration#DEFAULT_DOMAIN_FILE} as argument.      *       * @see DefaultConfiguration#DefaultConfiguration()      */
specifier|public
name|FileConfiguration
parameter_list|()
block|{
name|this
argument_list|(
name|Configuration
operator|.
name|DEFAULT_DOMAIN_FILE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a configuration that uses the provided file name as the main project file,      * ignoring any other lookup strategies. The file name is<b>not</b> checked for      * existence and must not contain relative or absolute paths, i.e. only the file name.      *       * @throws ConfigurationException when projectFile is<code>null</code>.      * @see DefaultConfiguration#DefaultConfiguration(String)      */
specifier|public
name|FileConfiguration
parameter_list|(
name|String
name|domainConfigurationName
parameter_list|)
block|{
name|super
argument_list|(
name|domainConfigurationName
argument_list|)
expr_stmt|;
comment|// set the project file
name|this
operator|.
name|projectFile
operator|=
operator|new
name|File
argument_list|(
name|domainConfigurationName
argument_list|)
expr_stmt|;
comment|// configure the ResourceLocator for plain files
name|locator
operator|.
name|setSkipAbsolutePath
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|locator
operator|.
name|setSkipClasspath
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|locator
operator|.
name|setSkipCurrentDirectory
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|locator
operator|.
name|setSkipHomeDirectory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// add the file's location to the search path, if it exists
name|File
name|projectDirectory
init|=
name|this
operator|.
name|getProjectDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|projectDirectory
operator|!=
literal|null
condition|)
block|{
name|locator
operator|.
name|addFilesystemPath
argument_list|(
name|projectDirectory
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a configuration that uses the provided file as the main project file,      * ignoring any other lookup strategies.      *       * @throws ConfigurationException when projectFile is<code>null</code>, a      *             directory or not readable.      */
specifier|public
name|FileConfiguration
parameter_list|(
name|File
name|domainConfigurationFile
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"using domain file: "
operator|+
name|domainConfigurationFile
argument_list|)
expr_stmt|;
comment|// set the project file
name|setProjectFile
argument_list|(
name|domainConfigurationFile
argument_list|)
expr_stmt|;
comment|// configure the ResourceLocator for plain files
name|locator
operator|.
name|setSkipAbsolutePath
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|locator
operator|.
name|setSkipClasspath
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|locator
operator|.
name|setSkipCurrentDirectory
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|locator
operator|.
name|setSkipHomeDirectory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// add the file's location to the search path, if it exists
name|File
name|projectDirectory
init|=
name|this
operator|.
name|getProjectDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|projectDirectory
operator|!=
literal|null
condition|)
block|{
name|locator
operator|.
name|addFilesystemPath
argument_list|(
name|projectDirectory
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Adds the given String as a custom path for filesystem lookups. The path can be      * relative or absolute and is<i>not</i> checked for existence. This allows for easy      * customization of resource search paths after Constructor invocation:      *       *<pre>      * conf = new FileConfiguration(&quot;myconfig-cayenne.xml&quot;);      * conf.addFilesystemPath(new File(&quot;a/relative/path&quot;));      * conf.addFilesystemPath(new File(&quot;/an/absolute/search/path&quot;));      * Configuration.initializeSharedConfiguration(conf);      *</pre>      *       * Alternatively use {@link FileConfiguration#addFilesystemPath(File)} for adding a      * path that is checked for existence.      *       * @throws IllegalArgumentException if<code>path</code> is<code>null</code>.      */
specifier|public
name|void
name|addFilesystemPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|locator
operator|.
name|addFilesystemPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds the given directory as a path for filesystem lookups. The directory is checked      * for existence.      *       * @throws IllegalArgumentException if<code>path</code> is<code>null</code>,      *             not a directory or not readable.      */
specifier|public
name|void
name|addFilesystemPath
parameter_list|(
name|File
name|path
parameter_list|)
block|{
name|locator
operator|.
name|addFilesystemPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Only returns<code>true</code> when {@link #getProjectFile} does not return      *<code>null</code>.      *       * @deprecated since 3.0 - superclass method is deprecated.      */
annotation|@
name|Override
specifier|public
name|boolean
name|canInitialize
parameter_list|()
block|{
comment|// TODO: move this to "initialize" once the deprecated method is removed
return|return
name|this
operator|.
name|getProjectFile
argument_list|()
operator|!=
literal|null
return|;
block|}
comment|/**      * Returns the main domain file used for this configuration.      */
specifier|public
name|File
name|getProjectFile
parameter_list|()
block|{
return|return
name|projectFile
return|;
block|}
comment|/**      * Sets the main domain file used for this configuration.      *       * @throws ConfigurationException if<code>projectFile</code> is null, a directory      *             or not readable.      */
specifier|protected
name|void
name|setProjectFile
parameter_list|(
name|File
name|projectFile
parameter_list|)
block|{
if|if
condition|(
name|projectFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|projectFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|this
operator|.
name|projectFile
operator|=
name|projectFile
expr_stmt|;
name|this
operator|.
name|setDomainConfigurationName
argument_list|(
name|projectFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Project file: "
operator|+
name|projectFile
operator|+
literal|" is a directory or not readable."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Cannot use null as project file."
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the directory of the current project file as returned by      * {@link #getProjectFile}.      */
specifier|public
name|File
name|getProjectDirectory
parameter_list|()
block|{
name|File
name|pfile
init|=
name|this
operator|.
name|getProjectFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|pfile
operator|!=
literal|null
condition|)
block|{
return|return
name|pfile
operator|.
name|getParentFile
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

