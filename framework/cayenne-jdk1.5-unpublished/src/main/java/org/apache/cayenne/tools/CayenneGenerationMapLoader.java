begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|MapLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_comment
comment|/**  * Provides DataMap loading and ObjEntity filtering functionality to the class generation tasks.  *   * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
class|class
name|CayenneGenerationMapLoader
block|{
specifier|private
name|File
name|mainDataMapFile
decl_stmt|;
specifier|private
name|File
index|[]
name|additionalDataMapFiles
decl_stmt|;
specifier|private
name|NamePatternMatcher
name|nameFilter
decl_stmt|;
specifier|private
name|boolean
name|client
decl_stmt|;
specifier|private
name|DataMap
name|mainDataMap
decl_stmt|;
name|DataMap
name|getMainDataMap
parameter_list|()
throws|throws
name|MalformedURLException
block|{
if|if
condition|(
name|mainDataMap
operator|==
literal|null
condition|)
block|{
name|MapLoader
name|mapLoader
init|=
operator|new
name|MapLoader
argument_list|()
decl_stmt|;
name|DataMap
name|mainDataMap
init|=
name|loadDataMap
argument_list|(
name|mapLoader
argument_list|,
name|mainDataMapFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|additionalDataMapFiles
operator|!=
literal|null
condition|)
block|{
name|EntityResolver
name|entityResolver
init|=
operator|new
name|EntityResolver
argument_list|()
decl_stmt|;
name|entityResolver
operator|.
name|addDataMap
argument_list|(
name|mainDataMap
argument_list|)
expr_stmt|;
name|mainDataMap
operator|.
name|setNamespace
argument_list|(
name|entityResolver
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|additionalDataMapFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DataMap
name|dataMap
init|=
name|loadDataMap
argument_list|(
name|mapLoader
argument_list|,
name|additionalDataMapFiles
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|entityResolver
operator|.
name|addDataMap
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|setNamespace
argument_list|(
name|entityResolver
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|mainDataMap
operator|=
name|mainDataMap
expr_stmt|;
block|}
return|return
name|mainDataMap
return|;
block|}
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|getFilteredEntities
parameter_list|()
throws|throws
name|MalformedURLException
block|{
name|List
argument_list|<
name|ObjEntity
argument_list|>
name|entities
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjEntity
argument_list|>
argument_list|(
name|getMainDataMap
argument_list|()
operator|.
name|getObjEntities
argument_list|()
argument_list|)
decl_stmt|;
comment|// filter out excluded entities...
name|Iterator
argument_list|<
name|ObjEntity
argument_list|>
name|it
init|=
name|entities
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ObjEntity
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|isGeneric
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|client
operator|&&
operator|!
name|e
operator|.
name|isClientAllowed
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|nameFilter
operator|.
name|isIncluded
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|entities
return|;
block|}
specifier|protected
name|DataMap
name|loadDataMap
parameter_list|(
name|MapLoader
name|mapLoader
parameter_list|,
name|File
name|dataMapFile
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|InputSource
name|in
init|=
operator|new
name|InputSource
argument_list|(
name|dataMapFile
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|mapLoader
operator|.
name|loadDataMap
argument_list|(
name|in
argument_list|)
return|;
block|}
name|void
name|setMainDataMapFile
parameter_list|(
name|File
name|mainDataMapFile
parameter_list|)
block|{
name|this
operator|.
name|mainDataMapFile
operator|=
name|mainDataMapFile
expr_stmt|;
block|}
name|void
name|setAdditionalDataMapFiles
parameter_list|(
name|File
index|[]
name|additionalDataMapFiles
parameter_list|)
block|{
name|this
operator|.
name|additionalDataMapFiles
operator|=
name|additionalDataMapFiles
expr_stmt|;
block|}
name|void
name|setClient
parameter_list|(
name|boolean
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
specifier|public
name|void
name|setNameFilter
parameter_list|(
name|NamePatternMatcher
name|nameFilter
parameter_list|)
block|{
name|this
operator|.
name|nameFilter
operator|=
name|nameFilter
expr_stmt|;
block|}
block|}
end_class

end_unit

