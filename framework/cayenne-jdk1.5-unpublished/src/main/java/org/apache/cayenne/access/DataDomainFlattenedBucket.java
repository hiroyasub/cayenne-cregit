begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|DeleteBatchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|InsertBatchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_comment
comment|/**  * A sync bucket that holds flattened queries.  *   * @since 1.2  * @author Andrus Adamchik  */
end_comment

begin_class
class|class
name|DataDomainFlattenedBucket
block|{
specifier|final
name|DataDomainFlushAction
name|parent
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|DbEntity
argument_list|,
name|InsertBatchQuery
argument_list|>
name|flattenedInsertQueries
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|DbEntity
argument_list|,
name|DeleteBatchQuery
argument_list|>
name|flattenedDeleteQueries
decl_stmt|;
name|DataDomainFlattenedBucket
parameter_list|(
name|DataDomainFlushAction
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|flattenedInsertQueries
operator|=
operator|new
name|HashMap
argument_list|<
name|DbEntity
argument_list|,
name|InsertBatchQuery
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|flattenedDeleteQueries
operator|=
operator|new
name|HashMap
argument_list|<
name|DbEntity
argument_list|,
name|DeleteBatchQuery
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|flattenedInsertQueries
operator|.
name|isEmpty
argument_list|()
operator|&&
name|flattenedDeleteQueries
operator|.
name|isEmpty
argument_list|()
return|;
block|}
name|void
name|addFlattenedInsert
parameter_list|(
name|DbEntity
name|flattenedEntity
parameter_list|,
name|FlattenedArcKey
name|flattenedArcKey
parameter_list|)
block|{
name|InsertBatchQuery
name|relationInsertQuery
init|=
name|flattenedInsertQueries
operator|.
name|get
argument_list|(
name|flattenedEntity
argument_list|)
decl_stmt|;
if|if
condition|(
name|relationInsertQuery
operator|==
literal|null
condition|)
block|{
name|relationInsertQuery
operator|=
operator|new
name|InsertBatchQuery
argument_list|(
name|flattenedEntity
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|flattenedInsertQueries
operator|.
name|put
argument_list|(
name|flattenedEntity
argument_list|,
name|relationInsertQuery
argument_list|)
expr_stmt|;
block|}
name|DataNode
name|node
init|=
name|parent
operator|.
name|getDomain
argument_list|()
operator|.
name|lookupDataNode
argument_list|(
name|flattenedEntity
operator|.
name|getDataMap
argument_list|()
argument_list|)
decl_stmt|;
name|Map
name|flattenedSnapshot
init|=
name|flattenedArcKey
operator|.
name|buildJoinSnapshotForInsert
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|relationInsertQuery
operator|.
name|add
argument_list|(
name|flattenedSnapshot
argument_list|)
expr_stmt|;
block|}
name|void
name|addFlattenedDelete
parameter_list|(
name|DbEntity
name|flattenedEntity
parameter_list|,
name|FlattenedArcKey
name|flattenedDeleteInfo
parameter_list|)
block|{
name|DeleteBatchQuery
name|relationDeleteQuery
init|=
name|flattenedDeleteQueries
operator|.
name|get
argument_list|(
name|flattenedEntity
argument_list|)
decl_stmt|;
if|if
condition|(
name|relationDeleteQuery
operator|==
literal|null
condition|)
block|{
name|boolean
name|optimisticLocking
init|=
literal|false
decl_stmt|;
name|relationDeleteQuery
operator|=
operator|new
name|DeleteBatchQuery
argument_list|(
name|flattenedEntity
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|relationDeleteQuery
operator|.
name|setUsingOptimisticLocking
argument_list|(
name|optimisticLocking
argument_list|)
expr_stmt|;
name|flattenedDeleteQueries
operator|.
name|put
argument_list|(
name|flattenedEntity
argument_list|,
name|relationDeleteQuery
argument_list|)
expr_stmt|;
block|}
name|DataNode
name|node
init|=
name|parent
operator|.
name|getDomain
argument_list|()
operator|.
name|lookupDataNode
argument_list|(
name|flattenedEntity
operator|.
name|getDataMap
argument_list|()
argument_list|)
decl_stmt|;
name|List
name|flattenedSnapshots
init|=
name|flattenedDeleteInfo
operator|.
name|buildJoinSnapshotsForDelete
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|flattenedSnapshots
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Iterator
name|snapsIt
init|=
name|flattenedSnapshots
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|snapsIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|relationDeleteQuery
operator|.
name|add
argument_list|(
operator|(
name|Map
operator|)
name|snapsIt
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|appendInserts
parameter_list|(
name|Collection
argument_list|<
name|Query
argument_list|>
name|queries
parameter_list|)
block|{
if|if
condition|(
operator|!
name|flattenedInsertQueries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|queries
operator|.
name|addAll
argument_list|(
name|flattenedInsertQueries
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|appendDeletes
parameter_list|(
name|Collection
argument_list|<
name|Query
argument_list|>
name|queries
parameter_list|)
block|{
if|if
condition|(
operator|!
name|flattenedDeleteQueries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|queries
operator|.
name|addAll
argument_list|(
name|flattenedDeleteQueries
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

