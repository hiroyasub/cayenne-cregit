begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_comment
comment|/**  * QueryBuilder for SelectQueries.  *   * @since 1.1  * @author Andrus Adamchik  */
end_comment

begin_class
class|class
name|SelectQueryBuilder
extends|extends
name|QueryBuilder
block|{
comment|/**      * Creates a SelectQuery.      */
specifier|public
name|Query
name|getQuery
parameter_list|()
block|{
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setRoot
argument_list|(
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
if|if
condition|(
name|orderings
operator|!=
literal|null
operator|&&
operator|!
name|orderings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|query
operator|.
name|addOrderings
argument_list|(
name|orderings
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefetches
operator|!=
literal|null
operator|&&
operator|!
name|prefetches
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|prefetch
range|:
name|prefetches
control|)
block|{
name|query
operator|.
name|addPrefetch
argument_list|(
name|prefetch
argument_list|)
expr_stmt|;
block|}
block|}
comment|// init properties
name|query
operator|.
name|initWithProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
block|}
end_class

end_unit

