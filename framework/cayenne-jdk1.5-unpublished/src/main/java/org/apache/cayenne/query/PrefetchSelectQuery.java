begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * A SelectQuery to perform a prefetch based on another query. Used internally by Cayenne  * and is normally never used directly.  *   */
end_comment

begin_class
specifier|public
class|class
name|PrefetchSelectQuery
extends|extends
name|SelectQuery
block|{
specifier|protected
name|SelectQuery
name|parentQuery
decl_stmt|;
comment|/**      * The relationship path from root objects to the objects being prefetched.      */
specifier|protected
name|String
name|prefetchPath
decl_stmt|;
comment|/**      * Stores the last ObjRelationship in the prefetch path.      */
specifier|protected
name|ObjRelationship
name|lastPrefetchHint
decl_stmt|;
comment|// TODO, Andrus 11/17/2005 - i guess we should deprecate
comment|// SelectQuery.customDbAttribute, replacing it with "resultPaths" mechanism.
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|resultPaths
decl_stmt|;
comment|/**      * Creates a new disjoint prefetch select query.      *       * @since 1.2      */
specifier|public
name|PrefetchSelectQuery
parameter_list|(
name|SelectQuery
name|parentQuery
parameter_list|,
name|String
name|prefetchPath
parameter_list|,
name|ObjRelationship
name|lastPrefetchHint
parameter_list|)
block|{
name|setRoot
argument_list|(
name|lastPrefetchHint
operator|.
name|getTargetEntity
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|parentQuery
operator|=
name|parentQuery
expr_stmt|;
name|this
operator|.
name|prefetchPath
operator|=
name|prefetchPath
expr_stmt|;
name|this
operator|.
name|lastPrefetchHint
operator|=
name|lastPrefetchHint
expr_stmt|;
block|}
comment|/**      * Overrides super implementation to suppress disjoint prefetch routing, as the parent      * query should take care of that.      *       * @since 1.2      */
annotation|@
name|Override
name|void
name|routePrefetches
parameter_list|(
name|QueryRouter
name|router
parameter_list|,
name|EntityResolver
name|resolver
parameter_list|)
block|{
comment|// noop - intentional.
block|}
comment|/**      * Returns the prefetchPath.      *       * @return String      */
specifier|public
name|String
name|getPrefetchPath
parameter_list|()
block|{
return|return
name|prefetchPath
return|;
block|}
comment|/**      * Sets the prefetchPath.      *       * @param prefetchPath The prefetchPath to set      */
specifier|public
name|void
name|setPrefetchPath
parameter_list|(
name|String
name|prefetchPath
parameter_list|)
block|{
name|this
operator|.
name|prefetchPath
operator|=
name|prefetchPath
expr_stmt|;
block|}
comment|/**      * @since 1.1      */
specifier|public
name|SelectQuery
name|getParentQuery
parameter_list|()
block|{
return|return
name|parentQuery
return|;
block|}
comment|/**      * @since 1.1      */
specifier|public
name|void
name|setParentQuery
parameter_list|(
name|SelectQuery
name|parentQuery
parameter_list|)
block|{
name|this
operator|.
name|parentQuery
operator|=
name|parentQuery
expr_stmt|;
block|}
comment|/**      * Retunrs last incoming ObjRelationship in the prefetch relationship chain.      *       * @since 1.1      */
specifier|public
name|ObjRelationship
name|getLastPrefetchHint
parameter_list|()
block|{
return|return
name|lastPrefetchHint
return|;
block|}
comment|/**      * @since 1.1      */
specifier|public
name|void
name|setLastPrefetchHint
parameter_list|(
name|ObjRelationship
name|relationship
parameter_list|)
block|{
name|lastPrefetchHint
operator|=
name|relationship
expr_stmt|;
block|}
comment|/**      * Configures an "extra" path that will resolve to an extra column (or columns) in the      * result set.      *       * @param path A valid path expression. E.g. "abc" or "db:ABC" or "abc.xyz".      * @since 1.2      */
specifier|public
name|void
name|addResultPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|Util
operator|.
name|isEmptyString
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid path: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|nonNullResultPaths
argument_list|()
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes an extra result path. Note that this method doesn't check for expression      * invariants, as it doesn't have a proper context to do so. E.g. for the purspose of      * this method "db:ARTIST_NAME" and "obj:artistName" are not the same, though both      * will resolve to the same column name.      */
specifier|public
name|void
name|removeResultPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|resultPaths
operator|!=
literal|null
condition|)
block|{
name|resultPaths
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns extra result paths.      *       * @since 1.2      */
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getResultPaths
parameter_list|()
block|{
return|return
name|resultPaths
operator|!=
literal|null
condition|?
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|resultPaths
argument_list|)
else|:
name|Collections
operator|.
name|EMPTY_SET
return|;
block|}
comment|/**      * Returns a Collection that internally stores extra result paths, creating it on      * demand.      *       * @since 1.2      */
name|Collection
argument_list|<
name|String
argument_list|>
name|nonNullResultPaths
parameter_list|()
block|{
if|if
condition|(
name|resultPaths
operator|==
literal|null
condition|)
block|{
name|resultPaths
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|resultPaths
return|;
block|}
block|}
end_class

end_unit

