begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|AutoAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|MapLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_comment
comment|/**  * Implementation of ConfigLoaderDelegate that creates Cayenne access objects stack.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|RuntimeLoadDelegate
implements|implements
name|ConfigLoaderDelegate
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RuntimeLoadDelegate
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// TODO: andrus, 7/17/2006 - these variables, and project upgrade logic should be
comment|// refactored out of the MapLoader. In fact we should either modify raw XML during the
comment|// upgrade, or implement some consistent upgrade API across various loaders
specifier|final
specifier|static
name|String
name|_1_2_PACKAGE_PREFIX
init|=
literal|"org.objectstyle.cayenne."
decl_stmt|;
specifier|final
specifier|static
name|String
name|_2_0_PACKAGE_PREFIX
init|=
literal|"org.apache.cayenne."
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|DataDomain
argument_list|>
name|domains
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DataDomain
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|views
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|ConfigStatus
name|status
decl_stmt|;
specifier|protected
name|Configuration
name|config
decl_stmt|;
specifier|protected
name|long
name|startTime
decl_stmt|;
specifier|protected
name|MapLoader
name|mapLoader
decl_stmt|;
specifier|public
name|RuntimeLoadDelegate
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|ConfigStatus
name|status
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
name|status
operator|=
operator|new
name|ConfigStatus
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
specifier|protected
name|DataDomain
name|findDomain
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|FindException
block|{
name|DataDomain
name|domain
init|=
name|domains
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|domain
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FindException
argument_list|(
literal|"Can't find DataDomain: "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|domain
return|;
block|}
specifier|protected
name|DataMap
name|findMap
parameter_list|(
name|String
name|domainName
parameter_list|,
name|String
name|mapName
parameter_list|)
throws|throws
name|FindException
block|{
name|DataDomain
name|domain
init|=
name|findDomain
argument_list|(
name|domainName
argument_list|)
decl_stmt|;
name|DataMap
name|map
init|=
name|domain
operator|.
name|getMap
argument_list|(
name|mapName
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FindException
argument_list|(
literal|"Can't find DataMap: "
operator|+
name|mapName
argument_list|)
throw|;
block|}
return|return
name|map
return|;
block|}
specifier|protected
name|DataNode
name|findNode
parameter_list|(
name|String
name|domainName
parameter_list|,
name|String
name|nodeName
parameter_list|)
throws|throws
name|FindException
block|{
name|DataDomain
name|domain
init|=
name|findDomain
argument_list|(
name|domainName
argument_list|)
decl_stmt|;
name|DataNode
name|node
init|=
name|domain
operator|.
name|getNode
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FindException
argument_list|(
literal|"Can't find DataNode: "
operator|+
name|nodeName
argument_list|)
throw|;
block|}
return|return
name|node
return|;
block|}
specifier|public
name|boolean
name|loadError
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Parser Exception."
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|status
operator|.
name|getOtherFailures
argument_list|()
operator|.
name|add
argument_list|(
name|th
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**      * @since 1.1      */
specifier|public
name|void
name|shouldLoadProjectVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|config
operator|.
name|setProjectVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since 1.1      */
specifier|public
name|void
name|shouldRegisterDataView
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|location
parameter_list|)
block|{
name|views
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|shouldLoadDataDomainProperties
parameter_list|(
name|String
name|domainName
parameter_list|,
name|Map
name|properties
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
operator|||
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|DataDomain
name|domain
init|=
literal|null
decl_stmt|;
try|try
block|{
name|domain
operator|=
name|findDomain
argument_list|(
name|domainName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FindException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Error: Domain is not loaded: "
operator|+
name|domainName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Domain is not loaded: "
operator|+
name|domainName
argument_list|)
throw|;
block|}
name|domain
operator|.
name|initWithProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|shouldLoadDataDomain
parameter_list|(
name|String
name|domainName
parameter_list|)
block|{
if|if
condition|(
name|domainName
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Error: unnamed<domain>."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Domain 'name' attribute must be not null."
argument_list|)
throw|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"loaded domain: "
operator|+
name|domainName
argument_list|)
expr_stmt|;
name|domains
operator|.
name|put
argument_list|(
name|domainName
argument_list|,
operator|new
name|DataDomain
argument_list|(
name|domainName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|shouldLoadDataMaps
parameter_list|(
name|String
name|domainName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|DataMap
argument_list|>
name|locations
parameter_list|)
block|{
if|if
condition|(
name|locations
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|DataDomain
name|domain
init|=
literal|null
decl_stmt|;
try|try
block|{
name|domain
operator|=
name|findDomain
argument_list|(
name|domainName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FindException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Error: Domain is not loaded: "
operator|+
name|domainName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Domain is not loaded: "
operator|+
name|domainName
argument_list|)
throw|;
block|}
comment|// load DataMaps tree
for|for
control|(
name|String
name|name
range|:
name|locations
operator|.
name|keySet
argument_list|()
control|)
block|{
name|DataMap
name|map
init|=
name|domain
operator|.
name|getMap
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|loadDataMap
argument_list|(
name|domain
argument_list|,
name|name
argument_list|,
name|locations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|MapLoader
name|getMapLoader
parameter_list|()
block|{
comment|// it is worth caching the map loader, as it precompiles some XML operations
comment|// starting from release 3.0
if|if
condition|(
name|mapLoader
operator|==
literal|null
condition|)
block|{
name|mapLoader
operator|=
operator|new
name|MapLoader
argument_list|()
expr_stmt|;
block|}
return|return
name|mapLoader
return|;
block|}
comment|/**      * Returns DataMap for the name and location information. If a DataMap is already      * loaded within a given domain, such loaded map is returned, otherwise the map is      * loaded and linked with the DataDomain.      */
specifier|protected
name|DataMap
name|loadDataMap
parameter_list|(
name|DataDomain
name|domain
parameter_list|,
name|String
name|mapName
parameter_list|,
name|Map
name|locations
parameter_list|)
block|{
if|if
condition|(
name|mapName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Error:<map> without 'name'."
argument_list|)
throw|;
block|}
name|String
name|location
init|=
operator|(
name|String
operator|)
name|locations
operator|.
name|get
argument_list|(
name|mapName
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Error: map '"
operator|+
name|mapName
operator|+
literal|"' without 'location'."
argument_list|)
throw|;
block|}
comment|// load DataMap
name|InputStream
name|mapIn
init|=
name|config
operator|.
name|getMapConfiguration
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapIn
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Warning: map location not found."
argument_list|)
expr_stmt|;
name|getStatus
argument_list|()
operator|.
name|addFailedMap
argument_list|(
name|mapName
argument_list|,
name|location
argument_list|,
literal|"map location not found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
name|DataMap
name|map
init|=
name|getMapLoader
argument_list|()
operator|.
name|loadDataMap
argument_list|(
operator|new
name|InputSource
argument_list|(
name|mapIn
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"loaded<map name='"
operator|+
name|mapName
operator|+
literal|"' location='"
operator|+
name|location
operator|+
literal|"'>."
argument_list|)
expr_stmt|;
name|map
operator|.
name|setName
argument_list|(
name|mapName
argument_list|)
expr_stmt|;
name|map
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|domain
operator|.
name|addMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|dmex
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Warning: map loading failed."
argument_list|,
name|dmex
argument_list|)
expr_stmt|;
name|getStatus
argument_list|()
operator|.
name|addFailedMap
argument_list|(
name|mapName
argument_list|,
name|location
argument_list|,
literal|"map loading failed - "
operator|+
name|dmex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Creates a new DataNode. Subclasses may override this method to provide a custom      * node class.      *       * @since 1.      */
specifier|protected
name|DataNode
name|createDataNode
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
return|return
operator|new
name|DataNode
argument_list|(
name|nodeName
argument_list|)
return|;
block|}
specifier|public
name|void
name|shouldLoadDataNode
parameter_list|(
name|String
name|domainName
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|String
name|dataSource
parameter_list|,
name|String
name|adapter
parameter_list|,
name|String
name|factory
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"loading<node name='"
operator|+
name|nodeName
operator|+
literal|"' datasource='"
operator|+
name|dataSource
operator|+
literal|"' factory='"
operator|+
name|factory
operator|+
literal|"'>."
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Error:<node> without 'name'."
argument_list|)
throw|;
block|}
name|factory
operator|=
name|convertClassNameFromV1_2
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|adapter
operator|=
name|convertClassNameFromV1_2
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataSource
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Warning:<node> '"
operator|+
name|nodeName
operator|+
literal|"' has no 'datasource'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|getDataSourceFactory
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Warning:<node> '"
operator|+
name|nodeName
operator|+
literal|"' without 'factory'."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Error:<node> '"
operator|+
name|nodeName
operator|+
literal|"' without 'factory'."
argument_list|)
throw|;
block|}
block|}
name|DataNode
name|node
init|=
name|createDataNode
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
name|node
operator|.
name|setDataSourceFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|node
operator|.
name|setDataSourceLocation
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
comment|// load DataSource
try|try
block|{
comment|// use DomainHelper factory if it exists, if not - use factory specified
comment|// in configuration data
name|DataSourceFactory
name|confFactory
init|=
name|config
operator|.
name|getDataSourceFactory
argument_list|()
decl_stmt|;
name|DataSourceFactory
name|localFactory
init|=
operator|(
name|confFactory
operator|!=
literal|null
operator|)
condition|?
name|confFactory
else|:
operator|(
name|DataSourceFactory
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|factory
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"using factory: "
operator|+
name|localFactory
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|localFactory
operator|.
name|initializeWithParentConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|DataSource
name|ds
init|=
name|localFactory
operator|.
name|getDataSource
argument_list|(
name|dataSource
argument_list|)
decl_stmt|;
if|if
condition|(
name|ds
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"loaded datasource."
argument_list|)
expr_stmt|;
name|node
operator|.
name|setDataSource
argument_list|(
name|ds
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Warning: null datasource."
argument_list|)
expr_stmt|;
name|getStatus
argument_list|()
operator|.
name|getFailedDataSources
argument_list|()
operator|.
name|put
argument_list|(
name|nodeName
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Error: DataSource load failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|getStatus
argument_list|()
operator|.
name|addFailedDataSource
argument_list|(
name|nodeName
argument_list|,
name|dataSource
argument_list|,
literal|"DataSource load failed - "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|initAdapter
argument_list|(
name|node
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
try|try
block|{
name|findDomain
argument_list|(
name|domainName
argument_list|)
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FindException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Error: can't load node, unknown domain: "
operator|+
name|domainName
argument_list|)
expr_stmt|;
name|getStatus
argument_list|()
operator|.
name|addFailedDataSource
argument_list|(
name|nodeName
argument_list|,
name|nodeName
argument_list|,
literal|"can't load node, unknown domain: "
operator|+
name|domainName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @since 2.0      */
name|String
name|convertClassNameFromV1_2
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// upgrade from v.<= 1.2
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|_1_2_PACKAGE_PREFIX
argument_list|)
condition|)
block|{
return|return
name|_2_0_PACKAGE_PREFIX
operator|+
name|name
operator|.
name|substring
argument_list|(
name|_1_2_PACKAGE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
return|return
name|name
return|;
block|}
comment|/**      * Intializes DataNode adapter.      *       * @since 1.2      */
specifier|protected
name|void
name|initAdapter
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|String
name|adapterName
parameter_list|)
block|{
if|if
condition|(
name|adapterName
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ClassLoader
name|cl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Class
name|dbAdapterClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|adapterName
argument_list|,
literal|true
argument_list|,
name|cl
argument_list|)
decl_stmt|;
name|node
operator|.
name|setAdapter
argument_list|(
operator|(
name|DbAdapter
operator|)
name|dbAdapterClass
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"instantiating adapter failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|getStatus
argument_list|()
operator|.
name|addFailedAdapter
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|,
name|adapterName
argument_list|,
literal|"instantiating adapter failed - "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"no adapter set, using automatic adapter."
argument_list|)
expr_stmt|;
name|node
operator|.
name|setAdapter
argument_list|(
operator|new
name|AutoAdapter
argument_list|(
operator|new
name|NodeDataSource
argument_list|(
name|node
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|shouldLinkDataMap
parameter_list|(
name|String
name|domainName
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|String
name|mapName
parameter_list|)
block|{
if|if
condition|(
name|mapName
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"<map-ref> has no 'name'."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"<map-ref> has no 'name'."
argument_list|)
throw|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"loaded map-ref: "
operator|+
name|mapName
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|DataMap
name|map
init|=
literal|null
decl_stmt|;
name|DataNode
name|node
init|=
literal|null
decl_stmt|;
try|try
block|{
name|map
operator|=
name|findMap
argument_list|(
name|domainName
argument_list|,
name|mapName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FindException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Error: unknown map: "
operator|+
name|mapName
argument_list|)
expr_stmt|;
name|getStatus
argument_list|()
operator|.
name|addFailedMapRefs
argument_list|(
name|mapName
argument_list|,
literal|"unknown map: "
operator|+
name|mapName
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|node
operator|=
name|findNode
argument_list|(
name|domainName
argument_list|,
name|nodeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FindException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Error: unknown node: "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
name|getStatus
argument_list|()
operator|.
name|addFailedMapRefs
argument_list|(
name|mapName
argument_list|,
literal|"unknown node: "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
return|return;
block|}
name|node
operator|.
name|addDataMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the domains.      *       * @return List      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|DataDomain
argument_list|>
name|getDomains
parameter_list|()
block|{
return|return
name|domains
return|;
block|}
comment|/**      * Returns the status.      *       * @return ConfigStatus      */
specifier|public
name|ConfigStatus
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
comment|/**      * Returns the config.      *       * @return Configuration      */
specifier|public
name|Configuration
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
comment|/**      * Sets the config.      *       * @param config The config to set      */
specifier|public
name|void
name|setConfig
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
comment|/**      * @see org.apache.cayenne.conf.ConfigLoaderDelegate#finishedLoading()      */
specifier|public
name|void
name|finishedLoading
parameter_list|()
block|{
comment|// check for failures
if|if
condition|(
name|status
operator|.
name|hasFailures
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|config
operator|.
name|isIgnoringLoadFailures
argument_list|()
condition|)
block|{
name|StringBuffer
name|msg
init|=
operator|new
name|StringBuffer
argument_list|(
literal|128
argument_list|)
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Load failures. Main configuration class: "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|config
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|", details: "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|status
operator|.
name|describeFailures
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// load missing relationships and update configuration object
for|for
control|(
name|DataDomain
name|domain
range|:
name|getDomains
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|updateDefaults
argument_list|(
name|domain
argument_list|)
expr_stmt|;
name|config
operator|.
name|addDomain
argument_list|(
name|domain
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|setDataViewLocations
argument_list|(
name|views
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"finished configuration loading in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|+
literal|" ms."
argument_list|)
expr_stmt|;
block|}
comment|/**      * Updates missing mapping artefacts that can be guessed from other mapping      * information. This implementation creates missing reverse relationships, marking      * newly created relationships as "runtime".      *       * @since 3.0      */
specifier|protected
name|void
name|updateDefaults
parameter_list|(
name|DataDomain
name|domain
parameter_list|)
block|{
comment|// connect DB layer
for|for
control|(
name|DataMap
name|map
range|:
name|domain
operator|.
name|getDataMaps
argument_list|()
control|)
block|{
for|for
control|(
name|DbEntity
name|entity
range|:
name|map
operator|.
name|getDbEntities
argument_list|()
control|)
block|{
comment|// iterate by copy to avoid concurrency modification errors on reflexive
comment|// relationships
name|Object
index|[]
name|relationships
init|=
name|entity
operator|.
name|getRelationships
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|relationships
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DbRelationship
name|relationship
init|=
operator|(
name|DbRelationship
operator|)
name|relationships
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|relationship
operator|.
name|getReverseRelationship
argument_list|()
operator|==
literal|null
condition|)
block|{
name|DbRelationship
name|reverse
init|=
name|relationship
operator|.
name|createReverseRelationship
argument_list|()
decl_stmt|;
name|Entity
name|targetEntity
init|=
name|reverse
operator|.
name|getSourceEntity
argument_list|()
decl_stmt|;
name|reverse
operator|.
name|setName
argument_list|(
name|makeUniqueRelationshipName
argument_list|(
name|targetEntity
argument_list|)
argument_list|)
expr_stmt|;
name|reverse
operator|.
name|setRuntime
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|targetEntity
operator|.
name|addRelationship
argument_list|(
name|reverse
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"added runtime complimentary DbRelationship from "
operator|+
name|targetEntity
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|reverse
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// connect object layer
for|for
control|(
name|DataMap
name|map
range|:
name|domain
operator|.
name|getDataMaps
argument_list|()
control|)
block|{
for|for
control|(
name|ObjEntity
name|entity
range|:
name|map
operator|.
name|getObjEntities
argument_list|()
control|)
block|{
comment|// iterate by copy to avoid concurrency modification errors on reflexive
comment|// relationships
name|Object
index|[]
name|relationships
init|=
name|entity
operator|.
name|getRelationships
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|relationships
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ObjRelationship
name|relationship
init|=
operator|(
name|ObjRelationship
operator|)
name|relationships
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|relationship
operator|.
name|getReverseRelationship
argument_list|()
operator|==
literal|null
condition|)
block|{
name|ObjRelationship
name|reverse
init|=
name|relationship
operator|.
name|createReverseRelationship
argument_list|()
decl_stmt|;
name|Entity
name|targetEntity
init|=
name|reverse
operator|.
name|getSourceEntity
argument_list|()
decl_stmt|;
name|reverse
operator|.
name|setName
argument_list|(
name|makeUniqueRelationshipName
argument_list|(
name|targetEntity
argument_list|)
argument_list|)
expr_stmt|;
name|reverse
operator|.
name|setRuntime
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|targetEntity
operator|.
name|addRelationship
argument_list|(
name|reverse
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"added runtime complimentary ObjRelationship from "
operator|+
name|targetEntity
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|reverse
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|String
name|makeUniqueRelationshipName
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
literal|"runtimeRelationship"
operator|+
name|i
decl_stmt|;
if|if
condition|(
name|entity
operator|.
name|getRelationship
argument_list|(
name|name
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
name|name
return|;
block|}
block|}
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Could not come up with a unique relationship name"
argument_list|)
throw|;
block|}
comment|/**      * @see org.apache.cayenne.conf.ConfigLoaderDelegate#startedLoading()      */
specifier|public
name|void
name|startedLoading
parameter_list|()
block|{
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"started configuration loading."
argument_list|)
expr_stmt|;
block|}
comment|/**      * Thrown when loaded data does not contain certain expected objects.      */
class|class
name|FindException
extends|extends
name|Exception
block|{
comment|/**          * Constructor for FindException.          *           * @param msg          */
specifier|public
name|FindException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

