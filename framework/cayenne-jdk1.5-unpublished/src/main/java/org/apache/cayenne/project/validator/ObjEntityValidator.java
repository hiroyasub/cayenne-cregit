begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|validator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|ProjectPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|ObjEntityValidator
extends|extends
name|TreeNodeValidator
block|{
comment|/**      * Constructor for ObjEntityValidator.      */
specifier|public
name|ObjEntityValidator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validateObject
parameter_list|(
name|ProjectPath
name|path
parameter_list|,
name|Validator
name|validator
parameter_list|)
block|{
name|ObjEntity
name|ent
init|=
operator|(
name|ObjEntity
operator|)
name|path
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|validateName
argument_list|(
name|ent
argument_list|,
name|path
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|validateClassName
argument_list|(
name|ent
argument_list|,
name|path
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|validateSuperClassName
argument_list|(
name|ent
argument_list|,
name|path
argument_list|,
name|validator
argument_list|)
expr_stmt|;
comment|// validate DbEntity presence
if|if
condition|(
name|ent
operator|.
name|getDbEntity
argument_list|()
operator|==
literal|null
operator|&&
operator|!
name|ent
operator|.
name|getIsAbstract
argument_list|()
condition|)
block|{
name|validator
operator|.
name|registerWarning
argument_list|(
literal|"ObjEntity has no DbEntity mapping."
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|validateClassName
parameter_list|(
name|ObjEntity
name|ent
parameter_list|,
name|ProjectPath
name|path
parameter_list|,
name|Validator
name|validator
parameter_list|)
block|{
name|String
name|className
init|=
name|ent
operator|.
name|getClassName
argument_list|()
decl_stmt|;
comment|// if mapped to default class, ignore...
if|if
condition|(
name|Util
operator|.
name|isEmptyString
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return;
block|}
name|MappingNamesHelper
name|helper
init|=
name|MappingNamesHelper
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|invalidChars
init|=
name|helper
operator|.
name|invalidCharsInJavaClassName
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|invalidChars
operator|!=
literal|null
condition|)
block|{
name|validator
operator|.
name|registerWarning
argument_list|(
literal|"ObjEntity Java class contains invalid characters: "
operator|+
name|invalidChars
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|helper
operator|.
name|invalidDataObjectClass
argument_list|(
name|className
argument_list|)
condition|)
block|{
name|validator
operator|.
name|registerWarning
argument_list|(
literal|"ObjEntity Java class is invalid: "
operator|+
name|className
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|className
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|<
literal|0
condition|)
block|{
name|validator
operator|.
name|registerWarning
argument_list|(
literal|"Placing Java class in default package is discouraged: "
operator|+
name|className
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|validateSuperClassName
parameter_list|(
name|ObjEntity
name|ent
parameter_list|,
name|ProjectPath
name|path
parameter_list|,
name|Validator
name|validator
parameter_list|)
block|{
name|String
name|superClassName
init|=
name|ent
operator|.
name|getSuperClassName
argument_list|()
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|isEmptyString
argument_list|(
name|superClassName
argument_list|)
condition|)
block|{
return|return;
comment|// null is Ok
block|}
name|MappingNamesHelper
name|helper
init|=
name|MappingNamesHelper
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|invalidChars
init|=
name|helper
operator|.
name|invalidCharsInJavaClassName
argument_list|(
name|superClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|invalidChars
operator|!=
literal|null
condition|)
block|{
name|validator
operator|.
name|registerWarning
argument_list|(
literal|"ObjEntity Java superclass contains invalid characters: "
operator|+
name|invalidChars
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|helper
operator|.
name|invalidDataObjectClass
argument_list|(
name|superClassName
argument_list|)
condition|)
block|{
name|validator
operator|.
name|registerWarning
argument_list|(
literal|"ObjEntity Java superclass is invalid: "
operator|+
name|superClassName
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|DataMap
name|map
init|=
operator|(
name|DataMap
operator|)
name|path
operator|.
name|getObjectParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return;
block|}
block|}
specifier|protected
name|void
name|validateName
parameter_list|(
name|ObjEntity
name|entity
parameter_list|,
name|ProjectPath
name|path
parameter_list|,
name|Validator
name|validator
parameter_list|)
block|{
name|String
name|name
init|=
name|entity
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// Must have name
if|if
condition|(
name|Util
operator|.
name|isEmptyString
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|validator
operator|.
name|registerError
argument_list|(
literal|"Unnamed ObjEntity."
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
name|DataMap
name|map
init|=
operator|(
name|DataMap
operator|)
name|path
operator|.
name|getObjectParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// check for duplicate names in the parent context
for|for
control|(
name|ObjEntity
name|otherEnt
range|:
name|map
operator|.
name|getObjEntities
argument_list|()
control|)
block|{
if|if
condition|(
name|otherEnt
operator|==
name|entity
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|otherEnt
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|validator
operator|.
name|registerError
argument_list|(
literal|"Duplicate ObjEntity name: "
operator|+
name|name
operator|+
literal|"."
argument_list|,
name|path
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// check for dupliucates in other DataMaps
name|DataDomain
name|domain
init|=
name|path
operator|.
name|firstInstanceOf
argument_list|(
name|DataDomain
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|domain
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DataMap
name|nextMap
range|:
name|domain
operator|.
name|getDataMaps
argument_list|()
control|)
block|{
if|if
condition|(
name|nextMap
operator|==
name|map
condition|)
block|{
continue|continue;
block|}
name|ObjEntity
name|conflictingEntity
init|=
name|nextMap
operator|.
name|getObjEntity
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflictingEntity
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|conflictingEntity
operator|.
name|getClassName
argument_list|()
argument_list|,
name|entity
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
name|validator
operator|.
name|registerWarning
argument_list|(
literal|"Duplicate ObjEntity name in another DataMap: "
operator|+
name|name
operator|+
literal|"."
argument_list|,
name|path
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

