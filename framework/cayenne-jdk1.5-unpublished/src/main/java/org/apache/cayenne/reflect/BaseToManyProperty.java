begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ValueHolder
import|;
end_import

begin_comment
comment|/**  * A generic superclass of CollectionProperty implementations.  *   * @since 1.2  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BaseToManyProperty
extends|extends
name|BaseArcProperty
implements|implements
name|ToManyProperty
block|{
specifier|public
name|BaseToManyProperty
parameter_list|(
name|ClassDescriptor
name|owner
parameter_list|,
name|ClassDescriptor
name|targetDescriptor
parameter_list|,
name|Accessor
name|accessor
parameter_list|,
name|String
name|reverseName
parameter_list|)
block|{
name|super
argument_list|(
name|owner
argument_list|,
name|targetDescriptor
argument_list|,
name|accessor
argument_list|,
name|reverseName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|readProperty
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|PropertyException
block|{
return|return
name|ensureCollectionValueHolderSet
argument_list|(
name|object
argument_list|)
return|;
block|}
comment|/**      * Wraps list in a value holder that performs lazy faulting.      */
annotation|@
name|Override
specifier|public
name|void
name|writePropertyDirectly
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
name|oldValue
parameter_list|,
name|Object
name|newValue
parameter_list|)
throws|throws
name|PropertyException
block|{
if|if
condition|(
name|newValue
operator|instanceof
name|Fault
condition|)
block|{
name|super
operator|.
name|writePropertyDirectly
argument_list|(
name|object
argument_list|,
literal|null
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// must resolve value holder...
name|ValueHolder
name|holder
init|=
operator|(
name|ValueHolder
operator|)
name|readProperty
argument_list|(
name|object
argument_list|)
decl_stmt|;
name|holder
operator|.
name|setValueDirectly
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addTarget
parameter_list|(
name|Object
name|source
parameter_list|,
name|Object
name|target
parameter_list|,
name|boolean
name|setReverse
parameter_list|)
block|{
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Attempt to add null object."
argument_list|)
throw|;
block|}
comment|// TODO, Andrus, 2/9/2006 - CayenneDataObject differences:
comment|// * invokes "willConnect"
comment|// * has a callback to ObjectStore to handle flattened
comment|// * has a callback to ObjectStore to retain snapshot
comment|// * changes object state to modified
comment|// Now do the rest of the normal handling (regardless of whether it was
comment|// flattened or not)
name|Collection
argument_list|<
name|Object
argument_list|>
name|collection
init|=
operator|(
name|Collection
argument_list|<
name|Object
argument_list|>
operator|)
name|readProperty
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|collection
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|setReverse
condition|)
block|{
name|setReverse
argument_list|(
name|source
argument_list|,
literal|null
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeTarget
parameter_list|(
name|Object
name|source
parameter_list|,
name|Object
name|target
parameter_list|,
name|boolean
name|setReverse
parameter_list|)
block|{
comment|// TODO, Andrus, 2/9/2006 - CayenneDataObject differences:
comment|// * has a callback to ObjectStore to handle flattened
comment|// * changes object state to modified
comment|// Now do the rest of the normal handling (regardless of whether it was
comment|// flattened or not)
name|Collection
argument_list|<
name|Object
argument_list|>
name|collection
init|=
operator|(
name|Collection
argument_list|<
name|Object
argument_list|>
operator|)
name|readProperty
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|collection
operator|.
name|remove
argument_list|(
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|target
operator|!=
literal|null
operator|&&
name|setReverse
condition|)
block|{
name|setReverse
argument_list|(
name|source
argument_list|,
name|target
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|PropertyVisitor
name|visitor
parameter_list|)
block|{
return|return
name|visitor
operator|.
name|visitToMany
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * Injects a List in the object if it hasn't been done yet.      */
annotation|@
name|Override
specifier|public
name|void
name|injectValueHolder
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|PropertyException
block|{
name|ensureCollectionValueHolderSet
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks that an object's List field described by this property is set, injecting a      * List if needed.      */
specifier|protected
name|ValueHolder
name|ensureCollectionValueHolderSet
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|PropertyException
block|{
name|Object
name|value
init|=
name|accessor
operator|.
name|getValue
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|instanceof
name|Fault
condition|)
block|{
name|value
operator|=
name|createCollectionValueHolder
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|accessor
operator|.
name|setValue
argument_list|(
name|object
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ValueHolder
operator|)
name|value
return|;
block|}
comment|/**      * Creates a Collection for an object.      */
specifier|protected
specifier|abstract
name|ValueHolder
name|createCollectionValueHolder
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|PropertyException
function_decl|;
block|}
end_class

end_unit

