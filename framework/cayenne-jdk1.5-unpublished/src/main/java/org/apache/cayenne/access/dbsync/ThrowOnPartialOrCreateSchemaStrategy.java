begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|dbsync
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DbGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * @since 3.0  */
end_comment

begin_class
specifier|public
class|class
name|ThrowOnPartialOrCreateSchemaStrategy
extends|extends
name|ThrowOnPartialSchemaStrategy
block|{
specifier|final
specifier|static
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ThrowOnPartialOrCreateSchemaStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|processSchemaUpdate
parameter_list|(
name|DataNode
name|dataNode
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|mergerOnlyTable
parameter_list|,
name|String
name|errorMessage
parameter_list|,
name|int
name|entitiesSize
parameter_list|)
block|{
if|if
condition|(
name|mergerOnlyTable
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|errorMessage
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Full schema is present"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|mergerOnlyTable
operator|.
name|size
argument_list|()
operator|==
name|entitiesSize
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"No schema detected, will create mapped tables"
argument_list|)
expr_stmt|;
name|generate
argument_list|(
name|dataNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Error - partial schema detected"
argument_list|)
expr_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Schema mismatch detected"
argument_list|)
decl_stmt|;
if|if
condition|(
name|errorMessage
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|mergerOnlyTable
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|": missing table '"
argument_list|)
operator|.
name|append
argument_list|(
name|mergerOnlyTable
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|generate
parameter_list|(
name|DataNode
name|dataNode
parameter_list|)
block|{
name|Collection
argument_list|<
name|DataMap
argument_list|>
name|map
init|=
name|dataNode
operator|.
name|getDataMaps
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|DataMap
argument_list|>
name|iterator
init|=
name|map
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbGenerator
name|gen
init|=
operator|new
name|DbGenerator
argument_list|(
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|gen
operator|.
name|setShouldCreateTables
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|gen
operator|.
name|setShouldDropTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|gen
operator|.
name|setShouldCreateFKConstraints
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|gen
operator|.
name|setShouldCreatePKSupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|gen
operator|.
name|setShouldDropPKSupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|gen
operator|.
name|runGenerator
argument_list|(
name|dataNode
operator|.
name|getDataSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

