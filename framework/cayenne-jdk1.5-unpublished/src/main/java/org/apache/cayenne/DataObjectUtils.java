begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectIdQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_comment
comment|/**  * A collection of utility methods to work with DataObjects.  *<p>  *<i>DataObjects and Primary Keys: All methods that allow to extract primary key values  * or use primary keys to find objects are provided for convenience. Still the author's  * belief is that integer sequential primary keys are meaningless in the object model and  * are pure database artifacts. Therefore relying heavily on direct access to PK provided  * via this class (or other such Cayenne API) is not a clean design practice in many  * cases, and sometimes may actually lead to security issues.</i>  *</p>  *   * @since 1.1  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|DataObjectUtils
block|{
comment|/**      * Returns an int primary key value for a persistent object. Only works for single      * column numeric primary keys. If an object is transient or has an ObjectId that can      * not be converted to an int PK, an exception is thrown.      *       * @since 3.0      */
specifier|public
specifier|static
name|long
name|longPKForObject
parameter_list|(
name|Persistent
name|dataObject
parameter_list|)
block|{
name|Object
name|value
init|=
name|pkForObject
argument_list|(
name|dataObject
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|Number
operator|)
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"PK is not a number: "
operator|+
name|dataObject
operator|.
name|getObjectId
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
comment|/**      * Returns an int primary key value for a persistent object. Only works for single      * column numeric primary keys. If an object is transient or has an ObjectId that can      * not be converted to an int PK, an exception is thrown.      */
specifier|public
specifier|static
name|int
name|intPKForObject
parameter_list|(
name|Persistent
name|dataObject
parameter_list|)
block|{
name|Object
name|value
init|=
name|pkForObject
argument_list|(
name|dataObject
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|Number
operator|)
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"PK is not a number: "
operator|+
name|dataObject
operator|.
name|getObjectId
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|/**      * Returns a primary key value for a persistent object. Only works for single column      * primary keys. If an object is transient or has a compound ObjectId, an exception is      * thrown.      */
specifier|public
specifier|static
name|Object
name|pkForObject
parameter_list|(
name|Persistent
name|dataObject
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|pk
init|=
name|extractObjectId
argument_list|(
name|dataObject
argument_list|)
decl_stmt|;
if|if
condition|(
name|pk
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Expected single column PK, got "
operator|+
name|pk
operator|.
name|size
argument_list|()
operator|+
literal|" columns, ID: "
operator|+
name|pk
argument_list|)
throw|;
block|}
return|return
name|pk
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|/**      * Returns a primary key map for a persistent object. This method is the most generic      * out of all methods for primary key retrieval. It will work for all possible types      * of primary keys. If an object is transient, an exception is thrown.      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|compoundPKForObject
parameter_list|(
name|Persistent
name|dataObject
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|extractObjectId
argument_list|(
name|dataObject
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|extractObjectId
parameter_list|(
name|Persistent
name|dataObject
parameter_list|)
block|{
if|if
condition|(
name|dataObject
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null DataObject"
argument_list|)
throw|;
block|}
name|ObjectId
name|id
init|=
name|dataObject
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|id
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
return|return
name|id
operator|.
name|getIdSnapshot
argument_list|()
return|;
block|}
comment|// replacement ID is more tricky... do some sanity check...
if|if
condition|(
name|id
operator|.
name|isReplacementIdAttached
argument_list|()
condition|)
block|{
name|ObjEntity
name|objEntity
init|=
name|dataObject
operator|.
name|getObjectContext
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|lookupObjEntity
argument_list|(
name|dataObject
argument_list|)
decl_stmt|;
if|if
condition|(
name|objEntity
operator|!=
literal|null
condition|)
block|{
name|DbEntity
name|entity
init|=
name|objEntity
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
operator|&&
name|entity
operator|.
name|isFullReplacementIdAttached
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|id
operator|.
name|getReplacementIdMap
argument_list|()
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't get primary key from temporary id."
argument_list|)
throw|;
block|}
comment|/**      * Returns an object matching an int primary key. If the object is mapped to use      * non-integer PK or a compound PK, CayenneRuntimeException is thrown.      *<p>      * If this object is already cached in the ObjectStore, it is returned without a      * query. Otherwise a query is built and executed against the database.      *</p>      *       * @see #objectForPK(ObjectContext, ObjectId)      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|objectForPK
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|dataObjectClass
parameter_list|,
name|int
name|pk
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|objectForPK
argument_list|(
name|context
argument_list|,
name|buildId
argument_list|(
name|context
argument_list|,
name|dataObjectClass
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|pk
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns an object matching an Object primary key. If the object is mapped to use a      * compound PK, CayenneRuntimeException is thrown.      *<p>      * If this object is already cached in the ObjectStore, it is returned without a      * query. Otherwise a query is built and executed against the database.      *</p>      *       * @see #objectForPK(ObjectContext, ObjectId)      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|objectForPK
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|dataObjectClass
parameter_list|,
name|Object
name|pk
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|objectForPK
argument_list|(
name|context
argument_list|,
name|buildId
argument_list|(
name|context
argument_list|,
name|dataObjectClass
argument_list|,
name|pk
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns an object matching a primary key. PK map parameter should use database PK      * column names as keys.      *<p>      * If this object is already cached in the ObjectStore, it is returned without a      * query. Otherwise a query is built and executed against the database.      *</p>      *       * @see #objectForPK(ObjectContext, ObjectId)      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|objectForPK
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|dataObjectClass
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|pk
parameter_list|)
block|{
name|ObjEntity
name|entity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|lookupObjEntity
argument_list|(
name|dataObjectClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Non-existent ObjEntity for class: "
operator|+
name|dataObjectClass
argument_list|)
throw|;
block|}
return|return
operator|(
name|T
operator|)
name|objectForPK
argument_list|(
name|context
argument_list|,
operator|new
name|ObjectId
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|,
name|pk
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns an object matching an int primary key. If the object is mapped to use      * non-integer PK or a compound PK, CayenneRuntimeException is thrown.      *<p>      * If this object is already cached in the ObjectStore, it is returned without a      * query. Otherwise a query is built and executed against the database.      *</p>      *       * @see #objectForPK(ObjectContext, ObjectId)      */
specifier|public
specifier|static
name|Object
name|objectForPK
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|String
name|objEntityName
parameter_list|,
name|int
name|pk
parameter_list|)
block|{
return|return
name|objectForPK
argument_list|(
name|context
argument_list|,
name|buildId
argument_list|(
name|context
argument_list|,
name|objEntityName
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|pk
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns an object matching an Object primary key. If the object is mapped to use a      * compound PK, CayenneRuntimeException is thrown.      *<p>      * If this object is already cached in the ObjectStore, it is returned without a      * query. Otherwise a query is built and executed against the database.      *</p>      *       * @see #objectForPK(ObjectContext, ObjectId)      */
specifier|public
specifier|static
name|Object
name|objectForPK
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|String
name|objEntityName
parameter_list|,
name|Object
name|pk
parameter_list|)
block|{
return|return
name|objectForPK
argument_list|(
name|context
argument_list|,
name|buildId
argument_list|(
name|context
argument_list|,
name|objEntityName
argument_list|,
name|pk
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns an object matching a primary key. PK map parameter should use database PK      * column names as keys.      *<p>      * If this object is already cached in the ObjectStore, it is returned without a      * query. Otherwise a query is built and executed against the database.      *</p>      *       * @see #objectForPK(ObjectContext, ObjectId)      */
specifier|public
specifier|static
name|Object
name|objectForPK
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|String
name|objEntityName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|pk
parameter_list|)
block|{
if|if
condition|(
name|objEntityName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null ObjEntity name."
argument_list|)
throw|;
block|}
return|return
name|objectForPK
argument_list|(
name|context
argument_list|,
operator|new
name|ObjectId
argument_list|(
name|objEntityName
argument_list|,
name|pk
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns an object matching ObjectId. If this object is already cached in the      * ObjectStore, it is returned without a query. Otherwise a query is built and      * executed against the database.      *       * @return A persistent object that matched the id, null if no matching objects were      *         found      * @throws CayenneRuntimeException if more than one object matched ObjectId.      */
specifier|public
specifier|static
name|Object
name|objectForPK
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|ObjectId
name|id
parameter_list|)
block|{
return|return
name|DataObjectUtils
operator|.
name|objectForQuery
argument_list|(
name|context
argument_list|,
operator|new
name|ObjectIdQuery
argument_list|(
name|id
argument_list|,
literal|false
argument_list|,
name|ObjectIdQuery
operator|.
name|CACHE
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns an object or a DataRow that is a result of a given query. If query returns      * more than one object, an exception is thrown. If query returns no objects, null is      * returned.      *       * @since 1.2      */
specifier|public
specifier|static
name|Object
name|objectForQuery
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|objects
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|objects
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Expected zero or one object, instead query matched: "
operator|+
name|objects
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|static
name|ObjectId
name|buildId
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|String
name|objEntityName
parameter_list|,
name|Object
name|pk
parameter_list|)
block|{
if|if
condition|(
name|pk
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null PK"
argument_list|)
throw|;
block|}
if|if
condition|(
name|objEntityName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null ObjEntity name."
argument_list|)
throw|;
block|}
name|ObjEntity
name|entity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getObjEntity
argument_list|(
name|objEntityName
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Non-existent ObjEntity: "
operator|+
name|objEntityName
argument_list|)
throw|;
block|}
name|DbEntity
name|dbEntity
init|=
name|entity
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbEntity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"No DbEntity for ObjEntity: "
operator|+
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
name|pkAttributes
init|=
name|dbEntity
operator|.
name|getPrimaryKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|pkAttributes
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"PK contains "
operator|+
name|pkAttributes
operator|.
name|size
argument_list|()
operator|+
literal|" columns, expected 1."
argument_list|)
throw|;
block|}
name|DbAttribute
name|attr
init|=
name|pkAttributes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
operator|new
name|ObjectId
argument_list|(
name|objEntityName
argument_list|,
name|attr
operator|.
name|getName
argument_list|()
argument_list|,
name|pk
argument_list|)
return|;
block|}
specifier|static
name|ObjectId
name|buildId
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|dataObjectClass
parameter_list|,
name|Object
name|pk
parameter_list|)
block|{
if|if
condition|(
name|pk
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null PK"
argument_list|)
throw|;
block|}
if|if
condition|(
name|dataObjectClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null DataObject class."
argument_list|)
throw|;
block|}
name|ObjEntity
name|entity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|lookupObjEntity
argument_list|(
name|dataObjectClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unmapped DataObject Class: "
operator|+
name|dataObjectClass
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|DbEntity
name|dbEntity
init|=
name|entity
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbEntity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"No DbEntity for ObjEntity: "
operator|+
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
name|pkAttributes
init|=
name|dbEntity
operator|.
name|getPrimaryKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|pkAttributes
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"PK contains "
operator|+
name|pkAttributes
operator|.
name|size
argument_list|()
operator|+
literal|" columns, expected 1."
argument_list|)
throw|;
block|}
name|DbAttribute
name|attr
init|=
name|pkAttributes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
operator|new
name|ObjectId
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|,
name|attr
operator|.
name|getName
argument_list|()
argument_list|,
name|pk
argument_list|)
return|;
block|}
comment|// not intended for instantiation
specifier|private
name|DataObjectUtils
parameter_list|()
block|{
block|}
block|}
end_class

end_unit

