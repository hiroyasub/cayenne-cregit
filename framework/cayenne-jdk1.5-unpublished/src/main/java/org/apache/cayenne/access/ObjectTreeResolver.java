begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistenceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|PrefetchProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|PrefetchTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ArcProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_comment
comment|/**  * Processes a number of DataRow sets corresponding to a given prefetch tree, resolving  * DataRows to an object tree. Can process any combination of joint and disjoint sets, per  * prefetch tree.  *   * @since 1.2  * @author Andrus Adamchik  */
end_comment

begin_class
class|class
name|ObjectTreeResolver
block|{
name|DataContext
name|context
decl_stmt|;
name|QueryMetadata
name|queryMetadata
decl_stmt|;
name|DataRowStore
name|cache
decl_stmt|;
name|ObjectTreeResolver
parameter_list|(
name|DataContext
name|context
parameter_list|,
name|QueryMetadata
name|queryMetadata
parameter_list|)
block|{
name|this
operator|.
name|queryMetadata
operator|=
name|queryMetadata
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
expr_stmt|;
block|}
comment|/**      * Properly synchronized version of 'resolveObjectTree'.      */
name|List
name|synchronizedObjectsFromDataRows
parameter_list|(
name|PrefetchTreeNode
name|tree
parameter_list|,
name|List
name|mainResultRows
parameter_list|,
name|Map
name|extraResultsByPath
parameter_list|)
block|{
synchronized|synchronized
init|(
name|context
operator|.
name|getObjectStore
argument_list|()
init|)
block|{
synchronized|synchronized
init|(
name|cache
init|)
block|{
return|return
name|resolveObjectTree
argument_list|(
name|tree
argument_list|,
name|mainResultRows
argument_list|,
name|extraResultsByPath
argument_list|)
return|;
block|}
block|}
block|}
name|List
name|resolveObjectTree
parameter_list|(
name|PrefetchTreeNode
name|tree
parameter_list|,
name|List
name|mainResultRows
parameter_list|,
name|Map
name|extraResultsByPath
parameter_list|)
block|{
comment|// create a copy of the tree using DecoratedPrefetchNodes and then traverse it
comment|// resolving objects...
name|PrefetchProcessorNode
name|decoratedTree
init|=
operator|new
name|TreeBuilder
argument_list|(
name|mainResultRows
argument_list|,
name|extraResultsByPath
argument_list|)
operator|.
name|buildTree
argument_list|(
name|tree
argument_list|)
decl_stmt|;
comment|// do a single path for disjoint prefetches, joint subtrees will be processed at
comment|// each disjoint node that is a parent of joint prefetches.
name|decoratedTree
operator|.
name|traverse
argument_list|(
operator|new
name|DisjointProcessor
argument_list|()
argument_list|)
expr_stmt|;
comment|// connect related objects
name|decoratedTree
operator|.
name|traverse
argument_list|(
operator|new
name|PostProcessor
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|decoratedTree
operator|.
name|getObjects
argument_list|()
operator|!=
literal|null
condition|?
name|decoratedTree
operator|.
name|getObjects
argument_list|()
else|:
operator|new
name|ArrayList
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|// A PrefetchProcessor that creates a replica of a PrefetchTree with node
comment|// subclasses that can carry extra info needed during traversal.
specifier|final
class|class
name|TreeBuilder
implements|implements
name|PrefetchProcessor
block|{
name|PrefetchProcessorNode
name|root
decl_stmt|;
name|LinkedList
argument_list|<
name|PrefetchProcessorNode
argument_list|>
name|nodeStack
decl_stmt|;
name|List
name|mainResultRows
decl_stmt|;
name|Map
name|extraResultsByPath
decl_stmt|;
name|TreeBuilder
parameter_list|(
name|List
name|mainResultRows
parameter_list|,
name|Map
name|extraResultsByPath
parameter_list|)
block|{
name|this
operator|.
name|mainResultRows
operator|=
name|mainResultRows
expr_stmt|;
name|this
operator|.
name|extraResultsByPath
operator|=
name|extraResultsByPath
expr_stmt|;
block|}
name|PrefetchProcessorNode
name|buildTree
parameter_list|(
name|PrefetchTreeNode
name|tree
parameter_list|)
block|{
comment|// reset state
name|this
operator|.
name|nodeStack
operator|=
operator|new
name|LinkedList
argument_list|<
name|PrefetchProcessorNode
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|root
operator|=
literal|null
expr_stmt|;
name|tree
operator|.
name|traverse
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Failed to create prefetch processing tree."
argument_list|)
throw|;
block|}
return|return
name|root
return|;
block|}
specifier|public
name|boolean
name|startPhantomPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
comment|// root should be treated as disjoint
if|if
condition|(
name|getParent
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|startDisjointPrefetch
argument_list|(
name|node
argument_list|)
return|;
block|}
else|else
block|{
name|PrefetchProcessorNode
name|decorated
init|=
operator|new
name|PrefetchProcessorNode
argument_list|(
name|getParent
argument_list|()
argument_list|,
name|node
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|decorated
operator|.
name|setPhantom
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|addNode
argument_list|(
name|decorated
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|startDisjointPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
comment|// look ahead for joint children as joint children will require a different
comment|// node type.
comment|// TODO, Andrus, 11/16/2005 - minor inefficiency: 'adjacentJointNodes' would
comment|// grab ALL nodes, we just need to find first and stop...
name|PrefetchProcessorNode
name|decorated
init|=
operator|!
name|node
operator|.
name|adjacentJointNodes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
operator|new
name|PrefetchProcessorJointNode
argument_list|(
name|getParent
argument_list|()
argument_list|,
name|node
operator|.
name|getName
argument_list|()
argument_list|)
else|:
operator|new
name|PrefetchProcessorNode
argument_list|(
name|getParent
argument_list|()
argument_list|,
name|node
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|decorated
operator|.
name|setPhantom
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// semantics has to be "DISJOINT" even if the node is joint, as semantics
comment|// defines relationship with parent..
name|decorated
operator|.
name|setSemantics
argument_list|(
name|PrefetchTreeNode
operator|.
name|DISJOINT_PREFETCH_SEMANTICS
argument_list|)
expr_stmt|;
return|return
name|addNode
argument_list|(
name|decorated
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|startJointPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
name|PrefetchProcessorJointNode
name|decorated
init|=
operator|new
name|PrefetchProcessorJointNode
argument_list|(
name|getParent
argument_list|()
argument_list|,
name|node
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|decorated
operator|.
name|setPhantom
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|decorated
operator|.
name|setSemantics
argument_list|(
name|PrefetchTreeNode
operator|.
name|JOINT_PREFETCH_SEMANTICS
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
name|addNode
argument_list|(
name|decorated
argument_list|)
decl_stmt|;
comment|// set "jointChildren" flag on all nodes in the same "join group"
name|PrefetchProcessorNode
name|groupNode
init|=
name|decorated
decl_stmt|;
while|while
condition|(
name|groupNode
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|groupNode
operator|.
name|isDisjointPrefetch
argument_list|()
condition|)
block|{
name|groupNode
operator|=
operator|(
name|PrefetchProcessorNode
operator|)
name|groupNode
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|groupNode
operator|.
name|setJointChildren
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|startUnknownPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
comment|// handle unknown as disjoint...
return|return
name|startDisjointPrefetch
argument_list|(
name|node
argument_list|)
return|;
block|}
specifier|public
name|void
name|finishPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
comment|// pop stack...
name|nodeStack
operator|.
name|removeLast
argument_list|()
expr_stmt|;
block|}
name|boolean
name|addNode
parameter_list|(
name|PrefetchProcessorNode
name|node
parameter_list|)
block|{
name|List
name|rows
decl_stmt|;
name|ArcProperty
name|arc
decl_stmt|;
name|ClassDescriptor
name|descriptor
decl_stmt|;
name|PrefetchProcessorNode
name|currentNode
init|=
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentNode
operator|!=
literal|null
condition|)
block|{
name|rows
operator|=
operator|(
name|List
operator|)
name|extraResultsByPath
operator|.
name|get
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|arc
operator|=
operator|(
name|ArcProperty
operator|)
name|currentNode
operator|.
name|getResolver
argument_list|()
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getProperty
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|arc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"No relationship with name '"
operator|+
name|node
operator|.
name|getName
argument_list|()
operator|+
literal|"' found in entity "
operator|+
name|currentNode
operator|.
name|getResolver
argument_list|()
operator|.
name|getEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|descriptor
operator|=
name|arc
operator|.
name|getTargetDescriptor
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|arc
operator|=
literal|null
expr_stmt|;
name|descriptor
operator|=
name|queryMetadata
operator|.
name|getClassDescriptor
argument_list|()
expr_stmt|;
name|rows
operator|=
name|mainResultRows
expr_stmt|;
block|}
name|node
operator|.
name|setDataRows
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|node
operator|.
name|setResolver
argument_list|(
operator|new
name|ObjectResolver
argument_list|(
name|context
argument_list|,
name|descriptor
argument_list|,
name|queryMetadata
operator|.
name|isRefreshingObjects
argument_list|()
argument_list|,
name|queryMetadata
operator|.
name|isResolvingInherited
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|.
name|setIncoming
argument_list|(
name|arc
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentNode
operator|!=
literal|null
condition|)
block|{
name|currentNode
operator|.
name|addChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|afterInit
argument_list|()
expr_stmt|;
comment|// push node on stack
if|if
condition|(
name|nodeStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|root
operator|=
name|node
expr_stmt|;
block|}
name|nodeStack
operator|.
name|addLast
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|PrefetchProcessorNode
name|getParent
parameter_list|()
block|{
return|return
operator|(
name|nodeStack
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|null
else|:
name|nodeStack
operator|.
name|getLast
argument_list|()
return|;
block|}
block|}
specifier|final
class|class
name|DisjointProcessor
implements|implements
name|PrefetchProcessor
block|{
specifier|public
name|boolean
name|startDisjointPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
name|PrefetchProcessorNode
name|processorNode
init|=
operator|(
name|PrefetchProcessorNode
operator|)
name|node
decl_stmt|;
comment|// this means something bad happened during fetch
if|if
condition|(
name|processorNode
operator|.
name|getDataRows
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ... continue with processing even if the objects list is empty to handle
comment|// multi-step prefetches.
if|if
condition|(
name|processorNode
operator|.
name|getDataRows
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|List
name|objects
decl_stmt|;
comment|// disjoint node that is an instance of DecoratedJointNode is a top
comment|// of a local joint prefetch "group"...
if|if
condition|(
name|processorNode
operator|instanceof
name|PrefetchProcessorJointNode
condition|)
block|{
name|JointProcessor
name|subprocessor
init|=
operator|new
name|JointProcessor
argument_list|(
operator|(
name|PrefetchProcessorJointNode
operator|)
name|processorNode
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|processorNode
operator|.
name|getDataRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|subprocessor
operator|.
name|setCurrentFlatRow
argument_list|(
operator|(
name|DataRow
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|processorNode
operator|.
name|traverse
argument_list|(
name|subprocessor
argument_list|)
expr_stmt|;
block|}
name|objects
operator|=
name|processorNode
operator|.
name|getObjects
argument_list|()
expr_stmt|;
name|cache
operator|.
name|snapshotsUpdatedForObjects
argument_list|(
name|objects
argument_list|,
operator|(
operator|(
name|PrefetchProcessorJointNode
operator|)
name|processorNode
operator|)
operator|.
name|getResolvedRows
argument_list|()
argument_list|,
name|queryMetadata
operator|.
name|isRefreshingObjects
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// disjoint prefetch on flattened relationships still requires manual matching
if|else if
condition|(
name|processorNode
operator|.
name|getIncoming
argument_list|()
operator|!=
literal|null
operator|&&
name|processorNode
operator|.
name|getIncoming
argument_list|()
operator|.
name|getRelationship
argument_list|()
operator|.
name|isFlattened
argument_list|()
condition|)
block|{
name|objects
operator|=
name|processorNode
operator|.
name|getResolver
argument_list|()
operator|.
name|relatedObjectsFromDataRows
argument_list|(
name|processorNode
operator|.
name|getDataRows
argument_list|()
argument_list|,
name|processorNode
argument_list|)
expr_stmt|;
name|processorNode
operator|.
name|setObjects
argument_list|(
name|objects
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|objects
operator|=
name|processorNode
operator|.
name|getResolver
argument_list|()
operator|.
name|objectsFromDataRows
argument_list|(
name|processorNode
operator|.
name|getDataRows
argument_list|()
argument_list|)
expr_stmt|;
name|processorNode
operator|.
name|setObjects
argument_list|(
name|objects
argument_list|)
expr_stmt|;
block|}
comment|// ... continue with processing even if the objects list is empty to handle
comment|// multi-step prefetches.
if|if
condition|(
name|objects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// create temporary relationship mapping if needed..; flattened relationships
comment|// are matched with parents during resolving phase, so skip them here.
if|if
condition|(
name|processorNode
operator|.
name|isPartitionedByParent
argument_list|()
operator|&&
operator|!
name|processorNode
operator|.
name|getIncoming
argument_list|()
operator|.
name|getRelationship
argument_list|()
operator|.
name|isFlattened
argument_list|()
condition|)
block|{
name|ObjEntity
name|sourceObjEntity
init|=
literal|null
decl_stmt|;
name|String
name|relatedIdPrefix
init|=
literal|null
decl_stmt|;
comment|// determine resolution strategy
name|ArcProperty
name|reverseArc
init|=
name|processorNode
operator|.
name|getIncoming
argument_list|()
operator|.
name|getComplimentaryReverseArc
argument_list|()
decl_stmt|;
comment|// if null, prepare for manual matching
if|if
condition|(
name|reverseArc
operator|==
literal|null
condition|)
block|{
name|relatedIdPrefix
operator|=
name|processorNode
operator|.
name|getIncoming
argument_list|()
operator|.
name|getRelationship
argument_list|()
operator|.
name|getReverseDbRelationshipPath
argument_list|()
operator|+
literal|"."
expr_stmt|;
name|sourceObjEntity
operator|=
operator|(
name|ObjEntity
operator|)
name|processorNode
operator|.
name|getIncoming
argument_list|()
operator|.
name|getRelationship
argument_list|()
operator|.
name|getSourceEntity
argument_list|()
expr_stmt|;
block|}
name|Iterator
name|it
init|=
name|objects
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Persistent
name|destinationObject
init|=
operator|(
name|Persistent
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Persistent
name|sourceObject
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|reverseArc
operator|!=
literal|null
condition|)
block|{
name|sourceObject
operator|=
operator|(
name|Persistent
operator|)
name|reverseArc
operator|.
name|readProperty
argument_list|(
name|destinationObject
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ObjectStore
name|objectStore
init|=
name|context
operator|.
name|getObjectStore
argument_list|()
decl_stmt|;
comment|// prefetched snapshots contain parent ids prefixed with
comment|// relationship name.
name|DataRow
name|snapshot
init|=
name|objectStore
operator|.
name|getSnapshot
argument_list|(
name|destinationObject
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectId
name|id
init|=
name|processorNode
operator|.
name|getResolver
argument_list|()
operator|.
name|createObjectId
argument_list|(
name|snapshot
argument_list|,
name|sourceObjEntity
argument_list|,
name|relatedIdPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't build ObjectId from row: "
operator|+
name|snapshot
operator|+
literal|", entity: "
operator|+
name|sourceObjEntity
operator|.
name|getName
argument_list|()
operator|+
literal|", prefix: "
operator|+
name|relatedIdPrefix
argument_list|)
throw|;
block|}
name|sourceObject
operator|=
operator|(
name|Persistent
operator|)
name|objectStore
operator|.
name|getNode
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
comment|// don't attach to hollow objects
if|if
condition|(
name|sourceObject
operator|!=
literal|null
operator|&&
name|sourceObject
operator|.
name|getPersistenceState
argument_list|()
operator|!=
name|PersistenceState
operator|.
name|HOLLOW
condition|)
block|{
name|processorNode
operator|.
name|linkToParent
argument_list|(
name|destinationObject
argument_list|,
name|sourceObject
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|startJointPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
comment|// allow joint prefetch nodes to process their children, but skip their own
comment|// processing.
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|startPhantomPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|startUnknownPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unknown prefetch node: "
operator|+
name|node
argument_list|)
throw|;
block|}
specifier|public
name|void
name|finishPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
comment|// noop
block|}
block|}
comment|// a processor of a single joint result set that walks a subtree of prefetch nodes
comment|// that use this result set.
specifier|final
class|class
name|JointProcessor
implements|implements
name|PrefetchProcessor
block|{
name|DataRow
name|currentFlatRow
decl_stmt|;
name|PrefetchProcessorNode
name|rootNode
decl_stmt|;
name|JointProcessor
parameter_list|(
name|PrefetchProcessorJointNode
name|rootNode
parameter_list|)
block|{
name|this
operator|.
name|rootNode
operator|=
name|rootNode
expr_stmt|;
block|}
name|void
name|setCurrentFlatRow
parameter_list|(
name|DataRow
name|currentFlatRow
parameter_list|)
block|{
name|this
operator|.
name|currentFlatRow
operator|=
name|currentFlatRow
expr_stmt|;
block|}
specifier|public
name|boolean
name|startDisjointPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
comment|// disjoint prefetch that is not the root terminates the walk...
return|return
name|node
operator|==
name|rootNode
condition|?
name|startJointPrefetch
argument_list|(
name|node
argument_list|)
else|:
literal|false
return|;
block|}
specifier|public
name|boolean
name|startJointPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
name|PrefetchProcessorJointNode
name|processorNode
init|=
operator|(
name|PrefetchProcessorJointNode
operator|)
name|node
decl_stmt|;
name|Persistent
name|object
init|=
literal|null
decl_stmt|;
comment|// find existing object, if found skip further processing
name|Map
name|id
init|=
name|processorNode
operator|.
name|idFromFlatRow
argument_list|(
name|currentFlatRow
argument_list|)
decl_stmt|;
name|object
operator|=
name|processorNode
operator|.
name|getResolved
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|DataRow
name|row
init|=
name|processorNode
operator|.
name|rowFromFlatRow
argument_list|(
name|currentFlatRow
argument_list|)
decl_stmt|;
name|object
operator|=
name|processorNode
operator|.
name|getResolver
argument_list|()
operator|.
name|objectFromDataRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
comment|// LEFT OUTER JOIN produced no matches...
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|processorNode
operator|.
name|putResolved
argument_list|(
name|id
argument_list|,
name|object
argument_list|)
expr_stmt|;
name|processorNode
operator|.
name|addObject
argument_list|(
name|object
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
comment|// categorization by parent needed even if an object is already there
comment|// (many-to-many case)
if|if
condition|(
name|processorNode
operator|.
name|isPartitionedByParent
argument_list|()
condition|)
block|{
name|PrefetchProcessorNode
name|parent
init|=
operator|(
name|PrefetchProcessorNode
operator|)
name|processorNode
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|processorNode
operator|.
name|linkToParent
argument_list|(
name|object
argument_list|,
name|parent
operator|.
name|getLastResolved
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|processorNode
operator|.
name|setLastResolved
argument_list|(
name|object
argument_list|)
expr_stmt|;
return|return
name|processorNode
operator|.
name|isJointChildren
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|startPhantomPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
return|return
operator|(
operator|(
name|PrefetchProcessorNode
operator|)
name|node
operator|)
operator|.
name|isJointChildren
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|startUnknownPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unknown prefetch node: "
operator|+
name|node
argument_list|)
throw|;
block|}
specifier|public
name|void
name|finishPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
comment|// noop
block|}
block|}
comment|// processor that converts temporary associations between DataObjects to Cayenne
comment|// relationships and also fires snapshot update events
specifier|final
class|class
name|PostProcessor
implements|implements
name|PrefetchProcessor
block|{
specifier|public
name|void
name|finishPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
block|}
specifier|public
name|boolean
name|startDisjointPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
operator|(
operator|(
name|PrefetchProcessorNode
operator|)
name|node
operator|)
operator|.
name|connectToParents
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|startJointPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
name|PrefetchProcessorJointNode
name|processorNode
init|=
operator|(
name|PrefetchProcessorJointNode
operator|)
name|node
decl_stmt|;
if|if
condition|(
operator|!
name|processorNode
operator|.
name|getObjects
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cache
operator|.
name|snapshotsUpdatedForObjects
argument_list|(
name|processorNode
operator|.
name|getObjects
argument_list|()
argument_list|,
name|processorNode
operator|.
name|getResolvedRows
argument_list|()
argument_list|,
name|queryMetadata
operator|.
name|isRefreshingObjects
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// run 'connectToParents' even if the object list is empty. This is needed to
comment|// refresh stale relationships e.g. when some related objects got deleted.
name|processorNode
operator|.
name|connectToParents
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|startPhantomPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|startUnknownPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unknown prefetch node: "
operator|+
name|node
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

