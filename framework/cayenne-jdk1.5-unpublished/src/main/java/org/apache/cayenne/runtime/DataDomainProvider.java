begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|dbsync
operator|.
name|SchemaUpdateStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptorLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|RuntimeProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|DIException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * A {@link DataChannel} provider that provides a single instance of DataDomain configured  * per configuration supplied via injected {@link DataChannelDescriptorLoader}.  *   * @since 3.1  */
end_comment

begin_class
specifier|public
class|class
name|DataDomainProvider
implements|implements
name|Provider
argument_list|<
name|DataChannel
argument_list|>
block|{
annotation|@
name|Inject
specifier|protected
name|DataChannelDescriptorLoader
name|loader
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|RuntimeProperties
name|configurationProperties
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|SchemaUpdateStrategy
name|defaultSchemaUpdateStrategy
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|DbAdapter
name|defaultAdapter
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|DataSourceFactory
name|defaultDataSourceFactory
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|Injector
name|injector
decl_stmt|;
specifier|protected
specifier|volatile
name|DataChannel
name|dataChannel
decl_stmt|;
specifier|public
name|DataChannel
name|get
parameter_list|()
throws|throws
name|DIException
block|{
if|if
condition|(
name|dataChannel
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|dataChannel
operator|==
literal|null
condition|)
block|{
name|createDataChannel
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|dataChannel
return|;
block|}
specifier|protected
name|void
name|createDataChannel
parameter_list|()
block|{
name|String
name|runtimeName
init|=
name|configurationProperties
operator|.
name|get
argument_list|(
name|RuntimeProperties
operator|.
name|CAYENNE_RUNTIME_NAME
argument_list|)
decl_stmt|;
name|DataChannelDescriptor
name|descriptor
init|=
name|loader
operator|.
name|load
argument_list|(
name|runtimeName
argument_list|)
decl_stmt|;
name|DataDomain
name|dataChannel
init|=
operator|new
name|DataDomain
argument_list|(
name|descriptor
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|dataChannel
operator|.
name|initWithProperties
argument_list|(
name|descriptor
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DataMap
name|dataMap
range|:
name|descriptor
operator|.
name|getDataMaps
argument_list|()
control|)
block|{
name|dataChannel
operator|.
name|addMap
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DataNodeDescriptor
name|nodeDescriptor
range|:
name|descriptor
operator|.
name|getDataNodeDescriptors
argument_list|()
control|)
block|{
name|DataNode
name|dataNode
init|=
operator|new
name|DataNode
argument_list|(
name|nodeDescriptor
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|dataNode
operator|.
name|setDataSourceLocation
argument_list|(
name|nodeDescriptor
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|dataSourceFactoryType
init|=
name|nodeDescriptor
operator|.
name|getDataSourceFactoryType
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataSourceFactoryType
operator|==
literal|null
condition|)
block|{
name|dataNode
operator|.
name|setDataSourceFactory
argument_list|(
name|defaultDataSourceFactory
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|dataNode
operator|.
name|setDataSource
argument_list|(
name|defaultDataSourceFactory
operator|.
name|getDataSource
argument_list|(
name|nodeDescriptor
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataNode
operator|.
name|setDataSourceFactory
argument_list|(
name|dataSourceFactoryType
argument_list|)
expr_stmt|;
name|DataSourceFactory
name|factory
init|=
name|newInstance
argument_list|(
name|DataSourceFactory
operator|.
name|class
argument_list|,
name|dataSourceFactoryType
argument_list|)
decl_stmt|;
name|dataNode
operator|.
name|setDataSource
argument_list|(
name|factory
operator|.
name|getDataSource
argument_list|(
name|nodeDescriptor
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// schema update strategy
name|String
name|schemaUpdateStrategyType
init|=
name|nodeDescriptor
operator|.
name|getSchemaUpdateStrategyType
argument_list|()
decl_stmt|;
if|if
condition|(
name|schemaUpdateStrategyType
operator|==
literal|null
condition|)
block|{
name|dataNode
operator|.
name|setSchemaUpdateStrategy
argument_list|(
name|defaultSchemaUpdateStrategy
argument_list|)
expr_stmt|;
name|dataNode
operator|.
name|setSchemaUpdateStrategyName
argument_list|(
name|defaultSchemaUpdateStrategy
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataNode
operator|.
name|setSchemaUpdateStrategyName
argument_list|(
name|schemaUpdateStrategyType
argument_list|)
expr_stmt|;
name|dataNode
operator|.
name|setSchemaUpdateStrategy
argument_list|(
name|newInstance
argument_list|(
name|SchemaUpdateStrategy
operator|.
name|class
argument_list|,
name|schemaUpdateStrategyType
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// DbAdapter
name|String
name|adapterType
init|=
name|nodeDescriptor
operator|.
name|getAdapterType
argument_list|()
decl_stmt|;
if|if
condition|(
name|adapterType
operator|==
literal|null
condition|)
block|{
name|dataNode
operator|.
name|setAdapter
argument_list|(
name|defaultAdapter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataNode
operator|.
name|setAdapter
argument_list|(
name|newInstance
argument_list|(
name|DbAdapter
operator|.
name|class
argument_list|,
name|adapterType
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// DataMaps
for|for
control|(
name|String
name|dataMapName
range|:
name|nodeDescriptor
operator|.
name|getDataMapNames
argument_list|()
control|)
block|{
name|dataNode
operator|.
name|addDataMap
argument_list|(
name|dataChannel
operator|.
name|getMap
argument_list|(
name|dataMapName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dataChannel
operator|.
name|addNode
argument_list|(
name|dataNode
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|dataChannel
operator|=
name|dataChannel
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|newInstance
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|interfaceType
parameter_list|,
name|String
name|className
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|type
decl_stmt|;
try|try
block|{
name|type
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
operator|)
name|Util
operator|.
name|getJavaClass
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Invalid class %s of type %s"
argument_list|,
name|e
argument_list|,
name|className
argument_list|,
name|interfaceType
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|T
name|instance
decl_stmt|;
try|try
block|{
name|instance
operator|=
name|type
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error creating instance of class %s of type %s"
argument_list|,
name|e
argument_list|,
name|className
argument_list|,
name|interfaceType
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|injector
operator|.
name|injectMembers
argument_list|(
name|instance
argument_list|)
expr_stmt|;
return|return
name|instance
return|;
block|}
block|}
end_class

end_unit

