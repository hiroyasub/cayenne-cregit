begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * A default implementation of {@link AdhocObjectFactory} that creates objects using  * default no-arg constructor and injects dependencies into annotated fields. Note that  * constructor injection is not supported by this factory.  *   * @since 3.1  */
end_comment

begin_class
specifier|public
class|class
name|DefaultAdhocObjectFactory
implements|implements
name|AdhocObjectFactory
block|{
annotation|@
name|Inject
specifier|protected
name|Injector
name|injector
decl_stmt|;
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|newInstance
parameter_list|(
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
name|superType
parameter_list|,
name|String
name|className
parameter_list|)
block|{
if|if
condition|(
name|superType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null superType"
argument_list|)
throw|;
block|}
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null className"
argument_list|)
throw|;
block|}
name|Class
argument_list|<
name|T
argument_list|>
name|type
decl_stmt|;
try|try
block|{
name|type
operator|=
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|Util
operator|.
name|getJavaClass
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Invalid class %s of type %s"
argument_list|,
name|e
argument_list|,
name|className
argument_list|,
name|superType
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|superType
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Class %s is not assignable to %s"
argument_list|,
name|className
argument_list|,
name|superType
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|T
name|instance
decl_stmt|;
try|try
block|{
name|instance
operator|=
name|type
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error creating instance of class %s of type %s"
argument_list|,
name|e
argument_list|,
name|className
argument_list|,
name|superType
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|injector
operator|.
name|injectMembers
argument_list|(
name|instance
argument_list|)
expr_stmt|;
return|return
name|instance
return|;
block|}
block|}
end_class

end_unit

