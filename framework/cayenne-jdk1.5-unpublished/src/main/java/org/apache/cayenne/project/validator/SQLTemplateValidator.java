begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|validator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|ProjectPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * Validator for SQLTemplate queries.  *   * @author Andrus Adamchik  * @since 1.1  */
end_comment

begin_class
specifier|public
class|class
name|SQLTemplateValidator
extends|extends
name|TreeNodeValidator
block|{
specifier|public
name|void
name|validateObject
parameter_list|(
name|ProjectPath
name|treeNodePath
parameter_list|,
name|Validator
name|validator
parameter_list|)
block|{
name|SQLTemplate
name|query
init|=
operator|(
name|SQLTemplate
operator|)
name|treeNodePath
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|validateName
argument_list|(
name|query
argument_list|,
name|treeNodePath
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|validateRoot
argument_list|(
name|query
argument_list|,
name|treeNodePath
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|validateDefaultSQL
argument_list|(
name|query
argument_list|,
name|treeNodePath
argument_list|,
name|validator
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|validateDefaultSQL
parameter_list|(
name|SQLTemplate
name|query
parameter_list|,
name|ProjectPath
name|path
parameter_list|,
name|Validator
name|validator
parameter_list|)
block|{
if|if
condition|(
name|Util
operator|.
name|isEmptyString
argument_list|(
name|query
operator|.
name|getDefaultTemplate
argument_list|()
argument_list|)
condition|)
block|{
comment|// see if there is at least one adapter-specific template...
name|Iterator
name|it
init|=
name|query
operator|.
name|getTemplateKeys
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|isEmptyString
argument_list|(
name|query
operator|.
name|getCustomTemplate
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|validator
operator|.
name|registerWarning
argument_list|(
literal|"Query has no default SQL template"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|validateRoot
parameter_list|(
name|SQLTemplate
name|query
parameter_list|,
name|ProjectPath
name|path
parameter_list|,
name|Validator
name|validator
parameter_list|)
block|{
name|DataMap
name|map
init|=
name|path
operator|.
name|firstInstanceOf
argument_list|(
name|DataMap
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|getRoot
argument_list|()
operator|==
literal|null
operator|&&
name|map
operator|!=
literal|null
condition|)
block|{
name|validator
operator|.
name|registerWarning
argument_list|(
literal|"Query has no root"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|validateName
parameter_list|(
name|Query
name|query
parameter_list|,
name|ProjectPath
name|path
parameter_list|,
name|Validator
name|validator
parameter_list|)
block|{
name|String
name|name
init|=
name|query
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// Must have name
if|if
condition|(
name|Util
operator|.
name|isEmptyString
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|validator
operator|.
name|registerError
argument_list|(
literal|"Unnamed Query."
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
name|DataMap
name|map
init|=
operator|(
name|DataMap
operator|)
name|path
operator|.
name|getObjectParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// check for duplicate names in the parent context
name|Iterator
name|it
init|=
name|map
operator|.
name|getQueries
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Query
name|otherQuery
init|=
operator|(
name|Query
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|otherQuery
operator|==
name|query
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|otherQuery
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|validator
operator|.
name|registerError
argument_list|(
literal|"Duplicate Query name: "
operator|+
name|name
operator|+
literal|"."
argument_list|,
name|path
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
end_class

end_unit

