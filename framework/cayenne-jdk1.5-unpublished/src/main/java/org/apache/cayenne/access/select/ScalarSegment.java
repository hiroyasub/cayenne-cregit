begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|select
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|ExtendedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_comment
comment|/**  * Describes a scalar segment of the result consisting of a single column.  *   * @since 3.0  */
end_comment

begin_class
class|class
name|ScalarSegment
implements|implements
name|SelectDescriptor
argument_list|<
name|Object
argument_list|>
implements|,
name|SelectColumn
block|{
specifier|private
name|String
name|columnName
decl_stmt|;
specifier|private
name|RowReader
argument_list|<
name|Object
argument_list|>
name|rowReader
decl_stmt|;
name|ScalarSegment
parameter_list|(
name|String
name|columnName
parameter_list|,
name|ExtendedType
name|converter
parameter_list|)
block|{
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
name|this
operator|.
name|rowReader
operator|=
operator|new
name|ScalarRowReader
argument_list|(
name|converter
argument_list|,
name|TypesMapping
operator|.
name|NOT_DEFINED
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|SelectColumn
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|Collections
operator|.
expr|<
name|SelectColumn
operator|>
name|singletonList
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|RowReader
argument_list|<
name|Object
argument_list|>
name|getRowReader
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
block|{
return|return
name|rowReader
return|;
block|}
specifier|public
name|String
name|getColumnName
parameter_list|(
name|DbEntity
name|unionRoot
parameter_list|,
name|String
name|tableAlias
parameter_list|)
block|{
if|if
condition|(
name|tableAlias
operator|==
literal|null
operator|||
name|tableAlias
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|columnName
return|;
block|}
return|return
name|tableAlias
operator|+
literal|'.'
operator|+
name|columnName
return|;
block|}
specifier|public
name|int
name|getJdbcType
parameter_list|()
block|{
return|return
name|TypesMapping
operator|.
name|NOT_DEFINED
return|;
block|}
specifier|public
name|String
name|getDataRowKey
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"'dataRowKey' is meaningless for Scalar segments"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|DbRelationship
argument_list|>
name|getPath
parameter_list|(
name|DbEntity
name|unionRoot
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"'getPath' is unsupported for Scalar segments"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

