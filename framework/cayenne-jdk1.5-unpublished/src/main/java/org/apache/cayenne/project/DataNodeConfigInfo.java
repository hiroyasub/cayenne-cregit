begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * Stores information necessary to reconfigure nodes of existing projects.  *   * @deprecated since 3.0. {@link ProjectConfigurator} approach turned out to be not  *             usable, and is in fact rarely used (if ever). It will be removed in  *             subsequent releases.  */
end_comment

begin_class
specifier|public
class|class
name|DataNodeConfigInfo
block|{
specifier|protected
name|String
name|name
decl_stmt|;
specifier|protected
name|String
name|domain
decl_stmt|;
specifier|protected
name|String
name|adapter
decl_stmt|;
specifier|protected
name|String
name|dataSource
decl_stmt|;
specifier|protected
name|File
name|driverFile
decl_stmt|;
comment|/**      * Searches for the DataNode described by this DataNodeConfigInfo in the provided      * configuration object. Throws ProjectException if there is no matching DataNode.      */
specifier|public
name|DataNode
name|findDataNode
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|ProjectException
block|{
name|DataDomain
name|domainObj
init|=
literal|null
decl_stmt|;
comment|// domain name is either explicit, or use default domain
if|if
condition|(
name|domain
operator|!=
literal|null
condition|)
block|{
name|domainObj
operator|=
name|config
operator|.
name|getDomain
argument_list|(
name|domain
argument_list|)
expr_stmt|;
if|if
condition|(
name|domainObj
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProjectException
argument_list|(
literal|"Can't find domain named "
operator|+
name|domain
argument_list|)
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
name|domainObj
operator|=
name|config
operator|.
name|getDomain
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ProjectException
argument_list|(
literal|"Project has no default domain."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
if|if
condition|(
name|domainObj
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProjectException
argument_list|(
literal|"Project has no domains configured."
argument_list|)
throw|;
block|}
block|}
name|DataNode
name|node
init|=
name|domainObj
operator|.
name|getNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProjectException
argument_list|(
literal|"Domain "
operator|+
name|domainObj
operator|.
name|getName
argument_list|()
operator|+
literal|" has no node named '"
operator|+
name|name
operator|+
literal|"'."
argument_list|)
throw|;
block|}
return|return
name|node
return|;
block|}
comment|/**      * Returns the adapter.      *       * @return String      */
specifier|public
name|String
name|getAdapter
parameter_list|()
block|{
return|return
name|adapter
return|;
block|}
comment|/**      * Returns the dataSource.      *       * @return String      */
specifier|public
name|String
name|getDataSource
parameter_list|()
block|{
return|return
name|dataSource
return|;
block|}
comment|/**      * Returns the domain.      *       * @return String      */
specifier|public
name|String
name|getDomain
parameter_list|()
block|{
return|return
name|domain
return|;
block|}
comment|/**      * Returns the driverFile.      *       * @return File      */
specifier|public
name|File
name|getDriverFile
parameter_list|()
block|{
return|return
name|driverFile
return|;
block|}
comment|/**      * Returns the name.      *       * @return String      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Sets the adapter.      *       * @param adapter The adapter to set      */
specifier|public
name|void
name|setAdapter
parameter_list|(
name|String
name|adapter
parameter_list|)
block|{
name|this
operator|.
name|adapter
operator|=
name|adapter
expr_stmt|;
block|}
comment|/**      * Sets the dataSource.      *       * @param dataSource The dataSource to set      */
specifier|public
name|void
name|setDataSource
parameter_list|(
name|String
name|dataSource
parameter_list|)
block|{
name|this
operator|.
name|dataSource
operator|=
name|dataSource
expr_stmt|;
block|}
comment|/**      * Sets the domain.      *       * @param domain The domain to set      */
specifier|public
name|void
name|setDomain
parameter_list|(
name|String
name|domain
parameter_list|)
block|{
name|this
operator|.
name|domain
operator|=
name|domain
expr_stmt|;
block|}
comment|/**      * Sets the driverFile.      *       * @param driverFile The driverFile to set      */
specifier|public
name|void
name|setDriverFile
parameter_list|(
name|File
name|driverFile
parameter_list|)
block|{
name|this
operator|.
name|driverFile
operator|=
name|driverFile
expr_stmt|;
block|}
comment|/**      * Sets the name.      *       * @param name The name to set      */
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
block|}
end_class

end_unit

