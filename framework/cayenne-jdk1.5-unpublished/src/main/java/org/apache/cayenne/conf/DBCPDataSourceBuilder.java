begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|dbcp
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|dbcp
operator|.
name|DriverManagerConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|dbcp
operator|.
name|PoolableConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|dbcp
operator|.
name|PoolingDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|pool
operator|.
name|KeyedObjectPoolFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|pool
operator|.
name|ObjectPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|pool
operator|.
name|impl
operator|.
name|GenericKeyedObjectPoolFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|pool
operator|.
name|impl
operator|.
name|GenericObjectPool
import|;
end_import

begin_comment
comment|/**  * A helper class that loads DBCP DataSource from properties.  *   * @author Andrus Adamchik  * @since 2.0  */
end_comment

begin_class
class|class
name|DBCPDataSourceBuilder
block|{
comment|// DataSource Properties
specifier|static
specifier|final
name|String
name|DRIVER_CLASS_NAME
init|=
literal|"driverClassName"
decl_stmt|;
specifier|static
specifier|final
name|String
name|URL
init|=
literal|"url"
decl_stmt|;
specifier|static
specifier|final
name|String
name|USER_NAME
init|=
literal|"username"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"password"
decl_stmt|;
comment|// Connection Pool Properties
specifier|static
specifier|final
name|String
name|MAX_ACTIVE
init|=
literal|"maxActive"
decl_stmt|;
specifier|static
specifier|final
name|String
name|MIN_IDLE
init|=
literal|"minIdle"
decl_stmt|;
specifier|static
specifier|final
name|String
name|MAX_IDLE
init|=
literal|"maxIdle"
decl_stmt|;
specifier|static
specifier|final
name|String
name|MAX_WAIT
init|=
literal|"maxWait"
decl_stmt|;
specifier|static
specifier|final
name|String
name|VALIDATION_QUERY
init|=
literal|"validationQuery"
decl_stmt|;
specifier|static
specifier|final
name|String
name|TEST_ON_BORROW
init|=
literal|"testOnBorrow"
decl_stmt|;
specifier|static
specifier|final
name|String
name|TEST_ON_RETURN
init|=
literal|"testOnReturn"
decl_stmt|;
specifier|static
specifier|final
name|String
name|TEST_IDLE
init|=
literal|"testWhileIdle"
decl_stmt|;
specifier|static
specifier|final
name|String
name|TIME_BETWEEN_EVICTIONS
init|=
literal|"timeBetweenEvictionRunsMillis"
decl_stmt|;
specifier|static
specifier|final
name|String
name|NUM_TEST_PER_EVICTION
init|=
literal|"numTestsPerEvictionRun"
decl_stmt|;
specifier|static
specifier|final
name|String
name|MIN_EVICTABLE_TIME
init|=
literal|"minEvictableIdleTimeMillis"
decl_stmt|;
specifier|static
specifier|final
name|String
name|EXHAUSTED_ACTION
init|=
literal|"whenExhaustedAction"
decl_stmt|;
specifier|static
specifier|final
name|String
name|AUTO_COMMIT
init|=
literal|"defaultAutoCommit"
decl_stmt|;
specifier|static
specifier|final
name|String
name|READ_ONLY
init|=
literal|"defaultReadOnly"
decl_stmt|;
specifier|static
specifier|final
name|String
name|TRANSACTION_ISOLATION
init|=
literal|"defaultTransactionIsolation"
decl_stmt|;
specifier|static
specifier|final
name|String
name|CONNECTION_NOWRAP
init|=
literal|"accessToUnderlyingConnectionAllowed"
decl_stmt|;
specifier|static
specifier|final
name|String
name|CATALOG
init|=
literal|"defaultCatalog"
decl_stmt|;
comment|// PreparedStatementPool properties
specifier|static
specifier|final
name|String
name|POOL_PS
init|=
literal|"poolPreparedStatements"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PS_MAX_ACTIVE
init|=
literal|"ps.maxActive"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PS_MAX_IDLE
init|=
literal|"ps.maxIdle"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PS_MAX_TOTAL
init|=
literal|"ps.maxTotal"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PS_MAX_WAIT
init|=
literal|"ps.maxWait"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PS_MIN_EVICTABLE_TIME
init|=
literal|"ps.minEvictableIdleTimeMillis"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PS_NUM_TEST_PER_EVICTION
init|=
literal|"ps.numTestsPerEvictionRun"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PS_TEST_ON_BORROW
init|=
literal|"ps.testOnBorrow"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PS_TEST_ON_RETURN
init|=
literal|"ps.testOnReturn"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PS_TEST_IDLE
init|=
literal|"ps.testWhileIdle"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PS_TIME_BETWEEN_EVICTIONS
init|=
literal|"ps.timeBetweenEvictionRunsMillis"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PS_EXHAUSTED_ACTION
init|=
literal|"ps.whenExhaustedAction"
decl_stmt|;
specifier|private
name|DBCPDataSourceProperties
name|config
decl_stmt|;
name|DBCPDataSourceBuilder
parameter_list|(
name|DBCPDataSourceProperties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|properties
expr_stmt|;
block|}
name|DataSource
name|createDataSource
parameter_list|()
block|{
name|boolean
name|connectionNoWrap
init|=
name|config
operator|.
name|getBoolean
argument_list|(
name|CONNECTION_NOWRAP
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ObjectPool
name|connectionPool
init|=
name|createConnectionPool
argument_list|()
decl_stmt|;
name|PoolingDataSource
name|dataSource
init|=
operator|new
name|PoolingDataSource
argument_list|(
name|connectionPool
argument_list|)
decl_stmt|;
name|dataSource
operator|.
name|setAccessToUnderlyingConnectionAllowed
argument_list|(
name|connectionNoWrap
argument_list|)
expr_stmt|;
return|return
name|dataSource
return|;
block|}
specifier|private
name|void
name|loadDriverClass
parameter_list|()
block|{
name|String
name|driver
init|=
name|config
operator|.
name|getString
argument_list|(
name|DRIVER_CLASS_NAME
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|driver
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Error loading driver "
operator|+
name|driver
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ObjectPool
name|createConnectionPool
parameter_list|()
block|{
name|ConnectionFactory
name|factory
init|=
name|createConnectionFactory
argument_list|()
decl_stmt|;
name|GenericObjectPool
operator|.
name|Config
name|poolConfig
init|=
name|createConnectionPoolConfig
argument_list|()
decl_stmt|;
name|KeyedObjectPoolFactory
name|statementPool
init|=
name|createPreparedStatementPool
argument_list|()
decl_stmt|;
name|String
name|validationQuery
init|=
name|config
operator|.
name|getString
argument_list|(
name|VALIDATION_QUERY
argument_list|)
decl_stmt|;
name|boolean
name|defaultReadOnly
init|=
name|config
operator|.
name|getBoolean
argument_list|(
name|READ_ONLY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|defaultAutoCommit
init|=
name|config
operator|.
name|getBoolean
argument_list|(
name|AUTO_COMMIT
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|defaultTransactionIsolation
init|=
name|config
operator|.
name|getTransactionIsolation
argument_list|(
name|TRANSACTION_ISOLATION
argument_list|,
name|Connection
operator|.
name|TRANSACTION_SERIALIZABLE
argument_list|)
decl_stmt|;
name|String
name|defaultCatalog
init|=
name|config
operator|.
name|getString
argument_list|(
name|CATALOG
argument_list|)
decl_stmt|;
name|ObjectPool
name|connectionPool
init|=
operator|new
name|GenericObjectPool
argument_list|(
literal|null
argument_list|,
name|poolConfig
argument_list|)
decl_stmt|;
comment|// a side effect of PoolableConnectionFactory constructor call is that newly
comment|// created factory object is assigned to "connectionPool", which is definitely a
comment|// very confusing part of DBCP - new object is not visibly assigned to anything,
comment|// still it is preserved...
operator|new
name|PoolableConnectionFactory
argument_list|(
name|factory
argument_list|,
name|connectionPool
argument_list|,
name|statementPool
argument_list|,
name|validationQuery
argument_list|,
name|defaultReadOnly
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
argument_list|,
name|defaultAutoCommit
argument_list|,
name|defaultTransactionIsolation
argument_list|,
name|defaultCatalog
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|connectionPool
return|;
block|}
specifier|private
name|ConnectionFactory
name|createConnectionFactory
parameter_list|()
block|{
name|loadDriverClass
argument_list|()
expr_stmt|;
name|String
name|url
init|=
name|config
operator|.
name|getString
argument_list|(
name|URL
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|config
operator|.
name|getString
argument_list|(
name|USER_NAME
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|config
operator|.
name|getString
argument_list|(
name|PASSWORD
argument_list|)
decl_stmt|;
return|return
operator|new
name|DriverManagerConnectionFactory
argument_list|(
name|url
argument_list|,
name|userName
argument_list|,
name|password
argument_list|)
return|;
block|}
specifier|private
name|KeyedObjectPoolFactory
name|createPreparedStatementPool
parameter_list|()
block|{
if|if
condition|(
operator|!
name|config
operator|.
name|getBoolean
argument_list|(
literal|"poolPreparedStatements"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// the GenericKeyedObjectPool.Config object isn't used because
comment|// although it has provision for the maxTotal parameter when
comment|// passed to the GenericKeyedObjectPoolFactory constructor
comment|// this parameter is not being properly set as a default for
comment|// creating prepared statement pools
name|int
name|maxActive
init|=
name|config
operator|.
name|getInt
argument_list|(
name|PS_MAX_ACTIVE
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_MAX_ACTIVE
argument_list|)
decl_stmt|;
name|byte
name|whenExhaustedAction
init|=
name|config
operator|.
name|getWhenExhaustedAction
argument_list|(
name|PS_EXHAUSTED_ACTION
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_WHEN_EXHAUSTED_ACTION
argument_list|)
decl_stmt|;
name|long
name|maxWait
init|=
name|config
operator|.
name|getLong
argument_list|(
name|PS_MAX_WAIT
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_MAX_WAIT
argument_list|)
decl_stmt|;
name|int
name|maxIdle
init|=
name|config
operator|.
name|getInt
argument_list|(
name|PS_MAX_IDLE
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_MAX_IDLE
argument_list|)
decl_stmt|;
name|int
name|maxTotal
init|=
name|config
operator|.
name|getInt
argument_list|(
name|PS_MAX_TOTAL
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|testOnBorrow
init|=
name|config
operator|.
name|getBoolean
argument_list|(
name|PS_TEST_ON_BORROW
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_TEST_ON_BORROW
argument_list|)
decl_stmt|;
name|boolean
name|testOnReturn
init|=
name|config
operator|.
name|getBoolean
argument_list|(
name|PS_TEST_ON_RETURN
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_TEST_ON_RETURN
argument_list|)
decl_stmt|;
name|long
name|timeBetweenEvictionRunsMillis
init|=
name|config
operator|.
name|getLong
argument_list|(
name|PS_TIME_BETWEEN_EVICTIONS
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS
argument_list|)
decl_stmt|;
name|int
name|numTestsPerEvictionRun
init|=
name|config
operator|.
name|getInt
argument_list|(
name|PS_NUM_TEST_PER_EVICTION
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_NUM_TESTS_PER_EVICTION_RUN
argument_list|)
decl_stmt|;
name|long
name|minEvictableIdleTimeMillis
init|=
name|config
operator|.
name|getLong
argument_list|(
name|PS_MIN_EVICTABLE_TIME
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS
argument_list|)
decl_stmt|;
name|boolean
name|testWhileIdle
init|=
name|config
operator|.
name|getBoolean
argument_list|(
name|PS_TEST_IDLE
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_TEST_WHILE_IDLE
argument_list|)
decl_stmt|;
return|return
operator|new
name|GenericKeyedObjectPoolFactory
argument_list|(
literal|null
argument_list|,
name|maxActive
argument_list|,
name|whenExhaustedAction
argument_list|,
name|maxWait
argument_list|,
name|maxIdle
argument_list|,
name|maxTotal
argument_list|,
name|testOnBorrow
argument_list|,
name|testOnReturn
argument_list|,
name|timeBetweenEvictionRunsMillis
argument_list|,
name|numTestsPerEvictionRun
argument_list|,
name|minEvictableIdleTimeMillis
argument_list|,
name|testWhileIdle
argument_list|)
return|;
block|}
specifier|private
name|GenericObjectPool
operator|.
name|Config
name|createConnectionPoolConfig
parameter_list|()
block|{
name|GenericObjectPool
operator|.
name|Config
name|poolConfig
init|=
operator|new
name|GenericObjectPool
operator|.
name|Config
argument_list|()
decl_stmt|;
name|poolConfig
operator|.
name|maxIdle
operator|=
name|config
operator|.
name|getInt
argument_list|(
name|MAX_IDLE
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_MAX_IDLE
argument_list|)
expr_stmt|;
name|poolConfig
operator|.
name|minIdle
operator|=
name|config
operator|.
name|getInt
argument_list|(
name|MIN_IDLE
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_MIN_IDLE
argument_list|)
expr_stmt|;
name|poolConfig
operator|.
name|maxActive
operator|=
name|config
operator|.
name|getInt
argument_list|(
name|MAX_ACTIVE
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_MAX_ACTIVE
argument_list|)
expr_stmt|;
name|poolConfig
operator|.
name|maxWait
operator|=
name|config
operator|.
name|getLong
argument_list|(
name|MAX_WAIT
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_MAX_WAIT
argument_list|)
expr_stmt|;
name|poolConfig
operator|.
name|testOnBorrow
operator|=
name|config
operator|.
name|getBoolean
argument_list|(
name|TEST_ON_BORROW
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_TEST_ON_BORROW
argument_list|)
expr_stmt|;
name|poolConfig
operator|.
name|testOnReturn
operator|=
name|config
operator|.
name|getBoolean
argument_list|(
name|TEST_ON_RETURN
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_TEST_ON_RETURN
argument_list|)
expr_stmt|;
name|poolConfig
operator|.
name|testWhileIdle
operator|=
name|config
operator|.
name|getBoolean
argument_list|(
name|TEST_IDLE
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_TEST_WHILE_IDLE
argument_list|)
expr_stmt|;
name|poolConfig
operator|.
name|timeBetweenEvictionRunsMillis
operator|=
name|config
operator|.
name|getLong
argument_list|(
name|TIME_BETWEEN_EVICTIONS
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS
argument_list|)
expr_stmt|;
name|poolConfig
operator|.
name|numTestsPerEvictionRun
operator|=
name|config
operator|.
name|getInt
argument_list|(
name|NUM_TEST_PER_EVICTION
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_NUM_TESTS_PER_EVICTION_RUN
argument_list|)
expr_stmt|;
name|poolConfig
operator|.
name|minEvictableIdleTimeMillis
operator|=
name|config
operator|.
name|getLong
argument_list|(
name|MIN_EVICTABLE_TIME
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS
argument_list|)
expr_stmt|;
name|poolConfig
operator|.
name|whenExhaustedAction
operator|=
name|config
operator|.
name|getWhenExhaustedAction
argument_list|(
name|EXHAUSTED_ACTION
argument_list|,
name|GenericObjectPool
operator|.
name|DEFAULT_WHEN_EXHAUSTED_ACTION
argument_list|)
expr_stmt|;
return|return
name|poolConfig
return|;
block|}
block|}
end_class

end_unit

