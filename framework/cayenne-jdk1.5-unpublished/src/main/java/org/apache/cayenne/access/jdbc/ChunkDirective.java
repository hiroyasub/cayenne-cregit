begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|context
operator|.
name|InternalContextAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|exception
operator|.
name|MethodInvocationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|exception
operator|.
name|ParseErrorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|exception
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|directive
operator|.
name|Directive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|parser
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_comment
comment|/**  * A custom Velocity directive to describe a conditional chunk of a {@link ChainDirective chain}.  * Usage of chunk is the following:  *   *<pre>  * #chunk()...#end - e.g. #chunk()A = 5#end  * #chunk(condition)...#end - e.g. #chunk($a)A = $a#end</pre>  *   *<p>If condition is evaluated to false, chunk is not included in the chain,  * if it is true, chunk is included, and if it is not the first chunk, it is  * prefixed with chain join.  *   * @since 1.1  */
end_comment

begin_class
specifier|public
class|class
name|ChunkDirective
extends|extends
name|Directive
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"chunk"
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|BLOCK
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|render
parameter_list|(
name|InternalContextAdapter
name|context
parameter_list|,
name|Writer
name|writer
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|IOException
throws|,
name|ResourceNotFoundException
throws|,
name|ParseErrorException
throws|,
name|MethodInvocationException
block|{
comment|// first child is an expression, second is BLOCK
if|if
condition|(
name|node
operator|.
name|jjtGetNumChildren
argument_list|()
operator|>
literal|1
operator|&&
operator|!
name|node
operator|.
name|jjtGetChild
argument_list|(
literal|0
argument_list|)
operator|.
name|evaluate
argument_list|(
name|context
argument_list|)
condition|)
block|{
comment|// return value is really meaningless in Velocity...whatever
return|return
literal|false
return|;
block|}
comment|// BLOCK is the last child
name|Node
name|block
init|=
name|node
operator|.
name|jjtGetChild
argument_list|(
name|node
operator|.
name|jjtGetNumChildren
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|block
operator|.
name|render
argument_list|(
name|context
argument_list|,
name|writer
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

