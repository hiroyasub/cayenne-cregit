begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_comment
comment|/**  * A helper class that initializes server-side fault singletons.  *   * @since 1.2  * @deprecated since 3.0 as the fault singletons are no longer static and are managed by  *             the Cayenne configuration.  * @author Andrus Adamchik  */
end_comment

begin_class
class|class
name|DataContextFaults
extends|extends
name|Fault
block|{
comment|/**      * Resets super singletons.      */
specifier|static
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|Fault
operator|.
name|toManyFault
operator|==
literal|null
condition|)
block|{
name|Fault
operator|.
name|toManyFault
operator|=
operator|new
name|ToManyListFault
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|Fault
operator|.
name|toOneFault
operator|==
literal|null
condition|)
block|{
name|Fault
operator|.
name|toOneFault
operator|=
operator|new
name|ToOneFault
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Object
name|resolveFault
parameter_list|(
name|Persistent
name|sourceObject
parameter_list|,
name|String
name|relationshipName
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

