begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLBaseVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ArcProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|AttributeProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ToManyProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ToOneProperty
import|;
end_import

begin_comment
comment|/**  * @since 3.0  */
end_comment

begin_class
class|class
name|EJBQLIdentifierColumnsTranslator
extends|extends
name|EJBQLBaseVisitor
block|{
specifier|private
name|EJBQLTranslationContext
name|context
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|columns
decl_stmt|;
name|EJBQLIdentifierColumnsTranslator
parameter_list|(
name|EJBQLTranslationContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visitIdentifier
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|xfields
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|isAppendingResultColumns
argument_list|()
condition|)
block|{
name|xfields
operator|=
name|context
operator|.
name|nextEntityResult
argument_list|()
operator|.
name|getFields
argument_list|()
expr_stmt|;
block|}
comment|// assign whatever we have to a final ivar so that it can be accessed within
comment|// the inner class
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
init|=
name|xfields
decl_stmt|;
specifier|final
name|String
name|idVar
init|=
name|expression
operator|.
name|getText
argument_list|()
decl_stmt|;
comment|// append all table columns ... the trick is to follow the algorithm for
comment|// describing the fields in the expression compiler, so that we could assign
comment|// columns labels from FieldResults in the order we encounter them here...
comment|// TODO: andrus 2008/02/17 - this is a bit of a hack, think of a better solution
name|ClassDescriptor
name|descriptor
init|=
name|context
operator|.
name|getEntityDescriptor
argument_list|(
name|idVar
argument_list|)
decl_stmt|;
name|PropertyVisitor
name|visitor
init|=
operator|new
name|PropertyVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|visitAttribute
parameter_list|(
name|AttributeProperty
name|property
parameter_list|)
block|{
name|ObjAttribute
name|oa
init|=
name|property
operator|.
name|getAttribute
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|dbPathIterator
init|=
name|oa
operator|.
name|getDbPathIterator
argument_list|()
decl_stmt|;
name|EJBQLJoinAppender
name|joinAppender
init|=
literal|null
decl_stmt|;
name|String
name|marker
init|=
literal|null
decl_stmt|;
name|EJBQLTableId
name|lhsId
init|=
operator|new
name|EJBQLTableId
argument_list|(
name|idVar
argument_list|)
decl_stmt|;
while|while
condition|(
name|dbPathIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|pathPart
init|=
name|dbPathIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathPart
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"ObjAttribute has no component: "
operator|+
name|oa
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
if|else if
condition|(
name|pathPart
operator|instanceof
name|DbRelationship
condition|)
block|{
if|if
condition|(
name|marker
operator|==
literal|null
condition|)
block|{
name|marker
operator|=
name|EJBQLJoinAppender
operator|.
name|makeJoinTailMarker
argument_list|(
name|idVar
argument_list|)
expr_stmt|;
name|joinAppender
operator|=
name|context
operator|.
name|getTranslatorFactory
argument_list|()
operator|.
name|getJoinAppender
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|DbRelationship
name|dr
init|=
operator|(
name|DbRelationship
operator|)
name|pathPart
decl_stmt|;
name|EJBQLTableId
name|rhsId
init|=
operator|new
name|EJBQLTableId
argument_list|(
name|lhsId
argument_list|,
name|dr
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|joinAppender
operator|.
name|appendOuterJoin
argument_list|(
name|marker
argument_list|,
name|lhsId
argument_list|,
name|rhsId
argument_list|)
expr_stmt|;
name|lhsId
operator|=
name|rhsId
expr_stmt|;
block|}
if|else if
condition|(
name|pathPart
operator|instanceof
name|DbAttribute
condition|)
block|{
name|appendColumn
argument_list|(
name|idVar
argument_list|,
name|oa
argument_list|,
operator|(
name|DbAttribute
operator|)
name|pathPart
argument_list|,
name|fields
argument_list|,
name|oa
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitToMany
parameter_list|(
name|ToManyProperty
name|property
parameter_list|)
block|{
name|visitRelationship
argument_list|(
name|property
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitToOne
parameter_list|(
name|ToOneProperty
name|property
parameter_list|)
block|{
name|visitRelationship
argument_list|(
name|property
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|visitRelationship
parameter_list|(
name|ArcProperty
name|property
parameter_list|)
block|{
name|ObjRelationship
name|rel
init|=
name|property
operator|.
name|getRelationship
argument_list|()
decl_stmt|;
name|DbRelationship
name|dbRel
init|=
name|rel
operator|.
name|getDbRelationships
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|DbJoin
name|join
range|:
name|dbRel
operator|.
name|getJoins
argument_list|()
control|)
block|{
name|DbAttribute
name|src
init|=
name|join
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|appendColumn
argument_list|(
name|idVar
argument_list|,
literal|null
argument_list|,
name|src
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
comment|// EJBQL queries are polymorphic by definition - there is no distinction between
comment|// inheritance/no-inheritance fetch
name|descriptor
operator|.
name|visitAllProperties
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
comment|// append id columns ... (some may have been appended already via relationships)
name|DbEntity
name|table
init|=
name|descriptor
operator|.
name|getEntity
argument_list|()
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
for|for
control|(
name|DbAttribute
name|pk
range|:
name|table
operator|.
name|getPrimaryKeys
argument_list|()
control|)
block|{
name|appendColumn
argument_list|(
name|idVar
argument_list|,
literal|null
argument_list|,
name|pk
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
comment|// append inheritance discriminator columns...
name|Iterator
argument_list|<
name|ObjAttribute
argument_list|>
name|discriminatorColumns
init|=
name|descriptor
operator|.
name|getDiscriminatorColumns
argument_list|()
decl_stmt|;
while|while
condition|(
name|discriminatorColumns
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ObjAttribute
name|attribute
init|=
name|discriminatorColumns
operator|.
name|next
argument_list|()
decl_stmt|;
name|appendColumn
argument_list|(
name|idVar
argument_list|,
name|attribute
argument_list|,
name|attribute
operator|.
name|getDbAttribute
argument_list|()
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|appendColumn
parameter_list|(
name|String
name|identifier
parameter_list|,
name|ObjAttribute
name|property
parameter_list|,
name|DbAttribute
name|column
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|)
block|{
name|appendColumn
argument_list|(
name|identifier
argument_list|,
name|property
argument_list|,
name|column
argument_list|,
name|fields
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendColumn
parameter_list|(
name|String
name|identifier
parameter_list|,
name|ObjAttribute
name|property
parameter_list|,
name|DbAttribute
name|column
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
parameter_list|,
name|String
name|javaType
parameter_list|)
block|{
name|DbEntity
name|table
init|=
operator|(
name|DbEntity
operator|)
name|column
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|String
name|alias
init|=
name|context
operator|.
name|getTableAlias
argument_list|(
name|identifier
argument_list|,
name|table
operator|.
name|getFullyQualifiedName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|columnName
init|=
name|alias
operator|+
literal|"."
operator|+
name|column
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|columns
init|=
name|getColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|columns
operator|.
name|add
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
name|columns
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
literal|", "
else|:
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|isAppendingResultColumns
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|"#result('"
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|append
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|isAppendingResultColumns
argument_list|()
condition|)
block|{
if|if
condition|(
name|javaType
operator|==
literal|null
condition|)
block|{
name|javaType
operator|=
name|TypesMapping
operator|.
name|getJavaBySqlType
argument_list|(
name|column
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|columnLabel
init|=
name|fields
operator|.
name|get
argument_list|(
name|property
operator|!=
literal|null
condition|?
name|property
operator|.
name|getDbAttributePath
argument_list|()
else|:
name|column
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// TODO: andrus 6/27/2007 - the last parameter is an unofficial "jdbcType"
comment|// pending CAY-813 implementation, switch to #column directive
name|context
operator|.
name|append
argument_list|(
literal|"' '"
argument_list|)
operator|.
name|append
argument_list|(
name|javaType
argument_list|)
operator|.
name|append
argument_list|(
literal|"' '"
argument_list|)
operator|.
name|append
argument_list|(
name|columnLabel
argument_list|)
operator|.
name|append
argument_list|(
literal|"' '"
argument_list|)
operator|.
name|append
argument_list|(
name|columnLabel
argument_list|)
operator|.
name|append
argument_list|(
literal|"' "
operator|+
name|column
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getColumns
parameter_list|()
block|{
if|if
condition|(
name|columns
operator|==
literal|null
condition|)
block|{
name|columns
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|columns
return|;
block|}
block|}
end_class

end_unit

