begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneDataObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistentObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|foundrylogic
operator|.
name|vpp
operator|.
name|VPPConfig
import|;
end_import

begin_comment
comment|/**  * Generates Java source code for ObjEntities in the DataMap. This class is abstract and  * does not deal with filesystem issues directly. Concrete subclasses should provide ways  * to store generated files by implementing {@link #openWriter(ObjEntity, String, String)}  * and {@link #closeWriter(Writer)} methods.  *   * @author Andrus Adamchik  * @deprecated since 3.0 use {@link ClassGenerationAction} and subclasses.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|MapClassGenerator
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SINGLE_CLASS_TEMPLATE_1_1
init|=
literal|"dotemplates/singleclass.vm"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SUBCLASS_TEMPLATE_1_1
init|=
literal|"dotemplates/subclass.vm"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SUPERCLASS_TEMPLATE_1_1
init|=
literal|"dotemplates/superclass.vm"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SINGLE_CLASS_TEMPLATE_1_2
init|=
literal|"dotemplates/v1_2/singleclass.vm"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SUBCLASS_TEMPLATE_1_2
init|=
literal|"dotemplates/v1_2/subclass.vm"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SUPERCLASS_TEMPLATE_1_2
init|=
literal|"dotemplates/v1_2/superclass.vm"
decl_stmt|;
comment|/**      * @since 1.2      */
specifier|public
specifier|static
specifier|final
name|String
name|CLIENT_SUBCLASS_TEMPLATE_1_2
init|=
literal|"dotemplates/v1_2/client-subclass.vm"
decl_stmt|;
comment|/**      * @since 1.2      */
specifier|public
specifier|static
specifier|final
name|String
name|CLIENT_SUPERCLASS_TEMPLATE_1_2
init|=
literal|"dotemplates/v1_2/client-superclass.vm"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SINGLE_CLASS_TEMPLATE
init|=
name|SINGLE_CLASS_TEMPLATE_1_1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SUBCLASS_TEMPLATE
init|=
name|SUBCLASS_TEMPLATE_1_1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SUPERCLASS_TEMPLATE
init|=
name|SUPERCLASS_TEMPLATE_1_1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SUPERCLASS_PREFIX
init|=
literal|"_"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|VERSION_1_1
init|=
name|ClassGenerator
operator|.
name|VERSION_1_1
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|VERSION_1_2
init|=
name|ClassGenerator
operator|.
name|VERSION_1_2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_VERSION
init|=
name|VERSION_1_1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MODE_DATAMAP
init|=
literal|"datamap"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MODE_ENTITY
init|=
literal|"entity"
decl_stmt|;
specifier|protected
name|String
name|versionString
init|=
name|DEFAULT_VERSION
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|ObjEntity
argument_list|>
name|objEntities
decl_stmt|;
specifier|protected
name|String
name|superPkg
decl_stmt|;
specifier|protected
name|DataMap
name|dataMap
decl_stmt|;
specifier|protected
name|VPPConfig
name|vppConfig
decl_stmt|;
specifier|protected
name|String
name|mode
init|=
name|MODE_ENTITY
decl_stmt|;
specifier|protected
name|boolean
name|client
decl_stmt|;
specifier|public
name|MapClassGenerator
parameter_list|()
block|{
block|}
comment|/**      * @deprecated since 3.0 - unused.      */
specifier|public
name|MapClassGenerator
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
name|this
argument_list|(
name|dataMap
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ObjEntity
argument_list|>
argument_list|(
name|dataMap
operator|.
name|getObjEntities
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new MapClassGenerator.      *       * @since 1.2      */
specifier|public
name|MapClassGenerator
parameter_list|(
name|DataMap
name|dataMap
parameter_list|,
name|List
argument_list|<
name|ObjEntity
argument_list|>
name|objEntities
parameter_list|)
block|{
name|this
operator|.
name|dataMap
operator|=
name|dataMap
expr_stmt|;
name|this
operator|.
name|setObjEntities
argument_list|(
name|objEntities
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|defaultSingleClassTemplate
parameter_list|()
block|{
comment|// there is no default single class client template at the moment
if|if
condition|(
name|client
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Default generation for single classes on the client is not supported..."
argument_list|)
throw|;
block|}
if|else if
condition|(
name|VERSION_1_1
operator|.
name|equals
argument_list|(
name|versionString
argument_list|)
condition|)
block|{
return|return
name|SINGLE_CLASS_TEMPLATE_1_1
return|;
block|}
if|else if
condition|(
name|VERSION_1_2
operator|.
name|equals
argument_list|(
name|versionString
argument_list|)
condition|)
block|{
return|return
name|SINGLE_CLASS_TEMPLATE_1_2
return|;
block|}
return|return
name|SINGLE_CLASS_TEMPLATE
return|;
block|}
specifier|protected
name|String
name|defaultSubclassTemplate
parameter_list|()
block|{
comment|// client templates are always 1.2
if|if
condition|(
name|client
condition|)
block|{
return|return
name|CLIENT_SUBCLASS_TEMPLATE_1_2
return|;
block|}
if|else if
condition|(
name|VERSION_1_1
operator|.
name|equals
argument_list|(
name|versionString
argument_list|)
condition|)
block|{
return|return
name|SUBCLASS_TEMPLATE_1_1
return|;
block|}
if|else if
condition|(
name|VERSION_1_2
operator|.
name|equals
argument_list|(
name|versionString
argument_list|)
condition|)
block|{
return|return
name|SUBCLASS_TEMPLATE_1_2
return|;
block|}
return|return
name|SUBCLASS_TEMPLATE
return|;
block|}
specifier|protected
name|String
name|defaultSuperclassTemplate
parameter_list|()
block|{
comment|// client templates are always 1.2
if|if
condition|(
name|client
condition|)
block|{
return|return
name|CLIENT_SUPERCLASS_TEMPLATE_1_2
return|;
block|}
if|else if
condition|(
name|VERSION_1_1
operator|.
name|equals
argument_list|(
name|versionString
argument_list|)
condition|)
block|{
return|return
name|SUPERCLASS_TEMPLATE_1_1
return|;
block|}
if|else if
condition|(
name|VERSION_1_2
operator|.
name|equals
argument_list|(
name|versionString
argument_list|)
condition|)
block|{
return|return
name|SUPERCLASS_TEMPLATE_1_2
return|;
block|}
return|return
name|SUPERCLASS_TEMPLATE
return|;
block|}
comment|/**      * Creates a Writer to output source code for a given ObjEntity and Java class.      *       * @return Writer to store generated class source code or null if this class      *         generation should be skipped.      */
specifier|public
specifier|abstract
name|Writer
name|openWriter
parameter_list|(
name|ObjEntity
name|entity
parameter_list|,
name|String
name|pkgName
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Closes writer after class code has been successfully written by      * ClassGenerationInfo.      */
specifier|public
specifier|abstract
name|void
name|closeWriter
parameter_list|(
name|Writer
name|out
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Runs class generation. Produces a pair of Java classes for each ObjEntity in the      * map. Uses default Cayenne templates for classes.      *       * @deprecated since 3.0 - unused      */
specifier|public
name|void
name|generateClassPairs
parameter_list|()
throws|throws
name|Exception
block|{
name|generateClassPairs
argument_list|(
name|defaultSubclassTemplate
argument_list|()
argument_list|,
name|defaultSuperclassTemplate
argument_list|()
argument_list|,
name|SUPERCLASS_PREFIX
argument_list|)
expr_stmt|;
block|}
comment|/**      * Runs class generation. Produces a pair of Java classes for each ObjEntity in the      * map. This allows developers to use generated<b>subclass</b> for their custom      * code, while generated<b>superclass</b> will contain Cayenne code. Superclass will      * be generated in the same package, its class name will be derived from the class      * name by adding a<code>superPrefix</code>.      */
specifier|public
name|void
name|generateClassPairs
parameter_list|(
name|String
name|classTemplate
parameter_list|,
name|String
name|superTemplate
parameter_list|,
name|String
name|superPrefix
parameter_list|)
throws|throws
name|Exception
block|{
comment|// note - client templates ignore version and unconditionally use 1.2
if|if
condition|(
name|client
condition|)
block|{
name|generateClientClassPairs_1_2
argument_list|(
name|classTemplate
argument_list|,
name|superTemplate
argument_list|,
name|superPrefix
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|VERSION_1_1
operator|.
name|equals
argument_list|(
name|versionString
argument_list|)
condition|)
block|{
name|generateClassPairs_1_1
argument_list|(
name|classTemplate
argument_list|,
name|superTemplate
argument_list|,
name|superPrefix
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|VERSION_1_2
operator|.
name|equals
argument_list|(
name|versionString
argument_list|)
condition|)
block|{
name|generateClassPairs_1_2
argument_list|(
name|classTemplate
argument_list|,
name|superTemplate
argument_list|,
name|superPrefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Illegal Version in generateClassPairs: "
operator|+
name|versionString
argument_list|)
throw|;
block|}
block|}
comment|/**      * Runs class generation. Produces a pair of Java classes for each ObjEntity in the      * map. This allows developers to use generated<b>subclass</b> for their custom      * code, while generated<b>superclass</b> will contain Cayenne code. Superclass will      * be generated in the same package, its class name will be derived from the class      * name by adding a<code>superPrefix</code>.      */
specifier|private
name|void
name|generateClassPairs_1_1
parameter_list|(
name|String
name|classTemplate
parameter_list|,
name|String
name|superTemplate
parameter_list|,
name|String
name|superPrefix
parameter_list|)
throws|throws
name|Exception
block|{
name|ClassGenerator
name|mainGenSetup
init|=
operator|new
name|ClassGenerator
argument_list|(
name|classTemplate
argument_list|,
name|versionString
argument_list|)
decl_stmt|;
name|ClassGenerator
name|superGenSetup
init|=
operator|new
name|ClassGenerator
argument_list|(
name|superTemplate
argument_list|,
name|versionString
argument_list|)
decl_stmt|;
name|ClassGenerationInfo
name|mainGen
init|=
name|mainGenSetup
operator|.
name|getClassGenerationInfo
argument_list|()
decl_stmt|;
name|ClassGenerationInfo
name|superGen
init|=
name|superGenSetup
operator|.
name|getClassGenerationInfo
argument_list|()
decl_stmt|;
comment|// prefix is needed for both generators
name|mainGen
operator|.
name|setSuperPrefix
argument_list|(
name|superPrefix
argument_list|)
expr_stmt|;
name|superGen
operator|.
name|setSuperPrefix
argument_list|(
name|superPrefix
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjEntity
name|ent
range|:
name|entitiesForCurrentMode
argument_list|()
control|)
block|{
comment|// 1. do the superclass
name|initClassGenerator_1_1
argument_list|(
name|superGen
argument_list|,
name|ent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Writer
name|superOut
init|=
name|openWriter
argument_list|(
name|ent
argument_list|,
name|superGen
operator|.
name|getPackageName
argument_list|()
argument_list|,
name|superPrefix
operator|+
name|superGen
operator|.
name|getClassName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|superOut
operator|!=
literal|null
condition|)
block|{
name|superGenSetup
operator|.
name|generateClass
argument_list|(
name|superOut
argument_list|,
name|ent
argument_list|)
expr_stmt|;
name|closeWriter
argument_list|(
name|superOut
argument_list|)
expr_stmt|;
block|}
comment|// 2. do the main class
name|initClassGenerator_1_1
argument_list|(
name|mainGen
argument_list|,
name|ent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Writer
name|mainOut
init|=
name|openWriter
argument_list|(
name|ent
argument_list|,
name|mainGen
operator|.
name|getPackageName
argument_list|()
argument_list|,
name|mainGen
operator|.
name|getClassName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mainOut
operator|!=
literal|null
condition|)
block|{
name|mainGenSetup
operator|.
name|generateClass
argument_list|(
name|mainOut
argument_list|,
name|ent
argument_list|)
expr_stmt|;
name|closeWriter
argument_list|(
name|mainOut
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|generateClientClassPairs_1_2
parameter_list|(
name|String
name|classTemplate
parameter_list|,
name|String
name|superTemplate
parameter_list|,
name|String
name|superPrefix
parameter_list|)
throws|throws
name|Exception
block|{
name|ClassGenerator
name|mainGenSetup
init|=
operator|new
name|ClassGenerator
argument_list|(
name|classTemplate
argument_list|,
name|ClassGenerator
operator|.
name|VERSION_1_2
argument_list|,
name|vppConfig
argument_list|)
decl_stmt|;
name|ClassGenerator
name|superGenSetup
init|=
operator|new
name|ClassGenerator
argument_list|(
name|superTemplate
argument_list|,
name|ClassGenerator
operator|.
name|VERSION_1_2
argument_list|,
name|vppConfig
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjEntity
name|entity
range|:
name|entitiesForCurrentMode
argument_list|()
control|)
block|{
comment|// use client name, and if not specified use regular class name
name|String
name|fqnSubClass
init|=
name|entity
operator|.
name|getClientClassName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fqnSubClass
operator|==
literal|null
condition|)
block|{
name|fqnSubClass
operator|=
name|entity
operator|.
name|getClassName
argument_list|()
expr_stmt|;
block|}
comment|// use PersistentObject instead of CayenneDataObject as base ...
name|String
name|fqnBaseClass
init|=
operator|(
name|entity
operator|.
name|getClientSuperClassName
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|entity
operator|.
name|getClientSuperClassName
argument_list|()
else|:
name|PersistentObject
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|StringUtils
name|stringUtils
init|=
name|StringUtils
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|subClassName
init|=
name|stringUtils
operator|.
name|stripPackageName
argument_list|(
name|fqnSubClass
argument_list|)
decl_stmt|;
name|String
name|subPackageName
init|=
name|stringUtils
operator|.
name|stripClass
argument_list|(
name|fqnSubClass
argument_list|)
decl_stmt|;
name|String
name|superClassName
init|=
name|superPrefix
operator|+
name|stringUtils
operator|.
name|stripPackageName
argument_list|(
name|fqnSubClass
argument_list|)
decl_stmt|;
name|String
name|superPackageName
init|=
name|this
operator|.
name|superPkg
decl_stmt|;
name|String
name|fqnSuperClass
init|=
name|superPackageName
operator|+
literal|"."
operator|+
name|superClassName
decl_stmt|;
name|Writer
name|superOut
init|=
name|openWriter
argument_list|(
name|entity
argument_list|,
name|superPackageName
argument_list|,
name|superClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|superOut
operator|!=
literal|null
condition|)
block|{
name|superGenSetup
operator|.
name|generateClass
argument_list|(
name|superOut
argument_list|,
name|dataMap
argument_list|,
name|entity
argument_list|,
name|fqnBaseClass
argument_list|,
name|fqnSuperClass
argument_list|,
name|fqnSubClass
argument_list|)
expr_stmt|;
name|closeWriter
argument_list|(
name|superOut
argument_list|)
expr_stmt|;
block|}
name|Writer
name|mainOut
init|=
name|openWriter
argument_list|(
name|entity
argument_list|,
name|subPackageName
argument_list|,
name|subClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mainOut
operator|!=
literal|null
condition|)
block|{
name|mainGenSetup
operator|.
name|generateClass
argument_list|(
name|mainOut
argument_list|,
name|dataMap
argument_list|,
name|entity
argument_list|,
name|fqnBaseClass
argument_list|,
name|fqnSuperClass
argument_list|,
name|fqnSubClass
argument_list|)
expr_stmt|;
name|closeWriter
argument_list|(
name|mainOut
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Runs class generation. Produces a pair of Java classes for each ObjEntity in the      * map. This allows developers to use generated<b>subclass</b> for their custom      * code, while generated<b>superclass</b> will contain Cayenne code. Superclass will      * be generated in the same package, its class name will be derived from the class      * name by adding a<code>superPrefix</code>.      */
specifier|private
name|void
name|generateClassPairs_1_2
parameter_list|(
name|String
name|classTemplate
parameter_list|,
name|String
name|superTemplate
parameter_list|,
name|String
name|superPrefix
parameter_list|)
throws|throws
name|Exception
block|{
name|ClassGenerator
name|mainGenSetup
init|=
operator|new
name|ClassGenerator
argument_list|(
name|classTemplate
argument_list|,
name|versionString
argument_list|,
name|vppConfig
argument_list|)
decl_stmt|;
name|ClassGenerator
name|superGenSetup
init|=
operator|new
name|ClassGenerator
argument_list|(
name|superTemplate
argument_list|,
name|versionString
argument_list|,
name|vppConfig
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjEntity
name|ent
range|:
name|entitiesForCurrentMode
argument_list|()
control|)
block|{
name|String
name|fqnSubClass
init|=
name|ent
operator|.
name|getClassName
argument_list|()
decl_stmt|;
name|String
name|fqnBaseClass
init|=
operator|(
literal|null
operator|!=
name|ent
operator|.
name|getSuperClassName
argument_list|()
operator|)
condition|?
name|ent
operator|.
name|getSuperClassName
argument_list|()
else|:
name|CayenneDataObject
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|StringUtils
name|stringUtils
init|=
name|StringUtils
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|subClassName
init|=
name|stringUtils
operator|.
name|stripPackageName
argument_list|(
name|fqnSubClass
argument_list|)
decl_stmt|;
name|String
name|subPackageName
init|=
name|stringUtils
operator|.
name|stripClass
argument_list|(
name|fqnSubClass
argument_list|)
decl_stmt|;
name|String
name|superClassName
init|=
name|superPrefix
operator|+
name|stringUtils
operator|.
name|stripPackageName
argument_list|(
name|fqnSubClass
argument_list|)
decl_stmt|;
name|String
name|superPackageName
init|=
name|this
operator|.
name|superPkg
decl_stmt|;
name|String
name|fqnSuperClass
init|=
name|superPackageName
operator|+
literal|"."
operator|+
name|superClassName
decl_stmt|;
name|Writer
name|superOut
init|=
name|openWriter
argument_list|(
name|ent
argument_list|,
name|superPackageName
argument_list|,
name|superClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|superOut
operator|!=
literal|null
condition|)
block|{
name|superGenSetup
operator|.
name|generateClass
argument_list|(
name|superOut
argument_list|,
name|dataMap
argument_list|,
name|ent
argument_list|,
name|fqnBaseClass
argument_list|,
name|fqnSuperClass
argument_list|,
name|fqnSubClass
argument_list|)
expr_stmt|;
name|closeWriter
argument_list|(
name|superOut
argument_list|)
expr_stmt|;
block|}
name|Writer
name|mainOut
init|=
name|openWriter
argument_list|(
name|ent
argument_list|,
name|subPackageName
argument_list|,
name|subClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mainOut
operator|!=
literal|null
condition|)
block|{
name|mainGenSetup
operator|.
name|generateClass
argument_list|(
name|mainOut
argument_list|,
name|dataMap
argument_list|,
name|ent
argument_list|,
name|fqnBaseClass
argument_list|,
name|fqnSuperClass
argument_list|,
name|fqnSubClass
argument_list|)
expr_stmt|;
name|closeWriter
argument_list|(
name|mainOut
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Runs class generation. Produces a single Java class for each ObjEntity in the map.      * Uses default Cayenne templates for classes.      *       * @deprecated since 3.0 - unused.      */
specifier|public
name|void
name|generateSingleClasses
parameter_list|()
throws|throws
name|Exception
block|{
name|generateSingleClasses
argument_list|(
name|defaultSingleClassTemplate
argument_list|()
argument_list|,
name|SUPERCLASS_PREFIX
argument_list|)
expr_stmt|;
block|}
comment|/**      * Runs class generation. Produces a single Java class for each ObjEntity in the map.      */
specifier|private
name|void
name|generateSingleClasses_1_1
parameter_list|(
name|String
name|classTemplate
parameter_list|)
throws|throws
name|Exception
block|{
name|ClassGenerator
name|gen
init|=
operator|new
name|ClassGenerator
argument_list|(
name|classTemplate
argument_list|,
name|versionString
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjEntity
name|ent
range|:
name|entitiesForCurrentMode
argument_list|()
control|)
block|{
name|initClassGenerator_1_1
argument_list|(
name|gen
operator|.
name|getClassGenerationInfo
argument_list|()
argument_list|,
name|ent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Writer
name|out
init|=
name|openWriter
argument_list|(
name|ent
argument_list|,
name|gen
operator|.
name|getClassGenerationInfo
argument_list|()
operator|.
name|getPackageName
argument_list|()
argument_list|,
name|gen
operator|.
name|getClassGenerationInfo
argument_list|()
operator|.
name|getClassName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|gen
operator|.
name|generateClass
argument_list|(
name|out
argument_list|,
name|ent
argument_list|)
expr_stmt|;
name|closeWriter
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Runs class generation. Produces a single Java class for each ObjEntity in the map.      */
specifier|private
name|void
name|generateSingleClasses_1_2
parameter_list|(
name|String
name|classTemplate
parameter_list|,
name|String
name|superPrefix
parameter_list|)
throws|throws
name|Exception
block|{
name|ClassGenerator
name|gen
init|=
operator|new
name|ClassGenerator
argument_list|(
name|classTemplate
argument_list|,
name|versionString
argument_list|,
name|vppConfig
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjEntity
name|ent
range|:
name|entitiesForCurrentMode
argument_list|()
control|)
block|{
name|String
name|fqnSubClass
init|=
name|ent
operator|.
name|getClassName
argument_list|()
decl_stmt|;
name|String
name|fqnBaseClass
init|=
operator|(
literal|null
operator|!=
name|ent
operator|.
name|getSuperClassName
argument_list|()
operator|)
condition|?
name|ent
operator|.
name|getSuperClassName
argument_list|()
else|:
name|CayenneDataObject
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|StringUtils
name|stringUtils
init|=
name|StringUtils
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|subClassName
init|=
name|stringUtils
operator|.
name|stripPackageName
argument_list|(
name|fqnSubClass
argument_list|)
decl_stmt|;
name|String
name|subPackageName
init|=
name|stringUtils
operator|.
name|stripClass
argument_list|(
name|fqnSubClass
argument_list|)
decl_stmt|;
name|String
name|superClassName
init|=
name|superPrefix
operator|+
name|stringUtils
operator|.
name|stripPackageName
argument_list|(
name|fqnSubClass
argument_list|)
decl_stmt|;
name|String
name|superPackageName
init|=
name|this
operator|.
name|superPkg
decl_stmt|;
name|String
name|fqnSuperClass
init|=
name|superPackageName
operator|+
literal|"."
operator|+
name|superClassName
decl_stmt|;
name|Writer
name|out
init|=
name|openWriter
argument_list|(
name|ent
argument_list|,
name|subPackageName
argument_list|,
name|subClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|gen
operator|.
name|generateClass
argument_list|(
name|out
argument_list|,
name|dataMap
argument_list|,
name|ent
argument_list|,
name|fqnBaseClass
argument_list|,
name|fqnSuperClass
argument_list|,
name|fqnSubClass
argument_list|)
expr_stmt|;
name|closeWriter
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|entitiesForCurrentMode
parameter_list|()
block|{
comment|// Iterate only once if this is datamap mode
if|if
condition|(
operator|!
name|MODE_ENTITY
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
operator|&&
operator|!
name|objEntities
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|objEntities
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|objEntities
return|;
block|}
block|}
comment|/**      * Runs class generation. Produces a single Java class for each ObjEntity in the map.      */
specifier|public
name|void
name|generateSingleClasses
parameter_list|(
name|String
name|classTemplate
parameter_list|,
name|String
name|superPrefix
parameter_list|)
throws|throws
name|Exception
block|{
comment|// note - client templates ignore version and automatically switch to 1.2
if|if
condition|(
name|client
condition|)
block|{
name|generateSingleClasses_1_2
argument_list|(
name|classTemplate
argument_list|,
name|superPrefix
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|VERSION_1_1
operator|.
name|equals
argument_list|(
name|versionString
argument_list|)
condition|)
block|{
name|generateSingleClasses_1_1
argument_list|(
name|classTemplate
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|VERSION_1_2
operator|.
name|equals
argument_list|(
name|versionString
argument_list|)
condition|)
block|{
name|generateSingleClasses_1_2
argument_list|(
name|classTemplate
argument_list|,
name|superPrefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Illegal Version in generateClassPairs: "
operator|+
name|versionString
argument_list|)
throw|;
block|}
block|}
comment|/** Initializes ClassGenerationInfo with class name and package of a generated class. */
specifier|protected
name|void
name|initClassGenerator_1_1
parameter_list|(
name|ClassGenerationInfo
name|gen
parameter_list|,
name|ObjEntity
name|entity
parameter_list|,
name|boolean
name|superclass
parameter_list|)
block|{
comment|// figure out generator properties
name|String
name|fullClassName
init|=
name|entity
operator|.
name|getClassName
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|fullClassName
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|String
name|pkg
init|=
literal|null
decl_stmt|;
name|String
name|spkg
init|=
literal|null
decl_stmt|;
name|String
name|cname
init|=
literal|null
decl_stmt|;
comment|// dot in first or last position is invalid
if|if
condition|(
name|i
operator|==
literal|0
operator|||
name|i
operator|+
literal|1
operator|==
name|fullClassName
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Invalid class mapping: "
operator|+
name|fullClassName
argument_list|)
throw|;
block|}
if|else if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
name|pkg
operator|=
operator|(
name|superclass
operator|)
condition|?
name|superPkg
else|:
literal|null
expr_stmt|;
name|spkg
operator|=
operator|(
name|superclass
operator|)
condition|?
literal|null
else|:
name|superPkg
expr_stmt|;
name|cname
operator|=
name|fullClassName
expr_stmt|;
block|}
else|else
block|{
name|cname
operator|=
name|fullClassName
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|pkg
operator|=
operator|(
name|superclass
operator|&&
name|superPkg
operator|!=
literal|null
operator|)
condition|?
name|superPkg
else|:
name|fullClassName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|spkg
operator|=
operator|(
operator|!
name|superclass
operator|&&
name|superPkg
operator|!=
literal|null
operator|&&
operator|!
name|pkg
operator|.
name|equals
argument_list|(
name|superPkg
argument_list|)
operator|)
condition|?
name|superPkg
else|:
literal|null
expr_stmt|;
block|}
comment|// init generator
name|gen
operator|.
name|setPackageName
argument_list|(
name|pkg
argument_list|)
expr_stmt|;
name|gen
operator|.
name|setClassName
argument_list|(
name|cname
argument_list|)
expr_stmt|;
if|if
condition|(
name|entity
operator|.
name|getSuperClassName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|gen
operator|.
name|setSuperClassName
argument_list|(
name|entity
operator|.
name|getSuperClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gen
operator|.
name|setSuperClassName
argument_list|(
name|CayenneDataObject
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|gen
operator|.
name|setSuperPackageName
argument_list|(
name|spkg
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns "superPkg" property value - a name of a superclass package that should be      * used for all generated superclasses.      */
specifier|public
name|String
name|getSuperPkg
parameter_list|()
block|{
return|return
name|superPkg
return|;
block|}
comment|/**      * Sets "superPkg" property value.      */
specifier|public
name|void
name|setSuperPkg
parameter_list|(
name|String
name|superPkg
parameter_list|)
block|{
name|this
operator|.
name|superPkg
operator|=
name|superPkg
expr_stmt|;
block|}
comment|/**      * Returns whether a default client object template will be used.      *       * @since 1.2      */
specifier|public
name|boolean
name|isClient
parameter_list|()
block|{
return|return
name|client
return|;
block|}
comment|/**      * Sets whether a default client object template should be used.      *       * @since 1.2      */
specifier|public
name|void
name|setClient
parameter_list|(
name|boolean
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
comment|/**      * @return Returns the dataMap.      */
specifier|public
name|DataMap
name|getDataMap
parameter_list|()
block|{
return|return
name|dataMap
return|;
block|}
comment|/**      * @param dataMap The dataMap to set.      */
specifier|public
name|void
name|setDataMap
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
name|this
operator|.
name|dataMap
operator|=
name|dataMap
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ObjEntity
argument_list|>
name|getObjEntities
parameter_list|()
block|{
return|return
name|objEntities
return|;
block|}
comment|/**      * Initializes internal ObjEntities list. This method creates a copy of the provided      * list to allow its independent modification and also filters out entities that do      * not require class generation.      */
specifier|public
name|void
name|setObjEntities
parameter_list|(
name|List
argument_list|<
name|ObjEntity
argument_list|>
name|objEntities
parameter_list|)
block|{
name|this
operator|.
name|objEntities
operator|=
name|objEntities
operator|!=
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|ObjEntity
argument_list|>
argument_list|(
name|objEntities
argument_list|)
else|:
operator|new
name|ArrayList
argument_list|<
name|ObjEntity
argument_list|>
argument_list|()
expr_stmt|;
comment|// remove generic entities...
name|Iterator
argument_list|<
name|ObjEntity
argument_list|>
name|it
init|=
name|objEntities
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ObjEntity
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|isGeneric
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @return Returns the versionString.      */
specifier|public
name|String
name|getVersionString
parameter_list|()
block|{
return|return
name|versionString
return|;
block|}
comment|/**      * @param versionString The versionString to set.      */
specifier|public
name|void
name|setVersionString
parameter_list|(
name|String
name|versionString
parameter_list|)
block|{
if|if
condition|(
operator|(
literal|false
operator|==
name|VERSION_1_1
operator|.
name|equals
argument_list|(
name|versionString
argument_list|)
operator|)
operator|&&
operator|(
literal|false
operator|==
name|VERSION_1_2
operator|.
name|equals
argument_list|(
name|versionString
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"'version' must be '"
operator|+
name|VERSION_1_1
operator|+
literal|"' or '"
operator|+
name|VERSION_1_2
operator|+
literal|"', but was '"
operator|+
name|versionString
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|this
operator|.
name|versionString
operator|=
name|versionString
expr_stmt|;
block|}
comment|/**      * @return Returns the vppConfig.      */
specifier|public
name|VPPConfig
name|getVppConfig
parameter_list|()
block|{
return|return
name|vppConfig
return|;
block|}
comment|/**      * @param vppConfig The vppConfig to set.      */
specifier|public
name|void
name|setVppConfig
parameter_list|(
name|VPPConfig
name|vppConfig
parameter_list|)
block|{
name|this
operator|.
name|vppConfig
operator|=
name|vppConfig
expr_stmt|;
block|}
comment|/**      * @param mode use "entity" for per-entity generation and "datamap" for per-datamap      *            generation.      */
specifier|public
name|void
name|setMode
parameter_list|(
name|String
name|mode
parameter_list|)
block|{
if|if
condition|(
operator|(
literal|false
operator|==
name|MODE_ENTITY
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
operator|)
operator|&&
operator|(
literal|false
operator|==
name|MODE_DATAMAP
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"'mode' must be '"
operator|+
name|MODE_ENTITY
operator|+
literal|"' or '"
operator|+
name|MODE_DATAMAP
operator|+
literal|"', but was '"
operator|+
name|mode
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
block|}
block|}
end_class

end_unit

