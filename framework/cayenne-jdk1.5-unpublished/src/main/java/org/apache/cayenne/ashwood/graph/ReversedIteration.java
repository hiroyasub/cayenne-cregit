begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_comment
comment|/* ====================================================================  *  * Copyright(c) 2003, Andriy Shapochka  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above  *    copyright notice, this list of conditions and the following  *    disclaimer.  *  * 2. Redistributions in binary form must reproduce the above  *    copyright notice, this list of conditions and the following  *    disclaimer in the documentation and/or other materials  *    provided with the distribution.  *  * 3. Neither the name of the ASHWOOD nor the  *    names of its contributors may be used to endorse or  *    promote products derived from this software without  *    specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * ====================================================================  *  * This software consists of voluntary contributions made by  * individuals on behalf of the ASHWOOD Project and was originally  * created by Andriy Shapochka.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ashwood
operator|.
name|graph
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_class
specifier|public
class|class
name|ReversedIteration
implements|implements
name|DigraphIteration
implements|,
name|Serializable
block|{
specifier|private
name|DigraphIteration
name|wrappedIteration
decl_stmt|;
specifier|public
name|ReversedIteration
parameter_list|(
name|DigraphIteration
name|wrappedIteration
parameter_list|)
block|{
name|this
operator|.
name|wrappedIteration
operator|=
name|wrappedIteration
expr_stmt|;
block|}
specifier|public
name|Iterator
name|vertexIterator
parameter_list|()
block|{
return|return
name|wrappedIteration
operator|.
name|vertexIterator
argument_list|()
return|;
block|}
specifier|public
name|ArcIterator
name|arcIterator
parameter_list|()
block|{
return|return
operator|new
name|ReversedArcIterator
argument_list|(
name|wrappedIteration
operator|.
name|arcIterator
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|ArcIterator
name|outgoingIterator
parameter_list|(
name|Object
name|vertex
parameter_list|)
block|{
return|return
operator|new
name|ReversedArcIterator
argument_list|(
name|wrappedIteration
operator|.
name|incomingIterator
argument_list|(
name|vertex
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|ArcIterator
name|incomingIterator
parameter_list|(
name|Object
name|vertex
parameter_list|)
block|{
return|return
operator|new
name|ReversedArcIterator
argument_list|(
name|wrappedIteration
operator|.
name|outgoingIterator
argument_list|(
name|vertex
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|ReversedArcIterator
implements|implements
name|ArcIterator
block|{
specifier|private
name|ArcIterator
name|wrappedIterator
decl_stmt|;
specifier|public
name|ReversedArcIterator
parameter_list|(
name|ArcIterator
name|wrappedIterator
parameter_list|)
block|{
name|ReversedArcIterator
operator|.
name|this
operator|.
name|wrappedIterator
operator|=
name|wrappedIterator
expr_stmt|;
block|}
specifier|public
name|Object
name|getOrigin
parameter_list|()
block|{
return|return
name|wrappedIterator
operator|.
name|getDestination
argument_list|()
return|;
block|}
specifier|public
name|Object
name|getDestination
parameter_list|()
block|{
return|return
name|wrappedIterator
operator|.
name|getOrigin
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|wrappedIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
return|return
name|wrappedIterator
operator|.
name|next
argument_list|()
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|wrappedIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

