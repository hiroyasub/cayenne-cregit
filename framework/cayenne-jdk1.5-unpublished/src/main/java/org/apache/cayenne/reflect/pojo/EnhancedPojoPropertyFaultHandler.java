begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|pojo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|Accessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|FieldAccessor
import|;
end_import

begin_comment
comment|/**  * Handles property fault resolving.  *   * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
class|class
name|EnhancedPojoPropertyFaultHandler
block|{
specifier|static
specifier|final
name|String
name|FAULT_FIELD_PREFIX
init|=
literal|"$cay_faultResolved_"
decl_stmt|;
specifier|private
name|Accessor
name|faultResolvedFlagAccessor
decl_stmt|;
name|EnhancedPojoPropertyFaultHandler
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|objectClass
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|this
operator|.
name|faultResolvedFlagAccessor
operator|=
operator|new
name|FieldAccessor
argument_list|(
name|objectClass
argument_list|,
name|FAULT_FIELD_PREFIX
operator|+
name|propertyName
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isFaultProperty
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
return|return
operator|!
operator|(
operator|(
name|Boolean
operator|)
name|faultResolvedFlagAccessor
operator|.
name|getValue
argument_list|(
name|object
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
name|void
name|setFaultProperty
parameter_list|(
name|Object
name|object
parameter_list|,
name|boolean
name|flag
parameter_list|)
block|{
comment|// note that we need to negate "fault" property value to get "fault resolved"
comment|// value stored in the object.
name|faultResolvedFlagAccessor
operator|.
name|setValue
argument_list|(
name|object
argument_list|,
name|flag
condition|?
name|Boolean
operator|.
name|FALSE
else|:
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

