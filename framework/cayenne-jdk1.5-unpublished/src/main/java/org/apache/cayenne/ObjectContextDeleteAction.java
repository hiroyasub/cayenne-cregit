begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DeleteRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ArcProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|AttributeProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ToManyProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ToOneProperty
import|;
end_import

begin_comment
comment|/**  * A CayenneContext helper that processes object deletion.  *   * @since 1.2  */
end_comment

begin_class
class|class
name|ObjectContextDeleteAction
block|{
specifier|private
name|ObjectContext
name|context
decl_stmt|;
name|ObjectContextDeleteAction
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
name|boolean
name|performDelete
parameter_list|(
name|Persistent
name|object
parameter_list|)
throws|throws
name|DeleteDenyException
block|{
name|int
name|oldState
init|=
name|object
operator|.
name|getPersistenceState
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldState
operator|==
name|PersistenceState
operator|.
name|TRANSIENT
operator|||
name|oldState
operator|==
name|PersistenceState
operator|.
name|DELETED
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|object
operator|.
name|getObjectContext
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Attempt to delete unregistered non-TRANSIENT object: "
operator|+
name|object
argument_list|)
throw|;
block|}
if|if
condition|(
name|object
operator|.
name|getObjectContext
argument_list|()
operator|!=
name|context
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Attempt to delete object regsitered in a different ObjectContext. Object: "
operator|+
name|object
operator|+
literal|", context: "
operator|+
name|context
argument_list|)
throw|;
block|}
if|if
condition|(
name|oldState
operator|==
name|PersistenceState
operator|.
name|NEW
condition|)
block|{
name|deleteNew
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deletePersistent
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|deleteNew
parameter_list|(
name|Persistent
name|object
parameter_list|)
block|{
name|object
operator|.
name|setPersistenceState
argument_list|(
name|PersistenceState
operator|.
name|TRANSIENT
argument_list|)
expr_stmt|;
name|processDeleteRules
argument_list|(
name|object
argument_list|,
name|PersistenceState
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|context
operator|.
name|getGraphManager
argument_list|()
operator|.
name|unregisterNode
argument_list|(
name|object
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deletePersistent
parameter_list|(
name|Persistent
name|object
parameter_list|)
block|{
name|int
name|oldState
init|=
name|object
operator|.
name|getPersistenceState
argument_list|()
decl_stmt|;
name|object
operator|.
name|setPersistenceState
argument_list|(
name|PersistenceState
operator|.
name|DELETED
argument_list|)
expr_stmt|;
name|processDeleteRules
argument_list|(
name|object
argument_list|,
name|oldState
argument_list|)
expr_stmt|;
name|context
operator|.
name|getGraphManager
argument_list|()
operator|.
name|nodeRemoved
argument_list|(
name|object
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processDeleteRules
parameter_list|(
specifier|final
name|Persistent
name|object
parameter_list|,
specifier|final
name|int
name|oldState
parameter_list|)
block|{
name|String
name|entityName
init|=
name|object
operator|.
name|getObjectId
argument_list|()
operator|.
name|getEntityName
argument_list|()
decl_stmt|;
specifier|final
name|ObjEntity
name|entity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getObjEntity
argument_list|(
name|entityName
argument_list|)
decl_stmt|;
name|ClassDescriptor
name|descriptor
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getClassDescriptor
argument_list|(
name|entityName
argument_list|)
decl_stmt|;
name|descriptor
operator|.
name|visitProperties
argument_list|(
operator|new
name|PropertyVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|visitToMany
parameter_list|(
name|ToManyProperty
name|property
parameter_list|)
block|{
name|ObjRelationship
name|relationship
init|=
operator|(
name|ObjRelationship
operator|)
name|entity
operator|.
name|getRelationship
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|processRules
argument_list|(
name|object
argument_list|,
name|property
argument_list|,
name|relationship
operator|.
name|getDeleteRule
argument_list|()
argument_list|,
name|oldState
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitToOne
parameter_list|(
name|ToOneProperty
name|property
parameter_list|)
block|{
name|ObjRelationship
name|relationship
init|=
operator|(
name|ObjRelationship
operator|)
name|entity
operator|.
name|getRelationship
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|processRules
argument_list|(
name|object
argument_list|,
name|property
argument_list|,
name|relationship
operator|.
name|getDeleteRule
argument_list|()
argument_list|,
name|oldState
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitAttribute
parameter_list|(
name|AttributeProperty
name|property
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processRules
parameter_list|(
name|Persistent
name|object
parameter_list|,
name|ArcProperty
name|property
parameter_list|,
name|int
name|deleteRule
parameter_list|,
name|int
name|oldState
parameter_list|)
block|{
if|if
condition|(
name|deleteRule
operator|==
name|DeleteRule
operator|.
name|NO_ACTION
condition|)
block|{
return|return;
block|}
name|Collection
argument_list|<
name|?
argument_list|>
name|relatedObjects
init|=
name|relatedObjects
argument_list|(
name|object
argument_list|,
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|relatedObjects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|deleteRule
condition|)
block|{
case|case
name|DeleteRule
operator|.
name|DENY
case|:
name|object
operator|.
name|setPersistenceState
argument_list|(
name|oldState
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|relatedObjects
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
literal|"1 related object"
else|:
name|relatedObjects
operator|.
name|size
argument_list|()
operator|+
literal|" related objects"
decl_stmt|;
throw|throw
operator|new
name|DeleteDenyException
argument_list|(
name|object
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|,
name|message
argument_list|)
throw|;
case|case
name|DeleteRule
operator|.
name|NULLIFY
case|:
name|ArcProperty
name|reverseArc
init|=
name|property
operator|.
name|getComplimentaryReverseArc
argument_list|()
decl_stmt|;
if|if
condition|(
name|reverseArc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|reverseArc
operator|instanceof
name|ToManyProperty
condition|)
block|{
for|for
control|(
name|Object
name|relatedObject
range|:
name|relatedObjects
control|)
block|{
operator|(
operator|(
name|ToManyProperty
operator|)
name|reverseArc
operator|)
operator|.
name|removeTarget
argument_list|(
name|relatedObject
argument_list|,
name|object
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Object
name|relatedObject
range|:
name|relatedObjects
control|)
block|{
operator|(
operator|(
name|ToOneProperty
operator|)
name|reverseArc
operator|)
operator|.
name|setTarget
argument_list|(
name|relatedObject
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|DeleteRule
operator|.
name|CASCADE
case|:
name|Iterator
argument_list|<
name|?
argument_list|>
name|iterator
init|=
name|relatedObjects
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Persistent
name|relatedObject
init|=
operator|(
name|Persistent
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// this action object is stateless, so we can use 'performDelete'
comment|// recursively.
name|performDelete
argument_list|(
name|relatedObject
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|object
operator|.
name|setPersistenceState
argument_list|(
name|oldState
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Invalid delete rule: "
operator|+
name|deleteRule
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Collection
argument_list|<
name|?
argument_list|>
name|relatedObjects
parameter_list|(
name|Object
name|object
parameter_list|,
name|Property
name|property
parameter_list|)
block|{
name|Object
name|related
init|=
name|property
operator|.
name|readProperty
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|related
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
comment|// return collections by copy, to allow removal of objects from the underlying
comment|// relationship inside the iterator
if|else if
condition|(
name|property
operator|instanceof
name|ToManyProperty
condition|)
block|{
name|Collection
argument_list|<
name|?
argument_list|>
name|relatedCollection
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|related
decl_stmt|;
return|return
name|relatedCollection
operator|.
name|isEmpty
argument_list|()
condition|?
name|Collections
operator|.
name|EMPTY_LIST
else|:
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|relatedCollection
argument_list|)
return|;
block|}
comment|// TODO: andrus 11/21/2007 - ToManyMapProperty check
else|else
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|related
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

