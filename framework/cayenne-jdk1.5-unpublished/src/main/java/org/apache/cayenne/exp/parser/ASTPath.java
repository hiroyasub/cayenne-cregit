begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_comment
comment|/**  * Generic path expression.  *   * @author Andrus Adamchik  * @since 1.1  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ASTPath
extends|extends
name|SimpleNode
block|{
specifier|protected
name|String
name|path
decl_stmt|;
name|ASTPath
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|super
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getOperandCount
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
specifier|public
name|Object
name|getOperand
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|==
literal|0
condition|)
block|{
return|return
name|path
return|;
block|}
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
name|index
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setOperand
parameter_list|(
name|int
name|index
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|index
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|(
name|index
argument_list|)
throw|;
block|}
name|setPath
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setPath
parameter_list|(
name|Object
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|(
name|path
operator|!=
literal|null
operator|)
condition|?
name|path
operator|.
name|toString
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
specifier|protected
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
comment|/**      * Helper method to evaluate path expression with Cayenne Entity.      */
specifier|protected
name|Object
name|evaluateEntityNode
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
name|Iterator
name|path
init|=
name|entity
operator|.
name|resolvePathComponents
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|Object
name|next
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|path
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|next
operator|=
name|path
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|next
return|;
block|}
specifier|protected
name|String
name|getExpressionOperator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"No operator for '"
operator|+
name|ExpressionParserTreeConstants
operator|.
name|jjtNodeName
index|[
name|id
index|]
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

