begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * A synchronized list that serves as a container of DataObjects. It is returned when a  * paged query is performed by DataContext. On creation, only the first "page" is fully  * resolved, for the rest of the objects only their ObjectIds are read. Pages following  * the first page are resolved on demand only. On access to an element, the list would  * ensure that this element as well as all its siblings on the same page are fully  * resolved.  *<p>  * The list can hold DataRows or DataObjects. Attempts to add any other object types will  * result in an exception.  *</p>  *<p>  * Performance note: certain operations like<code>toArray</code> would trigger full list  * fetch.  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|IncrementalFaultList
parameter_list|<
name|E
parameter_list|>
implements|implements
name|List
argument_list|<
name|E
argument_list|>
block|{
specifier|protected
name|int
name|pageSize
decl_stmt|;
specifier|protected
name|List
name|elements
decl_stmt|;
specifier|protected
name|DataContext
name|dataContext
decl_stmt|;
specifier|protected
name|ObjEntity
name|rootEntity
decl_stmt|;
specifier|protected
name|SelectQuery
name|internalQuery
decl_stmt|;
specifier|protected
name|int
name|unfetchedObjects
decl_stmt|;
comment|/**      * Stores a hint allowing to distinguish data rows from unfetched ids when the query      * fetches data rows.      */
specifier|protected
name|int
name|rowWidth
decl_stmt|;
specifier|private
name|IncrementalListHelper
name|helper
decl_stmt|;
comment|/**      * Defines the upper limit on the size of fetches. This is needed to avoid where      * clause size limitations.      */
specifier|protected
name|int
name|maxFetchSize
init|=
literal|10000
decl_stmt|;
comment|// Don't confuse this with the JDBC ResultSet fetch size setting - this controls
comment|// the where clause generation that is necessary to fetch specific records a page
comment|// at a time. Some JDBC Drivers/Databases may have limits on statement length
comment|// or complexity of the where clause - e.g., PostgreSQL having a default limit of
comment|// 10,000 nested expressions.
comment|/**      * Creates a new list copying settings from another list. Elements WILL NOT be copied      * or fetched.      *       * @deprecated since 3.0 - unused      */
specifier|public
name|IncrementalFaultList
parameter_list|(
name|IncrementalFaultList
argument_list|<
name|E
argument_list|>
name|list
parameter_list|)
block|{
name|this
operator|.
name|pageSize
operator|=
name|list
operator|.
name|pageSize
expr_stmt|;
name|this
operator|.
name|internalQuery
operator|=
name|list
operator|.
name|internalQuery
expr_stmt|;
name|this
operator|.
name|dataContext
operator|=
name|list
operator|.
name|dataContext
expr_stmt|;
name|this
operator|.
name|rootEntity
operator|=
name|list
operator|.
name|rootEntity
expr_stmt|;
name|this
operator|.
name|maxFetchSize
operator|=
name|list
operator|.
name|maxFetchSize
expr_stmt|;
name|this
operator|.
name|rowWidth
operator|=
name|list
operator|.
name|rowWidth
expr_stmt|;
name|this
operator|.
name|helper
operator|=
name|list
operator|.
name|helper
expr_stmt|;
name|elements
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new IncrementalFaultList using a given DataContext and query.      *       * @param dataContext DataContext used by IncrementalFaultList to fill itself with      *            objects.      * @param query Main query used to retrieve data. Must have "pageSize" property set to      *            a value greater than zero.      */
specifier|public
name|IncrementalFaultList
parameter_list|(
name|DataContext
name|dataContext
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
name|QueryMetadata
name|metadata
init|=
name|query
operator|.
name|getMetaData
argument_list|(
name|dataContext
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|.
name|getPageSize
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Not a paginated query; page size: "
operator|+
name|metadata
operator|.
name|getPageSize
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|dataContext
operator|=
name|dataContext
expr_stmt|;
name|this
operator|.
name|pageSize
operator|=
name|metadata
operator|.
name|getPageSize
argument_list|()
expr_stmt|;
name|this
operator|.
name|rootEntity
operator|=
name|metadata
operator|.
name|getObjEntity
argument_list|()
expr_stmt|;
if|if
condition|(
name|rootEntity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Pagination is not supported for queries not rooted in an ObjEntity"
argument_list|)
throw|;
block|}
comment|// create an internal query, it is a partial replica of
comment|// the original query and will serve as a value holder for
comment|// various parameters
name|this
operator|.
name|internalQuery
operator|=
operator|new
name|SelectQuery
argument_list|(
name|rootEntity
argument_list|)
expr_stmt|;
name|this
operator|.
name|internalQuery
operator|.
name|setFetchingDataRows
argument_list|(
name|metadata
operator|.
name|isFetchingDataRows
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|internalQuery
operator|.
name|setPrefetchTree
argument_list|(
name|metadata
operator|.
name|getPrefetchTree
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|helper
operator|=
name|createHelper
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|boolean
name|resolvesFirstPage
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|metadata
operator|.
name|isFetchingDataRows
argument_list|()
operator|&&
operator|(
name|query
operator|instanceof
name|SelectQuery
operator|)
condition|)
block|{
name|SelectQuery
name|select
init|=
operator|(
name|SelectQuery
operator|)
name|query
decl_stmt|;
comment|// optimize SelectQuery:
comment|// * just select ID columns - this gives a 5-10x speedup
comment|// * strip prefetches as they blow the iterated result, and are actually not
comment|// needed
name|SelectQuery
name|clone
init|=
name|select
operator|.
name|queryWithParameters
argument_list|(
name|Collections
operator|.
name|EMPTY_MAP
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|clone
operator|.
name|clearPrefetches
argument_list|()
expr_stmt|;
comment|// I guess this check is redundant, as custom attributes warrant data rows
if|if
condition|(
operator|!
name|select
operator|.
name|isFetchingCustomAttributes
argument_list|()
condition|)
block|{
for|for
control|(
name|DbAttribute
name|attribute
range|:
name|rootEntity
operator|.
name|getDbEntity
argument_list|()
operator|.
name|getPrimaryKeys
argument_list|()
control|)
block|{
name|clone
operator|.
name|addCustomDbAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|query
operator|=
name|clone
expr_stmt|;
name|resolvesFirstPage
operator|=
literal|false
expr_stmt|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|elementsUnsynced
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|fillIn
argument_list|(
name|query
argument_list|,
name|elementsUnsynced
argument_list|,
name|resolvesFirstPage
argument_list|)
expr_stmt|;
name|this
operator|.
name|elements
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
name|elementsUnsynced
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since 3.0      */
name|IncrementalListHelper
name|createHelper
parameter_list|(
name|QueryMetadata
name|metadata
parameter_list|)
block|{
if|if
condition|(
name|metadata
operator|.
name|isFetchingDataRows
argument_list|()
condition|)
block|{
return|return
operator|new
name|DataRowListHelper
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|PersistentListHelper
argument_list|()
return|;
block|}
block|}
comment|/**      * @since 1.2      */
name|SelectQuery
name|getInternalQuery
parameter_list|()
block|{
return|return
name|internalQuery
return|;
block|}
comment|/**      * Performs initialization of the internal list of objects. Only the first page is      * fully resolved. For the rest of the list, only ObjectIds are read.      *       * @deprecated since 3.0 this method is not called and is deprecated in favor of      *             {@link #fillIn(Query, List, boolean)}, as this method performed      *             unneeded synchronization.      * @since 1.0.6      */
specifier|protected
name|void
name|fillIn
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
synchronized|synchronized
init|(
name|elements
init|)
block|{
name|fillIn
argument_list|(
name|query
argument_list|,
name|elements
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Performs initialization of the list of objects. Only the first page is fully      * resolved. For the rest of the list, only ObjectIds are read.      *       * @since 3.0      */
specifier|protected
name|void
name|fillIn
parameter_list|(
name|Query
name|query
parameter_list|,
name|List
name|elementsList
parameter_list|,
name|boolean
name|resolvesFirstPage
parameter_list|)
block|{
name|QueryMetadata
name|info
init|=
name|query
operator|.
name|getMetaData
argument_list|(
name|dataContext
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|fetchesDataRows
init|=
name|internalQuery
operator|.
name|isFetchingDataRows
argument_list|()
decl_stmt|;
comment|// start fresh
name|elementsList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rowWidth
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|int
name|lastResolved
init|=
literal|0
decl_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ResultIterator
name|it
init|=
name|dataContext
operator|.
name|performIteratedQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
try|try
block|{
name|rowWidth
operator|=
name|it
operator|.
name|getResultSetWidth
argument_list|()
expr_stmt|;
comment|// resolve first page if we can
if|if
condition|(
name|resolvesFirstPage
condition|)
block|{
comment|// read first page completely, the rest as ObjectIds
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pageSize
operator|&&
name|it
operator|.
name|hasNextRow
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|elementsList
operator|.
name|add
argument_list|(
name|it
operator|.
name|nextRow
argument_list|()
argument_list|)
expr_stmt|;
name|lastResolved
operator|++
expr_stmt|;
block|}
comment|// defer DataRows -> Objects conversion till we are completely done.
block|}
comment|// continue reading ids
while|while
condition|(
name|it
operator|.
name|hasNextRow
argument_list|()
condition|)
block|{
name|elementsList
operator|.
name|add
argument_list|(
name|it
operator|.
name|nextId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QueryLogger
operator|.
name|logSelectCount
argument_list|(
name|elementsList
operator|.
name|size
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|it
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// fill in the first page AFTER the iterator was closed, otherwise we may
comment|// cause an (unobvious) deadlock due to connection pool exhaustion
if|if
condition|(
operator|!
name|fetchesDataRows
operator|&&
name|lastResolved
operator|>
literal|0
condition|)
block|{
name|List
name|objects
init|=
name|dataContext
operator|.
name|objectsFromDataRows
argument_list|(
name|info
operator|.
name|getClassDescriptor
argument_list|()
argument_list|,
name|elementsList
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|lastResolved
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lastResolved
condition|;
name|i
operator|++
control|)
block|{
name|elementsList
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|objects
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|CayenneException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error performing query."
argument_list|,
name|Util
operator|.
name|unwindException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
name|unfetchedObjects
operator|=
operator|(
name|resolvesFirstPage
operator|)
condition|?
name|elementsList
operator|.
name|size
argument_list|()
operator|-
name|pageSize
else|:
name|elementsList
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
comment|/**      * Will resolve all unread objects.      */
specifier|public
name|void
name|resolveAll
parameter_list|()
block|{
name|resolveInterval
argument_list|(
literal|0
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks that an object is of the same type as the rest of objects (DataObject or      * DataRows depending on the query type).      */
specifier|private
name|void
name|validateListObject
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
comment|// I am not sure if such a check makes sense???
if|if
condition|(
name|internalQuery
operator|.
name|isFetchingDataRows
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|object
operator|instanceof
name|Map
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only Map objects can be stored in this list."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
operator|(
name|object
operator|instanceof
name|Persistent
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only DataObjects can be stored in this list."
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Resolves a sublist of objects starting at<code>fromIndex</code> up to but not      * including<code>toIndex</code>. Internally performs bound checking and trims      * indexes accordingly.      */
specifier|protected
name|void
name|resolveInterval
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
if|if
condition|(
name|fromIndex
operator|>=
name|toIndex
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|elements
init|)
block|{
if|if
condition|(
name|elements
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|// perform bound checking
if|if
condition|(
name|fromIndex
operator|<
literal|0
condition|)
block|{
name|fromIndex
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|toIndex
operator|>
name|elements
operator|.
name|size
argument_list|()
condition|)
block|{
name|toIndex
operator|=
name|elements
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Expression
argument_list|>
name|quals
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|(
name|pageSize
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|pageSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|fromIndex
init|;
name|i
operator|<
name|toIndex
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|object
init|=
name|elements
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|unresolvedSuspect
argument_list|(
name|object
argument_list|)
condition|)
block|{
name|quals
operator|.
name|add
argument_list|(
name|buildIdQualifier
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|qualsSize
init|=
name|quals
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|qualsSize
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|// fetch the range of objects in fetchSize chunks
name|boolean
name|fetchesDataRows
init|=
name|internalQuery
operator|.
name|isFetchingDataRows
argument_list|()
decl_stmt|;
name|List
name|objects
init|=
operator|new
name|ArrayList
argument_list|(
name|qualsSize
argument_list|)
decl_stmt|;
name|int
name|fetchEnd
init|=
name|Math
operator|.
name|min
argument_list|(
name|qualsSize
argument_list|,
name|maxFetchSize
argument_list|)
decl_stmt|;
name|int
name|fetchBegin
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|fetchBegin
operator|<
name|qualsSize
condition|)
block|{
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|rootEntity
argument_list|,
name|ExpressionFactory
operator|.
name|joinExp
argument_list|(
name|Expression
operator|.
name|OR
argument_list|,
name|quals
operator|.
name|subList
argument_list|(
name|fetchBegin
argument_list|,
name|fetchEnd
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|query
operator|.
name|setFetchingDataRows
argument_list|(
name|fetchesDataRows
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|query
operator|.
name|isFetchingDataRows
argument_list|()
condition|)
block|{
name|query
operator|.
name|setPrefetchTree
argument_list|(
name|internalQuery
operator|.
name|getPrefetchTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|objects
operator|.
name|addAll
argument_list|(
name|dataContext
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|fetchBegin
operator|=
name|fetchEnd
expr_stmt|;
name|fetchEnd
operator|+=
name|Math
operator|.
name|min
argument_list|(
name|maxFetchSize
argument_list|,
name|qualsSize
operator|-
name|fetchEnd
argument_list|)
expr_stmt|;
block|}
comment|// sanity check - database data may have changed
name|checkPageResultConsistency
argument_list|(
name|objects
argument_list|,
name|ids
argument_list|)
expr_stmt|;
comment|// replace ids in the list with objects
name|Iterator
name|it
init|=
name|objects
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|helper
operator|.
name|updateWithResolvedObjectInRange
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
expr_stmt|;
block|}
name|unfetchedObjects
operator|-=
name|objects
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns a qualifier expression for an unresolved id object.      *       * @since 3.0      */
name|Expression
name|buildIdQualifier
parameter_list|(
name|Object
name|id
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
operator|)
name|id
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Empty id map"
argument_list|)
throw|;
block|}
return|return
name|ExpressionFactory
operator|.
name|matchAllDbExp
argument_list|(
name|map
argument_list|,
name|Expression
operator|.
name|EQUAL_TO
argument_list|)
return|;
block|}
comment|/**      * @since 3.0      */
name|void
name|checkPageResultConsistency
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|objects
parameter_list|,
name|List
argument_list|<
name|?
argument_list|>
name|ids
parameter_list|)
block|{
if|if
condition|(
name|objects
operator|.
name|size
argument_list|()
operator|<
name|ids
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// find missing ids
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"Some ObjectIds are missing from the database. "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"Expected "
argument_list|)
operator|.
name|append
argument_list|(
name|ids
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", fetched "
argument_list|)
operator|.
name|append
argument_list|(
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Object
name|id
range|:
name|ids
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|objects
control|)
block|{
if|if
condition|(
name|helper
operator|.
name|replacesObject
argument_list|(
name|object
argument_list|,
name|id
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|else if
condition|(
name|objects
operator|.
name|size
argument_list|()
operator|>
name|ids
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Expected "
operator|+
name|ids
operator|.
name|size
argument_list|()
operator|+
literal|" objects, retrieved "
operator|+
name|objects
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns zero-based index of the virtual "page" for a given array element index.      */
specifier|public
name|int
name|pageIndex
parameter_list|(
name|int
name|elementIndex
parameter_list|)
block|{
if|if
condition|(
name|elementIndex
operator|<
literal|0
operator|||
name|elementIndex
operator|>
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Index: "
operator|+
name|elementIndex
argument_list|)
throw|;
block|}
if|if
condition|(
name|pageSize
operator|<=
literal|0
operator|||
name|elementIndex
operator|<
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|elementIndex
operator|/
name|pageSize
return|;
block|}
comment|/**      * Get the upper bound on the number of records to resolve in one round trip to the      * database. This setting governs the size/complexity of the where clause generated to      * retrieve the next page of records. If the fetch size is less than the page size,      * then multiple fetches will be made to resolve a page.      *       * @return int      */
specifier|public
name|int
name|getMaxFetchSize
parameter_list|()
block|{
return|return
name|maxFetchSize
return|;
block|}
specifier|public
name|void
name|setMaxFetchSize
parameter_list|(
name|int
name|fetchSize
parameter_list|)
block|{
name|this
operator|.
name|maxFetchSize
operator|=
name|fetchSize
expr_stmt|;
block|}
comment|/**      * Returns the dataContext.      *       * @return DataContext      */
specifier|public
name|DataContext
name|getDataContext
parameter_list|()
block|{
return|return
name|dataContext
return|;
block|}
comment|/**      * Returns the pageSize.      *       * @return int      */
specifier|public
name|int
name|getPageSize
parameter_list|()
block|{
return|return
name|pageSize
return|;
block|}
comment|/**      * Returns a list iterator for this list. DataObjects are resolved a page (according      * to getPageSize()) at a time as necessary - when retrieved with next() or      * previous().      */
specifier|public
name|ListIterator
argument_list|<
name|E
argument_list|>
name|listIterator
parameter_list|()
block|{
return|return
operator|new
name|IncrementalListIterator
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**      * Returns a list iterator of the elements in this list (in proper sequence), starting      * at the specified position in this list. The specified index indicates the first      * element that would be returned by an initial call to the next method. An initial      * call to the previous method would return the element with the specified index minus      * one. DataObjects are resolved a page at a time (according to getPageSize()) as      * necessary - when retrieved with next() or previous().      */
specifier|public
name|ListIterator
argument_list|<
name|E
argument_list|>
name|listIterator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Index: "
operator|+
name|index
argument_list|)
throw|;
block|}
return|return
operator|new
name|IncrementalListIterator
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**      * Return an iterator for this list. DataObjects are resolved a page (according to      * getPageSize()) at a time as necessary - when retrieved with next().      */
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
comment|// by virtue of get(index)'s implementation, resolution of ids into
comment|// objects will occur on pageSize boundaries as necessary.
return|return
operator|new
name|Iterator
argument_list|<
name|E
argument_list|>
argument_list|()
block|{
name|int
name|listIndex
init|=
literal|0
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|(
name|listIndex
operator|<
name|elements
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
specifier|public
name|E
name|next
parameter_list|()
block|{
if|if
condition|(
name|listIndex
operator|>=
name|elements
operator|.
name|size
argument_list|()
condition|)
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"no more elements"
argument_list|)
throw|;
return|return
name|get
argument_list|(
name|listIndex
operator|++
argument_list|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"remove not supported."
argument_list|)
throw|;
block|}
block|}
return|;
block|}
comment|/**      * @see java.util.List#add(int, Object)      */
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|Object
name|element
parameter_list|)
block|{
name|validateListObject
argument_list|(
name|element
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|elements
init|)
block|{
name|elements
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see java.util.Collection#add(Object)      */
specifier|public
name|boolean
name|add
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|validateListObject
argument_list|(
name|o
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|elements
init|)
block|{
return|return
name|elements
operator|.
name|add
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
comment|/**      * @see java.util.Collection#addAll(Collection)      */
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|elements
init|)
block|{
return|return
name|elements
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
comment|/**      * @see java.util.List#addAll(int, Collection)      */
specifier|public
name|boolean
name|addAll
parameter_list|(
name|int
name|index
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|elements
init|)
block|{
return|return
name|elements
operator|.
name|addAll
argument_list|(
name|index
argument_list|,
name|c
argument_list|)
return|;
block|}
block|}
comment|/**      * @see java.util.Collection#clear()      */
specifier|public
name|void
name|clear
parameter_list|()
block|{
synchronized|synchronized
init|(
name|elements
init|)
block|{
name|elements
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see java.util.Collection#contains(Object)      */
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
synchronized|synchronized
init|(
name|elements
init|)
block|{
return|return
name|elements
operator|.
name|contains
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
comment|/**      * @see java.util.Collection#containsAll(Collection)      */
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|elements
init|)
block|{
return|return
name|elements
operator|.
name|containsAll
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
specifier|public
name|E
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
synchronized|synchronized
init|(
name|elements
init|)
block|{
name|Object
name|o
init|=
name|elements
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|unresolvedSuspect
argument_list|(
name|o
argument_list|)
condition|)
block|{
comment|// read this page
name|int
name|pageStart
init|=
name|pageIndex
argument_list|(
name|index
argument_list|)
operator|*
name|pageSize
decl_stmt|;
name|resolveInterval
argument_list|(
name|pageStart
argument_list|,
name|pageStart
operator|+
name|pageSize
argument_list|)
expr_stmt|;
return|return
operator|(
name|E
operator|)
name|elements
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|E
operator|)
name|o
return|;
block|}
block|}
block|}
comment|/**      * @see java.util.List#indexOf(Object)      */
specifier|public
name|int
name|indexOf
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|helper
operator|.
name|indexOfObject
argument_list|(
name|o
argument_list|)
return|;
block|}
comment|/**      * @see java.util.Collection#isEmpty()      */
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
synchronized|synchronized
init|(
name|elements
init|)
block|{
return|return
name|elements
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
specifier|public
name|int
name|lastIndexOf
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|helper
operator|.
name|lastIndexOfObject
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|public
name|E
name|remove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
synchronized|synchronized
init|(
name|elements
init|)
block|{
comment|// have to resolve the page to return correct object
name|E
name|object
init|=
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|elements
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
block|}
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
synchronized|synchronized
init|(
name|elements
init|)
block|{
return|return
name|elements
operator|.
name|remove
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|elements
init|)
block|{
return|return
name|elements
operator|.
name|removeAll
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
synchronized|synchronized
init|(
name|elements
init|)
block|{
return|return
name|elements
operator|.
name|retainAll
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
comment|/**      * @see java.util.List#set(int, Object)      */
specifier|public
name|E
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|Object
name|element
parameter_list|)
block|{
name|validateListObject
argument_list|(
name|element
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|elements
init|)
block|{
return|return
operator|(
name|E
operator|)
name|elements
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
return|;
block|}
block|}
comment|/**      * @see java.util.Collection#size()      */
specifier|public
name|int
name|size
parameter_list|()
block|{
synchronized|synchronized
init|(
name|elements
init|)
block|{
return|return
name|elements
operator|.
name|size
argument_list|()
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|E
argument_list|>
name|subList
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
synchronized|synchronized
init|(
name|elements
init|)
block|{
name|resolveInterval
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
expr_stmt|;
return|return
name|elements
operator|.
name|subList
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
return|;
block|}
block|}
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
name|resolveAll
argument_list|()
expr_stmt|;
return|return
name|elements
operator|.
name|toArray
argument_list|()
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
name|resolveAll
argument_list|()
expr_stmt|;
return|return
operator|(
name|T
index|[]
operator|)
name|elements
operator|.
name|toArray
argument_list|(
name|a
argument_list|)
return|;
block|}
comment|/**      * Returns a total number of objects that are not resolved yet.      */
specifier|public
name|int
name|getUnfetchedObjects
parameter_list|()
block|{
return|return
name|unfetchedObjects
return|;
block|}
specifier|abstract
class|class
name|IncrementalListHelper
block|{
name|int
name|indexOfObject
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|unresolvedSuspect
argument_list|(
name|object
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
synchronized|synchronized
init|(
name|elements
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|objectsAreEqual
argument_list|(
name|object
argument_list|,
name|elements
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
name|int
name|lastIndexOfObject
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|unresolvedSuspect
argument_list|(
name|object
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
synchronized|synchronized
init|(
name|elements
init|)
block|{
for|for
control|(
name|int
name|i
init|=
name|elements
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|objectsAreEqual
argument_list|(
name|object
argument_list|,
name|elements
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
name|void
name|updateWithResolvedObjectInRange
parameter_list|(
name|Object
name|object
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|elements
init|)
block|{
for|for
control|(
name|int
name|i
init|=
name|from
init|;
name|i
operator|<
name|to
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|replacesObject
argument_list|(
name|object
argument_list|,
name|elements
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|elements
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|object
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't find id for "
operator|+
name|object
argument_list|)
throw|;
block|}
block|}
comment|/**          * Returns true if an object is not the type of object expected in the list. This          * method is not expected to perform thorough checking of the object type. What's          * important is the guarantee that an unresolved object representation will always          * return true for this method, and resolved will return false. Other types of          * objects that users may choose to add to the list will not be analyzed in          * detail.          */
specifier|abstract
name|boolean
name|unresolvedSuspect
parameter_list|(
name|Object
name|object
parameter_list|)
function_decl|;
specifier|abstract
name|boolean
name|objectsAreEqual
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
name|objectInTheList
parameter_list|)
function_decl|;
specifier|abstract
name|boolean
name|replacesObject
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
name|objectInTheList
parameter_list|)
function_decl|;
block|}
class|class
name|PersistentListHelper
extends|extends
name|IncrementalListHelper
block|{
annotation|@
name|Override
name|boolean
name|unresolvedSuspect
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|object
operator|instanceof
name|Persistent
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// don't do a full check for object type matching the type of objects in the
comment|// list... what's important is a quick "false" return if the object is of type
comment|// representing unresolved objects.. furthermore, if inheritance is involved,
comment|// we'll need an even more extensive check (see CAY-1142 on inheritance
comment|// issues).
return|return
literal|false
return|;
block|}
annotation|@
name|Override
name|boolean
name|objectsAreEqual
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
name|objectInTheList
parameter_list|)
block|{
if|if
condition|(
name|objectInTheList
operator|instanceof
name|Persistent
condition|)
block|{
comment|// due to object uniquing this should be sufficient
return|return
name|object
operator|==
name|objectInTheList
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|Persistent
operator|)
name|object
operator|)
operator|.
name|getObjectId
argument_list|()
operator|.
name|getIdSnapshot
argument_list|()
operator|.
name|equals
argument_list|(
name|objectInTheList
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
name|boolean
name|replacesObject
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
name|objectInTheList
parameter_list|)
block|{
if|if
condition|(
name|objectInTheList
operator|instanceof
name|Persistent
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Persistent
name|dataObject
init|=
operator|(
name|Persistent
operator|)
name|object
decl_stmt|;
return|return
name|dataObject
operator|.
name|getObjectId
argument_list|()
operator|.
name|getIdSnapshot
argument_list|()
operator|.
name|equals
argument_list|(
name|objectInTheList
argument_list|)
return|;
block|}
block|}
class|class
name|DataRowListHelper
extends|extends
name|IncrementalListHelper
block|{
annotation|@
name|Override
name|boolean
name|unresolvedSuspect
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|object
operator|instanceof
name|Map
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
name|boolean
name|objectsAreEqual
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
name|objectInTheList
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
operator|&&
name|objectInTheList
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|object
operator|!=
literal|null
operator|&&
name|objectInTheList
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|id
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|objectInTheList
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|size
argument_list|()
operator|!=
name|map
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// id must be a subset of this map
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|id
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|value
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
name|boolean
name|replacesObject
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
name|objectInTheList
parameter_list|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|id
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|objectInTheList
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|size
argument_list|()
operator|==
name|rowWidth
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// id must be a subset of this map
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|id
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|value
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
class|class
name|IncrementalListIterator
implements|implements
name|ListIterator
argument_list|<
name|E
argument_list|>
block|{
comment|// by virtue of get(index)'s implementation, resolution of ids into
comment|// objects will occur on pageSize boundaries as necessary.
name|int
name|listIndex
decl_stmt|;
specifier|public
name|IncrementalListIterator
parameter_list|(
name|int
name|startIndex
parameter_list|)
block|{
name|this
operator|.
name|listIndex
operator|=
name|startIndex
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"add operation not supported"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|(
name|listIndex
operator|<
name|elements
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|hasPrevious
parameter_list|()
block|{
return|return
operator|(
name|listIndex
operator|>
literal|0
operator|)
return|;
block|}
specifier|public
name|E
name|next
parameter_list|()
block|{
if|if
condition|(
name|listIndex
operator|>=
name|elements
operator|.
name|size
argument_list|()
condition|)
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"at the end of the list"
argument_list|)
throw|;
return|return
name|get
argument_list|(
name|listIndex
operator|++
argument_list|)
return|;
block|}
specifier|public
name|int
name|nextIndex
parameter_list|()
block|{
return|return
name|listIndex
return|;
block|}
specifier|public
name|E
name|previous
parameter_list|()
block|{
if|if
condition|(
name|listIndex
operator|<
literal|1
condition|)
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"at the beginning of the list"
argument_list|)
throw|;
return|return
name|get
argument_list|(
operator|--
name|listIndex
argument_list|)
return|;
block|}
specifier|public
name|int
name|previousIndex
parameter_list|()
block|{
return|return
operator|(
name|listIndex
operator|-
literal|1
operator|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"remove operation not supported"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|IncrementalFaultList
operator|.
name|this
operator|.
name|set
argument_list|(
name|listIndex
operator|-
literal|1
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

