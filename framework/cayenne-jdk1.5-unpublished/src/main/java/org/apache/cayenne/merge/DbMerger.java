begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|merge
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DbLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DbLoaderDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_comment
comment|/**  * Traverse a {@link DataNode} and a {@link DataMap} and create a group of  * {@link MergerToken}s to alter the {@link DataNode} data store to match the  * {@link DataMap}.  *   */
end_comment

begin_class
specifier|public
class|class
name|DbMerger
block|{
specifier|private
name|MergerFactory
name|factory
decl_stmt|;
specifier|private
name|ValueForNullProvider
name|valueForNull
init|=
operator|new
name|EmptyValueForNullProvider
argument_list|()
decl_stmt|;
comment|/**      * Set a {@link ValueForNullProvider} that will be used to set value for null on not      * null columns      */
specifier|public
name|void
name|setValueForNullProvider
parameter_list|(
name|ValueForNullProvider
name|valueProvider
parameter_list|)
block|{
name|valueForNull
operator|=
name|valueProvider
expr_stmt|;
block|}
comment|/**      * A method that return true if the given table name should be included. The default      * implementation include all tables.      */
specifier|public
name|boolean
name|includeTableName
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Create and return a {@link List} of {@link MergerToken}s to alter the given      * {@link DataNode} to match the given {@link DataMap}      */
specifier|public
name|List
argument_list|<
name|MergerToken
argument_list|>
name|createMergeTokens
parameter_list|(
name|DataNode
name|dataNode
parameter_list|,
name|DataMap
name|dataMap
parameter_list|)
block|{
return|return
name|createMergeTokens
argument_list|(
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getDataSource
argument_list|()
argument_list|,
name|dataMap
argument_list|)
return|;
block|}
comment|/**      * Create and return a {@link List} of {@link MergerToken}s to alter the given      * {@link DataNode} to match the given {@link DataMap}      */
specifier|public
name|List
argument_list|<
name|MergerToken
argument_list|>
name|createMergeTokens
parameter_list|(
name|DbAdapter
name|adapter
parameter_list|,
name|DataSource
name|dataSource
parameter_list|,
name|DataMap
name|dataMap
parameter_list|)
block|{
name|factory
operator|=
name|adapter
operator|.
name|mergerFactory
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MergerToken
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<
name|MergerToken
argument_list|>
argument_list|()
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|dataSource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
specifier|final
name|DbMerger
name|merger
init|=
name|this
decl_stmt|;
name|DbLoader
name|dbLoader
init|=
operator|new
name|DbLoader
argument_list|(
name|conn
argument_list|,
name|adapter
argument_list|,
operator|new
name|LoaderDelegate
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|includeTableName
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
return|return
name|merger
operator|.
name|includeTableName
argument_list|(
name|tableName
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DataMap
name|detectedDataMap
init|=
name|dbLoader
operator|.
name|loadDataMapFromDB
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|DataMap
argument_list|()
argument_list|)
decl_stmt|;
name|detectedDataMap
operator|.
name|setQuotingSQLIdentifiers
argument_list|(
name|dataMap
operator|.
name|isQuotingSQLIdentifiers
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DbEntity
argument_list|>
name|dbEntityToDropByName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DbEntity
argument_list|>
argument_list|(
name|detectedDataMap
operator|.
name|getDbEntityMap
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DbEntity
name|dbEntity
range|:
name|dataMap
operator|.
name|getDbEntities
argument_list|()
control|)
block|{
name|String
name|tableName
init|=
name|dbEntity
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeTableName
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// look for table
name|DbEntity
name|detectedEntity
init|=
name|findDbEntity
argument_list|(
name|detectedDataMap
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|detectedEntity
operator|==
literal|null
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createCreateTableToDb
argument_list|(
name|dbEntity
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: does this work properly with createReverse?
for|for
control|(
name|DbRelationship
name|rel
range|:
name|dbEntity
operator|.
name|getRelationships
argument_list|()
control|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createAddRelationshipToDb
argument_list|(
name|dbEntity
argument_list|,
name|rel
argument_list|)
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|dbEntityToDropByName
operator|.
name|remove
argument_list|(
name|detectedEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|checkRelationshipsToDrop
argument_list|(
name|adapter
argument_list|,
name|tokens
argument_list|,
name|dbEntity
argument_list|,
name|detectedEntity
argument_list|)
expr_stmt|;
name|checkRows
argument_list|(
name|tokens
argument_list|,
name|dbEntity
argument_list|,
name|detectedEntity
argument_list|)
expr_stmt|;
name|checkRelationshipsToAdd
argument_list|(
name|adapter
argument_list|,
name|tokens
argument_list|,
name|dbEntity
argument_list|,
name|detectedEntity
argument_list|)
expr_stmt|;
block|}
comment|// drop table
comment|// TODO: support drop table. currently, too many tables are marked for drop
for|for
control|(
name|DbEntity
name|e
range|:
name|dbEntityToDropByName
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|includeTableName
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|tokens
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createDropTableToDb
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
return|return
name|tokens
return|;
block|}
specifier|private
name|void
name|checkRows
parameter_list|(
name|List
argument_list|<
name|MergerToken
argument_list|>
name|tokens
parameter_list|,
name|DbEntity
name|dbEntity
parameter_list|,
name|DbEntity
name|detectedEntity
parameter_list|)
block|{
comment|// columns to drop
for|for
control|(
name|DbAttribute
name|detected
range|:
name|detectedEntity
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|findDbAttribute
argument_list|(
name|dbEntity
argument_list|,
name|detected
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createDropColumnToDb
argument_list|(
name|dbEntity
argument_list|,
name|detected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// columns to add or modify
for|for
control|(
name|DbAttribute
name|attr
range|:
name|dbEntity
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|String
name|columnName
init|=
name|attr
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|DbAttribute
name|detected
init|=
name|findDbAttribute
argument_list|(
name|detectedEntity
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|detected
operator|==
literal|null
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createAddColumnToDb
argument_list|(
name|dbEntity
argument_list|,
name|attr
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|attr
operator|.
name|isMandatory
argument_list|()
condition|)
block|{
if|if
condition|(
name|valueForNull
operator|.
name|hasValueFor
argument_list|(
name|dbEntity
argument_list|,
name|attr
argument_list|)
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createSetValueForNullToDb
argument_list|(
name|dbEntity
argument_list|,
name|attr
argument_list|,
name|valueForNull
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tokens
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createSetNotNullToDb
argument_list|(
name|dbEntity
argument_list|,
name|attr
argument_list|)
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
comment|// check for not null
if|if
condition|(
name|attr
operator|.
name|isMandatory
argument_list|()
operator|!=
name|detected
operator|.
name|isMandatory
argument_list|()
condition|)
block|{
if|if
condition|(
name|attr
operator|.
name|isMandatory
argument_list|()
condition|)
block|{
if|if
condition|(
name|valueForNull
operator|.
name|hasValueFor
argument_list|(
name|dbEntity
argument_list|,
name|attr
argument_list|)
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createSetValueForNullToDb
argument_list|(
name|dbEntity
argument_list|,
name|attr
argument_list|,
name|valueForNull
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tokens
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createSetNotNullToDb
argument_list|(
name|dbEntity
argument_list|,
name|attr
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tokens
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createSetAllowNullToDb
argument_list|(
name|dbEntity
argument_list|,
name|attr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: check more types than char/varchar
comment|// TODO: psql report VARCHAR for text column, not clob
switch|switch
condition|(
name|detected
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Types
operator|.
name|VARCHAR
case|:
case|case
name|Types
operator|.
name|CHAR
case|:
if|if
condition|(
name|attr
operator|.
name|getMaxLength
argument_list|()
operator|!=
name|detected
operator|.
name|getMaxLength
argument_list|()
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createSetColumnTypeToDb
argument_list|(
name|dbEntity
argument_list|,
name|detected
argument_list|,
name|attr
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
specifier|private
name|void
name|checkRelationshipsToDrop
parameter_list|(
name|DbAdapter
name|adapter
parameter_list|,
name|List
argument_list|<
name|MergerToken
argument_list|>
name|tokens
parameter_list|,
name|DbEntity
name|dbEntity
parameter_list|,
name|DbEntity
name|detectedEntity
parameter_list|)
block|{
comment|// relationships to drop
for|for
control|(
name|DbRelationship
name|detected
range|:
name|detectedEntity
operator|.
name|getRelationships
argument_list|()
control|)
block|{
if|if
condition|(
name|findDbRelationship
argument_list|(
name|dbEntity
argument_list|,
name|detected
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// alter detected relationship to match entity and attribute names.
comment|// (case sensitively)
name|DbEntity
name|targetEntity
init|=
name|findDbEntity
argument_list|(
name|dbEntity
operator|.
name|getDataMap
argument_list|()
argument_list|,
name|detected
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetEntity
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|detected
operator|.
name|setSourceEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|detected
operator|.
name|setTargetEntity
argument_list|(
name|targetEntity
argument_list|)
expr_stmt|;
comment|// manipulate the joins to match the DbAttributes in the model
for|for
control|(
name|DbJoin
name|join
range|:
name|detected
operator|.
name|getJoins
argument_list|()
control|)
block|{
name|DbAttribute
name|sattr
init|=
name|findDbAttribute
argument_list|(
name|dbEntity
argument_list|,
name|join
operator|.
name|getSourceName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sattr
operator|!=
literal|null
condition|)
block|{
name|join
operator|.
name|setSourceName
argument_list|(
name|sattr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DbAttribute
name|tattr
init|=
name|findDbAttribute
argument_list|(
name|targetEntity
argument_list|,
name|join
operator|.
name|getTargetName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tattr
operator|!=
literal|null
condition|)
block|{
name|join
operator|.
name|setTargetName
argument_list|(
name|tattr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|MergerToken
name|token
init|=
name|factory
operator|.
name|createDropRelationshipToDb
argument_list|(
name|dbEntity
argument_list|,
name|detected
argument_list|)
decl_stmt|;
if|if
condition|(
name|detected
operator|.
name|isToMany
argument_list|()
condition|)
block|{
comment|// default toModel as we can not do drop a toMany in the db. only
comment|// toOne are represented using foreign key
name|token
operator|=
name|token
operator|.
name|createReverse
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
name|tokens
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkRelationshipsToAdd
parameter_list|(
name|DbAdapter
name|adapter
parameter_list|,
name|List
argument_list|<
name|MergerToken
argument_list|>
name|tokens
parameter_list|,
name|DbEntity
name|dbEntity
parameter_list|,
name|DbEntity
name|detectedEntity
parameter_list|)
block|{
comment|// relationships to add
for|for
control|(
name|DbRelationship
name|rel
range|:
name|dbEntity
operator|.
name|getRelationships
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|includeTableName
argument_list|(
name|rel
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|findDbRelationship
argument_list|(
name|detectedEntity
argument_list|,
name|rel
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// TODO: very ugly. perhaps MergerToken should have a .isNoOp()?
name|AbstractToDbToken
name|t
init|=
operator|(
name|AbstractToDbToken
operator|)
name|factory
operator|.
name|createAddRelationshipToDb
argument_list|(
name|dbEntity
argument_list|,
name|rel
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|createSql
argument_list|(
name|adapter
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createAddRelationshipToDb
argument_list|(
name|dbEntity
argument_list|,
name|rel
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * case insensitive search for a {@link DbEntity} in a {@link DataMap} by name      */
specifier|private
name|DbEntity
name|findDbEntity
parameter_list|(
name|DataMap
name|map
parameter_list|,
name|String
name|caseInsensitiveName
parameter_list|)
block|{
comment|// TODO: create a Map with upper case keys?
for|for
control|(
name|DbEntity
name|e
range|:
name|map
operator|.
name|getDbEntities
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|caseInsensitiveName
argument_list|)
condition|)
block|{
return|return
name|e
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * case insensitive search for a {@link DbAttribute} in a {@link DbEntity} by name      */
specifier|private
name|DbAttribute
name|findDbAttribute
parameter_list|(
name|DbEntity
name|entity
parameter_list|,
name|String
name|caseInsensitiveName
parameter_list|)
block|{
for|for
control|(
name|DbAttribute
name|a
range|:
name|entity
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|caseInsensitiveName
argument_list|)
condition|)
block|{
return|return
name|a
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * search for a {@link DbRelationship} like rel in the given {@link DbEntity}      */
specifier|private
name|DbRelationship
name|findDbRelationship
parameter_list|(
name|DbEntity
name|entity
parameter_list|,
name|DbRelationship
name|rel
parameter_list|)
block|{
for|for
control|(
name|DbRelationship
name|candidate
range|:
name|entity
operator|.
name|getRelationships
argument_list|()
control|)
block|{
if|if
condition|(
name|equalDbJoinCollections
argument_list|(
name|candidate
operator|.
name|getJoins
argument_list|()
argument_list|,
name|rel
operator|.
name|getJoins
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|candidate
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Return true if the two unordered {@link Collection}s of {@link DbJoin}s are      * equal. Entity and Attribute names are compared case insensitively.      */
specifier|private
specifier|static
name|boolean
name|equalDbJoinCollections
parameter_list|(
name|Collection
argument_list|<
name|DbJoin
argument_list|>
name|j1s
parameter_list|,
name|Collection
argument_list|<
name|DbJoin
argument_list|>
name|j2s
parameter_list|)
block|{
if|if
condition|(
name|j1s
operator|.
name|size
argument_list|()
operator|!=
name|j2s
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|DbJoin
name|j1
range|:
name|j1s
control|)
block|{
name|boolean
name|foundPair
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DbJoin
name|j2
range|:
name|j2s
control|)
block|{
if|if
condition|(
operator|(
name|j1
operator|.
name|getSource
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|j1
operator|.
name|getSource
argument_list|()
operator|.
name|getEntity
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|(
name|j1
operator|.
name|getTarget
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|j1
operator|.
name|getTarget
argument_list|()
operator|.
name|getEntity
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|(
name|j2
operator|.
name|getSource
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|j2
operator|.
name|getSource
argument_list|()
operator|.
name|getEntity
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|(
name|j2
operator|.
name|getTarget
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|j2
operator|.
name|getTarget
argument_list|()
operator|.
name|getEntity
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
continue|continue;
block|}
comment|// check entity name
if|if
condition|(
operator|!
name|j1
operator|.
name|getSource
argument_list|()
operator|.
name|getEntity
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|j2
operator|.
name|getSource
argument_list|()
operator|.
name|getEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|j1
operator|.
name|getTarget
argument_list|()
operator|.
name|getEntity
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|j2
operator|.
name|getTarget
argument_list|()
operator|.
name|getEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// check attribute name
if|if
condition|(
operator|!
name|j1
operator|.
name|getSourceName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|j2
operator|.
name|getSourceName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|j1
operator|.
name|getTargetName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|j2
operator|.
name|getTargetName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|foundPair
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|foundPair
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|LoaderDelegate
implements|implements
name|DbLoaderDelegate
block|{
specifier|public
name|void
name|dbEntityAdded
parameter_list|(
name|DbEntity
name|ent
parameter_list|)
block|{
block|}
specifier|public
name|void
name|dbEntityRemoved
parameter_list|(
name|DbEntity
name|ent
parameter_list|)
block|{
block|}
specifier|public
name|void
name|objEntityAdded
parameter_list|(
name|ObjEntity
name|ent
parameter_list|)
block|{
block|}
specifier|public
name|void
name|objEntityRemoved
parameter_list|(
name|ObjEntity
name|ent
parameter_list|)
block|{
block|}
specifier|public
name|boolean
name|overwriteDbEntity
parameter_list|(
name|DbEntity
name|ent
parameter_list|)
throws|throws
name|CayenneException
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

