begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|select
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|ExtendedTypeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityInheritanceTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_comment
comment|/**  * Builder of the non-leaf entity segment that has at least one subclass or superclass or  * any combination of them.  *   * @since 3.0  */
end_comment

begin_class
class|class
name|EntityTreeSegmentBuilder
block|{
specifier|private
name|QueryMetadata
name|metadata
decl_stmt|;
specifier|protected
name|ExtendedTypeMap
name|extendedTypes
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Expression
argument_list|>
name|entityQualifiers
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RowReader
argument_list|<
name|?
argument_list|>
argument_list|>
name|entityReaders
decl_stmt|;
specifier|protected
name|ClassDescriptor
name|classDescriptor
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|EntitySelectColumn
argument_list|>
name|columns
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|columnMap
decl_stmt|;
name|EntityTreeSegmentBuilder
parameter_list|(
name|QueryMetadata
name|metadata
parameter_list|,
name|ExtendedTypeMap
name|extendedTypes
parameter_list|,
name|ClassDescriptor
name|classDescriptor
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|extendedTypes
operator|=
name|extendedTypes
expr_stmt|;
name|this
operator|.
name|classDescriptor
operator|=
name|classDescriptor
expr_stmt|;
name|this
operator|.
name|entityQualifiers
operator|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|entityReaders
operator|=
operator|new
name|ArrayList
argument_list|<
name|RowReader
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<
name|EntitySelectColumn
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|columnMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|SelectDescriptor
argument_list|<
name|Object
argument_list|>
name|buildSegment
parameter_list|()
block|{
name|EntityInheritanceTree
name|inheritanceTree
init|=
name|classDescriptor
operator|.
name|getEntityInheritanceTree
argument_list|()
decl_stmt|;
comment|// non-leaf entity
if|if
condition|(
name|inheritanceTree
operator|!=
literal|null
condition|)
block|{
return|return
name|buildNonLeafSegment
argument_list|(
name|inheritanceTree
argument_list|)
return|;
block|}
comment|// leaf entity
else|else
block|{
return|return
name|buildLeafSegment
argument_list|()
return|;
block|}
block|}
name|SelectDescriptor
argument_list|<
name|Object
argument_list|>
name|buildLeafSegment
parameter_list|()
block|{
name|EntityRowReader
name|rowReader
init|=
name|processSuperclasses
argument_list|(
name|classDescriptor
operator|.
name|getEntity
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|EntitySegment
argument_list|(
name|rowReader
argument_list|,
name|columns
argument_list|)
return|;
block|}
name|SelectDescriptor
argument_list|<
name|Object
argument_list|>
name|buildNonLeafSegment
parameter_list|(
name|EntityInheritanceTree
name|inheritanceTree
parameter_list|)
block|{
name|EntityRowReader
name|superRowReader
init|=
literal|null
decl_stmt|;
name|ObjEntity
name|superEntity
init|=
name|classDescriptor
operator|.
name|getEntity
argument_list|()
operator|.
name|getSuperEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|superEntity
operator|!=
literal|null
condition|)
block|{
name|superRowReader
operator|=
name|processSuperclasses
argument_list|(
name|superEntity
argument_list|)
expr_stmt|;
block|}
name|processSubclasses
argument_list|(
name|inheritanceTree
argument_list|,
name|superRowReader
argument_list|)
expr_stmt|;
name|RowReader
argument_list|<
name|Object
argument_list|>
name|discriminatorReader
init|=
name|mergeColumns
argument_list|(
literal|null
argument_list|,
operator|new
name|DiscriminatorBuilder
argument_list|(
name|extendedTypes
argument_list|,
name|inheritanceTree
argument_list|)
operator|.
name|buildColumns
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|this
operator|.
name|entityQualifiers
operator|.
name|size
argument_list|()
decl_stmt|;
name|Expression
index|[]
name|entityQualifiers
init|=
name|this
operator|.
name|entityQualifiers
operator|.
name|toArray
argument_list|(
operator|new
name|Expression
index|[
name|size
index|]
argument_list|)
decl_stmt|;
name|RowReader
argument_list|<
name|Object
argument_list|>
index|[]
name|entityReaders
init|=
name|this
operator|.
name|entityReaders
operator|.
name|toArray
argument_list|(
operator|new
name|RowReader
index|[
name|size
index|]
argument_list|)
decl_stmt|;
comment|// if subclasses are involved, change RowReader to a compound RowReader...
name|RowReader
argument_list|<
name|Object
argument_list|>
name|rowReader
init|=
operator|new
name|EntityTreeRowReader
argument_list|(
name|discriminatorReader
argument_list|,
name|entityQualifiers
argument_list|,
name|entityReaders
argument_list|)
decl_stmt|;
return|return
operator|new
name|EntitySegment
argument_list|(
name|rowReader
argument_list|,
name|columns
argument_list|)
return|;
block|}
comment|/**      * Merges subsegment columns into the main columns list, generating a RowReader for      * subsegment.      */
specifier|private
name|EntityRowReader
name|mergeColumns
parameter_list|(
name|String
name|entityName
parameter_list|,
name|List
argument_list|<
name|EntitySelectColumn
argument_list|>
name|columnsToMerge
parameter_list|)
block|{
name|int
index|[]
name|indexes
init|=
operator|new
name|int
index|[
name|columnsToMerge
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|EntitySelectColumn
name|column
init|=
name|columnsToMerge
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Integer
name|columnIndex
init|=
name|columnMap
operator|.
name|get
argument_list|(
name|column
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnIndex
operator|==
literal|null
condition|)
block|{
name|columnIndex
operator|=
name|columns
operator|.
name|size
argument_list|()
expr_stmt|;
name|columnMap
operator|.
name|put
argument_list|(
name|column
operator|.
name|getDataRowKey
argument_list|()
argument_list|,
name|columnIndex
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
name|indexes
index|[
name|i
index|]
operator|=
name|columnIndex
operator|.
name|intValue
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
return|return
operator|new
name|EntityRowReader
argument_list|(
name|entityName
argument_list|,
name|columnsToMerge
argument_list|,
name|indexes
argument_list|)
return|;
block|}
specifier|private
name|EntityRowReader
name|processSuperclasses
parameter_list|(
name|ObjEntity
name|entity
parameter_list|)
block|{
name|List
argument_list|<
name|EntitySelectColumn
argument_list|>
name|entityColumns
init|=
operator|new
name|EntitySegmentBuilder
argument_list|(
name|metadata
argument_list|,
name|extendedTypes
argument_list|,
name|entity
argument_list|)
operator|.
name|buildColumns
argument_list|()
decl_stmt|;
name|EntityRowReader
name|rowReader
init|=
name|mergeColumns
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|,
name|entityColumns
argument_list|)
decl_stmt|;
name|ObjEntity
name|superEntity
init|=
name|entity
operator|.
name|getSuperEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|superEntity
operator|!=
literal|null
condition|)
block|{
name|rowReader
operator|.
name|setSuperReader
argument_list|(
name|processSuperclasses
argument_list|(
name|superEntity
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rowReader
return|;
block|}
specifier|private
name|void
name|processSubclasses
parameter_list|(
name|EntityInheritanceTree
name|node
parameter_list|,
name|EntityRowReader
name|superReader
parameter_list|)
block|{
name|EntityRowReader
name|reader
init|=
name|processSubclass
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|reader
operator|.
name|setSuperReader
argument_list|(
name|superReader
argument_list|)
expr_stmt|;
for|for
control|(
name|EntityInheritanceTree
name|childNode
range|:
name|node
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|processSubclasses
argument_list|(
name|childNode
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|EntityRowReader
name|processSubclass
parameter_list|(
name|EntityInheritanceTree
name|node
parameter_list|)
block|{
name|List
argument_list|<
name|EntitySelectColumn
argument_list|>
name|entityColumns
init|=
operator|new
name|EntitySegmentBuilder
argument_list|(
name|metadata
argument_list|,
name|extendedTypes
argument_list|,
name|node
operator|.
name|getEntity
argument_list|()
argument_list|)
operator|.
name|buildColumns
argument_list|()
decl_stmt|;
comment|// merge columns
name|EntityRowReader
name|rowReader
init|=
name|mergeColumns
argument_list|(
name|node
operator|.
name|getEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|entityColumns
argument_list|)
decl_stmt|;
comment|// record entity qualifier and row reader...
if|if
condition|(
operator|!
name|node
operator|.
name|getEntity
argument_list|()
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
name|Expression
name|qualifier
init|=
name|node
operator|.
name|getDbQualifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|qualifier
operator|==
literal|null
condition|)
block|{
name|qualifier
operator|=
operator|new
name|ASTTrue
argument_list|()
expr_stmt|;
block|}
name|entityQualifiers
operator|.
name|add
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
name|entityReaders
operator|.
name|add
argument_list|(
name|rowReader
argument_list|)
expr_stmt|;
block|}
return|return
name|rowReader
return|;
block|}
block|}
end_class

end_unit

