begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|ExtendedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|ExtendedTypeMap
import|;
end_import

begin_comment
comment|/**  * A descriptor of a result row obtained from a database.  *   * @since 1.2  */
end_comment

begin_class
specifier|public
class|class
name|RowDescriptor
block|{
specifier|protected
name|ColumnDescriptor
index|[]
name|columns
decl_stmt|;
specifier|protected
name|ExtendedType
index|[]
name|converters
decl_stmt|;
comment|/**      * Creates an empty RowDescriptor. Intended mainly for testing and use by subclasses.      */
specifier|protected
name|RowDescriptor
parameter_list|()
block|{
block|}
comment|/**      * Creates a fully initialized RowDescriptor.      *       * @since 3.0      */
specifier|public
name|RowDescriptor
parameter_list|(
name|ColumnDescriptor
index|[]
name|columns
parameter_list|,
name|ExtendedType
index|[]
name|converters
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|this
operator|.
name|converters
operator|=
name|converters
expr_stmt|;
block|}
comment|/**      * Creates a RowDescriptor for an array of columns.      *       * @deprecated since 3.0 use {@link RowDescriptorBuilder}.      */
specifier|public
name|RowDescriptor
parameter_list|(
name|ColumnDescriptor
index|[]
name|columns
parameter_list|,
name|ExtendedTypeMap
name|types
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
name|indexTypes
argument_list|(
name|types
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates new RowDescriptor using ResultSet metadata to determine the columns.      *       * @deprecated since 3.0 use {@link RowDescriptorBuilder}.      */
specifier|public
name|RowDescriptor
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|ExtendedTypeMap
name|types
parameter_list|)
block|{
name|this
argument_list|(
name|resultSet
argument_list|,
name|types
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates new RowDescriptor using ResultSet metadata to determine the columns. Note      * that if javaTypeOverrides array is null, default JDBC to Java types mapping is      * used.      *       * @deprecated since 3.0 use {@link RowDescriptorBuilder}.      */
specifier|public
name|RowDescriptor
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|ExtendedTypeMap
name|types
parameter_list|,
name|Map
name|javaTypeOverrides
parameter_list|)
block|{
name|initFromResultSet
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
if|if
condition|(
name|javaTypeOverrides
operator|!=
literal|null
condition|)
block|{
name|overrideJavaTypes
argument_list|(
name|javaTypeOverrides
argument_list|)
expr_stmt|;
block|}
name|indexTypes
argument_list|(
name|types
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initializes converters for columns.      *       * @deprecated since 3.0 use {@link RowDescriptorBuilder}.      */
specifier|protected
name|void
name|indexTypes
parameter_list|(
name|ExtendedTypeMap
name|types
parameter_list|)
block|{
name|this
operator|.
name|converters
operator|=
operator|new
name|ExtendedType
index|[
name|columns
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|converters
index|[
name|i
index|]
operator|=
name|types
operator|.
name|getRegisteredType
argument_list|(
name|columns
index|[
name|i
index|]
operator|.
name|getJavaClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Builds columns list from ResultSet metadata.      *       * @deprecated since 3.0 use {@link RowDescriptorBuilder}.      */
specifier|protected
name|void
name|initFromResultSet
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
block|{
try|try
block|{
name|ResultSetMetaData
name|md
init|=
name|resultSet
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|md
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"No columns in ResultSet."
argument_list|)
throw|;
block|}
name|this
operator|.
name|columns
operator|=
operator|new
name|ColumnDescriptor
index|[
name|len
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|columns
index|[
name|i
index|]
operator|=
operator|new
name|ColumnDescriptor
argument_list|(
name|md
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error reading metadata."
argument_list|,
name|sqex
argument_list|)
throw|;
block|}
block|}
comment|/**      * Overrides Java types of result columns. Keys in the map must correspond to the      * names of the columns.      *       * @deprecated since 3.0 use {@link RowDescriptorBuilder}.      */
specifier|protected
name|void
name|overrideJavaTypes
parameter_list|(
name|Map
name|overrides
parameter_list|)
block|{
for|for
control|(
name|ColumnDescriptor
name|column
range|:
name|columns
control|)
block|{
name|String
name|type
init|=
operator|(
name|String
operator|)
name|overrides
operator|.
name|get
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|column
operator|.
name|setJavaClass
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns a number of columns in a row.      */
specifier|public
name|int
name|getWidth
parameter_list|()
block|{
return|return
name|columns
operator|.
name|length
return|;
block|}
comment|/**      * Returns column descriptors.      */
specifier|public
name|ColumnDescriptor
index|[]
name|getColumns
parameter_list|()
block|{
return|return
name|columns
return|;
block|}
comment|/**      * Returns extended types for columns.      */
specifier|public
name|ExtendedType
index|[]
name|getConverters
parameter_list|()
block|{
return|return
name|converters
return|;
block|}
block|}
end_class

end_unit

