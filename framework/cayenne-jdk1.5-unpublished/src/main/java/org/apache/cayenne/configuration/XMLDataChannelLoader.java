begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|DIException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
operator|.
name|ResourceLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * @since 3.1  */
end_comment

begin_class
specifier|public
class|class
name|XMLDataChannelLoader
implements|implements
name|DataChannelLoader
block|{
specifier|private
specifier|static
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|XMLDataChannelLoader
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ResourceLocator
name|resourceLocator
decl_stmt|;
specifier|protected
name|String
name|getResourceName
parameter_list|(
name|String
name|runtimeName
parameter_list|)
block|{
if|if
condition|(
name|runtimeName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null rumtimeName"
argument_list|)
throw|;
block|}
return|return
literal|"cayenne-"
operator|+
name|runtimeName
operator|+
literal|".xml"
return|;
block|}
specifier|public
name|DataChannel
name|get
parameter_list|(
name|String
name|runtimeName
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"starting configuration loading: "
operator|+
name|runtimeName
argument_list|)
expr_stmt|;
name|String
name|resourceName
init|=
name|getResourceName
argument_list|(
name|runtimeName
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Resource
argument_list|>
name|configurations
init|=
name|resourceLocator
operator|.
name|findResources
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|configurations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"[%s] : Configuration file \"%s\" is not found."
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|resourceName
argument_list|)
throw|;
block|}
name|Resource
name|configurationResource
init|=
name|configurations
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|URL
name|configurationURL
init|=
name|configurationResource
operator|.
name|getURL
argument_list|()
decl_stmt|;
comment|// no support for multiple configs yet, but this is not a hard error
if|if
condition|(
name|configurations
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"found "
operator|+
name|configurations
operator|.
name|size
argument_list|()
operator|+
literal|" Cayenne configurations, will use the first one: "
operator|+
name|configurationURL
argument_list|)
expr_stmt|;
block|}
name|DataDomain
name|channel
decl_stmt|;
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|configurationURL
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|channel
operator|=
operator|new
name|DomainLoaderAction
argument_list|()
operator|.
name|loadDomain
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DIException
argument_list|(
literal|"Error loading configuration from %s"
argument_list|,
name|e
argument_list|,
name|configurationURL
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"failure closing input stream for "
operator|+
name|configurationURL
operator|+
literal|", ignoring"
argument_list|,
name|ioex
argument_list|)
expr_stmt|;
block|}
block|}
name|channel
operator|.
name|setName
argument_list|(
name|runtimeName
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"finsihed configuration loading: "
operator|+
name|runtimeName
argument_list|)
expr_stmt|;
return|return
name|channel
return|;
block|}
block|}
end_class

end_unit

