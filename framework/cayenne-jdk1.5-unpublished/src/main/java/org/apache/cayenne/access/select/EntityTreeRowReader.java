begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|select
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_comment
comment|/**  * Inheritance-aware entity RowReader.  *   * @since 3.0  */
end_comment

begin_class
class|class
name|EntityTreeRowReader
implements|implements
name|RowReader
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
name|RowReader
argument_list|<
name|?
argument_list|>
name|discriminatorReader
decl_stmt|;
specifier|private
name|Expression
index|[]
name|entityQualifiers
decl_stmt|;
specifier|private
name|RowReader
argument_list|<
name|Object
argument_list|>
index|[]
name|entityReaders
decl_stmt|;
name|EntityTreeRowReader
parameter_list|(
name|RowReader
argument_list|<
name|?
argument_list|>
name|discriminatorReader
parameter_list|,
name|Expression
index|[]
name|entityQualifiers
parameter_list|,
name|RowReader
argument_list|<
name|Object
argument_list|>
index|[]
name|entityReaders
parameter_list|)
block|{
name|this
operator|.
name|discriminatorReader
operator|=
name|discriminatorReader
expr_stmt|;
name|this
operator|.
name|entityQualifiers
operator|=
name|entityQualifiers
expr_stmt|;
name|this
operator|.
name|entityReaders
operator|=
name|entityReaders
expr_stmt|;
block|}
specifier|public
name|void
name|setColumnOffset
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"TODO"
argument_list|)
throw|;
block|}
specifier|public
name|Object
name|readRow
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|CayenneException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|discriminator
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|discriminatorReader
operator|.
name|readRow
argument_list|(
name|resultSet
argument_list|)
decl_stmt|;
comment|// read qualifiers list in reverse order to ensure that for each superclass,
comment|// subclass qualifiers are run first... This way we can even support empty
comment|// qualifier superclasses.
name|int
name|len
init|=
name|entityQualifiers
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|len
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
comment|// TODO: andrus, 12/25/2008 - Expression in-memory evaluation for each row in
comment|// a ResultSet will be a very slow operation. This procedure should be
comment|// optimized somehow...
if|if
condition|(
name|entityQualifiers
index|[
name|i
index|]
operator|.
name|match
argument_list|(
name|discriminator
argument_list|)
condition|)
block|{
return|return
name|entityReaders
index|[
name|i
index|]
operator|.
name|readRow
argument_list|(
name|resultSet
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|CayenneException
argument_list|(
literal|"Row discriminator did not match any entities in the inheritance hierarchy: "
operator|+
name|discriminator
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

