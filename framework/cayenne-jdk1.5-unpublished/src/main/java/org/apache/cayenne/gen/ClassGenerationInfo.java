begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Relationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|validator
operator|.
name|MappingNamesHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|NameConverter
import|;
end_import

begin_comment
comment|/**  * Class generation engine for ObjEntities based on<a  * href="http://jakarta.apache.org/velocity/" target="_blank">Velocity templates</a>.  * Instance of ClassGenerationInfo is available inside Velocity template under the key  * "classGen".  *   * @since 1.2  * @deprecated since 3.0, as class generator version 1.1 is deprecated.  */
end_comment

begin_class
specifier|public
class|class
name|ClassGenerationInfo
block|{
specifier|protected
name|ObjEntity
name|entity
decl_stmt|;
comment|// template substitution values
specifier|protected
name|String
name|packageName
decl_stmt|;
specifier|protected
name|String
name|className
decl_stmt|;
specifier|protected
name|String
name|superPrefix
decl_stmt|;
specifier|protected
name|String
name|prop
decl_stmt|;
specifier|protected
name|String
name|superPackageName
decl_stmt|;
specifier|protected
name|String
name|superClassName
decl_stmt|;
comment|/**      * Returns Java package name of the class associated with this generator.      */
specifier|public
name|String
name|getPackageName
parameter_list|()
block|{
return|return
name|packageName
return|;
block|}
comment|/**      * Sets Java package name of the class associated with this generator.      */
specifier|protected
name|void
name|setPackageName
parameter_list|(
name|String
name|packageName
parameter_list|)
block|{
name|this
operator|.
name|packageName
operator|=
name|packageName
expr_stmt|;
block|}
comment|/**      * Returns<code>superPackageName</code> property that defines a superclass's      * package name.      */
specifier|public
name|String
name|getSuperPackageName
parameter_list|()
block|{
return|return
name|superPackageName
return|;
block|}
comment|/**      * Sets<code>superPackageName</code> property that defines a superclass's package      * name.      */
specifier|protected
name|void
name|setSuperPackageName
parameter_list|(
name|String
name|superPackageName
parameter_list|)
block|{
name|this
operator|.
name|superPackageName
operator|=
name|superPackageName
expr_stmt|;
block|}
comment|/**      * Returns class name (without a package) of the class associated with this generator.      */
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|className
return|;
block|}
comment|/**      * Sets class name of the class associated with this generator. Class name must not      * include a package.      */
specifier|protected
name|void
name|setClassName
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|this
operator|.
name|className
operator|=
name|className
expr_stmt|;
block|}
specifier|protected
name|void
name|setSuperPrefix
parameter_list|(
name|String
name|superPrefix
parameter_list|)
block|{
name|this
operator|.
name|superPrefix
operator|=
name|superPrefix
expr_stmt|;
block|}
specifier|public
name|String
name|formatJavaType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|startsWith
argument_list|(
literal|"java.lang."
argument_list|)
operator|&&
name|type
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|,
literal|10
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
name|type
operator|.
name|substring
argument_list|(
literal|"java.lang."
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|packageName
operator|!=
literal|null
operator|&&
name|type
operator|.
name|startsWith
argument_list|(
name|packageName
operator|+
literal|'.'
argument_list|)
operator|&&
name|type
operator|.
name|indexOf
argument_list|(
name|packageName
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
literal|'.'
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
name|type
operator|.
name|substring
argument_list|(
name|packageName
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
return|return
name|type
return|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|String
name|formatJavaTypeAsNonBooleanPrimitive
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|String
name|value
init|=
name|ImportUtils
operator|.
name|classesForPrimitives
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|formatJavaType
argument_list|(
name|value
operator|!=
literal|null
condition|?
name|value
else|:
name|type
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isNonBooleanPrimitive
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|ImportUtils
operator|.
name|classesForPrimitives
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
operator|&&
operator|!
name|isBoolean
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|boolean
name|isBoolean
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
literal|"boolean"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
name|String
name|formatVariableName
parameter_list|(
name|String
name|variableName
parameter_list|)
block|{
if|if
condition|(
name|MappingNamesHelper
operator|.
name|getInstance
argument_list|()
operator|.
name|isReservedJavaKeyword
argument_list|(
name|variableName
argument_list|)
condition|)
block|{
return|return
literal|"_"
operator|+
name|variableName
return|;
block|}
else|else
block|{
return|return
name|variableName
return|;
block|}
block|}
comment|/**      * Returns prefix used to distinguish between superclass and subclass when generating      * classes in pairs.      */
specifier|public
name|String
name|getSuperPrefix
parameter_list|()
block|{
return|return
name|superPrefix
return|;
block|}
comment|/**      * Sets current class property name. This method is called during template parsing for      * each of the class properties.      */
specifier|public
name|void
name|setProp
parameter_list|(
name|String
name|prop
parameter_list|)
block|{
name|this
operator|.
name|prop
operator|=
name|prop
expr_stmt|;
block|}
specifier|public
name|String
name|getProp
parameter_list|()
block|{
return|return
name|prop
return|;
block|}
comment|/**      * Capitalizes the first letter of the property name.      *       * @since 1.1      */
specifier|public
name|String
name|capitalized
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
name|name
return|;
name|char
name|c
init|=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|)
condition|?
name|Character
operator|.
name|toString
argument_list|(
name|c
argument_list|)
else|:
name|c
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**      * Converts property name to Java constants naming convention.      *       * @since 1.1      */
specifier|public
name|String
name|capitalizedAsConstant
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
name|name
return|;
return|return
name|NameConverter
operator|.
name|javaToUnderscored
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/** Returns current property name with capitalized first letter */
specifier|public
name|String
name|getCappedProp
parameter_list|()
block|{
return|return
name|capitalized
argument_list|(
name|prop
argument_list|)
return|;
block|}
comment|/**      * @return a current property name converted to a format used by java static final      *         variables - all capitalized with underscores.      * @since 1.0.3      */
specifier|public
name|String
name|getPropAsConstantName
parameter_list|()
block|{
return|return
name|capitalizedAsConstant
argument_list|(
name|prop
argument_list|)
return|;
block|}
comment|/**      * Returns true if current entity contains at least one Declared List property.      *       * @since 1.2      */
specifier|public
name|boolean
name|isContainingDeclaredListProperties
parameter_list|()
block|{
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Relationship
name|r
range|:
name|entity
operator|.
name|getDeclaredRelationships
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|isToMany
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns true if current entity contains at least one List property.      *       * @since 1.1      */
specifier|public
name|boolean
name|isContainingListProperties
parameter_list|()
block|{
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Relationship
name|r
range|:
name|entity
operator|.
name|getRelationships
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|isToMany
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns<code>true</code> if a class associated with this generator is located in      * a package.      */
specifier|public
name|boolean
name|isUsingPackage
parameter_list|()
block|{
return|return
name|packageName
operator|!=
literal|null
return|;
block|}
comment|/**      * Returns<code>true</code> if a superclass class associated with this generator is      * located in a package.      */
specifier|public
name|boolean
name|isUsingSuperPackage
parameter_list|()
block|{
return|return
name|superPackageName
operator|!=
literal|null
return|;
block|}
comment|/** Returns entity for the class associated with this generator. */
specifier|public
name|ObjEntity
name|getEntity
parameter_list|()
block|{
return|return
name|entity
return|;
block|}
comment|/**      * @param entity The entity to set.      */
specifier|protected
name|void
name|setObjEntity
parameter_list|(
name|ObjEntity
name|entity
parameter_list|)
block|{
name|this
operator|.
name|entity
operator|=
name|entity
expr_stmt|;
block|}
comment|/**      * Returns the fully qualified super class of the data object class associated with      * this generator      */
specifier|public
name|String
name|getSuperClassName
parameter_list|()
block|{
return|return
name|superClassName
return|;
block|}
comment|/**      * Sets the fully qualified super class of the data object class associated with this      * generator      */
specifier|protected
name|void
name|setSuperClassName
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|superClassName
operator|=
name|value
expr_stmt|;
block|}
block|}
end_class

end_unit

