begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conn
operator|.
name|DataSourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * Class that does saving of Cayenne configuration.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|ConfigSaver
block|{
specifier|protected
name|ConfigSaverDelegate
name|delegate
decl_stmt|;
comment|/**      * Constructor for ConfigSaver.      */
specifier|public
name|ConfigSaver
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Constructor for ConfigSaver.      */
specifier|public
name|ConfigSaver
parameter_list|(
name|ConfigSaverDelegate
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
comment|/**      * Saves domains into the specified file. Assumes that the maps have already been      * saved.      */
specifier|public
name|void
name|storeDomains
parameter_list|(
name|PrintWriter
name|pw
parameter_list|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"utf-8\"?>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<domains project-version=\""
operator|+
name|delegate
operator|.
name|projectVersion
argument_list|()
operator|+
literal|"\">"
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|delegate
operator|.
name|domainNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|storeDomain
argument_list|(
name|pw
argument_list|,
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|String
argument_list|>
name|views
init|=
name|delegate
operator|.
name|viewNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|views
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|storeDataView
argument_list|(
name|pw
argument_list|,
name|views
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|(
literal|"</domains>"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|storeDataView
parameter_list|(
name|PrintWriter
name|pw
parameter_list|,
name|String
name|dataViewName
parameter_list|)
block|{
name|String
name|location
init|=
name|delegate
operator|.
name|viewLocation
argument_list|(
name|dataViewName
argument_list|)
decl_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"<view name=\""
operator|+
name|dataViewName
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\" location=\""
operator|+
name|location
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\"/>"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|storeDomain
parameter_list|(
name|PrintWriter
name|pw
parameter_list|,
name|String
name|domainName
parameter_list|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"<domain name=\""
operator|+
name|domainName
operator|.
name|trim
argument_list|()
operator|+
literal|"\">"
argument_list|)
expr_stmt|;
comment|// store properties
name|Iterator
name|properties
init|=
name|delegate
operator|.
name|propertyNames
argument_list|(
name|domainName
argument_list|)
decl_stmt|;
name|boolean
name|breakNeeded
init|=
name|properties
operator|.
name|hasNext
argument_list|()
decl_stmt|;
while|while
condition|(
name|properties
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|value
init|=
name|delegate
operator|.
name|propertyValue
argument_list|(
name|domainName
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|pw
operator|.
name|print
argument_list|(
literal|"\t<property name=\""
operator|+
name|Util
operator|.
name|encodeXmlAttribute
argument_list|(
name|name
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\" value=\""
operator|+
name|Util
operator|.
name|encodeXmlAttribute
argument_list|(
name|value
operator|.
name|trim
argument_list|()
argument_list|)
operator|+
literal|"\"/>"
argument_list|)
expr_stmt|;
block|}
comment|// store maps
name|Iterator
name|maps
init|=
name|delegate
operator|.
name|mapNames
argument_list|(
name|domainName
argument_list|)
decl_stmt|;
if|if
condition|(
name|maps
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|breakNeeded
condition|)
block|{
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|breakNeeded
operator|=
literal|true
expr_stmt|;
block|}
while|while
condition|(
name|maps
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|mapName
init|=
operator|(
name|String
operator|)
name|maps
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|mapLocation
init|=
name|delegate
operator|.
name|mapLocation
argument_list|(
name|domainName
argument_list|,
name|mapName
argument_list|)
decl_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t<map name=\""
operator|+
name|mapName
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\" location=\""
operator|+
name|mapLocation
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\"/>"
argument_list|)
expr_stmt|;
block|}
comment|// store nodes
name|Iterator
name|nodes
init|=
name|delegate
operator|.
name|nodeNames
argument_list|(
name|domainName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|hasNext
argument_list|()
operator|&&
name|breakNeeded
condition|)
block|{
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|nodes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|nodeName
init|=
operator|(
name|String
operator|)
name|nodes
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|datasource
init|=
name|delegate
operator|.
name|nodeDataSourceName
argument_list|(
name|domainName
argument_list|,
name|nodeName
argument_list|)
decl_stmt|;
name|String
name|adapter
init|=
name|delegate
operator|.
name|nodeAdapterName
argument_list|(
name|domainName
argument_list|,
name|nodeName
argument_list|)
decl_stmt|;
name|String
name|factory
init|=
name|delegate
operator|.
name|nodeFactoryName
argument_list|(
name|domainName
argument_list|,
name|nodeName
argument_list|)
decl_stmt|;
name|Iterator
name|mapNames
init|=
name|delegate
operator|.
name|linkedMapNames
argument_list|(
name|domainName
argument_list|,
name|nodeName
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t<node name=\""
operator|+
name|nodeName
operator|.
name|trim
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|datasource
operator|!=
literal|null
condition|)
block|{
name|datasource
operator|=
name|datasource
operator|.
name|trim
argument_list|()
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t\t datasource=\""
operator|+
name|datasource
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|adapter
operator|!=
literal|null
condition|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"\t\t adapter=\""
operator|+
name|adapter
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"\t\t factory=\""
operator|+
name|factory
operator|.
name|trim
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
while|while
condition|(
name|mapNames
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|mapName
init|=
operator|(
name|String
operator|)
name|mapNames
operator|.
name|next
argument_list|()
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t\t\t<map-ref name=\""
operator|+
name|mapName
operator|.
name|trim
argument_list|()
operator|+
literal|"\"/>"
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|(
literal|"\t</node>"
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|(
literal|"</domain>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|attribute
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
return|return
literal|" "
operator|+
name|key
operator|+
literal|"=\""
operator|+
name|Util
operator|.
name|encodeXmlAttribute
argument_list|(
name|value
argument_list|)
operator|+
literal|"\""
return|;
else|else
return|return
literal|""
return|;
block|}
comment|/**      * Stores DataSolurceInfo to the specified PrintWriter.<code>info</code> object may      * contain full or partial information.      */
specifier|public
name|void
name|storeDataNode
parameter_list|(
name|PrintWriter
name|pw
parameter_list|,
name|Project
name|project
parameter_list|,
name|DataSourceInfo
name|info
parameter_list|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"utf-8\"?>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<driver"
operator|+
name|attribute
argument_list|(
literal|"project-version"
argument_list|,
name|Project
operator|.
name|CURRENT_PROJECT_VERSION
argument_list|)
operator|+
name|attribute
argument_list|(
literal|"class"
argument_list|,
name|info
operator|.
name|getJdbcDriver
argument_list|()
argument_list|)
operator|+
literal|">"
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getDataSourceUrl
argument_list|()
operator|!=
literal|null
condition|)
name|pw
operator|.
name|println
argument_list|(
literal|"\t<url"
operator|+
name|attribute
argument_list|(
literal|"value"
argument_list|,
name|info
operator|.
name|getDataSourceUrl
argument_list|()
argument_list|)
operator|+
literal|"/>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t<connectionPool"
operator|+
name|attribute
argument_list|(
literal|"min"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|info
operator|.
name|getMinConnections
argument_list|()
argument_list|)
argument_list|)
operator|+
name|attribute
argument_list|(
literal|"max"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|info
operator|.
name|getMaxConnections
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"/>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t<login"
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getUserName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
name|attribute
argument_list|(
literal|"userName"
argument_list|,
name|info
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getPasswordLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|DataSourceInfo
operator|.
name|PASSWORD_LOCATION_MODEL
argument_list|)
condition|)
block|{
name|PasswordEncoding
name|encoder
init|=
name|info
operator|.
name|getPasswordEncoder
argument_list|()
decl_stmt|;
if|if
condition|(
name|encoder
operator|!=
literal|null
condition|)
name|pw
operator|.
name|print
argument_list|(
name|attribute
argument_list|(
literal|"password"
argument_list|,
name|encoder
operator|.
name|encodePassword
argument_list|(
name|info
operator|.
name|getPassword
argument_list|()
argument_list|,
name|info
operator|.
name|getPasswordEncoderKey
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|info
operator|.
name|getPasswordLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|DataSourceInfo
operator|.
name|PASSWORD_LOCATION_CLASSPATH
argument_list|)
condition|)
block|{
if|if
condition|(
name|info
operator|.
name|getPasswordSource
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|File
name|passwordFile
init|=
operator|new
name|File
argument_list|(
name|project
operator|.
name|getProjectDirectory
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|info
operator|.
name|getPasswordSource
argument_list|()
argument_list|)
decl_stmt|;
name|PasswordEncoding
name|encoder
init|=
name|info
operator|.
name|getPasswordEncoder
argument_list|()
decl_stmt|;
if|if
condition|(
name|encoder
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|passwordFile
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
name|encoder
operator|.
name|encodePassword
argument_list|(
name|info
operator|.
name|getPassword
argument_list|()
argument_list|,
name|info
operator|.
name|getPasswordEncoderKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|exception
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|exception
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|pw
operator|.
name|println
argument_list|(
name|attribute
argument_list|(
literal|"encoderClass"
argument_list|,
name|info
operator|.
name|getPasswordEncoderClass
argument_list|()
argument_list|)
operator|+
name|attribute
argument_list|(
literal|"encoderKey"
argument_list|,
name|info
operator|.
name|getPasswordEncoderKey
argument_list|()
argument_list|)
operator|+
name|attribute
argument_list|(
literal|"passwordLocation"
argument_list|,
name|info
operator|.
name|getPasswordLocation
argument_list|()
argument_list|)
operator|+
name|attribute
argument_list|(
literal|"passwordSource"
argument_list|,
name|info
operator|.
name|getPasswordSource
argument_list|()
argument_list|)
operator|+
literal|"/>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</driver>"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

