begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|hessian
operator|.
name|service
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|RemoteService
import|;
end_import

begin_comment
comment|/**  * An extension of the<code>com.caucho.hessian.server.HessianServlet</code> that  * installs default Cayenne handlers, simplifying<code>web.xml</code> configuration.  * Here is a sample configuration:  *   *<pre>  *&lt;servlet&gt;  *&lt;servlet-name&gt;cayenne&lt;/servlet-name&gt;  *&lt;servlet-class&gt;org.apache.cayenne.remote.hessian.service.HessianServlet&lt;/servlet-class&gt;  *&lt;/servlet&gt;  *                          *&lt;servlet-mapping&gt;  *&lt;servlet-name&gt;cayenne&lt;/servlet-name&gt;  *&lt;url-pattern&gt;/cayenne&lt;/url-pattern&gt;  *&lt;/servlet-mapping&gt;  *</pre>  *   * Custom service class and interface can be specified in a manner compatible with Hessian  * recommendations, namely via<em>service-class</em> and<em>api-class</em> servlet  * parameters.  *   * @since 1.2  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|HessianServlet
extends|extends
name|com
operator|.
name|caucho
operator|.
name|hessian
operator|.
name|server
operator|.
name|HessianServlet
block|{
comment|// config parameters compatible with Hessian parameter names
specifier|static
specifier|final
name|String
name|API_CLASS_PARAMETER
init|=
literal|"api-class"
decl_stmt|;
specifier|static
specifier|final
name|String
name|SERVICE_CLASS_PARAMETER
init|=
literal|"service-class"
decl_stmt|;
comment|/**      * Installs {@link HessianService} to respond to {@link RemoteService} requests.      */
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|Class
name|apiClass
init|=
name|createAPIClass
argument_list|(
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|apiClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Can't configure service API class"
argument_list|)
throw|;
block|}
name|setAPIClass
argument_list|(
name|apiClass
argument_list|)
expr_stmt|;
name|HessianService
name|service
init|=
name|createService
argument_list|(
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Error configuring service "
argument_list|)
throw|;
block|}
name|service
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|setSerializerFactory
argument_list|(
name|service
operator|.
name|createSerializerFactory
argument_list|()
argument_list|)
expr_stmt|;
name|setService
argument_list|(
name|service
argument_list|)
expr_stmt|;
comment|// proceed to super
name|super
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|HessianService
name|createService
parameter_list|(
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|String
name|className
init|=
name|config
operator|.
name|getInitParameter
argument_list|(
name|SERVICE_CLASS_PARAMETER
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|HessianService
argument_list|()
return|;
block|}
try|try
block|{
name|Class
name|serviceClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|,
literal|true
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|HessianService
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|serviceClass
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Service class must be a subclass of HessianService: "
operator|+
name|className
argument_list|)
throw|;
block|}
return|return
operator|(
name|HessianService
operator|)
name|serviceClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ServletException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Error instantiating service class "
operator|+
name|className
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|Class
name|createAPIClass
parameter_list|(
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|String
name|interfaceName
init|=
name|config
operator|.
name|getInitParameter
argument_list|(
name|API_CLASS_PARAMETER
argument_list|)
decl_stmt|;
if|if
condition|(
name|interfaceName
operator|==
literal|null
condition|)
block|{
return|return
name|RemoteService
operator|.
name|class
return|;
block|}
try|try
block|{
name|Class
name|serviceInterface
init|=
name|Class
operator|.
name|forName
argument_list|(
name|interfaceName
argument_list|,
literal|true
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|RemoteService
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|serviceInterface
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Service interface must be a subinterface of RemoteService: "
operator|+
name|interfaceName
argument_list|)
throw|;
block|}
return|return
name|serviceInterface
return|;
block|}
catch|catch
parameter_list|(
name|ServletException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Error instantiating service interface "
operator|+
name|interfaceName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

