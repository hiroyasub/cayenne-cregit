begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|sqlserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|OperationObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|QueryLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|BatchAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|BatchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|InsertBatchQuery
import|;
end_import

begin_comment
comment|/**  * @since 1.2  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|SQLServerBatchAction
extends|extends
name|BatchAction
block|{
specifier|public
name|SQLServerBatchAction
parameter_list|(
name|BatchQuery
name|batchQuery
parameter_list|,
name|DbAdapter
name|adapter
parameter_list|,
name|EntityResolver
name|entityResolver
parameter_list|)
block|{
name|super
argument_list|(
name|batchQuery
argument_list|,
name|adapter
argument_list|,
name|entityResolver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|performAction
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|OperationObserver
name|observer
parameter_list|)
throws|throws
name|SQLException
throws|,
name|Exception
block|{
comment|// this condition checks if identity columns are present in the query and adapter
comment|// is not ready to process them... e.g. if we are using a MS driver...
name|boolean
name|identityOverride
init|=
name|expectsToOverrideIdentityColumns
argument_list|()
decl_stmt|;
if|if
condition|(
name|identityOverride
condition|)
block|{
name|setIdentityInsert
argument_list|(
name|connection
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|super
operator|.
name|performAction
argument_list|(
name|connection
argument_list|,
name|observer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// important: turn off IDENTITY_INSERT as SQL Server won't be able to process
comment|// other identity columns in the same transaction
comment|// TODO: if an error happens here this would mask the parent error
if|if
condition|(
name|identityOverride
condition|)
block|{
name|setIdentityInsert
argument_list|(
name|connection
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|setIdentityInsert
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|boolean
name|on
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|flag
init|=
name|on
condition|?
literal|" ON"
else|:
literal|" OFF"
decl_stmt|;
name|String
name|configSQL
init|=
literal|"SET IDENTITY_INSERT "
operator|+
name|query
operator|.
name|getDbEntity
argument_list|()
operator|.
name|getFullyQualifiedName
argument_list|()
operator|+
name|flag
decl_stmt|;
name|QueryLogger
operator|.
name|logQuery
argument_list|(
name|configSQL
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
expr_stmt|;
name|Statement
name|statement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|statement
operator|.
name|execute
argument_list|(
name|configSQL
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
block|}
comment|/**      * Returns whether a table has identity columns.      */
specifier|protected
name|boolean
name|expectsToOverrideIdentityColumns
parameter_list|()
block|{
comment|// jTDS driver supports identity columns, no need for tricks...
if|if
condition|(
name|getAdapter
argument_list|()
operator|.
name|supportsGeneratedKeys
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|query
operator|instanceof
name|InsertBatchQuery
operator|)
operator|||
name|query
operator|.
name|getDbEntity
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// find identity attributes
for|for
control|(
name|Attribute
name|attribute
range|:
name|query
operator|.
name|getDbEntity
argument_list|()
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|DbAttribute
operator|)
name|attribute
operator|)
operator|.
name|isGenerated
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

