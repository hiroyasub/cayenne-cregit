begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A metadata object that defines how a row in a result set can be converted to result  * objects. SQLResultSet can map to a single scalar, a single entity or a mix of scalars  * and entities that is represented as an Object[].  *   * @since 3.0  */
end_comment

begin_class
specifier|public
class|class
name|SQLResultSet
block|{
specifier|protected
name|String
name|name
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Object
argument_list|>
name|resultDescriptors
decl_stmt|;
comment|/**      * Creates an unnamed SQLResultSet.      */
specifier|public
name|SQLResultSet
parameter_list|()
block|{
block|}
comment|/**      * Creates a named SQLResultSet.      */
specifier|public
name|SQLResultSet
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Returns a list of result descriptors. Column descriptors are returned as Strings,      * entity descriptors - as {@link EntityResult}.      */
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getResultDescriptors
parameter_list|()
block|{
return|return
name|resultDescriptors
operator|!=
literal|null
condition|?
name|resultDescriptors
else|:
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
specifier|public
name|int
index|[]
name|getEntityResultPositions
parameter_list|()
block|{
if|if
condition|(
name|resultDescriptors
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|int
index|[
literal|0
index|]
return|;
block|}
name|int
index|[]
name|positions
init|=
operator|new
name|int
index|[
name|resultDescriptors
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|positions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|resultDescriptors
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|EntityResult
condition|)
block|{
name|positions
index|[
name|j
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
name|int
index|[]
name|trimmed
init|=
operator|new
name|int
index|[
name|j
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|positions
argument_list|,
literal|0
argument_list|,
name|trimmed
argument_list|,
literal|0
argument_list|,
name|j
argument_list|)
expr_stmt|;
return|return
name|trimmed
return|;
block|}
specifier|public
name|int
index|[]
name|getColumnResultPositions
parameter_list|()
block|{
if|if
condition|(
name|resultDescriptors
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|int
index|[
literal|0
index|]
return|;
block|}
name|int
index|[]
name|positions
init|=
operator|new
name|int
index|[
name|resultDescriptors
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|positions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|resultDescriptors
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|instanceof
name|String
condition|)
block|{
name|positions
index|[
name|j
operator|++
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
name|int
index|[]
name|trimmed
init|=
operator|new
name|int
index|[
name|j
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|positions
argument_list|,
literal|0
argument_list|,
name|trimmed
argument_list|,
literal|0
argument_list|,
name|j
argument_list|)
expr_stmt|;
return|return
name|trimmed
return|;
block|}
specifier|public
name|EntityResult
name|getEntityResult
parameter_list|(
name|int
name|position
parameter_list|)
block|{
if|if
condition|(
name|resultDescriptors
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Invalid EntityResult index: "
operator|+
name|position
argument_list|)
throw|;
block|}
name|Object
name|result
init|=
name|resultDescriptors
operator|.
name|get
argument_list|(
name|position
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|instanceof
name|EntityResult
condition|)
block|{
return|return
operator|(
name|EntityResult
operator|)
name|result
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Result at position "
operator|+
name|position
operator|+
literal|" is not an entity result"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getColumnResult
parameter_list|(
name|int
name|position
parameter_list|)
block|{
if|if
condition|(
name|resultDescriptors
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Invalid column index: "
operator|+
name|position
argument_list|)
throw|;
block|}
name|Object
name|result
init|=
name|resultDescriptors
operator|.
name|get
argument_list|(
name|position
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|instanceof
name|String
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|result
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Result at position "
operator|+
name|position
operator|+
literal|" is not a column result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|addEntityResult
parameter_list|(
name|EntityResult
name|entityResult
parameter_list|)
block|{
if|if
condition|(
name|resultDescriptors
operator|==
literal|null
condition|)
block|{
name|resultDescriptors
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|resultDescriptors
operator|.
name|add
argument_list|(
name|entityResult
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a result set column name to the mapping.      */
specifier|public
name|void
name|addColumnResult
parameter_list|(
name|String
name|column
parameter_list|)
block|{
if|if
condition|(
name|resultDescriptors
operator|==
literal|null
condition|)
block|{
name|resultDescriptors
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|resultDescriptors
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

