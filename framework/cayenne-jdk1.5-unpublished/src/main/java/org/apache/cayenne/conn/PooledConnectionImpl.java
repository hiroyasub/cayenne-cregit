begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|ConnectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|ConnectionEventListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|PooledConnection
import|;
end_import

begin_comment
comment|/**  * PooledConnectionImpl is an implementation of a pooling wrapper for the database  * connection as per JDBC3 spec. Most of the modern JDBC drivers should have its own  * implementation that may be used instead of this class.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|PooledConnectionImpl
implements|implements
name|PooledConnection
block|{
specifier|private
name|Connection
name|connectionObj
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ConnectionEventListener
argument_list|>
name|connectionEventListeners
decl_stmt|;
specifier|private
name|boolean
name|hadErrors
decl_stmt|;
specifier|private
name|DataSource
name|connectionSource
decl_stmt|;
specifier|private
name|String
name|userName
decl_stmt|;
specifier|private
name|String
name|password
decl_stmt|;
specifier|protected
name|PooledConnectionImpl
parameter_list|()
block|{
comment|// TODO: maybe remove synchronization and use
comment|// FastArrayList from commons-collections? After
comment|// all the only listener is usually pool manager.
name|this
operator|.
name|connectionEventListeners
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ConnectionEventListener
argument_list|>
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Creates new PooledConnection */
specifier|public
name|PooledConnectionImpl
parameter_list|(
name|DataSource
name|connectionSource
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|connectionSource
operator|=
name|connectionSource
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
specifier|public
name|void
name|reconnect
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|connectionObj
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connectionObj
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
comment|// ignore exception, since connection is expected
comment|// to be in a bad state
block|}
finally|finally
block|{
name|connectionObj
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|connectionObj
operator|=
operator|(
name|userName
operator|!=
literal|null
operator|)
condition|?
name|connectionSource
operator|.
name|getConnection
argument_list|(
name|userName
argument_list|,
name|password
argument_list|)
else|:
name|connectionSource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addConnectionEventListener
parameter_list|(
name|ConnectionEventListener
name|listener
parameter_list|)
block|{
synchronized|synchronized
init|(
name|connectionEventListeners
init|)
block|{
if|if
condition|(
operator|!
name|connectionEventListeners
operator|.
name|contains
argument_list|(
name|listener
argument_list|)
condition|)
name|connectionEventListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeConnectionEventListener
parameter_list|(
name|ConnectionEventListener
name|listener
parameter_list|)
block|{
synchronized|synchronized
init|(
name|connectionEventListeners
init|)
block|{
name|connectionEventListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|SQLException
block|{
synchronized|synchronized
init|(
name|connectionEventListeners
init|)
block|{
comment|// remove all listeners
name|connectionEventListeners
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connectionObj
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connectionObj
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|connectionObj
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|connectionObj
operator|==
literal|null
condition|)
block|{
name|reconnect
argument_list|()
expr_stmt|;
block|}
comment|// set autocommit to false to return connection
comment|// always in consistent state
if|if
condition|(
operator|!
name|connectionObj
operator|.
name|getAutoCommit
argument_list|()
condition|)
block|{
try|try
block|{
name|connectionObj
operator|.
name|setAutoCommit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
comment|// try applying Sybase patch
name|ConnectionWrapper
operator|.
name|sybaseAutoCommitPatch
argument_list|(
name|connectionObj
argument_list|,
name|sqlEx
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|connectionObj
operator|.
name|clearWarnings
argument_list|()
expr_stmt|;
return|return
operator|new
name|ConnectionWrapper
argument_list|(
name|connectionObj
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|protected
name|void
name|returnConnectionToThePool
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// do not return to pool bad connections
if|if
condition|(
name|hadErrors
condition|)
name|close
argument_list|()
expr_stmt|;
else|else
comment|// notify the listeners that connection is no longer used by application...
name|this
operator|.
name|connectionClosedNotification
argument_list|()
expr_stmt|;
block|}
comment|/**      * This method creates and sents an event to listeners when an error occurs in the      * underlying connection. Listeners can have special logic to analyze the error and do      * things like closing this PooledConnection (if the error is fatal), etc...      */
specifier|public
name|void
name|connectionErrorNotification
parameter_list|(
name|SQLException
name|exception
parameter_list|)
block|{
comment|// hint for later to avoid returning bad connections to the pool
name|hadErrors
operator|=
literal|true
expr_stmt|;
synchronized|synchronized
init|(
name|connectionEventListeners
init|)
block|{
if|if
condition|(
name|connectionEventListeners
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|ConnectionEvent
name|closedEvent
init|=
operator|new
name|ConnectionEvent
argument_list|(
name|this
argument_list|,
name|exception
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|ConnectionEventListener
name|nextListener
range|:
name|connectionEventListeners
control|)
block|{
name|nextListener
operator|.
name|connectionErrorOccurred
argument_list|(
name|closedEvent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Creates and sends an event to listeners when a user closes java.sql.Connection      * object belonging to this PooledConnection.      */
specifier|protected
name|void
name|connectionClosedNotification
parameter_list|()
block|{
synchronized|synchronized
init|(
name|connectionEventListeners
init|)
block|{
if|if
condition|(
name|connectionEventListeners
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|ConnectionEvent
name|closedEvent
init|=
operator|new
name|ConnectionEvent
argument_list|(
name|this
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|ConnectionEventListener
name|nextListener
range|:
name|connectionEventListeners
control|)
block|{
name|nextListener
operator|.
name|connectionClosed
argument_list|(
name|closedEvent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

