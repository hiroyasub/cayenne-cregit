begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|util
operator|.
name|DefaultOperationObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * QueryResult encapsulates a result of execution of zero or more queries using  * QueryEngine. QueryResult supports queries with multiple mixed selects and updates, such  * as ProcedureQueries.  *   */
end_comment

begin_class
specifier|public
class|class
name|QueryResult
extends|extends
name|DefaultOperationObserver
block|{
comment|// a map with order of iteration == to the order of insertion
specifier|protected
name|Map
name|queries
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
comment|/**      * Clears any previously collected information.      */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|queries
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns an iterator over all executed queries in the order they were executed.      */
specifier|public
name|Iterator
name|getQueries
parameter_list|()
block|{
return|return
name|queries
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * Returns a list of all results of a given query. This is potentially a mix of      * java.lang.Integer values for update operations and java.util.List for select      * operations. Results are returned in the order they were obtained.      */
specifier|public
name|List
name|getResults
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|List
name|list
init|=
operator|(
name|List
operator|)
name|queries
operator|.
name|get
argument_list|(
name|query
argument_list|)
decl_stmt|;
return|return
operator|(
name|list
operator|!=
literal|null
operator|)
condition|?
name|list
else|:
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
comment|/**      * Returns the first update count for the query. This is a shortcut for      *<code>(Integer)getUpdates(query).get(0)<code>, kind of like Google's "I'm feeling lucky".      * Returns -1 if no update count is found for the query.      */
specifier|public
name|int
name|getFirstUpdateCount
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|List
name|allResults
init|=
name|getResults
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|allResults
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|Iterator
name|it
init|=
name|allResults
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|object
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// if int
if|if
condition|(
name|object
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|object
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|// if batch...
if|else if
condition|(
name|object
operator|instanceof
name|int
index|[]
condition|)
block|{
name|int
index|[]
name|counts
init|=
operator|(
name|int
index|[]
operator|)
name|object
decl_stmt|;
return|return
name|counts
operator|.
name|length
operator|>
literal|0
condition|?
name|counts
index|[
literal|0
index|]
else|:
operator|-
literal|1
return|;
block|}
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Returns the first update count. Returns int[0] if there was no update results for      * the query.      *       * @since 1.2      */
specifier|public
name|int
index|[]
name|getFirstUpdateCounts
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|List
name|allResults
init|=
name|getResults
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|allResults
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|Iterator
name|it
init|=
name|allResults
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|object
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// if int
if|if
condition|(
name|object
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|new
name|int
index|[]
block|{
operator|(
operator|(
name|Number
operator|)
name|object
operator|)
operator|.
name|intValue
argument_list|()
block|}
return|;
block|}
comment|// if batch...
if|else if
condition|(
name|object
operator|instanceof
name|int
index|[]
condition|)
block|{
return|return
operator|(
name|int
index|[]
operator|)
name|object
return|;
block|}
block|}
block|}
return|return
operator|new
name|int
index|[
literal|0
index|]
return|;
block|}
comment|/**      * Returns the first results for the query. This is a shortcut for      *<code>(List)getRows(query).get(0)<code>, kind of like Google's "I'm feeling lucky".      */
specifier|public
name|List
name|getFirstRows
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|List
name|allResults
init|=
name|getResults
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|allResults
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
else|else
block|{
for|for
control|(
name|Object
name|obj
range|:
name|allResults
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|List
condition|)
block|{
return|return
operator|(
name|List
operator|)
name|obj
return|;
block|}
block|}
block|}
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
comment|/**      * Returns a List that itself contains Lists of data rows for each ResultSet returned      * by the query. ResultSets are returned in the oder they were obtained. Any updates      * that were performed are not included.      */
specifier|public
name|List
name|getRows
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|List
name|allResults
init|=
name|getResults
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|allResults
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|allResults
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|List
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
comment|/**      * Returns a List that contains java.lang.Integer objects for each one of the update      * counts returned by the query. Update counts are returned in the order they were      * obtained. Batched and regular updates are combined together.      */
specifier|public
name|List
name|getUpdates
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
name|List
name|allResults
init|=
name|getResults
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|allResults
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|allResults
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|object
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|Number
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|int
index|[]
condition|)
block|{
name|int
index|[]
name|ints
init|=
operator|(
name|int
index|[]
operator|)
name|object
decl_stmt|;
for|for
control|(
name|int
name|anInt
range|:
name|ints
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|anInt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|list
return|;
block|}
comment|/**      * Overrides superclass implementation to rethrow an exception immediately.      */
annotation|@
name|Override
specifier|public
name|void
name|nextQueryException
parameter_list|(
name|Query
name|query
parameter_list|,
name|Exception
name|ex
parameter_list|)
block|{
name|super
operator|.
name|nextQueryException
argument_list|(
name|query
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Query exception."
argument_list|,
name|Util
operator|.
name|unwindException
argument_list|(
name|ex
argument_list|)
argument_list|)
throw|;
block|}
comment|/**      * Overrides superclass implementation to rethrow an exception immediately.      */
annotation|@
name|Override
specifier|public
name|void
name|nextGlobalException
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|super
operator|.
name|nextGlobalException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Global exception."
argument_list|,
name|Util
operator|.
name|unwindException
argument_list|(
name|ex
argument_list|)
argument_list|)
throw|;
block|}
comment|/**      * Always returns<code>false</code>, iterated results are not supported.      */
annotation|@
name|Override
specifier|public
name|boolean
name|isIteratedResult
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextBatchCount
parameter_list|(
name|Query
name|query
parameter_list|,
name|int
index|[]
name|resultCount
parameter_list|)
block|{
name|List
name|list
init|=
operator|(
name|List
operator|)
name|queries
operator|.
name|get
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|queries
operator|.
name|put
argument_list|(
name|query
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|resultCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextCount
parameter_list|(
name|Query
name|query
parameter_list|,
name|int
name|resultCount
parameter_list|)
block|{
name|super
operator|.
name|nextCount
argument_list|(
name|query
argument_list|,
name|resultCount
argument_list|)
expr_stmt|;
name|List
name|list
init|=
operator|(
name|List
operator|)
name|queries
operator|.
name|get
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|queries
operator|.
name|put
argument_list|(
name|query
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|resultCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextDataRows
parameter_list|(
name|Query
name|query
parameter_list|,
name|List
name|dataRows
parameter_list|)
block|{
name|super
operator|.
name|nextDataRows
argument_list|(
name|query
argument_list|,
name|dataRows
argument_list|)
expr_stmt|;
name|List
name|list
init|=
operator|(
name|List
operator|)
name|queries
operator|.
name|get
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|queries
operator|.
name|put
argument_list|(
name|query
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|dataRows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextDataRows
parameter_list|(
name|Query
name|q
parameter_list|,
name|ResultIterator
name|it
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Iterated results are not supported by "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

