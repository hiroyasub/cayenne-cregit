begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|openbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|trans
operator|.
name|QualifierTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|trans
operator|.
name|QueryAssembler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_comment
comment|/**  * Translates query qualifier to SQL. Used as a helper class by query translators.  *   * @author<a href="mailto:mkienenb@alaska.net">Mike Kienenberger</a>  * @author Andrus Adamchik  * @since 1.1  */
end_comment

begin_class
specifier|public
class|class
name|OpenBaseQualifierTranslator
extends|extends
name|QualifierTranslator
block|{
specifier|public
name|OpenBaseQualifierTranslator
parameter_list|(
name|QueryAssembler
name|queryAssembler
parameter_list|)
block|{
name|super
argument_list|(
name|queryAssembler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startNode
parameter_list|(
name|Expression
name|node
parameter_list|,
name|Expression
name|parentNode
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getOperandCount
argument_list|()
operator|==
literal|2
condition|)
block|{
comment|// binary nodes are the only ones that currently require this
name|detectObjectMatch
argument_list|(
name|node
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|parenthesisNeeded
argument_list|(
name|node
argument_list|,
name|parentNode
argument_list|)
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
block|}
comment|// super implementation has special handling
comment|// of LIKE_IGNORE_CASE and NOT_LIKE_IGNORE_CASE
comment|// OpenBase is case-insensitive by default
comment|// ...
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error appending content"
argument_list|,
name|ioex
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|startNode
argument_list|(
name|node
argument_list|,
name|parentNode
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endNode
parameter_list|(
name|Expression
name|node
parameter_list|,
name|Expression
name|parentNode
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getOperandCount
argument_list|()
operator|==
literal|2
condition|)
block|{
try|try
block|{
comment|// check if we need to use objectMatchTranslator to finish building the
comment|// expression
if|if
condition|(
name|matchingObject
condition|)
block|{
name|appendObjectMatch
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parenthesisNeeded
argument_list|(
name|node
argument_list|,
name|parentNode
argument_list|)
condition|)
name|out
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
comment|// super implementation has special handling
comment|// of LIKE_IGNORE_CASE and NOT_LIKE_IGNORE_CASE
comment|// OpenBase is case-insensitive by default
comment|// ...
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error appending content"
argument_list|,
name|ioex
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|endNode
argument_list|(
name|node
argument_list|,
name|parentNode
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|appendLiteralDirect
parameter_list|(
name|Object
name|val
parameter_list|,
name|DbAttribute
name|attr
parameter_list|,
name|Expression
name|parentExpression
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Special handling of string matching is needed:
comment|// Case-sensitive LIKE must be converted to [x][Y][z] format
if|if
condition|(
name|val
operator|instanceof
name|String
operator|&&
operator|(
name|parentExpression
operator|.
name|getType
argument_list|()
operator|==
name|Expression
operator|.
name|LIKE
operator|||
name|parentExpression
operator|.
name|getType
argument_list|()
operator|==
name|Expression
operator|.
name|NOT_LIKE
operator|)
condition|)
block|{
name|val
operator|=
name|caseSensitiveLikePattern
argument_list|(
operator|(
name|String
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|appendLiteralDirect
argument_list|(
name|val
argument_list|,
name|attr
argument_list|,
name|parentExpression
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|caseSensitiveLikePattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|int
name|len
init|=
name|pattern
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
name|len
operator|*
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|pattern
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'%'
operator|||
name|c
operator|==
literal|'?'
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|c
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|finishedChild
parameter_list|(
name|Expression
name|node
parameter_list|,
name|int
name|childIndex
parameter_list|,
name|boolean
name|hasMoreChildren
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasMoreChildren
condition|)
block|{
return|return;
block|}
comment|// super implementation has special handling
comment|// of LIKE_IGNORE_CASE and NOT_LIKE_IGNORE_CASE
comment|// OpenBase is case-insensitive by default
comment|// ...
try|try
block|{
switch|switch
condition|(
name|node
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Expression
operator|.
name|LIKE_IGNORE_CASE
case|:
name|finishedChildNodeAppendExpression
argument_list|(
name|node
argument_list|,
literal|" LIKE "
argument_list|)
expr_stmt|;
break|break;
case|case
name|Expression
operator|.
name|NOT_LIKE_IGNORE_CASE
case|:
name|finishedChildNodeAppendExpression
argument_list|(
name|node
argument_list|,
literal|" NOT LIKE "
argument_list|)
expr_stmt|;
break|break;
default|default:
name|super
operator|.
name|finishedChild
argument_list|(
name|node
argument_list|,
name|childIndex
argument_list|,
name|hasMoreChildren
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error appending content"
argument_list|,
name|ioex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|finishedChildNodeAppendExpression
parameter_list|(
name|Expression
name|node
parameter_list|,
name|String
name|operation
parameter_list|)
throws|throws
name|IOException
block|{
name|Appendable
name|out
init|=
operator|(
name|matchingObject
operator|)
condition|?
operator|new
name|StringBuilder
argument_list|()
else|:
name|this
operator|.
name|out
decl_stmt|;
name|out
operator|.
name|append
argument_list|(
name|operation
argument_list|)
expr_stmt|;
if|if
condition|(
name|matchingObject
condition|)
block|{
name|objectMatchTranslator
operator|.
name|setOperation
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|objectMatchTranslator
operator|.
name|setExpression
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

