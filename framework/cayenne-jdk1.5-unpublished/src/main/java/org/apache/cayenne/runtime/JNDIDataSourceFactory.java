begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InitialContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|QueryLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_comment
comment|/**  * @since 3.1  */
end_comment

begin_class
specifier|public
class|class
name|JNDIDataSourceFactory
implements|implements
name|DataSourceFactory
block|{
specifier|public
name|DataSource
name|getDataSource
parameter_list|(
name|DataNodeDescriptor
name|nodeDescriptor
parameter_list|)
block|{
try|try
block|{
return|return
name|loadViaJNDI
argument_list|(
name|nodeDescriptor
operator|.
name|getLocation
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
name|QueryLogger
operator|.
name|logConnectFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error loading DataSource from JNDI for location '%s'"
argument_list|,
name|e
argument_list|,
name|nodeDescriptor
operator|.
name|getLocation
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|DataSource
name|loadViaJNDI
parameter_list|(
name|String
name|location
parameter_list|)
throws|throws
name|NamingException
block|{
name|QueryLogger
operator|.
name|logConnect
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|Context
name|context
init|=
operator|new
name|InitialContext
argument_list|()
decl_stmt|;
name|DataSource
name|dataSource
decl_stmt|;
try|try
block|{
name|Context
name|envCtx
init|=
operator|(
name|Context
operator|)
name|context
operator|.
name|lookup
argument_list|(
literal|"java:comp/env"
argument_list|)
decl_stmt|;
name|dataSource
operator|=
operator|(
name|DataSource
operator|)
name|envCtx
operator|.
name|lookup
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|namingEx
parameter_list|)
block|{
comment|// try looking up the location directly...
name|dataSource
operator|=
operator|(
name|DataSource
operator|)
name|context
operator|.
name|lookup
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|QueryLogger
operator|.
name|logConnectSuccess
argument_list|()
expr_stmt|;
return|return
name|dataSource
return|;
block|}
block|}
end_class

end_unit

