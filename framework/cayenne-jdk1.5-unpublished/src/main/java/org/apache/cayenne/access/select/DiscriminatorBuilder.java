begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|select
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|ExtendedTypeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|TraversalHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityInheritanceTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_comment
comment|/**  * @since 3.0  */
end_comment

begin_class
class|class
name|DiscriminatorBuilder
extends|extends
name|MappedColumnBuilder
block|{
specifier|private
name|EntityInheritanceTree
name|node
decl_stmt|;
name|DiscriminatorBuilder
parameter_list|(
name|ExtendedTypeMap
name|extendedTypes
parameter_list|,
name|EntityInheritanceTree
name|node
parameter_list|)
block|{
name|super
argument_list|(
name|extendedTypes
argument_list|)
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
name|List
argument_list|<
name|EntitySelectColumn
argument_list|>
name|buildColumns
parameter_list|()
block|{
name|appendColumns
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|columns
return|;
block|}
specifier|private
name|void
name|appendColumns
parameter_list|(
name|EntityInheritanceTree
name|node
parameter_list|)
block|{
name|ObjEntity
name|entity
init|=
name|node
operator|.
name|getEntity
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|entity
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
name|Expression
name|qualifier
init|=
name|entity
operator|.
name|getDeclaredQualifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|qualifier
operator|!=
literal|null
condition|)
block|{
name|appendColumns
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|EntityInheritanceTree
name|childNode
range|:
name|node
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|appendColumns
argument_list|(
name|childNode
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|appendColumns
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
specifier|final
name|ObjEntity
name|entity
init|=
name|node
operator|.
name|getEntity
argument_list|()
decl_stmt|;
specifier|final
name|DbEntity
name|dbEntity
init|=
name|entity
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
comment|// find and register discriminator columns
name|expression
operator|.
name|traverse
argument_list|(
operator|new
name|TraversalHelper
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|startNode
parameter_list|(
name|Expression
name|node
parameter_list|,
name|Expression
name|parentNode
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|==
name|Expression
operator|.
name|DB_PATH
condition|)
block|{
name|append
argument_list|(
name|dbEntity
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|==
name|Expression
operator|.
name|OBJ_PATH
condition|)
block|{
name|append
argument_list|(
name|entity
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

