begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|CharacterData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|/**  * Static utility methods to work with DOM trees.  *   * @since 1.2  */
end_comment

begin_class
class|class
name|XMLUtil
block|{
comment|// note that per CAY-792, to be locale-safe the format must not contain literal parts
specifier|static
specifier|final
name|String
name|DEFAULT_DATE_FORMAT
init|=
literal|"yyyy-MM-dd HH:mm:ss zzz"
decl_stmt|;
specifier|static
name|DocumentBuilderFactory
name|sharedFactory
decl_stmt|;
comment|/**      * Creates a new instance of DocumentBuilder using the default factory.      */
specifier|static
name|DocumentBuilder
name|newBuilder
parameter_list|()
throws|throws
name|CayenneRuntimeException
block|{
if|if
condition|(
name|sharedFactory
operator|==
literal|null
condition|)
block|{
name|sharedFactory
operator|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
try|try
block|{
return|return
name|sharedFactory
operator|.
name|newDocumentBuilder
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't create DocumentBuilder"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Moves all children of the oldParent to the newParent      */
specifier|static
name|List
argument_list|<
name|Element
argument_list|>
name|replaceParent
parameter_list|(
name|Node
name|oldParent
parameter_list|,
name|Node
name|newParent
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|children
init|=
name|XMLUtil
operator|.
name|getChildren
argument_list|(
name|oldParent
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|child
range|:
name|children
control|)
block|{
name|oldParent
operator|.
name|removeChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|newParent
operator|.
name|appendChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
return|return
name|children
return|;
block|}
comment|/**      * Returns text content of a given Node.      */
specifier|static
name|String
name|getText
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|NodeList
name|nodes
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|nodes
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|text
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|CharacterData
condition|)
block|{
name|text
operator|.
name|append
argument_list|(
operator|(
operator|(
name|CharacterData
operator|)
name|child
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|text
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|text
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Returns the first element among the direct children that has a matching name.      */
specifier|static
name|Element
name|getChild
parameter_list|(
name|Node
name|node
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
name|Predicate
name|p
init|=
operator|new
name|Predicate
argument_list|()
block|{
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|object
decl_stmt|;
return|return
name|name
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getNodeName
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
return|return
operator|(
name|Element
operator|)
name|firstMatch
argument_list|(
name|node
operator|.
name|getChildNodes
argument_list|()
argument_list|,
name|p
argument_list|)
return|;
block|}
comment|/**      * Returns all elements among the direct children that have a matching name.      */
specifier|static
name|List
argument_list|<
name|Element
argument_list|>
name|getChildren
parameter_list|(
name|Node
name|node
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
name|Predicate
name|p
init|=
operator|new
name|Predicate
argument_list|()
block|{
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|object
decl_stmt|;
return|return
name|name
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getNodeName
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
return|return
operator|(
name|List
argument_list|<
name|Element
argument_list|>
operator|)
name|CollectionUtils
operator|.
name|select
argument_list|(
name|getChildren
argument_list|(
name|node
argument_list|)
argument_list|,
name|p
argument_list|)
return|;
block|}
comment|/**      * Returns all children of a given Node that are Elements.      */
specifier|static
name|List
argument_list|<
name|Element
argument_list|>
name|getChildren
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|NodeList
name|list
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|list
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|Element
argument_list|>
argument_list|(
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|list
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|Element
condition|)
block|{
name|children
operator|.
name|add
argument_list|(
operator|(
name|Element
operator|)
name|child
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|children
return|;
block|}
specifier|private
specifier|static
name|Node
name|firstMatch
parameter_list|(
name|NodeList
name|list
parameter_list|,
name|Predicate
name|predicate
parameter_list|)
block|{
name|int
name|len
init|=
name|list
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|list
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|predicate
operator|.
name|evaluate
argument_list|(
name|node
argument_list|)
condition|)
block|{
return|return
name|node
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

