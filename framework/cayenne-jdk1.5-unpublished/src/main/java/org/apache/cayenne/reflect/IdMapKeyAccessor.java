begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_comment
comment|/**  * A stateless read-only accessor of the map key value that is based on the Persistent  * object id. For single-column ID's the accessor returns a single value (e.g. an  * Integer). For multi-column ID's it returns the ObjectId.  *   * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|IdMapKeyAccessor
implements|implements
name|Accessor
block|{
specifier|public
specifier|static
specifier|final
name|Accessor
name|SHARED_ACCESSOR
init|=
operator|new
name|IdMapKeyAccessor
argument_list|()
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"IdMapKeyAccessor"
return|;
block|}
specifier|public
name|Object
name|getValue
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|PropertyException
block|{
if|if
condition|(
name|object
operator|instanceof
name|Persistent
condition|)
block|{
name|ObjectId
name|id
init|=
operator|(
operator|(
name|Persistent
operator|)
name|object
operator|)
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
return|return
name|id
return|;
block|}
name|Map
name|map
init|=
name|id
operator|.
name|getIdSnapshot
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Map
operator|.
name|Entry
name|pkEntry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|pkEntry
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
name|id
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Object must be Persistent: "
operator|+
name|object
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setValue
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
name|newValue
parameter_list|)
throws|throws
name|PropertyException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Setting map key is not supported"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

