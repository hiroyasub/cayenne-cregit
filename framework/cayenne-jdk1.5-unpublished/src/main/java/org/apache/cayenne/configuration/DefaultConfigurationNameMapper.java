begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_comment
comment|/**  * @since 3.1  */
end_comment

begin_class
specifier|public
class|class
name|DefaultConfigurationNameMapper
implements|implements
name|ConfigurationNameMapper
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CAYENNE_PREFIX
init|=
literal|"cayenne-"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CAYENNE_SUFFIX
init|=
literal|".xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DATA_MAP_SUFFIX
init|=
literal|".map.xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DATA_NODE_SUFFIX
init|=
literal|".driver.xml"
decl_stmt|;
specifier|protected
name|ConfigurationNodeVisitor
argument_list|<
name|String
argument_list|>
name|nameMapper
decl_stmt|;
specifier|public
name|DefaultConfigurationNameMapper
parameter_list|()
block|{
name|this
operator|.
name|nameMapper
operator|=
operator|new
name|NameMapper
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|configurationLocation
parameter_list|(
name|ConfigurationNode
name|node
parameter_list|)
block|{
return|return
name|node
operator|.
name|acceptVisitor
argument_list|(
name|nameMapper
argument_list|)
return|;
block|}
specifier|public
name|String
name|configurationLocation
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ConfigurationNode
argument_list|>
name|type
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|DataChannelDescriptor
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|getDataChannelName
argument_list|(
name|name
argument_list|)
return|;
block|}
if|else if
condition|(
name|DataMap
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|getDataMapName
argument_list|(
name|name
argument_list|)
return|;
block|}
if|else if
condition|(
name|DataNodeDescriptor
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|getDataNodeName
argument_list|(
name|name
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unrecognized configuration type: "
operator|+
name|type
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|String
name|configurationNodeName
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ConfigurationNode
argument_list|>
name|type
parameter_list|,
name|Resource
name|resource
parameter_list|)
block|{
name|String
name|path
init|=
name|resource
operator|.
name|getURL
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|lastSlash
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastSlash
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|lastSlash
operator|==
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|lastSlash
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|DataChannelDescriptor
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
name|CAYENNE_PREFIX
argument_list|)
operator|||
operator|!
name|path
operator|.
name|endsWith
argument_list|(
name|CAYENNE_SUFFIX
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|path
operator|.
name|substring
argument_list|(
name|CAYENNE_PREFIX
operator|.
name|length
argument_list|()
argument_list|,
name|path
operator|.
name|length
argument_list|()
operator|-
name|CAYENNE_SUFFIX
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|DataMap
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
name|DATA_MAP_SUFFIX
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|()
operator|-
name|DATA_MAP_SUFFIX
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|DataNodeDescriptor
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
name|DATA_NODE_SUFFIX
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|()
operator|-
name|DATA_NODE_SUFFIX
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unrecognized configuration type: "
operator|+
name|type
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|protected
name|String
name|getDataChannelName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null DataChannelDescriptor name"
argument_list|)
throw|;
block|}
return|return
name|CAYENNE_PREFIX
operator|+
name|name
operator|+
name|CAYENNE_SUFFIX
return|;
block|}
specifier|protected
name|String
name|getDataMapName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null DataMap name"
argument_list|)
throw|;
block|}
return|return
name|name
operator|+
name|DATA_MAP_SUFFIX
return|;
block|}
specifier|protected
name|String
name|getDataNodeName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null DataNode name"
argument_list|)
throw|;
block|}
return|return
name|name
operator|+
name|DATA_NODE_SUFFIX
return|;
block|}
specifier|final
class|class
name|NameMapper
implements|implements
name|ConfigurationNodeVisitor
argument_list|<
name|String
argument_list|>
block|{
specifier|public
name|String
name|visitDataChannelDescriptor
parameter_list|(
name|DataChannelDescriptor
name|descriptor
parameter_list|)
block|{
return|return
name|getDataChannelName
argument_list|(
name|descriptor
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|visitDataMap
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
return|return
name|getDataMapName
argument_list|(
name|dataMap
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|visitDataNodeDescriptor
parameter_list|(
name|DataNodeDescriptor
name|descriptor
parameter_list|)
block|{
return|return
name|getDataNodeName
argument_list|(
name|descriptor
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

