begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|instrument
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|instrument
operator|.
name|Instrumentation
import|;
end_import

begin_comment
comment|/**  * Instrumentation utilities.  *   * @since 3.0  */
end_comment

begin_class
specifier|public
class|class
name|InstrumentUtil
block|{
comment|/**      * A property specifying the name of the instrumentation factory that is used to      * access JVM {@link Instrumentation} instance.      */
specifier|public
specifier|static
specifier|final
name|String
name|INSTRUMENTATION_FACTORY_PROPERTY
init|=
literal|"org.apache.cayenne.instrument.factory"
decl_stmt|;
comment|/**      * Returns JVM instrumentation obtained via a preconfigured factory or from a number      * of "standard" places known to Cayenne.      */
specifier|public
specifier|static
name|Instrumentation
name|getInstrumentation
parameter_list|()
block|{
name|InstrumentationFactory
name|factory
decl_stmt|;
name|String
name|factoryName
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|INSTRUMENTATION_FACTORY_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|factoryName
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|factory
operator|=
operator|(
name|InstrumentationFactory
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|factoryName
argument_list|,
literal|true
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invalid instrumentation factory: "
operator|+
name|factoryName
argument_list|,
name|th
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|factory
operator|=
operator|new
name|CayenneInstrumentationFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|factory
operator|.
name|getInstrumentation
argument_list|()
return|;
block|}
block|}
end_class

end_unit

