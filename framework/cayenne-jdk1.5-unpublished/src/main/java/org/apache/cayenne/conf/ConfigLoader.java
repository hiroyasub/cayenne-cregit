begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_comment
comment|/**  * Class that performs runtime loading of Cayenne configuration.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|ConfigLoader
block|{
specifier|protected
name|XMLReader
name|parser
decl_stmt|;
specifier|protected
name|ConfigLoaderDelegate
name|delegate
decl_stmt|;
comment|/** Creates new ConfigLoader. */
specifier|public
name|ConfigLoader
parameter_list|(
name|ConfigLoaderDelegate
name|delegate
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|delegate
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Delegate must not be null."
argument_list|)
throw|;
block|}
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|parser
operator|=
name|Util
operator|.
name|createXmlReader
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns the delegate.      *       * @return ConfigLoaderDelegate      */
specifier|public
name|ConfigLoaderDelegate
name|getDelegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
comment|/**      * Parses XML input, invoking delegate methods to interpret loaded XML.      *       * @param in      * @return boolean      */
specifier|public
name|boolean
name|loadDomains
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|DefaultHandler
name|handler
init|=
operator|new
name|RootHandler
argument_list|()
decl_stmt|;
name|parser
operator|.
name|setContentHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setErrorHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
try|try
block|{
name|delegate
operator|.
name|startedLoading
argument_list|()
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|finishedLoading
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
name|getDelegate
argument_list|()
operator|.
name|loadError
argument_list|(
name|ioex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|saxex
parameter_list|)
block|{
name|getDelegate
argument_list|()
operator|.
name|loadError
argument_list|(
name|saxex
argument_list|)
expr_stmt|;
block|}
comment|// return true if no failures
return|return
operator|!
name|getDelegate
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|hasFailures
argument_list|()
return|;
block|}
comment|// SAX handlers start below
comment|/**      * Handler for the root element. Its only child must be the "domains" element.      */
specifier|private
class|class
name|RootHandler
extends|extends
name|DefaultHandler
block|{
comment|/**          * Handles the start of a datadomains element. A domains handler is created and          * initialised with the element name and attributes.          *           * @exception SAXException if the tag given is not<code>"domains"</code>          */
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attrs
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"domains"
argument_list|)
condition|)
block|{
name|delegate
operator|.
name|shouldLoadProjectVersion
argument_list|(
name|attrs
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"project-version"
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|DomainsHandler
argument_list|(
name|parser
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SAXParseException
argument_list|(
literal|"<domains> should be the root element.<"
operator|+
name|localName
operator|+
literal|"> is unexpected."
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Handler for the top level "project" element.      */
specifier|private
class|class
name|DomainsHandler
extends|extends
name|AbstractHandler
block|{
comment|/**          * Constructor which just delegates to the superconstructor.          *           * @param parentHandler The handler which should be restored to the parser at the          *            end of the element. Must not be<code>null</code>.          */
specifier|public
name|DomainsHandler
parameter_list|(
name|XMLReader
name|parser
parameter_list|,
name|ContentHandler
name|parentHandler
parameter_list|)
block|{
name|super
argument_list|(
name|parser
argument_list|,
name|parentHandler
argument_list|)
expr_stmt|;
block|}
comment|/**          * Handles the start of a top-level element within the project. An appropriate          * handler is created and initialised with the details of the element.          */
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"domain"
argument_list|)
condition|)
block|{
operator|new
name|DomainHandler
argument_list|(
name|getParser
argument_list|()
argument_list|,
name|this
argument_list|)
operator|.
name|init
argument_list|(
name|localName
argument_list|,
name|atts
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"view"
argument_list|)
condition|)
block|{
operator|new
name|ViewHandler
argument_list|(
name|getParser
argument_list|()
argument_list|,
name|this
argument_list|)
operator|.
name|init
argument_list|(
name|atts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|message
init|=
literal|"<domain> or<view> are only valid children of<domains>.<"
operator|+
name|localName
operator|+
literal|"> is unexpected."
decl_stmt|;
throw|throw
operator|new
name|SAXParseException
argument_list|(
name|message
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
class|class
name|ViewHandler
extends|extends
name|AbstractHandler
block|{
specifier|public
name|ViewHandler
parameter_list|(
name|XMLReader
name|parser
parameter_list|,
name|ContentHandler
name|parentHandler
parameter_list|)
block|{
name|super
argument_list|(
name|parser
argument_list|,
name|parentHandler
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|Attributes
name|attrs
parameter_list|)
block|{
name|String
name|name
init|=
name|attrs
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|location
init|=
name|attrs
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"location"
argument_list|)
decl_stmt|;
name|delegate
operator|.
name|shouldRegisterDataView
argument_list|(
name|name
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Handler for the "domain" element.      */
specifier|private
class|class
name|DomainHandler
extends|extends
name|AbstractHandler
block|{
specifier|private
name|String
name|domainName
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DataMap
argument_list|>
name|mapLocations
decl_stmt|;
specifier|public
name|DomainHandler
parameter_list|(
name|XMLReader
name|parser
parameter_list|,
name|ContentHandler
name|parentHandler
parameter_list|)
block|{
name|super
argument_list|(
name|parser
argument_list|,
name|parentHandler
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|String
name|name
parameter_list|,
name|Attributes
name|attrs
parameter_list|)
block|{
name|domainName
operator|=
name|attrs
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|mapLocations
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DataMap
argument_list|>
argument_list|()
expr_stmt|;
name|properties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|delegate
operator|.
name|shouldLoadDataDomain
argument_list|(
name|domainName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"property"
argument_list|)
condition|)
block|{
operator|new
name|PropertyHandler
argument_list|(
name|getParser
argument_list|()
argument_list|,
name|this
argument_list|)
operator|.
name|init
argument_list|(
name|atts
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"map"
argument_list|)
condition|)
block|{
comment|// "map" elements go after "property" elements
comment|// must flush properties if there are any
name|loadProperties
argument_list|()
expr_stmt|;
operator|new
name|MapHandler
argument_list|(
name|getParser
argument_list|()
argument_list|,
name|this
argument_list|)
operator|.
name|init
argument_list|(
name|localName
argument_list|,
name|atts
argument_list|,
name|domainName
argument_list|,
name|mapLocations
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"node"
argument_list|)
condition|)
block|{
comment|// "node" elements go after "map" elements
comment|// must flush maps if there are any
name|loadMaps
argument_list|()
expr_stmt|;
operator|new
name|NodeHandler
argument_list|(
name|getParser
argument_list|()
argument_list|,
name|this
argument_list|)
operator|.
name|init
argument_list|(
name|localName
argument_list|,
name|atts
argument_list|,
name|domainName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|message
init|=
literal|"<node> or<map> should be the children of<domain>.<"
operator|+
name|localName
operator|+
literal|"> is unexpected."
decl_stmt|;
throw|throw
operator|new
name|SAXParseException
argument_list|(
name|message
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|finished
parameter_list|()
block|{
name|loadProperties
argument_list|()
expr_stmt|;
name|loadMaps
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|loadProperties
parameter_list|()
block|{
if|if
condition|(
name|properties
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// load all properties
name|delegate
operator|.
name|shouldLoadDataDomainProperties
argument_list|(
name|domainName
argument_list|,
name|properties
argument_list|)
expr_stmt|;
comment|// clean properties to avoid loading them twice
name|properties
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|loadMaps
parameter_list|()
block|{
if|if
condition|(
name|mapLocations
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// load all maps
name|delegate
operator|.
name|shouldLoadDataMaps
argument_list|(
name|domainName
argument_list|,
name|mapLocations
argument_list|)
expr_stmt|;
comment|// clean map locations to avoid loading maps twice
name|mapLocations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|PropertyHandler
extends|extends
name|AbstractHandler
block|{
specifier|public
name|PropertyHandler
parameter_list|(
name|XMLReader
name|parser
parameter_list|,
name|ContentHandler
name|parentHandler
parameter_list|)
block|{
name|super
argument_list|(
name|parser
argument_list|,
name|parentHandler
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|Attributes
name|attrs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|String
name|name
init|=
name|attrs
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|attrs
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|MapHandler
extends|extends
name|AbstractHandler
block|{
specifier|protected
name|String
name|domainName
decl_stmt|;
specifier|protected
name|String
name|mapName
decl_stmt|;
specifier|protected
name|String
name|location
decl_stmt|;
specifier|private
name|Map
name|mapLocations
decl_stmt|;
specifier|public
name|MapHandler
parameter_list|(
name|XMLReader
name|parser
parameter_list|,
name|ContentHandler
name|parentHandler
parameter_list|)
block|{
name|super
argument_list|(
name|parser
argument_list|,
name|parentHandler
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|String
name|name
parameter_list|,
name|Attributes
name|attrs
parameter_list|,
name|String
name|domainName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|DataMap
argument_list|>
name|locations
parameter_list|)
block|{
name|this
operator|.
name|domainName
operator|=
name|domainName
expr_stmt|;
name|this
operator|.
name|mapLocations
operator|=
name|locations
expr_stmt|;
name|mapName
operator|=
name|attrs
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|location
operator|=
name|attrs
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"location"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attrs
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"dep-map-ref"
argument_list|)
condition|)
block|{
comment|// this is no longer supported, but kept as noop
comment|// for backwards compatibility
operator|new
name|DepMapRefHandler
argument_list|(
name|getParser
argument_list|()
argument_list|,
name|this
argument_list|)
operator|.
name|init
argument_list|(
name|localName
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SAXParseException
argument_list|(
literal|"<dep-map-ref> should be the only map child.<"
operator|+
name|localName
operator|+
literal|"> is unexpected."
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|finished
parameter_list|()
block|{
name|mapLocations
operator|.
name|put
argument_list|(
name|mapName
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Handles processing of "node" element. */
specifier|private
class|class
name|NodeHandler
extends|extends
name|AbstractHandler
block|{
specifier|protected
name|String
name|nodeName
decl_stmt|;
specifier|protected
name|String
name|domainName
decl_stmt|;
specifier|public
name|NodeHandler
parameter_list|(
name|XMLReader
name|parser
parameter_list|,
name|ContentHandler
name|parentHandler
parameter_list|)
block|{
name|super
argument_list|(
name|parser
argument_list|,
name|parentHandler
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|String
name|name
parameter_list|,
name|Attributes
name|attrs
parameter_list|,
name|String
name|domainName
parameter_list|)
block|{
name|this
operator|.
name|domainName
operator|=
name|domainName
expr_stmt|;
name|nodeName
operator|=
name|attrs
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|String
name|dataSrcLocation
init|=
name|attrs
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"datasource"
argument_list|)
decl_stmt|;
name|String
name|adapterClass
init|=
name|attrs
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"adapter"
argument_list|)
decl_stmt|;
name|String
name|factoryName
init|=
name|attrs
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"factory"
argument_list|)
decl_stmt|;
name|delegate
operator|.
name|shouldLoadDataNode
argument_list|(
name|domainName
argument_list|,
name|nodeName
argument_list|,
name|dataSrcLocation
argument_list|,
name|adapterClass
argument_list|,
name|factoryName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attrs
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"map-ref"
argument_list|)
condition|)
block|{
operator|new
name|MapRefHandler
argument_list|(
name|getParser
argument_list|()
argument_list|,
name|this
argument_list|)
operator|.
name|init
argument_list|(
name|localName
argument_list|,
name|attrs
argument_list|,
name|domainName
argument_list|,
name|nodeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SAXParseException
argument_list|(
literal|"<map-ref> should be the only node child.<"
operator|+
name|localName
operator|+
literal|"> is unexpected."
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
block|}
comment|// this handler is deprecated, but is kept around for backwards compatibility
specifier|private
class|class
name|DepMapRefHandler
extends|extends
name|AbstractHandler
block|{
specifier|public
name|DepMapRefHandler
parameter_list|(
name|XMLReader
name|parser
parameter_list|,
name|ContentHandler
name|parentHandler
parameter_list|)
block|{
name|super
argument_list|(
name|parser
argument_list|,
name|parentHandler
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|String
name|name
parameter_list|,
name|Attributes
name|attrs
parameter_list|)
block|{
block|}
block|}
specifier|private
class|class
name|MapRefHandler
extends|extends
name|AbstractHandler
block|{
specifier|public
name|MapRefHandler
parameter_list|(
name|XMLReader
name|parser
parameter_list|,
name|ContentHandler
name|parentHandler
parameter_list|)
block|{
name|super
argument_list|(
name|parser
argument_list|,
name|parentHandler
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|String
name|name
parameter_list|,
name|Attributes
name|attrs
parameter_list|,
name|String
name|domainName
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
name|String
name|mapName
init|=
name|attrs
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|delegate
operator|.
name|shouldLinkDataMap
argument_list|(
name|domainName
argument_list|,
name|nodeName
argument_list|,
name|mapName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

