begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|event
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_comment
comment|/**  * A factory of XMPPBridge. Note that to deploy an XMPPBridge, you need to have  *<em>smack.jar</em> library in the runtime.  *   * @since 1.2  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|XMPPBridgeFactory
implements|implements
name|EventBridgeFactory
block|{
specifier|public
specifier|static
specifier|final
name|String
name|XMPP_HOST_PROPERTY
init|=
literal|"cayenne.XMPPBridge.xmppHost"
decl_stmt|;
comment|/**      * An optional property, port 5222 is used as default XMPP port.      */
specifier|public
specifier|static
specifier|final
name|String
name|XMPP_PORT_PROPERTY
init|=
literal|"cayenne.XMPPBridge.xmppPort"
decl_stmt|;
comment|/**      * An optional property, "conference" is used as default chat service.      */
specifier|public
specifier|static
specifier|final
name|String
name|XMPP_CHAT_SERVICE_PROPERTY
init|=
literal|"cayenne.XMPPBridge.xmppChatService"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XMPP_SECURE_CONNECTION_PROPERTY
init|=
literal|"cayenne.XMPPBridge.xmppSecure"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XMPP_LOGIN_PROPERTY
init|=
literal|"cayenne.XMPPBridge.xmppLogin"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XMPP_PASSWORD_PROPERTY
init|=
literal|"cayenne.XMPPBridge.xmppPassword"
decl_stmt|;
specifier|public
name|EventBridge
name|createEventBridge
parameter_list|(
name|Collection
name|localSubjects
parameter_list|,
name|String
name|externalSubject
parameter_list|,
name|Map
name|properties
parameter_list|)
block|{
name|String
name|chatService
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|XMPP_CHAT_SERVICE_PROPERTY
argument_list|)
decl_stmt|;
name|String
name|host
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|XMPP_HOST_PROPERTY
argument_list|)
decl_stmt|;
name|String
name|loginId
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|XMPP_LOGIN_PROPERTY
argument_list|)
decl_stmt|;
name|String
name|password
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|XMPP_PASSWORD_PROPERTY
argument_list|)
decl_stmt|;
name|String
name|secureConnectionString
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|XMPP_SECURE_CONNECTION_PROPERTY
argument_list|)
decl_stmt|;
name|boolean
name|secureConnection
init|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|secureConnectionString
argument_list|)
decl_stmt|;
name|String
name|portString
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|XMPP_PORT_PROPERTY
argument_list|)
decl_stmt|;
name|int
name|port
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|portString
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|portString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Invalid port: "
operator|+
name|portString
argument_list|)
throw|;
block|}
block|}
name|XMPPBridge
name|bridge
init|=
operator|new
name|XMPPBridge
argument_list|(
name|localSubjects
argument_list|,
name|externalSubject
argument_list|)
decl_stmt|;
name|bridge
operator|.
name|setXmppHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|bridge
operator|.
name|setXmppPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|bridge
operator|.
name|setChatService
argument_list|(
name|chatService
argument_list|)
expr_stmt|;
name|bridge
operator|.
name|setSecureConnection
argument_list|(
name|secureConnection
argument_list|)
expr_stmt|;
name|bridge
operator|.
name|setLoginId
argument_list|(
name|loginId
argument_list|)
expr_stmt|;
name|bridge
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
return|return
name|bridge
return|;
block|}
block|}
end_class

end_unit

