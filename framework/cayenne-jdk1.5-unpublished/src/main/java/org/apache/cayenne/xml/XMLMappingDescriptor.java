begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_comment
comment|/**  * A convenience class for dealing with the mapping file. This can encode and decode  * objects based upon the schema given by the map file.  *   * @since 1.2  */
end_comment

begin_class
specifier|final
class|class
name|XMLMappingDescriptor
block|{
specifier|private
name|SerializableEntity
name|rootEntity
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SerializableEntity
argument_list|>
name|entities
decl_stmt|;
specifier|private
name|ObjectContext
name|objectContext
decl_stmt|;
comment|/**      * Creates new XMLMappingDescriptor using a URL that points to the mapping file.      *       * @param mappingUrl A URL to the mapping file that specifies the mapping model.      * @throws CayenneRuntimeException      */
name|XMLMappingDescriptor
parameter_list|(
name|String
name|mappingUrl
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
comment|// Read in the mapping file.
name|DocumentBuilder
name|builder
init|=
name|XMLUtil
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Document
name|document
decl_stmt|;
try|try
block|{
name|document
operator|=
name|builder
operator|.
name|parse
argument_list|(
name|mappingUrl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error parsing XML at "
operator|+
name|mappingUrl
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|Element
name|root
init|=
name|document
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"model"
operator|.
name|equals
argument_list|(
name|root
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Root of the mapping model must be \"model\""
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|SerializableEntity
argument_list|>
name|entities
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SerializableEntity
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|XMLUtil
operator|.
name|getChildren
argument_list|(
name|root
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|SerializableEntity
name|entity
init|=
operator|new
name|SerializableEntity
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|String
name|tag
init|=
name|e
operator|.
name|getAttribute
argument_list|(
literal|"xmlTag"
argument_list|)
decl_stmt|;
name|entities
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|entity
argument_list|)
expr_stmt|;
if|if
condition|(
name|rootEntity
operator|==
literal|null
condition|)
block|{
name|rootEntity
operator|=
name|entity
expr_stmt|;
block|}
block|}
name|this
operator|.
name|entities
operator|=
name|entities
expr_stmt|;
block|}
name|SerializableEntity
name|getRootEntity
parameter_list|()
block|{
return|return
name|rootEntity
return|;
block|}
comment|/**      * Decodes the supplied DOM document into an object.      *       * @param xml The DOM document containing the encoded object.      * @return The decoded object.      * @throws CayenneRuntimeException      */
name|Object
name|decode
parameter_list|(
name|Element
name|xml
parameter_list|,
name|ObjectContext
name|objectContext
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
comment|// TODO: Add an error check to make sure the mapping file actually is for this
comment|// data file.
comment|// Store a local copy of the data context.
name|this
operator|.
name|objectContext
operator|=
name|objectContext
expr_stmt|;
comment|// Create the object to be returned.
name|Object
name|ret
init|=
name|createObject
argument_list|(
name|rootEntity
operator|.
name|getDescriptor
argument_list|()
argument_list|,
name|xml
argument_list|)
decl_stmt|;
comment|// We want to read each value from the XML file and then set the corresponding
comment|// property value in the object to be returned.
for|for
control|(
name|Iterator
name|it
init|=
name|XMLUtil
operator|.
name|getChildren
argument_list|(
name|xml
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|value
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|decodeProperty
argument_list|(
name|ret
argument_list|,
name|rootEntity
operator|.
name|getDescriptor
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Returns the entity XML block with the same "xmlTag" value as the passed in name.      *       * @param name The name of the entity to retrieve.      * @return The entity with "xmlTag" equal to the passed in name.      */
name|SerializableEntity
name|getEntity
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|entities
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Returns the property that is associated with the passed in XML tag.      *       * @param entityMapping The root to which the reference to find is relative to.      * @param propertyXmlTag The name of the entity.      * @return A name of the Java property mapped for the XML tag.      */
specifier|private
name|String
name|getPropertyMappingName
parameter_list|(
name|Element
name|entityMapping
parameter_list|,
name|String
name|propertyXmlTag
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|XMLUtil
operator|.
name|getChildren
argument_list|(
name|entityMapping
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|propertyMapping
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyXmlTag
operator|.
name|equals
argument_list|(
name|propertyMapping
operator|.
name|getAttribute
argument_list|(
literal|"xmlTag"
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|propertyMapping
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Decodes a property.      *       * @param object The object to be updated with the decoded property's value.      * @param entityMapping The entity block that contains the property mapping for the      *            value.      * @param propertyData The encoded property.      * @throws CayenneRuntimeException      */
specifier|private
name|void
name|decodeProperty
parameter_list|(
name|Object
name|object
parameter_list|,
name|Element
name|entityMapping
parameter_list|,
name|Element
name|propertyData
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
name|String
name|xmlTag
init|=
name|propertyData
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|String
name|propertyName
init|=
name|getPropertyMappingName
argument_list|(
name|entityMapping
argument_list|,
name|xmlTag
argument_list|)
decl_stmt|;
comment|// check unmapped data
if|if
condition|(
name|propertyName
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|SerializableEntity
name|targetEntityMapping
init|=
name|getEntity
argument_list|(
name|xmlTag
argument_list|)
decl_stmt|;
comment|// This is a "simple" encoded property.
if|if
condition|(
name|targetEntityMapping
operator|==
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|object
argument_list|,
name|propertyName
argument_list|,
name|XMLUtil
operator|.
name|getText
argument_list|(
name|propertyData
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// nested entity property
else|else
block|{
name|Object
name|o
init|=
name|createObject
argument_list|(
name|targetEntityMapping
operator|.
name|getDescriptor
argument_list|()
argument_list|,
name|propertyData
argument_list|)
decl_stmt|;
comment|// Decode each of the property's children, setting values in the newly
comment|// created object.
name|Iterator
name|it
init|=
name|XMLUtil
operator|.
name|getChildren
argument_list|(
name|propertyData
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Element
name|child
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|decodeProperty
argument_list|(
name|o
argument_list|,
name|targetEntityMapping
operator|.
name|getDescriptor
argument_list|()
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
name|setProperty
argument_list|(
name|object
argument_list|,
name|propertyName
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets decoded object property. If a property is of Collection type, an object is      * added to the collection.      */
specifier|private
name|void
name|setProperty
parameter_list|(
name|Object
name|object
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
comment|// attempt to first set as a simple property, on failure try collection...
comment|// checking for collection first via 'PropertyUtils.getProperty' would throw an
comment|// exception on valid simple properties that are settable but not gettable
try|try
block|{
name|PropertyUtils
operator|.
name|setProperty
argument_list|(
name|object
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|e
parameter_list|)
block|{
name|Object
name|existingValue
init|=
name|PropertyUtils
operator|.
name|getProperty
argument_list|(
name|object
argument_list|,
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingValue
operator|instanceof
name|Collection
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|Collection
operator|)
condition|)
block|{
operator|(
operator|(
name|Collection
operator|)
name|existingValue
operator|)
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|/**      * Instantiates a new object using information from entity mapping. Initializes all      * properties that exist as 'objectData' attributes. Wraps all exceptions in      * CayenneRuntimeException.      *       * @param entityMapping Element that describes object to XML mapping.      * @return The newly created object.      * @throws CayenneRuntimeException      */
specifier|private
name|Object
name|createObject
parameter_list|(
name|Element
name|entityMapping
parameter_list|,
name|Element
name|objectData
parameter_list|)
block|{
name|String
name|className
init|=
name|entityMapping
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|Object
name|object
decl_stmt|;
try|try
block|{
name|object
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|,
literal|true
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error creating instance of class "
operator|+
name|className
argument_list|,
name|ex
argument_list|)
throw|;
block|}
comment|// If a data context has been supplied by the user, then register the data object with the context.
if|if
condition|(
operator|(
literal|null
operator|!=
name|objectContext
operator|)
operator|&&
operator|(
name|object
operator|instanceof
name|Persistent
operator|)
condition|)
block|{
name|objectContext
operator|.
name|registerNewObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
name|NamedNodeMap
name|attributes
init|=
name|objectData
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Attr
name|attribute
init|=
operator|(
name|Attr
operator|)
name|attributes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|propertyName
init|=
name|getPropertyMappingName
argument_list|(
name|entityMapping
argument_list|,
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyName
operator|!=
literal|null
condition|)
block|{
name|PropertyUtils
operator|.
name|setProperty
argument_list|(
name|object
argument_list|,
name|propertyName
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|object
return|;
block|}
block|}
end_class

end_unit

