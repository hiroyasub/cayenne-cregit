begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * Assists in implementing {@link Object#hashCode()} methods. The code is based on  * HashCodeBuilder from commons-lang 2.1.  *   * @since 3.0  */
end_comment

begin_class
specifier|public
class|class
name|HashCodeBuilder
block|{
comment|/**      * Constant to use in building the hashCode.      */
specifier|private
specifier|final
name|int
name|iConstant
decl_stmt|;
comment|/**      * Running total of the hashCode.      */
specifier|private
name|int
name|iTotal
init|=
literal|0
decl_stmt|;
comment|/**      *<p>      * Uses two hard coded choices for the constants needed to build a      *<code>hashCode</code>.      *</p>      */
specifier|public
name|HashCodeBuilder
parameter_list|()
block|{
name|iConstant
operator|=
literal|37
expr_stmt|;
name|iTotal
operator|=
literal|17
expr_stmt|;
block|}
comment|/**      *<p>      * Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should      * be different for each class, however this is not vital.      *</p>      *<p>      * Prime numbers are preferred, especially for the multiplier.      *</p>      *       * @param initialNonZeroOddNumber a non-zero, odd number used as the initial value      * @param multiplierNonZeroOddNumber a non-zero, odd number used as the multiplier      * @throws IllegalArgumentException if the number is zero or even      */
specifier|public
name|HashCodeBuilder
parameter_list|(
name|int
name|initialNonZeroOddNumber
parameter_list|,
name|int
name|multiplierNonZeroOddNumber
parameter_list|)
block|{
if|if
condition|(
name|initialNonZeroOddNumber
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"HashCodeBuilder requires a non zero initial value"
argument_list|)
throw|;
block|}
if|if
condition|(
name|initialNonZeroOddNumber
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"HashCodeBuilder requires an odd initial value"
argument_list|)
throw|;
block|}
if|if
condition|(
name|multiplierNonZeroOddNumber
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"HashCodeBuilder requires a non zero multiplier"
argument_list|)
throw|;
block|}
if|if
condition|(
name|multiplierNonZeroOddNumber
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"HashCodeBuilder requires an odd multiplier"
argument_list|)
throw|;
block|}
name|iConstant
operator|=
name|multiplierNonZeroOddNumber
expr_stmt|;
name|iTotal
operator|=
name|initialNonZeroOddNumber
expr_stmt|;
block|}
comment|/**      *<p>      * Adds the result of super.hashCode() to this builder.      *</p>      *       * @param superHashCode the result of calling<code>super.hashCode()</code>      * @return this HashCodeBuilder, used to chain calls.      * @since 2.0      */
specifier|public
name|HashCodeBuilder
name|appendSuper
parameter_list|(
name|int
name|superHashCode
parameter_list|)
block|{
name|iTotal
operator|=
name|iTotal
operator|*
name|iConstant
operator|+
name|superHashCode
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// -------------------------------------------------------------------------
comment|/**      *<p>      * Append a<code>hashCode</code> for an<code>Object</code>.      *</p>      *       * @param object the Object to add to the<code>hashCode</code>      * @return this      */
specifier|public
name|HashCodeBuilder
name|append
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|iTotal
operator|=
name|iTotal
operator|*
name|iConstant
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// the simple case, not an array, just the element
name|iTotal
operator|=
name|iTotal
operator|*
name|iConstant
operator|+
name|object
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// 'Switch' on type of array, to dispatch to the correct handler
comment|// This handles multi dimensional arrays
if|if
condition|(
name|object
operator|instanceof
name|long
index|[]
condition|)
block|{
name|append
argument_list|(
operator|(
name|long
index|[]
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|int
index|[]
condition|)
block|{
name|append
argument_list|(
operator|(
name|int
index|[]
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|short
index|[]
condition|)
block|{
name|append
argument_list|(
operator|(
name|short
index|[]
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|char
index|[]
condition|)
block|{
name|append
argument_list|(
operator|(
name|char
index|[]
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|append
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|double
index|[]
condition|)
block|{
name|append
argument_list|(
operator|(
name|double
index|[]
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|float
index|[]
condition|)
block|{
name|append
argument_list|(
operator|(
name|float
index|[]
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|boolean
index|[]
condition|)
block|{
name|append
argument_list|(
operator|(
name|boolean
index|[]
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Not an array of primitives
name|append
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Append a<code>hashCode</code> for a<code>long</code>.      *</p>      *       * @param value the long to add to the<code>hashCode</code>      * @return this      */
specifier|public
name|HashCodeBuilder
name|append
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|iTotal
operator|=
name|iTotal
operator|*
name|iConstant
operator|+
operator|(
operator|(
name|int
operator|)
operator|(
name|value
operator|^
operator|(
name|value
operator|>>
literal|32
operator|)
operator|)
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Append a<code>hashCode</code> for an<code>int</code>.      *</p>      *       * @param value the int to add to the<code>hashCode</code>      * @return this      */
specifier|public
name|HashCodeBuilder
name|append
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|iTotal
operator|=
name|iTotal
operator|*
name|iConstant
operator|+
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Append a<code>hashCode</code> for a<code>short</code>.      *</p>      *       * @param value the short to add to the<code>hashCode</code>      * @return this      */
specifier|public
name|HashCodeBuilder
name|append
parameter_list|(
name|short
name|value
parameter_list|)
block|{
name|iTotal
operator|=
name|iTotal
operator|*
name|iConstant
operator|+
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Append a<code>hashCode</code> for a<code>char</code>.      *</p>      *       * @param value the char to add to the<code>hashCode</code>      * @return this      */
specifier|public
name|HashCodeBuilder
name|append
parameter_list|(
name|char
name|value
parameter_list|)
block|{
name|iTotal
operator|=
name|iTotal
operator|*
name|iConstant
operator|+
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Append a<code>hashCode</code> for a<code>byte</code>.      *</p>      *       * @param value the byte to add to the<code>hashCode</code>      * @return this      */
specifier|public
name|HashCodeBuilder
name|append
parameter_list|(
name|byte
name|value
parameter_list|)
block|{
name|iTotal
operator|=
name|iTotal
operator|*
name|iConstant
operator|+
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Append a<code>hashCode</code> for a<code>double</code>.      *</p>      *       * @param value the double to add to the<code>hashCode</code>      * @return this      */
specifier|public
name|HashCodeBuilder
name|append
parameter_list|(
name|double
name|value
parameter_list|)
block|{
return|return
name|append
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<p>      * Append a<code>hashCode</code> for a<code>float</code>.      *</p>      *       * @param value the float to add to the<code>hashCode</code>      * @return this      */
specifier|public
name|HashCodeBuilder
name|append
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|iTotal
operator|=
name|iTotal
operator|*
name|iConstant
operator|+
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Append a<code>hashCode</code> for a<code>boolean</code>.      *</p>      *<p>      * This adds<code>iConstant * 1</code> to the<code>hashCode</code> and not a      *<code>1231</code> or<code>1237</code> as done in java.lang.Boolean. This is in      * accordance with the<quote>Effective Java</quote> design.      *</p>      *       * @param value the boolean to add to the<code>hashCode</code>      * @return this      */
specifier|public
name|HashCodeBuilder
name|append
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|iTotal
operator|=
name|iTotal
operator|*
name|iConstant
operator|+
operator|(
name|value
condition|?
literal|0
else|:
literal|1
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Append a<code>hashCode</code> for an<code>Object</code> array.      *</p>      *       * @param array the array to add to the<code>hashCode</code>      * @return this      */
specifier|public
name|HashCodeBuilder
name|append
parameter_list|(
name|Object
index|[]
name|array
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
name|iTotal
operator|=
name|iTotal
operator|*
name|iConstant
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|append
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Append a<code>hashCode</code> for a<code>long</code> array.      *</p>      *       * @param array the array to add to the<code>hashCode</code>      * @return this      */
specifier|public
name|HashCodeBuilder
name|append
parameter_list|(
name|long
index|[]
name|array
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
name|iTotal
operator|=
name|iTotal
operator|*
name|iConstant
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|append
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Append a<code>hashCode</code> for an<code>int</code> array.      *</p>      *       * @param array the array to add to the<code>hashCode</code>      * @return this      */
specifier|public
name|HashCodeBuilder
name|append
parameter_list|(
name|int
index|[]
name|array
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
name|iTotal
operator|=
name|iTotal
operator|*
name|iConstant
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|append
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Append a<code>hashCode</code> for a<code>short</code> array.      *</p>      *       * @param array the array to add to the<code>hashCode</code>      * @return this      */
specifier|public
name|HashCodeBuilder
name|append
parameter_list|(
name|short
index|[]
name|array
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
name|iTotal
operator|=
name|iTotal
operator|*
name|iConstant
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|append
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Append a<code>hashCode</code> for a<code>char</code> array.      *</p>      *       * @param array the array to add to the<code>hashCode</code>      * @return this      */
specifier|public
name|HashCodeBuilder
name|append
parameter_list|(
name|char
index|[]
name|array
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
name|iTotal
operator|=
name|iTotal
operator|*
name|iConstant
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|append
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Append a<code>hashCode</code> for a<code>byte</code> array.      *</p>      *       * @param array the array to add to the<code>hashCode</code>      * @return this      */
specifier|public
name|HashCodeBuilder
name|append
parameter_list|(
name|byte
index|[]
name|array
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
name|iTotal
operator|=
name|iTotal
operator|*
name|iConstant
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|append
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Append a<code>hashCode</code> for a<code>double</code> array.      *</p>      *       * @param array the array to add to the<code>hashCode</code>      * @return this      */
specifier|public
name|HashCodeBuilder
name|append
parameter_list|(
name|double
index|[]
name|array
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
name|iTotal
operator|=
name|iTotal
operator|*
name|iConstant
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|append
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Append a<code>hashCode</code> for a<code>float</code> array.      *</p>      *       * @param array the array to add to the<code>hashCode</code>      * @return this      */
specifier|public
name|HashCodeBuilder
name|append
parameter_list|(
name|float
index|[]
name|array
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
name|iTotal
operator|=
name|iTotal
operator|*
name|iConstant
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|append
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Append a<code>hashCode</code> for a<code>boolean</code> array.      *</p>      *       * @param array the array to add to the<code>hashCode</code>      * @return this      */
specifier|public
name|HashCodeBuilder
name|append
parameter_list|(
name|boolean
index|[]
name|array
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
name|iTotal
operator|=
name|iTotal
operator|*
name|iConstant
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|append
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Return the computed<code>hashCode</code>.      *</p>      *       * @return<code>hashCode</code> based on the fields appended      */
specifier|public
name|int
name|toHashCode
parameter_list|()
block|{
return|return
name|iTotal
return|;
block|}
block|}
end_class

end_unit

