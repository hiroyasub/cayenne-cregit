begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|ToStringBuilder
import|;
end_import

begin_comment
comment|/**  * A metadata object that provides mapping of a set of result columns to an ObjEntity.  * Used by {@link SQLResultSet}.  *   * @since 3.0  */
end_comment

begin_class
specifier|public
class|class
name|EntityResult
block|{
specifier|protected
name|String
name|entityName
decl_stmt|;
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|entityClass
decl_stmt|;
specifier|protected
name|Collection
argument_list|<
name|FieldResult
argument_list|>
name|fields
decl_stmt|;
specifier|public
name|EntityResult
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|entityClass
parameter_list|)
block|{
name|this
operator|.
name|entityClass
operator|=
name|entityClass
expr_stmt|;
block|}
specifier|public
name|EntityResult
parameter_list|(
name|String
name|entityName
parameter_list|)
block|{
name|this
operator|.
name|entityName
operator|=
name|entityName
expr_stmt|;
block|}
comment|/**      * Returns a map of result column names to attribute db paths from the root entity.      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getDbFields
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|fields
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_MAP
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dbFields
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldResult
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|.
name|isDbAttribute
argument_list|()
condition|)
block|{
name|dbFields
operator|.
name|put
argument_list|(
name|field
operator|.
name|getAttributeName
argument_list|()
argument_list|,
name|field
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ObjEntity
name|entity
init|=
name|field
operator|.
name|getEntityName
argument_list|()
operator|!=
literal|null
condition|?
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|field
operator|.
name|getEntityName
argument_list|()
argument_list|)
else|:
name|getRootEntity
argument_list|(
name|resolver
argument_list|)
decl_stmt|;
name|ObjAttribute
name|attribute
init|=
operator|(
name|ObjAttribute
operator|)
name|entity
operator|.
name|getAttribute
argument_list|(
name|field
operator|.
name|getAttributeName
argument_list|()
argument_list|)
decl_stmt|;
name|dbFields
operator|.
name|put
argument_list|(
name|attribute
operator|.
name|getDbAttributePath
argument_list|()
argument_list|,
name|field
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dbFields
return|;
block|}
specifier|private
name|ObjEntity
name|getRootEntity
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
if|if
condition|(
name|entityName
operator|!=
literal|null
condition|)
block|{
return|return
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|entityName
argument_list|)
return|;
block|}
if|else if
condition|(
name|entityClass
operator|!=
literal|null
condition|)
block|{
return|return
name|resolver
operator|.
name|lookupObjEntity
argument_list|(
name|entityClass
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Both entity name and class are null"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Adds a result set column mapping for a single object property of the root entity.      */
specifier|public
name|void
name|addObjectField
parameter_list|(
name|String
name|attributeName
parameter_list|,
name|String
name|column
parameter_list|)
block|{
name|addField
argument_list|(
operator|new
name|FieldResult
argument_list|(
literal|null
argument_list|,
name|attributeName
argument_list|,
name|column
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a result set column mapping for a single object property of a specified entity      * that may differ from the root entity if inheritance is involved.      */
specifier|public
name|void
name|addObjectField
parameter_list|(
name|String
name|entityName
parameter_list|,
name|String
name|attributeName
parameter_list|,
name|String
name|column
parameter_list|)
block|{
name|addField
argument_list|(
operator|new
name|FieldResult
argument_list|(
name|entityName
argument_list|,
name|attributeName
argument_list|,
name|column
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a result set column mapping for a single DbAttribute.      */
specifier|public
name|void
name|addDbField
parameter_list|(
name|String
name|dbAttributeName
parameter_list|,
name|String
name|column
parameter_list|)
block|{
name|addField
argument_list|(
operator|new
name|FieldResult
argument_list|(
literal|null
argument_list|,
name|dbAttributeName
argument_list|,
name|column
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|addField
parameter_list|(
name|FieldResult
name|field
parameter_list|)
block|{
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getEntityName
parameter_list|()
block|{
return|return
name|entityName
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getEntityClass
parameter_list|()
block|{
return|return
name|entityClass
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|FieldResult
argument_list|>
name|getFields
parameter_list|()
block|{
return|return
name|fields
operator|!=
literal|null
condition|?
name|fields
else|:
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
class|class
name|FieldResult
block|{
specifier|protected
name|String
name|entityName
decl_stmt|;
specifier|protected
name|String
name|attributeName
decl_stmt|;
specifier|protected
name|String
name|column
decl_stmt|;
specifier|protected
name|boolean
name|dbAttribute
decl_stmt|;
name|FieldResult
parameter_list|(
name|String
name|entityName
parameter_list|,
name|String
name|attributeName
parameter_list|,
name|String
name|column
parameter_list|,
name|boolean
name|dbAttribute
parameter_list|)
block|{
name|this
operator|.
name|entityName
operator|=
name|entityName
expr_stmt|;
name|this
operator|.
name|attributeName
operator|=
name|attributeName
expr_stmt|;
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|dbAttribute
operator|=
name|dbAttribute
expr_stmt|;
block|}
specifier|public
name|String
name|getEntityName
parameter_list|()
block|{
return|return
name|entityName
return|;
block|}
specifier|public
name|String
name|getAttributeName
parameter_list|()
block|{
return|return
name|attributeName
return|;
block|}
specifier|public
name|String
name|getColumn
parameter_list|()
block|{
return|return
name|column
return|;
block|}
specifier|public
name|boolean
name|isDbAttribute
parameter_list|()
block|{
return|return
name|dbAttribute
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|ToStringBuilder
argument_list|(
name|this
argument_list|)
operator|.
name|append
argument_list|(
literal|"attributeName"
argument_list|,
name|attributeName
argument_list|)
operator|.
name|append
argument_list|(
literal|"column"
argument_list|,
name|column
argument_list|)
operator|.
name|append
argument_list|(
literal|"db"
argument_list|,
name|dbAttribute
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

