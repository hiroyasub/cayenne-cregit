begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|AttributeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DbAttributeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DbEntityListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DbRelationshipListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EntityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|MapEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|RelationshipEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|CayenneMapEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Transformer
import|;
end_import

begin_comment
comment|/**  * A DbEntity is a mapping descriptor that defines a structure of a database table.  *   * @author Misha Shengaout  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|DbEntity
extends|extends
name|Entity
implements|implements
name|DbEntityListener
implements|,
name|DbAttributeListener
implements|,
name|DbRelationshipListener
block|{
specifier|protected
name|String
name|catalog
decl_stmt|;
specifier|protected
name|String
name|schema
decl_stmt|;
specifier|protected
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
name|primaryKey
decl_stmt|;
comment|/**      * @since 1.2      */
specifier|protected
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
name|generatedAttributes
decl_stmt|;
specifier|protected
name|DbKeyGenerator
name|primaryKeyGenerator
decl_stmt|;
comment|/**      * Creates an unnamed DbEntity.      */
specifier|public
name|DbEntity
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|primaryKey
operator|=
operator|new
name|ArrayList
argument_list|<
name|DbAttribute
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|generatedAttributes
operator|=
operator|new
name|ArrayList
argument_list|<
name|DbAttribute
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a named DbEntity.      */
specifier|public
name|DbEntity
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Prints itself as XML to the provided XMLEncoder.      *       * @since 1.1      */
specifier|public
name|void
name|encodeAsXML
parameter_list|(
name|XMLEncoder
name|encoder
parameter_list|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"<db-entity name=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|Util
operator|.
name|encodeXmlAttribute
argument_list|(
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSchema
argument_list|()
operator|!=
literal|null
operator|&&
name|getSchema
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|" schema=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|Util
operator|.
name|encodeXmlAttribute
argument_list|(
name|getSchema
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getCatalog
argument_list|()
operator|!=
literal|null
operator|&&
name|getCatalog
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|" catalog=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|Util
operator|.
name|encodeXmlAttribute
argument_list|(
name|getCatalog
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
block|}
name|encoder
operator|.
name|println
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|indent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|getAttributeMap
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getPrimaryKeyGenerator
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getPrimaryKeyGenerator
argument_list|()
operator|.
name|encodeAsXML
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
block|}
name|encoder
operator|.
name|indent
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|println
argument_list|(
literal|"</db-entity>"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns table name including schema, if present.      */
specifier|public
name|String
name|getFullyQualifiedName
parameter_list|()
block|{
return|return
operator|(
name|schema
operator|!=
literal|null
operator|)
condition|?
name|schema
operator|+
literal|'.'
operator|+
name|getName
argument_list|()
else|:
name|getName
argument_list|()
return|;
block|}
comment|/**      * Returns database schema of this table.      *       * @return table's schema, null if not set.      */
specifier|public
name|String
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
comment|/**      * Sets the database schema name of the table described by this DbEntity.      */
specifier|public
name|void
name|setSchema
parameter_list|(
name|String
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
comment|/**      * Returns the catalog name of the table described by this DbEntity.      */
specifier|public
name|String
name|getCatalog
parameter_list|()
block|{
return|return
name|catalog
return|;
block|}
comment|/**      * Sets the catalog name of the table described by this DbEntity.      */
specifier|public
name|void
name|setCatalog
parameter_list|(
name|String
name|catalog
parameter_list|)
block|{
name|this
operator|.
name|catalog
operator|=
name|catalog
expr_stmt|;
block|}
comment|/**      * Returns an unmodifiable collection of DbAttributes representing the primary key of      * the table described by this DbEntity.      *       * @since 3.0      */
specifier|public
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
name|getPrimaryKeys
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|primaryKey
argument_list|)
return|;
block|}
comment|/**      * @deprecated since 3.0 use {@link #getPrimaryKeys()} that returns a collection.      */
specifier|public
name|List
argument_list|<
name|DbAttribute
argument_list|>
name|getPrimaryKey
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|DbAttribute
argument_list|>
argument_list|(
name|getPrimaryKeys
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns a Collection of all attributes that either belong to this DbEntity or      * inherited.      */
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
operator|(
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
operator|)
name|super
operator|.
name|getAttributes
argument_list|()
return|;
block|}
comment|/**      * Returns an unmodifiable collection of DbAttributes that are generated by the      * database.      *       * @since 1.2      */
specifier|public
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
name|getGeneratedAttributes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|generatedAttributes
argument_list|)
return|;
block|}
comment|/**      * Adds a new attribute to this entity.      *       * @throws IllegalArgumentException if Attribute has no name or there is an existing      *             attribute with the same name      * @throws IllegalArgumentException if a relationship has the same name as this      *             attribute      * @since 3.0      */
specifier|public
name|void
name|addAttribute
parameter_list|(
name|DbAttribute
name|attr
parameter_list|)
block|{
name|super
operator|.
name|addAttribute
argument_list|(
name|attr
argument_list|)
expr_stmt|;
name|this
operator|.
name|dbAttributeAdded
argument_list|(
operator|new
name|AttributeEvent
argument_list|(
name|this
argument_list|,
name|attr
argument_list|,
name|this
argument_list|,
name|MapEvent
operator|.
name|ADD
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Overrides super to fire an AttributeEvent.      *       * @deprecated in favour of {@link #addAttribute(DbAttribute attr)}. Scheduled for      *             removal in Cayenne 4.      */
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|void
name|addAttribute
parameter_list|(
name|Attribute
name|attr
parameter_list|)
block|{
name|super
operator|.
name|addAttribute
argument_list|(
name|attr
argument_list|)
expr_stmt|;
name|this
operator|.
name|dbAttributeAdded
argument_list|(
operator|new
name|AttributeEvent
argument_list|(
name|this
argument_list|,
name|attr
argument_list|,
name|this
argument_list|,
name|MapEvent
operator|.
name|ADD
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes attribute from the entity, removes any relationship joins containing this      * attribute. Does nothing if the attribute name is not found.      *       * @see org.apache.cayenne.map.Entity#removeAttribute(String)      */
annotation|@
name|Override
specifier|public
name|void
name|removeAttribute
parameter_list|(
name|String
name|attrName
parameter_list|)
block|{
name|Attribute
name|attr
init|=
name|getAttribute
argument_list|(
name|attrName
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DataMap
name|map
init|=
name|getDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DbEntity
name|ent
range|:
name|map
operator|.
name|getDbEntities
argument_list|()
control|)
block|{
for|for
control|(
name|DbRelationship
name|relationship
range|:
name|ent
operator|.
name|getRelationships
argument_list|()
control|)
block|{
name|Iterator
argument_list|<
name|DbJoin
argument_list|>
name|joins
init|=
name|relationship
operator|.
name|getJoins
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|joins
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbJoin
name|join
init|=
name|joins
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|join
operator|.
name|getSource
argument_list|()
operator|==
name|attr
operator|||
name|join
operator|.
name|getTarget
argument_list|()
operator|==
name|attr
condition|)
block|{
name|joins
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|super
operator|.
name|removeAttribute
argument_list|(
name|attrName
argument_list|)
expr_stmt|;
name|this
operator|.
name|dbAttributeRemoved
argument_list|(
operator|new
name|AttributeEvent
argument_list|(
name|this
argument_list|,
name|attr
argument_list|,
name|this
argument_list|,
name|MapEvent
operator|.
name|REMOVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearAttributes
parameter_list|()
block|{
name|super
operator|.
name|clearAttributes
argument_list|()
expr_stmt|;
comment|// post dummy event for no specific attribute
name|this
operator|.
name|dbAttributeRemoved
argument_list|(
operator|new
name|AttributeEvent
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
name|this
argument_list|,
name|MapEvent
operator|.
name|REMOVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a Collection of relationships from this entity or inherited.      */
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|DbRelationship
argument_list|>
name|getRelationships
parameter_list|()
block|{
return|return
operator|(
name|Collection
argument_list|<
name|DbRelationship
argument_list|>
operator|)
name|super
operator|.
name|getRelationships
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SortedMap
argument_list|<
name|String
argument_list|,
name|DbRelationship
argument_list|>
name|getRelationshipMap
parameter_list|()
block|{
return|return
operator|(
name|SortedMap
argument_list|<
name|String
argument_list|,
name|DbRelationship
argument_list|>
operator|)
name|super
operator|.
name|getRelationshipMap
argument_list|()
return|;
block|}
comment|/**      * @since 3.0      */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|PathComponent
argument_list|<
name|DbAttribute
argument_list|,
name|DbRelationship
argument_list|>
name|lastPathComponent
parameter_list|(
name|Expression
name|path
parameter_list|,
name|Map
name|aliasMap
parameter_list|)
block|{
return|return
name|super
operator|.
name|lastPathComponent
argument_list|(
name|path
argument_list|,
name|aliasMap
argument_list|)
return|;
block|}
comment|/**      * Returns an Iterable instance over expression path components based on this entity.      *       * @since 3.0      */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Iterable
argument_list|<
name|PathComponent
argument_list|<
name|DbAttribute
argument_list|,
name|DbRelationship
argument_list|>
argument_list|>
name|resolvePath
parameter_list|(
specifier|final
name|Expression
name|pathExp
parameter_list|,
specifier|final
name|Map
name|aliasMap
parameter_list|)
block|{
if|if
condition|(
name|pathExp
operator|.
name|getType
argument_list|()
operator|==
name|Expression
operator|.
name|DB_PATH
condition|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|PathComponent
argument_list|<
name|DbAttribute
argument_list|,
name|DbRelationship
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|PathComponentIterator
argument_list|(
name|DbEntity
operator|.
name|this
argument_list|,
operator|(
name|String
operator|)
name|pathExp
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|,
name|aliasMap
argument_list|)
return|;
block|}
block|}
return|;
block|}
throw|throw
operator|new
name|ExpressionException
argument_list|(
literal|"Invalid expression type: '"
operator|+
name|pathExp
operator|.
name|expName
argument_list|()
operator|+
literal|"',  DB_PATH is expected."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|CayenneMapEntry
argument_list|>
name|resolvePathComponents
parameter_list|(
name|Expression
name|pathExp
parameter_list|)
throws|throws
name|ExpressionException
block|{
if|if
condition|(
name|pathExp
operator|.
name|getType
argument_list|()
operator|!=
name|Expression
operator|.
name|DB_PATH
condition|)
block|{
throw|throw
operator|new
name|ExpressionException
argument_list|(
literal|"Invalid expression type: '"
operator|+
name|pathExp
operator|.
name|expName
argument_list|()
operator|+
literal|"',  DB_PATH is expected."
argument_list|)
throw|;
block|}
return|return
operator|new
name|PathIterator
argument_list|(
operator|(
name|String
operator|)
name|pathExp
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Set the primary key generator for this entity. If null is passed, nothing is      * changed.      */
specifier|public
name|void
name|setPrimaryKeyGenerator
parameter_list|(
name|DbKeyGenerator
name|primaryKeyGenerator
parameter_list|)
block|{
name|this
operator|.
name|primaryKeyGenerator
operator|=
name|primaryKeyGenerator
expr_stmt|;
if|if
condition|(
name|primaryKeyGenerator
operator|!=
literal|null
condition|)
block|{
name|primaryKeyGenerator
operator|.
name|setDbEntity
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Return the primary key generator for this entity.      */
specifier|public
name|DbKeyGenerator
name|getPrimaryKeyGenerator
parameter_list|()
block|{
return|return
name|primaryKeyGenerator
return|;
block|}
comment|/**      * DbEntity property changed event. May be name, attribute or relationship added or      * removed, etc. Attribute and relationship property changes are handled in respective      * listeners.      *       * @since 1.2      */
specifier|public
name|void
name|dbEntityChanged
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
name|e
operator|==
literal|null
operator|)
operator|||
operator|(
name|e
operator|.
name|getEntity
argument_list|()
operator|!=
name|this
operator|)
condition|)
block|{
comment|// not our concern
return|return;
block|}
comment|// handle entity name changes
if|if
condition|(
name|e
operator|.
name|getId
argument_list|()
operator|==
name|EntityEvent
operator|.
name|CHANGE
operator|&&
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
name|String
name|newName
init|=
name|e
operator|.
name|getNewName
argument_list|()
decl_stmt|;
name|DataMap
name|map
init|=
name|getDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
comment|// handle all of the relationship target names that need to be changed
for|for
control|(
name|DbEntity
name|dbe
range|:
name|map
operator|.
name|getDbEntities
argument_list|()
control|)
block|{
for|for
control|(
name|DbRelationship
name|relationship
range|:
name|dbe
operator|.
name|getRelationships
argument_list|()
control|)
block|{
if|if
condition|(
name|relationship
operator|.
name|getTargetEntity
argument_list|()
operator|==
name|this
condition|)
block|{
name|relationship
operator|.
name|setTargetEntityName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// get all of the related object entities
for|for
control|(
name|ObjEntity
name|oe
range|:
name|map
operator|.
name|getMappedEntities
argument_list|(
name|this
argument_list|)
control|)
block|{
if|if
condition|(
name|oe
operator|.
name|getDbEntity
argument_list|()
operator|==
name|this
condition|)
block|{
name|oe
operator|.
name|setDbEntityName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * New entity has been created/added.      */
specifier|public
name|void
name|dbEntityAdded
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
comment|// does nothing currently
block|}
comment|/**      * Entity has been removed.      */
specifier|public
name|void
name|dbEntityRemoved
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
comment|// does nothing currently
block|}
specifier|public
name|void
name|dbAttributeAdded
parameter_list|(
name|AttributeEvent
name|e
parameter_list|)
block|{
name|this
operator|.
name|handleAttributeUpdate
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dbAttributeChanged
parameter_list|(
name|AttributeEvent
name|e
parameter_list|)
block|{
name|this
operator|.
name|handleAttributeUpdate
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dbAttributeRemoved
parameter_list|(
name|AttributeEvent
name|e
parameter_list|)
block|{
name|this
operator|.
name|handleAttributeUpdate
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleAttributeUpdate
parameter_list|(
name|AttributeEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
name|e
operator|==
literal|null
operator|)
operator|||
operator|(
name|e
operator|.
name|getEntity
argument_list|()
operator|!=
name|this
operator|)
condition|)
block|{
comment|// not our concern
return|return;
block|}
comment|// catch clearing (event with null ('any') DbAttribute)
name|Attribute
name|attribute
init|=
name|e
operator|.
name|getAttribute
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|attribute
operator|==
literal|null
operator|)
operator|&&
operator|(
name|this
operator|.
name|attributes
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|this
operator|.
name|primaryKey
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|generatedAttributes
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// make sure we handle a DbAttribute
if|if
condition|(
operator|!
operator|(
name|attribute
operator|instanceof
name|DbAttribute
operator|)
condition|)
block|{
return|return;
block|}
name|DbAttribute
name|dbAttribute
init|=
operator|(
name|DbAttribute
operator|)
name|attribute
decl_stmt|;
comment|// handle attribute name changes
if|if
condition|(
name|e
operator|.
name|getId
argument_list|()
operator|==
name|AttributeEvent
operator|.
name|CHANGE
operator|&&
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
name|String
name|oldName
init|=
name|e
operator|.
name|getOldName
argument_list|()
decl_stmt|;
name|String
name|newName
init|=
name|e
operator|.
name|getNewName
argument_list|()
decl_stmt|;
name|DataMap
name|map
init|=
name|getDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DbEntity
name|ent
range|:
name|map
operator|.
name|getDbEntities
argument_list|()
control|)
block|{
comment|// handle all of the dependent object entity attribute changes
for|for
control|(
name|ObjEntity
name|oe
range|:
name|map
operator|.
name|getMappedEntities
argument_list|(
name|ent
argument_list|)
control|)
block|{
for|for
control|(
name|ObjAttribute
name|attr
range|:
name|oe
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|attr
operator|.
name|getDbAttribute
argument_list|()
operator|==
name|dbAttribute
condition|)
block|{
name|attr
operator|.
name|setDbAttributePath
argument_list|(
name|newName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// handle all of the relationships / joins that use the changed
comment|// attribute
for|for
control|(
name|Relationship
name|rel
range|:
name|ent
operator|.
name|getRelationships
argument_list|()
control|)
block|{
for|for
control|(
name|DbJoin
name|join
range|:
operator|(
operator|(
name|DbRelationship
operator|)
name|rel
operator|)
operator|.
name|getJoins
argument_list|()
control|)
block|{
if|if
condition|(
name|join
operator|.
name|getSource
argument_list|()
operator|==
name|dbAttribute
condition|)
block|{
name|join
operator|.
name|setSourceName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|join
operator|.
name|getTarget
argument_list|()
operator|==
name|dbAttribute
condition|)
block|{
name|join
operator|.
name|setTargetName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// clear the attribute out of the collection
name|attributes
operator|.
name|remove
argument_list|(
name|oldName
argument_list|)
expr_stmt|;
comment|// add the attribute back in with the new name
name|super
operator|.
name|addAttribute
argument_list|(
name|dbAttribute
argument_list|)
expr_stmt|;
block|}
comment|// handle PK refresh
if|if
condition|(
name|primaryKey
operator|.
name|contains
argument_list|(
name|dbAttribute
argument_list|)
operator|||
name|dbAttribute
operator|.
name|isPrimaryKey
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|MapEvent
operator|.
name|ADD
case|:
name|this
operator|.
name|primaryKey
operator|.
name|add
argument_list|(
name|dbAttribute
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|REMOVE
case|:
name|this
operator|.
name|primaryKey
operator|.
name|remove
argument_list|(
name|dbAttribute
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// generic update
name|this
operator|.
name|primaryKey
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|next
range|:
name|getAttributes
argument_list|()
control|)
block|{
name|DbAttribute
name|dba
init|=
operator|(
name|DbAttribute
operator|)
name|next
decl_stmt|;
if|if
condition|(
name|dba
operator|.
name|isPrimaryKey
argument_list|()
condition|)
block|{
name|this
operator|.
name|primaryKey
operator|.
name|add
argument_list|(
name|dba
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// handle generated key refresh
if|if
condition|(
name|generatedAttributes
operator|.
name|contains
argument_list|(
name|dbAttribute
argument_list|)
operator|||
name|dbAttribute
operator|.
name|isGenerated
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|MapEvent
operator|.
name|ADD
case|:
name|this
operator|.
name|generatedAttributes
operator|.
name|add
argument_list|(
name|dbAttribute
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|REMOVE
case|:
name|this
operator|.
name|generatedAttributes
operator|.
name|remove
argument_list|(
name|dbAttribute
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// generic update
name|this
operator|.
name|generatedAttributes
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|next
range|:
name|getAttributes
argument_list|()
control|)
block|{
name|DbAttribute
name|dba
init|=
operator|(
name|DbAttribute
operator|)
name|next
decl_stmt|;
if|if
condition|(
name|dba
operator|.
name|isGenerated
argument_list|()
condition|)
block|{
name|this
operator|.
name|generatedAttributes
operator|.
name|add
argument_list|(
name|dba
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Relationship property changed.      */
specifier|public
name|void
name|dbRelationshipChanged
parameter_list|(
name|RelationshipEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
name|e
operator|==
literal|null
operator|)
operator|||
operator|(
name|e
operator|.
name|getEntity
argument_list|()
operator|!=
name|this
operator|)
condition|)
block|{
comment|// not our concern
return|return;
block|}
name|Relationship
name|rel
init|=
name|e
operator|.
name|getRelationship
argument_list|()
decl_stmt|;
comment|// make sure we handle a DbRelationship
if|if
condition|(
operator|!
operator|(
name|rel
operator|instanceof
name|DbRelationship
operator|)
condition|)
block|{
return|return;
block|}
name|DbRelationship
name|dbRel
init|=
operator|(
name|DbRelationship
operator|)
name|rel
decl_stmt|;
comment|// handle relationship name changes
if|if
condition|(
name|e
operator|.
name|getId
argument_list|()
operator|==
name|RelationshipEvent
operator|.
name|CHANGE
operator|&&
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
name|String
name|oldName
init|=
name|e
operator|.
name|getOldName
argument_list|()
decl_stmt|;
name|String
name|newName
init|=
name|e
operator|.
name|getNewName
argument_list|()
decl_stmt|;
name|DataMap
name|map
init|=
name|getDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
comment|// finds all object entities with a db relationship path to the renamed
comment|// relationship
for|for
control|(
name|ObjEntity
name|oe
range|:
name|map
operator|.
name|getObjEntities
argument_list|()
control|)
block|{
for|for
control|(
name|Relationship
name|relationship
range|:
name|oe
operator|.
name|getRelationships
argument_list|()
control|)
block|{
name|ObjRelationship
name|or
init|=
operator|(
name|ObjRelationship
operator|)
name|relationship
decl_stmt|;
comment|// rename the db relationship path with the new name
if|if
condition|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|or
operator|.
name|getDbRelationshipPath
argument_list|()
argument_list|,
name|oldName
argument_list|)
condition|)
block|{
name|or
operator|.
name|setDbRelationshipPath
argument_list|(
name|newName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// clear the relationship out of the collection
name|relationships
operator|.
name|remove
argument_list|(
name|oldName
argument_list|)
expr_stmt|;
comment|// add the relationship back in with the new name
name|super
operator|.
name|addRelationship
argument_list|(
name|dbRel
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Relationship has been created/added. */
specifier|public
name|void
name|dbRelationshipAdded
parameter_list|(
name|RelationshipEvent
name|e
parameter_list|)
block|{
comment|// does nothing currently
block|}
comment|/** Relationship has been removed. */
specifier|public
name|void
name|dbRelationshipRemoved
parameter_list|(
name|RelationshipEvent
name|e
parameter_list|)
block|{
comment|// does nothing currently
block|}
comment|/**      * Returns true if there is full replacement id is attached to an ObjectId. "Full"      * means that all PK columns are present and only PK columns are present.      *       * @since 1.2      */
specifier|public
name|boolean
name|isFullReplacementIdAttached
parameter_list|(
name|ObjectId
name|id
parameter_list|)
block|{
if|if
condition|(
operator|!
name|id
operator|.
name|isReplacementIdAttached
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|replacement
init|=
name|id
operator|.
name|getReplacementIdMap
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
name|pk
init|=
name|getPrimaryKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|pk
operator|.
name|size
argument_list|()
operator|!=
name|replacement
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|DbAttribute
name|attribute
range|:
name|pk
control|)
block|{
if|if
condition|(
operator|!
name|replacement
operator|.
name|containsKey
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Transforms Expression rooted in this entity to an analogous expression rooted in      * related entity.      *       * @since 1.1      */
annotation|@
name|Override
specifier|public
name|Expression
name|translateToRelatedEntity
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|String
name|relationshipPath
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|relationshipPath
operator|==
literal|null
condition|)
block|{
return|return
name|expression
return|;
block|}
return|return
name|expression
operator|.
name|transform
argument_list|(
operator|new
name|RelationshipPathConverter
argument_list|(
name|relationshipPath
argument_list|)
argument_list|)
return|;
block|}
specifier|final
class|class
name|RelationshipPathConverter
implements|implements
name|Transformer
block|{
name|String
name|relationshipPath
decl_stmt|;
name|RelationshipPathConverter
parameter_list|(
name|String
name|relationshipPath
parameter_list|)
block|{
name|this
operator|.
name|relationshipPath
operator|=
name|relationshipPath
expr_stmt|;
block|}
specifier|public
name|Object
name|transform
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|input
operator|instanceof
name|Expression
operator|)
condition|)
block|{
return|return
name|input
return|;
block|}
name|Expression
name|expression
init|=
operator|(
name|Expression
operator|)
name|input
decl_stmt|;
if|if
condition|(
name|expression
operator|.
name|getType
argument_list|()
operator|!=
name|Expression
operator|.
name|DB_PATH
condition|)
block|{
return|return
name|input
return|;
block|}
name|String
name|path
init|=
operator|(
name|String
operator|)
name|expression
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|converted
init|=
name|translatePath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Expression
name|transformed
init|=
name|ExpressionFactory
operator|.
name|expressionOfType
argument_list|(
name|Expression
operator|.
name|DB_PATH
argument_list|)
decl_stmt|;
name|transformed
operator|.
name|setOperand
argument_list|(
literal|0
argument_list|,
name|converted
argument_list|)
expr_stmt|;
return|return
name|transformed
return|;
block|}
name|String
name|translatePath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
comment|// algorithm to determine the translated path:
comment|// 1. If relationship path equals to input, travel one step back, and then one
comment|// step forward.
comment|// 2. If input completely includes relationship path, use input's remaining
comment|// tail.
comment|// 3. If relationship path and input have none or some leading components in
comment|// common,
comment|// (a) strip common leading part;
comment|// (b) reverse the remaining relationship part;
comment|// (c) append remaining input to the reversed remaining relationship.
comment|// case (1)
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|relationshipPath
argument_list|)
condition|)
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|finalPath
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|CayenneMapEntry
argument_list|>
name|it
init|=
name|resolvePathComponents
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// just do one step back and one step forward to create correct joins...
comment|// find last rel...
name|DbRelationship
name|lastDBR
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// relationship path components must be DbRelationships
name|lastDBR
operator|=
operator|(
name|DbRelationship
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lastDBR
operator|!=
literal|null
condition|)
block|{
name|prependReversedPath
argument_list|(
name|finalPath
argument_list|,
name|lastDBR
argument_list|)
expr_stmt|;
name|appendPath
argument_list|(
name|finalPath
argument_list|,
name|lastDBR
argument_list|)
expr_stmt|;
block|}
return|return
name|convertToPath
argument_list|(
name|finalPath
argument_list|)
return|;
block|}
comment|// case (2)
name|String
name|relationshipPathWithDot
init|=
name|relationshipPath
operator|+
name|Entity
operator|.
name|PATH_SEPARATOR
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|relationshipPathWithDot
argument_list|)
condition|)
block|{
return|return
name|path
operator|.
name|substring
argument_list|(
name|relationshipPathWithDot
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
comment|// case (3)
name|Iterator
argument_list|<
name|CayenneMapEntry
argument_list|>
name|pathIt
init|=
name|resolvePathComponents
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|CayenneMapEntry
argument_list|>
name|relationshipIt
init|=
name|resolvePathComponents
argument_list|(
name|relationshipPath
argument_list|)
decl_stmt|;
comment|// for inserts from the both ends use LinkedList
name|LinkedList
argument_list|<
name|String
argument_list|>
name|finalPath
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|relationshipIt
operator|.
name|hasNext
argument_list|()
operator|&&
name|pathIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// relationship path components must be DbRelationships
name|DbRelationship
name|nextDBR
init|=
operator|(
name|DbRelationship
operator|)
name|relationshipIt
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// expression components may be attributes or relationships
name|CayenneMapEntry
name|next
init|=
name|pathIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextDBR
operator|!=
name|next
condition|)
block|{
comment|// found split point
comment|// consume the last iteration components,
comment|// then break out to finish the iterators independently
name|prependReversedPath
argument_list|(
name|finalPath
argument_list|,
name|nextDBR
argument_list|)
expr_stmt|;
name|appendPath
argument_list|(
name|finalPath
argument_list|,
name|next
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
block|}
comment|// append remainder of the relationship, reversing it
while|while
condition|(
name|relationshipIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbRelationship
name|nextDBR
init|=
operator|(
name|DbRelationship
operator|)
name|relationshipIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|prependReversedPath
argument_list|(
name|finalPath
argument_list|,
name|nextDBR
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|pathIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// components may be attributes or relationships
name|CayenneMapEntry
name|next
init|=
name|pathIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|appendPath
argument_list|(
name|finalPath
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
return|return
name|convertToPath
argument_list|(
name|finalPath
argument_list|)
return|;
block|}
specifier|private
name|String
name|convertToPath
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|path
parameter_list|)
block|{
name|StringBuilder
name|converted
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|path
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|converted
operator|.
name|append
argument_list|(
name|Entity
operator|.
name|PATH_SEPARATOR
argument_list|)
expr_stmt|;
block|}
name|converted
operator|.
name|append
argument_list|(
name|path
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|converted
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|prependReversedPath
parameter_list|(
name|LinkedList
argument_list|<
name|String
argument_list|>
name|finalPath
parameter_list|,
name|DbRelationship
name|relationship
parameter_list|)
block|{
name|DbRelationship
name|revNextDBR
init|=
name|relationship
operator|.
name|getReverseRelationship
argument_list|()
decl_stmt|;
if|if
condition|(
name|revNextDBR
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unable to find reverse DbRelationship for "
operator|+
name|relationship
operator|.
name|getSourceEntity
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
name|Entity
operator|.
name|PATH_SEPARATOR
operator|+
name|relationship
operator|.
name|getName
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
block|}
name|finalPath
operator|.
name|addFirst
argument_list|(
name|revNextDBR
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendPath
parameter_list|(
name|LinkedList
argument_list|<
name|String
argument_list|>
name|finalPath
parameter_list|,
name|CayenneMapEntry
name|pathComponent
parameter_list|)
block|{
name|finalPath
operator|.
name|addLast
argument_list|(
name|pathComponent
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

