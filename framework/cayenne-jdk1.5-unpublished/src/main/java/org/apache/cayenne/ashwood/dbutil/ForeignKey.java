begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_comment
comment|/* ====================================================================  *  * Copyright(c) 2003, Andriy Shapochka  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above  *    copyright notice, this list of conditions and the following  *    disclaimer.  *  * 2. Redistributions in binary form must reproduce the above  *    copyright notice, this list of conditions and the following  *    disclaimer in the documentation and/or other materials  *    provided with the distribution.  *  * 3. Neither the name of the ASHWOOD nor the  *    names of its contributors may be used to endorse or  *    promote products derived from this software without  *    specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * ====================================================================  *  * This software consists of voluntary contributions made by  * individuals on behalf of the ASHWOOD Project and was originally  * created by Andriy Shapochka.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ashwood
operator|.
name|dbutil
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_class
specifier|public
class|class
name|ForeignKey
implements|implements
name|Serializable
block|{
specifier|private
name|String
name|pkTableCatalog
decl_stmt|;
specifier|private
name|String
name|pkTableSchema
decl_stmt|;
specifier|private
name|String
name|pkTableName
decl_stmt|;
specifier|private
name|String
name|pkColumnName
decl_stmt|;
specifier|private
name|Table
name|owner
decl_stmt|;
specifier|private
name|String
name|columnName
decl_stmt|;
specifier|private
name|short
name|updateRule
decl_stmt|;
specifier|private
name|short
name|deleteRule
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|pkName
decl_stmt|;
specifier|private
name|short
name|deferrability
decl_stmt|;
specifier|private
name|short
name|keySequence
decl_stmt|;
specifier|public
name|ForeignKey
parameter_list|()
block|{
block|}
specifier|public
name|ForeignKey
parameter_list|(
name|Column
name|fkColumn
parameter_list|)
block|{
name|columnName
operator|=
name|fkColumn
operator|.
name|getName
argument_list|()
expr_stmt|;
name|owner
operator|=
name|fkColumn
operator|.
name|getOwner
argument_list|()
expr_stmt|;
name|keySequence
operator|=
operator|(
name|short
operator|)
operator|(
name|owner
operator|.
name|getForeignKeys
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
expr_stmt|;
name|name
operator|=
name|owner
operator|.
name|getName
argument_list|()
operator|+
literal|"_FK"
operator|+
name|keySequence
expr_stmt|;
block|}
specifier|public
name|String
name|getPkTableCatalog
parameter_list|()
block|{
return|return
name|pkTableCatalog
return|;
block|}
specifier|public
name|void
name|setPkTableCatalog
parameter_list|(
name|String
name|pkTableCatalog
parameter_list|)
block|{
name|this
operator|.
name|pkTableCatalog
operator|=
name|pkTableCatalog
expr_stmt|;
block|}
specifier|public
name|void
name|setPkTableSchema
parameter_list|(
name|String
name|pkTableSchema
parameter_list|)
block|{
name|this
operator|.
name|pkTableSchema
operator|=
name|pkTableSchema
expr_stmt|;
block|}
specifier|public
name|String
name|getPkTableSchema
parameter_list|()
block|{
return|return
name|pkTableSchema
return|;
block|}
specifier|public
name|void
name|setPkTableName
parameter_list|(
name|String
name|pkTableName
parameter_list|)
block|{
name|this
operator|.
name|pkTableName
operator|=
name|pkTableName
expr_stmt|;
block|}
specifier|public
name|String
name|getPkTableName
parameter_list|()
block|{
return|return
name|pkTableName
return|;
block|}
specifier|public
name|void
name|setPkColumnName
parameter_list|(
name|String
name|pkColumnName
parameter_list|)
block|{
name|this
operator|.
name|pkColumnName
operator|=
name|pkColumnName
expr_stmt|;
block|}
specifier|public
name|String
name|getPkColumnName
parameter_list|()
block|{
return|return
name|pkColumnName
return|;
block|}
specifier|public
name|void
name|setOwner
parameter_list|(
name|Table
name|owner
parameter_list|)
block|{
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
block|}
specifier|public
name|Table
name|getOwner
parameter_list|()
block|{
return|return
name|owner
return|;
block|}
specifier|public
name|void
name|setColumnName
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
block|}
specifier|public
name|String
name|getColumnName
parameter_list|()
block|{
return|return
name|columnName
return|;
block|}
specifier|public
name|void
name|setKeySequence
parameter_list|(
name|short
name|keySequence
parameter_list|)
block|{
name|this
operator|.
name|keySequence
operator|=
name|keySequence
expr_stmt|;
block|}
specifier|public
name|short
name|getKeySequence
parameter_list|()
block|{
return|return
name|keySequence
return|;
block|}
specifier|public
name|void
name|setUpdateRule
parameter_list|(
name|short
name|updateRule
parameter_list|)
block|{
name|this
operator|.
name|updateRule
operator|=
name|updateRule
expr_stmt|;
block|}
specifier|public
name|short
name|getUpdateRule
parameter_list|()
block|{
return|return
name|updateRule
return|;
block|}
specifier|public
name|void
name|setDeleteRule
parameter_list|(
name|short
name|deleteRule
parameter_list|)
block|{
name|this
operator|.
name|deleteRule
operator|=
name|deleteRule
expr_stmt|;
block|}
specifier|public
name|short
name|getDeleteRule
parameter_list|()
block|{
return|return
name|deleteRule
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setPkName
parameter_list|(
name|String
name|pkName
parameter_list|)
block|{
name|this
operator|.
name|pkName
operator|=
name|pkName
expr_stmt|;
block|}
specifier|public
name|String
name|getPkName
parameter_list|()
block|{
return|return
name|pkName
return|;
block|}
specifier|public
name|void
name|setDeferrability
parameter_list|(
name|short
name|deferrability
parameter_list|)
block|{
name|this
operator|.
name|deferrability
operator|=
name|deferrability
expr_stmt|;
block|}
specifier|public
name|short
name|getDeferrability
parameter_list|()
block|{
return|return
name|deferrability
return|;
block|}
block|}
end_class

end_unit

