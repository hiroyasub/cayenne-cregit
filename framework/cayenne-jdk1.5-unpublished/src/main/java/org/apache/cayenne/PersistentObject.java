begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ToManyMapProperty
import|;
end_import

begin_comment
comment|/**  * A convenience base superclass for concrete Persistent objects. Provides implementation  * of properties declared in Persistent interface.  *<h4>POJO Note</h4>  *<p>  * If having PersistentObject as a superclass presents a problem in an application, source  * code of this class can be copied verbatim to a custom class generation template.  * Desired superclass can be set in CayenneModeler.  *</p>  *   * @since 1.2  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|PersistentObject
implements|implements
name|Persistent
block|{
specifier|protected
name|ObjectId
name|objectId
decl_stmt|;
specifier|protected
name|int
name|persistenceState
decl_stmt|;
specifier|protected
specifier|transient
name|ObjectContext
name|objectContext
decl_stmt|;
comment|/**      * Creates a new transient object.      */
specifier|public
name|PersistentObject
parameter_list|()
block|{
name|this
operator|.
name|persistenceState
operator|=
name|PersistenceState
operator|.
name|TRANSIENT
expr_stmt|;
block|}
specifier|public
name|int
name|getPersistenceState
parameter_list|()
block|{
return|return
name|persistenceState
return|;
block|}
specifier|public
name|void
name|setPersistenceState
parameter_list|(
name|int
name|persistenceState
parameter_list|)
block|{
name|this
operator|.
name|persistenceState
operator|=
name|persistenceState
expr_stmt|;
if|if
condition|(
name|persistenceState
operator|==
name|PersistenceState
operator|.
name|TRANSIENT
condition|)
block|{
name|setObjectContext
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ObjectContext
name|getObjectContext
parameter_list|()
block|{
return|return
name|objectContext
return|;
block|}
specifier|public
name|void
name|setObjectContext
parameter_list|(
name|ObjectContext
name|objectContext
parameter_list|)
block|{
name|this
operator|.
name|objectContext
operator|=
name|objectContext
expr_stmt|;
block|}
specifier|public
name|ObjectId
name|getObjectId
parameter_list|()
block|{
return|return
name|objectId
return|;
block|}
specifier|public
name|void
name|setObjectId
parameter_list|(
name|ObjectId
name|objectId
parameter_list|)
block|{
name|this
operator|.
name|objectId
operator|=
name|objectId
expr_stmt|;
block|}
comment|/**      * Returns a map key for a given to-many map relationship and a target object.      *       * @since 3.0      */
specifier|protected
name|Object
name|getMapKey
parameter_list|(
name|String
name|relationshipName
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|EntityResolver
name|resolver
init|=
name|objectContext
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
name|ClassDescriptor
name|descriptor
init|=
name|resolver
operator|.
name|getClassDescriptor
argument_list|(
name|objectId
operator|.
name|getEntityName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|descriptor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"DataObject's entity is unmapped, objectId: "
operator|+
name|objectId
argument_list|)
throw|;
block|}
name|Property
name|property
init|=
name|descriptor
operator|.
name|getProperty
argument_list|(
name|relationshipName
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|instanceof
name|ToManyMapProperty
condition|)
block|{
return|return
operator|(
operator|(
name|ToManyMapProperty
operator|)
name|property
operator|)
operator|.
name|getMapKey
argument_list|(
name|value
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Relationship '"
operator|+
name|relationshipName
operator|+
literal|"' is not a to-many Map"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|state
init|=
name|PersistenceState
operator|.
name|persistenceStateName
argument_list|(
name|getPersistenceState
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|", id="
argument_list|)
operator|.
name|append
argument_list|(
name|objectId
argument_list|)
operator|.
name|append
argument_list|(
literal|", state="
argument_list|)
operator|.
name|append
argument_list|(
name|state
argument_list|)
operator|.
name|append
argument_list|(
literal|", context="
argument_list|)
operator|.
name|append
argument_list|(
name|objectContext
argument_list|)
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

