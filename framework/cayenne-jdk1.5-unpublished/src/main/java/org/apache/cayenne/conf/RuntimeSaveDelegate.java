begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|iterators
operator|.
name|TransformIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|AutoAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * Save delegate used for saving Cayenne access stack.  *   */
end_comment

begin_class
specifier|public
class|class
name|RuntimeSaveDelegate
implements|implements
name|ConfigSaverDelegate
block|{
specifier|protected
name|Configuration
name|config
decl_stmt|;
specifier|public
name|RuntimeSaveDelegate
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
comment|/**      * Constructor for RuntimeSaveDelegate.      */
specifier|public
name|RuntimeSaveDelegate
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|DataDomain
name|findDomain
parameter_list|(
name|String
name|domainName
parameter_list|)
block|{
name|DataDomain
name|domain
init|=
name|config
operator|.
name|getDomain
argument_list|(
name|domainName
argument_list|)
decl_stmt|;
if|if
condition|(
name|domain
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't find DataDomain: "
operator|+
name|domainName
argument_list|)
throw|;
block|}
return|return
name|domain
return|;
block|}
specifier|protected
name|DataNode
name|findNode
parameter_list|(
name|String
name|domainName
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
name|DataDomain
name|domain
init|=
name|findDomain
argument_list|(
name|domainName
argument_list|)
decl_stmt|;
name|DataNode
name|node
init|=
name|domain
operator|.
name|getNode
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't find DataNode: "
operator|+
name|domainName
operator|+
literal|"."
operator|+
name|nodeName
argument_list|)
throw|;
block|}
return|return
name|node
return|;
block|}
comment|/**      * @since 1.1      */
specifier|public
name|String
name|projectVersion
parameter_list|()
block|{
return|return
name|config
operator|.
name|getProjectVersion
argument_list|()
return|;
block|}
specifier|public
name|Iterator
name|domainNames
parameter_list|()
block|{
name|Transformer
name|tr
init|=
operator|new
name|Transformer
argument_list|()
block|{
specifier|public
name|Object
name|transform
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
return|return
operator|(
operator|(
name|DataDomain
operator|)
name|input
operator|)
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|TransformIterator
argument_list|(
name|config
operator|.
name|getDomains
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|tr
argument_list|)
return|;
block|}
comment|/**      * @since 1.1      */
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|viewNames
parameter_list|()
block|{
return|return
name|config
operator|.
name|getDataViewLocations
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * @since 1.1      */
specifier|public
name|String
name|viewLocation
parameter_list|(
name|String
name|dataViewName
parameter_list|)
block|{
return|return
name|config
operator|.
name|getDataViewLocations
argument_list|()
operator|.
name|get
argument_list|(
name|dataViewName
argument_list|)
return|;
block|}
specifier|public
name|Iterator
name|propertyNames
parameter_list|(
name|String
name|domainName
parameter_list|)
block|{
return|return
name|findDomain
argument_list|(
name|domainName
argument_list|)
operator|.
name|getProperties
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|String
name|propertyValue
parameter_list|(
name|String
name|domainName
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|findDomain
argument_list|(
name|domainName
argument_list|)
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
specifier|public
name|String
name|mapLocation
parameter_list|(
name|String
name|domainName
parameter_list|,
name|String
name|mapName
parameter_list|)
block|{
return|return
name|findDomain
argument_list|(
name|domainName
argument_list|)
operator|.
name|getMap
argument_list|(
name|mapName
argument_list|)
operator|.
name|getLocation
argument_list|()
return|;
block|}
specifier|public
name|Iterator
name|mapNames
parameter_list|(
name|String
name|domainName
parameter_list|)
block|{
comment|// sort maps by name
name|List
argument_list|<
name|DataMap
argument_list|>
name|maps
init|=
operator|new
name|ArrayList
argument_list|<
name|DataMap
argument_list|>
argument_list|(
name|findDomain
argument_list|(
name|domainName
argument_list|)
operator|.
name|getDataMaps
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|maps
argument_list|,
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|String
name|name1
init|=
operator|(
name|o1
operator|!=
literal|null
operator|)
condition|?
operator|(
operator|(
name|DataMap
operator|)
name|o1
operator|)
operator|.
name|getName
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|name2
init|=
operator|(
name|o1
operator|!=
literal|null
operator|)
condition|?
operator|(
operator|(
name|DataMap
operator|)
name|o2
operator|)
operator|.
name|getName
argument_list|()
else|:
literal|null
decl_stmt|;
return|return
name|Util
operator|.
name|nullSafeCompare
argument_list|(
literal|true
argument_list|,
name|name1
argument_list|,
name|name2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Transformer
name|tr
init|=
operator|new
name|Transformer
argument_list|()
block|{
specifier|public
name|Object
name|transform
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
return|return
operator|(
operator|(
name|DataMap
operator|)
name|input
operator|)
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|TransformIterator
argument_list|(
name|maps
operator|.
name|iterator
argument_list|()
argument_list|,
name|tr
argument_list|)
return|;
block|}
specifier|public
name|String
name|nodeAdapterName
parameter_list|(
name|String
name|domainName
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
name|DbAdapter
name|adapter
init|=
name|findNode
argument_list|(
name|domainName
argument_list|,
name|nodeName
argument_list|)
operator|.
name|getAdapter
argument_list|()
decl_stmt|;
return|return
operator|(
name|adapter
operator|!=
literal|null
operator|&&
name|adapter
operator|.
name|getClass
argument_list|()
operator|!=
name|AutoAdapter
operator|.
name|class
operator|)
condition|?
name|adapter
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
name|String
name|nodeDataSourceName
parameter_list|(
name|String
name|domainName
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
return|return
name|findNode
argument_list|(
name|domainName
argument_list|,
name|nodeName
argument_list|)
operator|.
name|getDataSourceLocation
argument_list|()
return|;
block|}
specifier|public
name|String
name|nodeFactoryName
parameter_list|(
name|String
name|domainName
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
return|return
name|findNode
argument_list|(
name|domainName
argument_list|,
name|nodeName
argument_list|)
operator|.
name|getDataSourceFactory
argument_list|()
return|;
block|}
specifier|public
name|Iterator
name|nodeNames
parameter_list|(
name|String
name|domainName
parameter_list|)
block|{
name|Transformer
name|tr
init|=
operator|new
name|Transformer
argument_list|()
block|{
specifier|public
name|Object
name|transform
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
return|return
operator|(
operator|(
name|DataNode
operator|)
name|input
operator|)
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|// sort nodes by name
name|List
argument_list|<
name|DataNode
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DataNode
argument_list|>
argument_list|(
name|findDomain
argument_list|(
name|domainName
argument_list|)
operator|.
name|getDataNodes
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|nodes
argument_list|,
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|String
name|name1
init|=
operator|(
name|o1
operator|!=
literal|null
operator|)
condition|?
operator|(
operator|(
name|DataNode
operator|)
name|o1
operator|)
operator|.
name|getName
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|name2
init|=
operator|(
name|o1
operator|!=
literal|null
operator|)
condition|?
operator|(
operator|(
name|DataNode
operator|)
name|o2
operator|)
operator|.
name|getName
argument_list|()
else|:
literal|null
decl_stmt|;
return|return
name|Util
operator|.
name|nullSafeCompare
argument_list|(
literal|true
argument_list|,
name|name1
argument_list|,
name|name2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
operator|new
name|TransformIterator
argument_list|(
name|nodes
operator|.
name|iterator
argument_list|()
argument_list|,
name|tr
argument_list|)
return|;
block|}
specifier|public
name|Iterator
name|linkedMapNames
parameter_list|(
name|String
name|domainName
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
name|Transformer
name|tr
init|=
operator|new
name|Transformer
argument_list|()
block|{
specifier|public
name|Object
name|transform
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
return|return
operator|(
operator|(
name|DataMap
operator|)
name|input
operator|)
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|Collection
argument_list|<
name|DataMap
argument_list|>
name|maps
init|=
name|findNode
argument_list|(
name|domainName
argument_list|,
name|nodeName
argument_list|)
operator|.
name|getDataMaps
argument_list|()
decl_stmt|;
return|return
operator|new
name|TransformIterator
argument_list|(
name|maps
operator|.
name|iterator
argument_list|()
argument_list|,
name|tr
argument_list|)
return|;
block|}
block|}
end_class

end_unit

