begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|VelocityContext
import|;
end_import

begin_comment
comment|/**  * Represents a class generation "artifact" which is a facade to a metadata object used  * for a given single generation template run.  *   * @since 3.0  */
end_comment

begin_interface
specifier|public
interface|interface
name|Artifact
block|{
specifier|public
specifier|static
name|String
name|STRING_UTILS_KEY
init|=
literal|"stringUtils"
decl_stmt|;
specifier|public
specifier|static
name|String
name|IMPORT_UTILS_KEY
init|=
literal|"importUtils"
decl_stmt|;
comment|/**      * Root object, such as ObjEntity or Embeddable, etc.      */
specifier|public
specifier|static
name|String
name|OBJECT_KEY
init|=
literal|"object"
decl_stmt|;
specifier|public
specifier|static
name|String
name|SUPER_CLASS_KEY
init|=
literal|"superClassName"
decl_stmt|;
specifier|public
specifier|static
name|String
name|SUPER_PACKAGE_KEY
init|=
literal|"superPackageName"
decl_stmt|;
specifier|public
specifier|static
name|String
name|SUB_CLASS_KEY
init|=
literal|"subClassName"
decl_stmt|;
specifier|public
specifier|static
name|String
name|SUB_PACKAGE_KEY
init|=
literal|"subPackageName"
decl_stmt|;
specifier|public
specifier|static
name|String
name|BASE_CLASS_KEY
init|=
literal|"baseClassName"
decl_stmt|;
specifier|public
specifier|static
name|String
name|BASE_PACKAGE_KEY
init|=
literal|"basePackageName"
decl_stmt|;
specifier|public
specifier|static
name|String
name|CALLBACK_NAMES_KEY
init|=
literal|"callbackNames"
decl_stmt|;
name|TemplateType
index|[]
name|getTemplateTypes
parameter_list|(
name|ArtifactGenerationMode
name|mode
parameter_list|)
function_decl|;
name|String
name|getQualifiedBaseClassName
parameter_list|()
function_decl|;
name|String
name|getQualifiedClassName
parameter_list|()
function_decl|;
comment|/**      * Returns a mapping metadata object for this artifact.      */
name|Object
name|getObject
parameter_list|()
function_decl|;
comment|/**      * A callback method that allows each artifact to add its own special keys to the      * context. Invoked from      * {@link ClassGenerationAction#resetContextForArtifactTemplate(Artifact, TemplateType)},      * after the context is initialized by code generator, so this method can use      * predefined keys from the context.      */
name|void
name|postInitContext
parameter_list|(
name|VelocityContext
name|context
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

