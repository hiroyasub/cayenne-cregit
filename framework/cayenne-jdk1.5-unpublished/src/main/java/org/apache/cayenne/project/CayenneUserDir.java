begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_comment
comment|/**  * CayenneUserDir represents a directory where all Cayenne-related information   * is stored on the user machine. This is normally a<code>$HOME/.cayenne</code>  * directory.  *   */
end_comment

begin_class
specifier|public
class|class
name|CayenneUserDir
block|{
specifier|protected
specifier|static
name|CayenneUserDir
name|sharedInstance
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CAYENNE_DIR
init|=
literal|".cayenne"
decl_stmt|;
comment|/**      * A property name for the property that allows to define an alternative      * location of Cayenne User Directory (instead of default "$HOME/.cayenne").      *        * @since 1.1      */
specifier|public
specifier|static
specifier|final
name|String
name|ALT_USER_DIR_PROPERTY
init|=
literal|"cayenne.userdir"
decl_stmt|;
specifier|protected
name|File
name|cayenneUserDir
decl_stmt|;
specifier|public
specifier|static
name|CayenneUserDir
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|sharedInstance
operator|==
literal|null
condition|)
block|{
name|sharedInstance
operator|=
operator|new
name|CayenneUserDir
argument_list|()
expr_stmt|;
block|}
return|return
name|sharedInstance
return|;
block|}
comment|/**      * Constructor for CayenneUserDir.      */
specifier|protected
name|CayenneUserDir
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|File
name|tmpDir
init|=
literal|null
decl_stmt|;
name|String
name|dirName
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|ALT_USER_DIR_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirName
operator|!=
literal|null
condition|)
block|{
name|tmpDir
operator|=
operator|new
name|File
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|File
name|homeDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
decl_stmt|;
name|tmpDir
operator|=
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
name|CAYENNE_DIR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|tmpDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|tmpDir
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
name|tmpDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|tmpDir
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|tmpDir
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|tmpDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|tmpDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|tmpDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|tmpDir
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|cayenneUserDir
operator|=
name|tmpDir
expr_stmt|;
block|}
comment|/**      * Returns a directory object where all user Cayenne-related configuration is stored.      * May return null if the directory is not accessible for whatever reason.      */
specifier|public
name|File
name|getDirectory
parameter_list|()
block|{
return|return
name|cayenneUserDir
return|;
block|}
comment|/**      * Return false if the directory is not accessible for      * any reason at least for reading.      */
specifier|public
name|boolean
name|canRead
parameter_list|()
block|{
return|return
name|cayenneUserDir
operator|!=
literal|null
return|;
block|}
comment|/**      * Return false if the directory is not accessible for      * any reason at least for reading.      */
specifier|public
name|boolean
name|canWrite
parameter_list|()
block|{
return|return
name|cayenneUserDir
operator|!=
literal|null
operator|&&
name|cayenneUserDir
operator|.
name|canWrite
argument_list|()
return|;
block|}
specifier|public
name|File
name|resolveFile
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|cayenneUserDir
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

