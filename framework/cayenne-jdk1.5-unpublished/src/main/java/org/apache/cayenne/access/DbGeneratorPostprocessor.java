begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|AutoAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|hsqldb
operator|.
name|HSQLDBAdapter
import|;
end_import

begin_comment
comment|/**  * A helper class that handles postprocessing after the schema generation operation. E.g.  * some databases require a checkpoint command to be run for the schema changes to be  * flushed to disk.  *   */
end_comment

begin_class
class|class
name|DbGeneratorPostprocessor
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|HSQLDBPostprocessor
argument_list|>
name|postprocessors
decl_stmt|;
static|static
block|{
name|postprocessors
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HSQLDBPostprocessor
argument_list|>
argument_list|()
expr_stmt|;
name|postprocessors
operator|.
name|put
argument_list|(
name|HSQLDBAdapter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HSQLDBPostprocessor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|execute
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|SQLException
block|{
name|DbAdapter
name|adapter
init|=
name|AutoAdapter
operator|.
name|getDefaultFactory
argument_list|()
operator|.
name|createAdapter
argument_list|(
name|connection
operator|.
name|getMetaData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|adapter
operator|!=
literal|null
condition|)
block|{
name|Postprocessor
name|postprocessor
init|=
name|postprocessors
operator|.
name|get
argument_list|(
name|adapter
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|postprocessor
operator|!=
literal|null
condition|)
block|{
name|postprocessor
operator|.
name|execute
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
specifier|abstract
class|class
name|Postprocessor
block|{
specifier|abstract
name|void
name|execute
parameter_list|(
name|Connection
name|c
parameter_list|)
throws|throws
name|SQLException
function_decl|;
block|}
specifier|static
class|class
name|HSQLDBPostprocessor
extends|extends
name|Postprocessor
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Connection
name|c
parameter_list|)
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|st
init|=
name|c
operator|.
name|prepareStatement
argument_list|(
literal|"CHECKPOINT"
argument_list|)
decl_stmt|;
try|try
block|{
name|st
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

