begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistenceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_comment
comment|/**  * An operation that merges changes from a single object registered in some ObjectContext,  * to a peer object in an ObjectConext that is a child of that context.  *   * @since 3.1  */
end_comment

begin_class
specifier|public
class|class
name|ShallowMergeOperation
block|{
specifier|private
specifier|final
name|ObjectContext
name|context
decl_stmt|;
specifier|public
name|ShallowMergeOperation
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
specifier|public
name|Persistent
name|merge
parameter_list|(
name|Persistent
name|peerInParentContext
parameter_list|)
block|{
if|if
condition|(
name|peerInParentContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null peerInParentContext"
argument_list|)
throw|;
block|}
comment|// handling of HOLLOW peer state is here for completeness... Wonder if we ever
comment|// have a case where it is applicable.
name|int
name|peerState
init|=
name|peerInParentContext
operator|.
name|getPersistenceState
argument_list|()
decl_stmt|;
name|ObjectId
name|id
init|=
name|peerInParentContext
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|ClassDescriptor
name|descriptor
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getClassDescriptor
argument_list|(
name|id
operator|.
name|getEntityName
argument_list|()
argument_list|)
decl_stmt|;
name|GraphManager
name|graphManager
init|=
name|context
operator|.
name|getGraphManager
argument_list|()
decl_stmt|;
comment|// have to synchronize almost the entire method to prevent multiple threads from
comment|// messing up dataobjects per CAY-845.
synchronized|synchronized
init|(
name|graphManager
init|)
block|{
name|Persistent
name|object
init|=
operator|(
name|Persistent
operator|)
name|graphManager
operator|.
name|getNode
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// merge into an existing object
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|object
operator|=
operator|(
name|Persistent
operator|)
name|descriptor
operator|.
name|createObject
argument_list|()
expr_stmt|;
name|object
operator|.
name|setObjectContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|object
operator|.
name|setObjectId
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|peerState
operator|==
name|PersistenceState
operator|.
name|HOLLOW
condition|)
block|{
name|object
operator|.
name|setPersistenceState
argument_list|(
name|PersistenceState
operator|.
name|HOLLOW
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|object
operator|.
name|setPersistenceState
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|)
expr_stmt|;
block|}
name|graphManager
operator|.
name|registerNode
argument_list|(
name|id
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Andrus, 1/24/2006 implement smart merge for modified objects...
if|if
condition|(
name|peerState
operator|!=
name|PersistenceState
operator|.
name|HOLLOW
operator|&&
name|object
operator|.
name|getPersistenceState
argument_list|()
operator|!=
name|PersistenceState
operator|.
name|MODIFIED
operator|&&
name|object
operator|.
name|getPersistenceState
argument_list|()
operator|!=
name|PersistenceState
operator|.
name|DELETED
condition|)
block|{
name|descriptor
operator|.
name|shallowMerge
argument_list|(
name|peerInParentContext
argument_list|,
name|object
argument_list|)
expr_stmt|;
if|if
condition|(
name|object
operator|.
name|getPersistenceState
argument_list|()
operator|==
name|PersistenceState
operator|.
name|HOLLOW
condition|)
block|{
name|object
operator|.
name|setPersistenceState
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|object
return|;
block|}
block|}
block|}
end_class

end_unit

