begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
package|;
end_package

begin_comment
comment|/**  * An accessor for fields storing embedded objects. This accessor will initialize null  * fields with appropriate embeddable objects when needed during get and set calls.  *   * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|EmbeddedFieldAccessor
implements|implements
name|Accessor
block|{
specifier|protected
name|String
name|propertyPath
decl_stmt|;
specifier|protected
name|Accessor
name|embeddedAccessor
decl_stmt|;
specifier|protected
name|Accessor
name|embeddableAccessor
decl_stmt|;
specifier|protected
name|EmbeddableDescriptor
name|embeddableDescriptor
decl_stmt|;
specifier|public
name|EmbeddedFieldAccessor
parameter_list|(
name|EmbeddableDescriptor
name|embeddableDescriptor
parameter_list|,
name|Accessor
name|embeddedAccessor
parameter_list|,
name|Accessor
name|embeddableAccessor
parameter_list|)
block|{
name|this
operator|.
name|propertyPath
operator|=
name|embeddedAccessor
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|embeddableAccessor
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|embeddableDescriptor
operator|=
name|embeddableDescriptor
expr_stmt|;
name|this
operator|.
name|embeddableAccessor
operator|=
name|embeddableAccessor
expr_stmt|;
name|this
operator|.
name|embeddedAccessor
operator|=
name|embeddedAccessor
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|propertyPath
return|;
block|}
specifier|public
name|Object
name|getValue
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|PropertyException
block|{
return|return
name|embeddableAccessor
operator|.
name|getValue
argument_list|(
name|getEmbeddable
argument_list|(
name|object
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|setValue
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
name|newValue
parameter_list|)
throws|throws
name|PropertyException
block|{
name|embeddableAccessor
operator|.
name|setValue
argument_list|(
name|getEmbeddable
argument_list|(
name|object
argument_list|)
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns an embeddable object for the owner object, initializing embeddable if it is      * null. Currently supports only one level of embedding.      */
specifier|protected
name|Object
name|getEmbeddable
parameter_list|(
name|Object
name|owner
parameter_list|)
block|{
name|Object
name|embeddable
init|=
name|embeddedAccessor
operator|.
name|getValue
argument_list|(
name|owner
argument_list|)
decl_stmt|;
if|if
condition|(
name|embeddable
operator|==
literal|null
condition|)
block|{
name|embeddable
operator|=
name|embeddableDescriptor
operator|.
name|createObject
argument_list|(
name|owner
argument_list|,
name|embeddedAccessor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|embeddedAccessor
operator|.
name|setValue
argument_list|(
name|owner
argument_list|,
name|embeddable
argument_list|)
expr_stmt|;
block|}
return|return
name|embeddable
return|;
block|}
block|}
end_class

end_unit

