begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_comment
comment|/**  * FlatProjectView converts a project tree into a list of nodes,  * thus flattening the tree. Normally used as a singleton.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|FlatProjectView
block|{
specifier|protected
specifier|static
name|FlatProjectView
name|instance
init|=
operator|new
name|FlatProjectView
argument_list|()
decl_stmt|;
comment|/**       * Returns a FlatProjectView singleton.      */
specifier|public
specifier|static
name|FlatProjectView
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
comment|/**      * Returns flat tree view.      */
specifier|public
name|List
argument_list|<
name|ProjectPath
argument_list|>
name|flattenProjectTree
parameter_list|(
name|Object
name|rootNode
parameter_list|)
block|{
name|List
argument_list|<
name|ProjectPath
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<
name|ProjectPath
argument_list|>
argument_list|()
decl_stmt|;
name|TraversalHelper
name|helper
init|=
operator|new
name|TraversalHelper
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
operator|new
name|ProjectTraversal
argument_list|(
name|helper
argument_list|)
operator|.
name|traverse
argument_list|(
name|rootNode
argument_list|)
expr_stmt|;
return|return
name|nodes
return|;
block|}
comment|/**      * Helper class that serves as project traversal helper.      */
class|class
name|TraversalHelper
implements|implements
name|ProjectTraversalHandler
block|{
specifier|protected
name|List
argument_list|<
name|ProjectPath
argument_list|>
name|nodes
decl_stmt|;
specifier|public
name|TraversalHelper
parameter_list|(
name|List
argument_list|<
name|ProjectPath
argument_list|>
name|nodes
parameter_list|)
block|{
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
block|}
specifier|public
name|void
name|projectNode
parameter_list|(
name|ProjectPath
name|path
parameter_list|)
block|{
name|nodes
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**          * Returns true unless an object is a DataNode.          */
specifier|public
name|boolean
name|shouldReadChildren
parameter_list|(
name|Object
name|node
parameter_list|,
name|ProjectPath
name|parentPath
parameter_list|)
block|{
comment|// don't read linked maps
return|return
operator|!
operator|(
name|node
operator|instanceof
name|DataNode
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

