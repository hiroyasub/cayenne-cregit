begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|pool
operator|.
name|impl
operator|.
name|GenericObjectPool
import|;
end_import

begin_comment
comment|/**  * A helper class providing access to DBCP properties.  *   * @since 2.0  */
end_comment

begin_class
class|class
name|DBCPDataSourceProperties
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_PREFIX
init|=
literal|"cayenne.dbcp."
decl_stmt|;
specifier|private
name|Properties
name|properties
decl_stmt|;
comment|/**      * Loads properties from the specified location.      */
specifier|static
name|Properties
name|loadProperties
parameter_list|(
name|ResourceFinder
name|resourceLocator
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|URL
name|url
init|=
name|resourceLocator
operator|.
name|getResource
argument_list|(
name|location
argument_list|)
decl_stmt|;
comment|// try appending ".properties" extension..
if|if
condition|(
name|url
operator|==
literal|null
operator|&&
operator|!
name|location
operator|.
name|endsWith
argument_list|(
literal|".properties"
argument_list|)
condition|)
block|{
name|url
operator|=
name|resourceLocator
operator|.
name|getResource
argument_list|(
name|location
operator|+
literal|".properties"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"DBCP properties file not found: "
operator|+
name|location
argument_list|)
throw|;
block|}
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|in
init|=
name|url
operator|.
name|openStream
argument_list|()
decl_stmt|;
try|try
block|{
name|properties
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
return|return
name|properties
return|;
block|}
name|DBCPDataSourceProperties
parameter_list|(
name|ResourceFinder
name|resourceLocator
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|loadProperties
argument_list|(
name|resourceLocator
argument_list|,
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DBCPDataSourceProperties
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
name|Properties
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
name|String
name|getString
parameter_list|(
name|String
name|property
parameter_list|,
name|boolean
name|required
parameter_list|)
block|{
name|String
name|value
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|PROPERTY_PREFIX
operator|+
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|required
operator|&&
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"No value for required property: "
operator|+
name|PROPERTY_PREFIX
operator|+
name|property
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
name|String
name|getString
parameter_list|(
name|String
name|property
parameter_list|)
block|{
return|return
name|getString
argument_list|(
name|property
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|boolean
name|getBoolean
parameter_list|(
name|String
name|property
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|getString
argument_list|(
name|property
argument_list|)
decl_stmt|;
return|return
operator|(
name|value
operator|!=
literal|null
operator|)
condition|?
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|getString
argument_list|(
name|property
argument_list|)
argument_list|)
else|:
name|defaultValue
return|;
block|}
name|int
name|getInt
parameter_list|(
name|String
name|property
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|getString
argument_list|(
name|property
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|(
name|value
operator|!=
literal|null
operator|)
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
else|:
name|defaultValue
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfex
parameter_list|)
block|{
return|return
name|defaultValue
return|;
block|}
block|}
name|long
name|getLong
parameter_list|(
name|String
name|property
parameter_list|,
name|long
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|getString
argument_list|(
name|property
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|(
name|value
operator|!=
literal|null
operator|)
condition|?
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
else|:
name|defaultValue
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfex
parameter_list|)
block|{
return|return
name|defaultValue
return|;
block|}
block|}
name|byte
name|getByte
parameter_list|(
name|String
name|property
parameter_list|,
name|byte
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|getString
argument_list|(
name|property
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|(
name|value
operator|!=
literal|null
operator|)
condition|?
name|Byte
operator|.
name|parseByte
argument_list|(
name|value
argument_list|)
else|:
name|defaultValue
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfex
parameter_list|)
block|{
return|return
name|defaultValue
return|;
block|}
block|}
name|byte
name|getWhenExhaustedAction
parameter_list|(
name|String
name|property
parameter_list|,
name|byte
name|defaultValue
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|String
name|value
init|=
name|getString
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
comment|// try byte...
try|try
block|{
return|return
name|Byte
operator|.
name|parseByte
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfex
parameter_list|)
block|{
comment|// try symbolic
try|try
block|{
return|return
name|GenericObjectPool
operator|.
name|class
operator|.
name|getField
argument_list|(
name|value
argument_list|)
operator|.
name|getByte
argument_list|(
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Invalid 'whenExhaustedAction': "
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
block|}
name|int
name|getTransactionIsolation
parameter_list|(
name|String
name|property
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|getString
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
comment|// try int...
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfex
parameter_list|)
block|{
comment|// try symbolic
try|try
block|{
return|return
name|Connection
operator|.
name|class
operator|.
name|getField
argument_list|(
name|value
argument_list|)
operator|.
name|getInt
argument_list|(
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Invalid 'defaultTransactionIsolation': "
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

