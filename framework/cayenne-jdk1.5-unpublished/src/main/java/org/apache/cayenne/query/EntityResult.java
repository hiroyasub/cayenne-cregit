begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_comment
comment|/**  * A metadata object that provides mapping of a set of result columns to an ObjEntity.  * Used by {@link SQLResultSetMapping}.  *   * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|EntityResult
block|{
specifier|protected
name|String
name|entityName
decl_stmt|;
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|entityClass
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|FieldResult
argument_list|>
name|fields
decl_stmt|;
specifier|public
name|EntityResult
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|entityClass
parameter_list|)
block|{
name|this
operator|.
name|entityClass
operator|=
name|entityClass
expr_stmt|;
block|}
specifier|public
name|EntityResult
parameter_list|(
name|String
name|entityName
parameter_list|)
block|{
name|this
operator|.
name|entityName
operator|=
name|entityName
expr_stmt|;
block|}
specifier|public
name|ClassDescriptor
name|getClassDescriptor
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
return|return
name|resolver
operator|.
name|getClassDescriptor
argument_list|(
name|getEntity
argument_list|(
name|resolver
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns entity result fields normalized to represent DbAttributes.      */
specifier|public
name|FieldResult
index|[]
name|getDbFields
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
name|FieldResult
index|[]
name|fields
init|=
operator|(
name|this
operator|.
name|fields
operator|!=
literal|null
operator|)
condition|?
operator|new
name|FieldResult
index|[
name|this
operator|.
name|fields
operator|.
name|size
argument_list|()
index|]
else|:
operator|new
name|FieldResult
index|[
literal|0
index|]
decl_stmt|;
name|ObjEntity
name|entity
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FieldResult
name|field
init|=
name|this
operator|.
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|isDbAttribute
argument_list|()
condition|)
block|{
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
name|entity
operator|=
name|getEntity
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
name|ObjAttribute
name|attribute
init|=
operator|(
name|ObjAttribute
operator|)
name|entity
operator|.
name|getAttribute
argument_list|(
name|field
operator|.
name|getAttributeName
argument_list|()
argument_list|)
decl_stmt|;
comment|// TODO: andrus 2/8/2008 - flattened attributes support
name|field
operator|=
operator|new
name|FieldResult
argument_list|(
name|attribute
operator|.
name|getDbAttributeName
argument_list|()
argument_list|,
name|field
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|fields
index|[
name|i
index|]
operator|=
name|field
expr_stmt|;
block|}
return|return
name|fields
return|;
block|}
specifier|public
name|ObjEntity
name|getEntity
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
if|if
condition|(
name|entityName
operator|!=
literal|null
condition|)
block|{
return|return
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|entityName
argument_list|)
return|;
block|}
if|else if
condition|(
name|entityClass
operator|!=
literal|null
condition|)
block|{
return|return
name|resolver
operator|.
name|lookupObjEntity
argument_list|(
name|entityClass
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Both entity name and class are null"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|addObjectField
parameter_list|(
name|String
name|attributeName
parameter_list|,
name|String
name|column
parameter_list|)
block|{
name|addField
argument_list|(
operator|new
name|FieldResult
argument_list|(
name|attributeName
argument_list|,
name|column
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDbField
parameter_list|(
name|String
name|dbAttributeName
parameter_list|,
name|String
name|column
parameter_list|)
block|{
name|addField
argument_list|(
operator|new
name|FieldResult
argument_list|(
name|dbAttributeName
argument_list|,
name|column
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|addField
parameter_list|(
name|FieldResult
name|field
parameter_list|)
block|{
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getEntityName
parameter_list|()
block|{
return|return
name|entityName
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getEntityClass
parameter_list|()
block|{
return|return
name|entityClass
return|;
block|}
specifier|public
name|List
argument_list|<
name|FieldResult
argument_list|>
name|getFields
parameter_list|()
block|{
return|return
name|fields
operator|!=
literal|null
condition|?
name|fields
else|:
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
block|}
end_class

end_unit

