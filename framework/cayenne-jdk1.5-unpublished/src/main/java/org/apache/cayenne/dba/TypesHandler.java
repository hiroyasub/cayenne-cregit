begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_comment
comment|/**   * TypesHandler provides JDBC-RDBMS types mapping. Loads types info from   * an XML file.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|TypesHandler
block|{
specifier|private
specifier|static
name|Map
name|handlerMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|protected
name|Map
name|typesMap
decl_stmt|;
comment|/**      * @since 1.1      */
specifier|public
specifier|static
name|TypesHandler
name|getHandler
parameter_list|(
name|URL
name|typesConfig
parameter_list|)
block|{
synchronized|synchronized
init|(
name|handlerMap
init|)
block|{
name|TypesHandler
name|handler
init|=
operator|(
name|TypesHandler
operator|)
name|handlerMap
operator|.
name|get
argument_list|(
name|typesConfig
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
name|handler
operator|=
operator|new
name|TypesHandler
argument_list|(
name|typesConfig
argument_list|)
expr_stmt|;
name|handlerMap
operator|.
name|put
argument_list|(
name|typesConfig
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
return|return
name|handler
return|;
block|}
block|}
comment|/**      * Creates new TypesHandler loading configuration info from the XML      * file specified as<code>typesConfigPath</code> parameter.      *       * @since 1.1      */
specifier|public
name|TypesHandler
parameter_list|(
name|URL
name|typesConfig
parameter_list|)
block|{
try|try
block|{
name|InputStream
name|in
init|=
name|typesConfig
operator|.
name|openStream
argument_list|()
decl_stmt|;
try|try
block|{
name|XMLReader
name|parser
init|=
name|Util
operator|.
name|createXmlReader
argument_list|()
decl_stmt|;
name|TypesParseHandler
name|ph
init|=
operator|new
name|TypesParseHandler
argument_list|()
decl_stmt|;
name|parser
operator|.
name|setContentHandler
argument_list|(
name|ph
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setErrorHandler
argument_list|(
name|ph
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|typesMap
operator|=
name|ph
operator|.
name|getTypes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error creating TypesHandler '"
operator|+
name|typesConfig
operator|+
literal|"'."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error opening config file '"
operator|+
name|typesConfig
operator|+
literal|"'."
argument_list|,
name|ioex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
index|[]
name|externalTypesForJdbcType
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
operator|(
name|String
index|[]
operator|)
name|typesMap
operator|.
name|get
argument_list|(
operator|new
name|Integer
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
comment|/**       * Helper class to load types data from XML.      */
specifier|final
class|class
name|TypesParseHandler
extends|extends
name|DefaultHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|JDBC_TYPE_TAG
init|=
literal|"jdbc-type"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DB_TYPE_TAG
init|=
literal|"db-type"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAME_ATTR
init|=
literal|"name"
decl_stmt|;
specifier|private
name|Map
name|types
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|List
name|currentTypes
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|int
name|currentType
init|=
name|TypesMapping
operator|.
name|NOT_DEFINED
decl_stmt|;
specifier|public
name|Map
name|getTypes
parameter_list|()
block|{
return|return
name|types
return|;
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|JDBC_TYPE_TAG
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|currentTypes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|strType
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
name|NAME_ATTR
argument_list|)
decl_stmt|;
comment|// convert to Types int value
try|try
block|{
name|currentType
operator|=
name|Types
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
name|strType
argument_list|)
operator|.
name|getInt
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|currentType
operator|=
name|TypesMapping
operator|.
name|NOT_DEFINED
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|DB_TYPE_TAG
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|currentTypes
operator|.
name|add
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
name|NAME_ATTR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|JDBC_TYPE_TAG
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|&&
name|currentType
operator|!=
name|TypesMapping
operator|.
name|NOT_DEFINED
condition|)
block|{
name|String
index|[]
name|typesAsArray
init|=
operator|new
name|String
index|[
name|currentTypes
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|types
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
name|currentType
argument_list|)
argument_list|,
name|currentTypes
operator|.
name|toArray
argument_list|(
name|typesAsArray
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

