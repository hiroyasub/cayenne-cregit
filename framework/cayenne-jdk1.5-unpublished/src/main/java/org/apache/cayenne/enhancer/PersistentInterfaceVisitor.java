begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|enhancer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|ClassAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|ClassVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * Enhances classes passed through the visitor to add {@link Persistent} interface to  * them, and fields and methods to support its implementation.  *   * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|PersistentInterfaceVisitor
extends|extends
name|ClassAdapter
block|{
specifier|static
name|String
name|ENHANCED_INTERFACE_SIG
init|=
name|Type
operator|.
name|getInternalName
argument_list|(
name|Persistent
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|EnhancementHelper
name|helper
decl_stmt|;
specifier|public
name|PersistentInterfaceVisitor
parameter_list|(
name|ClassVisitor
name|visitor
parameter_list|)
block|{
name|super
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|this
operator|.
name|helper
operator|=
operator|new
name|EnhancementHelper
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Handles injection of additional fields and Persistent interface properties.      */
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|version
parameter_list|,
name|int
name|access
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|signature
parameter_list|,
name|String
name|superName
parameter_list|,
name|String
index|[]
name|interfaces
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interfaces
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|ENHANCED_INTERFACE_SIG
operator|.
name|equals
argument_list|(
name|interfaces
index|[
name|i
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DoubleEnhanceException
argument_list|(
name|name
operator|+
literal|" already implements "
operator|+
name|ENHANCED_INTERFACE_SIG
argument_list|)
throw|;
block|}
block|}
name|helper
operator|.
name|reset
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|interfaces
operator|=
name|helper
operator|.
name|addInterface
argument_list|(
name|interfaces
argument_list|,
name|Persistent
operator|.
name|class
argument_list|)
expr_stmt|;
name|super
operator|.
name|visit
argument_list|(
name|version
argument_list|,
name|access
argument_list|,
name|name
argument_list|,
name|signature
argument_list|,
name|superName
argument_list|,
name|interfaces
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitEnd
parameter_list|()
block|{
comment|// per ASM docs, 'visitEnd' is the only correct place to add class members
name|helper
operator|.
name|createProperty
argument_list|(
name|ObjectId
operator|.
name|class
argument_list|,
literal|"objectId"
argument_list|)
expr_stmt|;
name|helper
operator|.
name|createProperty
argument_list|(
name|ObjectContext
operator|.
name|class
argument_list|,
literal|"objectContext"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|helper
operator|.
name|createProperty
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|,
literal|"persistenceState"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

