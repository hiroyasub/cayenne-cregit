begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|DIBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Module
import|;
end_import

begin_comment
comment|/**  * A superclass of various Cayenne runtime stacks. A Runtime is the main access point to  * Cayenne for a user application. It provides a default Cayenne configuration as well as  * a way to customize this configuration via a built-in dependency injection container.  *   * @since 3.1  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Runtime
block|{
specifier|protected
name|Injector
name|injector
decl_stmt|;
specifier|protected
name|Module
index|[]
name|modules
decl_stmt|;
comment|/**      * Internal helper method to add special extra modules in subclass constructors.      */
specifier|protected
specifier|static
name|Module
index|[]
name|mergeModules
parameter_list|(
name|Module
name|mainModule
parameter_list|,
name|Module
modifier|...
name|extraModules
parameter_list|)
block|{
if|if
condition|(
name|extraModules
operator|==
literal|null
operator|||
name|extraModules
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|Module
index|[]
block|{
name|mainModule
block|}
return|;
block|}
name|Module
index|[]
name|allModules
init|=
operator|new
name|Module
index|[
name|extraModules
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|allModules
index|[
literal|0
index|]
operator|=
name|mainModule
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|extraModules
argument_list|,
literal|0
argument_list|,
name|allModules
argument_list|,
literal|1
argument_list|,
name|extraModules
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|allModules
return|;
block|}
comment|/**      * Internal helper method to add special extra modules in subclass constructors.      */
specifier|protected
specifier|static
name|Module
index|[]
name|mergeModules
parameter_list|(
name|Module
name|mainModule
parameter_list|,
name|Collection
argument_list|<
name|Module
argument_list|>
name|extraModules
parameter_list|)
block|{
if|if
condition|(
name|extraModules
operator|==
literal|null
operator|||
name|extraModules
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|Module
index|[]
block|{
name|mainModule
block|}
return|;
block|}
name|Module
index|[]
name|allModules
init|=
operator|new
name|Module
index|[
name|extraModules
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
decl_stmt|;
name|allModules
index|[
literal|0
index|]
operator|=
name|mainModule
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|extraModules
operator|.
name|toArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|allModules
argument_list|,
literal|1
argument_list|,
name|extraModules
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|allModules
return|;
block|}
comment|/**      * Creates a CayenneRuntime with configuration based on the supplied array of DI      * modules.      */
specifier|public
name|Runtime
parameter_list|(
name|Module
modifier|...
name|modules
parameter_list|)
block|{
if|if
condition|(
name|modules
operator|==
literal|null
condition|)
block|{
name|modules
operator|=
operator|new
name|Module
index|[
literal|0
index|]
expr_stmt|;
block|}
name|this
operator|.
name|modules
operator|=
name|modules
expr_stmt|;
name|this
operator|.
name|injector
operator|=
name|DIBootstrap
operator|.
name|createInjector
argument_list|(
name|modules
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a CayenneRuntime with configuration based on the supplied collection of DI      * modules.      */
specifier|public
name|Runtime
parameter_list|(
name|Collection
argument_list|<
name|Module
argument_list|>
name|modules
parameter_list|)
block|{
if|if
condition|(
name|modules
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|modules
operator|=
operator|new
name|Module
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|modules
operator|=
name|modules
operator|.
name|toArray
argument_list|(
operator|new
name|Module
index|[
name|modules
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|injector
operator|=
name|DIBootstrap
operator|.
name|createInjector
argument_list|(
name|this
operator|.
name|modules
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns an array of modules used to initialize this runtime.      */
specifier|public
name|Module
index|[]
name|getModules
parameter_list|()
block|{
return|return
name|modules
return|;
block|}
comment|/**      * Returns DI injector used by this runtime.      */
specifier|public
name|Injector
name|getInjector
parameter_list|()
block|{
return|return
name|injector
return|;
block|}
comment|/**      * Shuts down the DI injector of this runtime, giving all services that need to      * release some resources a chance to do that.      */
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|injector
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns the runtime {@link DataChannel}.      */
specifier|public
name|DataChannel
name|getChannel
parameter_list|()
block|{
return|return
name|injector
operator|.
name|getInstance
argument_list|(
name|DataChannel
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * Returns an ObjectContext based on the runtime DataChannel. Default configuration      * will return a new instance of the ObjectContext on every call, as the corresponding      * factory is bound using "no scope" scope. Custom modules may change this behavior.      */
specifier|public
name|ObjectContext
name|getContext
parameter_list|()
block|{
return|return
name|injector
operator|.
name|getInstance
argument_list|(
name|ObjectContextFactory
operator|.
name|class
argument_list|)
operator|.
name|createContext
argument_list|()
return|;
block|}
comment|/**      * Returns an ObjectContext based on the runtime DataChannel. Default configuration      * will return a new instance of the ObjectContext on every call, as the corresponding      * factory is bound using "no scope" scope. Custom modules may change this behavior.      */
specifier|public
name|ObjectContext
name|getContext
parameter_list|(
name|DataChannel
name|parentChannel
parameter_list|)
block|{
return|return
name|injector
operator|.
name|getInstance
argument_list|(
name|ObjectContextFactory
operator|.
name|class
argument_list|)
operator|.
name|createContext
argument_list|(
name|parentChannel
argument_list|)
return|;
block|}
block|}
end_class

end_unit

