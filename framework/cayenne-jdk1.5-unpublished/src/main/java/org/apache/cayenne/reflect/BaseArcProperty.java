begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_comment
comment|/**  * A base implementation of the {@link ArcProperty}.  *   * @since 3.0  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BaseArcProperty
extends|extends
name|BaseProperty
implements|implements
name|ArcProperty
block|{
specifier|protected
name|String
name|complimentaryReverseArcName
decl_stmt|;
specifier|protected
name|ClassDescriptor
name|targetDescriptor
decl_stmt|;
specifier|protected
name|ObjRelationship
name|relationship
decl_stmt|;
specifier|public
name|BaseArcProperty
parameter_list|(
name|ClassDescriptor
name|owner
parameter_list|,
name|ClassDescriptor
name|targetDescriptor
parameter_list|,
name|Accessor
name|accessor
parameter_list|,
name|String
name|reverseName
parameter_list|)
block|{
name|super
argument_list|(
name|owner
argument_list|,
name|accessor
argument_list|)
expr_stmt|;
name|this
operator|.
name|targetDescriptor
operator|=
name|targetDescriptor
expr_stmt|;
name|this
operator|.
name|complimentaryReverseArcName
operator|=
name|reverseName
expr_stmt|;
name|this
operator|.
name|relationship
operator|=
operator|(
name|ObjRelationship
operator|)
name|owner
operator|.
name|getEntity
argument_list|()
operator|.
name|getRelationship
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|abstract
name|boolean
name|visit
parameter_list|(
name|PropertyVisitor
name|visitor
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|isFault
parameter_list|(
name|Object
name|source
parameter_list|)
function_decl|;
specifier|public
name|ObjRelationship
name|getRelationship
parameter_list|()
block|{
return|return
name|relationship
return|;
block|}
specifier|public
name|ArcProperty
name|getComplimentaryReverseArc
parameter_list|()
block|{
return|return
operator|(
name|ArcProperty
operator|)
name|targetDescriptor
operator|.
name|getProperty
argument_list|(
name|complimentaryReverseArcName
argument_list|)
return|;
block|}
specifier|public
name|ClassDescriptor
name|getTargetDescriptor
parameter_list|()
block|{
return|return
name|targetDescriptor
return|;
block|}
comment|/**      * A convenience method to set the reverse arc used by subclasses.      */
specifier|protected
name|void
name|setReverse
parameter_list|(
specifier|final
name|Object
name|source
parameter_list|,
specifier|final
name|Object
name|oldTarget
parameter_list|,
specifier|final
name|Object
name|newTarget
parameter_list|)
block|{
name|ArcProperty
name|reverseArc
init|=
name|getComplimentaryReverseArc
argument_list|()
decl_stmt|;
if|if
condition|(
name|reverseArc
operator|!=
literal|null
condition|)
block|{
comment|// unset old
if|if
condition|(
name|oldTarget
operator|!=
literal|null
condition|)
block|{
name|PropertyVisitor
name|visitor
init|=
operator|new
name|PropertyVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|visitToMany
parameter_list|(
name|ToManyProperty
name|property
parameter_list|)
block|{
name|property
operator|.
name|removeTarget
argument_list|(
name|oldTarget
argument_list|,
name|source
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitToOne
parameter_list|(
name|ToOneProperty
name|property
parameter_list|)
block|{
name|property
operator|.
name|setTarget
argument_list|(
name|oldTarget
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitAttribute
parameter_list|(
name|AttributeProperty
name|property
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|reverseArc
operator|.
name|visit
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
comment|// set new reverse
if|if
condition|(
name|newTarget
operator|!=
literal|null
condition|)
block|{
name|PropertyVisitor
name|visitor
init|=
operator|new
name|PropertyVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|visitToMany
parameter_list|(
name|ToManyProperty
name|property
parameter_list|)
block|{
name|property
operator|.
name|addTarget
argument_list|(
name|newTarget
argument_list|,
name|source
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitToOne
parameter_list|(
name|ToOneProperty
name|property
parameter_list|)
block|{
name|property
operator|.
name|setTarget
argument_list|(
name|newTarget
argument_list|,
name|source
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitAttribute
parameter_list|(
name|AttributeProperty
name|property
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|reverseArc
operator|.
name|visit
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

