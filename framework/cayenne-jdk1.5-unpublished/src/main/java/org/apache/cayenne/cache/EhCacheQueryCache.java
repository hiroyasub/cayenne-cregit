begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Ehcache
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|BeforeScopeEnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|public
class|class
name|EhCacheQueryCache
implements|implements
name|QueryCache
block|{
comment|/**      * Default cache group name.      */
specifier|static
specifier|final
name|String
name|DEFAULT_CACHE_NAME
init|=
literal|"cayenne.default.cachegroup"
decl_stmt|;
specifier|private
specifier|static
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|EhCacheQueryCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|CacheManager
name|cacheManager
decl_stmt|;
specifier|public
name|EhCacheQueryCache
parameter_list|()
block|{
name|cacheManager
operator|=
operator|new
name|CacheManager
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|EhCacheQueryCache
parameter_list|(
name|String
name|configFile
parameter_list|)
block|{
name|cacheManager
operator|=
operator|new
name|CacheManager
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|EhCacheQueryCache
parameter_list|(
name|CacheManager
name|cacheManager
parameter_list|)
block|{
if|if
condition|(
name|cacheManager
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|cacheManager
operator|=
name|cacheManager
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"CacheManager cannot be null."
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
name|cacheManager
operator|.
name|addCacheIfAbsent
argument_list|(
name|DEFAULT_CACHE_NAME
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
name|get
parameter_list|(
name|QueryMetadata
name|metadata
parameter_list|)
block|{
name|String
name|key
init|=
name|metadata
operator|.
name|getCacheKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Element
name|result
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|groupNames
init|=
name|metadata
operator|.
name|getCacheGroups
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupNames
operator|!=
literal|null
operator|&&
name|groupNames
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Ehcache
name|cache
init|=
name|cacheManager
operator|.
name|getCache
argument_list|(
name|groupNames
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|List
operator|)
name|result
operator|.
name|getObjectValue
argument_list|()
return|;
block|}
block|}
if|if
condition|(
name|groupNames
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"multiple cache groups per key: "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|getDefaultCache
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|List
operator|)
name|getDefaultCache
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|getObjectValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|List
name|get
parameter_list|(
name|QueryMetadata
name|metadata
parameter_list|,
name|QueryCacheEntryFactory
name|factory
parameter_list|)
block|{
name|String
name|key
init|=
name|metadata
operator|.
name|getCacheKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Ehcache
name|cache
init|=
literal|null
decl_stmt|;
name|Element
name|result
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|groupNames
init|=
name|metadata
operator|.
name|getCacheGroups
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupNames
operator|!=
literal|null
operator|&&
name|groupNames
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|cache
operator|=
name|cacheManager
operator|.
name|getCache
argument_list|(
name|groupNames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupNames
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"multiple cache groups per key: "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|cache
operator|=
name|getDefaultCache
argument_list|()
expr_stmt|;
name|result
operator|=
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|List
operator|)
name|result
operator|.
name|getObjectValue
argument_list|()
return|;
block|}
comment|// if no result in cache locking the key to write
comment|// and putting it to the cache
name|cache
operator|.
name|acquireWriteLockOnKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
try|try
block|{
comment|// trying to read from cache again in case of
comment|// someone else put it to the cache before us
name|List
name|list
init|=
name|get
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
comment|// if not succeeded  in reading again putting
comment|// object to the cache ourselves
name|Object
name|noResult
init|=
name|factory
operator|.
name|createObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|noResult
operator|instanceof
name|List
operator|)
condition|)
block|{
if|if
condition|(
name|noResult
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Null object created: "
operator|+
name|metadata
operator|.
name|getCacheKey
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Invalid query result, expected List, got "
operator|+
name|noResult
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|list
operator|=
operator|(
name|List
operator|)
name|noResult
expr_stmt|;
name|put
argument_list|(
name|metadata
argument_list|,
name|list
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
else|else
block|{
return|return
name|list
return|;
block|}
block|}
finally|finally
block|{
name|cache
operator|.
name|releaseWriteLockOnKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|put
parameter_list|(
name|QueryMetadata
name|metadata
parameter_list|,
name|List
name|results
parameter_list|)
block|{
name|String
name|key
init|=
name|metadata
operator|.
name|getCacheKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|groupNames
init|=
name|metadata
operator|.
name|getCacheGroups
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupNames
operator|!=
literal|null
operator|&&
name|groupNames
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Ehcache
name|cache
init|=
name|cacheManager
operator|.
name|addCacheIfAbsent
argument_list|(
name|groupNames
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
operator|new
name|Element
argument_list|(
name|key
argument_list|,
name|results
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupNames
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"multiple groups per key: "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getDefaultCache
argument_list|()
operator|.
name|put
argument_list|(
operator|new
name|Element
argument_list|(
name|key
argument_list|,
name|results
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|cache
range|:
name|cacheManager
operator|.
name|getCacheNames
argument_list|()
control|)
block|{
name|cacheManager
operator|.
name|getCache
argument_list|(
name|cache
argument_list|)
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|removeGroup
parameter_list|(
name|String
name|groupKey
parameter_list|)
block|{
name|cacheManager
operator|.
name|removeCache
argument_list|(
name|groupKey
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|cacheManager
operator|.
name|removalAll
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|cache
range|:
name|cacheManager
operator|.
name|getCacheNames
argument_list|()
control|)
block|{
name|size
operator|+=
name|cacheManager
operator|.
name|getCache
argument_list|(
name|cache
argument_list|)
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
comment|/**      * Returns default cache group.      */
specifier|public
name|Ehcache
name|getDefaultCache
parameter_list|()
block|{
return|return
name|cacheManager
operator|.
name|getCache
argument_list|(
name|DEFAULT_CACHE_NAME
argument_list|)
return|;
block|}
comment|/**      * Shuts down EhCache CacheManager      */
annotation|@
name|BeforeScopeEnd
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|cacheManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

