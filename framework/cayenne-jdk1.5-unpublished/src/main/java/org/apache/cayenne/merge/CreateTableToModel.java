begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|merge
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneDataObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|NameConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * A {@link MergerToken} to add a {@link DbEntity} to a {@link DataMap}  *   * @author halset  */
end_comment

begin_class
specifier|public
class|class
name|CreateTableToModel
extends|extends
name|AbstractToModelToken
operator|.
name|Entity
block|{
specifier|private
name|String
name|objEntityClassName
init|=
name|CayenneDataObject
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
name|CreateTableToModel
parameter_list|(
name|DbEntity
name|entity
parameter_list|)
block|{
name|super
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the {@link ObjEntity} className if {@link ObjEntity} should be generated with a      * special class name. Set to null if the {@link ObjEntity} should be created with a      * name based on {@link DataMap#getDefaultPackage()} and {@link ObjEntity#getName()}      *<p>      * The default value is the class name of {@link CayenneDataObject}      */
specifier|public
name|void
name|setObjEntityClassName
parameter_list|(
name|String
name|n
parameter_list|)
block|{
name|objEntityClassName
operator|=
name|n
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|MergerContext
name|mergerContext
parameter_list|)
block|{
name|DataMap
name|map
init|=
name|mergerContext
operator|.
name|getDataMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|addDbEntity
argument_list|(
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a ObjEntity
name|String
name|objEntityName
init|=
name|NameConverter
operator|.
name|underscoredToJava
argument_list|(
name|getEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// this loop will terminate even if no valid name is found
comment|// to prevent loader from looping forever (though such case is very unlikely)
name|String
name|baseName
init|=
name|objEntityName
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|1000
operator|&&
name|map
operator|.
name|getObjEntity
argument_list|(
name|objEntityName
argument_list|)
operator|!=
literal|null
condition|;
name|i
operator|++
control|)
block|{
name|objEntityName
operator|=
name|baseName
operator|+
name|i
expr_stmt|;
block|}
name|ObjEntity
name|objEntity
init|=
operator|new
name|ObjEntity
argument_list|(
name|objEntityName
argument_list|)
decl_stmt|;
name|objEntity
operator|.
name|setDbEntity
argument_list|(
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
comment|// try to find a class name for the ObjEntity
name|String
name|className
init|=
name|objEntityClassName
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
comment|// we should generate a className based on the objEntityName
name|String
name|packageName
init|=
name|map
operator|.
name|getDefaultPackage
argument_list|()
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|isEmptyString
argument_list|(
name|packageName
argument_list|)
condition|)
block|{
name|packageName
operator|=
literal|""
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|packageName
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|packageName
operator|=
name|packageName
operator|+
literal|"."
expr_stmt|;
block|}
name|className
operator|=
name|packageName
operator|+
name|objEntityName
expr_stmt|;
block|}
name|objEntity
operator|.
name|setClassName
argument_list|(
name|className
argument_list|)
expr_stmt|;
name|map
operator|.
name|addObjEntity
argument_list|(
name|objEntity
argument_list|)
expr_stmt|;
name|synchronizeWithObjEntity
argument_list|(
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getTokenName
parameter_list|()
block|{
return|return
literal|"Create Table"
return|;
block|}
specifier|public
name|MergerToken
name|createReverse
parameter_list|(
name|MergerFactory
name|factory
parameter_list|)
block|{
return|return
name|factory
operator|.
name|createDropTableToDb
argument_list|(
name|getEntity
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

