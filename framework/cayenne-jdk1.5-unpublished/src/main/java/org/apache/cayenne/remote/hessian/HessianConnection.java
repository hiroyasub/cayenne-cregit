begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|hessian
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|event
operator|.
name|EventBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|BaseConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|ClientMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|RemoteService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|RemoteSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|caucho
operator|.
name|hessian
operator|.
name|client
operator|.
name|HessianRuntimeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|caucho
operator|.
name|hessian
operator|.
name|io
operator|.
name|HessianProtocolException
import|;
end_import

begin_comment
comment|/**  * An ClientConnection that passes messages to a remotely deployed HessianService. It  * supports HTTP BASIC authentication. HessianConnection serializes messages using Hessian  * binary web service protocol over HTTP. For more info on Hessian see Caucho site at<a  * href="http://www.caucho.com/resin-3.0/protocols/hessian.xtp">http://www.caucho.com/resin-3.0/protocols/hessian.xtp</a>.  * HessianConnection supports logging of message traffic via Jakarta commons-logging API.  *   * @since 1.2  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|HessianConnection
extends|extends
name|BaseConnection
block|{
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|CLIENT_SERIALIZER_FACTORIES
init|=
operator|new
name|String
index|[]
block|{
name|ClientSerializerFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|EnumSerializerProxy
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|protected
name|String
name|url
decl_stmt|;
specifier|protected
name|String
name|userName
decl_stmt|;
specifier|protected
name|String
name|password
decl_stmt|;
specifier|protected
name|String
name|sharedSessionName
decl_stmt|;
specifier|protected
name|RemoteSession
name|session
decl_stmt|;
specifier|protected
name|RemoteService
name|service
decl_stmt|;
comment|/**      * Creates HessianConnection that will establish dedicated session and will not use      * HTTP basic authentication.      */
specifier|public
name|HessianConnection
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|this
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a HessianConnection. This constructor can optionally setup basic      * authentication credentials and configure shared session.<code>url</code> is the      * only required parameter.      */
specifier|public
name|HessianConnection
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|sharedSessionName
parameter_list|)
block|{
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"URL of Cayenne service is null."
argument_list|)
throw|;
block|}
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
name|this
operator|.
name|sharedSessionName
operator|=
name|sharedSessionName
expr_stmt|;
block|}
comment|/**      * Returns a URL of Cayenne service used by this connector.      */
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
return|return
name|url
return|;
block|}
comment|/**      * Returns user name that is used for basic authentication when connecting to the      * cayenne server.      */
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
comment|/**      * Returns password that is used for basic authentication when connecting to the      * cayenne server.      */
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
specifier|public
name|String
name|getSharedSessionName
parameter_list|()
block|{
return|return
name|sharedSessionName
return|;
block|}
specifier|public
name|EventBridge
name|getServerEventBridge
parameter_list|()
throws|throws
name|CayenneRuntimeException
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|connect
argument_list|()
expr_stmt|;
block|}
return|return
name|session
operator|.
name|isServerEventsEnabled
argument_list|()
condition|?
name|session
operator|.
name|createServerEventBridge
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * Returns internal RemoteSession instance.      */
specifier|public
name|RemoteSession
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
comment|/**      * Establishes server session if needed.      */
annotation|@
name|Override
specifier|protected
name|void
name|beforeSendMessage
parameter_list|(
name|ClientMessage
name|message
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
comment|// for now only support session-based communications...
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|connect
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Sends a message to remote Cayenne Hessian service.      */
annotation|@
name|Override
specifier|protected
name|Object
name|doSendMessage
parameter_list|(
name|ClientMessage
name|message
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
try|try
block|{
return|return
name|service
operator|.
name|processMessage
argument_list|(
name|message
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|th
operator|=
name|unwindThrowable
argument_list|(
name|th
argument_list|)
expr_stmt|;
name|String
name|errorMessage
init|=
name|buildExceptionMessage
argument_list|(
literal|"Remote error"
argument_list|,
name|th
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
name|errorMessage
argument_list|,
name|th
argument_list|)
throw|;
block|}
block|}
comment|/**      * Establishes a session with remote service.      */
specifier|protected
specifier|synchronized
name|void
name|connect
parameter_list|()
throws|throws
name|CayenneRuntimeException
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|long
name|t0
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|t0
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|StringBuilder
name|log
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Connecting to ["
argument_list|)
decl_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|append
argument_list|(
name|userName
argument_list|)
expr_stmt|;
if|if
condition|(
name|password
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|append
argument_list|(
literal|":*******"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|append
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|log
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sharedSessionName
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|append
argument_list|(
literal|" - shared session '"
argument_list|)
operator|.
name|append
argument_list|(
name|sharedSessionName
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|append
argument_list|(
literal|" - dedicated session."
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
name|log
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// init service proxy...
name|HessianProxyFactory
name|factory
init|=
operator|new
name|HessianProxyFactory
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|factory
operator|.
name|setSerializerFactory
argument_list|(
name|HessianConfig
operator|.
name|createFactory
argument_list|(
name|CLIENT_SERIALIZER_FACTORIES
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setUser
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|service
operator|=
operator|(
name|RemoteService
operator|)
name|factory
operator|.
name|create
argument_list|(
name|RemoteService
operator|.
name|class
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|th
operator|=
name|unwindThrowable
argument_list|(
name|th
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|buildExceptionMessage
argument_list|(
literal|"URL error"
argument_list|,
name|th
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
name|message
argument_list|,
name|th
argument_list|)
throw|;
block|}
comment|// create server session...
try|try
block|{
name|session
operator|=
operator|(
name|sharedSessionName
operator|!=
literal|null
operator|)
condition|?
name|service
operator|.
name|establishSharedSession
argument_list|(
name|sharedSessionName
argument_list|)
else|:
name|service
operator|.
name|establishSession
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"=== Connected, session: "
operator|+
name|session
operator|+
literal|" - took "
operator|+
name|time
operator|+
literal|" ms."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|th
operator|=
name|unwindThrowable
argument_list|(
name|th
argument_list|)
expr_stmt|;
name|th
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|String
name|message
init|=
name|buildExceptionMessage
argument_list|(
literal|"Error establishing remote session"
argument_list|,
name|th
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
name|message
argument_list|,
name|th
argument_list|)
throw|;
block|}
comment|// TODO: send a connect event...
block|}
name|String
name|buildExceptionMessage
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|th
parameter_list|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|". URL - "
argument_list|)
operator|.
name|append
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|String
name|thMessage
init|=
name|th
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|isEmptyString
argument_list|(
name|thMessage
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"; CAUSE - "
argument_list|)
operator|.
name|append
argument_list|(
name|thMessage
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Utility method to get exception cause. Implements special handling of Hessian      * exceptions.      */
name|Throwable
name|unwindThrowable
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
if|if
condition|(
name|th
operator|instanceof
name|HessianProtocolException
condition|)
block|{
name|Throwable
name|cause
init|=
operator|(
operator|(
name|HessianProtocolException
operator|)
name|th
operator|)
operator|.
name|getRootCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
return|return
name|unwindThrowable
argument_list|(
name|cause
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|th
operator|instanceof
name|HessianRuntimeException
condition|)
block|{
name|Throwable
name|cause
init|=
operator|(
operator|(
name|HessianRuntimeException
operator|)
name|th
operator|)
operator|.
name|getRootCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
return|return
name|unwindThrowable
argument_list|(
name|cause
argument_list|)
return|;
block|}
block|}
return|return
name|Util
operator|.
name|unwindException
argument_list|(
name|th
argument_list|)
return|;
block|}
block|}
end_class

end_unit

