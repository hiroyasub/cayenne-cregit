begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|validator
operator|.
name|MappingNamesHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|NameConverter
import|;
end_import

begin_comment
comment|/**  * Methods for mangling strings.  *   * @author Mike Kienenberger  */
end_comment

begin_class
specifier|public
class|class
name|StringUtils
block|{
specifier|private
specifier|static
name|StringUtils
name|sharedInstance
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|StringUtils
name|getInstance
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|sharedInstance
condition|)
block|{
name|sharedInstance
operator|=
operator|new
name|StringUtils
argument_list|()
expr_stmt|;
block|}
return|return
name|sharedInstance
return|;
block|}
specifier|public
name|StringUtils
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Prepends underscore to variable name if necessary to remove conflict with reserved keywords.      */
specifier|public
name|String
name|formatVariableName
parameter_list|(
name|String
name|variableName
parameter_list|)
block|{
if|if
condition|(
name|MappingNamesHelper
operator|.
name|getInstance
argument_list|()
operator|.
name|isReservedJavaKeyword
argument_list|(
name|variableName
argument_list|)
condition|)
block|{
return|return
literal|"_"
operator|+
name|variableName
return|;
block|}
else|else
block|{
return|return
name|variableName
return|;
block|}
block|}
comment|/**      * Removes package name, leaving base name.      *       * @since 1.2      */
specifier|public
name|String
name|stripPackageName
parameter_list|(
name|String
name|aString
parameter_list|)
block|{
if|if
condition|(
name|aString
operator|==
literal|null
operator|||
name|aString
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
name|aString
return|;
name|int
name|lastDot
init|=
name|aString
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|-
literal|1
operator|==
name|lastDot
operator|)
operator|||
operator|(
operator|(
name|aString
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
operator|==
name|lastDot
operator|)
condition|)
return|return
name|aString
return|;
return|return
name|aString
operator|.
name|substring
argument_list|(
name|lastDot
operator|+
literal|1
argument_list|)
return|;
block|}
comment|/**     * Removes base name, leaving package name.     *      * @since 1.2     */
specifier|public
name|String
name|stripClass
parameter_list|(
name|String
name|aString
parameter_list|)
block|{
if|if
condition|(
name|aString
operator|==
literal|null
operator|||
name|aString
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
name|aString
return|;
name|int
name|lastDot
init|=
name|aString
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|==
name|lastDot
condition|)
return|return
literal|""
return|;
return|return
name|aString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastDot
argument_list|)
return|;
block|}
comment|/**      * Capitalizes the first letter of the property name.      *       * @since 1.1      */
specifier|public
name|String
name|capitalized
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
name|name
return|;
name|char
name|c
init|=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|)
condition|?
name|Character
operator|.
name|toString
argument_list|(
name|c
argument_list|)
else|:
name|c
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**      * Returns string with lowercased first letter      *       * @since 1.2      */
specifier|public
specifier|static
name|String
name|uncapitalized
parameter_list|(
name|String
name|aString
parameter_list|)
block|{
if|if
condition|(
name|aString
operator|==
literal|null
operator|||
name|aString
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
name|aString
return|;
name|char
name|c
init|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|aString
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|aString
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|)
condition|?
name|Character
operator|.
name|toString
argument_list|(
name|c
argument_list|)
else|:
name|c
operator|+
name|aString
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**      * Converts property name to Java constants naming convention.      *       * @since 1.1      */
specifier|public
name|String
name|capitalizedAsConstant
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
name|name
return|;
return|return
name|NameConverter
operator|.
name|javaToUnderscored
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

