begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A Configuration implementation that creates a single virtual runtime project out of  * multiple Cayenne configurations.  *   * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|MultiProjectConfiguration
extends|extends
name|Configuration
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MultiProjectConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|ResourceFinder
name|resourceFinder
decl_stmt|;
specifier|public
name|MultiProjectConfiguration
parameter_list|()
block|{
name|this
operator|.
name|resourceFinder
operator|=
operator|new
name|ClasspathResourceFinder
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|Exception
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"loading configuration"
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|this
operator|.
name|getDomainConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] : Domain configuration file \""
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getDomainConfigurationName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" is not found."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|ConfigLoaderDelegate
name|delegate
init|=
name|this
operator|.
name|getLoaderDelegate
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegate
operator|==
literal|null
condition|)
block|{
name|delegate
operator|=
operator|new
name|RuntimeLoadDelegate
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|getLoadStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ConfigLoader
name|loader
init|=
operator|new
name|ConfigLoader
argument_list|(
name|delegate
argument_list|)
decl_stmt|;
try|try
block|{
name|loader
operator|.
name|loadDomains
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|setLoadStatus
argument_list|(
name|delegate
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"initialize finished."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ResourceFinder
name|getResourceFinder
parameter_list|()
block|{
return|return
name|resourceFinder
return|;
block|}
block|}
end_class

end_unit

