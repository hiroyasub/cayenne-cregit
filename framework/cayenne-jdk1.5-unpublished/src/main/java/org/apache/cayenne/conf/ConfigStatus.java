begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Interface defines API to check the status of Cayenne configuration.  */
end_comment

begin_class
specifier|public
class|class
name|ConfigStatus
block|{
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|otherFailures
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|failedMaps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|failedAdapters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|failedDataSources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|failedMapRefs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|messages
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addFailedMap
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|location
parameter_list|,
name|Object
name|extraMessage
parameter_list|)
block|{
name|failedMaps
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|extraMessage
operator|!=
literal|null
condition|)
block|{
name|messages
operator|.
name|put
argument_list|(
name|getMapMessageKey
argument_list|(
name|name
argument_list|,
name|location
argument_list|)
argument_list|,
name|extraMessage
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addFailedAdapter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|location
parameter_list|,
name|String
name|extraMessage
parameter_list|)
block|{
name|failedAdapters
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|extraMessage
operator|!=
literal|null
condition|)
block|{
name|messages
operator|.
name|put
argument_list|(
name|getAdapterMessageKey
argument_list|(
name|name
argument_list|,
name|location
argument_list|)
argument_list|,
name|extraMessage
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addFailedDataSource
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|location
parameter_list|,
name|String
name|extraMessage
parameter_list|)
block|{
name|failedDataSources
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|extraMessage
operator|!=
literal|null
condition|)
block|{
name|messages
operator|.
name|put
argument_list|(
name|getDataSourceMessageKey
argument_list|(
name|name
argument_list|,
name|location
argument_list|)
argument_list|,
name|extraMessage
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addFailedMapRefs
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|extraMessage
parameter_list|)
block|{
name|failedMapRefs
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|extraMessage
operator|!=
literal|null
condition|)
block|{
name|messages
operator|.
name|put
argument_list|(
name|getMapRefMessageKey
argument_list|(
name|name
argument_list|)
argument_list|,
name|extraMessage
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|getMapMessageKey
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|location
parameter_list|)
block|{
return|return
literal|"map:"
operator|+
name|name
operator|+
literal|":"
operator|+
name|location
return|;
block|}
specifier|protected
name|String
name|getAdapterMessageKey
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|location
parameter_list|)
block|{
return|return
literal|"adapter:"
operator|+
name|name
operator|+
literal|":"
operator|+
name|location
return|;
block|}
specifier|protected
name|String
name|getDataSourceMessageKey
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|location
parameter_list|)
block|{
return|return
literal|"dataSource:"
operator|+
name|name
operator|+
literal|":"
operator|+
name|location
return|;
block|}
specifier|protected
name|String
name|getMapRefMessageKey
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|"map-ref:"
operator|+
name|name
return|;
block|}
comment|/**      * Returns a String description of failed configuration pieces. Returns a canned "no      * failures" message if no failures occurred.      */
specifier|public
name|String
name|describeFailures
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasFailures
argument_list|()
condition|)
block|{
return|return
literal|"[No failures]"
return|;
block|}
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|name
range|:
name|failedMaps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|location
init|=
name|failedMaps
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Object
name|message
init|=
name|messages
operator|.
name|get
argument_list|(
name|getMapMessageKey
argument_list|(
name|name
argument_list|,
name|location
argument_list|)
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\n\tdomain.map.name="
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|", domain.map.location="
argument_list|)
operator|.
name|append
argument_list|(
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", reason: "
argument_list|)
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|String
name|node
range|:
name|failedAdapters
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|adapter
init|=
name|failedAdapters
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|Object
name|message
init|=
name|messages
operator|.
name|get
argument_list|(
name|getAdapterMessageKey
argument_list|(
name|node
argument_list|,
name|adapter
argument_list|)
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\n\tdomain.node.name="
argument_list|)
operator|.
name|append
argument_list|(
name|node
argument_list|)
operator|.
name|append
argument_list|(
literal|", domain.node.adapter="
argument_list|)
operator|.
name|append
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", reason: "
argument_list|)
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|String
name|node
range|:
name|failedDataSources
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|location
init|=
name|failedDataSources
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|Object
name|message
init|=
name|messages
operator|.
name|get
argument_list|(
name|getDataSourceMessageKey
argument_list|(
name|node
argument_list|,
name|location
argument_list|)
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\n\tdomain.node.name="
argument_list|)
operator|.
name|append
argument_list|(
name|node
argument_list|)
operator|.
name|append
argument_list|(
literal|", domain.node.datasource="
argument_list|)
operator|.
name|append
argument_list|(
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", reason: "
argument_list|)
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|String
name|mapName
range|:
name|failedMapRefs
control|)
block|{
comment|// don't report failed links if the DataMap itself failed to load
if|if
condition|(
name|failedMaps
operator|.
name|get
argument_list|(
name|mapName
argument_list|)
operator|==
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\n\tdomain.node.map-ref.name="
argument_list|)
operator|.
name|append
argument_list|(
name|mapName
argument_list|)
expr_stmt|;
name|Object
name|message
init|=
name|messages
operator|.
name|get
argument_list|(
name|getMapRefMessageKey
argument_list|(
name|mapName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", reason: "
argument_list|)
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Returns a list of error messages not directly associated with project objects, such      * as XML parse exceptions, IOExceptions, etc.      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getOtherFailures
parameter_list|()
block|{
return|return
name|otherFailures
return|;
block|}
comment|/**      * Returns a list of map reference names that failed to load.      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFailedMapRefs
parameter_list|()
block|{
return|return
name|failedMapRefs
return|;
block|}
comment|/**      * Returns a map of locations for names of the data maps that failed to load.      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getFailedMaps
parameter_list|()
block|{
return|return
name|failedMaps
return|;
block|}
comment|/**      * Returns a map of DataSource locations for node names that failed to load.      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getFailedDataSources
parameter_list|()
block|{
return|return
name|failedDataSources
return|;
block|}
comment|/**      * Returns a map of adapter classes for node names that failed to load.      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getFailedAdapters
parameter_list|()
block|{
return|return
name|failedAdapters
return|;
block|}
comment|/**      * Returns true if any of the "failed.." methods return true.      */
specifier|public
name|boolean
name|hasFailures
parameter_list|()
block|{
return|return
name|failedMaps
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|failedDataSources
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|failedAdapters
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|failedMapRefs
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|otherFailures
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
end_class

end_unit

