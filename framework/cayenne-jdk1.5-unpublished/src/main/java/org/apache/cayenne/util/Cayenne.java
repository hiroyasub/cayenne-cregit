begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneDataObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistenceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ArcProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|AttributeProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ToManyProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ToOneProperty
import|;
end_import

begin_comment
comment|/**  * Various utils for processing persistent objects and their properties  * @since 3.1   */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Cayenne
block|{
comment|/**      * Returns mapped ObjEntity for object. If an object is transient or is not      * mapped returns null.      */
specifier|public
specifier|static
name|ObjEntity
name|getObjEntity
parameter_list|(
name|Persistent
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|.
name|getObjectContext
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|p
operator|.
name|getObjectContext
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|lookupObjEntity
argument_list|(
name|p
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * Returns class descriptor for the object,<code>null</code> if the object is      * transient or descriptor was not found      */
specifier|public
specifier|static
name|ClassDescriptor
name|getClassDescriptor
parameter_list|(
name|Persistent
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|.
name|getPersistenceState
argument_list|()
operator|==
name|PersistenceState
operator|.
name|TRANSIENT
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|object
operator|.
name|getObjectContext
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getClassDescriptor
argument_list|(
name|object
operator|.
name|getObjectId
argument_list|()
operator|.
name|getEntityName
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns property desctiptor for specified property      * @param properyName path to the property      * @return property descriptor,<code>null</code> if not found      */
specifier|public
specifier|static
name|Property
name|getProperty
parameter_list|(
name|Persistent
name|object
parameter_list|,
name|String
name|properyName
parameter_list|)
block|{
name|ClassDescriptor
name|descriptor
init|=
name|getClassDescriptor
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|descriptor
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|descriptor
operator|.
name|getProperty
argument_list|(
name|properyName
argument_list|)
return|;
block|}
comment|/**      * Returns a value of the property identified by a property path. Supports reading      * both mapped and unmapped properties. Unmapped properties are accessed in a manner      * consistent with JavaBeans specification.      *<p>      * Property path (or nested property) is a dot-separated path used to traverse object      * relationships until the final object is found. If a null object found while      * traversing path, null is returned. If a list is encountered in the middle of the      * path, CayenneRuntimeException is thrown. Unlike      * {@link #readPropertyDirectly(String)}, this method will resolve an object if it is      * HOLLOW.      *<p>      * Examples:      *</p>      *<ul>      *<li>Read this object property:<br>      *<code>String name = (String)CayenneUtils.readNestedProperty(artist, "name");</code><br>      *<br>      *</li>      *<li>Read an object related to this object:<br>      *<code>Gallery g = (Gallery)CayenneUtils.readNestedProperty(paintingInfo, "toPainting.toGallery");</code>      *<br>      *<br>      *</li>      *<li>Read a property of an object related to this object:<br>      *<code>String name = (String)CayenneUtils.readNestedProperty(painting, "toArtist.artistName");</code>      *<br>      *<br>      *</li>      *<li>Read to-many relationship list:<br>      *<code>List exhibits = (List)CayenneUtils.readNestedProperty(painting, "toGallery.exhibitArray");</code>      *<br>      *<br>      *</li>      *<li>Read to-many relationship in the middle of the path:<br>      *<code>List<String> names = (List<String>)CayenneUtils.readNestedProperty(artist, "paintingArray.paintingName");</code>      *<br>      *<br>      *</li>      *</ul>      */
specifier|public
specifier|static
name|Object
name|readNestedProperty
parameter_list|(
name|Persistent
name|p
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
name|readNestedProperty
argument_list|(
name|p
argument_list|,
name|path
argument_list|,
name|tokenizePath
argument_list|(
name|path
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * Recursively resolves nested property path      */
specifier|private
specifier|static
name|Object
name|readNestedProperty
parameter_list|(
name|Persistent
name|p
parameter_list|,
name|String
name|path
parameter_list|,
name|String
index|[]
name|tokenizedPath
parameter_list|,
name|int
name|tokenIndex
parameter_list|,
name|int
name|pathIndex
parameter_list|)
block|{
name|Object
name|property
init|=
name|readSimpleProperty
argument_list|(
name|p
argument_list|,
name|tokenizedPath
index|[
name|tokenIndex
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenIndex
operator|==
name|tokenizedPath
operator|.
name|length
operator|-
literal|1
condition|)
block|{
comment|// last component
return|return
name|property
return|;
block|}
name|pathIndex
operator|+=
name|tokenizedPath
index|[
name|tokenIndex
index|]
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|property
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|property
operator|instanceof
name|Persistent
condition|)
block|{
return|return
name|readNestedProperty
argument_list|(
operator|(
name|Persistent
operator|)
name|property
argument_list|,
name|path
argument_list|,
name|tokenizedPath
argument_list|,
name|tokenIndex
operator|+
literal|1
argument_list|,
name|tokenIndex
argument_list|)
return|;
block|}
if|else if
condition|(
name|property
operator|instanceof
name|Collection
condition|)
block|{
comment|/**              * Support for collection property in the middle of the path              */
name|Collection
argument_list|<
name|Object
argument_list|>
name|result
init|=
name|property
operator|instanceof
name|List
condition|?
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
else|:
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|property
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|CayenneDataObject
condition|)
block|{
name|Object
name|rest
init|=
name|readNestedProperty
argument_list|(
operator|(
name|CayenneDataObject
operator|)
name|obj
argument_list|,
name|path
argument_list|,
name|tokenizedPath
argument_list|,
name|tokenIndex
operator|+
literal|1
argument_list|,
name|tokenIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|rest
operator|instanceof
name|Collection
condition|)
block|{
comment|/**                          * We don't want nested collections. E.g.                          * readNestedProperty("paintingArray.paintingTitle") should return                          * List<String>                          */
name|result
operator|.
name|addAll
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|rest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|rest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
else|else
block|{
comment|// read the rest of the path via introspection
return|return
name|PropertyUtils
operator|.
name|getProperty
argument_list|(
name|property
argument_list|,
name|path
operator|.
name|substring
argument_list|(
name|pathIndex
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|tokenizePath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null property path."
argument_list|)
throw|;
block|}
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Empty property path."
argument_list|)
throw|;
block|}
comment|// take a shortcut for simple properties
if|if
condition|(
operator|!
name|path
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
name|path
block|}
return|;
block|}
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|path
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|tokens
operator|.
name|countTokens
argument_list|()
decl_stmt|;
name|String
index|[]
name|tokenized
init|=
operator|new
name|String
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|temp
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|temp
operator|.
name|endsWith
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
name|tokenized
index|[
name|i
index|]
operator|=
name|temp
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|temp
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tokenized
index|[
name|i
index|]
operator|=
name|temp
expr_stmt|;
block|}
block|}
return|return
name|tokenized
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Object
name|readSimpleProperty
parameter_list|(
name|Persistent
name|p
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|Property
name|property
init|=
name|getProperty
argument_list|(
name|p
argument_list|,
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
comment|// side effect - resolves HOLLOW object
return|return
name|property
operator|.
name|readProperty
argument_list|(
name|p
argument_list|)
return|;
block|}
comment|//handling non-persistent property
name|Object
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|DataObject
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|DataObject
operator|)
name|p
operator|)
operator|.
name|readPropertyDirectly
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
comment|//there is still a change to return a property via introspection
return|return
name|PropertyUtils
operator|.
name|getProperty
argument_list|(
name|p
argument_list|,
name|propertyName
argument_list|)
return|;
block|}
specifier|static
name|void
name|setReverse
parameter_list|(
specifier|final
name|Persistent
name|sourceObject
parameter_list|,
name|String
name|propertyName
parameter_list|,
specifier|final
name|Persistent
name|targetObject
parameter_list|)
block|{
name|ArcProperty
name|property
init|=
operator|(
name|ArcProperty
operator|)
name|getClassDescriptor
argument_list|(
name|sourceObject
argument_list|)
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
name|ArcProperty
name|reverseArc
init|=
name|property
operator|.
name|getComplimentaryReverseArc
argument_list|()
decl_stmt|;
if|if
condition|(
name|reverseArc
operator|!=
literal|null
condition|)
block|{
name|reverseArc
operator|.
name|visit
argument_list|(
operator|new
name|PropertyVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|visitToMany
parameter_list|(
name|ToManyProperty
name|property
parameter_list|)
block|{
name|property
operator|.
name|addTargetDirectly
argument_list|(
name|targetObject
argument_list|,
name|sourceObject
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitToOne
parameter_list|(
name|ToOneProperty
name|property
parameter_list|)
block|{
name|property
operator|.
name|setTarget
argument_list|(
name|targetObject
argument_list|,
name|sourceObject
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitAttribute
parameter_list|(
name|AttributeProperty
name|property
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sourceObject
operator|.
name|getObjectContext
argument_list|()
operator|.
name|getGraphManager
argument_list|()
operator|.
name|arcCreated
argument_list|(
name|targetObject
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|sourceObject
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|reverseArc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|markAsDirty
argument_list|(
name|targetObject
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|unsetReverse
parameter_list|(
specifier|final
name|Persistent
name|sourceObject
parameter_list|,
name|String
name|propertyName
parameter_list|,
specifier|final
name|Persistent
name|targetObject
parameter_list|)
block|{
name|ArcProperty
name|property
init|=
operator|(
name|ArcProperty
operator|)
name|getClassDescriptor
argument_list|(
name|sourceObject
argument_list|)
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
name|ArcProperty
name|reverseArc
init|=
name|property
operator|.
name|getComplimentaryReverseArc
argument_list|()
decl_stmt|;
if|if
condition|(
name|reverseArc
operator|!=
literal|null
condition|)
block|{
name|reverseArc
operator|.
name|visit
argument_list|(
operator|new
name|PropertyVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|visitToMany
parameter_list|(
name|ToManyProperty
name|property
parameter_list|)
block|{
name|property
operator|.
name|removeTargetDirectly
argument_list|(
name|targetObject
argument_list|,
name|sourceObject
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitToOne
parameter_list|(
name|ToOneProperty
name|property
parameter_list|)
block|{
name|property
operator|.
name|setTarget
argument_list|(
name|targetObject
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitAttribute
parameter_list|(
name|AttributeProperty
name|property
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sourceObject
operator|.
name|getObjectContext
argument_list|()
operator|.
name|getGraphManager
argument_list|()
operator|.
name|arcDeleted
argument_list|(
name|targetObject
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|sourceObject
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|reverseArc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|markAsDirty
argument_list|(
name|targetObject
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Changes object state to MODIFIED if needed, returning true if the change has      * occurred, false if not.      */
specifier|static
name|boolean
name|markAsDirty
parameter_list|(
name|Persistent
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|.
name|getPersistenceState
argument_list|()
operator|==
name|PersistenceState
operator|.
name|COMMITTED
condition|)
block|{
name|object
operator|.
name|setPersistenceState
argument_list|(
name|PersistenceState
operator|.
name|MODIFIED
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|Cayenne
parameter_list|()
block|{
block|}
block|}
end_class

end_unit

