begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Generated By:JJTree&JavaCC: Do not edit this line. ExpressionParser.java */
end_comment

begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|*
import|;
end_import

begin_comment
comment|/**   * Parser of Cayenne Expressions.    *   * @since 1.1   */
end_comment

begin_class
specifier|public
class|class
name|ExpressionParser
comment|/*@bgen(jjtree)*/
implements|implements
name|ExpressionParserTreeConstants
implements|,
name|ExpressionParserConstants
block|{
comment|/*@bgen(jjtree)*/
specifier|protected
name|JJTExpressionParserState
name|jjtree
init|=
operator|new
name|JJTExpressionParserState
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|arg
parameter_list|)
block|{
comment|// since Main is used for some basic speed measuring,
comment|// lets run it twice to "warm up" the parser
name|Expression
operator|.
name|fromString
argument_list|(
name|arg
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Expression
name|exp
init|=
name|Expression
operator|.
name|fromString
argument_list|(
name|arg
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Parsed in "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
operator|+
literal|" ms."
argument_list|)
expr_stmt|;
block|}
specifier|final
specifier|public
name|Expression
name|expression
parameter_list|()
throws|throws
name|ParseException
block|{
name|orCondition
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|(
name|Expression
operator|)
name|jjtree
operator|.
name|rootNode
argument_list|()
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|void
name|orCondition
parameter_list|()
throws|throws
name|ParseException
block|{
name|andCondition
argument_list|()
expr_stmt|;
name|label_1
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|1
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|0
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_1
break|;
block|}
name|jj_consume_token
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ASTOr
name|jjtn001
init|=
operator|new
name|ASTOr
argument_list|(
name|JJTOR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc001
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
try|try
block|{
name|andCondition
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte001
parameter_list|)
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
name|jjtc001
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte001
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte001
throw|;
block|}
block|}
if|if
condition|(
name|jjte001
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte001
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte001
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|final
specifier|public
name|void
name|andCondition
parameter_list|()
throws|throws
name|ParseException
block|{
name|notCondition
argument_list|()
expr_stmt|;
name|label_2
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|2
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|1
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_2
break|;
block|}
name|jj_consume_token
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ASTAnd
name|jjtn001
init|=
operator|new
name|ASTAnd
argument_list|(
name|JJTAND
argument_list|)
decl_stmt|;
name|boolean
name|jjtc001
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
try|try
block|{
name|notCondition
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte001
parameter_list|)
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
name|jjtc001
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte001
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte001
throw|;
block|}
block|}
if|if
condition|(
name|jjte001
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte001
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte001
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|final
specifier|public
name|void
name|notCondition
parameter_list|()
throws|throws
name|ParseException
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|3
case|:
case|case
literal|4
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|3
case|:
name|jj_consume_token
argument_list|(
literal|3
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|jj_consume_token
argument_list|(
literal|4
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|2
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|ASTNot
name|jjtn001
init|=
operator|new
name|ASTNot
argument_list|(
name|JJTNOT
argument_list|)
decl_stmt|;
name|boolean
name|jjtc001
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
try|try
block|{
name|simpleCondition
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte001
parameter_list|)
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
name|jjtc001
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte001
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte001
throw|;
block|}
block|}
if|if
condition|(
name|jjte001
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte001
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte001
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|16
case|:
case|case
literal|20
case|:
case|case
literal|21
case|:
case|case
literal|24
case|:
case|case
literal|25
case|:
case|case
literal|26
case|:
case|case
name|NULL
case|:
case|case
name|TRUE
case|:
case|case
name|FALSE
case|:
case|case
name|PROPERTY_PATH
case|:
case|case
name|SINGLE_QUOTED_STRING
case|:
case|case
name|DOUBLE_QUOTED_STRING
case|:
case|case
name|INT_LITERAL
case|:
case|case
name|FLOAT_LITERAL
case|:
name|simpleCondition
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|3
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
specifier|final
specifier|public
name|void
name|simpleCondition
parameter_list|()
throws|throws
name|ParseException
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|TRUE
case|:
name|ASTTrue
name|jjtn001
init|=
operator|new
name|ASTTrue
argument_list|(
name|JJTTRUE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc001
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|TRUE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|FALSE
case|:
name|ASTFalse
name|jjtn002
init|=
operator|new
name|ASTFalse
argument_list|(
name|JJTFALSE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc002
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn002
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|FALSE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc002
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn002
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|16
case|:
case|case
literal|20
case|:
case|case
literal|21
case|:
case|case
literal|24
case|:
case|case
literal|25
case|:
case|case
literal|26
case|:
case|case
name|NULL
case|:
case|case
name|PROPERTY_PATH
case|:
case|case
name|SINGLE_QUOTED_STRING
case|:
case|case
name|DOUBLE_QUOTED_STRING
case|:
case|case
name|INT_LITERAL
case|:
case|case
name|FLOAT_LITERAL
case|:
name|scalarConditionExpression
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|3
case|:
case|case
literal|4
case|:
case|case
literal|5
case|:
case|case
literal|6
case|:
case|case
literal|7
case|:
case|case
literal|8
case|:
case|case
literal|9
case|:
case|case
literal|10
case|:
case|case
literal|11
case|:
case|case
literal|12
case|:
case|case
literal|13
case|:
case|case
literal|14
case|:
case|case
literal|15
case|:
case|case
literal|18
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|3
case|:
case|case
literal|4
case|:
name|simpleNotCondition
argument_list|()
expr_stmt|;
break|break;
case|case
literal|5
case|:
case|case
literal|6
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|5
case|:
name|jj_consume_token
argument_list|(
literal|5
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|jj_consume_token
argument_list|(
literal|6
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|4
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|ASTEqual
name|jjtn003
init|=
operator|new
name|ASTEqual
argument_list|(
name|JJTEQUAL
argument_list|)
decl_stmt|;
name|boolean
name|jjtc003
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn003
argument_list|)
expr_stmt|;
try|try
block|{
name|scalarExpression
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte003
parameter_list|)
block|{
if|if
condition|(
name|jjtc003
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn003
argument_list|)
expr_stmt|;
name|jjtc003
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte003
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte003
throw|;
block|}
block|}
if|if
condition|(
name|jjte003
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte003
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte003
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc003
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn003
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|7
case|:
case|case
literal|8
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|7
case|:
name|jj_consume_token
argument_list|(
literal|7
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|jj_consume_token
argument_list|(
literal|8
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|5
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|ASTNotEqual
name|jjtn004
init|=
operator|new
name|ASTNotEqual
argument_list|(
name|JJTNOTEQUAL
argument_list|)
decl_stmt|;
name|boolean
name|jjtc004
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn004
argument_list|)
expr_stmt|;
try|try
block|{
name|scalarExpression
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte004
parameter_list|)
block|{
if|if
condition|(
name|jjtc004
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn004
argument_list|)
expr_stmt|;
name|jjtc004
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte004
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte004
throw|;
block|}
block|}
if|if
condition|(
name|jjte004
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte004
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte004
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc004
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn004
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|9
case|:
name|jj_consume_token
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|ASTLessOrEqual
name|jjtn005
init|=
operator|new
name|ASTLessOrEqual
argument_list|(
name|JJTLESSOREQUAL
argument_list|)
decl_stmt|;
name|boolean
name|jjtc005
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn005
argument_list|)
expr_stmt|;
try|try
block|{
name|scalarExpression
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte005
parameter_list|)
block|{
if|if
condition|(
name|jjtc005
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn005
argument_list|)
expr_stmt|;
name|jjtc005
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte005
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte005
throw|;
block|}
block|}
if|if
condition|(
name|jjte005
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte005
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte005
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc005
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn005
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|10
case|:
name|jj_consume_token
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|ASTLess
name|jjtn006
init|=
operator|new
name|ASTLess
argument_list|(
name|JJTLESS
argument_list|)
decl_stmt|;
name|boolean
name|jjtc006
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn006
argument_list|)
expr_stmt|;
try|try
block|{
name|scalarExpression
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte006
parameter_list|)
block|{
if|if
condition|(
name|jjtc006
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn006
argument_list|)
expr_stmt|;
name|jjtc006
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte006
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte006
throw|;
block|}
block|}
if|if
condition|(
name|jjte006
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte006
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte006
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc006
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn006
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|11
case|:
name|jj_consume_token
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|ASTGreater
name|jjtn007
init|=
operator|new
name|ASTGreater
argument_list|(
name|JJTGREATER
argument_list|)
decl_stmt|;
name|boolean
name|jjtc007
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn007
argument_list|)
expr_stmt|;
try|try
block|{
name|scalarExpression
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte007
parameter_list|)
block|{
if|if
condition|(
name|jjtc007
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn007
argument_list|)
expr_stmt|;
name|jjtc007
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte007
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte007
throw|;
block|}
block|}
if|if
condition|(
name|jjte007
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte007
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte007
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc007
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn007
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|12
case|:
name|jj_consume_token
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|ASTGreaterOrEqual
name|jjtn008
init|=
operator|new
name|ASTGreaterOrEqual
argument_list|(
name|JJTGREATEROREQUAL
argument_list|)
decl_stmt|;
name|boolean
name|jjtc008
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn008
argument_list|)
expr_stmt|;
try|try
block|{
name|scalarExpression
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte008
parameter_list|)
block|{
if|if
condition|(
name|jjtc008
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn008
argument_list|)
expr_stmt|;
name|jjtc008
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte008
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte008
throw|;
block|}
block|}
if|if
condition|(
name|jjte008
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte008
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte008
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc008
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn008
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|13
case|:
name|jj_consume_token
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|ASTLike
name|jjtn009
init|=
operator|new
name|ASTLike
argument_list|(
name|JJTLIKE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc009
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn009
argument_list|)
expr_stmt|;
try|try
block|{
name|scalarExpression
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte009
parameter_list|)
block|{
if|if
condition|(
name|jjtc009
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn009
argument_list|)
expr_stmt|;
name|jjtc009
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte009
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte009
throw|;
block|}
block|}
if|if
condition|(
name|jjte009
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte009
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte009
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc009
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn009
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|14
case|:
name|jj_consume_token
argument_list|(
literal|14
argument_list|)
expr_stmt|;
name|ASTLikeIgnoreCase
name|jjtn010
init|=
operator|new
name|ASTLikeIgnoreCase
argument_list|(
name|JJTLIKEIGNORECASE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc010
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn010
argument_list|)
expr_stmt|;
try|try
block|{
name|scalarExpression
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte010
parameter_list|)
block|{
if|if
condition|(
name|jjtc010
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn010
argument_list|)
expr_stmt|;
name|jjtc010
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte010
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte010
throw|;
block|}
block|}
if|if
condition|(
name|jjte010
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte010
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte010
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc010
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn010
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|15
case|:
name|jj_consume_token
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|ASTIn
name|jjtn011
init|=
operator|new
name|ASTIn
argument_list|(
name|JJTIN
argument_list|)
decl_stmt|;
name|boolean
name|jjtc011
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn011
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|24
case|:
name|namedParameter
argument_list|()
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|jj_consume_token
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|scalarCommaList
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|17
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|6
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte011
parameter_list|)
block|{
if|if
condition|(
name|jjtc011
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn011
argument_list|)
expr_stmt|;
name|jjtc011
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte011
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte011
throw|;
block|}
block|}
if|if
condition|(
name|jjte011
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte011
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte011
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc011
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn011
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|18
case|:
name|jj_consume_token
argument_list|(
literal|18
argument_list|)
expr_stmt|;
name|scalarExpression
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ASTBetween
name|jjtn012
init|=
operator|new
name|ASTBetween
argument_list|(
name|JJTBETWEEN
argument_list|)
decl_stmt|;
name|boolean
name|jjtc012
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn012
argument_list|)
expr_stmt|;
try|try
block|{
name|scalarExpression
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte012
parameter_list|)
block|{
if|if
condition|(
name|jjtc012
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn012
argument_list|)
expr_stmt|;
name|jjtc012
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte012
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte012
throw|;
block|}
block|}
if|if
condition|(
name|jjte012
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte012
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte012
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc012
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn012
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|7
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|8
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|9
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
specifier|final
specifier|public
name|void
name|simpleNotCondition
parameter_list|()
throws|throws
name|ParseException
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|3
case|:
name|jj_consume_token
argument_list|(
literal|3
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|jj_consume_token
argument_list|(
literal|4
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|10
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|13
case|:
name|jj_consume_token
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|ASTNotLike
name|jjtn001
init|=
operator|new
name|ASTNotLike
argument_list|(
name|JJTNOTLIKE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc001
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
try|try
block|{
name|scalarExpression
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte001
parameter_list|)
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
name|jjtc001
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte001
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte001
throw|;
block|}
block|}
if|if
condition|(
name|jjte001
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte001
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte001
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|14
case|:
name|jj_consume_token
argument_list|(
literal|14
argument_list|)
expr_stmt|;
name|ASTNotLikeIgnoreCase
name|jjtn002
init|=
operator|new
name|ASTNotLikeIgnoreCase
argument_list|(
name|JJTNOTLIKEIGNORECASE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc002
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn002
argument_list|)
expr_stmt|;
try|try
block|{
name|scalarExpression
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte002
parameter_list|)
block|{
if|if
condition|(
name|jjtc002
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn002
argument_list|)
expr_stmt|;
name|jjtc002
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte002
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte002
throw|;
block|}
block|}
if|if
condition|(
name|jjte002
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte002
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte002
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc002
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn002
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|15
case|:
name|jj_consume_token
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|ASTNotIn
name|jjtn003
init|=
operator|new
name|ASTNotIn
argument_list|(
name|JJTNOTIN
argument_list|)
decl_stmt|;
name|boolean
name|jjtc003
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn003
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|24
case|:
name|namedParameter
argument_list|()
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|jj_consume_token
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|scalarCommaList
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|17
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|11
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte003
parameter_list|)
block|{
if|if
condition|(
name|jjtc003
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn003
argument_list|)
expr_stmt|;
name|jjtc003
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte003
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte003
throw|;
block|}
block|}
if|if
condition|(
name|jjte003
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte003
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte003
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc003
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn003
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|18
case|:
name|jj_consume_token
argument_list|(
literal|18
argument_list|)
expr_stmt|;
name|scalarExpression
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ASTNotBetween
name|jjtn004
init|=
operator|new
name|ASTNotBetween
argument_list|(
name|JJTNOTBETWEEN
argument_list|)
decl_stmt|;
name|boolean
name|jjtc004
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn004
argument_list|)
expr_stmt|;
try|try
block|{
name|scalarExpression
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte004
parameter_list|)
block|{
if|if
condition|(
name|jjtc004
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn004
argument_list|)
expr_stmt|;
name|jjtc004
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte004
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte004
throw|;
block|}
block|}
if|if
condition|(
name|jjte004
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte004
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte004
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc004
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn004
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|12
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
specifier|final
specifier|public
name|void
name|scalarCommaList
parameter_list|()
throws|throws
name|ParseException
block|{
name|ASTList
name|jjtn001
init|=
operator|new
name|ASTList
argument_list|(
name|JJTLIST
argument_list|)
decl_stmt|;
name|boolean
name|jjtc001
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
try|try
block|{
name|scalarConstExpression
argument_list|()
expr_stmt|;
name|label_3
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|19
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|13
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_3
break|;
block|}
name|jj_consume_token
argument_list|(
literal|19
argument_list|)
expr_stmt|;
name|scalarConstExpression
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte001
parameter_list|)
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
name|jjtc001
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte001
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte001
throw|;
block|}
block|}
if|if
condition|(
name|jjte001
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte001
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte001
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
specifier|public
name|void
name|scalarConditionExpression
parameter_list|()
throws|throws
name|ParseException
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|16
case|:
case|case
literal|20
case|:
case|case
literal|21
case|:
case|case
literal|24
case|:
case|case
literal|25
case|:
case|case
literal|26
case|:
case|case
name|PROPERTY_PATH
case|:
case|case
name|INT_LITERAL
case|:
case|case
name|FLOAT_LITERAL
case|:
name|scalarNumericExpression
argument_list|()
expr_stmt|;
break|break;
case|case
name|SINGLE_QUOTED_STRING
case|:
name|jj_consume_token
argument_list|(
name|SINGLE_QUOTED_STRING
argument_list|)
expr_stmt|;
name|ASTScalar
name|jjtn001
init|=
operator|new
name|ASTScalar
argument_list|(
name|JJTSCALAR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc001
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc001
operator|=
literal|false
expr_stmt|;
name|jjtn001
operator|.
name|setValue
argument_list|(
name|token_source
operator|.
name|literalValue
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DOUBLE_QUOTED_STRING
case|:
name|jj_consume_token
argument_list|(
name|DOUBLE_QUOTED_STRING
argument_list|)
expr_stmt|;
name|ASTScalar
name|jjtn002
init|=
operator|new
name|ASTScalar
argument_list|(
name|JJTSCALAR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc002
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn002
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn002
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc002
operator|=
literal|false
expr_stmt|;
name|jjtn002
operator|.
name|setValue
argument_list|(
name|token_source
operator|.
name|literalValue
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc002
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn002
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|NULL
case|:
name|ASTScalar
name|jjtn003
init|=
operator|new
name|ASTScalar
argument_list|(
name|JJTSCALAR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc003
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn003
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc003
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn003
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|14
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
specifier|final
specifier|public
name|void
name|scalarExpression
parameter_list|()
throws|throws
name|ParseException
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|16
case|:
case|case
literal|20
case|:
case|case
literal|21
case|:
case|case
literal|24
case|:
case|case
literal|25
case|:
case|case
literal|26
case|:
case|case
name|NULL
case|:
case|case
name|PROPERTY_PATH
case|:
case|case
name|SINGLE_QUOTED_STRING
case|:
case|case
name|DOUBLE_QUOTED_STRING
case|:
case|case
name|INT_LITERAL
case|:
case|case
name|FLOAT_LITERAL
case|:
name|scalarConditionExpression
argument_list|()
expr_stmt|;
break|break;
case|case
name|TRUE
case|:
name|jj_consume_token
argument_list|(
name|TRUE
argument_list|)
expr_stmt|;
name|ASTScalar
name|jjtn001
init|=
operator|new
name|ASTScalar
argument_list|(
name|JJTSCALAR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc001
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc001
operator|=
literal|false
expr_stmt|;
name|jjtn001
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|FALSE
case|:
name|jj_consume_token
argument_list|(
name|FALSE
argument_list|)
expr_stmt|;
name|ASTScalar
name|jjtn002
init|=
operator|new
name|ASTScalar
argument_list|(
name|JJTSCALAR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc002
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn002
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn002
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc002
operator|=
literal|false
expr_stmt|;
name|jjtn002
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc002
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn002
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|15
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
specifier|final
specifier|public
name|void
name|scalarConstExpression
parameter_list|()
throws|throws
name|ParseException
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|SINGLE_QUOTED_STRING
case|:
name|jj_consume_token
argument_list|(
name|SINGLE_QUOTED_STRING
argument_list|)
expr_stmt|;
name|ASTScalar
name|jjtn001
init|=
operator|new
name|ASTScalar
argument_list|(
name|JJTSCALAR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc001
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc001
operator|=
literal|false
expr_stmt|;
name|jjtn001
operator|.
name|setValue
argument_list|(
name|token_source
operator|.
name|literalValue
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DOUBLE_QUOTED_STRING
case|:
name|jj_consume_token
argument_list|(
name|DOUBLE_QUOTED_STRING
argument_list|)
expr_stmt|;
name|ASTScalar
name|jjtn002
init|=
operator|new
name|ASTScalar
argument_list|(
name|JJTSCALAR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc002
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn002
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn002
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc002
operator|=
literal|false
expr_stmt|;
name|jjtn002
operator|.
name|setValue
argument_list|(
name|token_source
operator|.
name|literalValue
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc002
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn002
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|24
case|:
name|namedParameter
argument_list|()
expr_stmt|;
break|break;
case|case
name|INT_LITERAL
case|:
name|jj_consume_token
argument_list|(
name|INT_LITERAL
argument_list|)
expr_stmt|;
name|ASTScalar
name|jjtn003
init|=
operator|new
name|ASTScalar
argument_list|(
name|JJTSCALAR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc003
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn003
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn003
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc003
operator|=
literal|false
expr_stmt|;
name|jjtn003
operator|.
name|setValue
argument_list|(
name|token_source
operator|.
name|literalValue
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc003
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn003
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|FLOAT_LITERAL
case|:
name|jj_consume_token
argument_list|(
name|FLOAT_LITERAL
argument_list|)
expr_stmt|;
name|ASTScalar
name|jjtn004
init|=
operator|new
name|ASTScalar
argument_list|(
name|JJTSCALAR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc004
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn004
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn004
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc004
operator|=
literal|false
expr_stmt|;
name|jjtn004
operator|.
name|setValue
argument_list|(
name|token_source
operator|.
name|literalValue
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc004
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn004
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|TRUE
case|:
name|jj_consume_token
argument_list|(
name|TRUE
argument_list|)
expr_stmt|;
name|ASTScalar
name|jjtn005
init|=
operator|new
name|ASTScalar
argument_list|(
name|JJTSCALAR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc005
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn005
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn005
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc005
operator|=
literal|false
expr_stmt|;
name|jjtn005
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc005
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn005
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|FALSE
case|:
name|jj_consume_token
argument_list|(
name|FALSE
argument_list|)
expr_stmt|;
name|ASTScalar
name|jjtn006
init|=
operator|new
name|ASTScalar
argument_list|(
name|JJTSCALAR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc006
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn006
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn006
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc006
operator|=
literal|false
expr_stmt|;
name|jjtn006
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc006
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn006
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|16
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
specifier|final
specifier|public
name|void
name|scalarNumericExpression
parameter_list|()
throws|throws
name|ParseException
block|{
name|multiplySubtractExp
argument_list|()
expr_stmt|;
name|label_4
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|20
case|:
case|case
literal|21
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|17
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_4
break|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|20
case|:
name|jj_consume_token
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|ASTAdd
name|jjtn001
init|=
operator|new
name|ASTAdd
argument_list|(
name|JJTADD
argument_list|)
decl_stmt|;
name|boolean
name|jjtc001
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
try|try
block|{
name|multiplySubtractExp
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte001
parameter_list|)
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
name|jjtc001
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte001
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte001
throw|;
block|}
block|}
if|if
condition|(
name|jjte001
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte001
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte001
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|21
case|:
name|jj_consume_token
argument_list|(
literal|21
argument_list|)
expr_stmt|;
name|ASTSubtract
name|jjtn002
init|=
operator|new
name|ASTSubtract
argument_list|(
name|JJTSUBTRACT
argument_list|)
decl_stmt|;
name|boolean
name|jjtc002
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn002
argument_list|)
expr_stmt|;
try|try
block|{
name|multiplySubtractExp
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte002
parameter_list|)
block|{
if|if
condition|(
name|jjtc002
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn002
argument_list|)
expr_stmt|;
name|jjtc002
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte002
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte002
throw|;
block|}
block|}
if|if
condition|(
name|jjte002
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte002
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte002
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc002
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn002
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|18
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|}
specifier|final
specifier|public
name|void
name|multiplySubtractExp
parameter_list|()
throws|throws
name|ParseException
block|{
name|numericTerm
argument_list|()
expr_stmt|;
name|label_5
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|22
case|:
case|case
literal|23
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|19
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_5
break|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|22
case|:
name|jj_consume_token
argument_list|(
literal|22
argument_list|)
expr_stmt|;
name|ASTMultiply
name|jjtn001
init|=
operator|new
name|ASTMultiply
argument_list|(
name|JJTMULTIPLY
argument_list|)
decl_stmt|;
name|boolean
name|jjtc001
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
try|try
block|{
name|numericTerm
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte001
parameter_list|)
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
name|jjtc001
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte001
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte001
throw|;
block|}
block|}
if|if
condition|(
name|jjte001
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte001
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte001
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|23
case|:
name|jj_consume_token
argument_list|(
literal|23
argument_list|)
expr_stmt|;
name|ASTDivide
name|jjtn002
init|=
operator|new
name|ASTDivide
argument_list|(
name|JJTDIVIDE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc002
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn002
argument_list|)
expr_stmt|;
try|try
block|{
name|numericTerm
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte002
parameter_list|)
block|{
if|if
condition|(
name|jjtc002
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn002
argument_list|)
expr_stmt|;
name|jjtc002
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte002
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte002
throw|;
block|}
block|}
if|if
condition|(
name|jjte002
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte002
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte002
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc002
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn002
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|20
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|}
specifier|final
specifier|public
name|void
name|numericTerm
parameter_list|()
throws|throws
name|ParseException
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|16
case|:
case|case
literal|20
case|:
case|case
literal|24
case|:
case|case
literal|25
case|:
case|case
literal|26
case|:
case|case
name|PROPERTY_PATH
case|:
case|case
name|INT_LITERAL
case|:
case|case
name|FLOAT_LITERAL
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|20
case|:
name|jj_consume_token
argument_list|(
literal|20
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|21
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|numericPrimary
argument_list|()
expr_stmt|;
break|break;
case|case
literal|21
case|:
name|jj_consume_token
argument_list|(
literal|21
argument_list|)
expr_stmt|;
name|ASTNegate
name|jjtn001
init|=
operator|new
name|ASTNegate
argument_list|(
name|JJTNEGATE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc001
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
try|try
block|{
name|numericPrimary
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte001
parameter_list|)
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
name|jjtc001
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte001
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte001
throw|;
block|}
block|}
if|if
condition|(
name|jjte001
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte001
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte001
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|22
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
specifier|final
specifier|public
name|void
name|numericPrimary
parameter_list|()
throws|throws
name|ParseException
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|16
case|:
name|jj_consume_token
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|orCondition
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|17
argument_list|)
expr_stmt|;
break|break;
case|case
literal|25
case|:
case|case
literal|26
case|:
case|case
name|PROPERTY_PATH
case|:
name|pathExpression
argument_list|()
expr_stmt|;
break|break;
case|case
literal|24
case|:
name|namedParameter
argument_list|()
expr_stmt|;
break|break;
case|case
name|INT_LITERAL
case|:
name|jj_consume_token
argument_list|(
name|INT_LITERAL
argument_list|)
expr_stmt|;
name|ASTScalar
name|jjtn001
init|=
operator|new
name|ASTScalar
argument_list|(
name|JJTSCALAR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc001
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc001
operator|=
literal|false
expr_stmt|;
name|jjtn001
operator|.
name|setValue
argument_list|(
name|token_source
operator|.
name|literalValue
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|FLOAT_LITERAL
case|:
name|jj_consume_token
argument_list|(
name|FLOAT_LITERAL
argument_list|)
expr_stmt|;
name|ASTScalar
name|jjtn002
init|=
operator|new
name|ASTScalar
argument_list|(
name|JJTSCALAR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc002
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn002
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn002
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc002
operator|=
literal|false
expr_stmt|;
name|jjtn002
operator|.
name|setValue
argument_list|(
name|token_source
operator|.
name|literalValue
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc002
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn002
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|23
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
specifier|final
specifier|public
name|void
name|namedParameter
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
decl_stmt|;
name|jj_consume_token
argument_list|(
literal|24
argument_list|)
expr_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|PROPERTY_PATH
argument_list|)
expr_stmt|;
name|ASTNamedParameter
name|jjtn001
init|=
operator|new
name|ASTNamedParameter
argument_list|(
name|JJTNAMEDPARAMETER
argument_list|)
decl_stmt|;
name|boolean
name|jjtc001
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc001
operator|=
literal|false
expr_stmt|;
name|jjtn001
operator|.
name|setValue
argument_list|(
name|t
operator|.
name|image
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
specifier|public
name|void
name|pathExpression
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|PROPERTY_PATH
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|PROPERTY_PATH
argument_list|)
expr_stmt|;
name|ASTObjPath
name|jjtn001
init|=
operator|new
name|ASTObjPath
argument_list|(
name|JJTOBJPATH
argument_list|)
decl_stmt|;
name|boolean
name|jjtc001
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc001
operator|=
literal|false
expr_stmt|;
name|jjtn001
operator|.
name|setPath
argument_list|(
name|t
operator|.
name|image
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|25
case|:
name|jj_consume_token
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|PROPERTY_PATH
argument_list|)
expr_stmt|;
name|ASTObjPath
name|jjtn002
init|=
operator|new
name|ASTObjPath
argument_list|(
name|JJTOBJPATH
argument_list|)
decl_stmt|;
name|boolean
name|jjtc002
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn002
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn002
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc002
operator|=
literal|false
expr_stmt|;
name|jjtn002
operator|.
name|setPath
argument_list|(
name|t
operator|.
name|image
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc002
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn002
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|26
case|:
name|jj_consume_token
argument_list|(
literal|26
argument_list|)
expr_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|PROPERTY_PATH
argument_list|)
expr_stmt|;
name|ASTDbPath
name|jjtn003
init|=
operator|new
name|ASTDbPath
argument_list|(
name|JJTDBPATH
argument_list|)
decl_stmt|;
name|boolean
name|jjtc003
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn003
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn003
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc003
operator|=
literal|false
expr_stmt|;
name|jjtn003
operator|.
name|setPath
argument_list|(
name|t
operator|.
name|image
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc003
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn003
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|24
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
comment|/** Generated Token Manager. */
specifier|public
name|ExpressionParserTokenManager
name|token_source
decl_stmt|;
name|JavaCharStream
name|jj_input_stream
decl_stmt|;
comment|/** Current token. */
specifier|public
name|Token
name|token
decl_stmt|;
comment|/** Next token. */
specifier|public
name|Token
name|jj_nt
decl_stmt|;
specifier|private
name|int
name|jj_ntk
decl_stmt|;
specifier|private
name|int
name|jj_gen
decl_stmt|;
specifier|final
specifier|private
name|int
index|[]
name|jj_la1
init|=
operator|new
name|int
index|[
literal|25
index|]
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_0
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_1
decl_stmt|;
static|static
block|{
name|jj_la1_init_0
argument_list|()
expr_stmt|;
name|jj_la1_init_1
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_0
parameter_list|()
block|{
name|jj_la1_0
operator|=
operator|new
name|int
index|[]
block|{
literal|0x2
block|,
literal|0x4
block|,
literal|0x18
block|,
literal|0x87310018
block|,
literal|0x60
block|,
literal|0x180
block|,
literal|0x1010000
block|,
literal|0x4fff8
block|,
literal|0x4fff8
block|,
literal|0x87310000
block|,
literal|0x18
block|,
literal|0x1010000
block|,
literal|0x4e000
block|,
literal|0x80000
block|,
literal|0x87310000
block|,
literal|0x87310000
block|,
literal|0x1000000
block|,
literal|0x300000
block|,
literal|0x300000
block|,
literal|0xc00000
block|,
literal|0xc00000
block|,
literal|0x100000
block|,
literal|0x7310000
block|,
literal|0x7010000
block|,
literal|0x6000000
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_1
parameter_list|()
block|{
name|jj_la1_1
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xe407
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xe407
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xe404
block|,
literal|0xe407
block|,
literal|0xe403
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xc004
block|,
literal|0xc004
block|,
literal|0x4
block|,}
expr_stmt|;
block|}
comment|/** Constructor with InputStream. */
specifier|public
name|ExpressionParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|this
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Constructor with InputStream and supplied encoding */
specifier|public
name|ExpressionParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|jj_input_stream
operator|=
operator|new
name|JavaCharStream
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|token_source
operator|=
operator|new
name|ExpressionParserTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/** Reinitialise. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Reinitialise. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jjtree
operator|.
name|reset
argument_list|()
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/** Constructor. */
specifier|public
name|ExpressionParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|=
operator|new
name|JavaCharStream
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|=
operator|new
name|ExpressionParserTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/** Reinitialise. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jjtree
operator|.
name|reset
argument_list|()
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/** Constructor with generated Token Manager. */
specifier|public
name|ExpressionParser
parameter_list|(
name|ExpressionParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/** Reinitialise. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|ExpressionParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jjtree
operator|.
name|reset
argument_list|()
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|private
name|Token
name|jj_consume_token
parameter_list|(
name|int
name|kind
parameter_list|)
throws|throws
name|ParseException
block|{
name|Token
name|oldToken
decl_stmt|;
if|if
condition|(
operator|(
name|oldToken
operator|=
name|token
operator|)
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|kind
operator|==
name|kind
condition|)
block|{
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
name|token
operator|=
name|oldToken
expr_stmt|;
name|jj_kind
operator|=
name|kind
expr_stmt|;
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
comment|/** Get the next Token. */
specifier|final
specifier|public
name|Token
name|getNextToken
parameter_list|()
block|{
if|if
condition|(
name|token
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
comment|/** Get the specific Token. */
specifier|final
specifier|public
name|Token
name|getToken
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Token
name|t
init|=
name|token
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|.
name|next
operator|!=
literal|null
condition|)
name|t
operator|=
name|t
operator|.
name|next
expr_stmt|;
else|else
name|t
operator|=
name|t
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
specifier|private
name|int
name|jj_ntk
parameter_list|()
block|{
if|if
condition|(
operator|(
name|jj_nt
operator|=
name|token
operator|.
name|next
operator|)
operator|==
literal|null
condition|)
return|return
operator|(
name|jj_ntk
operator|=
operator|(
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
operator|)
operator|.
name|kind
operator|)
return|;
else|else
return|return
operator|(
name|jj_ntk
operator|=
name|jj_nt
operator|.
name|kind
operator|)
return|;
block|}
specifier|private
name|java
operator|.
name|util
operator|.
name|List
name|jj_expentries
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|int
index|[]
name|jj_expentry
decl_stmt|;
specifier|private
name|int
name|jj_kind
init|=
operator|-
literal|1
decl_stmt|;
comment|/** Generate ParseException. */
specifier|public
name|ParseException
name|generateParseException
parameter_list|()
block|{
name|jj_expentries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boolean
index|[]
name|la1tokens
init|=
operator|new
name|boolean
index|[
literal|52
index|]
decl_stmt|;
if|if
condition|(
name|jj_kind
operator|>=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|jj_kind
index|]
operator|=
literal|true
expr_stmt|;
name|jj_kind
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|jj_la1
index|[
name|i
index|]
operator|==
name|jj_gen
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|32
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|jj_la1_0
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_1
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|32
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|52
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|la1tokens
index|[
name|i
index|]
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
literal|1
index|]
expr_stmt|;
name|jj_expentry
index|[
literal|0
index|]
operator|=
name|i
expr_stmt|;
name|jj_expentries
operator|.
name|add
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
block|}
block|}
name|int
index|[]
index|[]
name|exptokseq
init|=
operator|new
name|int
index|[
name|jj_expentries
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|exptokseq
index|[
name|i
index|]
operator|=
operator|(
name|int
index|[]
operator|)
name|jj_expentries
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ParseException
argument_list|(
name|token
argument_list|,
name|exptokseq
argument_list|,
name|tokenImage
argument_list|)
return|;
block|}
comment|/** Enable tracing. */
specifier|final
specifier|public
name|void
name|enable_tracing
parameter_list|()
block|{
block|}
comment|/** Disable tracing. */
specifier|final
specifier|public
name|void
name|disable_tracing
parameter_list|()
block|{
block|}
block|}
end_class

end_unit

