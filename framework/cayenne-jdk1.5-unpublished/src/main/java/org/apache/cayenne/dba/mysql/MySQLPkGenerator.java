begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|mysql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|JdbcAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|JdbcPkGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|MySQLPkGenerator
extends|extends
name|JdbcPkGenerator
block|{
name|MySQLPkGenerator
parameter_list|(
name|JdbcAdapter
name|adapter
parameter_list|)
block|{
name|super
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|dropAutoPkString
parameter_list|()
block|{
return|return
literal|"DROP TABLE IF EXISTS AUTO_PK_SUPPORT"
return|;
block|}
comment|/**      * Overrides superclass's implementation to perform locking of the primary key lookup      * table.      *       * @since 3.0      */
annotation|@
name|Override
specifier|protected
name|long
name|longPkFromDatabase
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|DbEntity
name|entity
parameter_list|)
throws|throws
name|Exception
block|{
comment|// must work directly with JDBC connection, since we
comment|// must unlock the AUTO_PK_SUPPORT table in case of
comment|// failures.... ah..JDBC is fun...
comment|// chained SQL exception
name|SQLException
name|exception
init|=
literal|null
decl_stmt|;
name|long
name|pk
init|=
operator|-
literal|1l
decl_stmt|;
name|Connection
name|con
init|=
name|node
operator|.
name|getDataSource
argument_list|()
operator|.
name|getConnection
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|con
operator|.
name|getAutoCommit
argument_list|()
condition|)
block|{
name|con
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|Statement
name|st
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|pk
operator|=
name|getLongPrimaryKey
argument_list|(
name|st
argument_list|,
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|con
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|pkEx
parameter_list|)
block|{
try|try
block|{
name|con
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
block|}
name|exception
operator|=
name|processSQLException
argument_list|(
name|pkEx
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// UNLOCK!
comment|// THIS MUST BE EXECUTED NO MATTER WHAT, OR WE WILL LOCK THE PRIMARY KEY
comment|// TABLE!!
try|try
block|{
name|String
name|unlockString
init|=
literal|"UNLOCK TABLES"
decl_stmt|;
name|logger
operator|.
name|logQuery
argument_list|(
name|unlockString
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
expr_stmt|;
name|st
operator|.
name|execute
argument_list|(
name|unlockString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|unlockEx
parameter_list|)
block|{
name|exception
operator|=
name|processSQLException
argument_list|(
name|unlockEx
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// close statement
try|try
block|{
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|stClosingEx
parameter_list|)
block|{
comment|// ignoring...
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|otherEx
parameter_list|)
block|{
name|exception
operator|=
name|processSQLException
argument_list|(
name|otherEx
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|closingEx
parameter_list|)
block|{
comment|// ignoring
block|}
block|}
comment|// check errors
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
return|return
name|pk
return|;
block|}
comment|/**      * Appends a new SQLException to the chain. If parent is null, uses the exception as      * the chain root.      */
specifier|protected
name|SQLException
name|processSQLException
parameter_list|(
name|SQLException
name|exception
parameter_list|,
name|SQLException
name|parent
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
name|exception
return|;
block|}
name|parent
operator|.
name|setNextException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
return|return
name|parent
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|pkTableCreateString
parameter_list|()
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"CREATE TABLE AUTO_PK_SUPPORT ("
argument_list|)
operator|.
name|append
argument_list|(
literal|"  TABLE_NAME CHAR(100) NOT NULL,"
argument_list|)
operator|.
name|append
argument_list|(
literal|"  NEXT_ID BIGINT NOT NULL, UNIQUE (TABLE_NAME)"
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * @since 3.0      */
specifier|protected
name|long
name|getLongPrimaryKey
parameter_list|(
name|Statement
name|statement
parameter_list|,
name|String
name|entityName
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// lock
name|String
name|lockString
init|=
literal|"LOCK TABLES AUTO_PK_SUPPORT WRITE"
decl_stmt|;
name|logger
operator|.
name|logQuery
argument_list|(
name|lockString
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
expr_stmt|;
name|statement
operator|.
name|execute
argument_list|(
name|lockString
argument_list|)
expr_stmt|;
comment|// select
name|long
name|pk
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|selectString
init|=
name|super
operator|.
name|pkSelectString
argument_list|(
name|entityName
argument_list|)
decl_stmt|;
name|logger
operator|.
name|logQuery
argument_list|(
name|selectString
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|selectString
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"No rows for '"
operator|+
name|entityName
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|pk
operator|=
name|rs
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"More than one row for '"
operator|+
name|entityName
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ignoring...
block|}
block|}
comment|// update
name|String
name|updateString
init|=
name|super
operator|.
name|pkUpdateString
argument_list|(
name|entityName
argument_list|)
operator|+
literal|" AND NEXT_ID = "
operator|+
name|pk
decl_stmt|;
name|logger
operator|.
name|logQuery
argument_list|(
name|updateString
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
expr_stmt|;
name|int
name|updated
init|=
name|statement
operator|.
name|executeUpdate
argument_list|(
name|updateString
argument_list|)
decl_stmt|;
comment|// optimistic lock failure...
if|if
condition|(
name|updated
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Error updating PK count '"
operator|+
name|entityName
operator|+
literal|"': "
operator|+
name|updated
argument_list|)
throw|;
block|}
return|return
name|pk
return|;
block|}
block|}
end_class

end_unit

