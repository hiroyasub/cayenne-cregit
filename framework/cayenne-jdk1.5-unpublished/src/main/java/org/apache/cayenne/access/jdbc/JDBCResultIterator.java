begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|ResultIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|EntityResultSegment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLResultSetMetadata
import|;
end_import

begin_comment
comment|/**  * A ResultIterator over the underlying JDBC ResultSet.  *   * @since 1.2  */
end_comment

begin_class
specifier|public
class|class
name|JDBCResultIterator
implements|implements
name|ResultIterator
block|{
comment|// Connection information
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|protected
name|Statement
name|statement
decl_stmt|;
specifier|protected
name|ResultSet
name|resultSet
decl_stmt|;
specifier|protected
name|RowDescriptor
name|rowDescriptor
decl_stmt|;
specifier|protected
name|QueryMetadata
name|queryMetadata
decl_stmt|;
comment|// last indexed PK
specifier|protected
name|boolean
name|closingConnection
decl_stmt|;
specifier|protected
name|boolean
name|closed
decl_stmt|;
specifier|protected
name|boolean
name|nextRow
decl_stmt|;
specifier|private
name|DataRowPostProcessor
name|postProcessor
decl_stmt|;
specifier|private
name|RowReader
argument_list|<
name|?
argument_list|>
name|rowReader
decl_stmt|;
specifier|private
name|RowReader
argument_list|<
name|Object
argument_list|>
name|idRowReader
decl_stmt|;
comment|/**      * Creates new JDBCResultIterator that reads from provided ResultSet.      *       * @since 3.0      */
specifier|public
name|JDBCResultIterator
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|Statement
name|statement
parameter_list|,
name|ResultSet
name|resultSet
parameter_list|,
name|RowDescriptor
name|descriptor
parameter_list|,
name|QueryMetadata
name|queryMetadata
parameter_list|)
throws|throws
name|CayenneException
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|statement
operator|=
name|statement
expr_stmt|;
name|this
operator|.
name|resultSet
operator|=
name|resultSet
expr_stmt|;
name|this
operator|.
name|rowDescriptor
operator|=
name|descriptor
expr_stmt|;
name|this
operator|.
name|queryMetadata
operator|=
name|queryMetadata
expr_stmt|;
name|checkNextRow
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextRow
condition|)
block|{
name|this
operator|.
name|rowReader
operator|=
name|createRowReader
argument_list|(
name|descriptor
argument_list|,
name|queryMetadata
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * RowReader factory method.      */
specifier|private
name|RowReader
argument_list|<
name|?
argument_list|>
name|createRowReader
parameter_list|(
name|RowDescriptor
name|descriptor
parameter_list|,
name|QueryMetadata
name|queryMetadata
parameter_list|)
block|{
name|SQLResultSetMetadata
name|rsMapping
init|=
name|queryMetadata
operator|.
name|getResultSetMapping
argument_list|()
decl_stmt|;
if|if
condition|(
name|rsMapping
operator|!=
literal|null
condition|)
block|{
name|int
name|resultWidth
init|=
name|rsMapping
operator|.
name|getSegmentsCount
argument_list|()
decl_stmt|;
name|int
index|[]
name|entitySegments
init|=
name|rsMapping
operator|.
name|getEntitySegments
argument_list|()
decl_stmt|;
name|int
index|[]
name|scalarSegments
init|=
name|rsMapping
operator|.
name|getScalarSegments
argument_list|()
decl_stmt|;
if|if
condition|(
name|resultWidth
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Empty result descriptor"
argument_list|)
throw|;
block|}
if|else if
condition|(
name|resultWidth
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|entitySegments
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|createEntityRowReader
argument_list|(
name|descriptor
argument_list|,
name|rsMapping
operator|.
name|getEntitySegment
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ScalarRowReader
argument_list|(
name|descriptor
argument_list|,
name|rsMapping
operator|.
name|getScalarSegment
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|CompoundRowReader
name|reader
init|=
operator|new
name|CompoundRowReader
argument_list|(
name|resultWidth
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|entitySegments
control|)
block|{
name|reader
operator|.
name|addRowReader
argument_list|(
name|i
argument_list|,
name|createEntityRowReader
argument_list|(
name|descriptor
argument_list|,
name|rsMapping
operator|.
name|getEntitySegment
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
range|:
name|scalarSegments
control|)
block|{
name|reader
operator|.
name|addRowReader
argument_list|(
name|i
argument_list|,
operator|new
name|ScalarRowReader
argument_list|(
name|descriptor
argument_list|,
name|rsMapping
operator|.
name|getScalarSegment
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|reader
return|;
block|}
block|}
else|else
block|{
return|return
name|createFullRowReader
argument_list|(
name|descriptor
argument_list|,
name|queryMetadata
argument_list|)
return|;
block|}
block|}
specifier|private
name|RowReader
argument_list|<
name|?
argument_list|>
name|createEntityRowReader
parameter_list|(
name|RowDescriptor
name|descriptor
parameter_list|,
name|EntityResultSegment
name|resultMetadata
parameter_list|)
block|{
if|if
condition|(
name|resultMetadata
operator|.
name|getClassDescriptor
argument_list|()
operator|!=
literal|null
operator|&&
name|resultMetadata
operator|.
name|getClassDescriptor
argument_list|()
operator|.
name|getEntityInheritanceTree
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|InheritanceAwareEntityRowReader
argument_list|(
name|descriptor
argument_list|,
name|resultMetadata
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|EntityRowReader
argument_list|(
name|descriptor
argument_list|,
name|resultMetadata
argument_list|)
return|;
block|}
block|}
specifier|private
name|RowReader
argument_list|<
name|?
argument_list|>
name|createFullRowReader
parameter_list|(
name|RowDescriptor
name|descriptor
parameter_list|,
name|QueryMetadata
name|queryMetadata
parameter_list|)
block|{
if|if
condition|(
name|queryMetadata
operator|.
name|getClassDescriptor
argument_list|()
operator|!=
literal|null
operator|&&
name|queryMetadata
operator|.
name|getClassDescriptor
argument_list|()
operator|.
name|getEntityInheritanceTree
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|InheritanceAwareRowReader
argument_list|(
name|descriptor
argument_list|,
name|queryMetadata
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|FullRowReader
argument_list|(
name|descriptor
argument_list|,
name|queryMetadata
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns all unread data rows from ResultSet, closing this iterator if needed.      *       * @deprecated since 3.0      */
specifier|public
name|List
argument_list|<
name|DataRow
argument_list|>
name|dataRows
parameter_list|(
name|boolean
name|close
parameter_list|)
throws|throws
name|CayenneException
block|{
return|return
name|allRows
argument_list|(
name|close
argument_list|)
return|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|List
name|allRows
parameter_list|(
name|boolean
name|close
parameter_list|)
throws|throws
name|CayenneException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|hasNextRow
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|nextRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|close
condition|)
block|{
name|this
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
comment|/**      * Returns true if there is at least one more record that can be read from the      * iterator.      */
specifier|public
name|boolean
name|hasNextRow
parameter_list|()
block|{
return|return
name|nextRow
return|;
block|}
comment|/**      * Returns the next result row as a Map.      *       * @deprecated since 3.0      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nextDataRow
parameter_list|()
throws|throws
name|CayenneException
block|{
return|return
operator|(
name|DataRow
operator|)
name|nextRow
argument_list|()
return|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|Object
name|nextRow
parameter_list|()
throws|throws
name|CayenneException
block|{
if|if
condition|(
operator|!
name|hasNextRow
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CayenneException
argument_list|(
literal|"An attempt to read uninitialized row or past the end of the iterator."
argument_list|)
throw|;
block|}
name|Object
name|row
init|=
name|rowReader
operator|.
name|readRow
argument_list|(
name|resultSet
argument_list|)
decl_stmt|;
name|checkNextRow
argument_list|()
expr_stmt|;
return|return
name|row
return|;
block|}
comment|/**      * Returns a map of ObjectId values from the next result row. Primary key columns are      * determined from the provided DbEntity.      *       * @deprecated since 3.0 in favor of {@link #nextId(DbEntity)}.      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nextObjectId
parameter_list|(
name|DbEntity
name|entity
parameter_list|)
throws|throws
name|CayenneException
block|{
if|if
condition|(
operator|!
name|hasNextRow
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CayenneException
argument_list|(
literal|"An attempt to read uninitialized row or past the end of the iterator."
argument_list|)
throw|;
block|}
comment|// index id
if|if
condition|(
name|idRowReader
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|idRowReader
operator|=
operator|new
name|IdRowReader
argument_list|(
name|rowDescriptor
argument_list|,
name|queryMetadata
argument_list|)
expr_stmt|;
name|idRowReader
operator|.
name|setPostProcessor
argument_list|(
name|postProcessor
argument_list|)
expr_stmt|;
block|}
comment|// read ...
comment|// TODO: note a mismatch with 1.1 API - ID positions are preset and are
comment|// not affected by the entity specified (think of deprecating/replacing this)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
init|=
name|readIdRow
argument_list|()
decl_stmt|;
comment|// rewind
name|checkNextRow
argument_list|()
expr_stmt|;
return|return
name|row
return|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|Object
name|nextId
parameter_list|()
throws|throws
name|CayenneException
block|{
if|if
condition|(
operator|!
name|hasNextRow
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CayenneException
argument_list|(
literal|"An attempt to read uninitialized row or past the end of the iterator."
argument_list|)
throw|;
block|}
comment|// index id
if|if
condition|(
name|idRowReader
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|idRowReader
operator|=
operator|new
name|IdRowReader
argument_list|(
name|rowDescriptor
argument_list|,
name|queryMetadata
argument_list|)
expr_stmt|;
name|idRowReader
operator|.
name|setPostProcessor
argument_list|(
name|postProcessor
argument_list|)
expr_stmt|;
block|}
name|Object
name|id
init|=
name|idRowReader
operator|.
name|readRow
argument_list|(
name|resultSet
argument_list|)
decl_stmt|;
comment|// rewind
name|checkNextRow
argument_list|()
expr_stmt|;
return|return
name|id
return|;
block|}
comment|/**      * @deprecated since 3.0      */
specifier|public
name|void
name|skipDataRow
parameter_list|()
throws|throws
name|CayenneException
block|{
name|skipRow
argument_list|()
expr_stmt|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|void
name|skipRow
parameter_list|()
throws|throws
name|CayenneException
block|{
if|if
condition|(
operator|!
name|hasNextRow
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CayenneException
argument_list|(
literal|"An attempt to read uninitialized row or past the end of the iterator."
argument_list|)
throw|;
block|}
name|checkNextRow
argument_list|()
expr_stmt|;
block|}
comment|/**      * Closes ResultIterator and associated ResultSet. This method must be called      * explicitly when the user is finished processing the records. Otherwise unused      * database resources will not be released properly.      */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|CayenneException
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|nextRow
operator|=
literal|false
expr_stmt|;
name|StringBuffer
name|errors
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
try|try
block|{
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e1
parameter_list|)
block|{
name|errors
operator|.
name|append
argument_list|(
literal|"Error closing ResultSet."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|statement
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e2
parameter_list|)
block|{
name|errors
operator|.
name|append
argument_list|(
literal|"Error closing PreparedStatement."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: andrus, 5/8/2006 - closing connection within JDBCResultIterator is
comment|// obsolete as this is bound to transaction closing in DataContext. Deprecate
comment|// this after 1.2
comment|// close connection, if this object was explicitly configured to be
comment|// responsible for doing it
if|if
condition|(
name|connection
operator|!=
literal|null
operator|&&
name|isClosingConnection
argument_list|()
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e3
parameter_list|)
block|{
name|errors
operator|.
name|append
argument_list|(
literal|"Error closing Connection."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|errors
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|CayenneException
argument_list|(
literal|"Error closing ResultIterator: "
operator|+
name|errors
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**      * Returns the number of columns in the result row.      *       * @deprecated since 3.0      */
specifier|public
name|int
name|getDataRowWidth
parameter_list|()
block|{
return|return
name|getResultSetWidth
argument_list|()
return|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|int
name|getResultSetWidth
parameter_list|()
block|{
return|return
name|rowDescriptor
operator|.
name|getWidth
argument_list|()
return|;
block|}
comment|/**      * Moves internal ResultSet cursor position down one row. Checks if the next row is      * available.      */
specifier|protected
name|void
name|checkNextRow
parameter_list|()
throws|throws
name|CayenneException
block|{
name|nextRow
operator|=
literal|false
expr_stmt|;
try|try
block|{
if|if
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|nextRow
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneException
argument_list|(
literal|"Error rewinding ResultSet"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads a row from the internal ResultSet at the current cursor position.      *       * @deprecated since 3.0. Internal rowReader is used to read individual rows.      */
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|readDataRow
parameter_list|()
throws|throws
name|CayenneException
block|{
return|return
operator|(
name|DataRow
operator|)
name|rowReader
operator|.
name|readRow
argument_list|(
name|resultSet
argument_list|)
return|;
block|}
comment|/**      * Reads a row from the internal ResultSet at the current cursor position, processing      * only columns that are part of the ObjectId of a target class.      *       * @deprecated since 3.0 as the calling method is deprecated      */
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|readIdRow
parameter_list|()
throws|throws
name|CayenneException
block|{
name|Object
name|value
init|=
name|idRowReader
operator|.
name|readRow
argument_list|(
name|resultSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Map
condition|)
block|{
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|value
return|;
block|}
comment|// wrap into a map...
name|String
name|pkName
init|=
name|queryMetadata
operator|.
name|getDbEntity
argument_list|()
operator|.
name|getPrimaryKeys
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|DataRow
name|dataRow
init|=
operator|new
name|DataRow
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|dataRow
operator|.
name|put
argument_list|(
name|pkName
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|dataRow
return|;
block|}
comment|/**      * Returns<code>true</code> if this iterator is responsible for closing its      * connection, otherwise a user of the iterator must close the connection after      * closing the iterator.      */
specifier|public
name|boolean
name|isClosingConnection
parameter_list|()
block|{
return|return
name|closingConnection
return|;
block|}
comment|/**      * Sets the<code>closingConnection</code> property.      */
specifier|public
name|void
name|setClosingConnection
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|this
operator|.
name|closingConnection
operator|=
name|flag
expr_stmt|;
block|}
specifier|public
name|RowDescriptor
name|getRowDescriptor
parameter_list|()
block|{
return|return
name|rowDescriptor
return|;
block|}
comment|// TODO: andrus 11/27/2008 refactor the postprocessor hack into a special row reader.
name|void
name|setPostProcessor
parameter_list|(
name|DataRowPostProcessor
name|postProcessor
parameter_list|)
block|{
name|this
operator|.
name|postProcessor
operator|=
name|postProcessor
expr_stmt|;
if|if
condition|(
name|rowReader
operator|!=
literal|null
condition|)
block|{
name|rowReader
operator|.
name|setPostProcessor
argument_list|(
name|postProcessor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|idRowReader
operator|!=
literal|null
condition|)
block|{
name|idRowReader
operator|.
name|setPostProcessor
argument_list|(
name|postProcessor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

