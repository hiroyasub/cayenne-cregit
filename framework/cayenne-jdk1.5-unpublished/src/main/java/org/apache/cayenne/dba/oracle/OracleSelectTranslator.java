begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|oracle
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|QueryLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|trans
operator|.
name|SelectTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_comment
comment|/**  * Select translator that implements Oracle-specific optimizations.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|OracleSelectTranslator
extends|extends
name|SelectTranslator
block|{
specifier|private
specifier|static
name|boolean
name|testedDriver
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|useOptimizations
decl_stmt|;
specifier|private
specifier|static
name|Method
name|statementSetRowPrefetch
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Object
index|[]
name|rowPrefetchArgs
init|=
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
literal|100
argument_list|)
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|createSqlString
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|sqlString
init|=
name|super
operator|.
name|createSqlString
argument_list|()
decl_stmt|;
name|QueryMetadata
name|info
init|=
name|getQuery
argument_list|()
operator|.
name|getMetaData
argument_list|(
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getFetchLimit
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sqlString
operator|=
literal|"SELECT * FROM ("
operator|+
name|sqlString
operator|+
literal|") WHERE rownum<= "
operator|+
name|info
operator|.
name|getFetchLimit
argument_list|()
expr_stmt|;
block|}
return|return
name|sqlString
return|;
block|}
comment|/**      * Determines if we can use Oracle optimizations. If yes, configure this object to use      * them via reflection.      */
specifier|private
specifier|static
specifier|final
specifier|synchronized
name|void
name|testDriver
parameter_list|(
name|Statement
name|st
parameter_list|)
block|{
if|if
condition|(
name|testedDriver
condition|)
block|{
return|return;
block|}
comment|// invalid call.. give it another chance later
if|if
condition|(
name|st
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|testedDriver
operator|=
literal|true
expr_stmt|;
try|try
block|{
comment|// search for matching methods in class and its superclasses
name|Class
index|[]
name|args2
init|=
operator|new
name|Class
index|[]
block|{
name|Integer
operator|.
name|TYPE
block|}
decl_stmt|;
name|statementSetRowPrefetch
operator|=
name|st
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setRowPrefetch"
argument_list|,
name|args2
argument_list|)
expr_stmt|;
name|useOptimizations
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|useOptimizations
operator|=
literal|false
expr_stmt|;
name|statementSetRowPrefetch
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Translates internal query into PreparedStatement, applying Oracle optimizations if      * possible.      */
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|createStatement
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|sqlStr
init|=
name|createSqlString
argument_list|()
decl_stmt|;
name|QueryLogger
operator|.
name|logQuery
argument_list|(
name|sqlStr
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sqlStr
argument_list|)
decl_stmt|;
name|initStatement
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|testedDriver
condition|)
block|{
name|testDriver
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useOptimizations
condition|)
block|{
comment|// apply Oracle optimization of the statement
comment|// Performance tests conducted by Arndt (bug #699966) show
comment|// that using explicit "defineColumnType" slows things down,
comment|// so this is disabled now
comment|// 1. name result columns
comment|/*              * List columns = getColumns(); int len = columns.size(); Object[] args = new              * Object[2]; for (int i = 0; i< len; i++) { DbAttribute attr = (DbAttribute)              * columns.get(i); args[0] = new Integer(i + 1); args[1] = new              * Integer(attr.getType()); statementDefineColumnType.invoke(stmt, args); }              */
comment|// 2. prefetch bigger batches of rows
comment|// [This optimization didn't give any measurable performance
comment|// increase. Keeping it for the future research]
comment|// Note that this is done by statement,
comment|// instead of Connection, since we do not want to mess
comment|// with Connection that is potentially used by
comment|// other people.
name|statementSetRowPrefetch
operator|.
name|invoke
argument_list|(
name|stmt
argument_list|,
name|rowPrefetchArgs
argument_list|)
expr_stmt|;
block|}
return|return
name|stmt
return|;
block|}
block|}
end_class

end_unit

