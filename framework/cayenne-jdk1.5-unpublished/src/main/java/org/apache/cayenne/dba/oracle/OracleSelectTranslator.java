begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|oracle
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|QueryLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|trans
operator|.
name|SelectTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_comment
comment|/**  * Select translator that implements Oracle-specific optimizations.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|OracleSelectTranslator
extends|extends
name|SelectTranslator
block|{
annotation|@
name|Override
specifier|public
name|String
name|createSqlString
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|sqlString
init|=
name|super
operator|.
name|createSqlString
argument_list|()
decl_stmt|;
name|QueryMetadata
name|info
init|=
name|getQuery
argument_list|()
operator|.
name|getMetaData
argument_list|(
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getFetchLimit
argument_list|()
operator|>
literal|0
operator|||
name|info
operator|.
name|getFetchOffset
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|max
init|=
operator|(
name|info
operator|.
name|getFetchLimit
argument_list|()
operator|==
literal|0
operator|)
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
operator|(
name|info
operator|.
name|getFetchLimit
argument_list|()
operator|+
name|info
operator|.
name|getFetchOffset
argument_list|()
operator|)
decl_stmt|;
name|sqlString
operator|=
literal|"select * "
operator|+
literal|"from ( select "
operator|+
literal|"tid.*, ROWNUM rnum "
operator|+
literal|"from ("
operator|+
name|sqlString
operator|+
literal|") tid "
operator|+
literal|"where ROWNUM<="
operator|+
name|max
operator|+
literal|") where rnum> "
operator|+
name|info
operator|.
name|getFetchOffset
argument_list|()
expr_stmt|;
block|}
return|return
name|sqlString
return|;
block|}
comment|/**      * Translates internal query into PreparedStatement, applying Oracle optimizations if      * possible.      */
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|createStatement
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|sqlStr
init|=
name|createSqlString
argument_list|()
decl_stmt|;
name|QueryLogger
operator|.
name|logQuery
argument_list|(
name|sqlStr
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|PreparedStatement
name|stmt
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sqlStr
argument_list|)
decl_stmt|;
name|initStatement
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
return|return
name|stmt
return|;
block|}
block|}
end_class

end_unit

