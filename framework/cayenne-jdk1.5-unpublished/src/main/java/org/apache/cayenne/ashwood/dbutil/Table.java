begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_comment
comment|/* ====================================================================  *  * Copyright(c) 2003, Andriy Shapochka  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above  *    copyright notice, this list of conditions and the following  *    disclaimer.  *  * 2. Redistributions in binary form must reproduce the above  *    copyright notice, this list of conditions and the following  *    disclaimer in the documentation and/or other materials  *    provided with the distribution.  *  * 3. Neither the name of the ASHWOOD nor the  *    names of its contributors may be used to endorse or  *    promote products derived from this software without  *    specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * ====================================================================  *  * This software consists of voluntary contributions made by  * individuals on behalf of the ASHWOOD Project and was originally  * created by Andriy Shapochka.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ashwood
operator|.
name|dbutil
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_class
specifier|public
class|class
name|Table
implements|implements
name|Serializable
block|{
specifier|private
name|String
name|catalog
decl_stmt|;
specifier|private
name|String
name|schema
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|Column
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|Column
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|ForeignKey
argument_list|>
name|foreignKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|ForeignKey
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|PrimaryKey
argument_list|>
name|primaryKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|PrimaryKey
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|Table
parameter_list|()
block|{
block|}
specifier|public
name|Table
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|setCatalog
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getCatalog
parameter_list|()
block|{
return|return
name|catalog
return|;
block|}
specifier|public
name|void
name|setCatalog
parameter_list|(
name|String
name|catalog
parameter_list|)
block|{
name|this
operator|.
name|catalog
operator|=
name|catalog
expr_stmt|;
block|}
specifier|public
name|void
name|setSchema
parameter_list|(
name|String
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
specifier|public
name|String
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
operator|!=
literal|null
condition|?
name|name
else|:
literal|""
return|;
block|}
specifier|public
specifier|static
name|String
name|composeFullName
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|catalog
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|catalog
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|schema
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tableName
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getFullName
parameter_list|()
block|{
return|return
name|composeFullName
argument_list|(
name|catalog
argument_list|,
name|schema
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|PrimaryKey
argument_list|>
name|getPrimaryKeys
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|primaryKeys
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|ForeignKey
argument_list|>
name|getForeignKeys
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|foreignKeys
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|Column
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|columns
argument_list|)
return|;
block|}
specifier|public
name|void
name|addColumn
parameter_list|(
name|Column
name|column
parameter_list|)
block|{
name|columns
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|column
operator|.
name|setOwner
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|removeColumn
parameter_list|(
name|Column
name|column
parameter_list|)
block|{
name|column
operator|.
name|setOwner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|columns
operator|.
name|remove
argument_list|(
name|column
argument_list|)
return|;
block|}
specifier|public
name|void
name|addPrimaryKey
parameter_list|(
name|PrimaryKey
name|primaryKey
parameter_list|)
block|{
name|primaryKeys
operator|.
name|add
argument_list|(
name|primaryKey
argument_list|)
expr_stmt|;
name|primaryKey
operator|.
name|setOwner
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|removePrimaryKey
parameter_list|(
name|PrimaryKey
name|primaryKey
parameter_list|)
block|{
name|primaryKey
operator|.
name|setOwner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|primaryKeys
operator|.
name|remove
argument_list|(
name|primaryKey
argument_list|)
return|;
block|}
specifier|public
name|void
name|addForeignKey
parameter_list|(
name|ForeignKey
name|foreignKey
parameter_list|)
block|{
name|foreignKeys
operator|.
name|add
argument_list|(
name|foreignKey
argument_list|)
expr_stmt|;
name|foreignKey
operator|.
name|setOwner
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|removeForeignKey
parameter_list|(
name|ForeignKey
name|foreignKey
parameter_list|)
block|{
name|foreignKey
operator|.
name|setOwner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|foreignKeys
operator|.
name|remove
argument_list|(
name|foreignKey
argument_list|)
return|;
block|}
block|}
end_class

end_unit

