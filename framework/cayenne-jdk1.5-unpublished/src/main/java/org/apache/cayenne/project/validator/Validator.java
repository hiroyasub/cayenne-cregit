begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|validator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|ConfigStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|ProjectPath
import|;
end_import

begin_comment
comment|/**   * Validator is used to validate Cayenne projects.  *   */
end_comment

begin_class
specifier|public
class|class
name|Validator
block|{
specifier|protected
name|Project
name|project
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|ValidationInfo
argument_list|>
name|validationResults
init|=
operator|new
name|ArrayList
argument_list|<
name|ValidationInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|int
name|maxSeverity
decl_stmt|;
comment|/**      * Creates a new validator initialized with the project.      *       * @param project      */
specifier|public
name|Validator
parameter_list|(
name|Project
name|project
parameter_list|)
block|{
name|this
operator|.
name|project
operator|=
name|project
expr_stmt|;
block|}
comment|/**      * Initializes validator with the project loading config status.      *       * @param project      * @param status      */
specifier|public
name|Validator
parameter_list|(
name|Project
name|project
parameter_list|,
name|ConfigStatus
name|status
parameter_list|)
block|{
name|this
argument_list|(
name|project
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|hasFailures
argument_list|()
condition|)
block|{
name|ProjectPath
name|path
init|=
operator|new
name|ProjectPath
argument_list|(
name|project
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|message
range|:
name|status
operator|.
name|getOtherFailures
argument_list|()
control|)
block|{
name|registerError
argument_list|(
name|message
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|String
name|message
range|:
name|status
operator|.
name|getFailedMaps
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|registerError
argument_list|(
literal|"Map failed to load: "
operator|+
name|message
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|String
name|message
range|:
name|status
operator|.
name|getFailedAdapters
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|registerError
argument_list|(
literal|"Adapter failed to load: "
operator|+
name|message
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|String
name|message
range|:
name|status
operator|.
name|getFailedDataSources
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|registerError
argument_list|(
literal|"DataSource failed to load: "
operator|+
name|message
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|String
name|message
range|:
name|status
operator|.
name|getFailedMapRefs
argument_list|()
control|)
block|{
name|registerError
argument_list|(
literal|"Map reference failed to load: "
operator|+
name|message
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns the project.      * @return Project      */
specifier|public
name|Project
name|getProject
parameter_list|()
block|{
return|return
name|project
return|;
block|}
comment|/**       * Resets internal state.       * Called internally before starting validation.      */
specifier|protected
name|void
name|reset
parameter_list|()
block|{
if|if
condition|(
name|validationResults
operator|!=
literal|null
condition|)
block|{
name|validationResults
operator|=
operator|new
name|ArrayList
argument_list|<
name|ValidationInfo
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|maxSeverity
operator|=
name|ValidationInfo
operator|.
name|VALID
expr_stmt|;
block|}
comment|/**       * Returns maximum severity level encountered during       * the last validation run.       */
specifier|public
name|int
name|getMaxSeverity
parameter_list|()
block|{
return|return
name|maxSeverity
return|;
block|}
comment|/**      * Registers validation result.       * Increases internally stored max severity if       *<code>result</code> parameter has a higher severity then the current value.       * Leaves current value unchanged otherwise.      */
specifier|public
name|void
name|registerValidated
parameter_list|(
name|int
name|severity
parameter_list|,
name|String
name|message
parameter_list|,
name|ProjectPath
name|treeNodePath
parameter_list|)
block|{
name|ValidationInfo
name|result
init|=
operator|new
name|ValidationInfo
argument_list|(
name|severity
argument_list|,
name|message
argument_list|,
name|treeNodePath
argument_list|)
decl_stmt|;
name|validationResults
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxSeverity
operator|<
name|severity
condition|)
block|{
name|maxSeverity
operator|=
name|severity
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|registerError
parameter_list|(
name|String
name|message
parameter_list|,
name|ProjectPath
name|treeNodePath
parameter_list|)
block|{
name|registerValidated
argument_list|(
name|ValidationInfo
operator|.
name|ERROR
argument_list|,
name|message
argument_list|,
name|treeNodePath
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|registerWarning
parameter_list|(
name|String
name|message
parameter_list|,
name|ProjectPath
name|treeNodePath
parameter_list|)
block|{
name|registerValidated
argument_list|(
name|ValidationInfo
operator|.
name|WARNING
argument_list|,
name|message
argument_list|,
name|treeNodePath
argument_list|)
expr_stmt|;
block|}
comment|/** Return collection of ValidationInfo objects from last validation. */
specifier|public
name|List
argument_list|<
name|ValidationInfo
argument_list|>
name|validationResults
parameter_list|()
block|{
return|return
name|validationResults
return|;
block|}
comment|/**       * Validates all project elements.      *       * @return ValidationInfo.VALID if no errors were found,       * or an error code of the error with the highest severity       * if there were errors.      */
specifier|public
specifier|synchronized
name|int
name|validate
parameter_list|()
block|{
return|return
name|validate
argument_list|(
name|project
operator|.
name|treeNodes
argument_list|()
argument_list|)
return|;
block|}
comment|/**  	 * Validates a set of tree nodes passed as an iterator. 	 *  	 * @return ValidationInfo.VALID if no errors were found,  	 * or an error code of the error with the highest severity  	 * if there were errors. 	 */
specifier|public
specifier|synchronized
name|int
name|validate
parameter_list|(
name|Iterator
name|treeNodes
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|treeNodes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TreeNodeValidator
operator|.
name|validate
argument_list|(
operator|(
name|ProjectPath
operator|)
name|treeNodes
operator|.
name|next
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|getMaxSeverity
argument_list|()
return|;
block|}
block|}
end_class

end_unit

