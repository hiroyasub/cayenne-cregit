begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneException
import|;
end_import

begin_comment
comment|/**  * Represents a Cayenne-managed local Transaction.  *   * @since 1.2 moved to a top-level class.  */
end_comment

begin_class
class|class
name|InternalTransaction
extends|extends
name|ExternalTransaction
block|{
name|InternalTransaction
parameter_list|(
name|TransactionDelegate
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|begin
parameter_list|()
block|{
name|super
operator|.
name|begin
argument_list|()
expr_stmt|;
name|QueryLogger
operator|.
name|logBeginTransaction
argument_list|(
literal|"transaction started."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|fixConnectionState
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|connection
operator|.
name|getAutoCommit
argument_list|()
condition|)
block|{
comment|// some DBs are very particular about that, (e.g. Informix SE 7.0 per
comment|// CAY-179), so do a try-catch and ignore exception
comment|// TODO: maybe allow adapter to provide transaction instance?
try|try
block|{
name|connection
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|cay179Ex
parameter_list|)
block|{
comment|// Can't set autocommit, ignoring...
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|processCommit
parameter_list|()
throws|throws
name|SQLException
throws|,
name|CayenneException
block|{
name|status
operator|=
name|Transaction
operator|.
name|STATUS_COMMITTING
expr_stmt|;
if|if
condition|(
name|connections
operator|!=
literal|null
operator|&&
name|connections
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Throwable
name|deferredException
init|=
literal|null
decl_stmt|;
name|Iterator
name|it
init|=
name|connections
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Connection
name|connection
init|=
operator|(
name|Connection
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|deferredException
operator|==
literal|null
condition|)
block|{
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// we must do a partial rollback if only to cleanup
comment|// uncommitted
comment|// connections.
name|connection
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
comment|// there is no such thing as "partial" rollback in real
comment|// transactions, so we can't set any meaningful status.
comment|// status = ?;
name|setRollbackOnly
argument_list|()
expr_stmt|;
comment|// stores last exception
comment|// TODO: chain exceptions...
name|deferredException
operator|=
name|th
expr_stmt|;
block|}
block|}
if|if
condition|(
name|deferredException
operator|!=
literal|null
condition|)
block|{
name|QueryLogger
operator|.
name|logRollbackTransaction
argument_list|(
literal|"transaction rolledback."
argument_list|)
expr_stmt|;
if|if
condition|(
name|deferredException
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|deferredException
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|CayenneException
argument_list|(
name|deferredException
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|QueryLogger
operator|.
name|logCommitTransaction
argument_list|(
literal|"transaction committed."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|processRollback
parameter_list|()
throws|throws
name|SQLException
throws|,
name|CayenneException
block|{
name|status
operator|=
name|Transaction
operator|.
name|STATUS_ROLLING_BACK
expr_stmt|;
if|if
condition|(
name|connections
operator|!=
literal|null
operator|&&
name|connections
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Throwable
name|deferredException
init|=
literal|null
decl_stmt|;
name|Iterator
name|it
init|=
name|connections
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Connection
name|connection
init|=
operator|(
name|Connection
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
comment|// continue with rollback even if an exception was thrown before
name|connection
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
comment|// stores last exception
comment|// TODO: chain exceptions...
name|deferredException
operator|=
name|th
expr_stmt|;
block|}
block|}
if|if
condition|(
name|deferredException
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|deferredException
operator|instanceof
name|SQLException
condition|)
block|{
throw|throw
operator|(
name|SQLException
operator|)
name|deferredException
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|CayenneException
argument_list|(
name|deferredException
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

