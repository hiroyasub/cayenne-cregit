begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|RemoteSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A {@link org.apache.cayenne.remote.RemoteService} implementation that stores  * server context information in HTTP sessions.  *   * @since 1.2  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|HttpRemoteService
extends|extends
name|BaseRemoteService
block|{
specifier|static
specifier|final
name|String
name|SESSION_ATTRIBUTE
init|=
literal|"HttpRemoteService.ServerSession"
decl_stmt|;
comment|// keep logger non-static so that it could be garbage collected with this instance..
specifier|private
specifier|final
name|Log
name|logObj
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HttpRemoteService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Map
name|sharedChannels
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|/**      * Returns an HttpSession associated with the current request in progress.      */
specifier|protected
specifier|abstract
name|HttpSession
name|getSession
parameter_list|(
name|boolean
name|create
parameter_list|)
function_decl|;
comment|/**      * Returns a ServerSession object that represents Cayenne-related state associated      * with the current session. If ServerSession hasn't been previously saved, returns      * null.      */
annotation|@
name|Override
specifier|protected
name|ServerSession
name|getServerSession
parameter_list|()
block|{
name|HttpSession
name|httpSession
init|=
name|getSession
argument_list|(
literal|true
argument_list|)
decl_stmt|;
return|return
operator|(
name|ServerSession
operator|)
name|httpSession
operator|.
name|getAttribute
argument_list|(
name|SESSION_ATTRIBUTE
argument_list|)
return|;
block|}
comment|/**      * Creates a new ServerSession with a dedicated DataChannel. Returned ServerSession is      * stored in HttpSession for future reuse.      */
annotation|@
name|Override
specifier|protected
name|ServerSession
name|createServerSession
parameter_list|()
block|{
name|HttpSession
name|httpSession
init|=
name|getSession
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|DataChannel
name|channel
init|=
name|createChannel
argument_list|()
decl_stmt|;
name|RemoteSession
name|remoteSession
init|=
name|createRemoteSession
argument_list|(
name|httpSession
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ServerSession
name|serverSession
init|=
operator|new
name|ServerSession
argument_list|(
name|remoteSession
argument_list|,
name|channel
argument_list|)
decl_stmt|;
name|httpSession
operator|.
name|setAttribute
argument_list|(
name|SESSION_ATTRIBUTE
argument_list|,
name|serverSession
argument_list|)
expr_stmt|;
return|return
name|serverSession
return|;
block|}
comment|/**      * Creates a new ServerSession based on a shared DataChannel. Returned ServerSession      * is stored in HttpSession for future reuse.      *       * @param name shared session name used to lookup a shared DataChannel.      */
annotation|@
name|Override
specifier|protected
name|ServerSession
name|createServerSession
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Name is null for shared session."
argument_list|)
throw|;
block|}
name|HttpSession
name|httpSession
init|=
name|getSession
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|DataChannel
name|channel
decl_stmt|;
synchronized|synchronized
init|(
name|sharedChannels
init|)
block|{
name|channel
operator|=
name|getSharedChannel
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|channel
operator|==
literal|null
condition|)
block|{
name|channel
operator|=
name|createChannel
argument_list|()
expr_stmt|;
name|saveSharedChannel
argument_list|(
name|name
argument_list|,
name|channel
argument_list|)
expr_stmt|;
name|logObj
operator|.
name|debug
argument_list|(
literal|"Starting a new shared channel: "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logObj
operator|.
name|debug
argument_list|(
literal|"Joining existing shared channel: "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|RemoteSession
name|remoteSession
init|=
name|createRemoteSession
argument_list|(
name|httpSession
operator|.
name|getId
argument_list|()
argument_list|,
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ServerSession
name|serverSession
init|=
operator|new
name|ServerSession
argument_list|(
name|remoteSession
argument_list|,
name|channel
argument_list|)
decl_stmt|;
name|httpSession
operator|.
name|setAttribute
argument_list|(
name|SESSION_ATTRIBUTE
argument_list|,
name|serverSession
argument_list|)
expr_stmt|;
return|return
name|serverSession
return|;
block|}
specifier|protected
name|DataChannel
name|getSharedChannel
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|WeakReference
name|ref
init|=
operator|(
name|WeakReference
operator|)
name|sharedChannels
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
operator|(
name|ref
operator|!=
literal|null
operator|)
condition|?
operator|(
name|DataChannel
operator|)
name|ref
operator|.
name|get
argument_list|()
else|:
literal|null
return|;
block|}
specifier|protected
name|void
name|saveSharedChannel
parameter_list|(
name|String
name|name
parameter_list|,
name|DataChannel
name|channel
parameter_list|)
block|{
comment|// wrap value in a WeakReference so that channels can be deallocated when all
comment|// sessions that reference this channel time out...
name|sharedChannels
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|WeakReference
argument_list|(
name|channel
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

