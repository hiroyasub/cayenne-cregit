begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|ToStringBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLSerializable
import|;
end_import

begin_comment
comment|/**  * Defines a join between two attributes of a given relationship.  *   * @since 1.1  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|DbJoin
implements|implements
name|XMLSerializable
implements|,
name|Serializable
block|{
specifier|protected
name|DbRelationship
name|relationship
decl_stmt|;
specifier|protected
name|String
name|sourceName
decl_stmt|;
specifier|protected
name|String
name|targetName
decl_stmt|;
specifier|protected
name|DbJoin
parameter_list|()
block|{
block|}
specifier|public
name|DbJoin
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|)
block|{
name|this
operator|.
name|relationship
operator|=
name|relationship
expr_stmt|;
block|}
specifier|public
name|DbJoin
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|,
name|String
name|sourceName
parameter_list|,
name|String
name|targetName
parameter_list|)
block|{
name|this
operator|.
name|relationship
operator|=
name|relationship
expr_stmt|;
name|this
operator|.
name|sourceName
operator|=
name|sourceName
expr_stmt|;
name|this
operator|.
name|targetName
operator|=
name|targetName
expr_stmt|;
block|}
comment|/**      * Returns a "reverse" join. Join source relationship is not set and must be      * initialized by the caller.      */
specifier|public
name|DbJoin
name|createReverseJoin
parameter_list|()
block|{
name|DbJoin
name|reverse
init|=
operator|new
name|DbJoin
argument_list|()
decl_stmt|;
name|reverse
operator|.
name|setTargetName
argument_list|(
name|sourceName
argument_list|)
expr_stmt|;
name|reverse
operator|.
name|setSourceName
argument_list|(
name|targetName
argument_list|)
expr_stmt|;
return|return
name|reverse
return|;
block|}
comment|/**      * Returns DbAttribute on on the left side of the join.      */
specifier|public
name|DbAttribute
name|getSource
parameter_list|()
block|{
if|if
condition|(
name|sourceName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Relationship
name|r
init|=
name|getNonNullRelationship
argument_list|()
decl_stmt|;
name|Entity
name|entity
init|=
name|r
operator|.
name|getSourceEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|DbAttribute
operator|)
name|entity
operator|.
name|getAttribute
argument_list|(
name|sourceName
argument_list|)
return|;
block|}
specifier|public
name|DbAttribute
name|getTarget
parameter_list|()
block|{
if|if
condition|(
name|targetName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Relationship
name|r
init|=
name|getNonNullRelationship
argument_list|()
decl_stmt|;
name|Entity
name|entity
init|=
name|r
operator|.
name|getTargetEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|DbAttribute
operator|)
name|entity
operator|.
name|getAttribute
argument_list|(
name|targetName
argument_list|)
return|;
block|}
comment|/**      * Prints itself as XML to the provided XMLEncoder.      */
specifier|public
name|void
name|encodeAsXML
parameter_list|(
name|XMLEncoder
name|encoder
parameter_list|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"<db-attribute-pair"
argument_list|)
expr_stmt|;
comment|// sanity check
if|if
condition|(
name|getSourceName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|" source=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|getSourceName
argument_list|()
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getTargetName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|" target=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|getTargetName
argument_list|()
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|encoder
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DbRelationship
name|getRelationship
parameter_list|()
block|{
return|return
name|relationship
return|;
block|}
specifier|public
name|String
name|getSourceName
parameter_list|()
block|{
return|return
name|sourceName
return|;
block|}
specifier|public
name|String
name|getTargetName
parameter_list|()
block|{
return|return
name|targetName
return|;
block|}
specifier|public
name|void
name|setRelationship
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|)
block|{
name|this
operator|.
name|relationship
operator|=
name|relationship
expr_stmt|;
block|}
specifier|public
name|void
name|setSourceName
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|sourceName
operator|=
name|string
expr_stmt|;
block|}
specifier|public
name|void
name|setTargetName
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|targetName
operator|=
name|string
expr_stmt|;
block|}
specifier|private
specifier|final
name|DbRelationship
name|getNonNullRelationship
parameter_list|()
block|{
if|if
condition|(
name|relationship
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Join has no parent Relationship."
argument_list|)
throw|;
block|}
return|return
name|relationship
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|ToStringBuilder
name|builder
init|=
operator|new
name|ToStringBuilder
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"source"
argument_list|,
name|getSourceName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"target"
argument_list|,
name|getTargetName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

