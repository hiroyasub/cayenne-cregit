begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|art
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataObjectUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|frontbase
operator|.
name|FrontBaseAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|openbase
operator|.
name|OpenBaseAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|intercept
operator|.
name|DataChannelDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_class
specifier|public
class|class
name|DataContextDecoratedStackTest
extends|extends
name|CayenneCase
block|{
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteTestData
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testCommitDecorated
parameter_list|()
block|{
name|DataDomain
name|dd
init|=
name|getDomain
argument_list|()
decl_stmt|;
name|DataChannel
name|decorator
init|=
operator|new
name|DataChannelDecorator
argument_list|(
name|dd
argument_list|)
decl_stmt|;
name|DataContext
name|context
init|=
operator|new
name|DataContext
argument_list|(
name|decorator
argument_list|,
operator|new
name|ObjectStore
argument_list|(
name|dd
operator|.
name|getSharedSnapshotCache
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Artist
name|a
init|=
operator|(
name|Artist
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a
operator|.
name|setArtistName
argument_list|(
literal|"XXX"
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|SQLTemplate
name|query
init|=
operator|new
name|SQLTemplate
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
literal|"select #result('count(1)' 'int' 'x') from ARTIST"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setFetchingDataRows
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|query
operator|.
name|setTemplate
argument_list|(
name|FrontBaseAdapter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"select #result('COUNT(ARTIST_ID)' 'int' 'x') from ARTIST"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setTemplate
argument_list|(
name|OpenBaseAdapter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"select #result('COUNT(ARTIST_ID)' 'int' 'x') from ARTIST"
argument_list|)
expr_stmt|;
name|Map
name|count
init|=
operator|(
name|Map
operator|)
name|DataObjectUtils
operator|.
name|objectForQuery
argument_list|(
name|context
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|,
name|count
operator|.
name|get
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetParentDataDomain
parameter_list|()
block|{
name|DataDomain
name|dd
init|=
name|getDomain
argument_list|()
decl_stmt|;
name|DataChannel
name|decorator
init|=
operator|new
name|DataChannelDecorator
argument_list|(
name|dd
argument_list|)
decl_stmt|;
name|DataContext
name|context
init|=
operator|new
name|DataContext
argument_list|(
name|decorator
argument_list|,
operator|new
name|ObjectStore
argument_list|(
name|dd
operator|.
name|getSharedSnapshotCache
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|dd
argument_list|,
name|context
operator|.
name|getParentDataDomain
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

