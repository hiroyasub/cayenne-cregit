begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|ClientServerChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|ClientChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|service
operator|.
name|LocalConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|mt
operator|.
name|ClientMtDeleteCascade
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|mt
operator|.
name|ClientMtDeleteDeny
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|mt
operator|.
name|ClientMtDeleteNullify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|mt
operator|.
name|ClientMtDeleteRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|AccessStack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneResources
import|;
end_import

begin_class
specifier|public
class|class
name|CayenneContextDeleteRulesTest
extends|extends
name|CayenneCase
block|{
specifier|protected
name|AccessStack
name|buildAccessStack
parameter_list|()
block|{
return|return
name|CayenneResources
operator|.
name|getResources
argument_list|()
operator|.
name|getAccessStack
argument_list|(
name|MULTI_TIER_ACCESS_STACK
argument_list|)
return|;
block|}
specifier|private
name|CayenneContext
name|createClientContext
parameter_list|()
block|{
name|ClientServerChannel
name|serverChannel
init|=
operator|new
name|ClientServerChannel
argument_list|(
name|getDomain
argument_list|()
argument_list|)
decl_stmt|;
name|LocalConnection
name|connection
init|=
operator|new
name|LocalConnection
argument_list|(
name|serverChannel
argument_list|)
decl_stmt|;
name|ClientChannel
name|clientChannel
init|=
operator|new
name|ClientChannel
argument_list|(
name|connection
argument_list|)
decl_stmt|;
return|return
operator|new
name|CayenneContext
argument_list|(
name|clientChannel
argument_list|)
return|;
block|}
specifier|public
name|void
name|testNullifyToOne
parameter_list|()
block|{
name|CayenneContext
name|context
init|=
name|createClientContext
argument_list|()
decl_stmt|;
name|ClientMtDeleteNullify
name|object
init|=
operator|(
name|ClientMtDeleteNullify
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|ClientMtDeleteNullify
operator|.
name|class
argument_list|)
decl_stmt|;
name|object
operator|.
name|setName
argument_list|(
literal|"object"
argument_list|)
expr_stmt|;
name|ClientMtDeleteRule
name|related
init|=
operator|(
name|ClientMtDeleteRule
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|ClientMtDeleteRule
operator|.
name|class
argument_list|)
decl_stmt|;
name|object
operator|.
name|setName
argument_list|(
literal|"related"
argument_list|)
expr_stmt|;
name|object
operator|.
name|setNullify
argument_list|(
name|related
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|context
operator|.
name|deleteObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|related
operator|.
name|getFromNullify
argument_list|()
operator|.
name|contains
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|object
operator|.
name|getNullify
argument_list|()
argument_list|)
expr_stmt|;
comment|// And be sure that the commit works afterwards, just for sanity
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testDenyToOne
parameter_list|()
block|{
name|CayenneContext
name|context
init|=
name|createClientContext
argument_list|()
decl_stmt|;
name|ClientMtDeleteDeny
name|object
init|=
operator|(
name|ClientMtDeleteDeny
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|ClientMtDeleteDeny
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClientMtDeleteRule
name|related
init|=
operator|(
name|ClientMtDeleteRule
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|ClientMtDeleteRule
operator|.
name|class
argument_list|)
decl_stmt|;
name|object
operator|.
name|setDeny
argument_list|(
name|related
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
try|try
block|{
name|context
operator|.
name|deleteObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeleteDenyException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|object
operator|.
name|setDeny
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|context
operator|.
name|deleteObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testCascadeToOne
parameter_list|()
block|{
name|CayenneContext
name|context
init|=
name|createClientContext
argument_list|()
decl_stmt|;
name|ClientMtDeleteCascade
name|object
init|=
operator|(
name|ClientMtDeleteCascade
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|ClientMtDeleteCascade
operator|.
name|class
argument_list|)
decl_stmt|;
name|object
operator|.
name|setName
argument_list|(
literal|"object"
argument_list|)
expr_stmt|;
name|ClientMtDeleteRule
name|related
init|=
operator|(
name|ClientMtDeleteRule
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|ClientMtDeleteRule
operator|.
name|class
argument_list|)
decl_stmt|;
name|object
operator|.
name|setName
argument_list|(
literal|"related"
argument_list|)
expr_stmt|;
name|object
operator|.
name|setCascade
argument_list|(
name|related
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|context
operator|.
name|deleteObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|DELETED
argument_list|,
name|related
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|deletedObjects
argument_list|()
operator|.
name|contains
argument_list|(
name|related
argument_list|)
argument_list|)
expr_stmt|;
comment|// And be sure that the commit works afterwards, just for sanity
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testCascadeToOneNewObject
parameter_list|()
block|{
name|CayenneContext
name|context
init|=
name|createClientContext
argument_list|()
decl_stmt|;
name|ClientMtDeleteRule
name|related
init|=
operator|(
name|ClientMtDeleteRule
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|ClientMtDeleteRule
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ClientMtDeleteCascade
name|object
init|=
operator|(
name|ClientMtDeleteCascade
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|ClientMtDeleteCascade
operator|.
name|class
argument_list|)
decl_stmt|;
name|object
operator|.
name|setName
argument_list|(
literal|"object"
argument_list|)
expr_stmt|;
name|object
operator|.
name|setCascade
argument_list|(
name|related
argument_list|)
expr_stmt|;
name|context
operator|.
name|deleteObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|TRANSIENT
argument_list|,
name|object
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|DELETED
argument_list|,
name|related
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|deletedObjects
argument_list|()
operator|.
name|contains
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|deletedObjects
argument_list|()
operator|.
name|contains
argument_list|(
name|related
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

