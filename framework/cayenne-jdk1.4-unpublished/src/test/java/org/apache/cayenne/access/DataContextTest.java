begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|art
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|art
operator|.
name|ArtistAssets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|art
operator|.
name|Exhibit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|art
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|art
operator|.
name|ROArtist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistenceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conn
operator|.
name|PoolManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectIdQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_class
specifier|public
class|class
name|DataContextTest
extends|extends
name|DataContextCase
block|{
specifier|protected
name|MockOperationObserver
name|opObserver
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|opObserver
operator|=
operator|new
name|MockOperationObserver
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testCurrentSnapshot1
parameter_list|()
throws|throws
name|Exception
block|{
name|Artist
name|artist
init|=
name|fetchArtist
argument_list|(
literal|"artist1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
name|snapshot
init|=
name|context
operator|.
name|currentSnapshot
argument_list|(
name|artist
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|artist
operator|.
name|getArtistName
argument_list|()
argument_list|,
name|snapshot
operator|.
name|get
argument_list|(
literal|"ARTIST_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artist
operator|.
name|getDateOfBirth
argument_list|()
argument_list|,
name|snapshot
operator|.
name|get
argument_list|(
literal|"DATE_OF_BIRTH"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCurrentSnapshot2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test null values
name|Artist
name|artist
init|=
name|fetchArtist
argument_list|(
literal|"artist1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|artist
operator|.
name|setArtistName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|artist
operator|.
name|setDateOfBirth
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Map
name|snapshot
init|=
name|context
operator|.
name|currentSnapshot
argument_list|(
name|artist
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|snapshot
operator|.
name|containsKey
argument_list|(
literal|"ARTIST_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|snapshot
operator|.
name|get
argument_list|(
literal|"ARTIST_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|snapshot
operator|.
name|containsKey
argument_list|(
literal|"DATE_OF_BIRTH"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|snapshot
operator|.
name|get
argument_list|(
literal|"DATE_OF_BIRTH"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCurrentSnapshot3
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test FK relationship snapshotting
name|Artist
name|a1
init|=
name|fetchArtist
argument_list|(
literal|"artist1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Painting
name|p1
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|context
operator|.
name|registerNewObject
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setToArtist
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|Map
name|s1
init|=
name|context
operator|.
name|currentSnapshot
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|Map
name|idMap
init|=
name|a1
operator|.
name|getObjectId
argument_list|()
operator|.
name|getIdSnapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|idMap
operator|.
name|get
argument_list|(
literal|"ARTIST_ID"
argument_list|)
argument_list|,
name|s1
operator|.
name|get
argument_list|(
literal|"ARTIST_ID"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Testing snapshot with to-one fault. This was a bug CAY-96.      */
specifier|public
name|void
name|testCurrentSnapshotWithToOneFault
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Exhibit with Gallery as Fault must still include Gallery
comment|// Artist and Exhibit (Exhibit has unresolved to-one to gallery as in the
comment|// CAY-96 bug report)
comment|// first prepare test fixture
name|createTestData
argument_list|(
literal|"testGalleries"
argument_list|)
expr_stmt|;
name|populateExhibits
argument_list|()
expr_stmt|;
name|ObjectId
name|eId
init|=
operator|new
name|ObjectId
argument_list|(
literal|"Exhibit"
argument_list|,
name|Exhibit
operator|.
name|EXHIBIT_ID_PK_COLUMN
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Exhibit
name|e
init|=
operator|(
name|Exhibit
operator|)
name|context
operator|.
name|performQuery
argument_list|(
operator|new
name|ObjectIdQuery
argument_list|(
name|eId
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|readPropertyDirectly
argument_list|(
name|Exhibit
operator|.
name|TO_GALLERY_PROPERTY
argument_list|)
operator|instanceof
name|Fault
argument_list|)
expr_stmt|;
name|DataRow
name|snapshot
init|=
name|context
operator|.
name|currentSnapshot
argument_list|(
name|e
argument_list|)
decl_stmt|;
comment|// assert that after taking a snapshot, we have FK in, but the relationship
comment|// is still a Fault
name|assertTrue
argument_list|(
name|e
operator|.
name|readPropertyDirectly
argument_list|(
name|Exhibit
operator|.
name|TO_GALLERY_PROPERTY
argument_list|)
operator|instanceof
name|Fault
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|33002
argument_list|)
argument_list|,
name|snapshot
operator|.
name|get
argument_list|(
literal|"GALLERY_ID"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests how CHAR field is handled during fetch. Some databases (Oracle...) would pad      * a CHAR column with extra spaces, returned to the client. Cayenne should trim it.      */
specifier|public
name|void
name|testCharFetch
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
name|List
name|artists
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|Artist
name|a
init|=
operator|(
name|Artist
operator|)
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|getArtistName
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|a
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests how CHAR field is handled during fetch in the WHERE clause. Some databases      * (Oracle...) would pad a CHAR column with extra spaces, returned to the client.      * Cayenne should trim it.      */
specifier|public
name|void
name|testCharInQualifier
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist1"
argument_list|)
decl_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
literal|"Artist"
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|List
name|artists
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test fetching query with multiple relationship paths between the same 2 entities      * used in qualifier.      */
specifier|public
name|void
name|testMultiObjRelFetch
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestData
argument_list|(
literal|"testPaintings"
argument_list|)
expr_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
literal|"Painting"
argument_list|)
decl_stmt|;
name|q
operator|.
name|andQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"toArtist.artistName"
argument_list|,
literal|"artist2"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|orQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"toArtist.artistName"
argument_list|,
literal|"artist4"
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test fetching query with multiple relationship paths between the same 2 entities      * used in qualifier.      */
specifier|public
name|void
name|testMultiDbRelFetch
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestData
argument_list|(
literal|"testPaintings"
argument_list|)
expr_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
literal|"Painting"
argument_list|)
decl_stmt|;
name|q
operator|.
name|andQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|matchDbExp
argument_list|(
literal|"toArtist.ARTIST_NAME"
argument_list|,
literal|"artist2"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|orQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|matchDbExp
argument_list|(
literal|"toArtist.ARTIST_NAME"
argument_list|,
literal|"artist4"
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test fetching a derived entity.      */
specifier|public
name|void
name|testDerivedEntityFetch1
parameter_list|()
throws|throws
name|Exception
block|{
comment|// some DBs don't support HAVING
if|if
condition|(
operator|!
name|getAccessStackAdapter
argument_list|()
operator|.
name|supportsHaving
argument_list|()
condition|)
block|{
return|return;
block|}
name|createTestData
argument_list|(
literal|"testPaintings"
argument_list|)
expr_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
literal|"ArtistAssets"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"estimatedPrice"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|1000d
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ArtistAssets
name|a1
init|=
operator|(
name|ArtistAssets
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|a1
operator|.
name|getPaintingsCount
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test fetching a derived entity with complex qualifier including relationships.      */
specifier|public
name|void
name|testDerivedEntityFetch2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// some DBs don't support HAVING
if|if
condition|(
operator|!
name|getAccessStackAdapter
argument_list|()
operator|.
name|supportsHaving
argument_list|()
condition|)
block|{
return|return;
block|}
name|createTestData
argument_list|(
literal|"testPaintings"
argument_list|)
expr_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
literal|"ArtistAssets"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setParentObjEntityName
argument_list|(
literal|"Painting"
argument_list|)
expr_stmt|;
name|q
operator|.
name|andQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"estimatedPrice"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|1000d
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|andParentQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"toArtist.artistName"
argument_list|,
literal|"artist1"
argument_list|)
argument_list|)
expr_stmt|;
name|ArtistAssets
name|a1
init|=
operator|(
name|ArtistAssets
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|a1
operator|.
name|getPaintingsCount
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectDate
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestData
argument_list|(
literal|"testGalleries"
argument_list|)
expr_stmt|;
name|populateExhibits
argument_list|()
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
operator|new
name|SelectQuery
argument_list|(
name|Exhibit
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|objects
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Exhibit
name|e1
init|=
operator|(
name|Exhibit
operator|)
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|java
operator|.
name|util
operator|.
name|Date
operator|.
name|class
argument_list|,
name|e1
operator|.
name|getClosingDate
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCaseInsensitiveOrdering
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|getAccessStackAdapter
argument_list|()
operator|.
name|supportsCaseInsensitiveOrder
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// case insensitive ordering appends extra columns
comment|// to the query when query is using DISTINCT...
comment|// verify that the result is not messaged up
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Ordering
name|ordering
init|=
operator|new
name|Ordering
argument_list|(
literal|"artistName"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ordering
operator|.
name|setCaseInsensitive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|query
operator|.
name|addOrdering
argument_list|(
name|ordering
argument_list|)
expr_stmt|;
name|query
operator|.
name|setDistinct
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|artistCount
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Artist
name|artist
init|=
operator|(
name|Artist
operator|)
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Map
name|snapshot
init|=
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getSnapshot
argument_list|(
name|artist
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|snapshot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPerformSelectQuery1
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|objects
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artistCount
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Artist expected, got "
operator|+
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|,
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Artist
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPerformSelectQuery2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// do a query with complex qualifier
name|List
name|expressions
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|expressions
operator|.
name|add
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist3"
argument_list|)
argument_list|)
expr_stmt|;
name|expressions
operator|.
name|add
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist5"
argument_list|)
argument_list|)
expr_stmt|;
name|expressions
operator|.
name|add
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist15"
argument_list|)
argument_list|)
expr_stmt|;
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
literal|"Artist"
argument_list|,
name|ExpressionFactory
operator|.
name|joinExp
argument_list|(
name|Expression
operator|.
name|OR
argument_list|,
name|expressions
argument_list|)
argument_list|)
decl_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|objects
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Artist expected, got "
operator|+
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|,
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Artist
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPerformQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|objects
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artistCount
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPerformNonSelectingQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectQuery
name|select
init|=
operator|new
name|SelectQuery
argument_list|(
name|Painting
operator|.
name|class
argument_list|,
name|Expression
operator|.
name|fromString
argument_list|(
literal|"db:PAINTING_ID = 1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|context
operator|.
name|performQuery
argument_list|(
name|select
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SQLTemplate
name|query
init|=
operator|new
name|SQLTemplate
argument_list|(
name|Painting
operator|.
name|class
argument_list|,
literal|"INSERT INTO PAINTING (PAINTING_ID, PAINTING_TITLE, ARTIST_ID, ESTIMATED_PRICE) "
operator|+
literal|"VALUES (1, 'PX', 33002, 1)"
argument_list|)
decl_stmt|;
name|context
operator|.
name|performNonSelectingQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|performQuery
argument_list|(
name|select
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPerformNonSelectingQueryCounts1
parameter_list|()
throws|throws
name|Exception
block|{
name|SQLTemplate
name|query
init|=
operator|new
name|SQLTemplate
argument_list|(
name|Painting
operator|.
name|class
argument_list|,
literal|"INSERT INTO PAINTING (PAINTING_ID, PAINTING_TITLE, ARTIST_ID, ESTIMATED_PRICE) "
operator|+
literal|"VALUES ($pid, '$pt', $aid, $price)"
argument_list|)
decl_stmt|;
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"pid"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"pt"
argument_list|,
literal|"P1"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"aid"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|33002
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"price"
argument_list|,
operator|new
name|Double
argument_list|(
literal|1.1
argument_list|)
argument_list|)
expr_stmt|;
comment|// single batch of parameters
name|query
operator|.
name|setParameters
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|int
index|[]
name|counts
init|=
name|context
operator|.
name|performNonSelectingQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|counts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counts
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPerformNonSelectingQueryCounts2
parameter_list|()
throws|throws
name|Exception
block|{
name|SQLTemplate
name|query
init|=
operator|new
name|SQLTemplate
argument_list|(
name|Painting
operator|.
name|class
argument_list|,
literal|"INSERT INTO PAINTING (PAINTING_ID, PAINTING_TITLE, ARTIST_ID, ESTIMATED_PRICE) "
operator|+
literal|"VALUES ($pid, '$pt', $aid, #bind($price 'DECIMAL' 2))"
argument_list|)
decl_stmt|;
name|Map
index|[]
name|maps
init|=
operator|new
name|Map
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maps
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|maps
index|[
name|i
index|]
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|maps
index|[
name|i
index|]
operator|.
name|put
argument_list|(
literal|"pid"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|maps
index|[
name|i
index|]
operator|.
name|put
argument_list|(
literal|"pt"
argument_list|,
literal|"P-"
operator|+
name|i
argument_list|)
expr_stmt|;
name|maps
index|[
name|i
index|]
operator|.
name|put
argument_list|(
literal|"aid"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|33002
argument_list|)
argument_list|)
expr_stmt|;
name|maps
index|[
name|i
index|]
operator|.
name|put
argument_list|(
literal|"price"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|"1."
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// single batch of parameters
name|query
operator|.
name|setParameters
argument_list|(
name|maps
argument_list|)
expr_stmt|;
name|int
index|[]
name|counts
init|=
name|context
operator|.
name|performNonSelectingQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|counts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maps
operator|.
name|length
argument_list|,
name|counts
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maps
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|SQLTemplate
name|delete
init|=
operator|new
name|SQLTemplate
argument_list|(
name|Painting
operator|.
name|class
argument_list|,
literal|"delete from PAINTING"
argument_list|)
decl_stmt|;
name|counts
operator|=
name|context
operator|.
name|performNonSelectingQuery
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|counts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counts
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|counts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPerformPaginatedQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setPageSize
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|objects
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|objects
operator|instanceof
name|IncrementalFaultList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|IncrementalFaultList
operator|)
name|objects
operator|)
operator|.
name|elements
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|IncrementalFaultList
operator|)
name|objects
operator|)
operator|.
name|elements
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Artist
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPerformPaginatedQueryBigPage
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setPageSize
argument_list|(
name|DataContextTest
operator|.
name|artistCount
operator|+
literal|2
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|objects
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|objects
operator|instanceof
name|IncrementalFaultList
argument_list|)
expr_stmt|;
name|blockQueries
argument_list|()
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|DataContextTest
operator|.
name|artistCount
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|unblockQueries
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testPerformDataRowQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setFetchingDataRows
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|objects
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artistCount
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Map expected, got "
operator|+
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|,
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCommitChangesRO1
parameter_list|()
throws|throws
name|Exception
block|{
name|ROArtist
name|a1
init|=
operator|(
name|ROArtist
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"ROArtist"
argument_list|)
decl_stmt|;
name|a1
operator|.
name|writePropertyDirectly
argument_list|(
literal|"artistName"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|a1
operator|.
name|setPersistenceState
argument_list|(
name|PersistenceState
operator|.
name|MODIFIED
argument_list|)
expr_stmt|;
try|try
block|{
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Inserting a 'read-only' object must fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// exception is expected,
comment|// must blow on saving new "read-only" object.
block|}
block|}
specifier|public
name|void
name|testCommitChangesRO2
parameter_list|()
throws|throws
name|Exception
block|{
name|ROArtist
name|a1
init|=
name|fetchROArtist
argument_list|(
literal|"artist1"
argument_list|)
decl_stmt|;
name|a1
operator|.
name|writeProperty
argument_list|(
literal|"artistName"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
try|try
block|{
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Updating a 'read-only' object must fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// exception is expected,
comment|// must blow on saving new "read-only" object.
block|}
block|}
specifier|public
name|void
name|testCommitChangesRO3
parameter_list|()
throws|throws
name|Exception
block|{
name|ROArtist
name|a1
init|=
name|fetchROArtist
argument_list|(
literal|"artist1"
argument_list|)
decl_stmt|;
name|context
operator|.
name|deleteObject
argument_list|(
name|a1
argument_list|)
expr_stmt|;
try|try
block|{
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Deleting a 'read-only' object must fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// exception is expected,
comment|// must blow on saving new "read-only" object.
block|}
block|}
specifier|public
name|void
name|testCommitChangesRO4
parameter_list|()
throws|throws
name|Exception
block|{
name|ROArtist
name|a1
init|=
name|fetchROArtist
argument_list|(
literal|"artist1"
argument_list|)
decl_stmt|;
name|Painting
name|painting
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Painting"
argument_list|)
decl_stmt|;
name|painting
operator|.
name|setPaintingTitle
argument_list|(
literal|"paint"
argument_list|)
expr_stmt|;
name|a1
operator|.
name|addToPaintingArray
argument_list|(
name|painting
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|MODIFIED
argument_list|,
name|a1
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Updating 'read-only' object's to-many must succeed, instead an exception was thrown: "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|a1
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPerformIteratedQuery1
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectQuery
name|q1
init|=
operator|new
name|SelectQuery
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
name|ResultIterator
name|it
init|=
name|context
operator|.
name|performIteratedQuery
argument_list|(
name|q1
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNextRow
argument_list|()
condition|)
block|{
name|it
operator|.
name|nextDataRow
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|DataContextTest
operator|.
name|artistCount
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|it
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testPerformIteratedQuery2
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestData
argument_list|(
literal|"testPaintings"
argument_list|)
expr_stmt|;
name|ResultIterator
name|it
init|=
name|context
operator|.
name|performIteratedQuery
argument_list|(
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
comment|// just for this test increase pool size
name|changeMaxConnections
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
name|it
operator|.
name|hasNextRow
argument_list|()
condition|)
block|{
name|DataRow
name|row
init|=
operator|(
name|DataRow
operator|)
name|it
operator|.
name|nextDataRow
argument_list|()
decl_stmt|;
comment|// try instantiating an object and fetching its relationships
name|Artist
name|artist
init|=
operator|(
name|Artist
operator|)
name|context
operator|.
name|objectFromDataRow
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|row
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
name|paintings
init|=
name|artist
operator|.
name|getPaintingArray
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|paintings
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected one painting for artist: "
operator|+
name|artist
argument_list|,
literal|1
argument_list|,
name|paintings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// change allowed connections back
name|changeMaxConnections
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|it
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|changeMaxConnections
parameter_list|(
name|int
name|delta
parameter_list|)
block|{
name|DataNode
name|node
init|=
operator|(
name|DataNode
operator|)
name|context
operator|.
name|getParentDataDomain
argument_list|()
operator|.
name|getDataNodes
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// access DS directly as 'getDataSource' returns a wrapper.
name|PoolManager
name|manager
init|=
operator|(
name|PoolManager
operator|)
name|node
operator|.
name|dataSource
decl_stmt|;
name|manager
operator|.
name|setMaxConnections
argument_list|(
name|manager
operator|.
name|getMaxConnections
argument_list|()
operator|+
name|delta
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that hasChanges performs correctly when an object is "modified" and the      * property is simply set to the same value (an unreal modification)      */
specifier|public
name|void
name|testHasChangesPhantom
parameter_list|()
block|{
name|String
name|artistName
init|=
literal|"ArtistName"
decl_stmt|;
name|Artist
name|artist
init|=
operator|(
name|Artist
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
name|artist
operator|.
name|setArtistName
argument_list|(
name|artistName
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// Set again to *exactly* the same value
name|artist
operator|.
name|setArtistName
argument_list|(
name|artistName
argument_list|)
expr_stmt|;
comment|// note that since 1.2 the polciy is for hasChanges to return true for phantom
comment|// modifications, as there is no way to detect some more subtle modifications like
comment|// a change of the master related object, until we actually create the PKs
name|assertTrue
argument_list|(
name|context
operator|.
name|hasChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that hasChanges performs correctly when an object is "modified" and the      * property is simply set to the same value (an unreal modification)      */
specifier|public
name|void
name|testHasChangesRealModify
parameter_list|()
block|{
name|Artist
name|artist
init|=
operator|(
name|Artist
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
name|artist
operator|.
name|setArtistName
argument_list|(
literal|"ArtistName"
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|artist
operator|.
name|setArtistName
argument_list|(
literal|"Something different"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|hasChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInvalidateObjects
parameter_list|()
throws|throws
name|Exception
block|{
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|DataRow
name|row
init|=
operator|new
name|DataRow
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"ARTIST_ID"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"ARTIST_NAME"
argument_list|,
literal|"ArtistXYZ"
argument_list|)
expr_stmt|;
name|row
operator|.
name|put
argument_list|(
literal|"DATE_OF_BIRTH"
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|DataObject
name|object
init|=
name|context
operator|.
name|objectFromDataRow
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|row
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ObjectId
name|oid
init|=
name|object
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
comment|// insert object into the ObjectStore
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|registerNode
argument_list|(
name|oid
argument_list|,
name|object
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|object
argument_list|,
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getNode
argument_list|(
name|oid
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|oid
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|invalidateObjects
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|oid
argument_list|,
name|object
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|oid
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|object
argument_list|,
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getNode
argument_list|(
name|oid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

