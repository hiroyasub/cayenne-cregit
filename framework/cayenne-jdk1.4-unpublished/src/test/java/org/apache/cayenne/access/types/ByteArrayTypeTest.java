begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_comment
comment|/**  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|ByteArrayTypeTest
extends|extends
name|CayenneCase
block|{
specifier|public
name|void
name|testTrimBytes1
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|b1
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|byte
index|[]
name|b2
init|=
name|ByteArrayType
operator|.
name|trimBytes
argument_list|(
name|b1
argument_list|)
decl_stmt|;
name|assertByteArraysEqual
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTrimBytes2
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|ref
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|byte
index|[]
name|b1
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|byte
index|[]
name|b2
init|=
name|ByteArrayType
operator|.
name|trimBytes
argument_list|(
name|b1
argument_list|)
decl_stmt|;
name|assertByteArraysEqual
argument_list|(
name|ref
argument_list|,
name|b2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTrimBytes3
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|b1
init|=
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|byte
index|[]
name|b2
init|=
name|ByteArrayType
operator|.
name|trimBytes
argument_list|(
name|b1
argument_list|)
decl_stmt|;
name|assertByteArraysEqual
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTrimBytes4
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|b1
init|=
operator|new
name|byte
index|[]
block|{}
decl_stmt|;
name|byte
index|[]
name|b2
init|=
name|ByteArrayType
operator|.
name|trimBytes
argument_list|(
name|b1
argument_list|)
decl_stmt|;
name|assertByteArraysEqual
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|assertByteArraysEqual
parameter_list|(
name|byte
index|[]
name|b1
parameter_list|,
name|byte
index|[]
name|b2
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|b1
operator|==
name|b2
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|b1
operator|==
literal|null
operator|&&
name|b2
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|b1
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"byte arrays differ (first one is null)"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|b2
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"byte arrays differ (second one is null)"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|b1
operator|.
name|length
operator|!=
name|b2
operator|.
name|length
condition|)
block|{
name|fail
argument_list|(
literal|"byte arrays differ (length differs: ["
operator|+
name|b1
operator|.
name|length
operator|+
literal|","
operator|+
name|b2
operator|.
name|length
operator|+
literal|"])"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|b1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|b1
index|[
name|i
index|]
operator|!=
name|b2
index|[
name|i
index|]
condition|)
block|{
name|fail
argument_list|(
literal|"byte arrays differ (at position "
operator|+
name|i
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

