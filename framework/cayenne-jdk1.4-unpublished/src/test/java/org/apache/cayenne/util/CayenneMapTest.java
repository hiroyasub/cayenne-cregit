begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * @author Andrus Adamchik  * @deprecated since 3.0  */
end_comment

begin_class
specifier|public
class|class
name|CayenneMapTest
extends|extends
name|TestCase
block|{
specifier|protected
name|CayenneMapEntry
name|makeEntry
parameter_list|()
block|{
return|return
operator|new
name|CayenneMapEntry
argument_list|()
block|{
specifier|protected
name|Object
name|parent
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"abc"
return|;
block|}
specifier|public
name|Object
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
specifier|public
name|void
name|setParent
parameter_list|(
name|Object
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|public
name|void
name|testConstructor1
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
name|o1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|String
name|k1
init|=
literal|"123"
decl_stmt|;
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|k1
argument_list|,
name|o1
argument_list|)
expr_stmt|;
name|CayenneMap
name|cm
init|=
operator|new
name|CayenneMap
argument_list|(
literal|null
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|o1
argument_list|,
name|cm
operator|.
name|get
argument_list|(
name|k1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConstructor2
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
name|parent
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CayenneMapEntry
name|o1
init|=
name|makeEntry
argument_list|()
decl_stmt|;
name|String
name|k1
init|=
literal|"123"
decl_stmt|;
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|k1
argument_list|,
name|o1
argument_list|)
expr_stmt|;
name|CayenneMap
name|cm
init|=
operator|new
name|CayenneMap
argument_list|(
name|parent
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|o1
argument_list|,
name|cm
operator|.
name|get
argument_list|(
name|k1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parent
argument_list|,
name|o1
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPut
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
name|parent
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CayenneMapEntry
name|o1
init|=
name|makeEntry
argument_list|()
decl_stmt|;
name|String
name|k1
init|=
literal|"123"
decl_stmt|;
name|CayenneMap
name|cm
init|=
operator|new
name|CayenneMap
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|cm
operator|.
name|put
argument_list|(
name|k1
argument_list|,
name|o1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|o1
argument_list|,
name|cm
operator|.
name|get
argument_list|(
name|k1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parent
argument_list|,
name|o1
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testParent
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
name|parent
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|CayenneMap
name|cm
init|=
operator|new
name|CayenneMap
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|cm
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parent
argument_list|,
name|cm
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSerializability
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|parent
init|=
literal|"abcde"
decl_stmt|;
name|CayenneMap
name|cm
init|=
operator|new
name|CayenneMap
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|CayenneMap
name|d1
init|=
operator|(
name|CayenneMap
operator|)
name|Util
operator|.
name|cloneViaSerialization
argument_list|(
name|cm
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|cm
argument_list|,
name|d1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parent
argument_list|,
name|d1
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|cm
operator|.
name|values
argument_list|()
expr_stmt|;
name|CayenneMap
name|d2
init|=
operator|(
name|CayenneMap
operator|)
name|Util
operator|.
name|cloneViaSerialization
argument_list|(
name|cm
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|cm
argument_list|,
name|d2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parent
argument_list|,
name|d2
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

