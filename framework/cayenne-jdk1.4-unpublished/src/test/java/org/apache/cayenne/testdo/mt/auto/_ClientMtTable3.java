begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|mt
operator|.
name|auto
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistentObject
import|;
end_import

begin_comment
comment|/**  * A generated persistent class mapped as "MtTable3" Cayenne entity. It is a good idea to  * avoid changing this class manually, since it will be overwritten next time code is  * regenerated. If you need to make any customizations, put them in a subclass.  */
end_comment

begin_class
specifier|public
class|class
name|_ClientMtTable3
extends|extends
name|PersistentObject
block|{
specifier|public
specifier|static
specifier|final
name|String
name|BINARY_COLUMN_PROPERTY
init|=
literal|"binaryColumn"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CHAR_COLUMN_PROPERTY
init|=
literal|"charColumn"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INT_COLUMN_PROPERTY
init|=
literal|"intColumn"
decl_stmt|;
specifier|protected
name|byte
index|[]
name|binaryColumn
decl_stmt|;
specifier|protected
name|String
name|charColumn
decl_stmt|;
specifier|protected
name|Integer
name|intColumn
decl_stmt|;
specifier|public
name|byte
index|[]
name|getBinaryColumn
parameter_list|()
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"binaryColumn"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|binaryColumn
return|;
block|}
specifier|public
name|void
name|setBinaryColumn
parameter_list|(
name|byte
index|[]
name|binaryColumn
parameter_list|)
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"binaryColumn"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Object
name|oldValue
init|=
name|this
operator|.
name|binaryColumn
decl_stmt|;
name|this
operator|.
name|binaryColumn
operator|=
name|binaryColumn
expr_stmt|;
comment|// notify objectContext about simple property change
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|propertyChanged
argument_list|(
name|this
argument_list|,
literal|"binaryColumn"
argument_list|,
name|oldValue
argument_list|,
name|binaryColumn
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getCharColumn
parameter_list|()
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"charColumn"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|charColumn
return|;
block|}
specifier|public
name|void
name|setCharColumn
parameter_list|(
name|String
name|charColumn
parameter_list|)
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"charColumn"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Object
name|oldValue
init|=
name|this
operator|.
name|charColumn
decl_stmt|;
name|this
operator|.
name|charColumn
operator|=
name|charColumn
expr_stmt|;
comment|// notify objectContext about simple property change
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|propertyChanged
argument_list|(
name|this
argument_list|,
literal|"charColumn"
argument_list|,
name|oldValue
argument_list|,
name|charColumn
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Integer
name|getIntColumn
parameter_list|()
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"intColumn"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|intColumn
return|;
block|}
specifier|public
name|void
name|setIntColumn
parameter_list|(
name|Integer
name|intColumn
parameter_list|)
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"intColumn"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Object
name|oldValue
init|=
name|this
operator|.
name|intColumn
decl_stmt|;
name|this
operator|.
name|intColumn
operator|=
name|intColumn
expr_stmt|;
comment|// notify objectContext about simple property change
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|propertyChanged
argument_list|(
name|this
argument_list|,
literal|"intColumn"
argument_list|,
name|oldValue
argument_list|,
name|intColumn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

