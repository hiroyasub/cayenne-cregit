begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLCompiledExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_class
specifier|public
class|class
name|EJBQLTranslatorTest
extends|extends
name|CayenneCase
block|{
specifier|public
name|void
name|testSelectFrom
parameter_list|()
block|{
name|EJBQLParser
name|parser
init|=
name|EJBQLParserFactory
operator|.
name|getParser
argument_list|()
decl_stmt|;
name|EJBQLCompiledExpression
name|select
init|=
name|parser
operator|.
name|compile
argument_list|(
literal|"select a from Artist a"
argument_list|,
name|getDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|EJBQLTranslator
name|tr
init|=
operator|new
name|EJBQLTranslator
argument_list|(
name|select
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|tr
operator|.
name|translate
argument_list|()
decl_stmt|;
comment|// System.out.println("Expression: " + select.getExpression());
comment|// System.out.println("SQL: " + sql);
comment|// column order is unpredictable, just need to ensure that they are all there
name|assertTrue
argument_list|(
name|sql
argument_list|,
name|sql
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
argument_list|,
name|sql
operator|.
name|indexOf
argument_list|(
literal|"t0.ARTIST_ID"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
argument_list|,
name|sql
operator|.
name|indexOf
argument_list|(
literal|"t0.ARTIST_NAME"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
argument_list|,
name|sql
operator|.
name|indexOf
argument_list|(
literal|"t0.DATE_OF_BIRTH"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
argument_list|,
name|sql
operator|.
name|endsWith
argument_list|(
literal|" FROM ARTIST t0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectDistinct
parameter_list|()
block|{
name|EJBQLParser
name|parser
init|=
name|EJBQLParserFactory
operator|.
name|getParser
argument_list|()
decl_stmt|;
name|EJBQLCompiledExpression
name|select
init|=
name|parser
operator|.
name|compile
argument_list|(
literal|"select distinct a from Artist a"
argument_list|,
name|getDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|EJBQLTranslator
name|tr
init|=
operator|new
name|EJBQLTranslator
argument_list|(
name|select
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|tr
operator|.
name|translate
argument_list|()
decl_stmt|;
comment|// System.out.println("Expression: " + select.getExpression());
comment|// System.out.println("SQL: " + sql);
name|assertTrue
argument_list|(
name|sql
argument_list|,
name|sql
operator|.
name|startsWith
argument_list|(
literal|"SELECT DISTINCT "
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
argument_list|,
name|sql
operator|.
name|endsWith
argument_list|(
literal|" FROM ARTIST t0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectFromWhereEqual
parameter_list|()
block|{
name|EJBQLParser
name|parser
init|=
name|EJBQLParserFactory
operator|.
name|getParser
argument_list|()
decl_stmt|;
name|EJBQLCompiledExpression
name|select
init|=
name|parser
operator|.
name|compile
argument_list|(
literal|"select a from Artist a where a.artistName = 'Dali'"
argument_list|,
name|getDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|EJBQLTranslator
name|tr
init|=
operator|new
name|EJBQLTranslator
argument_list|(
name|select
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|tr
operator|.
name|translate
argument_list|()
decl_stmt|;
comment|// System.out.println("Expression: " + select.getExpression());
comment|// System.out.println("SQL: " + sql);
name|assertTrue
argument_list|(
name|sql
argument_list|,
name|sql
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
comment|// assertTrue(sql, sql.endsWith(" FROM ARTIST t0 WHERE t0.ARTIST_NAME = ?"));
block|}
specifier|public
name|void
name|testSelectFromWhereOrEqual
parameter_list|()
block|{
name|EJBQLParser
name|parser
init|=
name|EJBQLParserFactory
operator|.
name|getParser
argument_list|()
decl_stmt|;
name|EJBQLCompiledExpression
name|select
init|=
name|parser
operator|.
name|compile
argument_list|(
literal|"select a from Artist a where a.artistName = 'Dali' or a.artistName = 'Malevich'"
argument_list|,
name|getDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|EJBQLTranslator
name|tr
init|=
operator|new
name|EJBQLTranslator
argument_list|(
name|select
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|tr
operator|.
name|translate
argument_list|()
decl_stmt|;
comment|// System.out.println("Expression: " + select.getExpression());
comment|// System.out.println("SQL: " + sql);
name|EJBQLCompiledExpression
name|select1
init|=
name|parser
operator|.
name|compile
argument_list|(
literal|"select a from Artist a where a.artistName = 'Dali' "
operator|+
literal|"or a.artistName = 'Malevich' "
operator|+
literal|"or a.artistName = 'Picasso'"
argument_list|,
name|getDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|EJBQLTranslator
name|tr1
init|=
operator|new
name|EJBQLTranslator
argument_list|(
name|select
argument_list|)
decl_stmt|;
name|String
name|sql1
init|=
name|tr1
operator|.
name|translate
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Expression: "
operator|+
name|select1
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SQL: "
operator|+
name|sql1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
argument_list|,
name|sql
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
argument_list|,
name|sql
operator|.
name|indexOf
argument_list|(
literal|" FROM ARTIST t0 WHERE "
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql1
argument_list|,
name|sql1
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql1
argument_list|,
name|sql1
operator|.
name|indexOf
argument_list|(
literal|" FROM ARTIST t0 WHERE "
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

