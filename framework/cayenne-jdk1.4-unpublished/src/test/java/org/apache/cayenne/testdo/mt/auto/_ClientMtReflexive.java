begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|mt
operator|.
name|auto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistentObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ValueHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|mt
operator|.
name|ClientMtReflexive
import|;
end_import

begin_comment
comment|/**  * A generated persistent class mapped as "MtReflexive" Cayenne entity. It is a good idea to  * avoid changing this class manually, since it will be overwritten next time code is  * regenerated. If you need to make any customizations, put them in a subclass.  */
end_comment

begin_class
specifier|public
class|class
name|_ClientMtReflexive
extends|extends
name|PersistentObject
block|{
specifier|public
specifier|static
specifier|final
name|String
name|NAME_PROPERTY
init|=
literal|"name"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CHILDREN_PROPERTY
init|=
literal|"children"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TO_PARENT_PROPERTY
init|=
literal|"toParent"
decl_stmt|;
specifier|protected
name|String
name|name
decl_stmt|;
specifier|protected
name|List
name|children
decl_stmt|;
specifier|protected
name|ValueHolder
name|toParent
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"name"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"name"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Object
name|oldValue
init|=
name|this
operator|.
name|name
decl_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
comment|// notify objectContext about simple property change
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|propertyChanged
argument_list|(
name|this
argument_list|,
literal|"name"
argument_list|,
name|oldValue
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
name|getChildren
parameter_list|()
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"children"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|children
return|;
block|}
specifier|public
name|void
name|addToChildren
parameter_list|(
name|ClientMtReflexive
name|object
parameter_list|)
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"children"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|children
operator|.
name|add
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeFromChildren
parameter_list|(
name|ClientMtReflexive
name|object
parameter_list|)
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"children"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|children
operator|.
name|remove
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ClientMtReflexive
name|getToParent
parameter_list|()
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"toParent"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ClientMtReflexive
operator|)
name|toParent
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|setToParent
parameter_list|(
name|ClientMtReflexive
name|toParent
parameter_list|)
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"toParent"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|toParent
operator|.
name|setValue
argument_list|(
name|toParent
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

