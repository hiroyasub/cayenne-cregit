begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dataview
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|MapFormat
extends|extends
name|Format
block|{
specifier|private
name|LinkedHashMap
name|formatMap
decl_stmt|;
specifier|private
name|Object
index|[]
name|values
decl_stmt|;
specifier|private
name|String
index|[]
name|formats
decl_stmt|;
specifier|private
name|String
name|entryDelimiter
init|=
literal|"|"
decl_stmt|;
specifier|private
name|String
name|valueFormatDelimiter
init|=
literal|"#"
decl_stmt|;
specifier|private
name|String
name|nullFormat
init|=
literal|""
decl_stmt|;
specifier|private
name|String
name|nullValueDesignation
init|=
literal|"null"
decl_stmt|;
specifier|public
name|MapFormat
parameter_list|()
block|{
block|}
specifier|public
name|MapFormat
parameter_list|(
name|String
name|pattern
parameter_list|,
name|Class
name|valueClass
parameter_list|)
block|{
name|applyPattern
argument_list|(
name|pattern
argument_list|,
name|valueClass
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MapFormat
parameter_list|(
name|Object
index|[]
name|values
parameter_list|,
name|String
index|[]
name|formats
parameter_list|)
block|{
name|setMap
argument_list|(
name|values
argument_list|,
name|formats
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setEntryDelimiter
parameter_list|(
name|char
name|delimiter
parameter_list|)
block|{
name|entryDelimiter
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|char
name|getEntryDelimiter
parameter_list|()
block|{
return|return
name|entryDelimiter
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
name|void
name|setValueFormatDelimiter
parameter_list|(
name|char
name|delimiter
parameter_list|)
block|{
name|valueFormatDelimiter
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|char
name|getValueFormatDelimiter
parameter_list|()
block|{
return|return
name|valueFormatDelimiter
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
name|void
name|setNullValueDesignation
parameter_list|(
name|String
name|nullValueDesignation
parameter_list|)
block|{
name|this
operator|.
name|nullValueDesignation
operator|=
name|nullValueDesignation
expr_stmt|;
block|}
specifier|public
name|String
name|getNullValueDesignation
parameter_list|()
block|{
return|return
name|nullValueDesignation
return|;
block|}
specifier|public
name|String
name|getNullFormat
parameter_list|()
block|{
return|return
name|nullFormat
return|;
block|}
specifier|public
name|void
name|setMap
parameter_list|(
name|Object
index|[]
name|values
parameter_list|,
name|String
index|[]
name|formats
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
operator|new
name|Object
index|[
name|values
operator|.
name|length
index|]
expr_stmt|;
name|this
operator|.
name|formats
operator|=
operator|new
name|String
index|[
name|formats
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|values
argument_list|,
literal|0
argument_list|,
name|formats
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|formats
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|formats
argument_list|,
literal|0
argument_list|,
name|formats
operator|.
name|length
argument_list|)
expr_stmt|;
name|formatMap
operator|=
operator|new
name|LinkedHashMap
argument_list|(
name|this
operator|.
name|values
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|this
operator|.
name|formats
index|[
name|i
index|]
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"format cannot be null: "
operator|+
name|values
index|[
name|i
index|]
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|values
index|[
name|i
index|]
operator|==
literal|null
condition|)
name|nullFormat
operator|=
name|this
operator|.
name|formats
index|[
name|i
index|]
expr_stmt|;
else|else
name|formatMap
operator|.
name|put
argument_list|(
name|this
operator|.
name|values
index|[
name|i
index|]
argument_list|,
name|this
operator|.
name|formats
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Object
index|[]
name|getValues
parameter_list|()
block|{
return|return
name|values
return|;
block|}
specifier|public
name|String
index|[]
name|getFormats
parameter_list|()
block|{
return|return
name|formats
return|;
block|}
specifier|public
name|void
name|applyPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|applyPattern
argument_list|(
name|pattern
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|applyPattern
parameter_list|(
name|String
name|pattern
parameter_list|,
name|Class
name|valueClass
parameter_list|)
block|{
name|formatMap
operator|=
operator|new
name|LinkedHashMap
argument_list|()
expr_stmt|;
name|Constructor
name|stringConstructor
decl_stmt|;
try|try
block|{
name|stringConstructor
operator|=
name|valueClass
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|valueClass
operator|+
literal|" has no String cunstructor"
argument_list|)
throw|;
block|}
name|StringTokenizer
name|parser
init|=
operator|new
name|StringTokenizer
argument_list|(
name|pattern
argument_list|,
name|entryDelimiter
argument_list|)
decl_stmt|;
name|ArrayList
name|valueList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|ArrayList
name|formatList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|parser
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|pair
init|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|delimIndex
init|=
name|pair
operator|.
name|indexOf
argument_list|(
name|valueFormatDelimiter
argument_list|)
decl_stmt|;
name|Object
name|value
decl_stmt|;
name|String
name|format
init|=
literal|""
decl_stmt|;
try|try
block|{
name|String
name|valueStr
decl_stmt|;
if|if
condition|(
name|delimIndex
operator|<
literal|0
operator|||
name|delimIndex
operator|>=
name|pair
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|valueStr
operator|=
name|pair
expr_stmt|;
block|}
else|else
block|{
name|valueStr
operator|=
name|pair
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|delimIndex
argument_list|)
expr_stmt|;
name|format
operator|=
name|pair
operator|.
name|substring
argument_list|(
name|delimIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nullValueDesignation
operator|.
name|equals
argument_list|(
name|valueStr
argument_list|)
condition|)
block|{
name|nullFormat
operator|=
name|format
expr_stmt|;
name|valueList
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|formatList
operator|.
name|add
argument_list|(
name|nullFormat
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|stringConstructor
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|valueStr
block|}
argument_list|)
expr_stmt|;
name|formatMap
operator|.
name|put
argument_list|(
name|value
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|valueList
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|formatList
operator|.
name|add
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|valueClass
operator|+
literal|" "
operator|+
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|valueClass
operator|+
literal|" "
operator|+
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|valueClass
operator|+
literal|" "
operator|+
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|pattern
operator|+
literal|" incorrect pattern: "
operator|+
name|pair
argument_list|)
throw|;
block|}
block|}
name|values
operator|=
name|valueList
operator|.
name|toArray
argument_list|()
expr_stmt|;
name|formats
operator|=
operator|(
name|String
index|[]
operator|)
name|formatList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|formatList
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|parseObject
parameter_list|(
name|String
name|text
parameter_list|,
name|ParsePosition
name|status
parameter_list|)
block|{
name|int
name|start
init|=
name|status
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|int
name|furthest
init|=
name|start
decl_stmt|;
name|Object
name|bestObject
init|=
literal|null
decl_stmt|;
name|Object
name|tempObject
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|formatMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|tempString
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|regionMatches
argument_list|(
name|start
argument_list|,
name|tempString
argument_list|,
literal|0
argument_list|,
name|tempString
operator|.
name|length
argument_list|()
argument_list|)
condition|)
block|{
name|status
operator|.
name|setIndex
argument_list|(
name|start
operator|+
name|tempString
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|tempObject
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|getIndex
argument_list|()
operator|>
name|furthest
condition|)
block|{
name|furthest
operator|=
name|status
operator|.
name|getIndex
argument_list|()
expr_stmt|;
name|bestObject
operator|=
name|tempObject
expr_stmt|;
if|if
condition|(
name|furthest
operator|==
name|text
operator|.
name|length
argument_list|()
condition|)
break|break;
block|}
block|}
block|}
if|if
condition|(
name|nullFormat
operator|!=
literal|null
operator|&&
name|text
operator|.
name|regionMatches
argument_list|(
name|start
argument_list|,
name|nullFormat
argument_list|,
literal|0
argument_list|,
name|nullFormat
operator|.
name|length
argument_list|()
argument_list|)
condition|)
block|{
name|status
operator|.
name|setIndex
argument_list|(
name|start
operator|+
name|nullFormat
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|getIndex
argument_list|()
operator|>
name|furthest
condition|)
block|{
name|furthest
operator|=
name|status
operator|.
name|getIndex
argument_list|()
expr_stmt|;
name|bestObject
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|status
operator|.
name|setIndex
argument_list|(
name|furthest
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|getIndex
argument_list|()
operator|==
name|start
condition|)
block|{
name|status
operator|.
name|setErrorIndex
argument_list|(
name|furthest
argument_list|)
expr_stmt|;
block|}
return|return
name|bestObject
return|;
block|}
specifier|public
name|StringBuffer
name|format
parameter_list|(
name|Object
name|obj
parameter_list|,
name|StringBuffer
name|toAppendTo
parameter_list|,
name|FieldPosition
name|pos
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|nullFormat
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"object to format cannot be null"
argument_list|)
throw|;
else|else
return|return
name|toAppendTo
operator|.
name|append
argument_list|(
name|nullFormat
argument_list|)
return|;
block|}
name|String
name|formatStr
init|=
operator|(
name|String
operator|)
name|formatMap
operator|.
name|get
argument_list|(
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatStr
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot format the object "
operator|+
name|obj
argument_list|)
throw|;
name|toAppendTo
operator|.
name|append
argument_list|(
name|formatStr
argument_list|)
expr_stmt|;
return|return
name|toAppendTo
return|;
block|}
specifier|public
name|String
name|toPattern
parameter_list|()
block|{
name|StringBuffer
name|pattern
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|notFirst
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|formatMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|notFirst
condition|)
block|{
name|pattern
operator|.
name|append
argument_list|(
name|entryDelimiter
argument_list|)
expr_stmt|;
block|}
else|else
name|notFirst
operator|=
literal|true
expr_stmt|;
name|pattern
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|valueFormatDelimiter
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nullValueDesignation
operator|!=
literal|null
operator|&&
name|nullFormat
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|notFirst
condition|)
name|pattern
operator|.
name|append
argument_list|(
name|entryDelimiter
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|append
argument_list|(
name|nullValueDesignation
argument_list|)
operator|.
name|append
argument_list|(
name|valueFormatDelimiter
argument_list|)
operator|.
name|append
argument_list|(
name|nullFormat
argument_list|)
expr_stmt|;
block|}
return|return
name|pattern
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

