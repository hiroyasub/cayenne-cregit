begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|validator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_comment
comment|/**  * Defines a set of rules for validating java and db mapping identifiers.  *   * @author Andrus Adamchik  * @since 1.1  */
end_comment

begin_class
specifier|public
class|class
name|MappingNamesHelper
block|{
comment|// TODO: used by StringUtils and ClassGenerationInfo... need to refactor..
specifier|static
specifier|final
name|Collection
name|RESERVED_JAVA_KEYWORDS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"abstract"
block|,
literal|"assert"
block|,
literal|"default"
block|,
literal|"if"
block|,
literal|"private"
block|,
literal|"this"
block|,
literal|"boolean"
block|,
literal|"do"
block|,
literal|"implements"
block|,
literal|"protected"
block|,
literal|"throw"
block|,
literal|"break"
block|,
literal|"double"
block|,
literal|"import"
block|,
literal|"public"
block|,
literal|"throws"
block|,
literal|"byte"
block|,
literal|"else"
block|,
literal|"instanceof"
block|,
literal|"return"
block|,
literal|"transient"
block|,
literal|"case"
block|,
literal|"extends"
block|,
literal|"int"
block|,
literal|"short"
block|,
literal|"try"
block|,
literal|"catch"
block|,
literal|"final"
block|,
literal|"interface"
block|,
literal|"static"
block|,
literal|"void"
block|,
literal|"char"
block|,
literal|"finally"
block|,
literal|"long"
block|,
literal|"strictfp"
block|,
literal|"volatile"
block|,
literal|"class"
block|,
literal|"float"
block|,
literal|"native"
block|,
literal|"super"
block|,
literal|"while"
block|,
literal|"const"
block|,
literal|"for"
block|,
literal|"new"
block|,
literal|"switch"
block|,
literal|"continue"
block|,
literal|"goto"
block|,
literal|"package"
block|,
literal|"synchronized"
block|}
argument_list|)
decl_stmt|;
specifier|public
name|boolean
name|isReservedJavaKeyword
parameter_list|(
name|String
name|word
parameter_list|)
block|{
return|return
name|RESERVED_JAVA_KEYWORDS
operator|.
name|contains
argument_list|(
name|word
argument_list|)
return|;
block|}
comment|// a property is considered invalid if there is a getter or a setter for it in
comment|// java.lang.Object or CayenneDataObject
specifier|static
specifier|final
name|Collection
name|INVALID_JAVA_PROPERTIES
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"class"
block|,
literal|"committedSnapshot"
block|,
literal|"currentSnapshot"
block|,
literal|"dataContext"
block|,
literal|"objectId"
block|,
literal|"persistenceState"
block|,
literal|"snapshotVersion"
block|}
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MappingNamesHelper
name|sharedInstance
init|=
operator|new
name|MappingNamesHelper
argument_list|()
decl_stmt|;
comment|/**      * Returns shared instance of the validator.      */
specifier|public
specifier|static
name|MappingNamesHelper
name|getInstance
parameter_list|()
block|{
return|return
name|sharedInstance
return|;
block|}
comment|/**      * This is more of a sanity check than a real validation. As different DBs allow      * different chars in identifiers, here we simply check for dots.      */
name|String
name|invalidCharsInDbPathComponent
parameter_list|(
name|String
name|dbPathComponent
parameter_list|)
block|{
return|return
operator|(
name|dbPathComponent
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
operator|)
condition|?
literal|"."
else|:
literal|null
return|;
block|}
comment|/**      * Scans a name of ObjAttribute or ObjRelationship for invalid characters.      */
name|String
name|invalidCharsInObjPathComponent
parameter_list|(
name|String
name|objPathComponent
parameter_list|)
block|{
name|String
name|invalidChars
init|=
name|validateJavaIdentifier
argument_list|(
name|objPathComponent
argument_list|,
literal|""
argument_list|)
decl_stmt|;
return|return
operator|(
name|invalidChars
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|?
name|invalidChars
else|:
literal|null
return|;
block|}
name|String
name|invalidCharsInJavaClassName
parameter_list|(
name|String
name|javaClassName
parameter_list|)
block|{
if|if
condition|(
name|javaClassName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|invalidChars
init|=
literal|""
decl_stmt|;
name|StringTokenizer
name|toks
init|=
operator|new
name|StringTokenizer
argument_list|(
name|javaClassName
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
while|while
condition|(
name|toks
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|invalidChars
operator|=
name|validateJavaIdentifier
argument_list|(
name|toks
operator|.
name|nextToken
argument_list|()
argument_list|,
name|invalidChars
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|invalidChars
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|?
name|invalidChars
else|:
literal|null
return|;
block|}
name|boolean
name|invalidDataObjectClass
parameter_list|(
name|String
name|dataObjectClassFQN
parameter_list|)
block|{
if|if
condition|(
name|dataObjectClassFQN
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|StringTokenizer
name|toks
init|=
operator|new
name|StringTokenizer
argument_list|(
name|dataObjectClassFQN
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
while|while
condition|(
name|toks
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
if|if
condition|(
name|RESERVED_JAVA_KEYWORDS
operator|.
name|contains
argument_list|(
name|toks
operator|.
name|nextToken
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|String
name|validateJavaIdentifier
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|invalidChars
parameter_list|)
block|{
comment|// TODO: Java spec seems to allow "$" char in identifiers... Cayenne expressions do
comment|// not, so we should probably check for this char presence...
name|int
name|len
init|=
operator|(
name|id
operator|!=
literal|null
operator|)
condition|?
name|id
operator|.
name|length
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
name|invalidChars
return|;
block|}
if|if
condition|(
operator|!
name|Character
operator|.
name|isJavaIdentifierStart
argument_list|(
name|id
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|invalidChars
operator|.
name|indexOf
argument_list|(
name|id
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
name|invalidChars
operator|=
name|invalidChars
operator|+
name|id
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|Character
operator|.
name|isJavaIdentifierPart
argument_list|(
name|id
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|invalidChars
operator|.
name|indexOf
argument_list|(
name|id
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
name|invalidChars
operator|=
name|invalidChars
operator|+
name|id
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|invalidChars
return|;
block|}
comment|/**      * Returns whether a given String is a valid DataObject property. A property is      * considered invalid if there is a getter or a setter for it in java.lang.Object or      * CayenneDataObject.      */
name|boolean
name|invalidDataObjectProperty
parameter_list|(
name|String
name|dataObjectProperty
parameter_list|)
block|{
return|return
name|dataObjectProperty
operator|==
literal|null
operator|||
name|INVALID_JAVA_PROPERTIES
operator|.
name|contains
argument_list|(
name|dataObjectProperty
argument_list|)
return|;
block|}
block|}
end_class

end_unit

