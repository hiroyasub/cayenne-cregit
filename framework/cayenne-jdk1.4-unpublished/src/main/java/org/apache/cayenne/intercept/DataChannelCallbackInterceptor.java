begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|intercept
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|LifecycleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|LifecycleCallbackRegistry
import|;
end_import

begin_comment
comment|/**  * Implements JPA-compliant "PreUpdate", "PostUpdate", "PostPersist", "PostRemove",  * "PostLoad" callbacks for the DataChannel operations.<p/>Depending on how callbacks are  * registered, they are invoked either on persistent object instances directly or on an  * instance of an arbitrary listener class. Signature of a callback method of a persistent  * object is<code>"void method()"</code>, while for a non-persistent listener it is  *<code>"void method(Object)"</code>.<p/>Note that this interceptor does not apply  * "PreRemove" and "PrePersist" callbacks during "onSync", assuming that a child  * ObjectContext did that already. It is often used in conjunction with  * {@link ObjectContextCallbackInterceptor} that adds those callbacks.  *   * @see ObjectContextCallbackInterceptor  * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|DataChannelCallbackInterceptor
extends|extends
name|DataChannelDecorator
block|{
specifier|protected
name|LifecycleCallbackRegistry
name|callbackRegistry
decl_stmt|;
specifier|public
name|void
name|setChannel
parameter_list|(
name|DataChannel
name|channel
parameter_list|)
block|{
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|callbackRegistry
operator|=
operator|(
name|channel
operator|!=
literal|null
operator|)
condition|?
name|getEntityResolver
argument_list|()
operator|.
name|getCallbackRegistry
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isEmpty
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|callbackRegistry
operator|.
name|isEmpty
argument_list|(
name|LifecycleListener
operator|.
name|PRE_UPDATE
argument_list|)
operator|&&
name|callbackRegistry
operator|.
name|isEmpty
argument_list|(
name|LifecycleListener
operator|.
name|POST_PERSIST
argument_list|)
operator|&&
name|callbackRegistry
operator|.
name|isEmpty
argument_list|(
name|LifecycleListener
operator|.
name|POST_REMOVE
argument_list|)
operator|&&
name|callbackRegistry
operator|.
name|isEmpty
argument_list|(
name|LifecycleListener
operator|.
name|POST_UPDATE
argument_list|)
operator|&&
name|callbackRegistry
operator|.
name|isEmpty
argument_list|(
name|LifecycleListener
operator|.
name|POST_LOAD
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|QueryResponse
name|onQuery
parameter_list|(
name|ObjectContext
name|originatingContext
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
name|QueryResponse
name|response
init|=
name|channel
operator|.
name|onQuery
argument_list|(
name|originatingContext
argument_list|,
name|query
argument_list|)
decl_stmt|;
comment|// TODO: andrus, 9/21/2006 - this method incorrectly calls "postLoad" when query
comment|// refresh flag is set to false and object is already there.
if|if
condition|(
operator|!
name|callbackRegistry
operator|.
name|isEmpty
argument_list|(
name|LifecycleListener
operator|.
name|POST_LOAD
argument_list|)
condition|)
block|{
name|List
name|list
init|=
name|response
operator|.
name|firstList
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
operator|&&
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
operator|(
name|query
operator|.
name|getMetaData
argument_list|(
name|channel
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
operator|)
operator|.
name|isFetchingDataRows
argument_list|()
condition|)
block|{
name|callbackRegistry
operator|.
name|performCallbacks
argument_list|(
name|LifecycleListener
operator|.
name|POST_LOAD
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|response
return|;
block|}
specifier|public
name|GraphDiff
name|onSync
parameter_list|(
name|ObjectContext
name|originatingContext
parameter_list|,
name|GraphDiff
name|changes
parameter_list|,
name|int
name|syncType
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|channel
operator|.
name|onSync
argument_list|(
name|originatingContext
argument_list|,
name|changes
argument_list|,
name|syncType
argument_list|)
return|;
block|}
name|SyncCallbackProcessor
name|processor
init|=
name|createSyncProcessor
argument_list|(
name|originatingContext
operator|.
name|getGraphManager
argument_list|()
argument_list|,
name|changes
argument_list|)
decl_stmt|;
name|processor
operator|.
name|applyPreCommit
argument_list|(
name|syncType
argument_list|)
expr_stmt|;
name|GraphDiff
name|parentDiff
init|=
name|channel
operator|.
name|onSync
argument_list|(
name|originatingContext
argument_list|,
name|changes
argument_list|,
name|syncType
argument_list|)
decl_stmt|;
name|processor
operator|.
name|applyPostCommit
argument_list|(
name|syncType
argument_list|)
expr_stmt|;
return|return
name|parentDiff
return|;
block|}
name|SyncCallbackProcessor
name|createSyncProcessor
parameter_list|(
name|GraphManager
name|graphManager
parameter_list|,
name|GraphDiff
name|changes
parameter_list|)
block|{
return|return
operator|new
name|SyncCallbackProcessor
argument_list|(
name|this
argument_list|,
name|graphManager
argument_list|,
name|changes
argument_list|)
return|;
block|}
specifier|public
name|LifecycleCallbackRegistry
name|getCallbackRegistry
parameter_list|()
block|{
return|return
name|callbackRegistry
return|;
block|}
block|}
end_class

end_unit

