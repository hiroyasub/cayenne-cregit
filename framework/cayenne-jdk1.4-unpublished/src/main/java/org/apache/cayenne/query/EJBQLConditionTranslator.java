begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLDelegatingVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLExpression
import|;
end_import

begin_comment
comment|/**  * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
class|class
name|EJBQLConditionTranslator
extends|extends
name|EJBQLDelegatingVisitor
block|{
specifier|private
name|EJBQLSelectTranslator
name|parent
decl_stmt|;
name|EJBQLConditionTranslator
parameter_list|(
name|EJBQLSelectTranslator
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
specifier|public
name|boolean
name|visitAnd
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
name|afterChild
argument_list|(
name|expression
argument_list|,
literal|" AND"
argument_list|,
name|finishedChildIndex
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitEquals
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
name|afterChild
argument_list|(
name|expression
argument_list|,
literal|" #"
argument_list|,
name|finishedChildIndex
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitOr
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
name|afterChild
argument_list|(
name|expression
argument_list|,
literal|" OR"
argument_list|,
name|finishedChildIndex
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|afterChild
parameter_list|(
name|EJBQLExpression
name|e
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|childIndex
parameter_list|)
block|{
if|if
condition|(
name|childIndex
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|childIndex
operator|+
literal|1
operator|<
name|e
operator|.
name|getChildrenCount
argument_list|()
condition|)
block|{
name|parent
operator|.
name|getParent
argument_list|()
operator|.
name|getBuffer
argument_list|()
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
comment|// reset child-specific delegate
name|setDelegate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|visitPath
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|setDelegate
argument_list|(
operator|new
name|EJBQLPathVisitor
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitStringLiteral
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

