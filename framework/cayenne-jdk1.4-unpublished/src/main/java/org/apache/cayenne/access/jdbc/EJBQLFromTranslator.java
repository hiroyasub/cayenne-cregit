begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLBaseVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|parser
operator|.
name|EJBQLFromItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|parser
operator|.
name|EJBQLJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_comment
comment|/**  * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
class|class
name|EJBQLFromTranslator
extends|extends
name|EJBQLBaseVisitor
block|{
specifier|private
name|EJBQLTranslationContext
name|context
decl_stmt|;
specifier|private
name|String
name|lastId
decl_stmt|;
specifier|static
name|String
name|makeJoinTailMarker
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
literal|"FROM_TAIL"
operator|+
name|id
return|;
block|}
name|EJBQLFromTranslator
parameter_list|(
name|EJBQLTranslationContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
specifier|public
name|boolean
name|visitFrom
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|+
literal|1
operator|==
name|expression
operator|.
name|getChildrenCount
argument_list|()
condition|)
block|{
if|if
condition|(
name|lastId
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|markCurrentPosition
argument_list|(
name|makeJoinTailMarker
argument_list|(
name|lastId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitFromItem
parameter_list|(
name|EJBQLFromItem
name|expression
parameter_list|)
block|{
name|String
name|id
init|=
name|expression
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastId
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|context
operator|.
name|markCurrentPosition
argument_list|(
name|makeJoinTailMarker
argument_list|(
name|lastId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|lastId
operator|=
name|id
expr_stmt|;
name|appendTable
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitInnerFetchJoin
parameter_list|(
name|EJBQLJoin
name|join
parameter_list|)
block|{
comment|// TODO: andrus, 4/9/2007 - support for prefetching
return|return
name|visitInnerJoin
argument_list|(
name|join
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|visitInnerJoin
parameter_list|(
name|EJBQLJoin
name|join
parameter_list|)
block|{
name|appendJoin
argument_list|(
name|join
argument_list|,
literal|"INNER JOIN"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitOuterFetchJoin
parameter_list|(
name|EJBQLJoin
name|join
parameter_list|)
block|{
comment|// TODO: andrus, 4/9/2007 - support for prefetching
return|return
name|visitOuterJoin
argument_list|(
name|join
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|visitOuterJoin
parameter_list|(
name|EJBQLJoin
name|join
parameter_list|)
block|{
name|appendJoin
argument_list|(
name|join
argument_list|,
literal|"LEFT OUTER JOIN"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|appendJoin
parameter_list|(
name|EJBQLJoin
name|join
parameter_list|,
name|String
name|semantics
parameter_list|)
block|{
name|String
name|rhsId
init|=
name|join
operator|.
name|getRightHandSideId
argument_list|()
decl_stmt|;
name|ObjRelationship
name|joinRelationship
init|=
name|context
operator|.
name|getCompiledExpression
argument_list|()
operator|.
name|getIncomingRelationship
argument_list|(
name|rhsId
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinRelationship
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EJBQLException
argument_list|(
literal|"No join configured for id "
operator|+
name|rhsId
argument_list|)
throw|;
block|}
comment|// TODO: andrus, 4/8/2007 - support for flattened relationships
name|DbRelationship
name|incomingDB
init|=
operator|(
name|DbRelationship
operator|)
name|joinRelationship
operator|.
name|getDbRelationships
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|lhsId
init|=
name|join
operator|.
name|getLeftHandSideId
argument_list|()
decl_stmt|;
name|String
name|sourceAlias
init|=
name|context
operator|.
name|getTableAlias
argument_list|(
name|lhsId
argument_list|,
name|incomingDB
operator|.
name|getSourceEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|semantics
argument_list|)
expr_stmt|;
name|String
name|targetAlias
init|=
name|appendTable
argument_list|(
name|rhsId
argument_list|)
decl_stmt|;
name|context
operator|.
name|append
argument_list|(
literal|" ON ("
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|incomingDB
operator|.
name|getJoins
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbJoin
name|dbJoin
init|=
operator|(
name|DbJoin
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|context
operator|.
name|append
argument_list|(
name|sourceAlias
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|dbJoin
operator|.
name|getSourceName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
operator|.
name|append
argument_list|(
name|targetAlias
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|dbJoin
operator|.
name|getTargetName
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|DbJoin
name|dbJoin
init|=
operator|(
name|DbJoin
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|context
operator|.
name|append
argument_list|(
name|sourceAlias
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|dbJoin
operator|.
name|getSourceName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
operator|.
name|append
argument_list|(
name|targetAlias
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|dbJoin
operator|.
name|getTargetName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|appendTable
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|ClassDescriptor
name|descriptor
init|=
name|context
operator|.
name|getCompiledExpression
argument_list|()
operator|.
name|getEntityDescriptor
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|tableName
init|=
name|descriptor
operator|.
name|getEntity
argument_list|()
operator|.
name|getDbEntity
argument_list|()
operator|.
name|getFullyQualifiedName
argument_list|()
decl_stmt|;
name|String
name|alias
init|=
name|context
operator|.
name|getTableAlias
argument_list|(
name|id
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|context
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
operator|.
name|append
argument_list|(
literal|" AS "
argument_list|)
operator|.
name|append
argument_list|(
name|alias
argument_list|)
expr_stmt|;
return|return
name|alias
return|;
block|}
block|}
end_class

end_unit

