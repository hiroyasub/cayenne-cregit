begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dataview
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|CellRenderers
block|{
specifier|public
name|FormatRenderer
name|createFormatTableCellRenderer
parameter_list|(
name|Format
name|format
parameter_list|,
name|String
name|nullText
parameter_list|,
name|String
name|invalidText
parameter_list|,
name|int
name|alignment
parameter_list|)
block|{
name|FormatRenderer
name|renderer
init|=
operator|new
name|FormatRenderer
argument_list|(
name|format
argument_list|,
name|nullText
argument_list|,
name|invalidText
argument_list|)
decl_stmt|;
if|if
condition|(
name|alignment
operator|>=
literal|0
condition|)
name|renderer
operator|.
name|setHorizontalAlignment
argument_list|(
name|alignment
argument_list|)
expr_stmt|;
return|return
name|renderer
return|;
block|}
specifier|public
name|BooleanRenderer
name|createBooleanTableCellRenderer
parameter_list|()
block|{
name|BooleanRenderer
name|renderer
init|=
operator|new
name|BooleanRenderer
argument_list|()
decl_stmt|;
return|return
name|renderer
return|;
block|}
specifier|public
name|ObjectRenderer
name|createDefaultTableCellRenderer
parameter_list|(
name|int
name|alignment
parameter_list|)
block|{
name|ObjectRenderer
name|renderer
init|=
operator|new
name|ObjectRenderer
argument_list|()
decl_stmt|;
if|if
condition|(
name|alignment
operator|>=
literal|0
condition|)
name|renderer
operator|.
name|setHorizontalAlignment
argument_list|(
name|alignment
argument_list|)
expr_stmt|;
return|return
name|renderer
return|;
block|}
specifier|public
name|TableCellRenderer
name|createTableCellRenderer
parameter_list|(
name|ObjEntityViewField
name|field
parameter_list|)
block|{
name|TableCellRenderer
name|renderer
init|=
literal|null
decl_stmt|;
name|Format
name|format
init|=
name|field
operator|.
name|getDisplayFormat
argument_list|()
decl_stmt|;
name|int
name|dataType
init|=
name|field
operator|.
name|getDataType
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|alignment
decl_stmt|;
name|String
name|nullText
init|=
literal|""
decl_stmt|;
name|String
name|invalidText
init|=
literal|""
decl_stmt|;
switch|switch
condition|(
name|dataType
condition|)
block|{
case|case
name|DataTypeEnum
operator|.
name|INTEGER_TYPE_VALUE
case|:
case|case
name|DataTypeEnum
operator|.
name|DOUBLE_TYPE_VALUE
case|:
case|case
name|DataTypeEnum
operator|.
name|MONEY_TYPE_VALUE
case|:
case|case
name|DataTypeEnum
operator|.
name|PERCENT_TYPE_VALUE
case|:
name|alignment
operator|=
name|JLabel
operator|.
name|RIGHT
expr_stmt|;
break|break;
default|default:
name|alignment
operator|=
name|JLabel
operator|.
name|LEFT
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
name|renderer
operator|=
name|createFormatTableCellRenderer
argument_list|(
name|format
argument_list|,
name|nullText
argument_list|,
name|invalidText
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dataType
operator|==
name|DataTypeEnum
operator|.
name|BOOLEAN_TYPE_VALUE
condition|)
name|renderer
operator|=
name|createBooleanTableCellRenderer
argument_list|()
expr_stmt|;
else|else
name|renderer
operator|=
name|createDefaultTableCellRenderer
argument_list|(
name|alignment
argument_list|)
expr_stmt|;
block|}
return|return
name|renderer
return|;
block|}
specifier|public
name|ListCellRenderer
name|createFormatListCellRenderer
parameter_list|(
name|Format
name|format
parameter_list|,
name|String
name|nullText
parameter_list|,
name|String
name|invalidText
parameter_list|,
name|int
name|alignment
parameter_list|)
block|{
name|FormatListCellRenderer
name|renderer
init|=
operator|new
name|FormatListCellRenderer
argument_list|(
name|format
argument_list|,
name|nullText
argument_list|,
name|invalidText
argument_list|)
decl_stmt|;
if|if
condition|(
name|alignment
operator|>=
literal|0
condition|)
name|renderer
operator|.
name|setHorizontalAlignment
argument_list|(
name|alignment
argument_list|)
expr_stmt|;
return|return
name|renderer
return|;
block|}
specifier|public
name|ListCellRenderer
name|createListCellRenderer
parameter_list|(
name|ObjEntityViewField
name|field
parameter_list|)
block|{
name|ListCellRenderer
name|renderer
init|=
literal|null
decl_stmt|;
name|Format
name|format
init|=
name|field
operator|.
name|getDisplayFormat
argument_list|()
decl_stmt|;
name|int
name|dataType
init|=
name|field
operator|.
name|getDataType
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|alignment
decl_stmt|;
name|String
name|nullText
init|=
literal|""
decl_stmt|;
name|String
name|invalidText
init|=
literal|""
decl_stmt|;
switch|switch
condition|(
name|dataType
condition|)
block|{
case|case
name|DataTypeEnum
operator|.
name|INTEGER_TYPE_VALUE
case|:
case|case
name|DataTypeEnum
operator|.
name|DOUBLE_TYPE_VALUE
case|:
case|case
name|DataTypeEnum
operator|.
name|MONEY_TYPE_VALUE
case|:
case|case
name|DataTypeEnum
operator|.
name|PERCENT_TYPE_VALUE
case|:
name|alignment
operator|=
name|JLabel
operator|.
name|RIGHT
expr_stmt|;
default|default:
name|alignment
operator|=
name|JLabel
operator|.
name|LEFT
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
name|renderer
operator|=
name|createFormatListCellRenderer
argument_list|(
name|format
argument_list|,
name|nullText
argument_list|,
name|invalidText
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|renderer
operator|=
operator|new
name|DefaultListCellRenderer
argument_list|()
expr_stmt|;
operator|(
operator|(
name|DefaultListCellRenderer
operator|)
name|renderer
operator|)
operator|.
name|setHorizontalAlignment
argument_list|(
name|alignment
argument_list|)
expr_stmt|;
block|}
return|return
name|renderer
return|;
block|}
specifier|public
name|void
name|installRenderers
parameter_list|(
name|JTable
name|table
parameter_list|)
block|{
name|TableModel
name|m
init|=
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|m
operator|instanceof
name|DOTableModel
operator|)
condition|)
return|return;
name|DOTableModel
name|model
init|=
operator|(
name|DOTableModel
operator|)
name|m
decl_stmt|;
name|TableColumnModel
name|columnModel
init|=
name|table
operator|.
name|getColumnModel
argument_list|()
decl_stmt|;
name|int
name|columnCount
init|=
name|model
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnCount
condition|;
name|i
operator|++
control|)
block|{
name|ObjEntityViewField
name|field
init|=
name|model
operator|.
name|getField
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|TableCellRenderer
name|renderer
init|=
name|createTableCellRenderer
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|TableColumn
name|column
init|=
name|columnModel
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|column
operator|.
name|setCellRenderer
argument_list|(
name|renderer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|installRenderer
parameter_list|(
name|JList
name|list
parameter_list|,
name|ObjEntityViewField
name|field
parameter_list|)
block|{
name|ListCellRenderer
name|renderer
init|=
name|createListCellRenderer
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|list
operator|.
name|setCellRenderer
argument_list|(
name|renderer
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|installRenderer
parameter_list|(
name|JComboBox
name|comboBox
parameter_list|,
name|ObjEntityViewField
name|field
parameter_list|)
block|{
name|ListCellRenderer
name|renderer
init|=
name|createListCellRenderer
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|comboBox
operator|.
name|setRenderer
argument_list|(
name|renderer
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|BooleanRenderer
extends|extends
name|JCheckBox
implements|implements
name|TableCellRenderer
block|{
specifier|public
name|BooleanRenderer
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|setHorizontalAlignment
argument_list|(
name|JLabel
operator|.
name|CENTER
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Component
name|getTableCellRendererComponent
parameter_list|(
name|JTable
name|table
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
name|boolean
name|hasFocus
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
name|isSelected
condition|)
block|{
name|setForeground
argument_list|(
name|table
operator|.
name|getSelectionForeground
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|setBackground
argument_list|(
name|table
operator|.
name|getSelectionBackground
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setForeground
argument_list|(
name|table
operator|.
name|getForeground
argument_list|()
argument_list|)
expr_stmt|;
name|setBackground
argument_list|(
name|table
operator|.
name|getBackground
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setSelected
argument_list|(
operator|(
name|value
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|Boolean
operator|)
name|value
operator|)
operator|.
name|booleanValue
argument_list|()
operator|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|public
class|class
name|ObjectRenderer
extends|extends
name|DefaultTableCellRenderer
block|{   }
specifier|public
class|class
name|FormatRenderer
extends|extends
name|DefaultTableCellRenderer
block|{
specifier|protected
name|Format
name|formatter
decl_stmt|;
specifier|protected
name|String
name|nullText
init|=
literal|""
decl_stmt|;
specifier|protected
name|String
name|invalidText
init|=
literal|""
decl_stmt|;
specifier|public
name|FormatRenderer
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FormatRenderer
parameter_list|(
name|Format
name|formatter
parameter_list|)
block|{
name|this
argument_list|(
name|formatter
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FormatRenderer
parameter_list|(
name|Format
name|formatter
parameter_list|,
name|String
name|nullText
parameter_list|)
block|{
name|this
argument_list|(
name|formatter
argument_list|,
name|nullText
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FormatRenderer
parameter_list|(
name|Format
name|formatter
parameter_list|,
name|String
name|nullText
parameter_list|,
name|String
name|invalidText
parameter_list|)
block|{
name|setFormatter
argument_list|(
name|formatter
argument_list|)
expr_stmt|;
name|setNullText
argument_list|(
name|nullText
argument_list|)
expr_stmt|;
name|setInvalidText
argument_list|(
name|invalidText
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFormatter
parameter_list|(
name|Format
name|formatter
parameter_list|)
block|{
name|this
operator|.
name|formatter
operator|=
name|formatter
expr_stmt|;
block|}
specifier|public
name|Format
name|getFormatter
parameter_list|()
block|{
return|return
name|formatter
return|;
block|}
specifier|public
name|void
name|setNullText
parameter_list|(
name|String
name|nullText
parameter_list|)
block|{
name|this
operator|.
name|nullText
operator|=
operator|(
name|nullText
operator|!=
literal|null
condition|?
name|nullText
else|:
name|this
operator|.
name|nullText
operator|)
expr_stmt|;
block|}
specifier|public
name|String
name|getNullText
parameter_list|()
block|{
return|return
name|nullText
return|;
block|}
specifier|public
name|void
name|setInvalidText
parameter_list|(
name|String
name|invalidText
parameter_list|)
block|{
name|this
operator|.
name|invalidText
operator|=
operator|(
name|invalidText
operator|!=
literal|null
condition|?
name|invalidText
else|:
name|this
operator|.
name|invalidText
operator|)
expr_stmt|;
block|}
specifier|public
name|String
name|getInvalidText
parameter_list|()
block|{
return|return
name|invalidText
return|;
block|}
specifier|public
name|void
name|setValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|String
name|text
decl_stmt|;
try|try
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
name|text
operator|=
name|nullText
expr_stmt|;
if|else if
condition|(
name|formatter
operator|==
literal|null
condition|)
name|text
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
else|else
name|text
operator|=
name|formatter
operator|.
name|format
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|text
operator|=
name|invalidText
expr_stmt|;
block|}
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|FormatListCellRenderer
extends|extends
name|DefaultListCellRenderer
block|{
specifier|protected
name|Format
name|formatter
decl_stmt|;
specifier|protected
name|String
name|nullText
init|=
literal|""
decl_stmt|;
specifier|protected
name|String
name|invalidText
init|=
literal|""
decl_stmt|;
specifier|public
name|FormatListCellRenderer
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FormatListCellRenderer
parameter_list|(
name|Format
name|formatter
parameter_list|)
block|{
name|this
argument_list|(
name|formatter
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FormatListCellRenderer
parameter_list|(
name|Format
name|formatter
parameter_list|,
name|String
name|nullText
parameter_list|)
block|{
name|this
argument_list|(
name|formatter
argument_list|,
name|nullText
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FormatListCellRenderer
parameter_list|(
name|Format
name|formatter
parameter_list|,
name|String
name|nullText
parameter_list|,
name|String
name|invalidText
parameter_list|)
block|{
name|setFormatter
argument_list|(
name|formatter
argument_list|)
expr_stmt|;
name|setNullText
argument_list|(
name|nullText
argument_list|)
expr_stmt|;
name|setInvalidText
argument_list|(
name|invalidText
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFormatter
parameter_list|(
name|Format
name|formatter
parameter_list|)
block|{
name|this
operator|.
name|formatter
operator|=
name|formatter
expr_stmt|;
block|}
specifier|public
name|Format
name|getFormatter
parameter_list|()
block|{
return|return
name|formatter
return|;
block|}
specifier|public
name|void
name|setNullText
parameter_list|(
name|String
name|nullText
parameter_list|)
block|{
name|this
operator|.
name|nullText
operator|=
operator|(
name|nullText
operator|!=
literal|null
condition|?
name|nullText
else|:
name|this
operator|.
name|nullText
operator|)
expr_stmt|;
block|}
specifier|public
name|String
name|getNullText
parameter_list|()
block|{
return|return
name|nullText
return|;
block|}
specifier|public
name|void
name|setInvalidText
parameter_list|(
name|String
name|invalidText
parameter_list|)
block|{
name|this
operator|.
name|invalidText
operator|=
operator|(
name|invalidText
operator|!=
literal|null
condition|?
name|invalidText
else|:
name|this
operator|.
name|invalidText
operator|)
expr_stmt|;
block|}
specifier|public
name|String
name|getInvalidText
parameter_list|()
block|{
return|return
name|invalidText
return|;
block|}
specifier|public
name|Component
name|getListCellRendererComponent
parameter_list|(
name|JList
name|list
parameter_list|,
name|Object
name|value
parameter_list|,
name|int
name|index
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
name|boolean
name|cellHasFocus
parameter_list|)
block|{
name|String
name|text
decl_stmt|;
try|try
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
name|text
operator|=
name|nullText
expr_stmt|;
if|else if
condition|(
name|formatter
operator|==
literal|null
condition|)
name|text
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
else|else
name|text
operator|=
name|formatter
operator|.
name|format
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|text
operator|=
name|invalidText
expr_stmt|;
block|}
return|return
name|super
operator|.
name|getListCellRendererComponent
argument_list|(
name|list
argument_list|,
name|text
argument_list|,
name|index
argument_list|,
name|isSelected
argument_list|,
name|cellHasFocus
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

