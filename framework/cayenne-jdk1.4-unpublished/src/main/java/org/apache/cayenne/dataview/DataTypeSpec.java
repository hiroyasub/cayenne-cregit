begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dataview
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|math
operator|.
name|NumberUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|time
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|DataTypeSpec
block|{
specifier|protected
name|Map
name|dataTypeClassMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|protected
name|Format
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
specifier|protected
name|Format
name|dateTimeFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
specifier|public
name|DataTypeSpec
parameter_list|()
block|{
name|dataTypeClassMap
operator|.
name|put
argument_list|(
name|DataTypeEnum
operator|.
name|BOOLEAN_TYPE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|dataTypeClassMap
operator|.
name|put
argument_list|(
name|DataTypeEnum
operator|.
name|DATE_TYPE
argument_list|,
name|Date
operator|.
name|class
argument_list|)
expr_stmt|;
name|dataTypeClassMap
operator|.
name|put
argument_list|(
name|DataTypeEnum
operator|.
name|DATETIME_TYPE
argument_list|,
name|Date
operator|.
name|class
argument_list|)
expr_stmt|;
name|dataTypeClassMap
operator|.
name|put
argument_list|(
name|DataTypeEnum
operator|.
name|DOUBLE_TYPE
argument_list|,
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|dataTypeClassMap
operator|.
name|put
argument_list|(
name|DataTypeEnum
operator|.
name|INTEGER_TYPE
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|dataTypeClassMap
operator|.
name|put
argument_list|(
name|DataTypeEnum
operator|.
name|MONEY_TYPE
argument_list|,
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|dataTypeClassMap
operator|.
name|put
argument_list|(
name|DataTypeEnum
operator|.
name|PERCENT_TYPE
argument_list|,
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|dataTypeClassMap
operator|.
name|put
argument_list|(
name|DataTypeEnum
operator|.
name|STRING_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|dataTypeClassMap
operator|.
name|put
argument_list|(
name|DataTypeEnum
operator|.
name|OBJECT_TYPE
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|dataTypeClassMap
operator|.
name|put
argument_list|(
name|DataTypeEnum
operator|.
name|UNKNOWN_TYPE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DataTypeEnum
name|getDataType
parameter_list|(
name|String
name|dataType
parameter_list|)
block|{
return|return
name|DataTypeEnum
operator|.
name|getEnum
argument_list|(
name|dataType
argument_list|)
return|;
block|}
specifier|public
name|DataTypeEnum
name|getDataType
parameter_list|(
name|int
name|dataType
parameter_list|)
block|{
return|return
name|DataTypeEnum
operator|.
name|getEnum
argument_list|(
name|dataType
argument_list|)
return|;
block|}
specifier|public
name|Class
name|getJavaClass
parameter_list|(
name|DataTypeEnum
name|dataType
parameter_list|)
block|{
return|return
operator|(
name|Class
operator|)
name|dataTypeClassMap
operator|.
name|get
argument_list|(
name|dataType
argument_list|)
return|;
block|}
specifier|public
name|Object
name|create
parameter_list|(
name|DataTypeEnum
name|dataType
parameter_list|)
block|{
name|Class
name|clazz
init|=
name|getJavaClass
argument_list|(
name|dataType
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Object
name|value
init|=
name|clazz
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|DataTypeEnum
operator|.
name|DATE_TYPE
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
condition|)
name|value
operator|=
name|DateUtils
operator|.
name|truncate
argument_list|(
name|value
argument_list|,
name|Calendar
operator|.
name|DATE
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Object
name|create
parameter_list|(
name|DataTypeEnum
name|dataType
parameter_list|,
name|String
name|argument
parameter_list|)
block|{
name|Class
name|clazz
init|=
name|getJavaClass
argument_list|(
name|dataType
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|DataTypeEnum
operator|.
name|DATE_TYPE
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
condition|)
block|{
return|return
name|dateFormat
operator|.
name|parseObject
argument_list|(
name|argument
argument_list|)
return|;
block|}
if|else if
condition|(
name|DataTypeEnum
operator|.
name|DATETIME_TYPE
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
condition|)
block|{
return|return
name|dateTimeFormat
operator|.
name|parseObject
argument_list|(
name|argument
argument_list|)
return|;
block|}
name|Constructor
name|strConstructor
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
return|return
name|strConstructor
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|argument
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Object
name|create
parameter_list|(
name|DataTypeEnum
name|dataType
parameter_list|,
name|Object
index|[]
name|arguments
parameter_list|)
block|{
if|if
condition|(
name|arguments
operator|==
literal|null
operator|||
name|arguments
operator|.
name|length
operator|==
literal|0
condition|)
return|return
name|create
argument_list|(
name|dataType
argument_list|)
return|;
name|Class
name|clazz
init|=
name|getJavaClass
argument_list|(
name|dataType
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Class
index|[]
name|argTypes
init|=
operator|new
name|Class
index|[
name|arguments
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|argTypes
index|[
name|i
index|]
operator|=
name|arguments
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
name|Constructor
name|strConstructor
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
return|return
name|strConstructor
operator|.
name|newInstance
argument_list|(
name|arguments
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Object
name|toDataType
parameter_list|(
name|DataTypeEnum
name|dataType
parameter_list|,
name|Object
name|untypedValue
parameter_list|)
block|{
name|Class
name|dataTypeClass
init|=
name|getJavaClass
argument_list|(
name|dataType
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataTypeClass
operator|==
literal|null
operator|||
name|untypedValue
operator|==
literal|null
operator|||
name|ClassUtils
operator|.
name|isAssignable
argument_list|(
name|untypedValue
operator|.
name|getClass
argument_list|()
argument_list|,
name|dataTypeClass
argument_list|)
condition|)
block|{
if|if
condition|(
name|DataTypeEnum
operator|.
name|DATE_TYPE
operator|.
name|equals
argument_list|(
name|dataType
argument_list|)
operator|&&
name|Date
operator|.
name|class
operator|.
name|equals
argument_list|(
name|dataTypeClass
argument_list|)
condition|)
block|{
return|return
name|DateUtils
operator|.
name|truncate
argument_list|(
name|untypedValue
argument_list|,
name|Calendar
operator|.
name|DATE
argument_list|)
return|;
block|}
return|return
name|untypedValue
return|;
block|}
name|Object
name|v
init|=
literal|null
decl_stmt|;
name|String
name|strUntypedValue
init|=
literal|null
decl_stmt|;
name|boolean
name|isStringUntypedValue
init|=
name|untypedValue
operator|instanceof
name|String
decl_stmt|;
name|Number
name|numUntypedValue
init|=
literal|null
decl_stmt|;
name|boolean
name|isNumberUntypedValue
init|=
name|untypedValue
operator|instanceof
name|Number
decl_stmt|;
if|if
condition|(
name|isStringUntypedValue
condition|)
name|strUntypedValue
operator|=
operator|(
name|String
operator|)
name|untypedValue
expr_stmt|;
if|if
condition|(
name|isNumberUntypedValue
condition|)
name|numUntypedValue
operator|=
operator|(
name|Number
operator|)
name|untypedValue
expr_stmt|;
switch|switch
condition|(
name|dataType
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
name|DataTypeEnum
operator|.
name|BOOLEAN_TYPE_VALUE
case|:
if|if
condition|(
name|isNumberUntypedValue
condition|)
name|v
operator|=
name|BooleanUtils
operator|.
name|toBooleanObject
argument_list|(
name|numUntypedValue
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isStringUntypedValue
condition|)
name|v
operator|=
name|BooleanUtils
operator|.
name|toBooleanObject
argument_list|(
name|strUntypedValue
argument_list|)
expr_stmt|;
break|break;
case|case
name|DataTypeEnum
operator|.
name|INTEGER_TYPE_VALUE
case|:
if|if
condition|(
name|isNumberUntypedValue
condition|)
name|v
operator|=
operator|new
name|Integer
argument_list|(
name|numUntypedValue
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isStringUntypedValue
condition|)
name|v
operator|=
name|NumberUtils
operator|.
name|createInteger
argument_list|(
name|strUntypedValue
argument_list|)
expr_stmt|;
break|break;
case|case
name|DataTypeEnum
operator|.
name|DOUBLE_TYPE_VALUE
case|:
if|if
condition|(
name|isNumberUntypedValue
condition|)
name|v
operator|=
operator|new
name|Double
argument_list|(
name|numUntypedValue
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isStringUntypedValue
condition|)
name|v
operator|=
name|NumberUtils
operator|.
name|createDouble
argument_list|(
name|strUntypedValue
argument_list|)
expr_stmt|;
break|break;
case|case
name|DataTypeEnum
operator|.
name|STRING_TYPE_VALUE
case|:
name|v
operator|=
name|ObjectUtils
operator|.
name|toString
argument_list|(
name|untypedValue
argument_list|)
expr_stmt|;
break|break;
case|case
name|DataTypeEnum
operator|.
name|DATE_TYPE_VALUE
case|:
if|if
condition|(
name|isNumberUntypedValue
condition|)
name|v
operator|=
name|DateUtils
operator|.
name|truncate
argument_list|(
operator|new
name|Date
argument_list|(
name|numUntypedValue
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|,
name|Calendar
operator|.
name|DATE
argument_list|)
expr_stmt|;
break|break;
case|case
name|DataTypeEnum
operator|.
name|DATETIME_TYPE_VALUE
case|:
if|if
condition|(
name|isNumberUntypedValue
condition|)
name|v
operator|=
operator|new
name|Date
argument_list|(
name|numUntypedValue
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DataTypeEnum
operator|.
name|MONEY_TYPE_VALUE
case|:
if|if
condition|(
name|isNumberUntypedValue
condition|)
name|v
operator|=
operator|new
name|Double
argument_list|(
name|numUntypedValue
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isStringUntypedValue
condition|)
name|v
operator|=
name|NumberUtils
operator|.
name|createDouble
argument_list|(
name|strUntypedValue
argument_list|)
expr_stmt|;
break|break;
case|case
name|DataTypeEnum
operator|.
name|PERCENT_TYPE_VALUE
case|:
if|if
condition|(
name|isNumberUntypedValue
condition|)
name|v
operator|=
operator|new
name|Double
argument_list|(
name|numUntypedValue
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isStringUntypedValue
condition|)
name|v
operator|=
name|NumberUtils
operator|.
name|createDouble
argument_list|(
name|strUntypedValue
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|v
return|;
block|}
specifier|public
name|Object
name|fromDataType
parameter_list|(
name|Class
name|untypedValueClass
parameter_list|,
name|DataTypeEnum
name|dataType
parameter_list|,
name|Object
name|typedValue
parameter_list|)
block|{
if|if
condition|(
name|typedValue
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Class
name|dataTypeClass
init|=
name|getJavaClass
argument_list|(
name|dataType
argument_list|)
decl_stmt|;
comment|//    Validate.isTrue(typedValue.getClass().equals(dataTypeClass));
if|if
condition|(
name|untypedValueClass
operator|==
literal|null
condition|)
return|return
name|typedValue
return|;
if|if
condition|(
name|ClassUtils
operator|.
name|isAssignable
argument_list|(
name|dataTypeClass
argument_list|,
name|untypedValueClass
argument_list|)
condition|)
return|return
name|typedValue
return|;
name|String
name|strTypedValue
init|=
literal|null
decl_stmt|;
name|boolean
name|isStringTypedValue
init|=
name|typedValue
operator|instanceof
name|String
decl_stmt|;
name|Number
name|numTypedValue
init|=
literal|null
decl_stmt|;
name|boolean
name|isNumberTypedValue
init|=
name|typedValue
operator|instanceof
name|Number
decl_stmt|;
name|Boolean
name|boolTypedValue
init|=
literal|null
decl_stmt|;
name|boolean
name|isBooleanTypedValue
init|=
name|typedValue
operator|instanceof
name|Boolean
decl_stmt|;
name|Date
name|dateTypedValue
init|=
literal|null
decl_stmt|;
name|boolean
name|isDateTypedValue
init|=
name|typedValue
operator|instanceof
name|Date
decl_stmt|;
if|if
condition|(
name|isStringTypedValue
condition|)
name|strTypedValue
operator|=
operator|(
name|String
operator|)
name|typedValue
expr_stmt|;
if|if
condition|(
name|isNumberTypedValue
condition|)
name|numTypedValue
operator|=
operator|(
name|Number
operator|)
name|typedValue
expr_stmt|;
if|if
condition|(
name|isBooleanTypedValue
condition|)
name|boolTypedValue
operator|=
operator|(
name|Boolean
operator|)
name|typedValue
expr_stmt|;
if|if
condition|(
name|isDateTypedValue
condition|)
name|dateTypedValue
operator|=
operator|(
name|Date
operator|)
name|typedValue
expr_stmt|;
name|Object
name|v
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|String
operator|.
name|class
operator|.
name|equals
argument_list|(
name|untypedValueClass
argument_list|)
condition|)
block|{
name|v
operator|=
name|ObjectUtils
operator|.
name|toString
argument_list|(
name|typedValue
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|BigDecimal
operator|.
name|class
operator|.
name|equals
argument_list|(
name|untypedValueClass
argument_list|)
condition|)
block|{
if|if
condition|(
name|isStringTypedValue
condition|)
name|v
operator|=
name|NumberUtils
operator|.
name|createBigDecimal
argument_list|(
name|strTypedValue
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isNumberTypedValue
condition|)
name|v
operator|=
operator|new
name|BigDecimal
argument_list|(
name|numTypedValue
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isBooleanTypedValue
condition|)
name|v
operator|=
operator|new
name|BigDecimal
argument_list|(
name|BooleanUtils
operator|.
name|toInteger
argument_list|(
name|boolTypedValue
operator|.
name|booleanValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isDateTypedValue
condition|)
name|v
operator|=
operator|new
name|BigDecimal
argument_list|(
name|dateTypedValue
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Boolean
operator|.
name|class
operator|.
name|equals
argument_list|(
name|untypedValueClass
argument_list|)
condition|)
block|{
if|if
condition|(
name|isStringTypedValue
condition|)
name|v
operator|=
name|BooleanUtils
operator|.
name|toBooleanObject
argument_list|(
name|strTypedValue
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isNumberTypedValue
condition|)
name|v
operator|=
name|BooleanUtils
operator|.
name|toBooleanObject
argument_list|(
name|numTypedValue
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isDateTypedValue
condition|)
name|v
operator|=
name|BooleanUtils
operator|.
name|toBooleanObject
argument_list|(
operator|(
name|int
operator|)
name|dateTypedValue
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Byte
operator|.
name|class
operator|.
name|equals
argument_list|(
name|untypedValueClass
argument_list|)
condition|)
block|{
if|if
condition|(
name|isStringTypedValue
condition|)
name|v
operator|=
name|Byte
operator|.
name|valueOf
argument_list|(
name|strTypedValue
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isNumberTypedValue
condition|)
name|v
operator|=
operator|new
name|Byte
argument_list|(
name|numTypedValue
operator|.
name|byteValue
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isBooleanTypedValue
condition|)
name|v
operator|=
operator|new
name|Byte
argument_list|(
operator|(
name|byte
operator|)
name|BooleanUtils
operator|.
name|toInteger
argument_list|(
name|boolTypedValue
operator|.
name|booleanValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isDateTypedValue
condition|)
name|v
operator|=
operator|new
name|Byte
argument_list|(
operator|(
name|byte
operator|)
name|dateTypedValue
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|byte
index|[]
operator|.
name|class
operator|.
name|equals
argument_list|(
name|untypedValueClass
argument_list|)
condition|)
block|{
if|if
condition|(
name|isStringTypedValue
condition|)
name|v
operator|=
name|strTypedValue
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|Double
operator|.
name|class
operator|.
name|equals
argument_list|(
name|untypedValueClass
argument_list|)
condition|)
block|{
if|if
condition|(
name|isStringTypedValue
condition|)
name|v
operator|=
name|NumberUtils
operator|.
name|createDouble
argument_list|(
name|strTypedValue
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isNumberTypedValue
condition|)
name|v
operator|=
operator|new
name|Double
argument_list|(
name|numTypedValue
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isBooleanTypedValue
condition|)
name|v
operator|=
operator|new
name|Double
argument_list|(
name|BooleanUtils
operator|.
name|toInteger
argument_list|(
name|boolTypedValue
operator|.
name|booleanValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isDateTypedValue
condition|)
name|v
operator|=
operator|new
name|Double
argument_list|(
name|dateTypedValue
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Float
operator|.
name|class
operator|.
name|equals
argument_list|(
name|untypedValueClass
argument_list|)
condition|)
block|{
if|if
condition|(
name|isStringTypedValue
condition|)
name|v
operator|=
name|NumberUtils
operator|.
name|createFloat
argument_list|(
name|strTypedValue
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isNumberTypedValue
condition|)
name|v
operator|=
operator|new
name|Float
argument_list|(
name|numTypedValue
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isBooleanTypedValue
condition|)
name|v
operator|=
operator|new
name|Float
argument_list|(
name|BooleanUtils
operator|.
name|toInteger
argument_list|(
name|boolTypedValue
operator|.
name|booleanValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isDateTypedValue
condition|)
name|v
operator|=
operator|new
name|Float
argument_list|(
name|dateTypedValue
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Integer
operator|.
name|class
operator|.
name|equals
argument_list|(
name|untypedValueClass
argument_list|)
condition|)
block|{
if|if
condition|(
name|isStringTypedValue
condition|)
name|v
operator|=
name|NumberUtils
operator|.
name|createInteger
argument_list|(
name|strTypedValue
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isNumberTypedValue
condition|)
name|v
operator|=
operator|new
name|Integer
argument_list|(
name|numTypedValue
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isBooleanTypedValue
condition|)
name|v
operator|=
name|BooleanUtils
operator|.
name|toIntegerObject
argument_list|(
name|boolTypedValue
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isDateTypedValue
condition|)
name|v
operator|=
operator|new
name|Integer
argument_list|(
operator|(
name|int
operator|)
name|dateTypedValue
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Long
operator|.
name|class
operator|.
name|equals
argument_list|(
name|untypedValueClass
argument_list|)
condition|)
block|{
if|if
condition|(
name|isStringTypedValue
condition|)
name|v
operator|=
name|NumberUtils
operator|.
name|createLong
argument_list|(
name|strTypedValue
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isNumberTypedValue
condition|)
name|v
operator|=
operator|new
name|Long
argument_list|(
name|numTypedValue
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isBooleanTypedValue
condition|)
name|v
operator|=
operator|new
name|Long
argument_list|(
name|BooleanUtils
operator|.
name|toInteger
argument_list|(
name|boolTypedValue
operator|.
name|booleanValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isDateTypedValue
condition|)
name|v
operator|=
operator|new
name|Long
argument_list|(
name|dateTypedValue
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
operator|.
name|equals
argument_list|(
name|untypedValueClass
argument_list|)
condition|)
block|{
if|if
condition|(
name|isNumberTypedValue
condition|)
name|v
operator|=
operator|new
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|(
name|numTypedValue
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isDateTypedValue
condition|)
name|v
operator|=
operator|new
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|(
name|dateTypedValue
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|java
operator|.
name|sql
operator|.
name|Time
operator|.
name|class
operator|.
name|equals
argument_list|(
name|untypedValueClass
argument_list|)
condition|)
block|{
if|if
condition|(
name|isNumberTypedValue
condition|)
name|v
operator|=
operator|new
name|java
operator|.
name|sql
operator|.
name|Time
argument_list|(
name|numTypedValue
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isDateTypedValue
condition|)
name|v
operator|=
operator|new
name|java
operator|.
name|sql
operator|.
name|Time
argument_list|(
name|dateTypedValue
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|java
operator|.
name|sql
operator|.
name|Timestamp
operator|.
name|class
operator|.
name|equals
argument_list|(
name|untypedValueClass
argument_list|)
condition|)
block|{
if|if
condition|(
name|isNumberTypedValue
condition|)
name|v
operator|=
operator|new
name|java
operator|.
name|sql
operator|.
name|Timestamp
argument_list|(
name|numTypedValue
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|isDateTypedValue
condition|)
name|v
operator|=
operator|new
name|java
operator|.
name|sql
operator|.
name|Timestamp
argument_list|(
name|dateTypedValue
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Date
operator|.
name|class
operator|.
name|equals
argument_list|(
name|untypedValueClass
argument_list|)
condition|)
block|{
if|if
condition|(
name|isNumberTypedValue
condition|)
name|v
operator|=
operator|new
name|Date
argument_list|(
name|numTypedValue
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|v
return|;
block|}
block|}
end_class

end_unit

