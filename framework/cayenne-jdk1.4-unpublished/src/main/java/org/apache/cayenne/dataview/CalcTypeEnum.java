begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dataview
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|enums
operator|.
name|ValuedEnum
import|;
end_import

begin_class
specifier|public
class|class
name|CalcTypeEnum
extends|extends
name|ValuedEnum
block|{
specifier|public
specifier|static
specifier|final
name|int
name|NO_CALC_TYPE_VALUE
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|CALC_TYPE_VALUE
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|LOOKUP_TYPE_VALUE
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NO_CALC_TYPE_NAME
init|=
literal|"nocalc"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CALC_TYPE_NAME
init|=
literal|"calc"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LOOKUP_TYPE_NAME
init|=
literal|"lookup"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|CalcTypeEnum
name|NO_CALC_TYPE
init|=
operator|new
name|CalcTypeEnum
argument_list|(
name|NO_CALC_TYPE_NAME
argument_list|,
name|NO_CALC_TYPE_VALUE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|CalcTypeEnum
name|CALC_TYPE
init|=
operator|new
name|CalcTypeEnum
argument_list|(
name|CALC_TYPE_NAME
argument_list|,
name|CALC_TYPE_VALUE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|CalcTypeEnum
name|LOOKUP_TYPE
init|=
operator|new
name|CalcTypeEnum
argument_list|(
name|LOOKUP_TYPE_NAME
argument_list|,
name|LOOKUP_TYPE_VALUE
argument_list|)
decl_stmt|;
specifier|protected
name|CalcTypeEnum
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|CalcTypeEnum
name|getEnum
parameter_list|(
name|String
name|calcType
parameter_list|)
block|{
return|return
operator|(
name|CalcTypeEnum
operator|)
name|getEnum
argument_list|(
name|CalcTypeEnum
operator|.
name|class
argument_list|,
name|calcType
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CalcTypeEnum
name|getEnum
parameter_list|(
name|int
name|calcType
parameter_list|)
block|{
return|return
operator|(
name|CalcTypeEnum
operator|)
name|getEnum
argument_list|(
name|CalcTypeEnum
operator|.
name|class
argument_list|,
name|calcType
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Map
name|getEnumMap
parameter_list|()
block|{
return|return
name|getEnumMap
argument_list|(
name|CalcTypeEnum
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
name|getEnumList
parameter_list|()
block|{
return|return
name|getEnumList
argument_list|(
name|CalcTypeEnum
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Iterator
name|iterator
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
name|CalcTypeEnum
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|Class
name|getEnumClass
parameter_list|()
block|{
return|return
name|CalcTypeEnum
operator|.
name|class
return|;
block|}
block|}
end_class

end_unit

