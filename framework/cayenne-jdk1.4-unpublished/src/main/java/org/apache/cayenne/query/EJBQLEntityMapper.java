begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLBaseVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_comment
comment|/**  * Maps EJBQL identification variables to entities.  *   * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
class|class
name|EJBQLEntityMapper
extends|extends
name|EJBQLBaseVisitor
block|{
specifier|private
name|Map
name|entitiesById
decl_stmt|;
specifier|private
name|EntityResolver
name|resolver
decl_stmt|;
name|EJBQLEntityMapper
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
name|this
operator|.
name|entitiesById
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
block|}
name|ObjEntity
name|getMappedEntity
parameter_list|(
name|String
name|idVariable
parameter_list|)
block|{
if|if
condition|(
name|idVariable
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// per JPA spec, 4.4.2, "Identification variables are case insensitive."
name|idVariable
operator|=
name|idVariable
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
return|return
operator|(
name|ObjEntity
operator|)
name|entitiesById
operator|.
name|get
argument_list|(
name|idVariable
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|visitFrom
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
comment|// visit FROM node subtree children separately
name|int
name|len
init|=
name|expression
operator|.
name|getChildrenCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|expression
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
operator|.
name|visit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|// cancel parent visitor
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitFromItem
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|.
name|getChildrenCount
argument_list|()
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|EJBQLException
argument_list|(
literal|"Expected 2 children, got: "
operator|+
name|expression
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
throw|;
block|}
comment|// TODO: andrus, 2/28/2007 - resolve path ... for now only support direct entity
comment|// names
name|EJBQLExpression
name|abstractSchemaName
init|=
name|expression
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|schemaName
init|=
name|abstractSchemaName
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|ObjEntity
name|entity
init|=
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|schemaName
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EJBQLException
argument_list|(
literal|"Invalid abstract schema name: "
operator|+
name|schemaName
argument_list|)
throw|;
block|}
name|String
name|idVariable
init|=
name|expression
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
comment|// per JPA spec, 4.4.2, "Identification variables are case insensitive."
name|idVariable
operator|=
name|idVariable
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|ObjEntity
name|old
init|=
operator|(
name|ObjEntity
operator|)
name|entitiesById
operator|.
name|put
argument_list|(
name|idVariable
argument_list|,
name|entity
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
operator|&&
name|old
operator|!=
name|entity
condition|)
block|{
throw|throw
operator|new
name|EJBQLException
argument_list|(
literal|"Duplicate identification variable definition: "
operator|+
name|idVariable
operator|+
literal|", it is already used for "
operator|+
name|old
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|// cancel individual child visitation
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

