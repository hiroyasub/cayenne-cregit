begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * Stores ExtendedTypes, implementing an algorithm to determine the right type for a given  * Java class. See {@link #getRegisteredType(String)} documentation for lookup algorith  * details.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|ExtendedTypeMap
block|{
specifier|protected
name|Map
name|typeMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|protected
name|DefaultType
name|defaultType
init|=
operator|new
name|DefaultType
argument_list|()
decl_stmt|;
name|Collection
name|extendedTypeFactories
decl_stmt|;
comment|// standard type factories registered by Cayenne that are consulted after the user
comment|// factories.
name|Collection
name|internalTypeFactories
decl_stmt|;
comment|/**      * Creates new ExtendedTypeMap, populating it with default JDBC-compatible types. If      * JDK version is at least 1.5, also loads support for enumerated types.      */
specifier|public
name|ExtendedTypeMap
parameter_list|()
block|{
name|initDefaultTypes
argument_list|()
expr_stmt|;
name|initDefaultFactories
argument_list|()
expr_stmt|;
block|}
comment|/**      * Registers default extended types. This method is called from constructor.      */
specifier|protected
name|void
name|initDefaultTypes
parameter_list|()
block|{
comment|// void placeholder
name|registerType
argument_list|(
operator|new
name|VoidType
argument_list|()
argument_list|)
expr_stmt|;
comment|// register default types
name|Iterator
name|it
init|=
name|DefaultType
operator|.
name|defaultTypes
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|registerType
argument_list|(
operator|new
name|DefaultType
argument_list|(
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Registers default factories for creating enum types and serializable types. Note      * that user-defined factories are consulted before any default factory.      *       * @since 3.0      */
specifier|protected
name|void
name|initDefaultFactories
parameter_list|()
block|{
name|internalTypeFactories
operator|=
operator|new
name|ArrayList
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|internalTypeFactories
operator|.
name|add
argument_list|(
operator|new
name|EnumTypeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|internalTypeFactories
operator|.
name|add
argument_list|(
operator|new
name|ByteOrCharArrayFactory
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
comment|// note that Serializable type should be used as a last resort after all other
comment|// alternatives are exhausted.
name|internalTypeFactories
operator|.
name|add
argument_list|(
operator|new
name|SerializableTypeFactory
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns ExtendedTypeFactories registered with this instance.      *       * @since 1.2      */
specifier|public
name|Collection
name|getFactories
parameter_list|()
block|{
return|return
name|extendedTypeFactories
operator|!=
literal|null
condition|?
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|extendedTypeFactories
argument_list|)
else|:
name|Collections
operator|.
name|EMPTY_SET
return|;
block|}
comment|/**      * Adds an ExtendedTypeFactory that will be consulted if no direct mapping for a given      * class exists. This feature can be used to map interfaces.      *<p>      *<i>Note that the order in which factories are added is important, as factories are      * consulted in turn when an ExtendedType is looked up, and lookup is stopped when any      * factory provides a non-null type.</i>      *</p>      *       * @since 1.2      */
specifier|public
name|void
name|addFactory
parameter_list|(
name|ExtendedTypeFactory
name|factory
parameter_list|)
block|{
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Attempt to add null factory"
argument_list|)
throw|;
block|}
if|if
condition|(
name|extendedTypeFactories
operator|==
literal|null
condition|)
block|{
name|extendedTypeFactories
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
name|extendedTypeFactories
operator|.
name|add
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes a factory from the regsitered factories if it was previosly added.      *       * @since 1.2      */
specifier|public
name|void
name|removeFactory
parameter_list|(
name|ExtendedTypeFactory
name|factory
parameter_list|)
block|{
if|if
condition|(
name|factory
operator|!=
literal|null
operator|&&
name|extendedTypeFactories
operator|!=
literal|null
condition|)
block|{
comment|// nullify for consistency
if|if
condition|(
name|extendedTypeFactories
operator|.
name|remove
argument_list|(
name|factory
argument_list|)
operator|&&
name|extendedTypeFactories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|extendedTypeFactories
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Adds a new type to the list of registered types. If there is another type      * registered for a class described by the<code>type</code> argument, the old      * handler is overridden by the new one.      */
specifier|public
name|void
name|registerType
parameter_list|(
name|ExtendedType
name|type
parameter_list|)
block|{
name|typeMap
operator|.
name|put
argument_list|(
name|type
operator|.
name|getClassName
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
comment|// factory to handle subclasses of type.className
name|addFactory
argument_list|(
operator|new
name|SubclassTypeFactory
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a default ExtendedType that is used to handle unmapped types.      */
specifier|public
name|ExtendedType
name|getDefaultType
parameter_list|()
block|{
return|return
name|defaultType
return|;
block|}
comment|/**      * Returns a guaranteed non-null ExtendedType instance for a given Java class name. The      * following lookup sequence is used to determine the type:      *<ul>      *<li>First the methods checks for an ExtendedType explicitly registered with the      * map for a given class name (most common types are registered by Cayenne internally;      * users can register their own).</li>      *<li>Second, the method tries to obtain a type by iterating through      * {@link ExtendedTypeFactory} instances registered by users. If a factory returns a      * non-null type, it is returned to the user and the rest of the factories are      * ignored.</li>      *<li>Third, the method iterates through standard {@link ExtendedTypeFactory}      * instances that can dynamically construct extended types for serializable objects      * and JDK 1.5 enums.</li>      *<li>If all the methods above failed, the default type is returned that relies on      * default JDBC driver mapping to set and get objects.</li>      *</ul>      *<i>Note that for array types class name must be in the form 'MyClass[]'</i>.      */
specifier|public
name|ExtendedType
name|getRegisteredType
parameter_list|(
name|String
name|javaClassName
parameter_list|)
block|{
name|ExtendedType
name|type
init|=
name|getExplictlyRegisteredType
argument_list|(
name|javaClassName
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|type
return|;
block|}
name|type
operator|=
name|getDefaultType
argument_list|(
name|javaClassName
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
comment|// register to speed up future access
name|registerType
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|type
return|;
block|}
return|return
name|getDefaultType
argument_list|()
return|;
block|}
name|ExtendedType
name|getExplictlyRegisteredType
parameter_list|(
name|String
name|className
parameter_list|)
block|{
return|return
operator|(
name|ExtendedType
operator|)
name|typeMap
operator|.
name|get
argument_list|(
name|className
argument_list|)
return|;
block|}
comment|/**      * Returns a type registered for the class name. If no such type exists, returns the      * default type. It is guaranteed that this method returns a non-null ExtendedType      * instance.      */
specifier|public
name|ExtendedType
name|getRegisteredType
parameter_list|(
name|Class
name|javaClass
parameter_list|)
block|{
name|String
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|javaClass
operator|.
name|isArray
argument_list|()
condition|)
block|{
comment|// only support single dimensional arrays now
name|name
operator|=
name|javaClass
operator|.
name|getComponentType
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[]"
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|javaClass
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|getRegisteredType
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Removes registered ExtendedType object corresponding to<code>javaClassName</code>      * parameter.      */
specifier|public
name|void
name|unregisterType
parameter_list|(
name|String
name|javaClassName
parameter_list|)
block|{
name|typeMap
operator|.
name|remove
argument_list|(
name|javaClassName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns array of Java class names supported by Cayenne for JDBC mapping.      */
specifier|public
name|String
index|[]
name|getRegisteredTypeNames
parameter_list|()
block|{
name|Set
name|keys
init|=
name|typeMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|keys
operator|.
name|size
argument_list|()
decl_stmt|;
name|String
index|[]
name|types
init|=
operator|new
name|String
index|[
name|len
index|]
decl_stmt|;
name|Iterator
name|it
init|=
name|keys
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|types
return|;
block|}
comment|/**      * @deprecated since 3.0 - use {@link #createType(String)} instead.      * @since 1.2      */
specifier|protected
name|ExtendedType
name|getDefaultType
parameter_list|(
name|String
name|javaClassName
parameter_list|)
block|{
return|return
name|createType
argument_list|(
name|javaClassName
argument_list|)
return|;
block|}
comment|/**      * Returns a default type for specific Java classes. This implementation supports      * dynamically loading EnumType handlers for concrete Enum classes (assuming the      * application runs under JDK1.5+).      *       * @return a default type for a given class or null if a class has no default type      *         mapping.      * @since 1.2      */
specifier|protected
name|ExtendedType
name|createType
parameter_list|(
name|String
name|className
parameter_list|)
block|{
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Class
name|typeClass
decl_stmt|;
try|try
block|{
name|typeClass
operator|=
name|Util
operator|.
name|getJavaClass
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
comment|// ignore exceptions...
return|return
literal|null
return|;
block|}
comment|// lookup in user factories first
if|if
condition|(
name|extendedTypeFactories
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|it
init|=
name|extendedTypeFactories
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExtendedTypeFactory
name|factory
init|=
operator|(
name|ExtendedTypeFactory
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExtendedType
name|type
init|=
name|factory
operator|.
name|getType
argument_list|(
name|typeClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|type
return|;
block|}
block|}
block|}
comment|// lookup in internal factories
name|Iterator
name|it
init|=
name|internalTypeFactories
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExtendedTypeFactory
name|factory
init|=
operator|(
name|ExtendedTypeFactory
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ExtendedType
name|type
init|=
name|factory
operator|.
name|getType
argument_list|(
name|typeClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|type
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

