begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|sqlite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|CallableStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|UtilDateType
import|;
end_import

begin_comment
comment|/**  * Implements special date handling for SQLite. See  * http://www.zentus.com/sqlitejdbc/usage.html for details.  *   * @author Andrus Adamchik  * @since 3.0  */
end_comment

begin_class
class|class
name|SQLiteDateType
extends|extends
name|UtilDateType
block|{
specifier|public
name|Object
name|materializeObject
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|Date
name|val
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Types
operator|.
name|TIMESTAMP
case|:
name|val
operator|=
name|rs
operator|.
name|getTimestamp
argument_list|(
name|index
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|DATE
case|:
name|val
operator|=
name|rs
operator|.
name|getDate
argument_list|(
name|index
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|TIME
case|:
name|val
operator|=
name|rs
operator|.
name|getTime
argument_list|(
name|index
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// here instead of failing like the super does, simply attempt to convert
comment|// to timestamp (note that 'getObject' may return a String... SQLite is
comment|// not very robust in type conversions.
name|val
operator|=
name|rs
operator|.
name|getTimestamp
argument_list|(
name|index
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
operator|(
name|rs
operator|.
name|wasNull
argument_list|()
operator|)
condition|?
literal|null
else|:
operator|new
name|Date
argument_list|(
name|val
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Object
name|materializeObject
parameter_list|(
name|CallableStatement
name|cs
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|val
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Types
operator|.
name|TIMESTAMP
case|:
name|val
operator|=
name|cs
operator|.
name|getTimestamp
argument_list|(
name|index
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|DATE
case|:
name|val
operator|=
name|cs
operator|.
name|getDate
argument_list|(
name|index
argument_list|)
expr_stmt|;
break|break;
case|case
name|Types
operator|.
name|TIME
case|:
name|val
operator|=
name|cs
operator|.
name|getTime
argument_list|(
name|index
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// here instead of failing like the super does, simply attempt to convert
comment|// to timestamp (note that 'getObject' may return a String... SQLite is
comment|// not very robust in type conversions.
name|val
operator|=
name|cs
operator|.
name|getTimestamp
argument_list|(
name|index
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
operator|(
name|cs
operator|.
name|wasNull
argument_list|()
operator|)
condition|?
literal|null
else|:
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|(
operator|(
operator|(
name|java
operator|.
name|util
operator|.
name|Date
operator|)
name|val
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

