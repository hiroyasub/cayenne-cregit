begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistenceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|RelationshipQuery
import|;
end_import

begin_comment
comment|/**  * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|ToOneFault
extends|extends
name|Fault
block|{
comment|/**      * Resolves this fault to a DataObject.      */
specifier|public
name|Object
name|resolveFault
parameter_list|(
name|Persistent
name|sourceObject
parameter_list|,
name|String
name|relationshipName
parameter_list|)
block|{
name|int
name|state
init|=
name|sourceObject
operator|.
name|getPersistenceState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|PersistenceState
operator|.
name|NEW
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|target
init|=
name|doResolveFault
argument_list|(
name|sourceObject
argument_list|,
name|relationshipName
argument_list|)
decl_stmt|;
comment|// must update the diff for the object
name|ObjectContext
name|context
init|=
name|sourceObject
operator|.
name|getObjectContext
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|state
operator|==
name|PersistenceState
operator|.
name|MODIFIED
operator|||
name|state
operator|==
name|PersistenceState
operator|.
name|DELETED
operator|)
operator|&&
name|context
operator|instanceof
name|DataContext
condition|)
block|{
name|ObjectDiff
name|diff
init|=
operator|(
name|ObjectDiff
operator|)
operator|(
operator|(
name|DataContext
operator|)
name|context
operator|)
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getChangesByObjectId
argument_list|()
operator|.
name|get
argument_list|(
name|sourceObject
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|null
condition|)
block|{
name|diff
operator|.
name|updateArcSnapshot
argument_list|(
name|relationshipName
argument_list|,
operator|(
name|Persistent
operator|)
name|target
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|target
return|;
block|}
name|Object
name|doResolveFault
parameter_list|(
name|Persistent
name|sourceObject
parameter_list|,
name|String
name|relationshipName
parameter_list|)
block|{
name|RelationshipQuery
name|query
init|=
operator|new
name|RelationshipQuery
argument_list|(
name|sourceObject
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|relationshipName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
name|objects
init|=
name|sourceObject
operator|.
name|getObjectContext
argument_list|()
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|objects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|objects
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error resolving to-one fault. "
operator|+
literal|"More than one object found. "
operator|+
literal|"Source Id: "
operator|+
name|sourceObject
operator|.
name|getObjectId
argument_list|()
operator|+
literal|", relationship: "
operator|+
name|relationshipName
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

