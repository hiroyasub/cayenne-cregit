begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A callback method of an {@link EntityListener}. CallbackMethod can be associated with  * one or more callback events.  *   * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|CallbackMethod
block|{
specifier|protected
name|String
name|name
decl_stmt|;
specifier|protected
name|Set
name|callbackEvents
decl_stmt|;
specifier|public
name|CallbackMethod
parameter_list|()
block|{
name|callbackEvents
operator|=
operator|new
name|HashSet
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CallbackMethod
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Returns callback method name.      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|methodName
expr_stmt|;
block|}
comment|/**      * Returns all supported callback events. The collection contains java.lang.Integer      * instances corresponding to callback events defined in      * {@link LifecycleEventCallback#CALLBACKS}.      */
specifier|public
name|Collection
name|getCallbackEvents
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|callbackEvents
argument_list|)
return|;
block|}
specifier|public
name|void
name|addCallbackEvent
parameter_list|(
name|int
name|eventType
parameter_list|)
block|{
if|if
condition|(
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|LifecycleEventCallback
operator|.
name|CALLBACKS
argument_list|,
name|eventType
argument_list|)
operator|!=
name|eventType
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid callback: "
operator|+
name|eventType
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|callbackEvents
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|eventType
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Duplicate callback: "
operator|+
name|eventType
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|removeCallbackEvent
parameter_list|(
name|int
name|eventType
parameter_list|)
block|{
name|callbackEvents
operator|.
name|remove
argument_list|(
operator|new
name|Integer
argument_list|(
name|eventType
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|supportsCallbackEvent
parameter_list|(
name|int
name|eventType
parameter_list|)
block|{
return|return
name|callbackEvents
operator|.
name|contains
argument_list|(
operator|new
name|Integer
argument_list|(
name|eventType
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

