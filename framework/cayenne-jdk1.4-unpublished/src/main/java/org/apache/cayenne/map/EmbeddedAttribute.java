begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLEncoder
import|;
end_import

begin_comment
comment|/**  * An attribute of the ObjEntity that maps to an embeddable class.  *   * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|EmbeddedAttribute
extends|extends
name|Attribute
block|{
specifier|protected
name|String
name|type
decl_stmt|;
specifier|protected
name|Map
name|attributeOverrides
decl_stmt|;
specifier|public
name|EmbeddedAttribute
parameter_list|()
block|{
name|attributeOverrides
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
specifier|public
name|EmbeddedAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EmbeddedAttribute
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|ObjEntity
name|entity
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|setEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|encodeAsXML
parameter_list|(
name|XMLEncoder
name|encoder
parameter_list|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"<embedded-attribute name=\""
operator|+
name|getName
argument_list|()
operator|+
literal|'\"'
argument_list|)
expr_stmt|;
if|if
condition|(
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|" type=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attributeOverrides
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|encoder
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
return|return;
block|}
name|encoder
operator|.
name|println
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|indent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|attributeOverrides
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|e
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|encoder
operator|.
name|print
argument_list|(
literal|"<embeddable-attribute-override name=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
literal|"\" db-attribute-path=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|println
argument_list|(
literal|"\"/>"
argument_list|)
expr_stmt|;
block|}
name|encoder
operator|.
name|indent
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|println
argument_list|(
literal|"</embedded-attribute>"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
name|getAttributeOverrides
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|attributeOverrides
argument_list|)
return|;
block|}
specifier|public
name|Embeddable
name|getEmbeddable
parameter_list|()
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getNonNullNamespace
argument_list|()
operator|.
name|getEmbeddable
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * Returns a Collection of ObjAttributes of an embedded object taking into account      * column name overrides.      */
specifier|public
name|Collection
name|getAttributes
parameter_list|()
block|{
name|Embeddable
name|e
init|=
name|getEmbeddable
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
name|Collection
name|embeddableAttributes
init|=
name|e
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|Collection
name|objectAttributes
init|=
operator|new
name|ArrayList
argument_list|(
name|embeddableAttributes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|embeddableAttributes
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|EmbeddableAttribute
name|ea
init|=
operator|(
name|EmbeddableAttribute
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|ea
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|dbPath
init|=
operator|(
name|String
operator|)
name|attributeOverrides
operator|.
name|get
argument_list|(
name|ea
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbPath
operator|==
literal|null
condition|)
block|{
name|dbPath
operator|=
name|ea
operator|.
name|getDbAttributeName
argument_list|()
expr_stmt|;
block|}
name|ObjAttribute
name|oa
init|=
operator|new
name|ObjAttribute
argument_list|(
name|path
argument_list|,
name|getType
argument_list|()
argument_list|,
operator|(
name|ObjEntity
operator|)
name|getEntity
argument_list|()
argument_list|)
decl_stmt|;
name|oa
operator|.
name|setDbAttributeName
argument_list|(
name|dbPath
argument_list|)
expr_stmt|;
name|objectAttributes
operator|.
name|add
argument_list|(
name|oa
argument_list|)
expr_stmt|;
block|}
return|return
name|objectAttributes
return|;
block|}
specifier|public
name|void
name|addAttributeOverride
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|dbAttributeName
parameter_list|)
block|{
name|attributeOverrides
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|dbAttributeName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeAttributeOverride
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|attributeOverrides
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a type of this attribute that must be an {@link Embeddable} object.      */
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Sets a type of this attribute that must be an {@link Embeddable} object.      */
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/**      * Returns guaranteed non-null MappingNamespace of this relationship. If it happens to      * be null, and exception is thrown. This method is intended for internal use by      * Relationship class.      */
specifier|final
name|MappingNamespace
name|getNonNullNamespace
parameter_list|()
block|{
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Embedded attribute '"
operator|+
name|getName
argument_list|()
operator|+
literal|"' has no parent Entity."
argument_list|)
throw|;
block|}
return|return
name|entity
operator|.
name|getNonNullNamespace
argument_list|()
return|;
block|}
block|}
end_class

end_unit

