begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ToManyMapProperty
import|;
end_import

begin_comment
comment|/**  * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
class|class
name|DataObjectToManyMapProperty
extends|extends
name|DataObjectToManyProperty
implements|implements
name|ToManyMapProperty
block|{
specifier|private
name|Expression
name|mapKey
decl_stmt|;
name|DataObjectToManyMapProperty
parameter_list|(
name|ObjRelationship
name|relationship
parameter_list|,
name|ClassDescriptor
name|targetDescriptor
parameter_list|,
name|Fault
name|fault
parameter_list|,
name|Expression
name|mapKey
parameter_list|)
block|{
name|super
argument_list|(
name|relationship
argument_list|,
name|targetDescriptor
argument_list|,
name|fault
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapKey
operator|=
name|mapKey
expr_stmt|;
block|}
specifier|public
name|void
name|remapTarget
parameter_list|(
name|Object
name|source
parameter_list|,
name|Object
name|target
parameter_list|)
throws|throws
name|PropertyException
block|{
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null target"
argument_list|)
throw|;
block|}
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|readProperty
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|Object
name|newKey
init|=
name|mapKey
operator|.
name|evaluate
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|Object
name|currentValue
init|=
name|map
operator|.
name|get
argument_list|(
name|newKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentValue
operator|==
name|target
condition|)
block|{
comment|// nothing to do
return|return;
block|}
comment|// else - do not check for conflicts here (i.e. another object mapped for the same
comment|// key), as we have no control of the order in which this method is called, so
comment|// another object may be remapped later by the caller
comment|// must do a slow map scan to ensure the object is not mapped under a different
comment|// key...
name|Iterator
name|it
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|e
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|==
name|target
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|map
operator|.
name|put
argument_list|(
name|newKey
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

