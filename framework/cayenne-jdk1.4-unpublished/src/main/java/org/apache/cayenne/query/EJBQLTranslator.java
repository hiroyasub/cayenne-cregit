begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLBaseVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLCompiledExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLExpression
import|;
end_import

begin_comment
comment|/**  * A translator of {@link EJBQLExpression} statements into the database SQL.  *   * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
class|class
name|EJBQLTranslator
extends|extends
name|EJBQLBaseVisitor
block|{
specifier|private
name|Map
name|aliases
decl_stmt|;
specifier|private
name|StringBuffer
name|buffer
decl_stmt|;
specifier|private
name|EJBQLCompiledExpression
name|compiledExpression
decl_stmt|;
name|EJBQLTranslator
parameter_list|(
name|EJBQLCompiledExpression
name|compiledExpression
parameter_list|)
block|{
name|super
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|compiledExpression
operator|=
name|compiledExpression
expr_stmt|;
block|}
name|String
name|translate
parameter_list|()
block|{
name|this
operator|.
name|buffer
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|compiledExpression
operator|.
name|getExpression
argument_list|()
operator|.
name|visit
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|buffer
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
name|boolean
name|visitSelect
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|EJBQLSelectTranslator
name|visitor
init|=
operator|new
name|EJBQLSelectTranslator
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|expression
operator|.
name|visit
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitDelete
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|visitUpdate
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented"
argument_list|)
throw|;
block|}
name|StringBuffer
name|getBuffer
parameter_list|()
block|{
return|return
name|buffer
return|;
block|}
name|EJBQLCompiledExpression
name|getCompiledExpression
parameter_list|()
block|{
return|return
name|compiledExpression
return|;
block|}
comment|/**      * Retrieves a SQL alias for the combination of EJBQL id variable and a table name. If      * such alias hasn't been used, it is created on the fly.      */
name|String
name|createAlias
parameter_list|(
name|String
name|idVariable
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|String
name|key
init|=
name|idVariable
operator|+
literal|":"
operator|+
name|tableName
decl_stmt|;
name|String
name|alias
decl_stmt|;
if|if
condition|(
name|aliases
operator|!=
literal|null
condition|)
block|{
name|alias
operator|=
operator|(
name|String
operator|)
name|aliases
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aliases
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|alias
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|alias
operator|==
literal|null
condition|)
block|{
name|alias
operator|=
literal|"t"
operator|+
name|aliases
operator|.
name|size
argument_list|()
expr_stmt|;
name|aliases
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|alias
argument_list|)
expr_stmt|;
block|}
return|return
name|alias
return|;
block|}
block|}
end_class

end_unit

