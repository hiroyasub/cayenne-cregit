begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dataview
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ObjectUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|Validate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_comment
comment|/**  * Descriptor for a single view field.  *   * @since 1.1  * @author Andriy Shapochka  */
end_comment

begin_class
specifier|public
class|class
name|ObjEntityViewField
block|{
comment|//ObjEntityView this field belongs to (owner of this field)
specifier|private
name|ObjEntityView
name|owner
decl_stmt|;
comment|//This field maps whether to an ObjAttribute of the ObjEntity
comment|//the owner (view) corresponds to or an ObjRelationship with
comment|//the ObjEntity as a source in case this field is a lookup field
specifier|private
name|ObjAttribute
name|objAttribute
decl_stmt|;
specifier|private
name|ObjRelationship
name|objRelationship
decl_stmt|;
comment|//Field name - unique in the owner's context
specifier|private
name|String
name|name
init|=
literal|""
decl_stmt|;
comment|//field's data type, cannot be null
specifier|private
name|DataTypeEnum
name|dataType
init|=
name|DataTypeEnum
operator|.
name|UNKNOWN_TYPE
decl_stmt|;
comment|//field's calculation type, cannot be null
specifier|private
name|CalcTypeEnum
name|calcType
init|=
name|CalcTypeEnum
operator|.
name|NO_CALC_TYPE
decl_stmt|;
comment|//used for labeling (captioning) of this field in the GUI
comment|//in a JTable or on the input form, for example
specifier|private
name|String
name|caption
init|=
literal|""
decl_stmt|;
comment|//display format of the values for this field,
comment|//may differ from the edit format
comment|//for example, 1234567.5 dollars can be displayed as $1,234,567.50
comment|//but for edit it is more convenient to accept plain 1234567.5
specifier|private
name|Format
name|displayFormat
init|=
literal|null
decl_stmt|;
comment|//edit format of the values for this field
specifier|private
name|Format
name|editFormat
init|=
literal|null
decl_stmt|;
comment|//preferred index hints how the field should be placed in the ordered
comment|//list of all the fields of the owner.
specifier|private
name|int
name|preferredIndex
init|=
operator|-
literal|1
decl_stmt|;
comment|//its actual index in the list of the fields
specifier|private
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
comment|//editability hint to the GUI
specifier|private
name|boolean
name|editable
init|=
literal|true
decl_stmt|;
comment|//visibility hint to the GUI
specifier|private
name|boolean
name|visible
init|=
literal|true
decl_stmt|;
comment|//the field may have a default value
specifier|private
name|Object
name|defaultValue
init|=
literal|null
decl_stmt|;
comment|//if the calc type is lookup then the field must refer to another field
comment|//to use its values
specifier|private
name|ObjEntityViewField
name|lookupField
init|=
literal|null
decl_stmt|;
specifier|public
name|ObjEntityViewField
parameter_list|()
block|{
block|}
specifier|public
name|ObjEntityView
name|getOwner
parameter_list|()
block|{
return|return
name|owner
return|;
block|}
specifier|public
name|DataView
name|getRootOwner
parameter_list|()
block|{
return|return
name|getOwner
argument_list|()
operator|.
name|getOwner
argument_list|()
return|;
block|}
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
specifier|public
name|int
name|getPreferredIndex
parameter_list|()
block|{
return|return
name|preferredIndex
return|;
block|}
specifier|public
name|void
name|setPreferredIndex
parameter_list|(
name|int
name|preferredIndex
parameter_list|)
block|{
name|Validate
operator|.
name|isTrue
argument_list|(
name|preferredIndex
operator|>=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|preferredIndex
operator|=
name|preferredIndex
expr_stmt|;
block|}
specifier|public
name|boolean
name|isVisible
parameter_list|()
block|{
return|return
name|visible
return|;
block|}
specifier|public
name|void
name|setVisible
parameter_list|(
name|boolean
name|visible
parameter_list|)
block|{
name|this
operator|.
name|visible
operator|=
name|visible
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Validate
operator|.
name|notNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|ObjAttribute
name|getObjAttribute
parameter_list|()
block|{
return|return
name|objAttribute
return|;
block|}
specifier|public
name|void
name|setObjAttribute
parameter_list|(
name|ObjAttribute
name|objAttribute
parameter_list|)
block|{
name|Validate
operator|.
name|notNull
argument_list|(
name|objAttribute
argument_list|)
expr_stmt|;
name|this
operator|.
name|objAttribute
operator|=
name|objAttribute
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEditable
parameter_list|()
block|{
return|return
name|editable
return|;
block|}
specifier|public
name|void
name|setEditable
parameter_list|(
name|boolean
name|editable
parameter_list|)
block|{
name|this
operator|.
name|editable
operator|=
name|editable
expr_stmt|;
block|}
specifier|public
name|String
name|getCaption
parameter_list|()
block|{
return|return
name|caption
return|;
block|}
specifier|public
name|void
name|setCaption
parameter_list|(
name|String
name|caption
parameter_list|)
block|{
name|this
operator|.
name|caption
operator|=
name|caption
expr_stmt|;
block|}
name|void
name|setOwner
parameter_list|(
name|ObjEntityView
name|owner
parameter_list|)
block|{
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
block|}
name|void
name|setIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Validate
operator|.
name|isTrue
argument_list|(
name|owner
operator|==
literal|null
operator|||
name|index
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
specifier|public
name|Class
name|getJavaClass
parameter_list|()
block|{
return|return
name|getRootOwner
argument_list|()
operator|.
name|getDataTypeSpec
argument_list|()
operator|.
name|getJavaClass
argument_list|(
name|dataType
argument_list|)
return|;
block|}
specifier|public
name|Object
name|getValue
parameter_list|(
name|DataObject
name|obj
parameter_list|)
block|{
name|Object
name|rawValue
init|=
name|getRawValue
argument_list|(
name|obj
argument_list|)
decl_stmt|;
return|return
name|toValue
argument_list|(
name|rawValue
argument_list|)
return|;
block|}
specifier|public
name|Object
name|toValue
parameter_list|(
name|Object
name|rawValue
parameter_list|)
block|{
name|Object
name|v
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isLookup
argument_list|()
condition|)
block|{
if|if
condition|(
name|rawValue
operator|instanceof
name|DataObject
condition|)
name|v
operator|=
name|lookupField
operator|.
name|getValue
argument_list|(
operator|(
name|DataObject
operator|)
name|rawValue
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
if|if
condition|(
name|rawValue
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|v
operator|=
name|getRootOwner
argument_list|()
operator|.
name|getDataTypeSpec
argument_list|()
operator|.
name|toDataType
argument_list|(
name|dataType
argument_list|,
name|rawValue
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
specifier|public
name|Object
name|toRawValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|DataView
name|rootOwner
init|=
name|getOwner
argument_list|()
operator|.
name|getOwner
argument_list|()
decl_stmt|;
if|if
condition|(
name|isLookup
argument_list|()
condition|)
block|{
return|return
name|rootOwner
operator|.
name|getLookupCache
argument_list|()
operator|.
name|getDataObject
argument_list|(
name|lookupField
argument_list|,
name|value
argument_list|)
return|;
block|}
if|if
condition|(
name|objAttribute
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|type
init|=
name|objAttribute
operator|.
name|getType
argument_list|()
decl_stmt|;
name|Object
name|v
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Class
name|untypedValueClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|v
operator|=
name|rootOwner
operator|.
name|getDataTypeSpec
argument_list|()
operator|.
name|fromDataType
argument_list|(
name|untypedValueClass
argument_list|,
name|dataType
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|v
return|;
block|}
specifier|public
name|void
name|setValue
parameter_list|(
name|DataObject
name|obj
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Object
name|rawValue
init|=
name|toRawValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|Object
name|oldValue
init|=
name|getValue
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|setRawValue
argument_list|(
name|obj
argument_list|,
name|rawValue
argument_list|)
expr_stmt|;
name|getRootOwner
argument_list|()
operator|.
name|fireFieldValueChangeEvent
argument_list|(
name|this
argument_list|,
name|obj
argument_list|,
name|oldValue
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getFormattedValue
parameter_list|(
name|DataObject
name|obj
parameter_list|)
block|{
name|Object
name|value
init|=
name|getRawValue
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|String
name|formattedValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|isLookup
argument_list|()
condition|)
block|{
name|Format
name|f
init|=
operator|(
name|displayFormat
operator|!=
literal|null
condition|?
name|displayFormat
else|:
name|editFormat
operator|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
name|formattedValue
operator|=
name|ObjectUtils
operator|.
name|toString
argument_list|(
name|value
argument_list|)
expr_stmt|;
else|else
block|{
try|try
block|{
name|formattedValue
operator|=
name|f
operator|.
name|format
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|formattedValue
operator|=
literal|""
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|formattedValue
operator|=
name|lookupField
operator|.
name|getFormattedValue
argument_list|(
operator|(
name|DataObject
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|formattedValue
return|;
block|}
specifier|public
name|Object
name|getRawValue
parameter_list|(
name|DataObject
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Object
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|isLookup
argument_list|()
operator|&&
name|objAttribute
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|obj
operator|.
name|readProperty
argument_list|(
name|objAttribute
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isLookup
argument_list|()
operator|&&
name|objRelationship
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|obj
operator|.
name|readProperty
argument_list|(
name|objRelationship
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
specifier|public
name|void
name|setRawValue
parameter_list|(
name|DataObject
name|obj
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|isLookup
argument_list|()
operator|&&
name|objAttribute
operator|!=
literal|null
condition|)
block|{
name|obj
operator|.
name|writeProperty
argument_list|(
name|objAttribute
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isLookup
argument_list|()
operator|&&
name|objRelationship
operator|!=
literal|null
condition|)
block|{
name|obj
operator|.
name|setToOneTarget
argument_list|(
name|objRelationship
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|DataObject
operator|)
name|value
argument_list|,
name|objRelationship
operator|.
name|getReverseRelationship
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|DataTypeEnum
name|getDataType
parameter_list|()
block|{
return|return
name|dataType
return|;
block|}
specifier|public
name|void
name|setDataType
parameter_list|(
name|DataTypeEnum
name|dataType
parameter_list|)
block|{
name|Validate
operator|.
name|notNull
argument_list|(
name|dataType
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataType
operator|=
name|dataType
expr_stmt|;
block|}
specifier|public
name|CalcTypeEnum
name|getCalcType
parameter_list|()
block|{
return|return
name|calcType
return|;
block|}
specifier|public
name|void
name|setCalcType
parameter_list|(
name|CalcTypeEnum
name|calcType
parameter_list|)
block|{
name|Validate
operator|.
name|notNull
argument_list|(
name|calcType
argument_list|)
expr_stmt|;
name|this
operator|.
name|calcType
operator|=
name|calcType
expr_stmt|;
block|}
specifier|public
name|Object
name|getDefaultValue
parameter_list|()
block|{
return|return
name|defaultValue
return|;
block|}
specifier|public
name|void
name|setDefaultValue
parameter_list|(
name|Object
name|defaultValue
parameter_list|)
block|{
name|this
operator|.
name|defaultValue
operator|=
name|defaultValue
expr_stmt|;
block|}
specifier|public
name|ObjRelationship
name|getObjRelationship
parameter_list|()
block|{
return|return
name|objRelationship
return|;
block|}
specifier|public
name|void
name|setObjRelationship
parameter_list|(
name|ObjRelationship
name|objRelationship
parameter_list|)
block|{
name|Validate
operator|.
name|notNull
argument_list|(
name|objRelationship
argument_list|)
expr_stmt|;
name|this
operator|.
name|objRelationship
operator|=
name|objRelationship
expr_stmt|;
block|}
specifier|public
name|boolean
name|isLookup
parameter_list|()
block|{
return|return
name|CalcTypeEnum
operator|.
name|LOOKUP_TYPE
operator|.
name|equals
argument_list|(
name|calcType
argument_list|)
return|;
block|}
specifier|public
name|Object
index|[]
name|getLookupValues
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isLookup
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|getRootOwner
argument_list|()
operator|.
name|getLookupCache
argument_list|()
operator|.
name|getCachedValues
argument_list|(
name|lookupField
argument_list|)
return|;
block|}
specifier|public
name|ObjEntityViewField
name|getLookupField
parameter_list|()
block|{
return|return
name|lookupField
return|;
block|}
specifier|public
name|void
name|setLookupField
parameter_list|(
name|ObjEntityViewField
name|lookupField
parameter_list|)
block|{
name|this
operator|.
name|lookupField
operator|=
name|lookupField
expr_stmt|;
block|}
specifier|public
name|Format
name|getDisplayFormat
parameter_list|()
block|{
if|if
condition|(
name|displayFormat
operator|==
literal|null
operator|&&
name|isLookup
argument_list|()
operator|&&
name|lookupField
operator|!=
literal|null
operator|&&
name|lookupField
operator|!=
name|this
condition|)
return|return
name|lookupField
operator|.
name|getDisplayFormat
argument_list|()
return|;
return|return
name|displayFormat
return|;
block|}
specifier|public
name|void
name|setDisplayFormat
parameter_list|(
name|Format
name|displayFormat
parameter_list|)
block|{
name|this
operator|.
name|displayFormat
operator|=
name|displayFormat
expr_stmt|;
block|}
specifier|public
name|Format
name|getEditFormat
parameter_list|()
block|{
if|if
condition|(
name|editFormat
operator|==
literal|null
operator|&&
name|isLookup
argument_list|()
operator|&&
name|lookupField
operator|!=
literal|null
operator|&&
name|lookupField
operator|!=
name|this
condition|)
return|return
name|lookupField
operator|.
name|getEditFormat
argument_list|()
return|;
return|return
name|editFormat
return|;
block|}
specifier|public
name|void
name|setEditFormat
parameter_list|(
name|Format
name|editFormat
parameter_list|)
block|{
name|this
operator|.
name|editFormat
operator|=
name|editFormat
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSameObjAttribute
parameter_list|(
name|ObjEntityViewField
name|field
parameter_list|)
block|{
if|if
condition|(
name|objAttribute
operator|!=
literal|null
condition|)
block|{
name|ObjAttribute
name|fieldAttribute
init|=
name|field
operator|.
name|getObjAttribute
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldAttribute
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|same
init|=
operator|(
name|objAttribute
operator|.
name|equals
argument_list|(
name|fieldAttribute
argument_list|)
operator|||
operator|(
name|objAttribute
operator|.
name|getEntity
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldAttribute
operator|.
name|getEntity
argument_list|()
argument_list|)
operator|&&
name|objAttribute
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldAttribute
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
operator|)
decl_stmt|;
return|return
name|same
return|;
block|}
if|else if
condition|(
name|isLookup
argument_list|()
condition|)
block|{
if|if
condition|(
name|field
operator|.
name|isLookup
argument_list|()
condition|)
return|return
name|getLookupField
argument_list|()
operator|.
name|isSameObjAttribute
argument_list|(
name|field
operator|.
name|getLookupField
argument_list|()
argument_list|)
return|;
else|else
return|return
name|getLookupField
argument_list|()
operator|.
name|isSameObjAttribute
argument_list|(
name|field
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

