begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLDelegatingVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_comment
comment|/**  * A translator of EJBQL select statements into SQL.  *   * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
class|class
name|EJBQLSelectTranslator
extends|extends
name|EJBQLDelegatingVisitor
block|{
specifier|private
name|EJBQLTranslator
name|parent
decl_stmt|;
specifier|private
name|Set
name|columns
decl_stmt|;
specifier|private
name|StringBuffer
name|fromClause
decl_stmt|;
specifier|private
name|Set
name|fromIds
decl_stmt|;
specifier|private
name|Set
name|innerJoins
decl_stmt|;
name|EJBQLSelectTranslator
parameter_list|(
name|EJBQLTranslator
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
name|void
name|appendRootIdentifier
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
if|if
condition|(
name|fromIds
operator|==
literal|null
condition|)
block|{
name|fromIds
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
block|}
name|fromIds
operator|.
name|add
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
block|}
name|void
name|appendInnerJoin
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|innerJoins
operator|==
literal|null
condition|)
block|{
name|innerJoins
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
block|}
name|innerJoins
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|void
name|appendColumn
parameter_list|(
name|String
name|identifier
parameter_list|,
name|DbAttribute
name|column
parameter_list|)
block|{
name|appendColumn
argument_list|(
name|identifier
argument_list|,
name|column
argument_list|,
name|TypesMapping
operator|.
name|getJavaBySqlType
argument_list|(
name|column
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|appendColumn
parameter_list|(
name|String
name|identifier
parameter_list|,
name|DbAttribute
name|column
parameter_list|,
name|String
name|javaType
parameter_list|)
block|{
name|DbEntity
name|table
init|=
operator|(
name|DbEntity
operator|)
name|column
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|String
name|alias
init|=
name|parent
operator|.
name|createAlias
argument_list|(
name|identifier
argument_list|,
name|table
operator|.
name|getFullyQualifiedName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|columnName
init|=
name|alias
operator|+
literal|"."
operator|+
name|column
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|columns
operator|==
literal|null
condition|)
block|{
name|columns
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|columns
operator|.
name|add
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
comment|// using #result directive:
comment|// 1. to ensure that DB default captalization rules won't lead to changing
comment|// result columns capitalization, as #result() gives SQLTemplate a hint as to
comment|// what name is expected by the caller.
comment|// 2. to ensure proper type conversion
name|parent
operator|.
name|getBuffer
argument_list|()
operator|.
name|append
argument_list|(
name|columns
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
literal|", "
else|:
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
literal|"#result('"
argument_list|)
operator|.
name|append
argument_list|(
name|columnName
argument_list|)
operator|.
name|append
argument_list|(
literal|"' '"
argument_list|)
operator|.
name|append
argument_list|(
name|javaType
argument_list|)
operator|.
name|append
argument_list|(
literal|"' '"
argument_list|)
operator|.
name|append
argument_list|(
name|column
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"')"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|postprocess
parameter_list|()
block|{
if|if
condition|(
name|fromIds
operator|!=
literal|null
operator|&&
name|fromClause
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|it
init|=
name|fromIds
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ClassDescriptor
name|descriptor
init|=
name|parent
operator|.
name|getCompiledExpression
argument_list|()
operator|.
name|getEntityDescriptor
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|DbEntity
name|table
init|=
name|descriptor
operator|.
name|getEntity
argument_list|()
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
name|String
name|fqn
init|=
name|table
operator|.
name|getFullyQualifiedName
argument_list|()
decl_stmt|;
name|String
name|alias
init|=
name|parent
operator|.
name|createAlias
argument_list|(
name|id
argument_list|,
name|fqn
argument_list|)
decl_stmt|;
name|fromClause
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|fqn
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: andrus, 3/26/2007 - inner joins
block|}
name|EJBQLTranslator
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
specifier|public
name|boolean
name|visitDistinct
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|parent
operator|.
name|getBuffer
argument_list|()
operator|.
name|append
argument_list|(
literal|" DISTINCT"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitFrom
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|fromClause
operator|=
operator|new
name|StringBuffer
argument_list|(
literal|" FROM"
argument_list|)
expr_stmt|;
name|String
name|fromId
init|=
name|parent
operator|.
name|bindParameter
argument_list|(
name|fromClause
argument_list|,
literal|"from"
argument_list|)
decl_stmt|;
name|parent
operator|.
name|getBuffer
argument_list|()
operator|.
name|append
argument_list|(
literal|" $"
argument_list|)
operator|.
name|append
argument_list|(
name|fromId
argument_list|)
expr_stmt|;
name|setDelegate
argument_list|(
operator|new
name|EJBQLFromTranslator
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitOrderBy
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|parent
operator|.
name|getBuffer
argument_list|()
operator|.
name|append
argument_list|(
literal|" ORDER BY"
argument_list|)
expr_stmt|;
name|setDelegate
argument_list|(
operator|new
name|EJBQLSelectOrderByTranslator
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitSelect
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|<
literal|0
condition|)
block|{
name|parent
operator|.
name|getBuffer
argument_list|()
operator|.
name|append
argument_list|(
literal|"SELECT"
argument_list|)
expr_stmt|;
name|setDelegate
argument_list|(
operator|new
name|EJBQLSelectColumnsTranslator
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|finishedChildIndex
operator|+
literal|1
operator|==
name|expression
operator|.
name|getChildrenCount
argument_list|()
condition|)
block|{
name|postprocess
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitWhere
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|parent
operator|.
name|getBuffer
argument_list|()
operator|.
name|append
argument_list|(
literal|" WHERE"
argument_list|)
expr_stmt|;
name|setDelegate
argument_list|(
operator|new
name|EJBQLConditionTranslator
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

