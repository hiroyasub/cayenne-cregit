begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DeleteDenyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|LifecycleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistenceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DeleteRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ArcProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|AttributeProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ToManyProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ToOneProperty
import|;
end_import

begin_comment
comment|/**  * Helper class that implements DataObject deletion strategy.  *   * @since 1.2  * @author Andrus Adamchik  */
end_comment

begin_class
class|class
name|DataContextDeleteAction
block|{
name|DataContext
name|dataContext
decl_stmt|;
name|DataContextDeleteAction
parameter_list|(
name|DataContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|dataContext
operator|=
name|context
expr_stmt|;
block|}
comment|/**      * Deletes internal DataObject from its DataContext, processing delete rules.      */
name|boolean
name|performDelete
parameter_list|(
name|Persistent
name|object
parameter_list|)
throws|throws
name|DeleteDenyException
block|{
name|int
name|oldState
init|=
name|object
operator|.
name|getPersistenceState
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldState
operator|==
name|PersistenceState
operator|.
name|DELETED
operator|||
name|oldState
operator|==
name|PersistenceState
operator|.
name|TRANSIENT
condition|)
block|{
comment|// Drop out... especially in case of DELETED we might be about to get
comment|// into a horrible recursive loop due to CASCADE delete rules.
comment|// Assume that everything must have been done correctly already
comment|// and *don't* do it again
return|return
literal|false
return|;
block|}
if|if
condition|(
name|object
operator|.
name|getObjectContext
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Attempt to delete unregistered non-TRANSIENT object: "
operator|+
name|object
argument_list|)
throw|;
block|}
if|if
condition|(
name|object
operator|.
name|getObjectContext
argument_list|()
operator|!=
name|dataContext
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Attempt to delete object registered in a different DataContext. Object: "
operator|+
name|object
operator|+
literal|", data context: "
operator|+
name|dataContext
argument_list|)
throw|;
block|}
comment|// must resolve HOLLOW objects before delete... needed
comment|// to process relationships and optimistic locking...
name|dataContext
operator|.
name|prepareForAccess
argument_list|(
name|object
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldState
operator|==
name|PersistenceState
operator|.
name|NEW
condition|)
block|{
name|deleteNew
argument_list|(
name|object
argument_list|,
name|oldState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deletePersistent
argument_list|(
name|object
argument_list|,
name|oldState
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|deletePersistent
parameter_list|(
name|Persistent
name|object
parameter_list|,
name|int
name|oldState
parameter_list|)
throws|throws
name|DeleteDenyException
block|{
name|dataContext
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getCallbackRegistry
argument_list|()
operator|.
name|performCallbacks
argument_list|(
name|LifecycleListener
operator|.
name|PRE_REMOVE
argument_list|,
name|object
argument_list|)
expr_stmt|;
name|object
operator|.
name|setPersistenceState
argument_list|(
name|PersistenceState
operator|.
name|DELETED
argument_list|)
expr_stmt|;
name|dataContext
operator|.
name|getObjectStore
argument_list|()
operator|.
name|nodeRemoved
argument_list|(
name|object
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|processDeleteRules
argument_list|(
name|object
argument_list|,
name|oldState
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteNew
parameter_list|(
name|Persistent
name|object
parameter_list|,
name|int
name|oldState
parameter_list|)
throws|throws
name|DeleteDenyException
block|{
name|object
operator|.
name|setPersistenceState
argument_list|(
name|PersistenceState
operator|.
name|TRANSIENT
argument_list|)
expr_stmt|;
name|processDeleteRules
argument_list|(
name|object
argument_list|,
name|oldState
argument_list|)
expr_stmt|;
comment|// if an object was NEW, we must throw it out of the ObjectStore
name|dataContext
operator|.
name|getObjectStore
argument_list|()
operator|.
name|objectsUnregistered
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
name|object
operator|.
name|setObjectContext
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processDeleteRules
parameter_list|(
specifier|final
name|Persistent
name|object
parameter_list|,
name|int
name|oldState
parameter_list|)
throws|throws
name|DeleteDenyException
block|{
name|ClassDescriptor
name|descriptor
init|=
name|dataContext
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getClassDescriptor
argument_list|(
name|object
operator|.
name|getObjectId
argument_list|()
operator|.
name|getEntityName
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|descriptor
operator|.
name|getEntity
argument_list|()
operator|.
name|getRelationships
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ObjRelationship
name|relationship
init|=
operator|(
name|ObjRelationship
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|processFlattened
init|=
name|relationship
operator|.
name|isFlattened
argument_list|()
operator|&&
name|relationship
operator|.
name|isToDependentEntity
argument_list|()
operator|&&
operator|!
name|relationship
operator|.
name|isReadOnly
argument_list|()
decl_stmt|;
comment|// first check for no action... bail out if no flattened processing is needed
if|if
condition|(
name|relationship
operator|.
name|getDeleteRule
argument_list|()
operator|==
name|DeleteRule
operator|.
name|NO_ACTION
operator|&&
operator|!
name|processFlattened
condition|)
block|{
continue|continue;
block|}
name|List
name|relatedObjects
init|=
name|Collections
operator|.
name|EMPTY_LIST
decl_stmt|;
name|ArcProperty
name|property
init|=
operator|(
name|ArcProperty
operator|)
name|descriptor
operator|.
name|getProperty
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|related
init|=
name|property
operator|.
name|readProperty
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|relationship
operator|.
name|isToMany
argument_list|()
condition|)
block|{
name|List
name|toMany
init|=
operator|(
name|List
operator|)
name|related
decl_stmt|;
if|if
condition|(
name|toMany
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Get a copy of the list so that deleting objects doesn't
comment|// result in concurrent modification exceptions
name|relatedObjects
operator|=
operator|new
name|ArrayList
argument_list|(
name|toMany
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|related
operator|!=
literal|null
condition|)
block|{
name|relatedObjects
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|related
argument_list|)
expr_stmt|;
block|}
block|}
comment|// no related object, bail out
if|if
condition|(
name|relatedObjects
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
comment|// process DENY rule first...
if|if
condition|(
name|relationship
operator|.
name|getDeleteRule
argument_list|()
operator|==
name|DeleteRule
operator|.
name|DENY
condition|)
block|{
name|object
operator|.
name|setPersistenceState
argument_list|(
name|oldState
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|relatedObjects
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
literal|"1 related object"
else|:
name|relatedObjects
operator|.
name|size
argument_list|()
operator|+
literal|" related objects"
decl_stmt|;
throw|throw
operator|new
name|DeleteDenyException
argument_list|(
name|object
argument_list|,
name|relationship
operator|.
name|getName
argument_list|()
argument_list|,
name|message
argument_list|)
throw|;
block|}
comment|// process flattened with dependent join tables...
comment|// joins must be removed even if they are non-existent or ignored in the
comment|// object graph
if|if
condition|(
name|processFlattened
condition|)
block|{
name|ObjectStore
name|objectStore
init|=
name|dataContext
operator|.
name|getObjectStore
argument_list|()
decl_stmt|;
name|Iterator
name|iterator
init|=
name|relatedObjects
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Persistent
name|relatedObject
init|=
operator|(
name|Persistent
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|objectStore
operator|.
name|arcDeleted
argument_list|(
name|object
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|relatedObject
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// process remaining rules
switch|switch
condition|(
name|relationship
operator|.
name|getDeleteRule
argument_list|()
condition|)
block|{
case|case
name|DeleteRule
operator|.
name|NO_ACTION
case|:
break|break;
case|case
name|DeleteRule
operator|.
name|NULLIFY
case|:
name|ArcProperty
name|reverseArc
init|=
name|property
operator|.
name|getComplimentaryReverseArc
argument_list|()
decl_stmt|;
if|if
condition|(
name|reverseArc
operator|==
literal|null
condition|)
block|{
comment|// nothing we can do here
break|break;
block|}
specifier|final
name|Collection
name|finalRelatedObjects
init|=
name|relatedObjects
decl_stmt|;
name|reverseArc
operator|.
name|visit
argument_list|(
operator|new
name|PropertyVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|visitAttribute
parameter_list|(
name|AttributeProperty
name|property
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitToMany
parameter_list|(
name|ToManyProperty
name|property
parameter_list|)
block|{
name|Iterator
name|iterator
init|=
name|finalRelatedObjects
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|relatedObject
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|property
operator|.
name|removeTarget
argument_list|(
name|relatedObject
argument_list|,
name|object
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitToOne
parameter_list|(
name|ToOneProperty
name|property
parameter_list|)
block|{
comment|// Inverse is to-one - find all related objects and
comment|// nullify the reverse relationship
name|Iterator
name|iterator
init|=
name|finalRelatedObjects
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|relatedObject
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|property
operator|.
name|setTarget
argument_list|(
name|relatedObject
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
break|break;
case|case
name|DeleteRule
operator|.
name|CASCADE
case|:
comment|// Delete all related objects
name|Iterator
name|iterator
init|=
name|relatedObjects
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Persistent
name|relatedObject
init|=
operator|(
name|Persistent
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
operator|new
name|DataContextDeleteAction
argument_list|(
name|this
operator|.
name|dataContext
argument_list|)
operator|.
name|performDelete
argument_list|(
name|relatedObject
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|object
operator|.
name|setPersistenceState
argument_list|(
name|oldState
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Invalid delete rule "
operator|+
name|relationship
operator|.
name|getDeleteRule
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

