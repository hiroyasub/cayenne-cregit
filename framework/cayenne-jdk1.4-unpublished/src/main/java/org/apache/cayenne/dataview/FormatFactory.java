begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dataview
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|FormatFactory
block|{
specifier|private
name|Map
name|builders
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|public
name|FormatFactory
parameter_list|()
block|{
name|registerBuilder
argument_list|(
name|DecimalFormat
operator|.
name|class
argument_list|,
operator|new
name|DecimalFormatBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|registerBuilder
argument_list|(
name|NumberFormat
operator|.
name|class
argument_list|,
operator|new
name|DecimalFormatBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|registerBuilder
argument_list|(
name|SimpleDateFormat
operator|.
name|class
argument_list|,
operator|new
name|SimpleDateFormatBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|registerBuilder
argument_list|(
name|DateFormat
operator|.
name|class
argument_list|,
operator|new
name|SimpleDateFormatBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|registerBuilder
argument_list|(
name|ChoiceFormat
operator|.
name|class
argument_list|,
operator|new
name|ChoiceFormatBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|registerBuilder
argument_list|(
name|MessageFormat
operator|.
name|class
argument_list|,
operator|new
name|MessageFormatBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|registerBuilder
argument_list|(
name|MapFormat
operator|.
name|class
argument_list|,
operator|new
name|MapFormatBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Format
name|createFormat
parameter_list|(
name|Class
name|formatClass
parameter_list|,
name|Locale
name|locale
parameter_list|,
name|Map
name|parameters
parameter_list|)
block|{
if|if
condition|(
name|locale
operator|==
literal|null
condition|)
name|locale
operator|=
name|Locale
operator|.
name|getDefault
argument_list|()
expr_stmt|;
name|Builder
name|builder
init|=
name|getBuilder
argument_list|(
name|formatClass
argument_list|)
decl_stmt|;
name|Format
name|format
init|=
name|builder
operator|.
name|create
argument_list|(
name|locale
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
specifier|public
name|Builder
name|registerBuilder
parameter_list|(
name|Class
name|formatClass
parameter_list|,
name|Builder
name|builder
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|builders
operator|.
name|put
argument_list|(
name|formatClass
argument_list|,
name|builder
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|unregisterBuilder
parameter_list|(
name|Class
name|formatClass
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|builders
operator|.
name|remove
argument_list|(
name|formatClass
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|getBuilder
parameter_list|(
name|Class
name|formatClass
parameter_list|)
block|{
return|return
operator|(
name|Builder
operator|)
name|builders
operator|.
name|get
argument_list|(
name|formatClass
argument_list|)
return|;
block|}
specifier|public
specifier|static
interface|interface
name|Builder
block|{
name|Format
name|create
parameter_list|(
name|Locale
name|locale
parameter_list|,
name|Map
name|parameters
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|DecimalFormatBuilder
implements|implements
name|Builder
block|{
specifier|public
name|Format
name|create
parameter_list|(
name|Locale
name|locale
parameter_list|,
name|Map
name|parameters
parameter_list|)
block|{
name|String
name|pattern
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"pattern"
argument_list|)
decl_stmt|;
name|DecimalFormatSymbols
name|sym
init|=
operator|new
name|DecimalFormatSymbols
argument_list|(
name|locale
argument_list|)
decl_stmt|;
name|DecimalFormat
name|format
init|=
operator|new
name|DecimalFormat
argument_list|()
decl_stmt|;
name|format
operator|.
name|setDecimalFormatSymbols
argument_list|(
name|sym
argument_list|)
expr_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
condition|)
name|format
operator|.
name|applyPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
return|return
name|format
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SimpleDateFormatBuilder
implements|implements
name|Builder
block|{
specifier|public
name|Format
name|create
parameter_list|(
name|Locale
name|locale
parameter_list|,
name|Map
name|parameters
parameter_list|)
block|{
name|String
name|pattern
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"pattern"
argument_list|)
decl_stmt|;
name|DateFormatSymbols
name|sym
init|=
operator|new
name|DateFormatSymbols
argument_list|(
name|locale
argument_list|)
decl_stmt|;
name|SimpleDateFormat
name|format
init|=
operator|new
name|SimpleDateFormat
argument_list|()
decl_stmt|;
name|format
operator|.
name|setDateFormatSymbols
argument_list|(
name|sym
argument_list|)
expr_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
condition|)
name|format
operator|.
name|applyPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
return|return
name|format
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ChoiceFormatBuilder
implements|implements
name|Builder
block|{
specifier|public
name|Format
name|create
parameter_list|(
name|Locale
name|locale
parameter_list|,
name|Map
name|parameters
parameter_list|)
block|{
name|String
name|pattern
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"pattern"
argument_list|)
decl_stmt|;
name|ChoiceFormat
name|format
init|=
operator|new
name|ChoiceFormat
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MessageFormatBuilder
implements|implements
name|Builder
block|{
specifier|public
name|Format
name|create
parameter_list|(
name|Locale
name|locale
parameter_list|,
name|Map
name|parameters
parameter_list|)
block|{
name|String
name|pattern
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"pattern"
argument_list|)
decl_stmt|;
name|MessageFormat
name|format
init|=
operator|new
name|MessageFormat
argument_list|(
name|pattern
argument_list|,
name|locale
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MapFormatBuilder
implements|implements
name|Builder
block|{
specifier|public
name|Format
name|create
parameter_list|(
name|Locale
name|locale
parameter_list|,
name|Map
name|parameters
parameter_list|)
block|{
name|MapFormat
name|format
init|=
operator|new
name|MapFormat
argument_list|()
decl_stmt|;
name|String
name|pattern
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"pattern"
argument_list|)
decl_stmt|;
name|String
name|valueClassName
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"value-class"
argument_list|)
decl_stmt|;
name|String
name|nullValueDesignation
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"null-value"
argument_list|)
decl_stmt|;
name|String
name|entryDelimiter
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"entry-delimiter"
argument_list|)
decl_stmt|;
name|String
name|valueFormatDelimiter
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"value-delimiter"
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryDelimiter
operator|!=
literal|null
operator|&&
name|entryDelimiter
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|format
operator|.
name|setEntryDelimiter
argument_list|(
name|entryDelimiter
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|valueFormatDelimiter
operator|!=
literal|null
operator|&&
name|valueFormatDelimiter
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|format
operator|.
name|setValueFormatDelimiter
argument_list|(
name|valueFormatDelimiter
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|nullValueDesignation
operator|!=
literal|null
condition|)
name|format
operator|.
name|setNullValueDesignation
argument_list|(
name|nullValueDesignation
argument_list|)
expr_stmt|;
name|Class
name|valueClass
decl_stmt|;
try|try
block|{
name|valueClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|valueClassName
argument_list|)
expr_stmt|;
name|format
operator|.
name|applyPattern
argument_list|(
name|pattern
argument_list|,
name|valueClass
argument_list|)
expr_stmt|;
return|return
name|format
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value class "
operator|+
name|valueClassName
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

