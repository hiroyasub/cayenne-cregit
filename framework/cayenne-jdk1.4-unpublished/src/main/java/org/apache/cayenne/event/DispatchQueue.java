begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|event
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|event
operator|.
name|EventManager
operator|.
name|Dispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Invocation
import|;
end_import

begin_comment
comment|/**  * Stores a set of Invocation objects, organizing them by sender. Listeners have an option  * to receive events for a particular sender or to receive all events. EventManager  * creates one DispatchQueue per EventSubject. DispatchQueue is thread-safe - all methods  * that read/modify internal collections are synchronized.  *   * @author Andrus Adamchik  * @since 1.1  */
end_comment

begin_class
class|class
name|DispatchQueue
block|{
specifier|private
name|Set
name|subjectInvocations
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|invocationsBySender
init|=
operator|new
name|WeakHashMap
argument_list|()
decl_stmt|;
comment|/**      * Dispatches event to all listeners in the queue that are registered for this event      * and sender.      */
specifier|synchronized
name|void
name|dispatchEvent
parameter_list|(
name|Dispatch
name|dispatch
parameter_list|)
block|{
comment|// dispatch to "any sender" listeners
name|dispatchEvent
argument_list|(
name|subjectInvocations
argument_list|,
name|dispatch
argument_list|)
expr_stmt|;
comment|// dispatch to the given sender listeners
name|Object
name|sender
init|=
name|dispatch
operator|.
name|getSender
argument_list|()
decl_stmt|;
name|dispatchEvent
argument_list|(
name|invocationsForSender
argument_list|(
name|sender
argument_list|,
literal|false
argument_list|)
argument_list|,
name|dispatch
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|void
name|addInvocation
parameter_list|(
name|Invocation
name|invocation
parameter_list|,
name|Object
name|sender
parameter_list|)
block|{
name|Collection
name|invocations
decl_stmt|;
if|if
condition|(
name|sender
operator|==
literal|null
condition|)
block|{
name|invocations
operator|=
name|subjectInvocations
expr_stmt|;
block|}
else|else
block|{
name|invocations
operator|=
name|invocationsForSender
argument_list|(
name|sender
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// perform maintenance of the given invocations set, as failure to do that can
comment|// result in a memory leak per CAY-770. This seemed to happen when lots of
comment|// invocations got registered, but no events where dispatched (hence the stale
comment|// inocation removal during dispatch did not happen)
name|Iterator
name|it
init|=
name|invocations
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Invocation
name|i
init|=
operator|(
name|Invocation
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|getTarget
argument_list|()
operator|==
literal|null
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|invocations
operator|.
name|add
argument_list|(
name|invocation
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|boolean
name|removeInvocations
parameter_list|(
name|Object
name|listener
parameter_list|,
name|Object
name|sender
parameter_list|)
block|{
comment|// remove only for specific sender
if|if
condition|(
name|sender
operator|!=
literal|null
condition|)
block|{
return|return
name|removeInvocations
argument_list|(
name|invocationsForSender
argument_list|(
name|sender
argument_list|,
literal|false
argument_list|)
argument_list|,
name|listener
argument_list|)
return|;
block|}
name|boolean
name|didRemove
init|=
literal|false
decl_stmt|;
comment|// remove listener from all collections
name|didRemove
operator|=
name|removeInvocations
argument_list|(
name|subjectInvocations
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|Iterator
name|sets
init|=
name|invocationsBySender
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|sets
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Collection
name|senderInvocations
init|=
operator|(
name|Collection
operator|)
name|sets
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|senderInvocations
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Iterator
name|it
init|=
name|senderInvocations
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Invocation
name|invocation
init|=
operator|(
name|Invocation
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|invocation
operator|.
name|getTarget
argument_list|()
operator|==
name|listener
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|didRemove
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
name|didRemove
return|;
block|}
specifier|private
name|Collection
name|invocationsForSender
parameter_list|(
name|Object
name|sender
parameter_list|,
name|boolean
name|create
parameter_list|)
block|{
name|Collection
name|senderInvocations
init|=
operator|(
name|Collection
operator|)
name|invocationsBySender
operator|.
name|get
argument_list|(
name|sender
argument_list|)
decl_stmt|;
if|if
condition|(
name|create
operator|&&
name|senderInvocations
operator|==
literal|null
condition|)
block|{
name|senderInvocations
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|invocationsBySender
operator|.
name|put
argument_list|(
name|sender
argument_list|,
name|senderInvocations
argument_list|)
expr_stmt|;
block|}
return|return
name|senderInvocations
return|;
block|}
comment|// removes all invocations for a given listener
specifier|private
name|boolean
name|removeInvocations
parameter_list|(
name|Collection
name|invocations
parameter_list|,
name|Object
name|listener
parameter_list|)
block|{
if|if
condition|(
name|invocations
operator|==
literal|null
operator|||
name|invocations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|didRemove
init|=
literal|false
decl_stmt|;
name|Iterator
name|invocationsIt
init|=
name|invocations
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|invocationsIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Invocation
name|invocation
init|=
operator|(
name|Invocation
operator|)
name|invocationsIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|invocation
operator|.
name|getTarget
argument_list|()
operator|==
name|listener
condition|)
block|{
name|invocationsIt
operator|.
name|remove
argument_list|()
expr_stmt|;
name|didRemove
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|didRemove
return|;
block|}
comment|// dispatches event to a list of listeners
specifier|private
name|void
name|dispatchEvent
parameter_list|(
name|Collection
name|invocations
parameter_list|,
name|Dispatch
name|dispatch
parameter_list|)
block|{
if|if
condition|(
name|invocations
operator|==
literal|null
operator|||
name|invocations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// iterate over copy of the collection as there is a chance a caller would want to
comment|// (un)register another listener during event processing
name|Iterator
name|it
init|=
operator|new
name|ArrayList
argument_list|(
name|invocations
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Invocation
name|invocation
init|=
operator|(
name|Invocation
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// fire invocation, detect if anything went wrong (e.g. GC'ed invocation
comment|// targets)
if|if
condition|(
operator|!
name|dispatch
operator|.
name|fire
argument_list|(
name|invocation
argument_list|)
condition|)
block|{
name|invocations
operator|.
name|remove
argument_list|(
name|invocation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

