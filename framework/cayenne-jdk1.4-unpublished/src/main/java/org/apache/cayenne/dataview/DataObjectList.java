begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dataview
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataObject
import|;
end_import

begin_comment
comment|/**  * A decorator list for a collection of DataObjects that fires  * {@link DataObjectChangeEvent}events on modification, and supports registering  * {@link DataObjectChangeListener DataObjectChangeListeners}to recieve these events.  * Designed to be used as an active model in Swing applications.  *   * @since 1.1  * @author Andriy Shapochka  */
end_comment

begin_class
specifier|public
class|class
name|DataObjectList
extends|extends
name|AbstractList
block|{
specifier|protected
name|List
name|dataObjects
decl_stmt|;
specifier|protected
name|EventDispatcher
name|changeDispatcher
decl_stmt|;
specifier|public
name|DataObjectList
parameter_list|()
block|{
name|dataObjects
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DataObjectList
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|dataObjects
operator|=
operator|new
name|ArrayList
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DataObjectList
parameter_list|(
name|Collection
name|dataObjects
parameter_list|,
name|boolean
name|typeCheck
parameter_list|)
block|{
if|if
condition|(
name|typeCheck
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|dataObjects
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|i
operator|.
name|next
argument_list|()
operator|instanceof
name|DataObject
operator|)
condition|)
block|{
name|this
operator|.
name|dataObjects
operator|=
operator|new
name|ArrayList
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|this
operator|.
name|dataObjects
operator|=
operator|new
name|ArrayList
argument_list|(
name|dataObjects
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DataObjectList
parameter_list|(
name|Collection
name|dataObjects
parameter_list|)
block|{
name|this
argument_list|(
name|dataObjects
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDataObjectChangeListener
parameter_list|(
name|DataObjectChangeListener
name|listener
parameter_list|)
block|{
name|changeDispatcher
operator|=
name|EventDispatcher
operator|.
name|add
argument_list|(
name|changeDispatcher
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeDataObjectChangeListener
parameter_list|(
name|DataObjectChangeListener
name|listener
parameter_list|)
block|{
name|changeDispatcher
operator|=
name|EventDispatcher
operator|.
name|remove
argument_list|(
name|changeDispatcher
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearDataObjectChangeListeners
parameter_list|()
block|{
if|if
condition|(
name|changeDispatcher
operator|!=
literal|null
condition|)
block|{
name|changeDispatcher
operator|.
name|clear
argument_list|()
expr_stmt|;
name|changeDispatcher
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|indexOf
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|DataObject
operator|)
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|dataObjects
operator|.
name|indexOf
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|public
name|int
name|lastIndexOf
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|DataObject
operator|)
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|dataObjects
operator|.
name|lastIndexOf
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
operator|(
name|indexOf
argument_list|(
name|o
argument_list|)
operator|>=
literal|0
operator|)
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|dataObjects
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|dataObjects
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|add
parameter_list|(
name|DataObject
name|dataObject
parameter_list|)
block|{
name|boolean
name|success
init|=
name|dataObjects
operator|.
name|add
argument_list|(
name|dataObject
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|dataObjects
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|success
operator|&&
name|changeDispatcher
operator|!=
literal|null
condition|)
name|changeDispatcher
operator|.
name|dispatch
argument_list|(
operator|new
name|DataObjectChangeEvent
argument_list|(
name|this
argument_list|,
name|DataObjectChangeEvent
operator|.
name|DATAOBJECT_ADDED
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|success
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|DataObject
name|dataObject
parameter_list|)
block|{
name|dataObjects
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|dataObject
argument_list|)
expr_stmt|;
if|if
condition|(
name|changeDispatcher
operator|!=
literal|null
condition|)
name|changeDispatcher
operator|.
name|dispatch
argument_list|(
operator|new
name|DataObjectChangeEvent
argument_list|(
name|this
argument_list|,
name|DataObjectChangeEvent
operator|.
name|DATAOBJECT_ADDED
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|add
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|add
argument_list|(
operator|(
name|DataObject
operator|)
name|o
argument_list|)
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|Object
name|element
parameter_list|)
block|{
name|add
argument_list|(
name|index
argument_list|,
operator|(
name|DataObject
operator|)
name|element
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|remove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Object
name|dataObject
init|=
name|dataObjects
operator|.
name|remove
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataObject
operator|!=
literal|null
operator|&&
name|changeDispatcher
operator|!=
literal|null
condition|)
name|changeDispatcher
operator|.
name|dispatch
argument_list|(
operator|new
name|DataObjectChangeEvent
argument_list|(
name|this
argument_list|,
name|DataObjectChangeEvent
operator|.
name|DATAOBJECT_REMOVED
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|dataObject
return|;
block|}
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|int
name|index
init|=
name|indexOf
argument_list|(
name|o
argument_list|)
decl_stmt|;
return|return
name|remove
argument_list|(
name|index
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
name|DataObject
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|DataObject
name|dataObject
parameter_list|)
block|{
name|DataObject
name|oldObject
init|=
operator|(
name|DataObject
operator|)
name|dataObjects
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|dataObject
argument_list|)
decl_stmt|;
if|if
condition|(
name|changeDispatcher
operator|!=
literal|null
condition|)
name|changeDispatcher
operator|.
name|dispatch
argument_list|(
operator|new
name|DataObjectChangeEvent
argument_list|(
name|this
argument_list|,
name|DataObjectChangeEvent
operator|.
name|DATAOBJECT_CHANGED
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|oldObject
return|;
block|}
specifier|public
name|Object
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|Object
name|element
parameter_list|)
block|{
return|return
name|set
argument_list|(
name|index
argument_list|,
operator|(
name|DataObject
operator|)
name|element
argument_list|)
return|;
block|}
specifier|public
name|Object
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|dataObjects
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
name|DataObject
name|getDataObject
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|DataObject
operator|)
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
name|Object
index|[]
name|toArray
parameter_list|(
name|Object
index|[]
name|array
parameter_list|)
block|{
return|return
name|dataObjects
operator|.
name|toArray
argument_list|(
name|array
argument_list|)
return|;
block|}
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|dataObjects
operator|.
name|toArray
argument_list|()
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|boolean
name|empty
init|=
name|isEmpty
argument_list|()
decl_stmt|;
name|dataObjects
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|empty
operator|&&
name|changeDispatcher
operator|!=
literal|null
condition|)
name|changeDispatcher
operator|.
name|dispatch
argument_list|(
operator|new
name|DataObjectChangeEvent
argument_list|(
name|this
argument_list|,
name|DataObjectChangeEvent
operator|.
name|DATAOBJECT_REMOVED
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
name|dataObjects
parameter_list|)
block|{
name|boolean
name|success
init|=
name|this
operator|.
name|dataObjects
operator|.
name|removeAll
argument_list|(
name|dataObjects
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
operator|&&
name|changeDispatcher
operator|!=
literal|null
condition|)
name|changeDispatcher
operator|.
name|dispatch
argument_list|(
operator|new
name|DataObjectChangeEvent
argument_list|(
name|this
argument_list|,
name|DataObjectChangeEvent
operator|.
name|DATAOBJECT_REMOVED
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|success
return|;
block|}
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
name|dataObjects
parameter_list|)
block|{
return|return
name|this
operator|.
name|dataObjects
operator|.
name|containsAll
argument_list|(
name|dataObjects
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
name|dataObjects
parameter_list|,
name|boolean
name|typeCheck
parameter_list|)
block|{
if|if
condition|(
name|typeCheck
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|dataObjects
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|i
operator|.
name|next
argument_list|()
operator|instanceof
name|DataObject
operator|)
condition|)
return|return
literal|false
return|;
block|}
block|}
name|boolean
name|success
init|=
name|this
operator|.
name|dataObjects
operator|.
name|addAll
argument_list|(
name|dataObjects
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
operator|&&
name|changeDispatcher
operator|!=
literal|null
condition|)
name|changeDispatcher
operator|.
name|dispatch
argument_list|(
operator|new
name|DataObjectChangeEvent
argument_list|(
name|this
argument_list|,
name|DataObjectChangeEvent
operator|.
name|DATAOBJECT_ADDED
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|success
return|;
block|}
specifier|public
name|boolean
name|addAll
parameter_list|(
name|int
name|index
parameter_list|,
name|Collection
name|dataObjects
parameter_list|,
name|boolean
name|typeCheck
parameter_list|)
block|{
if|if
condition|(
name|typeCheck
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|dataObjects
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|i
operator|.
name|next
argument_list|()
operator|instanceof
name|DataObject
operator|)
condition|)
return|return
literal|false
return|;
block|}
block|}
name|boolean
name|success
init|=
name|this
operator|.
name|dataObjects
operator|.
name|addAll
argument_list|(
name|index
argument_list|,
name|dataObjects
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
operator|&&
name|changeDispatcher
operator|!=
literal|null
condition|)
name|changeDispatcher
operator|.
name|dispatch
argument_list|(
operator|new
name|DataObjectChangeEvent
argument_list|(
name|this
argument_list|,
name|DataObjectChangeEvent
operator|.
name|DATAOBJECT_ADDED
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|success
return|;
block|}
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
name|dataObjects
parameter_list|)
block|{
return|return
name|addAll
argument_list|(
name|dataObjects
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|addAll
parameter_list|(
name|int
name|index
parameter_list|,
name|Collection
name|c
parameter_list|)
block|{
return|return
name|addAll
argument_list|(
name|index
argument_list|,
name|dataObjects
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
name|dataObjects
parameter_list|)
block|{
name|boolean
name|success
init|=
name|this
operator|.
name|dataObjects
operator|.
name|retainAll
argument_list|(
name|dataObjects
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
operator|&&
name|changeDispatcher
operator|!=
literal|null
condition|)
name|changeDispatcher
operator|.
name|dispatch
argument_list|(
operator|new
name|DataObjectChangeEvent
argument_list|(
name|this
argument_list|,
name|DataObjectChangeEvent
operator|.
name|DATAOBJECT_REMOVED
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|success
return|;
block|}
block|}
end_class

end_unit

