begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLBaseVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|parser
operator|.
name|EJBQLPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_class
class|class
name|EJBQLPathTranslator
extends|extends
name|EJBQLBaseVisitor
block|{
specifier|private
name|EJBQLSelectTranslator
name|parent
decl_stmt|;
specifier|private
name|ObjEntity
name|currentEntity
decl_stmt|;
specifier|private
name|String
name|lastPathComponent
decl_stmt|;
specifier|private
name|String
name|idPath
decl_stmt|;
name|EJBQLPathTranslator
parameter_list|(
name|EJBQLSelectTranslator
name|parent
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
specifier|public
name|boolean
name|visitPath
parameter_list|(
name|EJBQLPath
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|+
literal|1
operator|<
name|expression
operator|.
name|getChildrenCount
argument_list|()
condition|)
block|{
name|processIntermediatePath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|processLastPath
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitIdentifier
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|ClassDescriptor
name|descriptor
init|=
name|parent
operator|.
name|getParent
argument_list|()
operator|.
name|getCompiledExpression
argument_list|()
operator|.
name|getEntityDescriptor
argument_list|(
name|expression
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|descriptor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EJBQLException
argument_list|(
literal|"Invalid identification variable: "
operator|+
name|expression
operator|.
name|getText
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|currentEntity
operator|=
name|descriptor
operator|.
name|getEntity
argument_list|()
expr_stmt|;
name|this
operator|.
name|idPath
operator|=
name|expression
operator|.
name|getText
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitIdentificationVariable
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|lastPathComponent
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|idPath
operator|+=
literal|'.'
operator|+
name|lastPathComponent
expr_stmt|;
block|}
name|this
operator|.
name|lastPathComponent
operator|=
name|expression
operator|.
name|getText
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|processIntermediatePath
parameter_list|()
block|{
name|ObjRelationship
name|relationship
init|=
operator|(
name|ObjRelationship
operator|)
name|currentEntity
operator|.
name|getRelationship
argument_list|(
name|lastPathComponent
argument_list|)
decl_stmt|;
if|if
condition|(
name|relationship
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EJBQLException
argument_list|(
literal|"Unknown relationship '"
operator|+
name|lastPathComponent
operator|+
literal|"' for entity '"
operator|+
name|currentEntity
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|this
operator|.
name|currentEntity
operator|=
operator|(
name|ObjEntity
operator|)
name|relationship
operator|.
name|getTargetEntity
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|processLastPath
parameter_list|()
block|{
comment|// TODO: andrus 3/25/2007 - process terminal relationships
name|ObjAttribute
name|attribute
init|=
operator|(
name|ObjAttribute
operator|)
name|currentEntity
operator|.
name|getAttribute
argument_list|(
name|lastPathComponent
argument_list|)
decl_stmt|;
name|DbEntity
name|table
init|=
name|currentEntity
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
name|String
name|alias
init|=
name|parent
operator|.
name|getParent
argument_list|()
operator|.
name|createAlias
argument_list|(
name|idPath
argument_list|,
name|table
operator|.
name|getFullyQualifiedName
argument_list|()
argument_list|)
decl_stmt|;
name|parent
operator|.
name|getParent
argument_list|()
operator|.
name|getBuffer
argument_list|()
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|alias
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|attribute
operator|.
name|getDbAttributeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

