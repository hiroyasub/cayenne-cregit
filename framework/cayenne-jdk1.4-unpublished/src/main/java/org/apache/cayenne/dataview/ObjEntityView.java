begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dataview
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|Validate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_comment
comment|/**  * A view rooted in an ObjEntity.  *   * @since 1.1  * @author Andriy Shapochka  */
end_comment

begin_class
specifier|public
class|class
name|ObjEntityView
block|{
specifier|private
name|DataView
name|owner
decl_stmt|;
specifier|private
name|ObjEntity
name|objEntity
decl_stmt|;
specifier|private
name|List
name|fields
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|nameFieldMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|List
name|readOnlyFields
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|fields
argument_list|)
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|public
name|ObjEntityView
parameter_list|()
block|{
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Validate
operator|.
name|notNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|List
name|getFields
parameter_list|()
block|{
return|return
name|readOnlyFields
return|;
block|}
specifier|public
name|List
name|getVisibleFields
parameter_list|()
block|{
name|int
name|size
init|=
name|getFieldCount
argument_list|()
decl_stmt|;
name|List
name|dst
init|=
operator|new
name|ArrayList
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|ObjEntityViewField
name|field
init|=
name|getField
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isVisible
argument_list|()
condition|)
name|dst
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
return|return
name|dst
return|;
block|}
specifier|public
name|List
name|getEditableFields
parameter_list|()
block|{
name|int
name|size
init|=
name|getFieldCount
argument_list|()
decl_stmt|;
name|List
name|dst
init|=
operator|new
name|ArrayList
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|ObjEntityViewField
name|field
init|=
name|getField
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isVisible
argument_list|()
operator|&&
name|field
operator|.
name|isEditable
argument_list|()
condition|)
name|dst
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
return|return
name|dst
return|;
block|}
specifier|public
name|ObjEntity
name|getObjEntity
parameter_list|()
block|{
return|return
name|objEntity
return|;
block|}
specifier|public
name|void
name|setObjEntity
parameter_list|(
name|ObjEntity
name|objEntity
parameter_list|)
block|{
name|Validate
operator|.
name|notNull
argument_list|(
name|objEntity
argument_list|)
expr_stmt|;
name|this
operator|.
name|objEntity
operator|=
name|objEntity
expr_stmt|;
block|}
specifier|public
name|ObjEntityViewField
name|getField
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|ObjEntityViewField
operator|)
name|fields
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
name|ObjEntityViewField
name|getField
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
operator|(
name|ObjEntityViewField
operator|)
name|nameFieldMap
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
specifier|public
name|ObjEntityViewField
name|getFieldForObjAttribute
parameter_list|(
name|String
name|objAttributeName
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ObjEntityViewField
name|field
init|=
name|getField
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|objAttributeName
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getObjAttribute
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
return|return
name|field
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|getFieldCount
parameter_list|()
block|{
return|return
name|fields
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasFields
parameter_list|()
block|{
return|return
operator|!
name|fields
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|clearFields
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getFieldCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ObjEntityViewField
name|field
init|=
name|getField
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|field
operator|.
name|setOwner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|field
operator|.
name|setIndex
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|fields
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nameFieldMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|removeField
parameter_list|(
name|ObjEntityViewField
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|getOwner
argument_list|()
operator|!=
name|this
condition|)
return|return
literal|false
return|;
name|field
operator|.
name|setOwner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|field
operator|.
name|setIndex
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|nameFieldMap
operator|.
name|remove
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fields
operator|.
name|remove
argument_list|(
name|field
argument_list|)
return|;
block|}
specifier|public
name|int
name|insertField
parameter_list|(
name|ObjEntityViewField
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|getOwner
argument_list|()
operator|==
name|this
condition|)
return|return
name|field
operator|.
name|getIndex
argument_list|()
return|;
name|Validate
operator|.
name|notNull
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Validate
operator|.
name|isTrue
argument_list|(
operator|!
name|nameFieldMap
operator|.
name|containsKey
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|setOwner
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|nameFieldMap
operator|.
name|put
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|int
name|prefIndex
init|=
name|field
operator|.
name|getPreferredIndex
argument_list|()
decl_stmt|;
name|int
name|fieldCount
init|=
name|getFieldCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefIndex
operator|<
literal|0
condition|)
block|{
name|int
name|newIndex
init|=
name|fieldCount
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|field
operator|.
name|setIndex
argument_list|(
name|newIndex
argument_list|)
expr_stmt|;
return|return
name|newIndex
return|;
block|}
name|int
name|index
init|=
literal|0
decl_stmt|;
name|int
name|curPrefIndex
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|fieldCount
operator|&&
operator|(
operator|(
name|curPrefIndex
operator|=
name|getField
argument_list|(
name|index
operator|++
argument_list|)
operator|.
name|getPreferredIndex
argument_list|()
operator|)
operator|<=
name|prefIndex
operator|)
operator|&&
name|curPrefIndex
operator|>=
literal|0
condition|)
block|{
comment|// skip forward
block|}
name|fields
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|field
operator|.
name|setIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|fieldCount
operator|++
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|(
name|index
operator|+
literal|1
operator|)
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|getField
argument_list|(
name|i
argument_list|)
operator|.
name|setIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
specifier|public
name|DataView
name|getOwner
parameter_list|()
block|{
return|return
name|owner
return|;
block|}
name|void
name|setOwner
parameter_list|(
name|DataView
name|owner
parameter_list|)
block|{
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
block|}
block|}
end_class

end_unit

