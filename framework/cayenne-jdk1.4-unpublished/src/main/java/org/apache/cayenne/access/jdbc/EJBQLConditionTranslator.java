begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLBaseVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|parser
operator|.
name|EJBQLPositionalInputParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|parser
operator|.
name|EJBQLSubselect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|parser
operator|.
name|EJBQLTrimBoth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|parser
operator|.
name|EJBQLTrimSpecification
import|;
end_import

begin_comment
comment|/**  * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
class|class
name|EJBQLConditionTranslator
extends|extends
name|EJBQLBaseVisitor
block|{
specifier|protected
name|EJBQLTranslationContext
name|context
decl_stmt|;
specifier|protected
name|List
name|multiColumnOperands
decl_stmt|;
name|EJBQLConditionTranslator
parameter_list|(
name|EJBQLTranslationContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
name|void
name|addMultiColumnOperand
parameter_list|(
name|EJBQLMultiColumnOperand
name|operand
parameter_list|)
block|{
if|if
condition|(
name|multiColumnOperands
operator|==
literal|null
condition|)
block|{
name|multiColumnOperands
operator|=
operator|new
name|ArrayList
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|multiColumnOperands
operator|.
name|add
argument_list|(
name|operand
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|visitAggregate
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|expression
operator|.
name|visit
argument_list|(
operator|new
name|EJBQLAggregateColumnTranslator
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitAnd
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
name|afterChild
argument_list|(
name|expression
argument_list|,
literal|" AND"
argument_list|,
name|finishedChildIndex
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitBetween
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
switch|switch
condition|(
name|finishedChildIndex
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|expression
operator|.
name|isNegated
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" NOT"
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|append
argument_list|(
literal|" BETWEEN"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|context
operator|.
name|append
argument_list|(
literal|" AND"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitExists
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" EXISTS"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitIsEmpty
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
comment|// handle as "path is [not] null" (an alt. way would've been a correlated subquery
comment|// on the target entity)...
if|if
condition|(
name|expression
operator|.
name|isNegated
argument_list|()
condition|)
block|{
name|context
operator|.
name|switchToMarker
argument_list|(
name|EJBQLSelectTranslator
operator|.
name|makeDistinctMarker
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|append
argument_list|(
literal|" DISTINCT"
argument_list|)
expr_stmt|;
name|context
operator|.
name|switchToMainBuffer
argument_list|()
expr_stmt|;
block|}
name|visitIsNull
argument_list|(
name|expression
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expression
operator|.
name|getChildrenCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|expression
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
operator|.
name|visit
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|visitIsNull
argument_list|(
name|expression
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitMemberOf
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
comment|// handle as "? =|<> path" (an alt. way would've been a correlated subquery
comment|// on the target entity)...
if|if
condition|(
name|expression
operator|.
name|isNegated
argument_list|()
condition|)
block|{
name|context
operator|.
name|switchToMarker
argument_list|(
name|EJBQLSelectTranslator
operator|.
name|makeDistinctMarker
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|append
argument_list|(
literal|" DISTINCT"
argument_list|)
expr_stmt|;
name|context
operator|.
name|switchToMainBuffer
argument_list|()
expr_stmt|;
name|visitNotEquals
argument_list|(
name|expression
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expression
operator|.
name|getChildrenCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|expression
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
operator|.
name|visit
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|visitNotEquals
argument_list|(
name|expression
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|visitEquals
argument_list|(
name|expression
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expression
operator|.
name|getChildrenCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|expression
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
operator|.
name|visit
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|visitEquals
argument_list|(
name|expression
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitAll
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" ALL"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitAny
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" ANY"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitOr
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
name|afterChild
argument_list|(
name|expression
argument_list|,
literal|" OR"
argument_list|,
name|finishedChildIndex
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitEquals
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
switch|switch
condition|(
name|finishedChildIndex
condition|)
block|{
case|case
literal|0
case|:
name|context
operator|.
name|append
argument_list|(
literal|" ="
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|// check multicolumn match condition and undo op insertion and append it
comment|// from scratch if needed
if|if
condition|(
name|multiColumnOperands
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|multiColumnOperands
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|EJBQLException
argument_list|(
literal|"Invalid multi-column equals expression. Expected 2 multi-column operands, got "
operator|+
name|multiColumnOperands
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|context
operator|.
name|trim
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|EJBQLMultiColumnOperand
name|lhs
init|=
operator|(
name|EJBQLMultiColumnOperand
operator|)
name|multiColumnOperands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|EJBQLMultiColumnOperand
name|rhs
init|=
operator|(
name|EJBQLMultiColumnOperand
operator|)
name|multiColumnOperands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|lhs
operator|.
name|getKeys
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|key
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|lhs
operator|.
name|appendValue
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|context
operator|.
name|append
argument_list|(
literal|" ="
argument_list|)
expr_stmt|;
name|rhs
operator|.
name|appendValue
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" AND"
argument_list|)
expr_stmt|;
block|}
block|}
name|multiColumnOperands
operator|=
literal|null
expr_stmt|;
block|}
break|break;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitNamedInputParameter
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|String
name|parameter
init|=
name|context
operator|.
name|bindNamedParameter
argument_list|(
name|expression
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|processParameter
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitNot
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" NOT"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitNotEquals
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
switch|switch
condition|(
name|finishedChildIndex
condition|)
block|{
case|case
literal|0
case|:
name|context
operator|.
name|append
argument_list|(
literal|"<>"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|// check multicolumn match condition and undo op insertion and append it
comment|// from scratch if needed
if|if
condition|(
name|multiColumnOperands
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|multiColumnOperands
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|EJBQLException
argument_list|(
literal|"Invalid multi-column equals expression. Expected 2 multi-column operands, got "
operator|+
name|multiColumnOperands
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|context
operator|.
name|trim
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|EJBQLMultiColumnOperand
name|lhs
init|=
operator|(
name|EJBQLMultiColumnOperand
operator|)
name|multiColumnOperands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|EJBQLMultiColumnOperand
name|rhs
init|=
operator|(
name|EJBQLMultiColumnOperand
operator|)
name|multiColumnOperands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|lhs
operator|.
name|getKeys
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|key
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|lhs
operator|.
name|appendValue
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|context
operator|.
name|append
argument_list|(
literal|"<>"
argument_list|)
expr_stmt|;
name|rhs
operator|.
name|appendValue
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" OR"
argument_list|)
expr_stmt|;
block|}
block|}
name|multiColumnOperands
operator|=
literal|null
expr_stmt|;
block|}
break|break;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitGreaterThan
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|==
literal|0
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitGreaterOrEqual
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|==
literal|0
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|">="
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitLessOrEqual
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|==
literal|0
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|"<="
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitLessThan
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|==
literal|0
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitLike
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|expression
operator|.
name|isNegated
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" NOT"
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|append
argument_list|(
literal|" LIKE"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitIn
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|expression
operator|.
name|isNegated
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" NOT"
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|append
argument_list|(
literal|" IN"
argument_list|)
expr_stmt|;
comment|// a cosmetic hack for preventing extra pair of parenthesis from being
comment|// appended in 'visitSubselect'
if|if
condition|(
name|expression
operator|.
name|getChildrenCount
argument_list|()
operator|==
literal|2
operator|&&
name|expression
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|EJBQLSubselect
condition|)
block|{
name|visitSubselect
argument_list|(
name|expression
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|context
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|finishedChildIndex
operator|==
name|expression
operator|.
name|getChildrenCount
argument_list|()
operator|-
literal|1
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|finishedChildIndex
operator|>
literal|0
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|afterChild
parameter_list|(
name|EJBQLExpression
name|e
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|childIndex
parameter_list|)
block|{
if|if
condition|(
name|childIndex
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|childIndex
operator|+
literal|1
operator|<
name|e
operator|.
name|getChildrenCount
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|visitPath
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
name|expression
operator|.
name|visit
argument_list|(
operator|new
name|EJBQLPathTranslator
argument_list|(
name|context
argument_list|)
block|{
specifier|protected
name|void
name|appendMultiColumnPath
parameter_list|(
name|EJBQLMultiColumnOperand
name|operand
parameter_list|)
block|{
name|EJBQLConditionTranslator
operator|.
name|this
operator|.
name|addMultiColumnOperand
argument_list|(
name|operand
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitIntegerLiteral
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|.
name|getText
argument_list|()
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|value
decl_stmt|;
try|try
block|{
name|value
operator|=
operator|new
name|Integer
argument_list|(
name|expression
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfex
parameter_list|)
block|{
throw|throw
operator|new
name|EJBQLException
argument_list|(
literal|"Invalid integer: "
operator|+
name|expression
operator|.
name|getText
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|var
init|=
name|context
operator|.
name|bindParameter
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|context
operator|.
name|append
argument_list|(
literal|" #bind($"
argument_list|)
operator|.
name|append
argument_list|(
name|var
argument_list|)
operator|.
name|append
argument_list|(
literal|" 'INTEGER')"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitDecimalLiteral
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|.
name|getText
argument_list|()
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|value
decl_stmt|;
try|try
block|{
name|value
operator|=
operator|new
name|BigDecimal
argument_list|(
name|expression
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfex
parameter_list|)
block|{
throw|throw
operator|new
name|EJBQLException
argument_list|(
literal|"Invalid decimal: "
operator|+
name|expression
operator|.
name|getText
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|var
init|=
name|context
operator|.
name|bindParameter
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|context
operator|.
name|append
argument_list|(
literal|" #bind($"
argument_list|)
operator|.
name|append
argument_list|(
name|var
argument_list|)
operator|.
name|append
argument_list|(
literal|" 'DECIMAL')"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitEscapeCharacter
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
comment|// note that EscapeChar text is already wrapped in single quotes
name|context
operator|.
name|append
argument_list|(
literal|" ESCAPE "
argument_list|)
operator|.
name|append
argument_list|(
name|expression
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitIsNull
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|==
literal|0
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
name|expression
operator|.
name|isNegated
argument_list|()
condition|?
literal|" IS NOT NULL"
else|:
literal|" IS NULL"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitPositionalInputParameter
parameter_list|(
name|EJBQLPositionalInputParameter
name|expression
parameter_list|)
block|{
name|String
name|parameter
init|=
name|context
operator|.
name|bindPositionalParameter
argument_list|(
name|expression
operator|.
name|getPosition
argument_list|()
argument_list|)
decl_stmt|;
name|processParameter
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitBooleanLiteral
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|.
name|getText
argument_list|()
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|value
init|=
operator|new
name|Boolean
argument_list|(
name|expression
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|var
init|=
name|context
operator|.
name|bindParameter
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|context
operator|.
name|append
argument_list|(
literal|" #bind($"
argument_list|)
operator|.
name|append
argument_list|(
name|var
argument_list|)
operator|.
name|append
argument_list|(
literal|" 'BOOLEAN')"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitStringLiteral
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|.
name|getText
argument_list|()
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// note that String Literal text is already wrapped in single quotes, with
comment|// quotes that are part of the string escaped.
name|context
operator|.
name|append
argument_list|(
literal|" #bind("
argument_list|)
operator|.
name|append
argument_list|(
name|expression
operator|.
name|getText
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" 'VARCHAR')"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitSubselect
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
name|expression
operator|.
name|visit
argument_list|(
operator|new
name|EJBQLSelectTranslator
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|processParameter
parameter_list|(
name|String
name|boundName
parameter_list|)
block|{
name|Object
name|object
init|=
name|context
operator|.
name|getBoundParameter
argument_list|(
name|boundName
argument_list|)
decl_stmt|;
name|Map
name|map
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|Persistent
condition|)
block|{
name|map
operator|=
operator|(
operator|(
name|Persistent
operator|)
name|object
operator|)
operator|.
name|getObjectId
argument_list|()
operator|.
name|getIdSnapshot
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|ObjectId
condition|)
block|{
name|map
operator|=
operator|(
operator|(
name|ObjectId
operator|)
name|object
operator|)
operator|.
name|getIdSnapshot
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Map
condition|)
block|{
name|map
operator|=
operator|(
name|Map
operator|)
name|object
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|context
operator|.
name|rebindParameter
argument_list|(
name|boundName
argument_list|,
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addMultiColumnOperand
argument_list|(
name|EJBQLMultiColumnOperand
operator|.
name|getObjectOperand
argument_list|(
name|context
argument_list|,
name|map
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|object
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" #bind($"
argument_list|)
operator|.
name|append
argument_list|(
name|boundName
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// this is a hack to prevent execptions on DB's like Derby for expressions
comment|// "X = NULL". The 'VARCHAR' parameter is totally bogus, but seems to work on
comment|// all tested DB's... Also note what JPA spec, chapter 4.11 says: "Comparison
comment|// or arithmetic operations with a NULL value always yield an unknown value."
comment|// TODO: andrus 6/28/2007 Ideally we should track the type of the current
comment|// expression to provide a meaningful type.
name|context
operator|.
name|append
argument_list|(
literal|" #bind($"
argument_list|)
operator|.
name|append
argument_list|(
name|boundName
argument_list|)
operator|.
name|append
argument_list|(
literal|" 'VARCHAR')"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|visitCurrentDate
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" {fn CURDATE()}"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitCurrentTime
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" {fn CURTIME()}"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitCurrentTimestamp
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" {fn NOW()}"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitAbs
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|<
literal|0
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" {fn ABS("
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|finishedChildIndex
operator|+
literal|1
operator|==
name|expression
operator|.
name|getChildrenCount
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|")}"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitSqrt
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|<
literal|0
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" {fn SQRT("
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|finishedChildIndex
operator|+
literal|1
operator|==
name|expression
operator|.
name|getChildrenCount
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|")}"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitMod
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|<
literal|0
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" {fn MOD("
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|finishedChildIndex
operator|+
literal|1
operator|==
name|expression
operator|.
name|getChildrenCount
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|")}"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitConcat
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|<
literal|0
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" {fn CONCAT("
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|finishedChildIndex
operator|+
literal|1
operator|==
name|expression
operator|.
name|getChildrenCount
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|")}"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitSubstring
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|<
literal|0
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" {fn SUBSTRING("
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|finishedChildIndex
operator|+
literal|1
operator|==
name|expression
operator|.
name|getChildrenCount
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|")}"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitLower
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|<
literal|0
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" {fn LCASE("
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|finishedChildIndex
operator|+
literal|1
operator|==
name|expression
operator|.
name|getChildrenCount
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|")}"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitUpper
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|<
literal|0
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" {fn UCASE("
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|finishedChildIndex
operator|+
literal|1
operator|==
name|expression
operator|.
name|getChildrenCount
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|")}"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitLength
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|<
literal|0
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" {fn LENGTH("
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|finishedChildIndex
operator|+
literal|1
operator|==
name|expression
operator|.
name|getChildrenCount
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|")}"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitLocate
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|<
literal|0
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" {fn LOCATE("
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|finishedChildIndex
operator|+
literal|1
operator|==
name|expression
operator|.
name|getChildrenCount
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|")}"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitTrim
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|<
literal|0
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|expression
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|EJBQLTrimSpecification
operator|)
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" {fn LTRIM({fn RTRIM("
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|finishedChildIndex
operator|+
literal|1
operator|==
name|expression
operator|.
name|getChildrenCount
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|expression
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|EJBQLTrimSpecification
operator|)
operator|||
name|expression
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|EJBQLTrimBoth
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|")})}"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|append
argument_list|(
literal|")}"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitTrimCharacter
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
comment|// this is expected to be overwritten in adapter-specific translators
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented in a generic translator"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|visitTrimLeading
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" {fn LTRIM("
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitTrimTrailing
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" {fn RTRIM("
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitTrimBoth
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" {fn LTRIM({fn RTRIM("
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

