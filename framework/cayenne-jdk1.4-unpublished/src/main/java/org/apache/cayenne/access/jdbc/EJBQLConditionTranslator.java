begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLDelegatingVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|parser
operator|.
name|EJBQLPath
import|;
end_import

begin_comment
comment|/**  * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
class|class
name|EJBQLConditionTranslator
extends|extends
name|EJBQLDelegatingVisitor
block|{
specifier|private
name|EJBQLTranslationContext
name|context
decl_stmt|;
name|EJBQLConditionTranslator
parameter_list|(
name|EJBQLTranslationContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
specifier|public
name|boolean
name|visitAnd
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
name|afterChild
argument_list|(
name|expression
argument_list|,
literal|" AND"
argument_list|,
name|finishedChildIndex
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitBetween
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
name|setDelegate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|finishedChildIndex
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|expression
operator|.
name|isNegated
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" NOT"
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|append
argument_list|(
literal|" BETWEEN #bind("
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|context
operator|.
name|append
argument_list|(
literal|") AND #bind("
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|context
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitOr
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
name|afterChild
argument_list|(
name|expression
argument_list|,
literal|" OR"
argument_list|,
name|finishedChildIndex
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitEquals
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
name|setDelegate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|finishedChildIndex
condition|)
block|{
case|case
literal|0
case|:
name|context
operator|.
name|append
argument_list|(
literal|" #bindEqual("
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|context
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitNot
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" NOT"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitNotEquals
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
name|setDelegate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|finishedChildIndex
condition|)
block|{
case|case
literal|0
case|:
name|context
operator|.
name|append
argument_list|(
literal|" #bindNotEqual("
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|context
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitGreaterThan
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
name|setDelegate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|finishedChildIndex
condition|)
block|{
case|case
literal|0
case|:
name|context
operator|.
name|append
argument_list|(
literal|"> #bind("
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|context
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitGreaterOrEqual
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
name|setDelegate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|finishedChildIndex
condition|)
block|{
case|case
literal|0
case|:
name|context
operator|.
name|append
argument_list|(
literal|">= #bind("
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|context
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitLessOrEqual
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
name|setDelegate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|finishedChildIndex
condition|)
block|{
case|case
literal|0
case|:
name|context
operator|.
name|append
argument_list|(
literal|"<= #bind("
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|context
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitLessThan
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
name|setDelegate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|finishedChildIndex
condition|)
block|{
case|case
literal|0
case|:
name|context
operator|.
name|append
argument_list|(
literal|"< #bind("
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|context
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitLike
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
name|setDelegate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|finishedChildIndex
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|expression
operator|.
name|isNegated
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" NOT"
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|append
argument_list|(
literal|" LIKE #bind("
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|context
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|afterChild
parameter_list|(
name|EJBQLExpression
name|e
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|childIndex
parameter_list|)
block|{
if|if
condition|(
name|childIndex
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|childIndex
operator|+
literal|1
operator|<
name|e
operator|.
name|getChildrenCount
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
comment|// reset child-specific delegate
name|setDelegate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|visitPath
parameter_list|(
name|EJBQLPath
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
if|if
condition|(
name|finishedChildIndex
operator|<
literal|0
condition|)
block|{
name|setDelegate
argument_list|(
operator|new
name|EJBQLPathTranslator
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|visitPath
argument_list|(
name|expression
argument_list|,
name|finishedChildIndex
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|visitStringLiteral
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|.
name|getText
argument_list|()
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// note that String Literal text is already wrapped in single quotes, with
comment|// quotes that are part of the string escaped.
name|context
operator|.
name|append
argument_list|(
name|expression
operator|.
name|getText
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" 'VARCHAR'"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitIntegerLiteral
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|.
name|getText
argument_list|()
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|value
decl_stmt|;
try|try
block|{
name|value
operator|=
operator|new
name|Integer
argument_list|(
name|expression
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfex
parameter_list|)
block|{
throw|throw
operator|new
name|EJBQLException
argument_list|(
literal|"Invalid integer: "
operator|+
name|expression
operator|.
name|getText
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|var
init|=
name|context
operator|.
name|bindParameter
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|context
operator|.
name|append
argument_list|(
literal|'$'
argument_list|)
operator|.
name|append
argument_list|(
name|var
argument_list|)
operator|.
name|append
argument_list|(
literal|" 'INTEGER'"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitDecimalLiteral
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|.
name|getText
argument_list|()
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|value
decl_stmt|;
try|try
block|{
name|value
operator|=
operator|new
name|BigDecimal
argument_list|(
name|expression
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfex
parameter_list|)
block|{
throw|throw
operator|new
name|EJBQLException
argument_list|(
literal|"Invalid decimal: "
operator|+
name|expression
operator|.
name|getText
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|var
init|=
name|context
operator|.
name|bindParameter
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|context
operator|.
name|append
argument_list|(
literal|'$'
argument_list|)
operator|.
name|append
argument_list|(
name|var
argument_list|)
operator|.
name|append
argument_list|(
literal|" 'DECIMAL'"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|visitPatternValue
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
comment|// TODO: andrus 3/25/2007 - implement me
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

