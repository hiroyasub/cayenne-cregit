begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLBaseVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLExpressionVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_comment
comment|/**  * Defines public parser functionality. Subclasses generated by JavaCC define the actual  * parser.  *   * @author Andrus Adamchik  * @since 3.0  */
end_comment

begin_class
specifier|abstract
class|class
name|AbstractParser
block|{
name|Map
name|descriptorsById
decl_stmt|;
name|EntityResolver
name|resolver
decl_stmt|;
name|String
name|source
decl_stmt|;
name|String
name|rootId
decl_stmt|;
specifier|private
name|EJBQLExpressionVisitor
name|rootDescriptorVisitor
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|callbacksEnabled
parameter_list|()
block|{
return|return
name|resolver
operator|!=
literal|null
return|;
block|}
name|void
name|selectExpressionLoaded
parameter_list|(
name|EJBQLSelectExpression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|rootDescriptorVisitor
operator|==
literal|null
condition|)
block|{
name|rootDescriptorVisitor
operator|=
operator|new
name|EJBQLBaseVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|visitIdentifier
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|rootId
operator|=
name|expression
operator|.
name|getText
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
expr_stmt|;
block|}
name|expression
operator|.
name|visit
argument_list|(
name|rootDescriptorVisitor
argument_list|)
expr_stmt|;
block|}
name|void
name|fromItemLoaded
parameter_list|(
name|EJBQLFromItem
name|expression
parameter_list|)
block|{
if|if
condition|(
operator|!
name|callbacksEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|expression
operator|.
name|getChildrenCount
argument_list|()
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|EJBQLException
argument_list|(
literal|"Expected 2 children, got: "
operator|+
name|expression
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
throw|;
block|}
comment|// TODO: andrus, 2/28/2007 - resolve path ... for now only support direct
comment|// entity names
name|EJBQLExpression
name|abstractSchemaName
init|=
name|expression
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|schemaName
init|=
name|abstractSchemaName
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|ClassDescriptor
name|descriptor
init|=
name|resolver
operator|.
name|getClassDescriptor
argument_list|(
name|schemaName
argument_list|)
decl_stmt|;
if|if
condition|(
name|descriptor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EJBQLException
argument_list|(
literal|"Unmapped abstract schema name: "
operator|+
name|schemaName
argument_list|)
throw|;
block|}
name|String
name|idVariable
init|=
name|expression
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
comment|// per JPA spec, 4.4.2, "Identification variables are case insensitive."
name|idVariable
operator|=
name|idVariable
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|ClassDescriptor
name|old
init|=
operator|(
name|ClassDescriptor
operator|)
name|descriptorsById
operator|.
name|put
argument_list|(
name|idVariable
argument_list|,
name|descriptor
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
operator|&&
name|old
operator|!=
name|descriptor
condition|)
block|{
throw|throw
operator|new
name|EJBQLException
argument_list|(
literal|"Duplicate identification variable definition: "
operator|+
name|idVariable
operator|+
literal|", it is already used for "
operator|+
name|old
operator|.
name|getEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

