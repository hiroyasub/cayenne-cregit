begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLEncoder
import|;
end_import

begin_comment
comment|/**  * DbEntity subclass that is based on another DbEntity  * and allows to define complex database expressions   * like GROUP BY and aggregate functions.  *   * @author Andrus Adamchik  * @deprecated since 3.0M2 (scheduled for removal in 3.0M3) this type of mapping is no longer supported.  */
end_comment

begin_class
specifier|public
class|class
name|DerivedDbEntity
extends|extends
name|DbEntity
block|{
specifier|protected
name|String
name|parentEntityName
decl_stmt|;
comment|/**      * Constructor for DerivedDbEntity.      */
specifier|public
name|DerivedDbEntity
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Constructor for DerivedDbEntity.      * @param name      */
specifier|public
name|DerivedDbEntity
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor for DerivedDbEntity. Creates      * a derived entity with the attribute set of a parent entity.      */
specifier|public
name|DerivedDbEntity
parameter_list|(
name|String
name|name
parameter_list|,
name|DbEntity
name|parentEntity
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|setParentEntity
argument_list|(
name|parentEntity
argument_list|)
expr_stmt|;
name|this
operator|.
name|resetToParentView
argument_list|()
expr_stmt|;
block|}
comment|/**      * Prints itself as XML to the provided XMLEncoder.      *       * @since 1.1      */
specifier|public
name|void
name|encodeAsXML
parameter_list|(
name|XMLEncoder
name|encoder
parameter_list|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"<db-entity name=\""
operator|+
name|Util
operator|.
name|encodeXmlAttribute
argument_list|(
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSchema
argument_list|()
operator|!=
literal|null
operator|&&
name|getSchema
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"\" schema=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|Util
operator|.
name|encodeXmlAttribute
argument_list|(
name|getSchema
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getCatalog
argument_list|()
operator|!=
literal|null
operator|&&
name|getCatalog
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"\" catalog=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|Util
operator|.
name|encodeXmlAttribute
argument_list|(
name|getCatalog
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|encoder
operator|.
name|print
argument_list|(
literal|"\" parentName=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|Util
operator|.
name|encodeXmlAttribute
argument_list|(
name|getParentEntityName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|println
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|indent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|getAttributeMap
argument_list|()
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|indent
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|println
argument_list|(
literal|"</db-entity>"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes all attributes and relationships,       * and replaces them with the data of the parent entity.      */
specifier|public
name|void
name|resetToParentView
parameter_list|()
block|{
name|this
operator|.
name|clearAttributes
argument_list|()
expr_stmt|;
name|this
operator|.
name|clearRelationships
argument_list|()
expr_stmt|;
comment|// copy attributes
name|Iterator
name|it
init|=
name|getParentEntity
argument_list|()
operator|.
name|getAttributes
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|this
operator|.
name|addAttribute
argument_list|(
operator|new
name|DerivedDbAttribute
argument_list|(
name|this
argument_list|,
operator|(
name|DbAttribute
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// copy relationships
comment|// Iterator rit = new ArrayList(this.getParentEntity().getRelationships()).iterator();
name|Iterator
name|rit
init|=
name|this
operator|.
name|getParentEntity
argument_list|()
operator|.
name|getRelationships
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|rit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbRelationship
name|protoRel
init|=
operator|(
name|DbRelationship
operator|)
name|rit
operator|.
name|next
argument_list|()
decl_stmt|;
name|DbRelationship
name|rel
init|=
operator|new
name|DbRelationship
argument_list|()
decl_stmt|;
name|rel
operator|.
name|setName
argument_list|(
name|protoRel
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rel
operator|.
name|setSourceEntity
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|rel
operator|.
name|setTargetEntity
argument_list|(
name|protoRel
operator|.
name|getTargetEntity
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|joins
init|=
name|protoRel
operator|.
name|getJoins
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|joins
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbJoin
name|protoJoin
init|=
operator|(
name|DbJoin
operator|)
name|joins
operator|.
name|next
argument_list|()
decl_stmt|;
name|DbJoin
name|join
init|=
operator|new
name|DbJoin
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|join
operator|.
name|setSourceName
argument_list|(
name|protoJoin
operator|.
name|getSourceName
argument_list|()
argument_list|)
expr_stmt|;
name|join
operator|.
name|setTargetName
argument_list|(
name|protoJoin
operator|.
name|getTargetName
argument_list|()
argument_list|)
expr_stmt|;
name|rel
operator|.
name|addJoin
argument_list|(
name|join
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|addRelationship
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the parentEntity.      *       * @return DbEntity      */
specifier|public
name|DbEntity
name|getParentEntity
parameter_list|()
block|{
if|if
condition|(
name|parentEntityName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getNonNullNamespace
argument_list|()
operator|.
name|getDbEntity
argument_list|(
name|parentEntityName
argument_list|)
return|;
block|}
comment|/**      * Sets the parent entity of this derived DbEntity.      */
specifier|public
name|void
name|setParentEntity
parameter_list|(
name|DbEntity
name|parentEntity
parameter_list|)
block|{
name|setParentEntityName
argument_list|(
name|parentEntity
operator|!=
literal|null
condition|?
name|parentEntity
operator|.
name|getName
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**       * Returns attributes used in GROUP BY as an unmodifiable list.      */
specifier|public
name|List
name|getGroupByAttributes
parameter_list|()
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|super
operator|.
name|getAttributes
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DerivedDbAttribute
name|attr
init|=
operator|(
name|DerivedDbAttribute
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|attr
operator|.
name|isGroupBy
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
comment|/**      * @see org.apache.cayenne.map.DbEntity#getFullyQualifiedName()      */
specifier|public
name|String
name|getFullyQualifiedName
parameter_list|()
block|{
return|return
operator|(
name|getParentEntity
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|getParentEntity
argument_list|()
operator|.
name|getFullyQualifiedName
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**       * Returns schema of the parent entity.      */
specifier|public
name|String
name|getSchema
parameter_list|()
block|{
return|return
operator|(
name|getParentEntity
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|getParentEntity
argument_list|()
operator|.
name|getSchema
argument_list|()
else|:
literal|null
return|;
block|}
comment|/** Throws exception. */
specifier|public
name|void
name|setSchema
parameter_list|(
name|String
name|schema
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't change schema of a derived entity."
argument_list|)
throw|;
block|}
comment|/**       * Returns catalog of the parent entity.      */
specifier|public
name|String
name|getCatalog
parameter_list|()
block|{
return|return
operator|(
name|getParentEntity
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|getParentEntity
argument_list|()
operator|.
name|getCatalog
argument_list|()
else|:
literal|null
return|;
block|}
comment|/** Throws exception. */
specifier|public
name|void
name|setCatalog
parameter_list|(
name|String
name|catalog
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't change catalogue of a derived entity."
argument_list|)
throw|;
block|}
comment|/**      * @see org.apache.cayenne.map.Entity#removeAttribute(String)      */
specifier|public
name|void
name|removeAttribute
parameter_list|(
name|String
name|attrName
parameter_list|)
block|{
name|super
operator|.
name|removeAttribute
argument_list|(
name|attrName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the parentEntityName.      * @return String      */
specifier|public
name|String
name|getParentEntityName
parameter_list|()
block|{
return|return
name|parentEntityName
return|;
block|}
comment|/**      * Sets the parentEntityName.      * @param parentEntityName The parentEntityName to set      */
specifier|public
name|void
name|setParentEntityName
parameter_list|(
name|String
name|parentEntityName
parameter_list|)
block|{
name|this
operator|.
name|parentEntityName
operator|=
name|parentEntityName
expr_stmt|;
block|}
block|}
end_class

end_unit

