begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Task
import|;
end_import

begin_comment
comment|/**  * Ant-specific extension of DefaultClassGenerator that provides logging  * functions.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|AntClassGenerator
extends|extends
name|DefaultClassGenerator
block|{
specifier|protected
name|Task
name|parentTask
decl_stmt|;
specifier|protected
name|File
name|fileForSuperclass
parameter_list|(
name|String
name|pkgName
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|outFile
init|=
name|super
operator|.
name|fileForSuperclass
argument_list|(
name|pkgName
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|outFile
operator|!=
literal|null
condition|)
block|{
name|parentTask
operator|.
name|log
argument_list|(
literal|"Generating superclass file: "
operator|+
name|outFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|outFile
return|;
block|}
specifier|protected
name|File
name|fileForClass
parameter_list|(
name|String
name|pkgName
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|outFile
init|=
name|super
operator|.
name|fileForClass
argument_list|(
name|pkgName
argument_list|,
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|outFile
operator|!=
literal|null
condition|)
block|{
name|parentTask
operator|.
name|log
argument_list|(
literal|"Generating class file: "
operator|+
name|outFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|outFile
return|;
block|}
specifier|public
name|Task
name|getParentTask
parameter_list|()
block|{
return|return
name|parentTask
return|;
block|}
comment|/**      * Sets the Ant task that uses this generator.      *       * @param parentTask An Ant task that provides Ant context to this generator.      */
specifier|public
name|void
name|setParentTask
parameter_list|(
name|Task
name|parentTask
parameter_list|)
block|{
name|this
operator|.
name|parentTask
operator|=
name|parentTask
expr_stmt|;
block|}
block|}
end_class

end_unit

