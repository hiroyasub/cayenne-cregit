begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|intercept
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DeleteDenyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|LifecycleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistenceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DeleteRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|LifecycleCallbackRegistry
import|;
end_import

begin_comment
comment|/**  * Implements JPA-compliant "PrePersist", "PreRemove" callbacks for the ObjectContext  * operations.<p/>Depending on how callbacks are registered, they are invoked either on  * the persistent object instances themselves or on an instance of an arbitrary listener  * class. Signature of a method of a persistent object is<code>"void method()"</code>,  * while for a non-persistent listener it is<code>"void  * method(Object)"</code>.  *   * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|ObjectContextCallbackInterceptor
extends|extends
name|ObjectContextDecorator
block|{
specifier|protected
name|LifecycleCallbackRegistry
name|callbackRegistry
decl_stmt|;
specifier|public
name|void
name|setContext
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
name|super
operator|.
name|setContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|callbackRegistry
operator|=
operator|(
name|context
operator|!=
literal|null
operator|)
condition|?
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getCallbackRegistry
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
comment|/**      * Creates a new object, applying "PrePersist" callbacks to it.      */
specifier|public
name|Persistent
name|newObject
parameter_list|(
name|Class
name|persistentClass
parameter_list|)
block|{
name|Persistent
name|object
init|=
name|super
operator|.
name|newObject
argument_list|(
name|persistentClass
argument_list|)
decl_stmt|;
name|callbackRegistry
operator|.
name|performCallbacks
argument_list|(
name|LifecycleListener
operator|.
name|PRE_PERSIST
argument_list|,
name|object
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
comment|/**      * Registers a new object and performs a "PrePersist" callback on it.      */
specifier|public
name|void
name|registerNewObject
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|super
operator|.
name|registerNewObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|callbackRegistry
operator|.
name|performCallbacks
argument_list|(
name|LifecycleListener
operator|.
name|PRE_PERSIST
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deletes an object, applying "PreRemove" callbacks to it and all its cascaded      * dependencies.      */
specifier|public
name|void
name|deleteObject
parameter_list|(
name|Persistent
name|object
parameter_list|)
throws|throws
name|DeleteDenyException
block|{
name|applyPreRemoveCallbacks
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|super
operator|.
name|deleteObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
comment|/**      * Recursively applies PreRemove callbacks to an object and objects that will be      * cascaded      */
name|void
name|applyPreRemoveCallbacks
parameter_list|(
name|Persistent
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|.
name|getPersistenceState
argument_list|()
operator|!=
name|PersistenceState
operator|.
name|NEW
condition|)
block|{
name|callbackRegistry
operator|.
name|performCallbacks
argument_list|(
name|LifecycleListener
operator|.
name|PRE_REMOVE
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
name|ObjEntity
name|entity
init|=
name|getEntityResolver
argument_list|()
operator|.
name|lookupObjEntity
argument_list|(
name|object
argument_list|)
decl_stmt|;
name|ClassDescriptor
name|descriptor
init|=
name|getEntityResolver
argument_list|()
operator|.
name|getClassDescriptor
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|entity
operator|.
name|getRelationships
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ObjRelationship
name|relationship
init|=
operator|(
name|ObjRelationship
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|relationship
operator|.
name|getDeleteRule
argument_list|()
operator|==
name|DeleteRule
operator|.
name|CASCADE
condition|)
block|{
name|Object
name|related
init|=
name|descriptor
operator|.
name|getProperty
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|readProperty
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|related
operator|==
literal|null
condition|)
block|{
comment|// do nothing
block|}
if|else if
condition|(
name|related
operator|instanceof
name|Collection
condition|)
block|{
name|Iterator
name|relatedObjects
init|=
operator|(
operator|(
name|Collection
operator|)
name|related
operator|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|relatedObjects
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|applyPreRemoveCallbacks
argument_list|(
operator|(
name|Persistent
operator|)
name|relatedObjects
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|applyPreRemoveCallbacks
argument_list|(
operator|(
name|Persistent
operator|)
name|related
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

