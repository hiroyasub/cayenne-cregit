begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|PkGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntitySorter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|InsertBatchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_comment
comment|/**  * @since 1.2  * @author Andrus Adamchik  */
end_comment

begin_class
class|class
name|DataDomainInsertBucket
extends|extends
name|DataDomainSyncBucket
block|{
name|DataDomainInsertBucket
parameter_list|(
name|DataDomainFlushAction
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|void
name|appendQueriesInternal
parameter_list|(
name|Collection
name|queries
parameter_list|)
block|{
name|DataDomainDBDiffBuilder
name|diffBuilder
init|=
operator|new
name|DataDomainDBDiffBuilder
argument_list|()
decl_stmt|;
name|EntitySorter
name|sorter
init|=
name|parent
operator|.
name|getDomain
argument_list|()
operator|.
name|getEntitySorter
argument_list|()
decl_stmt|;
name|sorter
operator|.
name|sortDbEntities
argument_list|(
name|dbEntities
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Iterator
name|i
init|=
name|dbEntities
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbEntity
name|dbEntity
init|=
operator|(
name|DbEntity
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
name|objEntitiesForDbEntity
init|=
operator|(
name|List
operator|)
name|descriptorsByDbEntity
operator|.
name|get
argument_list|(
name|dbEntity
argument_list|)
decl_stmt|;
name|InsertBatchQuery
name|batch
init|=
operator|new
name|InsertBatchQuery
argument_list|(
name|dbEntity
argument_list|,
literal|27
argument_list|)
decl_stmt|;
name|Iterator
name|j
init|=
name|objEntitiesForDbEntity
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ClassDescriptor
name|descriptor
init|=
operator|(
name|ClassDescriptor
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|diffBuilder
operator|.
name|reset
argument_list|(
name|descriptor
operator|.
name|getEntity
argument_list|()
argument_list|,
name|dbEntity
argument_list|)
expr_stmt|;
name|boolean
name|isMasterDbEntity
init|=
operator|(
name|descriptor
operator|.
name|getEntity
argument_list|()
operator|.
name|getDbEntity
argument_list|()
operator|==
name|dbEntity
operator|)
decl_stmt|;
comment|// remove object set for dependent entity, so that it does not show up
comment|// on post processing
name|List
name|objects
init|=
operator|(
name|List
operator|)
operator|(
name|isMasterDbEntity
condition|?
name|objectsByDescriptor
operator|.
name|get
argument_list|(
name|descriptor
argument_list|)
else|:
name|objectsByDescriptor
operator|.
name|remove
argument_list|(
name|descriptor
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|objects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|checkReadOnly
argument_list|(
name|descriptor
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMasterDbEntity
condition|)
block|{
name|createPermIdsForObjEntity
argument_list|(
name|descriptor
argument_list|,
name|objects
argument_list|)
expr_stmt|;
name|sorter
operator|.
name|sortObjectsForEntity
argument_list|(
name|descriptor
operator|.
name|getEntity
argument_list|()
argument_list|,
name|objects
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|k
init|=
name|objects
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Persistent
name|o
init|=
operator|(
name|Persistent
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
name|snapshot
init|=
name|diffBuilder
operator|.
name|buildDBDiff
argument_list|(
name|parent
operator|.
name|objectDiff
argument_list|(
name|o
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|batch
operator|.
name|add
argument_list|(
name|snapshot
argument_list|,
name|o
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|queries
operator|.
name|add
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|createPermIdsForObjEntity
parameter_list|(
name|ClassDescriptor
name|descriptor
parameter_list|,
name|List
name|dataObjects
parameter_list|)
block|{
if|if
condition|(
name|dataObjects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|ObjEntity
name|objEntity
init|=
name|descriptor
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|DbEntity
name|dbEntity
init|=
name|objEntity
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
name|DataNode
name|node
init|=
name|parent
operator|.
name|getDomain
argument_list|()
operator|.
name|lookupDataNode
argument_list|(
name|dbEntity
operator|.
name|getDataMap
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
name|generatedPks
init|=
name|getAutogeneratedKeys
argument_list|(
name|node
argument_list|,
name|dbEntity
argument_list|)
decl_stmt|;
if|if
condition|(
name|generatedPks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|PkGenerator
name|pkGenerator
init|=
name|node
operator|.
name|getAdapter
argument_list|()
operator|.
name|getPkGenerator
argument_list|()
decl_stmt|;
name|Iterator
name|i
init|=
name|dataObjects
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Persistent
name|object
init|=
operator|(
name|Persistent
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ObjectId
name|id
init|=
name|object
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
operator|!
name|id
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// modify replacement id directly...
name|Map
name|idMap
init|=
name|id
operator|.
name|getReplacementIdMap
argument_list|()
decl_stmt|;
name|boolean
name|autoPkDone
init|=
literal|false
decl_stmt|;
name|Iterator
name|it
init|=
name|generatedPks
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbAttribute
name|dbAttr
init|=
operator|(
name|DbAttribute
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|dbAttrName
init|=
name|dbAttr
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|idMap
operator|.
name|containsKey
argument_list|(
name|dbAttrName
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// handle meaningful PK
name|ObjAttribute
name|objAttr
init|=
name|objEntity
operator|.
name|getAttributeForDbAttribute
argument_list|(
name|dbAttr
argument_list|)
decl_stmt|;
if|if
condition|(
name|objAttr
operator|!=
literal|null
condition|)
block|{
name|Object
name|value
init|=
name|descriptor
operator|.
name|getProperty
argument_list|(
name|objAttr
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|readPropertyDirectly
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// treat numeric zero values as nulls requiring generation
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|Number
operator|&&
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|idMap
operator|.
name|put
argument_list|(
name|dbAttrName
argument_list|,
name|value
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
comment|// only a single key can be generated from DB... if this is done already
comment|// in this loop, we must bail out.
if|if
condition|(
name|autoPkDone
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Primary Key autogeneration only works for a single attribute."
argument_list|)
throw|;
block|}
comment|// finally, use database generation mechanism
try|try
block|{
name|Object
name|pkValue
init|=
name|pkGenerator
operator|.
name|generatePkForDbEntity
argument_list|(
name|node
argument_list|,
name|dbEntity
argument_list|)
decl_stmt|;
name|idMap
operator|.
name|put
argument_list|(
name|dbAttrName
argument_list|,
name|pkValue
argument_list|)
expr_stmt|;
name|autoPkDone
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error generating PK: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**      * Returns a collection of DbAttributes that should be generated by Cayenne.      */
comment|// TODO, andrus 4/12/2006 - move to DbEntity in 2.0+
name|Collection
name|getAutogeneratedKeys
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|DbEntity
name|entity
parameter_list|)
block|{
name|boolean
name|supportsGeneratedKeys
init|=
name|node
operator|.
name|getAdapter
argument_list|()
operator|.
name|supportsGeneratedKeys
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|entity
operator|.
name|getPrimaryKey
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Collection
name|generated
init|=
operator|new
name|ArrayList
argument_list|(
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbAttribute
name|next
init|=
operator|(
name|DbAttribute
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|supportsGeneratedKeys
operator|&&
name|next
operator|.
name|isGenerated
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|isPropagated
argument_list|(
name|next
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|generated
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
return|return
name|generated
return|;
block|}
comment|// TODO, andrus 4/12/2006 - move to DbAttribute in 2.0+
name|boolean
name|isPropagated
parameter_list|(
name|DbAttribute
name|attribute
parameter_list|)
block|{
name|Iterator
name|it
init|=
name|attribute
operator|.
name|getEntity
argument_list|()
operator|.
name|getRelationships
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbRelationship
name|dbRel
init|=
operator|(
name|DbRelationship
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dbRel
operator|.
name|isToMasterPK
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Iterator
name|joins
init|=
name|dbRel
operator|.
name|getJoins
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|joins
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbJoin
name|join
init|=
operator|(
name|DbJoin
operator|)
name|joins
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|attribute
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|join
operator|.
name|getSourceName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

