begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLCompiledExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_comment
comment|/**  * An EJBQL query representation in Cayenne.  *   * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|EJBQLQuery
implements|implements
name|Query
block|{
specifier|protected
name|String
name|name
decl_stmt|;
specifier|protected
name|String
name|ejbqlStatement
decl_stmt|;
specifier|protected
name|Map
name|parameters
decl_stmt|;
specifier|protected
specifier|transient
name|EJBQLCompiledExpression
name|expression
decl_stmt|;
name|EJBQLQueryMetadata
name|metadata
init|=
operator|new
name|EJBQLQueryMetadata
argument_list|()
decl_stmt|;
specifier|public
name|EJBQLQuery
parameter_list|(
name|String
name|ejbqlStatement
parameter_list|)
block|{
name|this
operator|.
name|ejbqlStatement
operator|=
name|ejbqlStatement
expr_stmt|;
block|}
specifier|public
name|QueryMetadata
name|getMetaData
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
name|metadata
operator|.
name|resolve
argument_list|(
name|resolver
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|metadata
return|;
block|}
specifier|public
name|void
name|route
parameter_list|(
name|QueryRouter
name|router
parameter_list|,
name|EntityResolver
name|resolver
parameter_list|,
name|Query
name|substitutedQuery
parameter_list|)
block|{
name|DataMap
name|map
init|=
name|getMetaData
argument_list|(
name|resolver
argument_list|)
operator|.
name|getDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"No DataMap found, can't route query "
operator|+
name|this
argument_list|)
throw|;
block|}
name|router
operator|.
name|route
argument_list|(
name|router
operator|.
name|engineForDataMap
argument_list|(
name|map
argument_list|)
argument_list|,
name|this
argument_list|,
name|substitutedQuery
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SQLAction
name|createSQLAction
parameter_list|(
name|SQLActionVisitor
name|visitor
parameter_list|)
block|{
return|return
name|visitor
operator|.
name|ejbqlAction
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * Returns an unparsed EJB QL statement used to initialize this query.      */
specifier|public
name|String
name|getEjbqlStatement
parameter_list|()
block|{
return|return
name|ejbqlStatement
return|;
block|}
comment|/**      * Returns lazily initialized EJBQLCompiledExpression for this query EJBQL.      */
specifier|public
name|EJBQLCompiledExpression
name|getExpression
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
throws|throws
name|EJBQLException
block|{
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|expression
operator|=
name|EJBQLParserFactory
operator|.
name|getParser
argument_list|()
operator|.
name|compile
argument_list|(
name|ejbqlStatement
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
block|}
return|return
name|expression
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Returns unmodifiable map of combined named and positional parameters. Positional      * parameter keys are Integers, while named parameter keys are strings.      */
specifier|public
name|Map
name|getParameters
parameter_list|()
block|{
return|return
name|parameters
operator|!=
literal|null
condition|?
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|parameters
argument_list|)
else|:
name|Collections
operator|.
name|EMPTY_MAP
return|;
block|}
comment|/**      * Sets a named query parameter value.      */
specifier|public
name|void
name|setParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
comment|// do a minimal sanity check
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|length
argument_list|()
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null or empty parameter name"
argument_list|)
throw|;
block|}
comment|// TODO: andrus, 6/12/2007 - validate against available query parameters - JPA
comment|// spec requires it.
if|if
condition|(
name|parameters
operator|==
literal|null
condition|)
block|{
name|parameters
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
name|parameters
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets a positional query parameter value. Note that parameter indexes are starting      * from 1.      */
specifier|public
name|void
name|setParameter
parameter_list|(
name|int
name|position
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|position
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameter position must be>= 1: "
operator|+
name|position
argument_list|)
throw|;
block|}
comment|// TODO: andrus, 6/12/2007 - validate against available query parameters - JPA
comment|// spec requires it.
if|if
condition|(
name|parameters
operator|==
literal|null
condition|)
block|{
name|parameters
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
name|parameters
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
name|position
argument_list|)
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the fetchLimit property indicating the maximum number of rows this query      * would return.      */
specifier|public
name|int
name|getFetchLimit
parameter_list|()
block|{
return|return
name|metadata
operator|.
name|getFetchLimit
argument_list|()
return|;
block|}
comment|/**      * Sets the fetchLimit property indicating the maximum number of rows this query would      * return.      */
specifier|public
name|void
name|setFetchLimit
parameter_list|(
name|int
name|fetchLimit
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|.
name|setFetchLimit
argument_list|(
name|fetchLimit
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

