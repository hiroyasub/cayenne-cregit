begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLCompiledExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_comment
comment|/**  * An EJBQL query representation in Cayenne.  *   * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|EJBQLQuery
extends|extends
name|IndirectQuery
block|{
specifier|protected
name|String
name|ejbqlStatement
decl_stmt|;
specifier|protected
specifier|transient
name|EJBQLCompiledExpression
name|expression
decl_stmt|;
specifier|public
name|EJBQLQuery
parameter_list|(
name|String
name|ejbqlStatement
parameter_list|)
block|{
name|this
operator|.
name|ejbqlStatement
operator|=
name|ejbqlStatement
expr_stmt|;
block|}
comment|/**      * Compiles EJBQL into a SQLTemplate query and returns this query.      */
specifier|protected
name|Query
name|createReplacementQuery
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
name|EJBQLCompiledExpression
name|expression
init|=
name|getExpression
argument_list|(
name|resolver
argument_list|)
decl_stmt|;
name|EJBQLTranslator
name|translator
init|=
operator|new
name|EJBQLTranslator
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|translator
operator|.
name|translate
argument_list|()
decl_stmt|;
return|return
operator|new
name|SQLTemplate
argument_list|(
name|expression
operator|.
name|getRootDescriptor
argument_list|()
operator|.
name|getObjectClass
argument_list|()
argument_list|,
name|sql
argument_list|)
return|;
block|}
comment|/**      * Returns an unparsed EJB QL statement used to initialize this query.      */
specifier|public
name|String
name|getEjbqlStatement
parameter_list|()
block|{
return|return
name|ejbqlStatement
return|;
block|}
comment|/**      * Returns lazily initialized EJBQLCompiledExpression for this query EJBQL.      */
name|EJBQLCompiledExpression
name|getExpression
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
throws|throws
name|EJBQLException
block|{
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|expression
operator|=
name|EJBQLParserFactory
operator|.
name|getParser
argument_list|()
operator|.
name|compile
argument_list|(
name|ejbqlStatement
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
block|}
return|return
name|expression
return|;
block|}
block|}
end_class

end_unit

