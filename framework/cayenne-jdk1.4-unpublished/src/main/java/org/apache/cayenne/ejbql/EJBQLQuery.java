begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryRouter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLActionVisitor
import|;
end_import

begin_comment
comment|/**  * An EJBQL query representation in Cayenne.  *   * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|EJBQLQuery
implements|implements
name|Query
block|{
specifier|protected
name|String
name|ejbqlStatement
decl_stmt|;
specifier|private
name|Object
name|parsedRoot
decl_stmt|;
specifier|public
name|EJBQLQuery
parameter_list|(
name|String
name|ejbqlStatement
parameter_list|)
block|{
name|this
operator|.
name|ejbqlStatement
operator|=
name|ejbqlStatement
expr_stmt|;
block|}
specifier|public
name|SQLAction
name|createSQLAction
parameter_list|(
name|SQLActionVisitor
name|visitor
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
specifier|public
name|QueryMetadata
name|getMetaData
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|route
parameter_list|(
name|QueryRouter
name|router
parameter_list|,
name|EntityResolver
name|resolver
parameter_list|,
name|Query
name|substitutedQuery
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
comment|/** 	 * Returns an unparsed EJB QL statement used to initialize this query. 	 */
specifier|public
name|String
name|getEjbqlStatement
parameter_list|()
block|{
return|return
name|ejbqlStatement
return|;
block|}
comment|/** 	 * Returns lazily initialialized parsed root of this query. 	 */
name|Object
name|getParsedRoot
parameter_list|()
throws|throws
name|EJBQLException
block|{
if|if
condition|(
name|parsedRoot
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|parsedRoot
operator|=
name|EJBQLParserFactory
operator|.
name|getParser
argument_list|()
operator|.
name|parse
argument_list|(
name|ejbqlStatement
argument_list|)
expr_stmt|;
block|}
return|return
name|parsedRoot
return|;
block|}
block|}
end_class

end_unit

