begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|frontbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|JdbcPkGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLTemplate
import|;
end_import

begin_comment
comment|/**  * @since 1.2  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|FrontBasePkGenerator
extends|extends
name|JdbcPkGenerator
block|{
specifier|public
name|FrontBasePkGenerator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Retruns zero as PK caching is not supported by FrontBaseAdapter.      */
specifier|public
name|int
name|getPkCacheSize
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|createAutoPk
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|List
name|dbEntities
parameter_list|)
throws|throws
name|Exception
block|{
comment|// For each entity (re)set the unique counter
name|Iterator
name|it
init|=
name|dbEntities
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbEntity
name|ent
init|=
operator|(
name|DbEntity
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|runUpdate
argument_list|(
name|node
argument_list|,
name|pkCreateString
argument_list|(
name|ent
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
name|createAutoPkStatements
parameter_list|(
name|List
name|dbEntities
parameter_list|)
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|dbEntities
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbEntity
name|ent
init|=
operator|(
name|DbEntity
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|pkCreateString
argument_list|(
name|ent
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|public
name|void
name|dropAutoPk
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|List
name|dbEntities
parameter_list|)
throws|throws
name|Exception
block|{
block|}
specifier|protected
name|String
name|pkTableCreateString
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
specifier|protected
name|String
name|pkDeleteString
parameter_list|(
name|List
name|dbEntities
parameter_list|)
block|{
return|return
literal|"-- The 'Drop Primary Key Support' option is unavailable"
return|;
block|}
specifier|protected
name|String
name|pkCreateString
parameter_list|(
name|String
name|entName
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"SET UNIQUE = 1000000 FOR \""
argument_list|)
operator|.
name|append
argument_list|(
name|entName
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|pkSelectString
parameter_list|(
name|String
name|entName
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"SELECT UNIQUE FROM \""
argument_list|)
operator|.
name|append
argument_list|(
name|entName
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|pkUpdateString
parameter_list|(
name|String
name|entName
parameter_list|)
block|{
return|return
literal|""
return|;
block|}
specifier|protected
name|String
name|dropAutoPkString
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
specifier|protected
name|int
name|pkFromDatabase
parameter_list|(
name|DataNode
name|node
parameter_list|,
name|DbEntity
name|entity
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|template
init|=
literal|"SELECT #result('UNIQUE' 'int') FROM "
operator|+
name|entity
operator|.
name|getName
argument_list|()
decl_stmt|;
name|SQLTemplate
name|query
init|=
operator|new
name|SQLTemplate
argument_list|(
name|entity
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|QueryResult
name|observer
init|=
operator|new
name|QueryResult
argument_list|()
decl_stmt|;
name|node
operator|.
name|performQueries
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|query
argument_list|)
argument_list|,
name|observer
argument_list|)
expr_stmt|;
name|List
name|results
init|=
name|observer
operator|.
name|getFirstRows
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error fetching PK. Expected one row, got "
operator|+
name|results
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|Map
name|row
init|=
operator|(
name|Map
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Number
name|pk
init|=
operator|(
name|Number
operator|)
name|row
operator|.
name|get
argument_list|(
literal|"UNIQUE"
argument_list|)
decl_stmt|;
return|return
name|pk
operator|.
name|intValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

