begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|cache
operator|.
name|MapQueryCacheFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|cache
operator|.
name|QueryCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|cache
operator|.
name|QueryCacheFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|event
operator|.
name|EventManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|CompoundDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|AshwoodEntitySorter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntitySorter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|ToStringBuilder
import|;
end_import

begin_comment
comment|/**  * DataDomain performs query routing functions in Cayenne. DataDomain creates single data  * source abstraction hiding multiple physical data sources from the user. When a child  * DataContext sends a query to the DataDomain, it is transparently routed to an  * appropriate DataNode.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|DataDomain
implements|implements
name|QueryEngine
implements|,
name|DataChannel
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SHARED_CACHE_ENABLED_PROPERTY
init|=
literal|"cayenne.DataDomain.sharedCache"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|SHARED_CACHE_ENABLED_DEFAULT
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|VALIDATING_OBJECTS_ON_COMMIT_PROPERTY
init|=
literal|"cayenne.DataDomain.validatingObjectsOnCommit"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|VALIDATING_OBJECTS_ON_COMMIT_DEFAULT
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|USING_EXTERNAL_TRANSACTIONS_PROPERTY
init|=
literal|"cayenne.DataDomain.usingExternalTransactions"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|USING_EXTERNAL_TRANSACTIONS_DEFAULT
init|=
literal|false
decl_stmt|;
comment|/**      * Defines a property name for storing an optional DataContextFactory.      *       * @since 1.2      */
specifier|public
specifier|static
specifier|final
name|String
name|DATA_CONTEXT_FACTORY_PROPERTY
init|=
literal|"cayenne.DataDomain.dataContextFactory"
decl_stmt|;
comment|/**      * Defaines a property name for storing optional {@link QueryCacheFactory}.      *       * @since 3.0      */
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_CACHE_FACTORY_PROPERTY
init|=
literal|"cayenne.DataDomain.queryCacheFactory"
decl_stmt|;
comment|/** Stores mapping of data nodes to DataNode name keys. */
specifier|protected
name|Map
name|nodes
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|TreeMap
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|Map
name|nodesByDataMapName
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Properties configured for DataDomain. These include properties of the DataRowStore      * and remote notifications.      */
specifier|protected
name|Map
name|properties
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|TreeMap
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|EntityResolver
name|entityResolver
decl_stmt|;
specifier|protected
name|DataRowStore
name|sharedSnapshotCache
decl_stmt|;
specifier|protected
name|TransactionDelegate
name|transactionDelegate
decl_stmt|;
specifier|protected
name|DataContextFactory
name|dataContextFactory
decl_stmt|;
specifier|protected
name|QueryCacheFactory
name|queryCacheFactory
decl_stmt|;
specifier|protected
name|String
name|name
decl_stmt|;
comment|// these are initializable from properties...
specifier|protected
name|boolean
name|sharedCacheEnabled
decl_stmt|;
specifier|protected
name|boolean
name|validatingObjectsOnCommit
decl_stmt|;
specifier|protected
name|boolean
name|usingExternalTransactions
decl_stmt|;
comment|/**      * @since 1.2      */
specifier|protected
name|EventManager
name|eventManager
decl_stmt|;
comment|/**      * @since 1.2      */
name|EntitySorter
name|entitySorter
decl_stmt|;
comment|/**      * @since 3.0      */
specifier|protected
name|QueryCache
name|queryCache
decl_stmt|;
comment|/**      * Creates a DataDomain and assigns it a name.      */
specifier|public
name|DataDomain
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|DataContextFaults
operator|.
name|init
argument_list|()
expr_stmt|;
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|resetProperties
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates new DataDomain.      *       * @param name DataDomain name. Domain can be located using its name in the      *            Configuration object.      * @param properties A Map containing domain configuration properties.      */
specifier|public
name|DataDomain
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
name|properties
parameter_list|)
block|{
name|DataContextFaults
operator|.
name|init
argument_list|()
expr_stmt|;
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|initWithProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since 1.2      */
comment|// TODO: andrus, 4/12/2006 - after 1.2 API freeze is over, replace DataNode
comment|// EntitySorter with this one ... maybe even make it a part of server-side
comment|// EntityResolver?
name|EntitySorter
name|getEntitySorter
parameter_list|()
block|{
if|if
condition|(
name|entitySorter
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|entitySorter
operator|==
literal|null
condition|)
block|{
comment|// backwards compatibility mode... only possible in a single-node case
comment|// see TODO above
if|if
condition|(
name|nodes
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|entitySorter
operator|=
operator|(
operator|(
name|DataNode
operator|)
name|nodes
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getEntitySorter
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|entitySorter
operator|=
operator|new
name|AshwoodEntitySorter
argument_list|(
name|getDataMaps
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|entitySorter
return|;
block|}
comment|/**      * Exists as a backdoor to override domain sorter until the sorter API is moved from      * DataNode.      *       * @since 1.2      */
name|void
name|setEntitySorter
parameter_list|(
name|EntitySorter
name|entitySorter
parameter_list|)
block|{
name|this
operator|.
name|entitySorter
operator|=
name|entitySorter
expr_stmt|;
block|}
comment|/**      * @since 1.1      */
specifier|protected
name|void
name|resetProperties
parameter_list|()
block|{
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|sharedCacheEnabled
operator|=
name|SHARED_CACHE_ENABLED_DEFAULT
expr_stmt|;
name|validatingObjectsOnCommit
operator|=
name|VALIDATING_OBJECTS_ON_COMMIT_DEFAULT
expr_stmt|;
name|usingExternalTransactions
operator|=
name|USING_EXTERNAL_TRANSACTIONS_DEFAULT
expr_stmt|;
name|dataContextFactory
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Reinitializes domain state with a new set of properties.      *       * @since 1.1      */
specifier|public
name|void
name|initWithProperties
parameter_list|(
name|Map
name|properties
parameter_list|)
block|{
comment|// create map with predictable modification and synchronization behavior
name|Map
name|localMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|localMap
operator|.
name|putAll
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|properties
operator|=
name|localMap
expr_stmt|;
name|Object
name|sharedCacheEnabled
init|=
name|localMap
operator|.
name|get
argument_list|(
name|SHARED_CACHE_ENABLED_PROPERTY
argument_list|)
decl_stmt|;
name|Object
name|validatingObjectsOnCommit
init|=
name|localMap
operator|.
name|get
argument_list|(
name|VALIDATING_OBJECTS_ON_COMMIT_PROPERTY
argument_list|)
decl_stmt|;
name|Object
name|usingExternalTransactions
init|=
name|localMap
operator|.
name|get
argument_list|(
name|USING_EXTERNAL_TRANSACTIONS_PROPERTY
argument_list|)
decl_stmt|;
name|Object
name|dataContextFactory
init|=
name|localMap
operator|.
name|get
argument_list|(
name|DATA_CONTEXT_FACTORY_PROPERTY
argument_list|)
decl_stmt|;
name|Object
name|queryCacheFactory
init|=
name|localMap
operator|.
name|get
argument_list|(
name|QUERY_CACHE_FACTORY_PROPERTY
argument_list|)
decl_stmt|;
comment|// init ivars from properties
name|this
operator|.
name|sharedCacheEnabled
operator|=
operator|(
name|sharedCacheEnabled
operator|!=
literal|null
operator|)
condition|?
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|sharedCacheEnabled
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|SHARED_CACHE_ENABLED_DEFAULT
expr_stmt|;
name|this
operator|.
name|validatingObjectsOnCommit
operator|=
operator|(
name|validatingObjectsOnCommit
operator|!=
literal|null
operator|)
condition|?
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|validatingObjectsOnCommit
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|VALIDATING_OBJECTS_ON_COMMIT_DEFAULT
expr_stmt|;
name|this
operator|.
name|usingExternalTransactions
operator|=
operator|(
name|usingExternalTransactions
operator|!=
literal|null
operator|)
condition|?
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|usingExternalTransactions
operator|.
name|toString
argument_list|()
argument_list|)
else|:
name|USING_EXTERNAL_TRANSACTIONS_DEFAULT
expr_stmt|;
if|if
condition|(
name|dataContextFactory
operator|!=
literal|null
operator|&&
operator|!
name|Util
operator|.
name|isEmptyString
argument_list|(
name|dataContextFactory
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|dataContextFactory
operator|=
operator|(
name|DataContextFactory
operator|)
name|createInstance
argument_list|(
name|dataContextFactory
operator|.
name|toString
argument_list|()
argument_list|,
name|DataContextFactory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|dataContextFactory
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|queryCacheFactory
operator|!=
literal|null
operator|&&
operator|!
name|Util
operator|.
name|isEmptyString
argument_list|(
name|dataContextFactory
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|queryCacheFactory
operator|=
operator|(
name|QueryCacheFactory
operator|)
name|createInstance
argument_list|(
name|queryCacheFactory
operator|.
name|toString
argument_list|()
argument_list|,
name|QueryCacheFactory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queryCacheFactory
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|Object
name|createInstance
parameter_list|(
name|String
name|className
parameter_list|,
name|Class
name|implementedInterface
parameter_list|)
block|{
name|Class
name|aClass
decl_stmt|;
try|try
block|{
name|aClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|,
literal|true
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error loading '"
operator|+
name|className
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|implementedInterface
operator|.
name|isAssignableFrom
argument_list|(
name|aClass
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Failed to load '"
operator|+
name|className
operator|+
literal|"' - it is expected to implement "
operator|+
name|implementedInterface
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|aClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error instantiating "
operator|+
name|className
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns EventManager used by this DataDomain.      *       * @since 1.2      */
specifier|public
name|EventManager
name|getEventManager
parameter_list|()
block|{
return|return
name|eventManager
return|;
block|}
comment|/**      * Sets EventManager used by this DataDomain.      *       * @since 1.2      */
specifier|public
name|void
name|setEventManager
parameter_list|(
name|EventManager
name|eventManager
parameter_list|)
block|{
name|this
operator|.
name|eventManager
operator|=
name|eventManager
expr_stmt|;
if|if
condition|(
name|sharedSnapshotCache
operator|!=
literal|null
condition|)
block|{
name|sharedSnapshotCache
operator|.
name|setEventManager
argument_list|(
name|eventManager
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns "name" property value.      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Sets "name" property to a new value.      */
specifier|public
specifier|synchronized
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
if|if
condition|(
name|sharedSnapshotCache
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|sharedSnapshotCache
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns<code>true</code> if DataContexts produced by this DataDomain are using      * shared DataRowStore. Returns<code>false</code> if each DataContext would work      * with its own DataRowStore. Note that this setting can be overwritten per      * DataContext. See {@link #createDataContext(boolean)}.      */
specifier|public
name|boolean
name|isSharedCacheEnabled
parameter_list|()
block|{
return|return
name|sharedCacheEnabled
return|;
block|}
specifier|public
name|void
name|setSharedCacheEnabled
parameter_list|(
name|boolean
name|sharedCacheEnabled
parameter_list|)
block|{
name|this
operator|.
name|sharedCacheEnabled
operator|=
name|sharedCacheEnabled
expr_stmt|;
block|}
comment|/**      * Returns whether child DataContexts default behavior is to perform object validation      * before commit is executed.      *       * @since 1.1      */
specifier|public
name|boolean
name|isValidatingObjectsOnCommit
parameter_list|()
block|{
return|return
name|validatingObjectsOnCommit
return|;
block|}
comment|/**      * Sets the property defining whether child DataContexts should perform object      * validation before commit is executed.      *       * @since 1.1      */
specifier|public
name|void
name|setValidatingObjectsOnCommit
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|this
operator|.
name|validatingObjectsOnCommit
operator|=
name|flag
expr_stmt|;
block|}
comment|/**      * Returns whether this DataDomain should internally commit all transactions, or let      * container do that.      *       * @since 1.1      */
specifier|public
name|boolean
name|isUsingExternalTransactions
parameter_list|()
block|{
return|return
name|usingExternalTransactions
return|;
block|}
comment|/**      * Sets a property defining whether this DataDomain should internally commit all      * transactions, or let container do that.      *       * @since 1.1      */
specifier|public
name|void
name|setUsingExternalTransactions
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|this
operator|.
name|usingExternalTransactions
operator|=
name|flag
expr_stmt|;
block|}
comment|/**      * @since 1.1      * @return a Map of properties for this DataDomain. There is no guarantees of specific      *         synchronization behavior of this map.      */
specifier|public
name|Map
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
comment|/**      * @since 1.1      * @return TransactionDelegate associated with this DataDomain, or null if no delegate      *         exist.      */
specifier|public
name|TransactionDelegate
name|getTransactionDelegate
parameter_list|()
block|{
return|return
name|transactionDelegate
return|;
block|}
comment|/**      * Initializes TransactionDelegate used by all DataContexts associated with this      * DataDomain.      *       * @since 1.1      */
specifier|public
name|void
name|setTransactionDelegate
parameter_list|(
name|TransactionDelegate
name|transactionDelegate
parameter_list|)
block|{
name|this
operator|.
name|transactionDelegate
operator|=
name|transactionDelegate
expr_stmt|;
block|}
comment|/**      * Returns snapshots cache for this DataDomain, lazily initializing it on the first      * call if 'sharedCacheEnabled' flag is true.      */
specifier|public
specifier|synchronized
name|DataRowStore
name|getSharedSnapshotCache
parameter_list|()
block|{
if|if
condition|(
name|sharedSnapshotCache
operator|==
literal|null
operator|&&
name|sharedCacheEnabled
condition|)
block|{
name|this
operator|.
name|sharedSnapshotCache
operator|=
operator|new
name|DataRowStore
argument_list|(
name|name
argument_list|,
name|properties
argument_list|,
name|eventManager
argument_list|)
expr_stmt|;
block|}
return|return
name|sharedSnapshotCache
return|;
block|}
comment|/**      * Returns a guaranteed non-null shared snapshot cache regardless of the      * 'sharedCacheEnabled' flag setting. This allows to build DataContexts that do not      * follow the default policy.      *       * @since 3.0      */
specifier|synchronized
name|DataRowStore
name|nonNullSharedSnapshotCache
parameter_list|()
block|{
if|if
condition|(
name|sharedSnapshotCache
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|sharedSnapshotCache
operator|=
operator|new
name|DataRowStore
argument_list|(
name|name
argument_list|,
name|properties
argument_list|,
name|eventManager
argument_list|)
expr_stmt|;
block|}
return|return
name|sharedSnapshotCache
return|;
block|}
comment|/**      * Shuts down the previous cache instance, sets cache to the new DataSowStore instance      * and updates two properties of the new DataSowStore: name and eventManager.      */
specifier|public
specifier|synchronized
name|void
name|setSharedSnapshotCache
parameter_list|(
name|DataRowStore
name|snapshotCache
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|sharedSnapshotCache
operator|!=
name|snapshotCache
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|sharedSnapshotCache
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|sharedSnapshotCache
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|sharedSnapshotCache
operator|=
name|snapshotCache
expr_stmt|;
if|if
condition|(
name|snapshotCache
operator|!=
literal|null
condition|)
block|{
name|snapshotCache
operator|.
name|setEventManager
argument_list|(
name|getEventManager
argument_list|()
argument_list|)
expr_stmt|;
name|snapshotCache
operator|.
name|setName
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|DataContextFactory
name|getDataContextFactory
parameter_list|()
block|{
return|return
name|dataContextFactory
return|;
block|}
specifier|public
name|void
name|setDataContextFactory
parameter_list|(
name|DataContextFactory
name|dataContextFactory
parameter_list|)
block|{
name|this
operator|.
name|dataContextFactory
operator|=
name|dataContextFactory
expr_stmt|;
block|}
comment|/** Registers new DataMap with this domain. */
specifier|public
name|void
name|addMap
parameter_list|(
name|DataMap
name|map
parameter_list|)
block|{
name|getEntityResolver
argument_list|()
operator|.
name|addDataMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|entitySorter
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns DataMap matching<code>name</code> parameter. */
specifier|public
name|DataMap
name|getMap
parameter_list|(
name|String
name|mapName
parameter_list|)
block|{
return|return
name|getEntityResolver
argument_list|()
operator|.
name|getDataMap
argument_list|(
name|mapName
argument_list|)
return|;
block|}
comment|/**      * Removes named DataMap from this DataDomain and any underlying DataNodes that      * include it.      */
specifier|public
specifier|synchronized
name|void
name|removeMap
parameter_list|(
name|String
name|mapName
parameter_list|)
block|{
name|DataMap
name|map
init|=
name|getMap
argument_list|(
name|mapName
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// remove from data nodes
name|Iterator
name|it
init|=
name|nodes
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DataNode
name|node
init|=
operator|(
name|DataNode
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|node
operator|.
name|removeDataMap
argument_list|(
name|mapName
argument_list|)
expr_stmt|;
block|}
comment|// remove from EntityResolver
name|getEntityResolver
argument_list|()
operator|.
name|removeDataMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|entitySorter
operator|=
literal|null
expr_stmt|;
comment|// reindex nodes to remove references on removed map entities
name|reindexNodes
argument_list|()
expr_stmt|;
block|}
comment|/**      * Removes a DataNode from DataDomain. Any maps previously associated with this node      * within domain will still be kept around, however they wan't be mapped to any node.      */
specifier|public
specifier|synchronized
name|void
name|removeDataNode
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
name|DataNode
name|removed
init|=
operator|(
name|DataNode
operator|)
name|nodes
operator|.
name|remove
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|removed
operator|!=
literal|null
condition|)
block|{
name|removed
operator|.
name|setEntityResolver
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|nodesByDataMapName
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|it
operator|.
name|next
argument_list|()
operator|==
name|removed
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Returns a collection of registered DataMaps.      */
specifier|public
name|Collection
name|getDataMaps
parameter_list|()
block|{
return|return
name|getEntityResolver
argument_list|()
operator|.
name|getDataMaps
argument_list|()
return|;
block|}
comment|/**      * Returns an unmodifiable collection of DataNodes associated with this domain.      */
specifier|public
name|Collection
name|getDataNodes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|nodes
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Closes all data nodes, removes them from the list of available nodes.      */
specifier|public
name|void
name|reset
parameter_list|()
block|{
synchronized|synchronized
init|(
name|nodes
init|)
block|{
name|nodes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nodesByDataMapName
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|entityResolver
operator|!=
literal|null
condition|)
block|{
name|entityResolver
operator|.
name|clearCache
argument_list|()
expr_stmt|;
name|entityResolver
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Clears the list of internal DataMaps. In most cases it is wise to call "reset"      * before doing that.      */
specifier|public
name|void
name|clearDataMaps
parameter_list|()
block|{
name|getEntityResolver
argument_list|()
operator|.
name|setDataMaps
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds new DataNode.      */
specifier|public
specifier|synchronized
name|void
name|addNode
parameter_list|(
name|DataNode
name|node
parameter_list|)
block|{
comment|// add node to name->node map
name|nodes
operator|.
name|put
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|node
operator|.
name|setEntityResolver
argument_list|(
name|this
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
expr_stmt|;
comment|// add node to "ent name->node" map
name|Iterator
name|nodeMaps
init|=
name|node
operator|.
name|getDataMaps
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nodeMaps
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DataMap
name|map
init|=
operator|(
name|DataMap
operator|)
name|nodeMaps
operator|.
name|next
argument_list|()
decl_stmt|;
name|this
operator|.
name|addMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodesByDataMapName
operator|.
name|put
argument_list|(
name|map
operator|.
name|getName
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|entitySorter
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Creates and returns a new DataContext. If this DataDomain is configured to use      * shared cache, returned DataContext will use shared cache as well. Otherwise a new      * instance of DataRowStore will be used as its local cache.      */
specifier|public
name|DataContext
name|createDataContext
parameter_list|()
block|{
return|return
name|createDataContext
argument_list|(
name|isSharedCacheEnabled
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Creates a new DataContext.      *       * @param useSharedCache determines whether resulting DataContext should use shared      *            vs. local cache. This setting overrides default behavior configured for      *            this DataDomain via {@link #SHARED_CACHE_ENABLED_PROPERTY}.      * @since 1.1      */
specifier|public
name|DataContext
name|createDataContext
parameter_list|(
name|boolean
name|useSharedCache
parameter_list|)
block|{
comment|// for new dataRowStores use the same name for all stores
comment|// it makes it easier to track the event subject
name|DataRowStore
name|snapshotCache
init|=
operator|(
name|useSharedCache
operator|)
condition|?
name|nonNullSharedSnapshotCache
argument_list|()
else|:
operator|new
name|DataRowStore
argument_list|(
name|name
argument_list|,
name|properties
argument_list|,
name|eventManager
argument_list|)
decl_stmt|;
name|DataContext
name|context
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|dataContextFactory
condition|)
block|{
name|context
operator|=
operator|new
name|DataContext
argument_list|(
operator|(
name|DataChannel
operator|)
name|this
argument_list|,
operator|new
name|ObjectStore
argument_list|(
name|snapshotCache
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|=
name|dataContextFactory
operator|.
name|createDataContext
argument_list|(
name|this
argument_list|,
operator|new
name|ObjectStore
argument_list|(
name|snapshotCache
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|setValidatingObjectsOnCommit
argument_list|(
name|isValidatingObjectsOnCommit
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
comment|/**      * Creates and returns a new inactive transaction. Returned transaction is bound to      * the current execution thread.      *<p>      * If there is a TransactionDelegate, adds the delegate to the newly created      * Transaction. Behavior of the returned Transaction depends on      * "usingInternalTransactions" property setting.      *</p>      *       * @since 1.1      */
specifier|public
name|Transaction
name|createTransaction
parameter_list|()
block|{
return|return
operator|(
name|isUsingExternalTransactions
argument_list|()
operator|)
condition|?
name|Transaction
operator|.
name|externalTransaction
argument_list|(
name|getTransactionDelegate
argument_list|()
argument_list|)
else|:
name|Transaction
operator|.
name|internalTransaction
argument_list|(
name|getTransactionDelegate
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns registered DataNode whose name matches<code>name</code> parameter.      */
specifier|public
name|DataNode
name|getNode
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
return|return
operator|(
name|DataNode
operator|)
name|nodes
operator|.
name|get
argument_list|(
name|nodeName
argument_list|)
return|;
block|}
comment|/**      * Updates internal index of DataNodes stored by the entity name.      */
specifier|public
specifier|synchronized
name|void
name|reindexNodes
parameter_list|()
block|{
name|nodesByDataMapName
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Iterator
name|nodes
init|=
name|this
operator|.
name|getDataNodes
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nodes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DataNode
name|node
init|=
operator|(
name|DataNode
operator|)
name|nodes
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
name|nodeMaps
init|=
name|node
operator|.
name|getDataMaps
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nodeMaps
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DataMap
name|map
init|=
operator|(
name|DataMap
operator|)
name|nodeMaps
operator|.
name|next
argument_list|()
decl_stmt|;
name|addMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|nodesByDataMapName
operator|.
name|put
argument_list|(
name|map
operator|.
name|getName
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns a DataNode that should handle queries for all entities in a DataMap.      *       * @since 1.1      */
specifier|public
name|DataNode
name|lookupDataNode
parameter_list|(
name|DataMap
name|map
parameter_list|)
block|{
synchronized|synchronized
init|(
name|nodesByDataMapName
init|)
block|{
name|DataNode
name|node
init|=
operator|(
name|DataNode
operator|)
name|nodesByDataMapName
operator|.
name|get
argument_list|(
name|map
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|reindexNodes
argument_list|()
expr_stmt|;
return|return
operator|(
name|DataNode
operator|)
name|nodesByDataMapName
operator|.
name|get
argument_list|(
name|map
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|node
return|;
block|}
block|}
block|}
comment|/**      * Sets EntityResolver. If not set explicitly, DataDomain creates a default      * EntityResolver internally on demand.      *       * @since 1.1      */
specifier|public
name|void
name|setEntityResolver
parameter_list|(
name|EntityResolver
name|entityResolver
parameter_list|)
block|{
name|this
operator|.
name|entityResolver
operator|=
name|entityResolver
expr_stmt|;
block|}
comment|// creates default entity resolver if there is none set yet
specifier|private
specifier|synchronized
name|void
name|createEntityResolver
parameter_list|()
block|{
if|if
condition|(
name|entityResolver
operator|==
literal|null
condition|)
block|{
comment|// entity resolver will be self-indexing as we add all our maps
comment|// to it as they are added to the DataDomain
name|entityResolver
operator|=
operator|new
name|EntityResolver
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Shutdowns all owned data nodes. Invokes DataNode.shutdown().      */
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|sharedSnapshotCache
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|sharedSnapshotCache
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|Collection
name|dataNodes
init|=
name|getDataNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|dataNodes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DataNode
name|node
init|=
operator|(
name|DataNode
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|node
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
block|}
block|}
block|}
comment|/**      * Routes queries to appropriate DataNodes for execution.      */
specifier|public
name|void
name|performQueries
parameter_list|(
specifier|final
name|Collection
name|queries
parameter_list|,
specifier|final
name|OperationObserver
name|callback
parameter_list|)
block|{
name|runInTransaction
argument_list|(
operator|new
name|Transformer
argument_list|()
block|{
specifier|public
name|Object
name|transform
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
operator|new
name|DataDomainLegacyQueryAction
argument_list|(
name|DataDomain
operator|.
name|this
argument_list|,
operator|new
name|QueryChain
argument_list|(
name|queries
argument_list|)
argument_list|,
name|callback
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// ****** DataChannel methods:
comment|/**      * Runs query returning generic QueryResponse.      *       * @since 1.2      */
specifier|public
name|QueryResponse
name|onQuery
parameter_list|(
specifier|final
name|ObjectContext
name|context
parameter_list|,
specifier|final
name|Query
name|query
parameter_list|)
block|{
comment|// transaction note:
comment|// we don't wrap this code in transaction to reduce transaction scope to
comment|// just the DB operation for better performance ... query action will start a
comment|// transaction itself when and if needed
return|return
operator|new
name|DataDomainQueryAction
argument_list|(
name|context
argument_list|,
name|DataDomain
operator|.
name|this
argument_list|,
name|query
argument_list|)
operator|.
name|execute
argument_list|()
return|;
block|}
comment|/**      * Returns an EntityResolver that stores mapping information for this domain.      */
specifier|public
name|EntityResolver
name|getEntityResolver
parameter_list|()
block|{
if|if
condition|(
name|entityResolver
operator|==
literal|null
condition|)
block|{
name|createEntityResolver
argument_list|()
expr_stmt|;
block|}
return|return
name|entityResolver
return|;
block|}
comment|/**      * Only handles commit-type synchronization, ignoring any other type.      *       * @since 1.2      */
specifier|public
name|GraphDiff
name|onSync
parameter_list|(
specifier|final
name|ObjectContext
name|originatingContext
parameter_list|,
specifier|final
name|GraphDiff
name|changes
parameter_list|,
name|int
name|syncType
parameter_list|)
block|{
switch|switch
condition|(
name|syncType
condition|)
block|{
case|case
name|DataChannel
operator|.
name|ROLLBACK_CASCADE_SYNC
case|:
return|return
name|onSyncRollback
argument_list|(
name|originatingContext
argument_list|)
return|;
comment|// "cascade" and "no_cascade" are the same from the DataDomain
comment|// perspective,
comment|// including transaction handling logic
case|case
name|DataChannel
operator|.
name|FLUSH_NOCASCADE_SYNC
case|:
case|case
name|DataChannel
operator|.
name|FLUSH_CASCADE_SYNC
case|:
return|return
operator|(
name|GraphDiff
operator|)
name|runInTransaction
argument_list|(
operator|new
name|Transformer
argument_list|()
block|{
specifier|public
name|Object
name|transform
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
return|return
name|onSyncFlush
argument_list|(
name|originatingContext
argument_list|,
name|changes
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Invalid synchronization type: "
operator|+
name|syncType
argument_list|)
throw|;
block|}
block|}
name|GraphDiff
name|onSyncRollback
parameter_list|(
name|ObjectContext
name|originatingContext
parameter_list|)
block|{
comment|// if there is a transaction in progress, roll it back
name|Transaction
name|transaction
init|=
name|Transaction
operator|.
name|getThreadTransaction
argument_list|()
decl_stmt|;
if|if
condition|(
name|transaction
operator|!=
literal|null
condition|)
block|{
name|transaction
operator|.
name|setRollbackOnly
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|CompoundDiff
argument_list|()
return|;
block|}
name|GraphDiff
name|onSyncFlush
parameter_list|(
name|ObjectContext
name|originatingContext
parameter_list|,
name|GraphDiff
name|childChanges
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|originatingContext
operator|instanceof
name|DataContext
operator|)
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"No support for committing ObjectContexts that are not DataContexts yet. "
operator|+
literal|"Unsupported context: "
operator|+
name|originatingContext
argument_list|)
throw|;
block|}
return|return
operator|new
name|DataDomainFlushAction
argument_list|(
name|this
argument_list|)
operator|.
name|flush
argument_list|(
operator|(
name|DataContext
operator|)
name|originatingContext
argument_list|,
name|childChanges
argument_list|)
return|;
block|}
comment|/**      * Executes Transformer.transform() method in a transaction. Transaction policy is to      * check for the thread transaction, and use it if one exists. If it doesn't, a new      * transaction is created, with a scope limited to this method.      */
comment|// WARNING: (andrus) if we ever decide to make this method protected or public, we
comment|// need to change the signature to avoid API dependency on commons-collections
name|Object
name|runInTransaction
parameter_list|(
name|Transformer
name|operation
parameter_list|)
block|{
comment|// user or container-managed or nested transaction
if|if
condition|(
name|Transaction
operator|.
name|getThreadTransaction
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|operation
operator|.
name|transform
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|// Cayenne-managed transaction
name|Transaction
name|transaction
init|=
name|createTransaction
argument_list|()
decl_stmt|;
name|Transaction
operator|.
name|bindThreadTransaction
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
try|try
block|{
comment|// implicit begin..
name|Object
name|result
init|=
name|operation
operator|.
name|transform
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|transaction
operator|.
name|setRollbackOnly
argument_list|()
expr_stmt|;
comment|// must rethrow
if|if
condition|(
name|ex
operator|instanceof
name|CayenneRuntimeException
condition|)
block|{
throw|throw
operator|(
name|CayenneRuntimeException
operator|)
name|ex
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|Transaction
operator|.
name|bindThreadTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|transaction
operator|.
name|getStatus
argument_list|()
operator|==
name|Transaction
operator|.
name|STATUS_MARKED_ROLLEDBACK
condition|)
block|{
try|try
block|{
name|transaction
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|rollbackEx
parameter_list|)
block|{
comment|// although we don't expect an exception here, print the stack, as
comment|// there have been some Cayenne bugs already (CAY-557) that were
comment|// masked by this 'catch' clause.
name|QueryLogger
operator|.
name|logQueryError
argument_list|(
name|rollbackEx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|ToStringBuilder
argument_list|(
name|this
argument_list|)
operator|.
name|append
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Returns a non-null {@link QueryCacheFactory}.      *       * @since 3.0      */
specifier|public
name|QueryCacheFactory
name|getQueryCacheFactory
parameter_list|()
block|{
return|return
name|queryCacheFactory
operator|!=
literal|null
condition|?
name|queryCacheFactory
else|:
operator|new
name|MapQueryCacheFactory
argument_list|()
return|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|void
name|setQueryCacheFactory
parameter_list|(
name|QueryCacheFactory
name|queryCacheFactory
parameter_list|)
block|{
name|this
operator|.
name|queryCacheFactory
operator|=
name|queryCacheFactory
expr_stmt|;
block|}
comment|/**      * Returns shared {@link QueryCache} used by this DataDomain, creating it on the fly      * if needed. Uses factory obtained via {@link #getQueryCacheFactory()} to initialize      * the cache for the first time.      *       * @since 3.0      */
specifier|public
name|QueryCache
name|getQueryCache
parameter_list|()
block|{
if|if
condition|(
name|queryCache
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|queryCache
operator|==
literal|null
condition|)
block|{
name|queryCache
operator|=
name|getQueryCacheFactory
argument_list|()
operator|.
name|getQueryCache
argument_list|(
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|queryCache
return|;
block|}
comment|/**      * @since 3.0      */
name|QueryCache
name|getQueryCacheInternal
parameter_list|()
block|{
return|return
name|queryCache
return|;
block|}
block|}
end_class

end_unit

