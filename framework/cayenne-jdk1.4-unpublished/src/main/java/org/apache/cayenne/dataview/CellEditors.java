begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dataview
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|CellEditors
block|{
specifier|protected
name|Border
name|editStateBorder
init|=
operator|new
name|LineBorder
argument_list|(
name|Color
operator|.
name|black
argument_list|)
decl_stmt|;
specifier|protected
name|Border
name|invalidStateBorder
init|=
operator|new
name|LineBorder
argument_list|(
name|Color
operator|.
name|red
argument_list|)
decl_stmt|;
specifier|public
name|FormattedFieldEditor
name|createFormattedFieldEditor
parameter_list|(
name|JFormattedTextField
operator|.
name|AbstractFormatter
name|formatter
parameter_list|,
name|int
name|alignment
parameter_list|)
block|{
name|JFormattedTextField
name|field
init|=
operator|new
name|JFormattedTextField
argument_list|(
name|formatter
argument_list|)
decl_stmt|;
if|if
condition|(
name|alignment
operator|>=
literal|0
condition|)
name|field
operator|.
name|setHorizontalAlignment
argument_list|(
name|alignment
argument_list|)
expr_stmt|;
return|return
operator|new
name|FormattedFieldEditor
argument_list|(
name|field
argument_list|)
return|;
block|}
specifier|public
name|FormattedFieldEditor
name|createFormattedFieldEditor
parameter_list|(
name|Format
name|formatter
parameter_list|,
name|int
name|alignment
parameter_list|)
block|{
name|JFormattedTextField
name|field
init|=
operator|new
name|JFormattedTextField
argument_list|(
name|formatter
argument_list|)
decl_stmt|;
if|if
condition|(
name|alignment
operator|>=
literal|0
condition|)
name|field
operator|.
name|setHorizontalAlignment
argument_list|(
name|alignment
argument_list|)
expr_stmt|;
return|return
operator|new
name|FormattedFieldEditor
argument_list|(
name|field
argument_list|)
return|;
block|}
specifier|public
name|FormattedFieldEditor
name|createFormattedFieldEditor
parameter_list|(
name|String
name|mask
parameter_list|,
name|int
name|alignment
parameter_list|)
throws|throws
name|ParseException
block|{
name|MaskFormatter
name|formatter
init|=
operator|new
name|MaskFormatter
argument_list|(
name|mask
argument_list|)
decl_stmt|;
return|return
name|createFormattedFieldEditor
argument_list|(
name|formatter
argument_list|,
name|alignment
argument_list|)
return|;
block|}
specifier|public
name|TextFieldEditor
name|createTextFieldEditor
parameter_list|(
name|int
name|alignment
parameter_list|)
block|{
name|JTextField
name|field
init|=
operator|new
name|JTextField
argument_list|()
decl_stmt|;
if|if
condition|(
name|alignment
operator|>=
literal|0
condition|)
name|field
operator|.
name|setHorizontalAlignment
argument_list|(
name|alignment
argument_list|)
expr_stmt|;
return|return
operator|new
name|TextFieldEditor
argument_list|(
name|field
argument_list|)
return|;
block|}
specifier|public
name|CheckBoxEditor
name|createCheckBoxEditor
parameter_list|()
block|{
name|JCheckBox
name|checkBox
init|=
operator|new
name|JCheckBox
argument_list|()
decl_stmt|;
return|return
operator|new
name|CheckBoxEditor
argument_list|(
name|checkBox
argument_list|)
return|;
block|}
specifier|public
name|ComboBoxEditor
name|createComboBoxEditor
parameter_list|(
name|ComboBoxModel
name|model
parameter_list|,
name|ListCellRenderer
name|renderer
parameter_list|)
block|{
name|JComboBox
name|comboBox
init|=
operator|new
name|JComboBox
argument_list|(
name|model
argument_list|)
decl_stmt|;
if|if
condition|(
name|renderer
operator|!=
literal|null
condition|)
name|comboBox
operator|.
name|setRenderer
argument_list|(
name|renderer
argument_list|)
expr_stmt|;
return|return
operator|new
name|ComboBoxEditor
argument_list|(
name|comboBox
argument_list|)
return|;
block|}
specifier|public
name|ButtonEditor
name|createButtonEditor
parameter_list|(
name|JButton
name|button
parameter_list|)
block|{
return|return
operator|new
name|ButtonEditor
argument_list|(
name|button
argument_list|)
return|;
block|}
specifier|public
name|SpinnerEditor
name|createSpinnerEditor
parameter_list|(
name|SpinnerModel
name|model
parameter_list|,
name|Format
name|format
parameter_list|)
block|{
name|JSpinner
name|spinner
init|=
operator|new
name|JSpinner
argument_list|(
name|model
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
name|JFormattedTextField
name|field
init|=
operator|(
operator|(
name|JSpinner
operator|.
name|DefaultEditor
operator|)
name|spinner
operator|.
name|getEditor
argument_list|()
operator|)
operator|.
name|getTextField
argument_list|()
decl_stmt|;
name|JFormattedTextField
operator|.
name|AbstractFormatter
name|formatter
init|=
name|field
operator|.
name|getFormatter
argument_list|()
decl_stmt|;
if|if
condition|(
name|formatter
operator|instanceof
name|InternationalFormatter
condition|)
operator|(
operator|(
name|InternationalFormatter
operator|)
name|formatter
operator|)
operator|.
name|setFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SpinnerEditor
argument_list|(
name|spinner
argument_list|)
return|;
block|}
specifier|public
name|TableCellEditor
name|createTableCellEditor
parameter_list|(
name|ObjEntityViewField
name|field
parameter_list|)
block|{
name|CellRenderers
name|cellRenderers
init|=
operator|new
name|CellRenderers
argument_list|()
decl_stmt|;
name|TableCellEditor
name|editor
init|=
literal|null
decl_stmt|;
name|Format
name|format
init|=
name|field
operator|.
name|getEditFormat
argument_list|()
decl_stmt|;
name|int
name|dataType
init|=
name|field
operator|.
name|getDataType
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|boolean
name|lookup
init|=
name|field
operator|.
name|isLookup
argument_list|()
decl_stmt|;
name|int
name|alignment
decl_stmt|;
switch|switch
condition|(
name|dataType
condition|)
block|{
case|case
name|DataTypeEnum
operator|.
name|INTEGER_TYPE_VALUE
case|:
case|case
name|DataTypeEnum
operator|.
name|DOUBLE_TYPE_VALUE
case|:
case|case
name|DataTypeEnum
operator|.
name|MONEY_TYPE_VALUE
case|:
case|case
name|DataTypeEnum
operator|.
name|PERCENT_TYPE_VALUE
case|:
name|alignment
operator|=
name|JTextField
operator|.
name|RIGHT
expr_stmt|;
break|break;
default|default:
name|alignment
operator|=
name|JTextField
operator|.
name|LEFT
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|lookup
condition|)
block|{
name|ComboBoxModel
name|comboData
init|=
operator|new
name|DefaultComboBoxModel
argument_list|(
name|field
operator|.
name|getLookupValues
argument_list|()
argument_list|)
decl_stmt|;
name|ListCellRenderer
name|comboRenderer
init|=
name|cellRenderers
operator|.
name|createListCellRenderer
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|editor
operator|=
name|createComboBoxEditor
argument_list|(
name|comboData
argument_list|,
name|comboRenderer
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|format
operator|instanceof
name|MapFormat
condition|)
block|{
name|MapFormat
name|mapFormat
init|=
operator|(
name|MapFormat
operator|)
name|format
decl_stmt|;
name|ComboBoxModel
name|comboData
init|=
operator|new
name|DefaultComboBoxModel
argument_list|(
operator|(
name|mapFormat
operator|)
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|ListCellRenderer
name|comboRenderer
init|=
name|cellRenderers
operator|.
name|createFormatListCellRenderer
argument_list|(
name|mapFormat
argument_list|,
name|mapFormat
operator|.
name|getNullFormat
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|editor
operator|=
name|createComboBoxEditor
argument_list|(
name|comboData
argument_list|,
name|comboRenderer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|editor
operator|=
name|createFormattedFieldEditor
argument_list|(
name|format
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|dataType
operator|==
name|DataTypeEnum
operator|.
name|BOOLEAN_TYPE_VALUE
condition|)
name|editor
operator|=
name|createCheckBoxEditor
argument_list|()
expr_stmt|;
else|else
name|editor
operator|=
name|createTextFieldEditor
argument_list|(
name|alignment
argument_list|)
expr_stmt|;
block|}
return|return
name|editor
return|;
block|}
specifier|public
name|void
name|installEditors
parameter_list|(
name|JTable
name|table
parameter_list|)
block|{
name|TableModel
name|m
init|=
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|m
operator|instanceof
name|DOTableModel
operator|)
condition|)
return|return;
name|DOTableModel
name|model
init|=
operator|(
name|DOTableModel
operator|)
name|m
decl_stmt|;
name|TableColumnModel
name|columnModel
init|=
name|table
operator|.
name|getColumnModel
argument_list|()
decl_stmt|;
name|int
name|columnCount
init|=
name|model
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnCount
condition|;
name|i
operator|++
control|)
block|{
name|ObjEntityViewField
name|field
init|=
name|model
operator|.
name|getField
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|TableCellEditor
name|editor
init|=
name|createTableCellEditor
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|TableColumn
name|column
init|=
name|columnModel
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|column
operator|.
name|setCellEditor
argument_list|(
name|editor
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|FormattedFieldEditor
extends|extends
name|DefaultCellEditor
block|{
specifier|public
name|FormattedFieldEditor
parameter_list|(
specifier|final
name|JFormattedTextField
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|field
operator|.
name|removeActionListener
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|clickCountToStart
operator|=
literal|2
expr_stmt|;
name|delegate
operator|=
operator|new
name|EditorDelegate
argument_list|()
block|{
specifier|public
name|void
name|setValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|field
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|getCellEditorValue
parameter_list|()
block|{
return|return
name|field
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|stopCellEditing
parameter_list|()
block|{
if|if
condition|(
name|field
operator|.
name|isEditValid
argument_list|()
condition|)
block|{
try|try
block|{
name|field
operator|.
name|commitEdit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
block|}
block|}
else|else
block|{
name|field
operator|.
name|setBorder
argument_list|(
name|invalidStateBorder
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|super
operator|.
name|stopCellEditing
argument_list|()
return|;
block|}
block|}
expr_stmt|;
name|field
operator|.
name|addActionListener
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Component
name|getTableCellEditorComponent
parameter_list|(
name|JTable
name|table
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|delegate
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|JFormattedTextField
operator|)
name|editorComponent
operator|)
operator|.
name|isEditValid
argument_list|()
condition|)
name|editorComponent
operator|.
name|setBorder
argument_list|(
name|editStateBorder
argument_list|)
expr_stmt|;
else|else
name|editorComponent
operator|.
name|setBorder
argument_list|(
name|invalidStateBorder
argument_list|)
expr_stmt|;
return|return
name|editorComponent
return|;
block|}
block|}
specifier|public
class|class
name|TextFieldEditor
extends|extends
name|DefaultCellEditor
block|{
specifier|protected
name|Border
name|editStateBorder
init|=
operator|new
name|LineBorder
argument_list|(
name|Color
operator|.
name|black
argument_list|)
decl_stmt|;
specifier|public
name|TextFieldEditor
parameter_list|(
name|JTextField
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|field
operator|.
name|setBorder
argument_list|(
name|editStateBorder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|CheckBoxEditor
extends|extends
name|DefaultCellEditor
block|{
specifier|public
name|CheckBoxEditor
parameter_list|(
name|JCheckBox
name|checkBox
parameter_list|)
block|{
name|super
argument_list|(
name|checkBox
argument_list|)
expr_stmt|;
name|checkBox
operator|.
name|setBorder
argument_list|(
name|editStateBorder
argument_list|)
expr_stmt|;
name|checkBox
operator|.
name|setHorizontalAlignment
argument_list|(
name|JCheckBox
operator|.
name|CENTER
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|ComboBoxEditor
extends|extends
name|DefaultCellEditor
block|{
specifier|public
name|ComboBoxEditor
parameter_list|(
name|JComboBox
name|comboBox
parameter_list|)
block|{
name|super
argument_list|(
name|comboBox
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|setBorder
argument_list|(
name|editStateBorder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|SpinnerEditor
extends|extends
name|DefaultCellEditor
block|{
specifier|public
name|SpinnerEditor
parameter_list|(
specifier|final
name|JSpinner
name|spinner
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|JTextField
argument_list|()
argument_list|)
expr_stmt|;
name|editorComponent
operator|=
name|spinner
expr_stmt|;
name|spinner
operator|.
name|setBorder
argument_list|(
name|editStateBorder
argument_list|)
expr_stmt|;
name|spinner
operator|.
name|getEditor
argument_list|()
operator|.
name|setBorder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|JFormattedTextField
name|field
init|=
operator|(
operator|(
name|JSpinner
operator|.
name|DefaultEditor
operator|)
name|spinner
operator|.
name|getEditor
argument_list|()
operator|)
operator|.
name|getTextField
argument_list|()
decl_stmt|;
name|field
operator|.
name|setBorder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|delegate
operator|=
operator|new
name|EditorDelegate
argument_list|()
block|{
specifier|public
name|void
name|setValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|spinner
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|getCellEditorValue
parameter_list|()
block|{
return|return
name|spinner
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|stopCellEditing
parameter_list|()
block|{
if|if
condition|(
name|field
operator|.
name|isEditValid
argument_list|()
condition|)
block|{
try|try
block|{
name|field
operator|.
name|commitEdit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
block|}
block|}
else|else
block|{
name|field
operator|.
name|setBorder
argument_list|(
name|invalidStateBorder
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|super
operator|.
name|stopCellEditing
argument_list|()
return|;
block|}
block|}
expr_stmt|;
name|field
operator|.
name|addActionListener
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
comment|//    public Component getTableCellEditorComponent(JTable table, Object value,
comment|//        boolean isSelected, int row, int column) {
comment|//      JSpinner spinner = (JSpinner)editorComponent;
comment|//      spinner.setValue(value);
comment|//      return spinner;
comment|//    }
comment|//    public Object getCellEditorValue() {
comment|//      JSpinner spinner = (JSpinner)editorComponent;
comment|//      return spinner.getValue();
comment|//    }
block|}
specifier|public
class|class
name|ButtonEditor
extends|extends
name|DefaultCellEditor
block|{
specifier|protected
name|Object
name|currentValue
decl_stmt|;
specifier|public
name|ButtonEditor
parameter_list|(
name|JButton
name|button
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|JCheckBox
argument_list|()
argument_list|)
expr_stmt|;
name|editorComponent
operator|=
name|button
expr_stmt|;
name|setClickCountToStart
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|button
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|fireEditingStopped
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|button
operator|.
name|setBorder
argument_list|(
name|editStateBorder
argument_list|)
expr_stmt|;
name|button
operator|.
name|setFocusPainted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fireEditingStopped
parameter_list|()
block|{
name|super
operator|.
name|fireEditingStopped
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Object
name|getCellEditorValue
parameter_list|()
block|{
return|return
name|currentValue
return|;
block|}
specifier|public
name|Component
name|getTableCellEditorComponent
parameter_list|(
name|JTable
name|table
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
operator|(
operator|(
name|JButton
operator|)
name|editorComponent
operator|)
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|currentValue
operator|=
name|value
expr_stmt|;
return|return
name|editorComponent
return|;
block|}
block|}
block|}
end_class

end_unit

