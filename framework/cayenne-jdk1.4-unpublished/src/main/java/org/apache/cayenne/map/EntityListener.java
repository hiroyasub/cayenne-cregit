begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * A mapping descriptor of an entity listener class that declares one or more callback  * methods to be notified of the entity events.  *   * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|EntityListener
block|{
specifier|protected
name|String
name|className
decl_stmt|;
specifier|protected
name|SortedMap
name|callbackMethods
decl_stmt|;
specifier|public
name|EntityListener
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EntityListener
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|this
operator|.
name|callbackMethods
operator|=
operator|new
name|TreeMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|className
operator|=
name|className
expr_stmt|;
block|}
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|className
return|;
block|}
specifier|public
name|void
name|setClassName
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|this
operator|.
name|className
operator|=
name|className
expr_stmt|;
block|}
comment|/**      * Returns an unmodifiable sorted map of listener methods.      */
specifier|public
name|SortedMap
name|getCallbackMethodsMap
parameter_list|()
block|{
comment|// create a new instance ... Caching unmodifiable map causes
comment|// serialization issues (esp. with Hessian).
return|return
name|Collections
operator|.
name|unmodifiableSortedMap
argument_list|(
name|callbackMethods
argument_list|)
return|;
block|}
comment|/**      * Returns an unmodifiable collection of listener methods.      */
specifier|public
name|Collection
name|getCallbackMethods
parameter_list|()
block|{
comment|// create a new instance. Caching unmodifiable collection causes
comment|// serialization issues (esp. with Hessian).
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|callbackMethods
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Adds new listener method. If a method has no name, IllegalArgumentException is thrown.      */
specifier|public
name|void
name|addCallbackMethod
parameter_list|(
name|CallbackMethod
name|method
parameter_list|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Attempt to insert unnamed method."
argument_list|)
throw|;
block|}
name|Object
name|existingMethod
init|=
name|callbackMethods
operator|.
name|get
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingMethod
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|existingMethod
operator|==
name|method
condition|)
block|{
return|return;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"An attempt to override method '"
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
name|callbackMethods
operator|.
name|put
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CallbackMethod
name|getCallbackMethod
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|CallbackMethod
operator|)
name|callbackMethods
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|void
name|removeCallbackMethod
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|callbackMethods
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

