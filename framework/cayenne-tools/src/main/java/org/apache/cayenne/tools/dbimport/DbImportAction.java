begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
operator|.
name|dbimport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DbLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|DbAdapterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conn
operator|.
name|DriverDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|MapLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|naming
operator|.
name|NamingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|DeleteRuleUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_comment
comment|/**  * A thin wrapper around {@link DbLoader} that encapsulates DB import logic for  * the benefit of Ant and Maven db importers.  *   * @since 3.2  */
end_comment

begin_class
specifier|public
class|class
name|DbImportAction
block|{
specifier|private
name|DbAdapterFactory
name|adapterFactory
decl_stmt|;
specifier|private
name|Log
name|logger
decl_stmt|;
specifier|public
name|DbImportAction
parameter_list|(
name|Log
name|logger
parameter_list|,
name|DbAdapterFactory
name|adapterFactory
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|adapterFactory
operator|=
name|adapterFactory
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|DbImportParameters
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|logger
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"DB connection - [driver: %s, url: %s, username: %s, password: %s]"
argument_list|,
name|parameters
operator|.
name|getDriver
argument_list|()
argument_list|,
name|parameters
operator|.
name|getUrl
argument_list|()
argument_list|,
name|parameters
operator|.
name|getUsername
argument_list|()
argument_list|,
literal|"XXXXX"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Importer options - map: "
operator|+
name|parameters
operator|.
name|getMap
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Importer options - overwrite: "
operator|+
name|parameters
operator|.
name|isOverwrite
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Importer options - adapter: "
operator|+
name|parameters
operator|.
name|getAdapter
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Importer options - catalog: "
operator|+
name|parameters
operator|.
name|getCatalog
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Importer options - schema: "
operator|+
name|parameters
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Importer options - defaultPackage: "
operator|+
name|parameters
operator|.
name|getDefaultPackage
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Importer options - tablePattern: "
operator|+
name|parameters
operator|.
name|getTablePattern
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Importer options - importProcedures: "
operator|+
name|parameters
operator|.
name|isImportProcedures
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Importer options - procedurePattern: "
operator|+
name|parameters
operator|.
name|getProcedurePattern
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Importer options - meaningfulPk: "
operator|+
name|parameters
operator|.
name|isMeaningfulPk
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Importer options - namingStrategy: "
operator|+
name|parameters
operator|.
name|getNamingStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: load via DI
name|DriverDataSource
name|dataSource
init|=
operator|new
name|DriverDataSource
argument_list|(
operator|(
name|Driver
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|parameters
operator|.
name|getDriver
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
argument_list|,
name|parameters
operator|.
name|getUrl
argument_list|()
argument_list|,
name|parameters
operator|.
name|getUsername
argument_list|()
argument_list|,
name|parameters
operator|.
name|getPassword
argument_list|()
argument_list|)
decl_stmt|;
name|DbAdapter
name|adapter
init|=
name|getAdapter
argument_list|(
name|parameters
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataSource
argument_list|)
decl_stmt|;
name|DataMap
name|dataMap
init|=
name|getDataMap
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|DbImportDbLoaderDelegate
name|loaderDelegate
init|=
operator|new
name|DbImportDbLoaderDelegate
argument_list|()
decl_stmt|;
name|DbLoader
name|loader
init|=
operator|new
name|DbLoader
argument_list|(
name|dataSource
operator|.
name|getConnection
argument_list|()
argument_list|,
name|adapter
argument_list|,
name|loaderDelegate
argument_list|)
decl_stmt|;
name|loader
operator|.
name|setCreatingMeaningfulPK
argument_list|(
name|parameters
operator|.
name|isMeaningfulPk
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: load via DI AdhocObjectFactory
name|String
name|namingStrategy
init|=
name|parameters
operator|.
name|getNamingStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|namingStrategy
operator|!=
literal|null
condition|)
block|{
name|NamingStrategy
name|namingStrategyInst
init|=
operator|(
name|NamingStrategy
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|namingStrategy
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|loader
operator|.
name|setNamingStrategy
argument_list|(
name|namingStrategyInst
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|types
init|=
name|loader
operator|.
name|getDefaultTableTypes
argument_list|()
decl_stmt|;
name|loader
operator|.
name|load
argument_list|(
name|dataMap
argument_list|,
name|parameters
operator|.
name|getCatalog
argument_list|()
argument_list|,
name|parameters
operator|.
name|getSchema
argument_list|()
argument_list|,
name|parameters
operator|.
name|getTablePattern
argument_list|()
argument_list|,
name|types
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjEntity
name|addedObjEntity
range|:
name|loaderDelegate
operator|.
name|getAddedObjEntities
argument_list|()
control|)
block|{
name|DeleteRuleUpdater
operator|.
name|updateObjEntity
argument_list|(
name|addedObjEntity
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parameters
operator|.
name|isImportProcedures
argument_list|()
condition|)
block|{
name|loader
operator|.
name|loadProcedures
argument_list|(
name|dataMap
argument_list|,
name|parameters
operator|.
name|getCatalog
argument_list|()
argument_list|,
name|parameters
operator|.
name|getSchema
argument_list|()
argument_list|,
name|parameters
operator|.
name|getProcedurePattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|parameters
operator|.
name|getMap
argument_list|()
operator|.
name|delete
argument_list|()
expr_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|parameters
operator|.
name|getMap
argument_list|()
argument_list|)
decl_stmt|;
name|XMLEncoder
name|encoder
init|=
operator|new
name|XMLEncoder
argument_list|(
name|pw
argument_list|,
literal|"\t"
argument_list|)
decl_stmt|;
name|encoder
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"utf-8\"?>"
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|encodeAsXML
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|DbAdapter
name|getAdapter
parameter_list|(
name|String
name|adapter
parameter_list|,
name|DataSource
name|dataSource
parameter_list|)
throws|throws
name|Exception
block|{
name|DataNodeDescriptor
name|nodeDescriptor
init|=
operator|new
name|DataNodeDescriptor
argument_list|()
decl_stmt|;
name|nodeDescriptor
operator|.
name|setAdapterType
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
return|return
name|adapterFactory
operator|.
name|createAdapter
argument_list|(
name|nodeDescriptor
argument_list|,
name|dataSource
argument_list|)
return|;
block|}
name|DataMap
name|getDataMap
parameter_list|(
name|DbImportParameters
name|parameters
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|dataMapFile
init|=
name|parameters
operator|.
name|getMap
argument_list|()
decl_stmt|;
name|DataMap
name|dataMap
decl_stmt|;
if|if
condition|(
name|dataMapFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|InputSource
name|in
init|=
operator|new
name|InputSource
argument_list|(
name|dataMapFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
decl_stmt|;
name|dataMap
operator|=
operator|new
name|MapLoader
argument_list|()
operator|.
name|loadDataMap
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|parameters
operator|.
name|isOverwrite
argument_list|()
condition|)
block|{
name|dataMap
operator|.
name|clearObjEntities
argument_list|()
expr_stmt|;
name|dataMap
operator|.
name|clearEmbeddables
argument_list|()
expr_stmt|;
name|dataMap
operator|.
name|clearProcedures
argument_list|()
expr_stmt|;
name|dataMap
operator|.
name|clearDbEntities
argument_list|()
expr_stmt|;
name|dataMap
operator|.
name|clearQueries
argument_list|()
expr_stmt|;
name|dataMap
operator|.
name|clearResultSets
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|dataMap
operator|=
operator|new
name|DataMap
argument_list|()
expr_stmt|;
block|}
comment|// update map defaults
comment|// do not override default package of existing DataMap unless it is
comment|// explicitly requested by the plugin caller
name|String
name|defaultPackage
init|=
name|parameters
operator|.
name|getDefaultPackage
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultPackage
operator|!=
literal|null
operator|&&
name|defaultPackage
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|dataMap
operator|.
name|setDefaultPackage
argument_list|(
name|defaultPackage
argument_list|)
expr_stmt|;
block|}
comment|// do not override default schema of existing DataMap unless it is
comment|// explicitly requested by the plugin caller, and the provided schema is
comment|// not a pattern
name|String
name|schema
init|=
name|parameters
operator|.
name|getSchema
argument_list|()
decl_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
operator|&&
name|schema
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|schema
operator|.
name|indexOf
argument_list|(
literal|'%'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|dataMap
operator|.
name|setDefaultSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
return|return
name|dataMap
return|;
block|}
block|}
end_class

end_unit

