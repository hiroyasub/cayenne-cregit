begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project2
operator|.
name|upgrade
operator|.
name|v6
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project2
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project2
operator|.
name|ProjectSaver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project2
operator|.
name|upgrade
operator|.
name|BaseUpgradeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project2
operator|.
name|upgrade
operator|.
name|UpgradeMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project2
operator|.
name|upgrade
operator|.
name|UpgradeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_comment
comment|/**  * @since 3.1  */
end_comment

begin_class
class|class
name|UpgradeHandler_V6
extends|extends
name|BaseUpgradeHandler
block|{
specifier|static
specifier|final
name|String
name|TO_VERSION
init|=
literal|"6"
decl_stmt|;
specifier|static
specifier|final
name|String
name|MIN_SUPPORTED_VERSION
init|=
literal|"3.0.0.1"
decl_stmt|;
comment|/**      * Notice that the loader is statically typed, intentionally not using DI to ensure      * predictable behavior on legacy upgrades.      */
specifier|private
name|XMLDataChananelDescriptorLoader_V3_0_0_1
name|projectLoader
decl_stmt|;
comment|/**      * Unlike loader, saver is injected, so that we can save dynamically with the latest      * version. This may change once this upgrade handler becomes an intermediate handler.      */
annotation|@
name|Inject
specifier|private
name|ProjectSaver
name|projectSaver
decl_stmt|;
name|UpgradeHandler_V6
parameter_list|(
name|Resource
name|source
parameter_list|)
block|{
name|super
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|this
operator|.
name|projectLoader
operator|=
operator|new
name|XMLDataChananelDescriptorLoader_V3_0_0_1
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|UpgradeMetaData
name|loadMetaData
parameter_list|()
block|{
name|String
name|version
init|=
name|loadProjectVersion
argument_list|()
decl_stmt|;
name|UpgradeMetaData
name|metadata
init|=
operator|new
name|UpgradeMetaData
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|setSupportedVersion
argument_list|(
name|TO_VERSION
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setProjectVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|int
name|c1
init|=
name|compareVersions
argument_list|(
name|version
argument_list|,
name|MIN_SUPPORTED_VERSION
argument_list|)
decl_stmt|;
name|int
name|c2
init|=
name|compareVersions
argument_list|(
name|TO_VERSION
argument_list|,
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|c1
operator|<
literal|0
condition|)
block|{
name|metadata
operator|.
name|setIntermediateUpgradeVersion
argument_list|(
name|MIN_SUPPORTED_VERSION
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setUpgradeType
argument_list|(
name|UpgradeType
operator|.
name|INTERMEDIATE_UPGRADE_NEEDED
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|c2
operator|<
literal|0
condition|)
block|{
name|metadata
operator|.
name|setUpgradeType
argument_list|(
name|UpgradeType
operator|.
name|DOWNGRADE_NEEDED
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|c2
operator|==
literal|0
condition|)
block|{
name|metadata
operator|.
name|setUpgradeType
argument_list|(
name|UpgradeType
operator|.
name|UPGRADE_NOT_NEEDED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|setUpgradeType
argument_list|(
name|UpgradeType
operator|.
name|UPGRADE_NEEDED
argument_list|)
expr_stmt|;
block|}
return|return
name|metadata
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Resource
name|performNeededUpgrade
parameter_list|()
throws|throws
name|ConfigurationException
block|{
name|List
argument_list|<
name|DataChannelDescriptor
argument_list|>
name|domains
init|=
name|projectLoader
operator|.
name|load
argument_list|(
name|projectSource
argument_list|)
decl_stmt|;
if|if
condition|(
name|domains
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// create a single domain dummy project if a noop config is being upgraded
name|DataChannelDescriptor
name|descriptor
init|=
operator|new
name|DataChannelDescriptor
argument_list|()
decl_stmt|;
name|descriptor
operator|.
name|setName
argument_list|(
literal|"DEFAULT"
argument_list|)
expr_stmt|;
name|domains
operator|.
name|add
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DataChannelDescriptor
name|descriptor
range|:
name|domains
control|)
block|{
name|Project
name|project
init|=
operator|new
name|Project
argument_list|(
name|descriptor
argument_list|)
decl_stmt|;
name|projectSaver
operator|.
name|save
argument_list|(
name|project
argument_list|)
expr_stmt|;
block|}
comment|// returns the first domain configuration out of possibly multiple new
comment|// configurations...
return|return
name|domains
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConfigurationSource
argument_list|()
return|;
block|}
block|}
end_class

end_unit

