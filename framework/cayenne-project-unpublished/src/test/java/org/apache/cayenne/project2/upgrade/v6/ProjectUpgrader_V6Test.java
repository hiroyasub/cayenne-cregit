begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project2
operator|.
name|upgrade
operator|.
name|v6
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DefaultConfigurationNameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Binder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|DIBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project2
operator|.
name|FileProjectSaver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project2
operator|.
name|ProjectSaver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project2
operator|.
name|unit
operator|.
name|Project2Case
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project2
operator|.
name|upgrade
operator|.
name|UpgradeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project2
operator|.
name|upgrade
operator|.
name|UpgradeMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project2
operator|.
name|upgrade
operator|.
name|UpgradeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
operator|.
name|URLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_class
specifier|public
class|class
name|ProjectUpgrader_V6Test
extends|extends
name|Project2Case
block|{
specifier|public
name|void
name|testMetadata_3_0_0_1
parameter_list|()
block|{
name|String
name|baseUrl
init|=
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|baseUrl
operator|+
literal|"/3_0_0_1a/cayenne.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|Module
name|testModule
init|=
operator|new
name|Module
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|ProjectSaver
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|FileProjectSaver
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|ConfigurationNameMapper
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|DefaultConfigurationNameMapper
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ProjectUpgrader_V6
name|upgrader
init|=
operator|new
name|ProjectUpgrader_V6
argument_list|()
decl_stmt|;
name|Injector
name|injector
init|=
name|DIBootstrap
operator|.
name|createInjector
argument_list|(
name|testModule
argument_list|)
decl_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|upgrader
argument_list|)
expr_stmt|;
name|Resource
name|source
init|=
operator|new
name|URLResource
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|UpgradeHandler
name|handler
init|=
name|upgrader
operator|.
name|getUpgradeHandler
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|source
argument_list|,
name|handler
operator|.
name|getProjectSource
argument_list|()
argument_list|)
expr_stmt|;
name|UpgradeMetaData
name|md
init|=
name|handler
operator|.
name|getUpgradeMetaData
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|UpgradeType
operator|.
name|UPGRADE_NEEDED
argument_list|,
name|md
operator|.
name|getUpgradeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|md
operator|.
name|getIntermediateUpgradeVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3.0.0.1"
argument_list|,
name|md
operator|.
name|getProjectVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"6"
argument_list|,
name|md
operator|.
name|getSupportedVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMetadata_Type2_0
parameter_list|()
block|{
name|String
name|baseUrl
init|=
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|baseUrl
operator|+
literal|"/2_0a/cayenne.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|Module
name|testModule
init|=
operator|new
name|Module
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|ProjectSaver
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|FileProjectSaver
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|ConfigurationNameMapper
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|DefaultConfigurationNameMapper
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ProjectUpgrader_V6
name|upgrader
init|=
operator|new
name|ProjectUpgrader_V6
argument_list|()
decl_stmt|;
name|Injector
name|injector
init|=
name|DIBootstrap
operator|.
name|createInjector
argument_list|(
name|testModule
argument_list|)
decl_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|upgrader
argument_list|)
expr_stmt|;
name|Resource
name|source
init|=
operator|new
name|URLResource
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|UpgradeHandler
name|handler
init|=
name|upgrader
operator|.
name|getUpgradeHandler
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|source
argument_list|,
name|handler
operator|.
name|getProjectSource
argument_list|()
argument_list|)
expr_stmt|;
name|UpgradeMetaData
name|md
init|=
name|handler
operator|.
name|getUpgradeMetaData
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|UpgradeType
operator|.
name|INTERMEDIATE_UPGRADE_NEEDED
argument_list|,
name|md
operator|.
name|getUpgradeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3.0.0.1"
argument_list|,
name|md
operator|.
name|getIntermediateUpgradeVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2.0"
argument_list|,
name|md
operator|.
name|getProjectVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"6"
argument_list|,
name|md
operator|.
name|getSupportedVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMetadata_Type6
parameter_list|()
block|{
name|String
name|baseUrl
init|=
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|baseUrl
operator|+
literal|"/6a/cayenne-PROJECT1.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|Module
name|testModule
init|=
operator|new
name|Module
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|ProjectSaver
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|FileProjectSaver
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|ConfigurationNameMapper
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|DefaultConfigurationNameMapper
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ProjectUpgrader_V6
name|upgrader
init|=
operator|new
name|ProjectUpgrader_V6
argument_list|()
decl_stmt|;
name|Injector
name|injector
init|=
name|DIBootstrap
operator|.
name|createInjector
argument_list|(
name|testModule
argument_list|)
decl_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|upgrader
argument_list|)
expr_stmt|;
name|Resource
name|source
init|=
operator|new
name|URLResource
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|UpgradeHandler
name|handler
init|=
name|upgrader
operator|.
name|getUpgradeHandler
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|source
argument_list|,
name|handler
operator|.
name|getProjectSource
argument_list|()
argument_list|)
expr_stmt|;
name|UpgradeMetaData
name|md
init|=
name|handler
operator|.
name|getUpgradeMetaData
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|UpgradeType
operator|.
name|UPGRADE_NOT_NEEDED
argument_list|,
name|md
operator|.
name|getUpgradeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|md
operator|.
name|getIntermediateUpgradeVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"6"
argument_list|,
name|md
operator|.
name|getProjectVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"6"
argument_list|,
name|md
operator|.
name|getSupportedVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPerformUpgrade_3_0_0_1
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|testFolder
init|=
name|setupTestDirectory
argument_list|(
literal|"testPerformUpgrade_3_0_0_1"
argument_list|)
decl_stmt|;
name|String
name|sourceUrl
init|=
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|"/3_0_0_1a/"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|sources
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|sources
operator|.
name|add
argument_list|(
literal|"cayenne.xml"
argument_list|)
expr_stmt|;
name|sources
operator|.
name|add
argument_list|(
literal|"d1Map1.map.xml"
argument_list|)
expr_stmt|;
name|sources
operator|.
name|add
argument_list|(
literal|"d1Map2.map.xml"
argument_list|)
expr_stmt|;
name|sources
operator|.
name|add
argument_list|(
literal|"d1NodeDriver.driver.xml"
argument_list|)
expr_stmt|;
comment|// upgrades are done in-place, so copy it first
name|List
argument_list|<
name|File
argument_list|>
name|targetsBefore
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|source
range|:
name|sources
control|)
block|{
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|sourceUrl
operator|+
name|source
argument_list|)
decl_stmt|;
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|testFolder
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|Util
operator|.
name|copy
argument_list|(
name|url
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|targetsBefore
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
name|Module
name|testModule
init|=
operator|new
name|Module
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|ProjectSaver
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|FileProjectSaver
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|ConfigurationNameMapper
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|DefaultConfigurationNameMapper
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ProjectUpgrader_V6
name|upgrader
init|=
operator|new
name|ProjectUpgrader_V6
argument_list|()
decl_stmt|;
name|Injector
name|injector
init|=
name|DIBootstrap
operator|.
name|createInjector
argument_list|(
name|testModule
argument_list|)
decl_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|upgrader
argument_list|)
expr_stmt|;
name|Resource
name|source
init|=
operator|new
name|URLResource
argument_list|(
name|targetsBefore
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toURL
argument_list|()
argument_list|)
decl_stmt|;
name|UpgradeHandler
name|handler
init|=
name|upgrader
operator|.
name|getUpgradeHandler
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|Resource
name|upgraded
init|=
name|handler
operator|.
name|performUpgrade
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|upgraded
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|source
argument_list|,
name|upgrader
argument_list|)
expr_stmt|;
comment|// check that all the new files are created...
name|List
argument_list|<
name|String
argument_list|>
name|targets
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|targets
operator|.
name|add
argument_list|(
literal|"cayenne-d1.xml"
argument_list|)
expr_stmt|;
name|targets
operator|.
name|add
argument_list|(
literal|"cayenne-d2.xml"
argument_list|)
expr_stmt|;
name|targets
operator|.
name|add
argument_list|(
literal|"d1Map1.map.xml"
argument_list|)
expr_stmt|;
name|targets
operator|.
name|add
argument_list|(
literal|"d1Map2.map.xml"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|targetName
range|:
name|targets
control|)
block|{
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|testFolder
argument_list|,
name|targetName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"File was not created: "
operator|+
name|target
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|target
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// DataMap files should remain the same; all others need to be deleted
comment|//        for (File file : targetsBefore) {
comment|//            if (file.getName().endsWith(".map.xml")) {
comment|//                assertTrue("DataMap file disappeared: " + file.getAbsolutePath(), file
comment|//                        .exists());
comment|//            }
comment|//            else {
comment|//                assertFalse(
comment|//                        "File expected to be deleted: " + file.getAbsolutePath(),
comment|//                        file.exists());
comment|//            }
comment|//        }
block|}
block|}
end_class

end_unit

