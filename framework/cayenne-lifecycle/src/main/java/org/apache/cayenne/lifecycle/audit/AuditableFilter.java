begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|lifecycle
operator|.
name|audit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannelFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannelFilterChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|annotation
operator|.
name|PostPersist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|annotation
operator|.
name|PostRemove
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|annotation
operator|.
name|PostUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_comment
comment|/**  * A {@link DataChannelFilter} that enables audit of entities annotated with  * {@link Auditable} and {@link AuditableChild}.  *   * @since 3.1  */
end_comment

begin_class
specifier|public
class|class
name|AuditableFilter
implements|implements
name|DataChannelFilter
block|{
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|AuditableAggregator
argument_list|>
name|aggregator
init|=
operator|new
name|ThreadLocal
argument_list|<
name|AuditableAggregator
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|AuditableProcessor
name|processor
decl_stmt|;
specifier|public
name|AuditableFilter
parameter_list|(
name|AuditableProcessor
name|processor
parameter_list|)
block|{
name|this
operator|.
name|processor
operator|=
name|processor
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|DataChannel
name|channel
parameter_list|)
block|{
comment|// noop
block|}
annotation|@
name|Override
specifier|public
name|QueryResponse
name|onQuery
parameter_list|(
name|ObjectContext
name|originatingContext
parameter_list|,
name|Query
name|query
parameter_list|,
name|DataChannelFilterChain
name|filterChain
parameter_list|)
block|{
return|return
name|filterChain
operator|.
name|onQuery
argument_list|(
name|originatingContext
argument_list|,
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|GraphDiff
name|onSync
parameter_list|(
name|ObjectContext
name|originatingContext
parameter_list|,
name|GraphDiff
name|changes
parameter_list|,
name|int
name|syncType
parameter_list|,
name|DataChannelFilterChain
name|filterChain
parameter_list|)
block|{
try|try
block|{
name|GraphDiff
name|response
init|=
name|filterChain
operator|.
name|onSync
argument_list|(
name|originatingContext
argument_list|,
name|changes
argument_list|,
name|syncType
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
finally|finally
block|{
name|aggregator
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|AuditableAggregator
name|getAggregator
parameter_list|()
block|{
name|AuditableAggregator
name|aggregator
init|=
name|this
operator|.
name|aggregator
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|aggregator
operator|==
literal|null
condition|)
block|{
name|aggregator
operator|=
operator|new
name|AuditableAggregator
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|aggregator
operator|.
name|set
argument_list|(
name|aggregator
argument_list|)
expr_stmt|;
block|}
return|return
name|aggregator
return|;
block|}
annotation|@
name|PostPersist
argument_list|(
name|entityAnnotations
operator|=
name|Auditable
operator|.
name|class
argument_list|)
name|void
name|insertAudit
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|getAggregator
argument_list|()
operator|.
name|audit
argument_list|(
name|object
argument_list|,
name|AuditableOperation
operator|.
name|INSERT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|PostRemove
argument_list|(
name|entityAnnotations
operator|=
name|Auditable
operator|.
name|class
argument_list|)
name|void
name|deleteAudit
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|getAggregator
argument_list|()
operator|.
name|audit
argument_list|(
name|object
argument_list|,
name|AuditableOperation
operator|.
name|DELETE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|PostUpdate
argument_list|(
name|entityAnnotations
operator|=
name|Auditable
operator|.
name|class
argument_list|)
name|void
name|updateAudit
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|getAggregator
argument_list|()
operator|.
name|audit
argument_list|(
name|object
argument_list|,
name|AuditableOperation
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
block|}
comment|// only catching child updates... child insert/delete presumably causes an event on
comment|// the owner object
annotation|@
name|PostUpdate
argument_list|(
name|entityAnnotations
operator|=
name|AuditableChild
operator|.
name|class
argument_list|)
name|void
name|updateAuditChild
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|Object
name|parent
init|=
name|getParent
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|updateAudit
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: maybe log this fact... shouldn't normally happen, but I can imagine
comment|// certain combinations of object graphs, disconnected relationships, delete
comment|// rules, etc. may cause this
block|}
block|}
specifier|protected
name|Object
name|getParent
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null object"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|object
operator|instanceof
name|DataObject
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Object is not a DataObject: "
operator|+
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|DataObject
name|dataObject
init|=
operator|(
name|DataObject
operator|)
name|object
decl_stmt|;
name|AuditableChild
name|annotation
init|=
name|dataObject
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|AuditableChild
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No 'AuditableChild' annotation found"
argument_list|)
throw|;
block|}
return|return
name|dataObject
operator|.
name|readNestedProperty
argument_list|(
name|annotation
operator|.
name|value
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

