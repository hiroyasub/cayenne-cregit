begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|lifecycle
operator|.
name|relationship
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|lifecycle
operator|.
name|id
operator|.
name|IdCoder
import|;
end_import

begin_comment
comment|/**  * @since 3.1  */
end_comment

begin_class
specifier|public
class|class
name|ObjectIdRelationshipHandler
block|{
specifier|protected
name|IdCoder
name|referenceableHandler
decl_stmt|;
specifier|public
name|ObjectIdRelationshipHandler
parameter_list|(
name|IdCoder
name|referenceableHandler
parameter_list|)
block|{
name|this
operator|.
name|referenceableHandler
operator|=
name|referenceableHandler
expr_stmt|;
block|}
specifier|public
name|String
name|objectIdRelationshipName
parameter_list|(
name|String
name|uuidPropertyName
parameter_list|)
block|{
return|return
literal|"cay:related:"
operator|+
name|uuidPropertyName
return|;
block|}
specifier|public
name|String
name|objectIdPropertyName
parameter_list|(
name|DataObject
name|object
parameter_list|)
block|{
name|ObjectIdRelationship
name|annotation
init|=
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|ObjectIdRelationship
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Object class is not annotated with @UuidRelationship: "
operator|+
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|// TODO: I guess we'll need to cache this metadata for performance if we are to
comment|// support inheritance lookups, etc.
return|return
name|annotation
operator|.
name|value
argument_list|()
return|;
block|}
comment|/**      * Establishes an ObjectId relationship between two objects. Objects must be      * registered in the same ObjectContext. "from" argument is the object annotated with      * UuidRelationship. Second argument can optionally be null.      */
specifier|public
name|void
name|relate
parameter_list|(
name|DataObject
name|from
parameter_list|,
name|DataObject
name|to
parameter_list|)
block|{
if|if
condition|(
name|from
operator|.
name|getObjectContext
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"'from' has null ObjectContext"
argument_list|)
throw|;
block|}
name|String
name|property
init|=
name|objectIdPropertyName
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|String
name|relationship
init|=
name|objectIdRelationshipName
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|to
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|to
operator|.
name|getObjectContext
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"'to' has null ObjectContext"
argument_list|)
throw|;
block|}
if|if
condition|(
name|from
operator|.
name|getObjectContext
argument_list|()
operator|!=
name|to
operator|.
name|getObjectContext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"'from' and 'to' objects are registered in different ObjectContexts"
argument_list|)
throw|;
block|}
name|from
operator|.
name|writePropertyDirectly
argument_list|(
name|relationship
argument_list|,
name|to
argument_list|)
expr_stmt|;
if|if
condition|(
name|to
operator|.
name|getObjectId
argument_list|()
operator|.
name|isTemporary
argument_list|()
operator|&&
operator|!
name|to
operator|.
name|getObjectId
argument_list|()
operator|.
name|isReplacementIdAttached
argument_list|()
condition|)
block|{
comment|// defer ObjectId resolving till commit
name|from
operator|.
name|writeProperty
argument_list|(
name|property
argument_list|,
operator|new
name|ObjectIdPropagatedValueFactory
argument_list|(
name|referenceableHandler
argument_list|,
name|to
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|uuid
init|=
name|referenceableHandler
operator|.
name|getStringId
argument_list|(
name|to
argument_list|)
decl_stmt|;
name|from
operator|.
name|writeProperty
argument_list|(
name|property
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|from
operator|.
name|writeProperty
argument_list|(
name|property
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|from
operator|.
name|writePropertyDirectly
argument_list|(
name|relationship
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

