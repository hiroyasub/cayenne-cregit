begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|lifecycle
operator|.
name|sort
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ashwood
operator|.
name|AshwoodEntitySorter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|comparators
operator|.
name|ReverseComparator
import|;
end_import

begin_comment
comment|/**  * EntitySorter that takes into account entity "weights", and otherwise delegating to  * another (topological) sorter.  *   * @since 3.1  */
end_comment

begin_class
specifier|public
class|class
name|WeightedAshwoodEntitySorter
extends|extends
name|AshwoodEntitySorter
block|{
specifier|private
name|Comparator
argument_list|<
name|DbEntity
argument_list|>
name|weightedDbEntityComparator
decl_stmt|;
specifier|private
name|Comparator
argument_list|<
name|ObjEntity
argument_list|>
name|weightedObjEntityComparator
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|DbEntity
argument_list|,
name|Integer
argument_list|>
name|entityWeights
decl_stmt|;
specifier|public
name|WeightedAshwoodEntitySorter
parameter_list|()
block|{
name|this
operator|.
name|weightedDbEntityComparator
operator|=
operator|new
name|WeightedDbEntityComparator
argument_list|()
expr_stmt|;
name|this
operator|.
name|weightedObjEntityComparator
operator|=
operator|new
name|WeightedObjEntityComparator
argument_list|()
expr_stmt|;
name|this
operator|.
name|entityWeights
operator|=
name|Collections
operator|.
name|EMPTY_MAP
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doIndexSorter
parameter_list|()
block|{
name|super
operator|.
name|doIndexSorter
argument_list|()
expr_stmt|;
name|entityWeights
operator|=
operator|new
name|HashMap
argument_list|<
name|DbEntity
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|ObjEntity
name|entity
range|:
name|entityResolver
operator|.
name|getObjEntities
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|entityResolver
operator|.
name|getClassDescriptor
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getObjectClass
argument_list|()
decl_stmt|;
name|SortWeight
name|weight
init|=
name|type
operator|.
name|getAnnotation
argument_list|(
name|SortWeight
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|weight
operator|!=
literal|null
condition|)
block|{
name|entityWeights
operator|.
name|put
argument_list|(
name|entity
operator|.
name|getDbEntity
argument_list|()
argument_list|,
name|weight
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Comparator
argument_list|<
name|DbEntity
argument_list|>
name|getDbEntityComparator
parameter_list|(
name|boolean
name|dependantFirst
parameter_list|)
block|{
name|Comparator
argument_list|<
name|DbEntity
argument_list|>
name|c
init|=
name|weightedDbEntityComparator
decl_stmt|;
if|if
condition|(
name|dependantFirst
condition|)
block|{
name|c
operator|=
operator|new
name|ReverseComparator
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Comparator
argument_list|<
name|ObjEntity
argument_list|>
name|getObjEntityComparator
parameter_list|(
name|boolean
name|dependantFirst
parameter_list|)
block|{
name|Comparator
argument_list|<
name|ObjEntity
argument_list|>
name|c
init|=
name|weightedObjEntityComparator
decl_stmt|;
if|if
condition|(
name|dependantFirst
condition|)
block|{
name|c
operator|=
operator|new
name|ReverseComparator
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
specifier|private
name|int
name|getWeight
parameter_list|(
name|DbEntity
name|e
parameter_list|)
block|{
name|Integer
name|w
init|=
name|entityWeights
operator|.
name|get
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
name|w
operator|!=
literal|null
condition|?
name|w
operator|.
name|intValue
argument_list|()
else|:
literal|1
return|;
block|}
specifier|private
specifier|final
class|class
name|WeightedDbEntityComparator
implements|implements
name|Comparator
argument_list|<
name|DbEntity
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|DbEntity
name|t1
parameter_list|,
name|DbEntity
name|t2
parameter_list|)
block|{
if|if
condition|(
name|t1
operator|==
name|t2
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|delta
init|=
name|getWeight
argument_list|(
name|t1
argument_list|)
operator|-
name|getWeight
argument_list|(
name|t2
argument_list|)
decl_stmt|;
return|return
name|delta
operator|!=
literal|0
condition|?
name|delta
else|:
name|dbEntityComparator
operator|.
name|compare
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
class|class
name|WeightedObjEntityComparator
implements|implements
name|Comparator
argument_list|<
name|ObjEntity
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ObjEntity
name|o1
parameter_list|,
name|ObjEntity
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
name|o2
condition|)
block|{
return|return
literal|0
return|;
block|}
name|DbEntity
name|t1
init|=
name|o1
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
name|DbEntity
name|t2
init|=
name|o2
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
return|return
name|weightedDbEntityComparator
operator|.
name|compare
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

