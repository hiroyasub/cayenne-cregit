begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|lifecycle
operator|.
name|audit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * Aggregates audit events per audit root object, and passes them to delegate processor at  * the end of the transaction.  *   * @since 3.1  */
end_comment

begin_class
class|class
name|AuditableAggregator
block|{
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|OP_PRECEDENCE
decl_stmt|;
static|static
block|{
name|OP_PRECEDENCE
operator|=
operator|new
name|int
index|[
name|AuditableOperation
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
comment|// decreasing precedence of operations when recording audits is DELETE,
comment|// INSERT, UPDATE
name|OP_PRECEDENCE
index|[
name|AuditableOperation
operator|.
name|DELETE
operator|.
name|ordinal
argument_list|()
index|]
operator|=
literal|3
expr_stmt|;
name|OP_PRECEDENCE
index|[
name|AuditableOperation
operator|.
name|INSERT
operator|.
name|ordinal
argument_list|()
index|]
operator|=
literal|2
expr_stmt|;
name|OP_PRECEDENCE
index|[
name|AuditableOperation
operator|.
name|UPDATE
operator|.
name|ordinal
argument_list|()
index|]
operator|=
literal|1
expr_stmt|;
block|}
specifier|private
name|AuditableProcessor
name|delegate
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Object
argument_list|,
name|AuditableOperation
argument_list|>
name|ops
decl_stmt|;
name|AuditableAggregator
parameter_list|(
name|AuditableProcessor
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|ops
operator|=
operator|new
name|IdentityHashMap
argument_list|<
name|Object
argument_list|,
name|AuditableOperation
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|void
name|audit
parameter_list|(
name|Object
name|object
parameter_list|,
name|AuditableOperation
name|operation
parameter_list|)
block|{
name|AuditableOperation
name|oldOp
init|=
name|ops
operator|.
name|put
argument_list|(
name|object
argument_list|,
name|operation
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldOp
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|OP_PRECEDENCE
index|[
name|operation
operator|.
name|ordinal
argument_list|()
index|]
operator|<
name|OP_PRECEDENCE
index|[
name|oldOp
operator|.
name|ordinal
argument_list|()
index|]
condition|)
block|{
name|ops
operator|.
name|put
argument_list|(
name|object
argument_list|,
name|oldOp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|postSync
parameter_list|()
block|{
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|AuditableOperation
argument_list|>
name|op
range|:
name|ops
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|delegate
operator|.
name|audit
argument_list|(
name|op
operator|.
name|getKey
argument_list|()
argument_list|,
name|op
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

