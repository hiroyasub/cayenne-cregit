begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|instrument
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_comment
comment|/**  * Extracts a list of JPA unit names available in the environment.  *   * @since 3.0  */
end_comment

begin_comment
comment|// some code duplication with JPA UnitLoader and UnitDescriptorParser, but here we only
end_comment

begin_comment
comment|// care about persistence unit names, and not the full contents.
end_comment

begin_class
class|class
name|JpaUnitNameParser
block|{
specifier|static
specifier|final
name|String
name|DESCRIPTOR_LOCATION
init|=
literal|"META-INF/persistence.xml"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PERSISTENCE_UNIT
init|=
literal|"persistence-unit"
decl_stmt|;
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
specifier|private
name|SAXParserFactory
name|parserFactory
decl_stmt|;
specifier|public
name|JpaUnitNameParser
parameter_list|()
block|{
name|parserFactory
operator|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|parserFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|getUnitNames
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|unitNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|ClassLoader
name|loader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|descriptors
init|=
name|loader
operator|.
name|getResources
argument_list|(
name|DESCRIPTOR_LOCATION
argument_list|)
decl_stmt|;
while|while
condition|(
name|descriptors
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|descriptorURL
init|=
name|descriptors
operator|.
name|nextElement
argument_list|()
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
name|appendUnitNames
argument_list|(
name|unitNames
argument_list|,
operator|new
name|InputSource
argument_list|(
name|descriptorURL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error inspecting persistence descriptors"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|unitNames
return|;
block|}
specifier|private
name|void
name|appendUnitNames
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|unitNames
parameter_list|,
name|InputSource
name|in
parameter_list|)
throws|throws
name|Exception
block|{
comment|// note that parser is not reused - some parser implementations blow on
comment|// parser.reset() call
name|SAXParser
name|parser
init|=
name|parserFactory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|in
argument_list|,
operator|new
name|DefaultHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
throws|throws
name|SAXException
block|{
throw|throw
name|e
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|PERSISTENCE_UNIT
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|unitNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

