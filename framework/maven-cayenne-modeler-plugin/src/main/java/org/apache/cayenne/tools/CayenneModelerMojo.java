begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Main
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|xml
operator|.
name|Xpp3Dom
import|;
end_import

begin_comment
comment|/**  * Maven mojo to start up the Cayenne modeler from the command-line.  *   * @since 3.0  *   * @prefix cayenne-modeler  * @goal run  */
end_comment

begin_class
specifier|public
class|class
name|CayenneModelerMojo
extends|extends
name|AbstractMojo
block|{
comment|/**      * Name of the model file to open.        *      * @parameter expression="${modeler.modelFile}       */
specifier|private
name|File
name|modelFile
decl_stmt|;
comment|/**      * Project instance.      * @parameter default-value="${project}"      * @required      * @readonly      */
specifier|private
name|MavenProject
name|project
decl_stmt|;
specifier|private
name|File
name|lookupModelFile
parameter_list|()
block|{
if|if
condition|(
name|modelFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|modelFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|modelFile
argument_list|,
name|Configuration
operator|.
name|DEFAULT_DOMAIN_FILE
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|modelFile
return|;
block|}
block|}
comment|//try to locate cayenne.xml at top level of a resource directory.
for|for
control|(
name|Object
name|o
range|:
name|project
operator|.
name|getResources
argument_list|()
control|)
block|{
name|Resource
name|r
init|=
operator|(
name|Resource
operator|)
name|o
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|r
operator|.
name|getDirectory
argument_list|()
argument_list|,
name|Configuration
operator|.
name|DEFAULT_DOMAIN_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|f
return|;
block|}
block|}
comment|//failing that, try for WEB-INF/DEFAULT_DOMAIN_FILE
comment|//but only if we're using the war plugin
for|for
control|(
name|Object
name|o
range|:
name|project
operator|.
name|getBuildPlugins
argument_list|()
control|)
block|{
name|Plugin
name|plugin
init|=
operator|(
name|Plugin
operator|)
name|o
decl_stmt|;
comment|//means we're using the war plugin.
if|if
condition|(
name|plugin
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|"org.apache.maven.plugins:maven-war-plugin"
argument_list|)
condition|)
block|{
comment|//check to see if the default loc. is overridden.
name|Xpp3Dom
name|conf
init|=
operator|(
name|Xpp3Dom
operator|)
name|plugin
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|path
decl_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
operator|&&
operator|(
name|conf
operator|=
name|conf
operator|.
name|getChild
argument_list|(
literal|"warSourceDirectory"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|path
operator|=
name|conf
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
literal|"src"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"main"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"webapp"
expr_stmt|;
block|}
return|return
operator|new
name|File
argument_list|(
name|project
operator|.
name|getBasedir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|path
operator|+
name|File
operator|.
name|separator
operator|+
literal|"WEB-INF"
operator|+
name|File
operator|.
name|separator
operator|+
name|Configuration
operator|.
name|DEFAULT_DOMAIN_FILE
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
comment|//setup the system property to tell the modeler where to generate the java source files.
name|System
operator|.
name|setProperty
argument_list|(
literal|"cayenne.cgen.destdir"
argument_list|,
name|project
operator|.
name|getBuild
argument_list|()
operator|.
name|getSourceDirectory
argument_list|()
argument_list|)
expr_stmt|;
comment|//start the modeler with the provided model file, if it exists.
name|File
name|f
init|=
name|lookupModelFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|Main
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|f
operator|.
name|getAbsolutePath
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Main
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
comment|// Block until the modeler finishes executing.
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

