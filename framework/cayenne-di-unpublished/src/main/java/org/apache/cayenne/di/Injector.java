begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_comment
comment|/**  * A facade to the Cayenne DI container. To create an injector use {@link DIBootstrap}  * static methods.  *   * @since 3.1  */
end_comment

begin_interface
specifier|public
interface|interface
name|Injector
block|{
comment|/**      * Returns a service instance bound in the container for a specific type. Throws      * {@link DIException} if the type is not bound, or an instance can not be created.      */
parameter_list|<
name|T
parameter_list|>
name|T
name|getInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|ConfigurationException
function_decl|;
comment|/**      * Returns a service instance bound in the container for a specific binding key.      * Throws {@link DIException} if the key is not bound, or an instance can not be      * created.      */
parameter_list|<
name|T
parameter_list|>
name|T
name|getInstance
parameter_list|(
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|)
throws|throws
name|ConfigurationException
function_decl|;
parameter_list|<
name|T
parameter_list|>
name|Provider
argument_list|<
name|T
argument_list|>
name|getProvider
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|ConfigurationException
function_decl|;
parameter_list|<
name|T
parameter_list|>
name|Provider
argument_list|<
name|T
argument_list|>
name|getProvider
parameter_list|(
name|Key
argument_list|<
name|T
argument_list|>
name|key
parameter_list|)
throws|throws
name|ConfigurationException
function_decl|;
comment|/**      * Performs field injection on a given object, ignoring constructor injection. Since      * Cayenne DI injector returns fully injected objects, this method is rarely used      * directly. One possible use is in custom DI providers, another is in unit tests to      * initialize tested objects that are relying on field injecton.      */
name|void
name|injectMembers
parameter_list|(
name|Object
name|object
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

