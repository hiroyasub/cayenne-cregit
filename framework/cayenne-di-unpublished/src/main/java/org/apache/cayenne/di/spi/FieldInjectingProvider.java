begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Provider
import|;
end_import

begin_comment
comment|/**  * @since 3.1  */
end_comment

begin_class
class|class
name|FieldInjectingProvider
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Provider
argument_list|<
name|T
argument_list|>
block|{
specifier|private
name|String
name|bindingKey
decl_stmt|;
specifier|private
name|DefaultInjector
name|injector
decl_stmt|;
specifier|private
name|Provider
argument_list|<
name|T
argument_list|>
name|delegate
decl_stmt|;
name|FieldInjectingProvider
parameter_list|(
name|Provider
argument_list|<
name|T
argument_list|>
name|delegate
parameter_list|,
name|DefaultInjector
name|injector
parameter_list|,
name|String
name|bindingKey
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|injector
operator|=
name|injector
expr_stmt|;
name|this
operator|.
name|bindingKey
operator|=
name|bindingKey
expr_stmt|;
block|}
specifier|private
name|Collection
argument_list|<
name|Field
argument_list|>
name|initInjectionPoints
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Collection
argument_list|<
name|Field
argument_list|>
name|injectableFields
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
name|injectableFields
return|;
block|}
for|for
control|(
name|Field
name|field
range|:
name|type
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|Inject
name|inject
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|Inject
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|inject
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|injectableFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|initInjectionPoints
argument_list|(
name|type
operator|.
name|getSuperclass
argument_list|()
argument_list|,
name|injectableFields
argument_list|)
return|;
block|}
specifier|public
name|T
name|get
parameter_list|()
throws|throws
name|ConfigurationException
block|{
name|T
name|object
init|=
name|delegate
operator|.
name|get
argument_list|()
decl_stmt|;
name|injectMembers
argument_list|(
name|object
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
specifier|private
name|void
name|injectMembers
parameter_list|(
name|T
name|object
parameter_list|)
block|{
name|Collection
argument_list|<
name|Field
argument_list|>
name|injectableFields
init|=
name|initInjectionPoints
argument_list|(
name|object
operator|.
name|getClass
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Field
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|InjectionStack
name|stack
init|=
name|injector
operator|.
name|getInjectionStack
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|injectableFields
control|)
block|{
name|Object
name|value
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|fieldType
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|Provider
operator|.
name|class
operator|.
name|equals
argument_list|(
name|fieldType
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|objectClass
init|=
name|DIUtil
operator|.
name|parameterClass
argument_list|(
name|field
operator|.
name|getGenericType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|objectClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Provider field %s.%s of type %s must be "
operator|+
literal|"parameterized to be usable for injection"
argument_list|,
name|field
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|fieldType
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|value
operator|=
name|injector
operator|.
name|getProvider
argument_list|(
name|objectClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stack
operator|.
name|push
argument_list|(
name|bindingKey
argument_list|)
expr_stmt|;
try|try
block|{
name|value
operator|=
name|injector
operator|.
name|getInstance
argument_list|(
name|fieldType
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
name|field
operator|.
name|set
argument_list|(
name|object
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error injecting into field %s.%s of type %s"
argument_list|,
name|field
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|fieldType
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

