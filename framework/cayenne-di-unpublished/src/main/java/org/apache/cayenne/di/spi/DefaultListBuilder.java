begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|ListBuilder
import|;
end_import

begin_comment
comment|/**  * @since 3.1  */
end_comment

begin_class
class|class
name|DefaultListBuilder
parameter_list|<
name|T
parameter_list|>
implements|implements
name|ListBuilder
argument_list|<
name|T
argument_list|>
block|{
specifier|private
name|DefaultInjector
name|injector
decl_stmt|;
specifier|private
name|String
name|implementationTypeKey
decl_stmt|;
name|DefaultListBuilder
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|implementationType
parameter_list|,
name|DefaultInjector
name|injector
parameter_list|)
block|{
name|this
operator|.
name|injector
operator|=
name|injector
expr_stmt|;
name|implementationTypeKey
operator|=
name|DIUtil
operator|.
name|toKey
argument_list|(
name|implementationType
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|E
parameter_list|>
name|ListBuilder
argument_list|<
name|T
argument_list|>
name|add
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|interfaceType
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|ListProvider
name|listProvider
init|=
name|injector
operator|.
name|getListConfigurations
argument_list|()
operator|.
name|get
argument_list|(
name|implementationTypeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|listProvider
operator|==
literal|null
condition|)
block|{
name|listProvider
operator|=
operator|new
name|ListProvider
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getListConfigurations
argument_list|()
operator|.
name|put
argument_list|(
name|implementationTypeKey
argument_list|,
name|listProvider
argument_list|)
expr_stmt|;
block|}
name|listProvider
operator|.
name|add
argument_list|(
name|injector
operator|.
name|getProvider
argument_list|(
name|interfaceType
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
parameter_list|<
name|E
parameter_list|>
name|ListBuilder
argument_list|<
name|T
argument_list|>
name|add
parameter_list|(
name|E
name|value
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|InstanceProvider
argument_list|<
name|E
argument_list|>
name|provider
init|=
operator|new
name|InstanceProvider
argument_list|<
name|E
argument_list|>
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|ListProvider
name|listProvider
init|=
name|injector
operator|.
name|getListConfigurations
argument_list|()
operator|.
name|get
argument_list|(
name|implementationTypeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|listProvider
operator|==
literal|null
condition|)
block|{
name|listProvider
operator|=
operator|new
name|ListProvider
argument_list|()
expr_stmt|;
name|injector
operator|.
name|getListConfigurations
argument_list|()
operator|.
name|put
argument_list|(
name|implementationTypeKey
argument_list|,
name|listProvider
argument_list|)
expr_stmt|;
block|}
name|listProvider
operator|.
name|add
argument_list|(
name|provider
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

