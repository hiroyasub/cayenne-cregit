begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Binder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Module
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultInjectorTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testConstructor_Empty
parameter_list|()
block|{
operator|new
name|DefaultInjector
argument_list|()
expr_stmt|;
comment|// no exceptions...
block|}
specifier|public
name|void
name|testConstructor_SingleModule
parameter_list|()
block|{
specifier|final
name|boolean
index|[]
name|configureCalled
init|=
operator|new
name|boolean
index|[
literal|1
index|]
decl_stmt|;
name|Module
name|module
init|=
operator|new
name|Module
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|configureCalled
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
decl_stmt|;
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|configureCalled
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConstructor_MultiModule
parameter_list|()
block|{
specifier|final
name|boolean
index|[]
name|configureCalled
init|=
operator|new
name|boolean
index|[
literal|2
index|]
decl_stmt|;
name|Module
name|module1
init|=
operator|new
name|Module
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|configureCalled
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Module
name|module2
init|=
operator|new
name|Module
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|configureCalled
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
decl_stmt|;
operator|new
name|DefaultInjector
argument_list|(
name|module1
argument_list|,
name|module2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|configureCalled
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|configureCalled
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

