begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|cache
operator|.
name|invalidation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|cache
operator|.
name|invalidation
operator|.
name|db
operator|.
name|E1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|cache
operator|.
name|invalidation
operator|.
name|db
operator|.
name|E2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|CacheGroupsHandlerTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|canHandleE1
parameter_list|()
throws|throws
name|Exception
block|{
name|CacheGroupsHandler
name|handler
init|=
operator|new
name|CacheGroupsHandler
argument_list|()
decl_stmt|;
name|Function
argument_list|<
name|Persistent
argument_list|,
name|Collection
argument_list|<
name|CacheGroupDescriptor
argument_list|>
argument_list|>
name|function
init|=
name|handler
operator|.
name|canHandle
argument_list|(
name|E1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|CacheGroupDescriptor
argument_list|>
name|result
init|=
name|function
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|names
init|=
block|{
literal|"g1"
block|,
literal|"g2"
block|}
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|extractedNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CacheGroupDescriptor
name|descriptor
range|:
name|result
control|)
block|{
name|extractedNames
operator|.
name|add
argument_list|(
name|descriptor
operator|.
name|getCacheGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|names
argument_list|,
name|extractedNames
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canHandleE2
parameter_list|()
throws|throws
name|Exception
block|{
name|CacheGroupsHandler
name|handler
init|=
operator|new
name|CacheGroupsHandler
argument_list|()
decl_stmt|;
name|Function
argument_list|<
name|Persistent
argument_list|,
name|Collection
argument_list|<
name|CacheGroupDescriptor
argument_list|>
argument_list|>
name|function
init|=
name|handler
operator|.
name|canHandle
argument_list|(
name|E2
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|CacheGroupDescriptor
argument_list|>
name|result
init|=
name|function
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|names
init|=
block|{
literal|"g1"
block|,
literal|"g2"
block|,
literal|"g3"
block|,
literal|"g4"
block|,
literal|"g5"
block|,
literal|"g6"
block|}
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|extractedNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CacheGroupDescriptor
name|descriptor
range|:
name|result
control|)
block|{
name|extractedNames
operator|.
name|add
argument_list|(
name|descriptor
operator|.
name|getCacheGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
name|names
argument_list|,
name|extractedNames
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

