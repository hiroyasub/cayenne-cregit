begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|instrument
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|instrument
operator|.
name|ClassFileTransformer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|instrument
operator|.
name|Instrumentation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_comment
comment|/**  * Instrumentation utilities.  *   * @since 3.0  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|InstrumentUtil
block|{
comment|/**      * Registers class transformer with the instrumentation agent. Throws an exception if      * the application wasn't started with CayenneAgent.      */
specifier|public
specifier|static
name|void
name|addTransformer
parameter_list|(
name|ClassFileTransformer
name|transformer
parameter_list|)
block|{
name|Instrumentation
name|instrumentation
decl_stmt|;
try|try
block|{
name|instrumentation
operator|=
name|getInstrumentation
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"CayenneAgent is not started"
argument_list|,
name|th
argument_list|)
throw|;
block|}
if|if
condition|(
name|instrumentation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"CayenneAgent is not started"
argument_list|)
throw|;
block|}
name|instrumentation
operator|.
name|addTransformer
argument_list|(
name|transformer
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks whether the JVM was started with CayenneAgent.      */
specifier|public
specifier|static
name|boolean
name|isAgentLoaded
parameter_list|()
block|{
comment|// check whether CayenneAgent class is initialized and instrumentation is set.
try|try
block|{
return|return
name|getInstrumentation
argument_list|()
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Returns CayenneAgent instrumentation.      */
specifier|static
name|Instrumentation
name|getInstrumentation
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
name|agent
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.cayenne.instrument.CayenneAgent"
argument_list|,
literal|false
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|Method
name|getInstrumentation
init|=
name|agent
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getInstrumentation"
argument_list|)
decl_stmt|;
return|return
operator|(
name|Instrumentation
operator|)
name|getInstrumentation
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

