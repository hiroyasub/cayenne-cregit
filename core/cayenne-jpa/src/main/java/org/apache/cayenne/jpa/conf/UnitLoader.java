begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|spi
operator|.
name|JpaUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|spi
operator|.
name|JpaUnitFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_comment
comment|/**  * A class that locates persistent units in the environment and loads their definitions.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|UnitLoader
block|{
specifier|static
specifier|final
name|String
name|DESCRIPTOR_LOCATION
init|=
literal|"META-INF/persistence.xml"
decl_stmt|;
specifier|protected
name|UnitDescriptorParser
name|parser
decl_stmt|;
specifier|public
name|UnitLoader
parameter_list|(
name|JpaUnitFactory
name|unitFactory
parameter_list|,
name|boolean
name|validateDescriptors
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|parser
operator|=
operator|new
name|UnitDescriptorParser
argument_list|(
name|unitFactory
argument_list|,
name|validateDescriptors
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error creating XML parser"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Loads PersistenceUnitInfo from standard locations. Returns null if no persistent      * unit with requested name is found.      *<p>      *<i>Implementation note: the loader performs no local caching of unit data. It will      * scan all available peristence unit descriptors every time this method is called.</i>      *</p>      */
specifier|public
name|JpaUnit
name|loadUnit
parameter_list|(
name|String
name|persistenceUnitName
parameter_list|)
block|{
if|if
condition|(
name|persistenceUnitName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null persistenceUnitName"
argument_list|)
throw|;
block|}
comment|// load descriptors
name|ClassLoader
name|loader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|descriptors
init|=
name|loader
operator|.
name|getResources
argument_list|(
name|DESCRIPTOR_LOCATION
argument_list|)
decl_stmt|;
while|while
condition|(
name|descriptors
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|descriptorURL
init|=
name|descriptors
operator|.
name|nextElement
argument_list|()
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
comment|// determine descriptor "root"
name|String
name|descriptorRoot
init|=
name|descriptorURL
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|descriptorURL
operator|.
name|length
argument_list|()
operator|-
name|DESCRIPTOR_LOCATION
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|JpaUnit
argument_list|>
name|units
init|=
name|parser
operator|.
name|getPersistenceUnits
argument_list|(
operator|new
name|InputSource
argument_list|(
name|descriptorURL
argument_list|)
argument_list|,
operator|new
name|URL
argument_list|(
name|descriptorRoot
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|JpaUnit
name|unit
range|:
name|units
control|)
block|{
if|if
condition|(
name|persistenceUnitName
operator|.
name|equals
argument_list|(
name|unit
operator|.
name|getPersistenceUnitName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|unit
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// throw on bad unit
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error loading persistence descriptors"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

