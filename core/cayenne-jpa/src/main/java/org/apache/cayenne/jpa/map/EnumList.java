begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * A list that converts added objects to the specified enum type.  *   * @author Andrus Adamchik  */
end_comment

begin_comment
comment|// TODO: andrus, 4/20/2006 - remove this class, replacing it with parameterized
end_comment

begin_comment
comment|// collections once CAY-520 gets implemented in Cayenne> 1.2
end_comment

begin_class
class|class
name|EnumList
extends|extends
name|ArrayList
block|{
specifier|private
name|Class
name|enumClass
decl_stmt|;
name|EnumList
parameter_list|(
name|Class
name|enumClass
parameter_list|,
name|int
name|capacity
parameter_list|)
block|{
name|super
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
name|this
operator|.
name|enumClass
operator|=
name|enumClass
expr_stmt|;
block|}
specifier|private
name|Object
name|convertValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|value
operator|=
name|Enum
operator|.
name|valueOf
argument_list|(
name|enumClass
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
specifier|private
name|Collection
name|convertValues
parameter_list|(
name|Collection
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Collection
name|converted
init|=
operator|new
name|ArrayList
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
name|converted
operator|.
name|add
argument_list|(
name|convertValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|converted
return|;
block|}
else|else
block|{
return|return
name|values
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|Object
name|element
parameter_list|)
block|{
name|super
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|convertValue
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|super
operator|.
name|add
argument_list|(
name|convertValue
argument_list|(
name|o
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
name|c
parameter_list|)
block|{
return|return
name|super
operator|.
name|addAll
argument_list|(
name|convertValues
argument_list|(
name|c
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|int
name|index
parameter_list|,
name|Collection
name|c
parameter_list|)
block|{
return|return
name|super
operator|.
name|addAll
argument_list|(
name|index
argument_list|,
name|convertValues
argument_list|(
name|c
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

