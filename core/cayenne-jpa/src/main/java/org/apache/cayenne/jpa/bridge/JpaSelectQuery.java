begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|bridge
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaQueryHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_comment
comment|/**  * An indirect query that resolves to Cayenne SelectQuery using information from JPA query  * hints.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|JpaSelectQuery
extends|extends
name|JpaIndirectQuery
block|{
comment|/**      * Creates a SelectQuery using query hints.      */
annotation|@
name|Override
specifier|protected
name|Query
name|createReplacementQuery
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentEntity
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setRoot
argument_list|(
name|parentEntity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"No parent entity. Query name: "
operator|+
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|// metadata hints
name|JpaQueryHint
name|dataRowsHint
init|=
name|jpaQuery
operator|.
name|getHint
argument_list|(
name|QueryHints
operator|.
name|DATA_ROWS_HINT
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataRowsHint
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setFetchingDataRows
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|dataRowsHint
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// other hints
name|JpaQueryHint
name|qualifierHint
init|=
name|jpaQuery
operator|.
name|getHint
argument_list|(
name|QueryHints
operator|.
name|QUALIFIER_HINT
argument_list|)
decl_stmt|;
if|if
condition|(
name|qualifierHint
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setQualifier
argument_list|(
name|Expression
operator|.
name|fromString
argument_list|(
name|qualifierHint
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|query
operator|.
name|queryWithParameters
argument_list|(
name|parameters
operator|!=
literal|null
condition|?
name|parameters
else|:
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
return|;
block|}
block|}
end_class

end_unit

