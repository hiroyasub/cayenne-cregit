begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|cspi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityTransaction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|LockModeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|PersistenceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataObjectUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistenceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|JpaEntityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|JpaEntityManagerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|CjpaEntityManager
extends|extends
name|JpaEntityManager
block|{
specifier|private
name|ObjectContext
name|context
decl_stmt|;
specifier|public
name|CjpaEntityManager
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|JpaEntityManagerFactory
name|factory
parameter_list|,
name|Map
name|parameters
parameter_list|)
block|{
name|super
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|EntityTransaction
name|createResourceLocalTransaction
parameter_list|()
block|{
return|return
operator|new
name|CjpaEntityTransaction
argument_list|(
name|Transaction
operator|.
name|internalTransaction
argument_list|(
literal|null
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|persistInternal
parameter_list|(
name|Object
name|entity
parameter_list|)
block|{
name|checkEntityType
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|context
operator|.
name|registerNewObject
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|mergeInternal
parameter_list|(
name|T
name|entity
parameter_list|)
block|{
name|checkEntityType
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|checkNotRemoved
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|Persistent
name|persistent
init|=
operator|(
name|Persistent
operator|)
name|entity
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|context
operator|.
name|localObject
argument_list|(
name|persistent
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|persistent
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|removeInternal
parameter_list|(
name|Object
name|entity
parameter_list|)
block|{
name|checkEntityType
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|checkAttached
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|context
operator|.
name|deleteObject
argument_list|(
operator|(
name|Persistent
operator|)
name|entity
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|findInternal
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|entityClass
parameter_list|,
name|Object
name|primaryKey
parameter_list|)
block|{
name|checkEntityType
argument_list|(
name|entityClass
argument_list|)
expr_stmt|;
name|checkIdType
argument_list|(
name|entityClass
argument_list|,
name|primaryKey
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|DataObjectUtils
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|entityClass
argument_list|,
name|primaryKey
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|flushInternal
parameter_list|()
block|{
try|try
block|{
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PersistenceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|refreshInternal
parameter_list|(
name|Object
name|entity
parameter_list|)
block|{
comment|// TODO: Andrus, 2/10/2006 - implement
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"TODO"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|containsInternal
parameter_list|(
name|Object
name|entity
parameter_list|)
block|{
name|checkEntityType
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|Persistent
name|p
init|=
operator|(
name|Persistent
operator|)
name|entity
decl_stmt|;
return|return
name|p
operator|.
name|getObjectContext
argument_list|()
operator|==
name|context
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|createNamedQuery
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
operator|new
name|CjpaQuery
argument_list|(
name|context
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|createNativeQuery
parameter_list|(
name|String
name|sqlString
parameter_list|,
name|Class
name|resultClass
parameter_list|)
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|checkEntityType
argument_list|(
name|resultClass
argument_list|)
expr_stmt|;
return|return
operator|new
name|CjpaNativeQuery
argument_list|(
name|context
argument_list|,
name|sqlString
argument_list|,
name|resultClass
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|createNativeQuery
parameter_list|(
name|String
name|sqlString
parameter_list|)
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
operator|new
name|CjpaNativeQuery
argument_list|(
name|context
argument_list|,
name|sqlString
argument_list|,
name|getPersistenceUnitInfo
argument_list|()
operator|.
name|getPersistenceUnitName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|joinTransaction
parameter_list|()
block|{
comment|// TODO: andrus, 7/24/2006 - noop
block|}
annotation|@
name|Override
specifier|public
name|void
name|lock
parameter_list|(
name|Object
name|entity
parameter_list|,
name|LockModeType
name|lockMode
parameter_list|)
block|{
comment|// TODO: andrus, 8/15/2006 - noop
block|}
comment|/**      * Checks if an entity is attached to the current EntityManager, throwing      * IllegalArgumentException if not.      */
specifier|protected
name|void
name|checkAttached
parameter_list|(
name|Object
name|entity
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|entity
operator|instanceof
name|Persistent
condition|)
block|{
name|Persistent
name|p
init|=
operator|(
name|Persistent
operator|)
name|entity
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getPersistenceState
argument_list|()
operator|==
name|PersistenceState
operator|.
name|TRANSIENT
operator|||
name|p
operator|.
name|getObjectContext
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"entity is detached: "
operator|+
name|entity
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"entity must be Persistent: "
operator|+
name|entity
argument_list|)
throw|;
block|}
block|}
comment|/**      * Checks if an entity is not removed in the current EntityManager, throwing      * IllegalArgumentException if it is.      */
specifier|protected
name|void
name|checkNotRemoved
parameter_list|(
name|Object
name|entity
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|entity
operator|instanceof
name|Persistent
condition|)
block|{
name|Persistent
name|p
init|=
operator|(
name|Persistent
operator|)
name|entity
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getPersistenceState
argument_list|()
operator|==
name|PersistenceState
operator|.
name|DELETED
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"entity is removed: "
operator|+
name|entity
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|void
name|checkEntityType
parameter_list|(
name|Class
name|entityClass
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|entityClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null entity class"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Persistent
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|entityClass
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Entity class must be Persistent, got: "
operator|+
name|entityClass
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|checkEntityType
parameter_list|(
name|Object
name|entity
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null entity"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|entity
operator|instanceof
name|Persistent
operator|)
condition|)
block|{
name|String
name|className
init|=
operator|(
name|entity
operator|!=
literal|null
operator|)
condition|?
name|entity
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|"<null>"
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"entity must be Persistent: "
operator|+
name|className
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|checkIdType
parameter_list|(
name|Class
name|entityClass
parameter_list|,
name|Object
name|id
parameter_list|)
block|{
block|}
block|}
end_class

end_unit

