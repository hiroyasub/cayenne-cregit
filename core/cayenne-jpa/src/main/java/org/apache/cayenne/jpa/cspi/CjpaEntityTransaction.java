begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|cspi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityTransaction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|PersistenceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|Transaction
import|;
end_import

begin_comment
comment|/**  * A JPA wrapper around a Cayenne Transaction. For more info see<a  * href="http://cwiki.apache.org/CAYDOC/understanding-transactions.html">Cayenne Wiki</a>.  */
end_comment

begin_class
specifier|public
class|class
name|CjpaEntityTransaction
implements|implements
name|EntityTransaction
block|{
specifier|protected
name|EntityManager
name|entityManager
decl_stmt|;
specifier|protected
name|Transaction
name|transaction
decl_stmt|;
specifier|protected
name|boolean
name|rollbackOnly
decl_stmt|;
specifier|public
name|CjpaEntityTransaction
parameter_list|(
name|Transaction
name|transaction
parameter_list|,
name|EntityManager
name|entityManager
parameter_list|)
block|{
name|this
operator|.
name|entityManager
operator|=
name|entityManager
expr_stmt|;
name|this
operator|.
name|transaction
operator|=
name|transaction
expr_stmt|;
block|}
comment|/**      * Start a resource transaction.      *       * @throws IllegalStateException if isActive() is true.      */
specifier|public
name|void
name|begin
parameter_list|()
block|{
if|if
condition|(
name|isActive
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"transaction active"
argument_list|)
throw|;
block|}
name|transaction
operator|.
name|begin
argument_list|()
expr_stmt|;
block|}
comment|/**      * Commit the current transaction, writing any unflushed changes to the database.      *       * @throws IllegalStateException if isActive() is false.      * @throws PersistenceException if the commit fails.      */
specifier|public
name|void
name|commit
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isActive
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"transaction not active"
argument_list|)
throw|;
block|}
try|try
block|{
name|entityManager
operator|.
name|flush
argument_list|()
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PersistenceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CayenneException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PersistenceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Roll back the current transaction.      *       * @throws IllegalStateException if isActive() is false.      * @throws PersistenceException if an unexpected error condition is encountered.      */
specifier|public
name|void
name|rollback
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isActive
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"transaction not active"
argument_list|)
throw|;
block|}
try|try
block|{
name|transaction
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PersistenceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CayenneException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PersistenceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Indicate whether a transaction is in progress.      *       * @throws PersistenceException if an unexpected error condition is encountered.      */
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
operator|(
name|transaction
operator|.
name|getStatus
argument_list|()
operator|==
name|Transaction
operator|.
name|STATUS_ACTIVE
operator|)
return|;
block|}
specifier|public
name|boolean
name|getRollbackOnly
parameter_list|()
block|{
return|return
name|rollbackOnly
return|;
block|}
specifier|public
name|void
name|setRollbackOnly
parameter_list|()
block|{
name|rollbackOnly
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

