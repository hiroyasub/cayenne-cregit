begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|PostLoad
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|PostPersist
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|PostRemove
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|PostUpdate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|PrePersist
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|PreRemove
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|PreUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaEntityListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaLifecycleCallback
import|;
end_import

begin_comment
comment|/**  * Loads annotations from the entity listener class. Only deals with non-entity formats of  * annotation methods.  *<h3>JPA Spec, 3.4.1:</h3>  *<p>  * Callback methods defined on an entity class have the following signature:<em>void  *<METHOD>()</em>  * Callback methods defined on an entity listener class have the following signature:  *<em>void<METHOD>(Object)</em> The Object argument is the entity instance for which  * the callback method is invoked. It maybe declared as the actual entity type. The  * callback methods can have public, private, protected, or package level access, but must  * not be static or final.  *</p>  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|EntityListenerAnnotationLoader
block|{
comment|/**      * Returns a listener methods descriptor for the annotated listener, or null if none      * of the class methods are properly annotated.      */
specifier|public
name|JpaEntityListener
name|getEntityListener
parameter_list|(
name|Class
name|listenerClass
parameter_list|)
block|{
name|JpaEntityListener
name|listener
init|=
operator|new
name|JpaEntityListener
argument_list|()
decl_stmt|;
name|boolean
name|hasAnnotations
init|=
literal|false
decl_stmt|;
name|Method
index|[]
name|methods
init|=
name|listenerClass
operator|.
name|getDeclaredMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isValidListenerMethod
argument_list|(
name|methods
index|[
name|i
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|processAnnotations
argument_list|(
name|methods
index|[
name|i
index|]
argument_list|,
name|listener
argument_list|)
condition|)
block|{
name|hasAnnotations
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|hasAnnotations
condition|)
block|{
name|listener
operator|.
name|setClassName
argument_list|(
name|listenerClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|listener
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Checks that the method signature is one of a valid listener method,      *<em>void METHOD(Object)</em>.      */
specifier|protected
name|boolean
name|isValidListenerMethod
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
name|int
name|modifiers
init|=
name|m
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|Modifier
operator|.
name|isStatic
argument_list|(
name|modifiers
argument_list|)
operator|||
name|Modifier
operator|.
name|isFinal
argument_list|(
name|modifiers
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|Void
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Class
index|[]
name|params
init|=
name|m
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|length
operator|!=
literal|1
operator|||
operator|!
name|Object
operator|.
name|class
operator|.
name|equals
argument_list|(
name|params
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|boolean
name|processAnnotations
parameter_list|(
name|Method
name|method
parameter_list|,
name|JpaEntityListener
name|listener
parameter_list|)
block|{
name|boolean
name|hasListenerAnnotations
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|PrePersist
operator|.
name|class
argument_list|)
condition|)
block|{
name|listener
operator|.
name|setPrePersist
argument_list|(
operator|new
name|JpaLifecycleCallback
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hasListenerAnnotations
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|PostPersist
operator|.
name|class
argument_list|)
condition|)
block|{
name|listener
operator|.
name|setPostPersist
argument_list|(
operator|new
name|JpaLifecycleCallback
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hasListenerAnnotations
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|PreRemove
operator|.
name|class
argument_list|)
condition|)
block|{
name|listener
operator|.
name|setPreRemove
argument_list|(
operator|new
name|JpaLifecycleCallback
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hasListenerAnnotations
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|PostRemove
operator|.
name|class
argument_list|)
condition|)
block|{
name|listener
operator|.
name|setPostRemove
argument_list|(
operator|new
name|JpaLifecycleCallback
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hasListenerAnnotations
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|PreUpdate
operator|.
name|class
argument_list|)
condition|)
block|{
name|listener
operator|.
name|setPreUpdate
argument_list|(
operator|new
name|JpaLifecycleCallback
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hasListenerAnnotations
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|PostUpdate
operator|.
name|class
argument_list|)
condition|)
block|{
name|listener
operator|.
name|setPostUpdate
argument_list|(
operator|new
name|JpaLifecycleCallback
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hasListenerAnnotations
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|PostLoad
operator|.
name|class
argument_list|)
condition|)
block|{
name|listener
operator|.
name|setPostLoad
argument_list|(
operator|new
name|JpaLifecycleCallback
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hasListenerAnnotations
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|hasListenerAnnotations
return|;
block|}
block|}
end_class

end_unit

