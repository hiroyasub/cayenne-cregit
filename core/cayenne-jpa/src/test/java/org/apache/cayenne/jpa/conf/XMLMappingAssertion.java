begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|AccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaEmbeddable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaEntityMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaMappedSuperclass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|map
operator|.
name|JpaPersistenceUnitMetadata
import|;
end_import

begin_class
class|class
name|XMLMappingAssertion
extends|extends
name|MappingAssertion
block|{
annotation|@
name|Override
specifier|public
name|void
name|testEntityMap
parameter_list|(
name|JpaEntityMap
name|entityMap
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|entityMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test Description"
argument_list|,
name|entityMap
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default_package"
argument_list|,
name|entityMap
operator|.
name|getPackageName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default_catalog"
argument_list|,
name|entityMap
operator|.
name|getCatalog
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AccessType
operator|.
name|FIELD
argument_list|,
name|entityMap
operator|.
name|getAccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertUnitMetadata
argument_list|(
name|entityMap
operator|.
name|getPersistenceUnitMetadata
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|testEntityMap
argument_list|(
name|entityMap
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertUnitMetadata
parameter_list|(
name|JpaPersistenceUnitMetadata
name|md
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getPersistenceUnitDefaults
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dschema"
argument_list|,
name|md
operator|.
name|getPersistenceUnitDefaults
argument_list|()
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dcatalog"
argument_list|,
name|md
operator|.
name|getPersistenceUnitDefaults
argument_list|()
operator|.
name|getCatalog
argument_list|()
argument_list|)
expr_stmt|;
name|assertEntityListeners
argument_list|(
name|md
operator|.
name|getPersistenceUnitDefaults
argument_list|()
operator|.
name|getEntityListeners
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|assertEntity1
parameter_list|(
name|JpaEntity
name|entity1
parameter_list|)
block|{
name|super
operator|.
name|assertEntity1
argument_list|(
name|entity1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entity1
operator|.
name|isMetadataComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|AccessType
operator|.
name|PROPERTY
argument_list|,
name|entity1
operator|.
name|getAccess
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|assertEntity2
parameter_list|(
name|JpaEntity
name|entity2
parameter_list|)
block|{
name|super
operator|.
name|assertEntity2
argument_list|(
name|entity2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entity2
operator|.
name|isMetadataComplete
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|assertEmbeddable1
parameter_list|(
name|JpaEmbeddable
name|embeddable1
parameter_list|)
block|{
name|super
operator|.
name|assertEmbeddable1
argument_list|(
name|embeddable1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|embeddable1
operator|.
name|isMetadataComplete
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|AccessType
operator|.
name|FIELD
argument_list|,
name|embeddable1
operator|.
name|getAccess
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|assertMappedSuperclass1
parameter_list|(
name|JpaMappedSuperclass
name|mappedSuperclass1
parameter_list|)
block|{
name|super
operator|.
name|assertMappedSuperclass1
argument_list|(
name|mappedSuperclass1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mappedSuperclass1
operator|.
name|isMetadataComplete
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

