begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dataview
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EventListener
import|;
end_import

begin_class
specifier|public
class|class
name|EventDispatcher
block|{
specifier|protected
specifier|transient
name|ArrayList
name|listeners
init|=
operator|new
name|ArrayList
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|void
name|dispatch
parameter_list|(
name|DispatchableEvent
name|e
parameter_list|)
block|{
name|EventListener
index|[]
name|listenersCopy
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|hasListeners
argument_list|()
condition|)
name|listenersCopy
operator|=
operator|(
name|EventListener
index|[]
operator|)
name|listeners
operator|.
name|toArray
argument_list|(
operator|new
name|EventListener
index|[
name|listeners
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|listenersCopy
operator|!=
literal|null
condition|)
block|{
name|int
name|count
init|=
name|listenersCopy
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|count
condition|;
operator|++
name|index
control|)
block|{
name|e
operator|.
name|dispatch
argument_list|(
name|listenersCopy
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|boolean
name|hasListeners
parameter_list|()
block|{
return|return
operator|!
name|listeners
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
specifier|synchronized
name|int
name|getListenerCount
parameter_list|()
block|{
return|return
name|listeners
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
specifier|synchronized
name|int
name|find
parameter_list|(
name|EventListener
name|listener
parameter_list|)
block|{
return|return
name|listeners
operator|.
name|indexOf
argument_list|(
name|listener
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|add
parameter_list|(
name|EventListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|find
argument_list|(
name|listener
argument_list|)
operator|<
literal|0
condition|)
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|remove
parameter_list|(
name|EventListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
name|listeners
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|EventDispatcher
name|add
parameter_list|(
name|EventDispatcher
name|dispatcher
parameter_list|,
name|EventListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|dispatcher
operator|==
literal|null
condition|)
name|dispatcher
operator|=
operator|new
name|EventDispatcher
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
return|return
name|dispatcher
return|;
block|}
specifier|public
specifier|final
specifier|static
name|EventDispatcher
name|remove
parameter_list|(
name|EventDispatcher
name|dispatcher
parameter_list|,
name|EventListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|dispatcher
operator|!=
literal|null
condition|)
block|{
name|dispatcher
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dispatcher
operator|.
name|hasListeners
argument_list|()
condition|)
name|dispatcher
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|dispatcher
return|;
block|}
block|}
end_class

end_unit

