begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|postgres
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|trans
operator|.
name|QueryAssembler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|trans
operator|.
name|TrimmingQualifierTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_comment
comment|/**   * Uses Postgres extensions to optimize various translations.   *   * @author Andrus Adamchik  * @since 1.1  */
end_comment

begin_class
specifier|public
class|class
name|PostgresQualifierTranslator
extends|extends
name|TrimmingQualifierTranslator
block|{
specifier|public
name|PostgresQualifierTranslator
parameter_list|(
name|QueryAssembler
name|queryAssembler
parameter_list|)
block|{
name|super
argument_list|(
name|queryAssembler
argument_list|,
literal|"RTRIM"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startNode
parameter_list|(
name|Expression
name|node
parameter_list|,
name|Expression
name|parentNode
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getOperandCount
argument_list|()
operator|==
literal|2
condition|)
block|{
comment|// binary nodes are the only ones that currently require this
name|detectObjectMatch
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|parenthesisNeeded
argument_list|(
name|node
argument_list|,
name|parentNode
argument_list|)
condition|)
block|{
name|qualBuf
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
block|}
comment|// super implementation has special handling
comment|// of LIKE_IGNORE_CASE and NOT_LIKE_IGNORE_CASE
comment|// Postgres uses ILIKE
comment|// ...
block|}
else|else
block|{
name|super
operator|.
name|startNode
argument_list|(
name|node
argument_list|,
name|parentNode
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|endNode
parameter_list|(
name|Expression
name|node
parameter_list|,
name|Expression
name|parentNode
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getOperandCount
argument_list|()
operator|==
literal|2
condition|)
block|{
comment|// check if we need to use objectMatchTranslator to finish building the expression
if|if
condition|(
name|matchingObject
condition|)
block|{
name|appendObjectMatch
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parenthesisNeeded
argument_list|(
name|node
argument_list|,
name|parentNode
argument_list|)
condition|)
name|qualBuf
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
comment|// super implementation has special handling
comment|// of LIKE_IGNORE_CASE and NOT_LIKE_IGNORE_CASE
comment|// Postgres uses ILIKE
comment|// ...
block|}
else|else
block|{
name|super
operator|.
name|endNode
argument_list|(
name|node
argument_list|,
name|parentNode
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|finishedChild
parameter_list|(
name|Expression
name|node
parameter_list|,
name|int
name|childIndex
parameter_list|,
name|boolean
name|hasMoreChildren
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasMoreChildren
condition|)
block|{
return|return;
block|}
comment|// use ILIKE
switch|switch
condition|(
name|node
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Expression
operator|.
name|LIKE_IGNORE_CASE
case|:
name|finishedChildNodeAppendExpression
argument_list|(
name|node
argument_list|,
literal|" ILIKE "
argument_list|)
expr_stmt|;
break|break;
case|case
name|Expression
operator|.
name|NOT_LIKE_IGNORE_CASE
case|:
name|finishedChildNodeAppendExpression
argument_list|(
name|node
argument_list|,
literal|" NOT ILIKE "
argument_list|)
expr_stmt|;
break|break;
default|default :
name|super
operator|.
name|finishedChild
argument_list|(
name|node
argument_list|,
name|childIndex
argument_list|,
name|hasMoreChildren
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|finishedChildNodeAppendExpression
parameter_list|(
name|Expression
name|node
parameter_list|,
name|String
name|operation
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|(
name|matchingObject
operator|)
condition|?
operator|new
name|StringBuffer
argument_list|()
else|:
name|qualBuf
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|operation
argument_list|)
expr_stmt|;
if|if
condition|(
name|matchingObject
condition|)
block|{
name|objectMatchTranslator
operator|.
name|setOperation
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|objectMatchTranslator
operator|.
name|setExpression
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

