begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLEncoder
import|;
end_import

begin_comment
comment|/**  * A DerivedDbAttribute is a DbAttribute that resolves to an SQL expression based on a set  * of other attributes. DerivedDbAttribute's allow to build expressions like "  *<code>count(id)</code>", "<code>sum(price)</code>", etc.  *<p>  * Internally DerivedDbAttribute is defined as a specification string and a set of  * substitution DbAttribute parameters. Specification string is an SQL expression that  * contains placeholders (<code>%@</code>) for attribute parameters, for example:  *</p>  *<p>  *<code>sum(%@) + sum(%@)</code>  *</p>  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|DerivedDbAttribute
extends|extends
name|DbAttribute
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ATTRIBUTE_TOKEN
init|=
literal|"%@"
decl_stmt|;
specifier|protected
name|String
name|expressionSpec
decl_stmt|;
specifier|protected
name|List
name|params
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|protected
name|boolean
name|groupBy
decl_stmt|;
comment|/**      * Constructor for DerivedDbAttribute.      */
specifier|public
name|DerivedDbAttribute
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Constructor for DerivedDbAttribute.      */
specifier|public
name|DerivedDbAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor for DerivedDbAttribute.      */
specifier|public
name|DerivedDbAttribute
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|type
parameter_list|,
name|DbEntity
name|entity
parameter_list|,
name|String
name|spec
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|entity
argument_list|)
expr_stmt|;
name|setExpressionSpec
argument_list|(
name|spec
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates and initializes a derived attribute with an attribute of a parent entity.      */
specifier|public
name|DerivedDbAttribute
parameter_list|(
name|DbEntity
name|entity
parameter_list|,
name|DbAttribute
name|parentProto
parameter_list|)
block|{
name|setName
argument_list|(
name|parentProto
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setType
argument_list|(
name|parentProto
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|setMandatory
argument_list|(
name|parentProto
operator|.
name|isMandatory
argument_list|()
argument_list|)
expr_stmt|;
name|setMaxLength
argument_list|(
name|parentProto
operator|.
name|getMaxLength
argument_list|()
argument_list|)
expr_stmt|;
name|setAttributePrecision
argument_list|(
name|parentProto
operator|.
name|getAttributePrecision
argument_list|()
argument_list|)
expr_stmt|;
name|setScale
argument_list|(
name|parentProto
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
name|setPrimaryKey
argument_list|(
name|parentProto
operator|.
name|isPrimaryKey
argument_list|()
argument_list|)
expr_stmt|;
name|setExpressionSpec
argument_list|(
name|ATTRIBUTE_TOKEN
argument_list|)
expr_stmt|;
name|addParam
argument_list|(
name|parentProto
argument_list|)
expr_stmt|;
name|setEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
comment|/**      * Prints itself as XML to the provided XMLEncoder.      *       * @since 1.1      */
specifier|public
name|void
name|encodeAsXML
parameter_list|(
name|XMLEncoder
name|encoder
parameter_list|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"<db-attribute-derived name=\""
operator|+
name|Util
operator|.
name|encodeXmlAttribute
argument_list|(
name|getName
argument_list|()
argument_list|)
operator|+
literal|'\"'
argument_list|)
expr_stmt|;
name|String
name|type
init|=
name|TypesMapping
operator|.
name|getSqlNameByType
argument_list|(
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|" type=\""
operator|+
name|type
operator|+
literal|'\"'
argument_list|)
expr_stmt|;
block|}
comment|// If attribute is part of primary key
if|if
condition|(
name|isPrimaryKey
argument_list|()
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|" isPrimaryKey=\"true\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isMandatory
argument_list|()
condition|)
name|encoder
operator|.
name|print
argument_list|(
literal|" isMandatory=\"true\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|getMaxLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|" length=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|getMaxLength
argument_list|()
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getScale
argument_list|()
operator|>
literal|0
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|" scale=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getAttributePrecision
argument_list|()
operator|>
literal|0
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|" attributePrecision=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|getAttributePrecision
argument_list|()
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|DerivedDbEntity
operator|)
name|getEntity
argument_list|()
operator|)
operator|.
name|getGroupByAttributes
argument_list|()
operator|.
name|contains
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|" isGroupBy=\"true\""
argument_list|)
expr_stmt|;
block|}
name|String
name|spec
init|=
name|getExpressionSpec
argument_list|()
decl_stmt|;
if|if
condition|(
name|spec
operator|!=
literal|null
operator|&&
name|spec
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|" spec=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|spec
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
block|}
name|List
name|params
init|=
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|encoder
operator|.
name|println
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|indent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Iterator
name|refs
init|=
name|params
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|refs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbAttribute
name|ref
init|=
operator|(
name|DbAttribute
operator|)
name|refs
operator|.
name|next
argument_list|()
decl_stmt|;
name|encoder
operator|.
name|println
argument_list|(
literal|"<db-attribute-ref name=\""
operator|+
name|Util
operator|.
name|encodeXmlAttribute
argument_list|(
name|ref
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"\"/>"
argument_list|)
expr_stmt|;
block|}
name|encoder
operator|.
name|indent
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|println
argument_list|(
literal|"</db-attribute-derived>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|encoder
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getAliasedName
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
if|if
condition|(
name|expressionSpec
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getAliasedName
argument_list|(
name|alias
argument_list|)
return|;
block|}
name|int
name|len
init|=
name|params
operator|.
name|size
argument_list|()
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|ind
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
comment|// no bound checking
comment|// expression is assumed to be valid
name|int
name|match
init|=
name|expressionSpec
operator|.
name|indexOf
argument_list|(
name|ATTRIBUTE_TOKEN
argument_list|,
name|ind
argument_list|)
decl_stmt|;
name|DbAttribute
name|at
init|=
operator|(
name|DbAttribute
operator|)
name|params
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|>
name|i
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|expressionSpec
operator|.
name|substring
argument_list|(
name|ind
argument_list|,
name|match
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|at
operator|.
name|getAliasedName
argument_list|(
name|alias
argument_list|)
argument_list|)
expr_stmt|;
name|ind
operator|=
name|match
operator|+
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|ind
operator|<
name|expressionSpec
operator|.
name|length
argument_list|()
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|expressionSpec
operator|.
name|substring
argument_list|(
name|ind
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Returns true if this attribute is used in GROUP BY clause of the parent entity.      */
specifier|public
name|boolean
name|isGroupBy
parameter_list|()
block|{
return|return
name|groupBy
return|;
block|}
specifier|public
name|void
name|setGroupBy
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|groupBy
operator|=
name|flag
expr_stmt|;
block|}
comment|/**      * Returns the params.      *       * @return List      */
specifier|public
name|List
name|getParams
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|params
argument_list|)
return|;
block|}
comment|/**      * Returns the expressionSpec.      */
specifier|public
name|String
name|getExpressionSpec
parameter_list|()
block|{
return|return
name|expressionSpec
return|;
block|}
comment|/**      * Adds parameter.      */
specifier|public
name|void
name|addParam
parameter_list|(
name|DbAttribute
name|param
parameter_list|)
block|{
name|params
operator|.
name|add
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeParam
parameter_list|(
name|DbAttribute
name|param
parameter_list|)
block|{
name|params
operator|.
name|remove
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearParams
parameter_list|()
block|{
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sets the expressionSpec.      */
specifier|public
name|void
name|setExpressionSpec
parameter_list|(
name|String
name|expressionSpec
parameter_list|)
block|{
name|this
operator|.
name|expressionSpec
operator|=
name|expressionSpec
expr_stmt|;
block|}
block|}
end_class

end_unit

