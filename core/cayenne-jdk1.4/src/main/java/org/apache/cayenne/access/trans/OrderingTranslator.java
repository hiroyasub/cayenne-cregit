begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|trans
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_comment
comment|/**   * Translates query ordering to SQL.   *   * @author Andrus Adamchik  * @author Craig Miskell  */
end_comment

begin_class
specifier|public
class|class
name|OrderingTranslator
extends|extends
name|QueryAssemblerHelper
block|{
specifier|protected
name|List
name|orderByColumnList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|public
name|OrderingTranslator
parameter_list|(
name|QueryAssembler
name|queryAssembler
parameter_list|)
block|{
name|super
argument_list|(
name|queryAssembler
argument_list|)
expr_stmt|;
block|}
comment|/** Translates query Ordering list to SQL ORDER BY clause.       *  Ordering list is obtained from<code>queryAssembler</code>'s query object.       *  In a process of building of ORDER BY clause,<code>queryAssembler</code>       *  is notified when a join needs to be added. */
specifier|public
name|String
name|doTranslation
parameter_list|()
block|{
name|Query
name|q
init|=
name|queryAssembler
operator|.
name|getQuery
argument_list|()
decl_stmt|;
comment|// only select queries can have ordering...
if|if
condition|(
name|q
operator|==
literal|null
operator|||
operator|!
operator|(
name|q
operator|instanceof
name|SelectQuery
operator|)
condition|)
return|return
literal|null
return|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|List
name|list
init|=
operator|(
operator|(
name|SelectQuery
operator|)
name|q
operator|)
operator|.
name|getOrderings
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|StringBuffer
name|ordComp
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Ordering
name|ord
init|=
operator|(
name|Ordering
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|//UPPER is (I think) part of the SQL99 standard, and I'm not convinced it's universally available
comment|// - should the syntax used here be defined by the Db specific adaptor perhaps, or at least
comment|// possibly specified by the db adaptor (a DB specific OrderingTranslator hook)?
if|if
condition|(
name|ord
operator|.
name|isCaseInsensitive
argument_list|()
condition|)
block|{
name|ordComp
operator|.
name|append
argument_list|(
literal|"UPPER("
argument_list|)
expr_stmt|;
block|}
name|Expression
name|exp
init|=
name|ord
operator|.
name|getSortSpec
argument_list|()
decl_stmt|;
if|if
condition|(
name|exp
operator|.
name|getType
argument_list|()
operator|==
name|Expression
operator|.
name|OBJ_PATH
condition|)
block|{
name|appendObjPath
argument_list|(
name|ordComp
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|exp
operator|.
name|getType
argument_list|()
operator|==
name|Expression
operator|.
name|DB_PATH
condition|)
block|{
name|appendDbPath
argument_list|(
name|ordComp
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unsupported ordering expression: "
operator|+
name|exp
argument_list|)
throw|;
block|}
comment|//Close UPPER() modifier
if|if
condition|(
name|ord
operator|.
name|isCaseInsensitive
argument_list|()
condition|)
block|{
name|ordComp
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|orderByColumnList
operator|.
name|add
argument_list|(
name|ordComp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|ordComp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// "ASC" is a noop, omit it from the query
if|if
condition|(
operator|!
name|ord
operator|.
name|isAscending
argument_list|()
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" DESC"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|buf
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * Returns the column expressions (not Expressions) used in      * the order by clause.  E.g., in the case of an case-insensitive       * order by, an element of the list would be       *<code>UPPER(&lt;column reference&gt;)</code>      */
specifier|public
name|List
name|getOrderByColumnList
parameter_list|()
block|{
return|return
name|orderByColumnList
return|;
block|}
block|}
end_class

end_unit

