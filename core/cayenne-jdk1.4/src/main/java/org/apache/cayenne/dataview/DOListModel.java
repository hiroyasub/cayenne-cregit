begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dataview
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractListModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataObject
import|;
end_import

begin_comment
comment|/**  * A Swing ListModel wrapping {@link DataObjectList}.  *   * @since 1.1  */
end_comment

begin_class
specifier|public
class|class
name|DOListModel
extends|extends
name|AbstractListModel
implements|implements
name|DataObjectChangeListener
implements|,
name|FieldValueChangeListener
block|{
specifier|protected
name|ObjEntityViewField
name|viewField
decl_stmt|;
specifier|protected
name|DataObjectList
name|dataObjects
init|=
operator|new
name|DataObjectList
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|DOListModel
parameter_list|()
block|{
block|}
specifier|public
name|void
name|setViewField
parameter_list|(
name|ObjEntityViewField
name|field
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|viewField
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|viewField
operator|.
name|getOwner
argument_list|()
operator|.
name|getOwner
argument_list|()
operator|.
name|removeFieldValueChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|viewField
operator|=
name|field
expr_stmt|;
name|viewField
operator|.
name|getOwner
argument_list|()
operator|.
name|getOwner
argument_list|()
operator|.
name|addFieldValueChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|fireContentsChanged
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDataObjects
parameter_list|(
name|DataObjectList
name|dataObjects
parameter_list|)
block|{
name|this
operator|.
name|dataObjects
operator|.
name|removeDataObjectChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataObjects
operator|=
name|dataObjects
expr_stmt|;
name|this
operator|.
name|dataObjects
operator|.
name|addDataObjectChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|fireContentsChanged
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|dataObjects
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|DataObject
name|getDataObject
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|DataObject
operator|)
name|dataObjects
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
name|Object
name|getElementAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|viewField
operator|==
literal|null
condition|)
return|return
name|getDataObject
argument_list|(
name|index
argument_list|)
return|;
return|return
name|viewField
operator|.
name|getValue
argument_list|(
name|getDataObject
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|dataChanged
parameter_list|(
name|DataObjectChangeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isMultiObjectChange
argument_list|()
condition|)
block|{
name|fireContentsChanged
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|affectedRow
init|=
name|event
operator|.
name|getAffectedDataObjectIndex
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|event
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|DataObjectChangeEvent
operator|.
name|DATAOBJECT_ADDED
case|:
name|fireIntervalAdded
argument_list|(
name|this
argument_list|,
name|affectedRow
argument_list|,
name|affectedRow
argument_list|)
expr_stmt|;
break|break;
case|case
name|DataObjectChangeEvent
operator|.
name|DATAOBJECT_REMOVED
case|:
name|fireIntervalRemoved
argument_list|(
name|this
argument_list|,
name|affectedRow
argument_list|,
name|affectedRow
argument_list|)
expr_stmt|;
break|break;
case|case
name|DataObjectChangeEvent
operator|.
name|DATAOBJECT_CHANGED
case|:
name|fireContentsChanged
argument_list|(
name|this
argument_list|,
name|affectedRow
argument_list|,
name|affectedRow
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fireContentsChanged
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ObjEntityViewField
name|getViewField
parameter_list|()
block|{
return|return
name|viewField
return|;
block|}
specifier|public
name|DataObjectList
name|getDataObjects
parameter_list|()
block|{
return|return
name|dataObjects
return|;
block|}
specifier|public
name|void
name|fieldValueChanged
parameter_list|(
name|FieldValueChangeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|viewField
operator|!=
literal|null
operator|&&
name|viewField
operator|.
name|isSameObjAttribute
argument_list|(
name|event
operator|.
name|getField
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|dataObjects
operator|.
name|indexOf
argument_list|(
name|event
operator|.
name|getModifiedObject
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
name|fireContentsChanged
argument_list|(
name|this
argument_list|,
name|index
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

