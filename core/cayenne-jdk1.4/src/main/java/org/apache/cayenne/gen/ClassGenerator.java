begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|Template
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|VelocityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|app
operator|.
name|VelocityEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|context
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|RuntimeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|log
operator|.
name|NullLogSystem
import|;
end_import

begin_import
import|import
name|foundrylogic
operator|.
name|vpp
operator|.
name|VPPConfig
import|;
end_import

begin_comment
comment|/**  * Class generation engine for ObjEntities based on<a  * href="http://jakarta.apache.org/velocity/" target="_blank">Velocity templates</a>.  * Instance of ClassGenerationInfo is available inside Velocity template under the key  * "classGen".  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|ClassGenerator
block|{
specifier|public
specifier|static
specifier|final
name|String
name|VERSION_1_1
init|=
literal|"1.1"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|VERSION_1_2
init|=
literal|"1.2"
decl_stmt|;
specifier|protected
name|String
name|versionString
decl_stmt|;
specifier|protected
name|Template
name|classTemplate
decl_stmt|;
specifier|protected
name|Context
name|velCtxt
decl_stmt|;
specifier|protected
name|ClassGenerationInfo
name|classGenerationInfo
decl_stmt|;
comment|// only used for VERSION_1_1
comment|/**      * Creates a new ClassGenerationInfo that uses a specified Velocity template.      *       * @since 1.2      * @param template to use      * @param versionString of cgen      * @throws Exception      */
specifier|public
name|ClassGenerator
parameter_list|(
name|String
name|template
parameter_list|,
name|String
name|versionString
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|versionString
operator|=
name|versionString
expr_stmt|;
if|if
condition|(
literal|false
operator|==
name|VERSION_1_1
operator|.
name|equals
argument_list|(
name|versionString
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Illegal Version in generateClass(Writer,ObjEntity): "
operator|+
name|versionString
argument_list|)
throw|;
block|}
name|velCtxt
operator|=
operator|new
name|VelocityContext
argument_list|()
expr_stmt|;
name|classGenerationInfo
operator|=
operator|new
name|ClassGenerationInfo
argument_list|()
expr_stmt|;
name|velCtxt
operator|.
name|put
argument_list|(
literal|"classGen"
argument_list|,
name|classGenerationInfo
argument_list|)
expr_stmt|;
name|initializeClassTemplate
argument_list|(
name|template
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new ClassGenerationInfo that uses a specified Velocity template.      *       * @since 1.2      * @param template to use      * @param versionString of cgen      * @param vppConfig for configuring VelocityEngine and VelocityContext      * @throws Exception      */
specifier|public
name|ClassGenerator
parameter_list|(
name|String
name|template
parameter_list|,
name|String
name|versionString
parameter_list|,
name|VPPConfig
name|vppConfig
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|versionString
operator|=
name|versionString
expr_stmt|;
if|if
condition|(
literal|false
operator|==
name|VERSION_1_2
operator|.
name|equals
argument_list|(
name|versionString
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Illegal Version in generateClass(Writer,ObjEntity): "
operator|+
name|versionString
argument_list|)
throw|;
block|}
if|if
condition|(
name|vppConfig
operator|!=
literal|null
condition|)
block|{
name|velCtxt
operator|=
name|vppConfig
operator|.
name|getVelocityContext
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|velCtxt
operator|=
operator|new
name|VelocityContext
argument_list|()
expr_stmt|;
block|}
name|initializeClassTemplate
argument_list|(
name|template
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets up VelocityEngine properties, creates a VelocityEngine instance, and fetches a      * template using the VelocityEngine instance.      *       * @since 1.2      */
specifier|private
name|void
name|initializeClassTemplate
parameter_list|(
name|String
name|template
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
name|VelocityEngine
name|velocityEngine
init|=
operator|new
name|VelocityEngine
argument_list|()
decl_stmt|;
try|try
block|{
comment|// use ClasspathResourceLoader for velocity templates lookup
comment|// if Cayenne URL is not null, load resource from this URL
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// null logger that will prevent velocity.log from being generated
name|props
operator|.
name|put
argument_list|(
name|RuntimeConstants
operator|.
name|RUNTIME_LOG_LOGSYSTEM_CLASS
argument_list|,
name|NullLogSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"resource.loader"
argument_list|,
literal|"cayenne"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"cayenne.resource.loader.class"
argument_list|,
name|ClassGeneratorResourceLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|velocityEngine
operator|.
name|init
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't initialize Velocity"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
try|try
block|{
name|classTemplate
operator|=
name|velocityEngine
operator|.
name|getTemplate
argument_list|(
name|template
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't create template: "
operator|+
name|template
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * Generates Java code for the ObjEntity. Output is written to the provided Writer.      */
specifier|public
name|void
name|generateClass
parameter_list|(
name|Writer
name|out
parameter_list|,
name|ObjEntity
name|entity
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
literal|false
operator|==
name|VERSION_1_1
operator|.
name|equals
argument_list|(
name|versionString
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Illegal Version in generateClass(Writer,ObjEntity): "
operator|+
name|versionString
argument_list|)
throw|;
block|}
name|classGenerationInfo
operator|.
name|setObjEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|classTemplate
operator|.
name|merge
argument_list|(
name|velCtxt
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**      * Generates Java code for the ObjEntity. Output is written to the provided Writer.      */
specifier|public
name|void
name|generateClass
parameter_list|(
name|Writer
name|out
parameter_list|,
name|DataMap
name|dataMap
parameter_list|,
name|ObjEntity
name|entity
parameter_list|,
name|String
name|fqnBaseClass
parameter_list|,
name|String
name|fqnSuperClass
parameter_list|,
name|String
name|fqnSubClass
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
literal|false
operator|==
name|VERSION_1_2
operator|.
name|equals
argument_list|(
name|versionString
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Illegal Version in generateClass(Writer,ObjEntity,String,String,String): "
operator|+
name|versionString
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|dataMap
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"DataMap MapClassGenerator constructor required for v1.2 templating."
argument_list|)
throw|;
block|}
name|velCtxt
operator|.
name|put
argument_list|(
literal|"objEntity"
argument_list|,
name|entity
argument_list|)
expr_stmt|;
name|velCtxt
operator|.
name|put
argument_list|(
literal|"stringUtils"
argument_list|,
name|StringUtils
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|velCtxt
operator|.
name|put
argument_list|(
literal|"entityUtils"
argument_list|,
operator|new
name|EntityUtils
argument_list|(
name|dataMap
argument_list|,
name|entity
argument_list|,
name|fqnBaseClass
argument_list|,
name|fqnSuperClass
argument_list|,
name|fqnSubClass
argument_list|)
argument_list|)
expr_stmt|;
name|velCtxt
operator|.
name|put
argument_list|(
literal|"importUtils"
argument_list|,
operator|new
name|ImportUtils
argument_list|()
argument_list|)
expr_stmt|;
name|classTemplate
operator|.
name|merge
argument_list|(
name|velCtxt
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
comment|// deprecated, delegated methods previously used internally in cayenne
comment|/**      * @return Returns the classGenerationInfo in template.      */
specifier|public
name|ClassGenerationInfo
name|getClassGenerationInfo
parameter_list|()
block|{
return|return
name|classGenerationInfo
return|;
block|}
block|}
end_class

end_unit

