begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|ComparatorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|ConversionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLSerializable
import|;
end_import

begin_comment
comment|/**  * Defines object sorting criteria, used either for in-memory sorting of object lists or  * as a specification for building<em>ORDER BY</em> clause of a SelectQuery query. Note  * that in case of in-memory sorting, Ordering can be used with any JavaBeans, not just  * DataObjects.  *   * @author Andrus Adamchik  * @author Craig Miskell  */
end_comment

begin_class
specifier|public
class|class
name|Ordering
implements|implements
name|Comparator
implements|,
name|Serializable
implements|,
name|XMLSerializable
block|{
comment|/**      * Symbolic representation of ascending ordering criterion.      */
specifier|public
specifier|static
specifier|final
name|boolean
name|ASC
init|=
literal|true
decl_stmt|;
comment|/**      * Symbolic representation of descending ordering criterion.      */
specifier|public
specifier|static
specifier|final
name|boolean
name|DESC
init|=
literal|false
decl_stmt|;
specifier|protected
name|String
name|sortSpecString
decl_stmt|;
specifier|protected
specifier|transient
name|Expression
name|sortSpec
decl_stmt|;
specifier|protected
name|boolean
name|ascending
decl_stmt|;
specifier|protected
name|boolean
name|caseInsensitive
decl_stmt|;
comment|/**      * Orders a given list of objects, using a List of Orderings applied according the      * default iteration order of the Orderings list. I.e. each Ordering with lower index      * is more significant than any other Ordering with higer index. List being ordered is      * modified in place.      */
specifier|public
specifier|static
name|void
name|orderList
parameter_list|(
name|List
name|objects
parameter_list|,
name|List
name|orderings
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|objects
argument_list|,
name|ComparatorUtils
operator|.
name|chainedComparator
argument_list|(
name|orderings
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Ordering
parameter_list|()
block|{
block|}
specifier|public
name|Ordering
parameter_list|(
name|String
name|sortPathSpec
parameter_list|,
name|boolean
name|ascending
parameter_list|)
block|{
name|this
argument_list|(
name|sortPathSpec
argument_list|,
name|ascending
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Ordering
parameter_list|(
name|String
name|sortPathSpec
parameter_list|,
name|boolean
name|ascending
parameter_list|,
name|boolean
name|caseInsensitive
parameter_list|)
block|{
name|setSortSpecString
argument_list|(
name|sortPathSpec
argument_list|)
expr_stmt|;
name|this
operator|.
name|ascending
operator|=
name|ascending
expr_stmt|;
name|this
operator|.
name|caseInsensitive
operator|=
name|caseInsensitive
expr_stmt|;
block|}
specifier|public
name|Ordering
parameter_list|(
name|Expression
name|sortExpression
parameter_list|,
name|boolean
name|ascending
parameter_list|)
block|{
name|this
argument_list|(
name|sortExpression
argument_list|,
name|ascending
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Ordering
parameter_list|(
name|Expression
name|sortExpression
parameter_list|,
name|boolean
name|ascending
parameter_list|,
name|boolean
name|caseInsensitive
parameter_list|)
block|{
name|setSortSpec
argument_list|(
name|sortExpression
argument_list|)
expr_stmt|;
name|this
operator|.
name|ascending
operator|=
name|ascending
expr_stmt|;
name|this
operator|.
name|caseInsensitive
operator|=
name|caseInsensitive
expr_stmt|;
block|}
comment|/**      * Sets sortSpec to be an expression represented by string argument.      *       * @since 1.1      */
specifier|public
name|void
name|setSortSpecString
parameter_list|(
name|String
name|sortSpecString
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|this
operator|.
name|sortSpecString
argument_list|,
name|sortSpecString
argument_list|)
condition|)
block|{
name|this
operator|.
name|sortSpecString
operator|=
name|sortSpecString
expr_stmt|;
name|this
operator|.
name|sortSpec
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Returns sortSpec string representation.      *       * @since 1.1      */
specifier|public
name|String
name|getSortSpecString
parameter_list|()
block|{
return|return
name|sortSpecString
return|;
block|}
comment|/** Returns true if sorting is done in ascending order. */
specifier|public
name|boolean
name|isAscending
parameter_list|()
block|{
return|return
name|ascending
return|;
block|}
comment|/** Sets<code>ascending</code> property of this Ordering. */
specifier|public
name|void
name|setAscending
parameter_list|(
name|boolean
name|ascending
parameter_list|)
block|{
name|this
operator|.
name|ascending
operator|=
name|ascending
expr_stmt|;
block|}
comment|/** Returns true if the sorting is case insensitive */
specifier|public
name|boolean
name|isCaseInsensitive
parameter_list|()
block|{
return|return
name|caseInsensitive
return|;
block|}
comment|/** Sets<code>caseInsensitive</code> property of this Ordering. */
specifier|public
name|void
name|setCaseInsensitive
parameter_list|(
name|boolean
name|caseInsensitive
parameter_list|)
block|{
name|this
operator|.
name|caseInsensitive
operator|=
name|caseInsensitive
expr_stmt|;
block|}
comment|/**      * Returns the expression defining a ordering Java Bean property.      */
specifier|public
name|Expression
name|getSortSpec
parameter_list|()
block|{
if|if
condition|(
name|sortSpecString
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// compile on demand
if|if
condition|(
name|sortSpec
operator|==
literal|null
condition|)
block|{
name|sortSpec
operator|=
name|Expression
operator|.
name|fromString
argument_list|(
name|sortSpecString
argument_list|)
expr_stmt|;
block|}
return|return
name|sortSpec
return|;
block|}
comment|/**      * Sets the expression defining a ordering Java Bean property.      */
specifier|public
name|void
name|setSortSpec
parameter_list|(
name|Expression
name|sortSpec
parameter_list|)
block|{
name|this
operator|.
name|sortSpec
operator|=
name|sortSpec
expr_stmt|;
name|this
operator|.
name|sortSpecString
operator|=
operator|(
name|sortSpec
operator|!=
literal|null
operator|)
condition|?
name|sortSpec
operator|.
name|toString
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
comment|/**      * Orders the given list of objects according to the ordering that this object      * specifies. List is modified in-place.      *       * @param objects a List of objects to be sorted      */
specifier|public
name|void
name|orderList
parameter_list|(
name|List
name|objects
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|objects
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Comparable interface implementation. Can compare two Java Beans based on the stored      * expression.      */
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|Expression
name|exp
init|=
name|getSortSpec
argument_list|()
decl_stmt|;
name|Object
name|value1
init|=
name|exp
operator|.
name|evaluate
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|Object
name|value2
init|=
name|exp
operator|.
name|evaluate
argument_list|(
name|o2
argument_list|)
decl_stmt|;
comment|// nulls first policy... maybe make this configurable as some DB do
if|if
condition|(
name|value1
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|value2
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
if|else if
condition|(
name|value2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|this
operator|.
name|caseInsensitive
condition|)
block|{
comment|// TODO: to upper case should probably be defined as a separate expression
comment|// type
name|value1
operator|=
name|ConversionUtil
operator|.
name|toUpperCase
argument_list|(
name|value1
argument_list|)
expr_stmt|;
name|value2
operator|=
name|ConversionUtil
operator|.
name|toUpperCase
argument_list|(
name|value2
argument_list|)
expr_stmt|;
block|}
name|int
name|compareResult
init|=
name|ConversionUtil
operator|.
name|toComparable
argument_list|(
name|value1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|ConversionUtil
operator|.
name|toComparable
argument_list|(
name|value2
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|ascending
operator|)
condition|?
name|compareResult
else|:
operator|-
name|compareResult
return|;
block|}
comment|/**      * Encodes itself as a query ordering.      *       * @since 1.1      */
specifier|public
name|void
name|encodeAsXML
parameter_list|(
name|XMLEncoder
name|encoder
parameter_list|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"<ordering"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ascending
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|" descending=\"true\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|caseInsensitive
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|" ignore-case=\"true\""
argument_list|)
expr_stmt|;
block|}
name|encoder
operator|.
name|print
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSortSpec
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getSortSpec
argument_list|()
operator|.
name|encodeAsXML
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
block|}
name|encoder
operator|.
name|println
argument_list|(
literal|"</ordering>"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|XMLEncoder
name|encoder
init|=
operator|new
name|XMLEncoder
argument_list|(
name|pw
argument_list|)
decl_stmt|;
name|encodeAsXML
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

