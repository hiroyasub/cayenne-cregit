begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_comment
comment|/**  * Builds update qualifier snapshots, including optimistic locking.  *   * @since 1.2  * @author Andrus Adamchik  */
end_comment

begin_class
class|class
name|DataNodeSyncQualifierDescriptor
block|{
specifier|private
name|List
name|attributes
decl_stmt|;
specifier|private
name|List
name|valueTransformers
decl_stmt|;
specifier|private
name|boolean
name|usingOptimisticLocking
decl_stmt|;
specifier|public
name|boolean
name|isUsingOptimisticLocking
parameter_list|()
block|{
return|return
name|usingOptimisticLocking
return|;
block|}
name|List
name|getAttributes
parameter_list|()
block|{
return|return
name|attributes
return|;
block|}
name|Map
name|createQualifierSnapshot
parameter_list|(
name|ObjectDiff
name|diff
parameter_list|)
block|{
name|int
name|len
init|=
name|attributes
operator|.
name|size
argument_list|()
decl_stmt|;
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|(
name|len
operator|*
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|DbAttribute
name|attribute
init|=
operator|(
name|DbAttribute
operator|)
name|attributes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|map
operator|.
name|containsKey
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Object
name|value
init|=
operator|(
operator|(
name|Transformer
operator|)
name|valueTransformers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|transform
argument_list|(
name|diff
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
name|void
name|reset
parameter_list|(
name|ObjEntity
name|entity
parameter_list|,
name|DbEntity
name|dbEntity
parameter_list|)
block|{
name|attributes
operator|=
operator|new
name|ArrayList
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|valueTransformers
operator|=
operator|new
name|ArrayList
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|usingOptimisticLocking
operator|=
name|entity
operator|.
name|getLockType
argument_list|()
operator|==
name|ObjEntity
operator|.
name|LOCK_TYPE_OPTIMISTIC
expr_stmt|;
comment|// master PK columns
if|if
condition|(
name|entity
operator|.
name|getDbEntity
argument_list|()
operator|==
name|dbEntity
condition|)
block|{
name|Iterator
name|pkIt
init|=
name|entity
operator|.
name|getDbEntity
argument_list|()
operator|.
name|getPrimaryKey
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|pkIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|DbAttribute
name|attribute
init|=
operator|(
name|DbAttribute
operator|)
name|pkIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|add
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
name|valueTransformers
operator|.
name|add
argument_list|(
operator|new
name|Transformer
argument_list|()
block|{
specifier|public
name|Object
name|transform
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
name|ObjectId
name|id
init|=
operator|(
name|ObjectId
operator|)
operator|(
operator|(
name|ObjectDiff
operator|)
name|input
operator|)
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
return|return
name|id
operator|.
name|getIdSnapshot
argument_list|()
operator|.
name|get
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// detail table PK columns
name|DbRelationship
name|masterDependentDbRel
init|=
name|findMasterToDependentDbRelationship
argument_list|(
name|entity
operator|.
name|getDbEntity
argument_list|()
argument_list|,
name|dbEntity
argument_list|)
decl_stmt|;
if|if
condition|(
name|masterDependentDbRel
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|joinsIterator
init|=
name|masterDependentDbRel
operator|.
name|getJoins
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|joinsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|DbJoin
name|dbAttrPair
init|=
operator|(
name|DbJoin
operator|)
name|joinsIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|DbAttribute
name|dbAttribute
init|=
name|dbAttrPair
operator|.
name|getTarget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
operator|.
name|contains
argument_list|(
name|dbAttribute
argument_list|)
condition|)
block|{
name|attributes
operator|.
name|add
argument_list|(
name|dbAttribute
argument_list|)
expr_stmt|;
name|valueTransformers
operator|.
name|add
argument_list|(
operator|new
name|Transformer
argument_list|()
block|{
specifier|public
name|Object
name|transform
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
name|ObjectId
name|id
init|=
operator|(
name|ObjectId
operator|)
operator|(
operator|(
name|ObjectDiff
operator|)
name|input
operator|)
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
return|return
name|id
operator|.
name|getIdSnapshot
argument_list|()
operator|.
name|get
argument_list|(
name|dbAttrPair
operator|.
name|getSourceName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|usingOptimisticLocking
condition|)
block|{
name|Iterator
name|attributeIt
init|=
name|entity
operator|.
name|getAttributes
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|attributeIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|ObjAttribute
name|attribute
init|=
operator|(
name|ObjAttribute
operator|)
name|attributeIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|attribute
operator|.
name|isUsedForLocking
argument_list|()
condition|)
block|{
comment|// only care about first step in a flattened attribute
name|DbAttribute
name|dbAttribute
init|=
operator|(
name|DbAttribute
operator|)
name|attribute
operator|.
name|getDbPathIterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
operator|.
name|contains
argument_list|(
name|dbAttribute
argument_list|)
condition|)
block|{
name|attributes
operator|.
name|add
argument_list|(
name|dbAttribute
argument_list|)
expr_stmt|;
name|valueTransformers
operator|.
name|add
argument_list|(
operator|new
name|Transformer
argument_list|()
block|{
specifier|public
name|Object
name|transform
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ObjectDiff
operator|)
name|input
operator|)
operator|.
name|getSnapshotValue
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Iterator
name|relationshipIt
init|=
name|entity
operator|.
name|getRelationships
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|relationshipIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|ObjRelationship
name|relationship
init|=
operator|(
name|ObjRelationship
operator|)
name|relationshipIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|relationship
operator|.
name|isUsedForLocking
argument_list|()
condition|)
block|{
comment|// only care about the first DbRelationship
name|DbRelationship
name|dbRelationship
init|=
operator|(
name|DbRelationship
operator|)
name|relationship
operator|.
name|getDbRelationships
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Iterator
name|joinsIterator
init|=
name|dbRelationship
operator|.
name|getJoins
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|joinsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|DbJoin
name|dbAttrPair
init|=
operator|(
name|DbJoin
operator|)
name|joinsIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|DbAttribute
name|dbAttribute
init|=
name|dbAttrPair
operator|.
name|getSource
argument_list|()
decl_stmt|;
comment|// relationship transformers override attribute transformers for
comment|// meaningful FK's... why meanigful FKs can go out of sync is
comment|// another story (CAY-595)
name|int
name|index
init|=
name|attributes
operator|.
name|indexOf
argument_list|(
name|dbAttribute
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
operator|!
name|dbAttribute
operator|.
name|isForeignKey
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Object
name|transformer
init|=
operator|new
name|Transformer
argument_list|()
block|{
specifier|public
name|Object
name|transform
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
name|ObjectId
name|targetId
init|=
operator|(
operator|(
name|ObjectDiff
operator|)
name|input
operator|)
operator|.
name|getArcSnapshotValue
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|targetId
operator|!=
literal|null
condition|?
name|targetId
operator|.
name|getIdSnapshot
argument_list|()
operator|.
name|get
argument_list|(
name|dbAttrPair
operator|.
name|getTargetName
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|attributes
operator|.
name|add
argument_list|(
name|dbAttribute
argument_list|)
expr_stmt|;
name|valueTransformers
operator|.
name|add
argument_list|(
name|transformer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|valueTransformers
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|transformer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
name|DbRelationship
name|findMasterToDependentDbRelationship
parameter_list|(
name|DbEntity
name|masterDbEntity
parameter_list|,
name|DbEntity
name|dependentDbEntity
parameter_list|)
block|{
name|Iterator
name|it
init|=
name|masterDbEntity
operator|.
name|getRelationshipMap
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbRelationship
name|relationship
init|=
operator|(
name|DbRelationship
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dependentDbEntity
operator|.
name|equals
argument_list|(
name|relationship
operator|.
name|getTargetEntity
argument_list|()
argument_list|)
operator|&&
name|relationship
operator|.
name|isToDependentPK
argument_list|()
condition|)
block|{
if|if
condition|(
name|relationship
operator|.
name|isToMany
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Only 'to one' master-detail relationships can be processed."
argument_list|)
throw|;
block|}
return|return
name|relationship
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

