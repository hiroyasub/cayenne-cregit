begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|hessian
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|AbstractQuery
import|;
end_import

begin_import
import|import
name|com
operator|.
name|caucho
operator|.
name|hessian
operator|.
name|io
operator|.
name|AbstractHessianInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|caucho
operator|.
name|hessian
operator|.
name|io
operator|.
name|JavaDeserializer
import|;
end_import

begin_comment
comment|/**  * Deserializer that overrides query roots with server classes on deserialization.  *   * @since 1.2  * @author Andrus Adamchik  */
end_comment

begin_class
class|class
name|ServerAbstractQueryDeserializer
extends|extends
name|JavaDeserializer
block|{
specifier|private
name|EntityResolver
name|clientResolver
decl_stmt|;
name|ServerAbstractQueryDeserializer
parameter_list|(
name|Class
name|cl
parameter_list|,
name|EntityResolver
name|clientResolver
parameter_list|)
block|{
name|super
argument_list|(
name|cl
argument_list|)
expr_stmt|;
name|this
operator|.
name|clientResolver
operator|=
name|clientResolver
expr_stmt|;
block|}
specifier|public
name|Object
name|readMap
parameter_list|(
name|AbstractHessianInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|object
init|=
name|super
operator|.
name|readMap
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|AbstractQuery
condition|)
block|{
name|AbstractQuery
name|abstractClientQuery
init|=
operator|(
name|AbstractQuery
operator|)
name|object
decl_stmt|;
name|Object
name|root
init|=
name|abstractClientQuery
operator|.
name|getRoot
argument_list|()
decl_stmt|;
if|if
condition|(
name|root
operator|instanceof
name|Class
condition|)
block|{
name|ObjEntity
name|entity
init|=
name|clientResolver
operator|.
name|lookupObjEntity
argument_list|(
operator|(
name|Class
operator|)
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unmapped client class: "
operator|+
name|root
argument_list|)
throw|;
block|}
name|abstractClientQuery
operator|.
name|setRoot
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|object
return|;
block|}
block|}
end_class

end_unit

