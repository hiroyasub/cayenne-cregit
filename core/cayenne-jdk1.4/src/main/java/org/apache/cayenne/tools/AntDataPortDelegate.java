begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataPort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataPortDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_comment
comment|/**  * DataPortDelegate implementation that works in the context of Ant DataPortTask task  * execution, performing entity filtering and logging functions.  *   * @author Andrus Adamchik  * @since 1.2: Prior to 1.2 DataPort classes were a part of cayenne-examples package.  */
end_comment

begin_class
class|class
name|AntDataPortDelegate
implements|implements
name|DataPortDelegate
block|{
specifier|protected
name|Task
name|parentTask
decl_stmt|;
specifier|protected
name|Pattern
index|[]
name|mapFilters
decl_stmt|;
specifier|protected
name|long
name|timestamp
decl_stmt|;
specifier|protected
name|DbEntity
name|lastEntity
decl_stmt|;
specifier|protected
name|NamePatternMatcher
name|namePatternMatcher
decl_stmt|;
comment|// exists for testing and such
name|AntDataPortDelegate
parameter_list|()
block|{
name|mapFilters
operator|=
operator|new
name|Pattern
index|[]
block|{}
expr_stmt|;
block|}
name|AntDataPortDelegate
parameter_list|(
name|Task
name|parentTask
parameter_list|,
name|String
name|mapsPattern
parameter_list|,
name|String
name|includeEntitiesPattern
parameter_list|,
name|String
name|excludeEntitiesPattern
parameter_list|)
block|{
name|this
operator|.
name|parentTask
operator|=
name|parentTask
expr_stmt|;
name|this
operator|.
name|namePatternMatcher
operator|=
operator|new
name|NamePatternMatcher
argument_list|(
operator|new
name|AntTaskLogger
argument_list|(
name|parentTask
argument_list|)
argument_list|,
name|includeEntitiesPattern
argument_list|,
name|excludeEntitiesPattern
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapFilters
operator|=
name|namePatternMatcher
operator|.
name|createPatterns
argument_list|(
name|mapsPattern
argument_list|)
expr_stmt|;
block|}
comment|/**      * Applies preconfigured list of filters to the list, removing entities that do not      * pass the filter.      */
specifier|protected
name|List
name|filterEntities
parameter_list|(
name|List
name|entities
parameter_list|)
block|{
if|if
condition|(
name|entities
operator|==
literal|null
operator|||
name|entities
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|entities
return|;
block|}
name|Iterator
name|it
init|=
name|entities
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DbEntity
name|entity
init|=
operator|(
name|DbEntity
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|passedDataMapFilter
argument_list|(
name|entity
operator|.
name|getDataMap
argument_list|()
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
block|}
name|namePatternMatcher
operator|.
name|filter
argument_list|(
name|entities
argument_list|)
expr_stmt|;
return|return
name|entities
return|;
block|}
comment|/**      * Returns true if the DataMap passes a set of DataMap filters or if there is no      * DataMap filters.      */
specifier|protected
name|boolean
name|passedDataMapFilter
parameter_list|(
name|DataMap
name|map
parameter_list|)
block|{
if|if
condition|(
name|mapFilters
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|mapName
init|=
name|map
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapFilters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|mapFilters
index|[
name|i
index|]
operator|.
name|matcher
argument_list|(
name|mapName
argument_list|)
operator|.
name|find
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Implements the delegate method to filter the list of entities applying filtering      * rules encapsulated by this object.      */
specifier|public
name|List
name|willPortEntities
parameter_list|(
name|DataPort
name|portTool
parameter_list|,
name|List
name|entities
parameter_list|)
block|{
return|return
name|filterEntities
argument_list|(
name|entities
argument_list|)
return|;
block|}
comment|/**      * Logs entity porting event using Ant logger.      */
specifier|public
name|Query
name|willPortEntity
parameter_list|(
name|DataPort
name|portTool
parameter_list|,
name|DbEntity
name|entity
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
name|parentTask
operator|.
name|log
argument_list|(
literal|"Porting '"
operator|+
name|entity
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|lastEntity
operator|=
name|entity
expr_stmt|;
name|timestamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
return|return
name|query
return|;
block|}
specifier|public
name|void
name|didPortEntity
parameter_list|(
name|DataPort
name|portTool
parameter_list|,
name|DbEntity
name|entity
parameter_list|,
name|int
name|rowCount
parameter_list|)
block|{
name|String
name|timestampLabel
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|lastEntity
operator|==
name|entity
condition|)
block|{
name|timestampLabel
operator|=
literal|" in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|timestamp
operator|)
operator|+
literal|" ms."
expr_stmt|;
block|}
name|String
name|label
init|=
operator|(
name|rowCount
operator|==
literal|1
operator|)
condition|?
literal|"1 row transferred"
else|:
name|rowCount
operator|+
literal|" rows transferred"
decl_stmt|;
name|parentTask
operator|.
name|log
argument_list|(
literal|"Done porting "
operator|+
name|entity
operator|.
name|getName
argument_list|()
operator|+
literal|", "
operator|+
name|label
operator|+
name|timestampLabel
argument_list|,
name|Project
operator|.
name|MSG_VERBOSE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
name|willCleanData
parameter_list|(
name|DataPort
name|portTool
parameter_list|,
name|List
name|entities
parameter_list|)
block|{
return|return
name|filterEntities
argument_list|(
name|entities
argument_list|)
return|;
block|}
specifier|public
name|Query
name|willCleanData
parameter_list|(
name|DataPort
name|portTool
parameter_list|,
name|DbEntity
name|entity
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
name|parentTask
operator|.
name|log
argument_list|(
literal|"Deleting "
operator|+
name|entity
operator|.
name|getName
argument_list|()
argument_list|,
name|Project
operator|.
name|MSG_VERBOSE
argument_list|)
expr_stmt|;
name|lastEntity
operator|=
name|entity
expr_stmt|;
name|timestamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
return|return
name|query
return|;
block|}
specifier|public
name|void
name|didCleanData
parameter_list|(
name|DataPort
name|portTool
parameter_list|,
name|DbEntity
name|entity
parameter_list|,
name|int
name|rowCount
parameter_list|)
block|{
name|String
name|timestampLabel
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|lastEntity
operator|==
name|entity
condition|)
block|{
name|timestampLabel
operator|=
literal|" in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|timestamp
operator|)
operator|+
literal|" ms."
expr_stmt|;
block|}
name|String
name|label
init|=
operator|(
name|rowCount
operator|==
literal|1
operator|)
condition|?
literal|"1 row deleted"
else|:
name|rowCount
operator|+
literal|" rows deleted"
decl_stmt|;
name|parentTask
operator|.
name|log
argument_list|(
literal|"Done deleting "
operator|+
name|entity
operator|.
name|getName
argument_list|()
operator|+
literal|", "
operator|+
name|label
operator|+
name|timestampLabel
argument_list|,
name|Project
operator|.
name|MSG_VERBOSE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

