begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|validator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|ProjectPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|ObjAttributeValidator
extends|extends
name|TreeNodeValidator
block|{
comment|/**      * Constructor for ObjAttributeValidator.      */
specifier|public
name|ObjAttributeValidator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|validateObject
parameter_list|(
name|ProjectPath
name|path
parameter_list|,
name|Validator
name|validator
parameter_list|)
block|{
name|ObjAttribute
name|attribute
init|=
operator|(
name|ObjAttribute
operator|)
name|path
operator|.
name|getObject
argument_list|()
decl_stmt|;
comment|// skip validation of inherited attributes
if|if
condition|(
name|path
operator|.
name|getObjectParent
argument_list|()
operator|!=
literal|null
operator|&&
name|path
operator|.
name|getObjectParent
argument_list|()
operator|!=
name|attribute
operator|.
name|getEntity
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Must have name
if|if
condition|(
name|Util
operator|.
name|isEmptyString
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|validator
operator|.
name|registerError
argument_list|(
literal|"Unnamed ObjAttribute."
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MappingNamesHelper
name|helper
init|=
name|MappingNamesHelper
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|invalidChars
init|=
name|helper
operator|.
name|invalidCharsInObjPathComponent
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|invalidChars
operator|!=
literal|null
condition|)
block|{
name|validator
operator|.
name|registerWarning
argument_list|(
literal|"ObjAttribute name contains invalid characters: "
operator|+
name|invalidChars
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|helper
operator|.
name|invalidDataObjectProperty
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|validator
operator|.
name|registerWarning
argument_list|(
literal|"ObjAttribute name is invalid: "
operator|+
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|// all attributes must have type
if|if
condition|(
name|Util
operator|.
name|isEmptyString
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|validator
operator|.
name|registerWarning
argument_list|(
literal|"ObjAttribute has no type."
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attribute
operator|.
name|getDbAttribute
argument_list|()
operator|==
literal|null
condition|)
block|{
name|validator
operator|.
name|registerWarning
argument_list|(
literal|"ObjAttribute has no DbAttribute mapping."
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
comment|// can't support generated meaningful attributes for now; besides they don't make
comment|// sense.
if|else if
condition|(
name|attribute
operator|.
name|getDbAttribute
argument_list|()
operator|.
name|isPrimaryKey
argument_list|()
operator|&&
name|attribute
operator|.
name|getDbAttribute
argument_list|()
operator|.
name|isGenerated
argument_list|()
condition|)
block|{
name|validator
operator|.
name|registerWarning
argument_list|(
literal|"ObjAttribute is mapped to a generated PK: "
operator|+
name|attribute
operator|.
name|getDbAttributeName
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

