begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dataview
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_class
specifier|public
class|class
name|BasicQueryBuilder
block|{
specifier|private
name|ObjEntityView
name|queryTarget
decl_stmt|;
specifier|private
name|List
name|conditions
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|public
name|BasicQueryBuilder
parameter_list|(
name|ObjEntityView
name|queryTarget
parameter_list|)
block|{
name|this
operator|.
name|queryTarget
operator|=
name|queryTarget
expr_stmt|;
block|}
specifier|public
name|void
name|addEqual
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|ObjEntityViewField
name|field
init|=
name|queryTarget
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|String
name|path
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|getCalcType
argument_list|()
operator|.
name|getValue
argument_list|()
operator|==
name|CalcTypeEnum
operator|.
name|NO_CALC_TYPE_VALUE
condition|)
block|{
name|path
operator|=
name|field
operator|.
name|getObjAttribute
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|field
operator|.
name|isLookup
argument_list|()
condition|)
block|{
name|path
operator|=
name|field
operator|.
name|getObjRelationship
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|Object
name|rawValue
init|=
name|field
operator|.
name|toRawValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|conditions
operator|.
name|add
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|path
argument_list|,
name|rawValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addRange
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Object
name|start
parameter_list|,
name|Object
name|end
parameter_list|)
block|{
name|ObjEntityViewField
name|field
init|=
name|queryTarget
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|String
name|path
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|getCalcType
argument_list|()
operator|.
name|getValue
argument_list|()
operator|==
name|CalcTypeEnum
operator|.
name|NO_CALC_TYPE_VALUE
condition|)
block|{
name|path
operator|=
name|field
operator|.
name|getObjAttribute
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|field
operator|.
name|isLookup
argument_list|()
condition|)
block|{
name|path
operator|=
name|field
operator|.
name|getObjRelationship
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|Object
name|rawStart
init|=
name|field
operator|.
name|toRawValue
argument_list|(
name|start
argument_list|)
decl_stmt|;
name|Object
name|rawEnd
init|=
name|field
operator|.
name|toRawValue
argument_list|(
name|end
argument_list|)
decl_stmt|;
name|Expression
name|expr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rawStart
operator|!=
literal|null
operator|&&
name|rawEnd
operator|!=
literal|null
condition|)
name|expr
operator|=
name|ExpressionFactory
operator|.
name|betweenExp
argument_list|(
name|path
argument_list|,
name|rawStart
argument_list|,
name|rawEnd
argument_list|)
expr_stmt|;
if|else if
condition|(
name|rawStart
operator|!=
literal|null
condition|)
name|expr
operator|=
name|ExpressionFactory
operator|.
name|greaterOrEqualExp
argument_list|(
name|path
argument_list|,
name|rawStart
argument_list|)
expr_stmt|;
if|else if
condition|(
name|rawEnd
operator|!=
literal|null
condition|)
name|expr
operator|=
name|ExpressionFactory
operator|.
name|lessOrEqualExp
argument_list|(
name|path
argument_list|,
name|rawEnd
argument_list|)
expr_stmt|;
if|if
condition|(
name|expr
operator|!=
literal|null
condition|)
name|conditions
operator|.
name|add
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addLike
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|caseSensetive
parameter_list|)
block|{
name|ObjEntityViewField
name|field
init|=
name|queryTarget
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|String
name|path
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|getCalcType
argument_list|()
operator|.
name|getValue
argument_list|()
operator|==
name|CalcTypeEnum
operator|.
name|NO_CALC_TYPE_VALUE
condition|)
block|{
name|path
operator|=
name|field
operator|.
name|getObjAttribute
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|field
operator|.
name|isLookup
argument_list|()
condition|)
block|{
name|path
operator|=
name|field
operator|.
name|getObjRelationship
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|Object
name|rawValue
init|=
name|field
operator|.
name|toRawValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|String
name|pattern
init|=
operator|(
name|rawValue
operator|!=
literal|null
condition|?
name|rawValue
operator|.
name|toString
argument_list|()
else|:
literal|""
operator|)
decl_stmt|;
name|Expression
name|expr
init|=
operator|(
name|caseSensetive
condition|?
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
name|path
argument_list|,
name|pattern
argument_list|)
else|:
name|ExpressionFactory
operator|.
name|likeIgnoreCaseExp
argument_list|(
name|path
argument_list|,
name|pattern
argument_list|)
operator|)
decl_stmt|;
name|conditions
operator|.
name|add
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SelectQuery
name|getSelectQuery
parameter_list|()
block|{
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|queryTarget
operator|.
name|getObjEntity
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|conditions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Expression
name|qualifier
init|=
name|ExpressionFactory
operator|.
name|joinExp
argument_list|(
name|Expression
operator|.
name|AND
argument_list|,
name|conditions
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
block|}
end_class

end_unit

