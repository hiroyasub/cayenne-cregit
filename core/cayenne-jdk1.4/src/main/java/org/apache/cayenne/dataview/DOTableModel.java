begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dataview
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|AbstractTableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataObject
import|;
end_import

begin_comment
comment|/**  * A Swing TableModel wrapping {@link DataObjectList}.  *   * @since 1.1  */
end_comment

begin_class
specifier|public
class|class
name|DOTableModel
extends|extends
name|AbstractTableModel
implements|implements
name|DataObjectChangeListener
block|{
specifier|private
name|ObjEntityView
name|view
decl_stmt|;
specifier|private
name|int
index|[]
name|columnMap
decl_stmt|;
specifier|private
name|String
index|[]
name|columnNames
decl_stmt|;
specifier|private
name|boolean
index|[]
name|editableColumns
decl_stmt|;
specifier|private
name|Class
index|[]
name|columnClasses
decl_stmt|;
specifier|private
name|int
name|columnCount
init|=
literal|0
decl_stmt|;
specifier|private
name|DataObjectList
name|dataObjects
init|=
operator|new
name|DataObjectList
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|DOTableModel
parameter_list|()
block|{
name|updateModel
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ObjEntityView
name|getView
parameter_list|()
block|{
return|return
name|view
return|;
block|}
specifier|public
name|void
name|setView
parameter_list|(
name|ObjEntityView
name|view
parameter_list|)
block|{
name|this
operator|.
name|view
operator|=
name|view
expr_stmt|;
name|updateModel
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|updateModel
parameter_list|()
block|{
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|int
name|fieldCount
init|=
name|view
operator|.
name|getFieldCount
argument_list|()
decl_stmt|;
name|columnMap
operator|=
operator|new
name|int
index|[
name|fieldCount
index|]
expr_stmt|;
name|columnNames
operator|=
operator|new
name|String
index|[
name|fieldCount
index|]
expr_stmt|;
name|editableColumns
operator|=
operator|new
name|boolean
index|[
name|fieldCount
index|]
expr_stmt|;
name|columnClasses
operator|=
operator|new
name|Class
index|[
name|fieldCount
index|]
expr_stmt|;
name|columnCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|ObjEntityViewField
name|field
init|=
name|view
operator|.
name|getField
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|isVisible
argument_list|()
condition|)
continue|continue;
name|columnMap
index|[
name|columnCount
index|]
operator|=
name|i
expr_stmt|;
name|columnNames
index|[
name|columnCount
index|]
operator|=
name|field
operator|.
name|getCaption
argument_list|()
expr_stmt|;
name|editableColumns
index|[
name|columnCount
index|]
operator|=
name|field
operator|.
name|isEditable
argument_list|()
expr_stmt|;
name|columnClasses
index|[
name|columnCount
index|]
operator|=
name|field
operator|.
name|getJavaClass
argument_list|()
expr_stmt|;
if|if
condition|(
name|columnClasses
index|[
name|columnCount
index|]
operator|==
literal|null
condition|)
name|columnClasses
index|[
name|columnCount
index|]
operator|=
name|String
operator|.
name|class
expr_stmt|;
name|columnCount
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|columnMap
operator|=
operator|new
name|int
index|[
literal|0
index|]
expr_stmt|;
name|columnNames
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
name|editableColumns
operator|=
operator|new
name|boolean
index|[
literal|0
index|]
expr_stmt|;
name|columnClasses
operator|=
operator|new
name|Class
index|[
literal|0
index|]
expr_stmt|;
name|columnCount
operator|=
literal|0
expr_stmt|;
name|dataObjects
operator|=
operator|new
name|DataObjectList
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|fireTableStructureChanged
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
name|columnCount
return|;
block|}
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
return|return
name|editableColumns
index|[
name|columnIndex
index|]
return|;
block|}
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|column
parameter_list|)
block|{
return|return
name|columnNames
index|[
name|column
index|]
return|;
block|}
specifier|public
name|Class
name|getColumnClass
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
return|return
name|columnClasses
index|[
name|columnIndex
index|]
return|;
block|}
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
name|ObjEntityViewField
name|field
init|=
name|getField
argument_list|(
name|columnIndex
argument_list|)
decl_stmt|;
name|DataObject
name|obj
init|=
name|getDataObject
argument_list|(
name|rowIndex
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|field
operator|.
name|getValue
argument_list|(
name|obj
argument_list|)
decl_stmt|;
return|return
name|value
return|;
block|}
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
return|return
name|dataObjects
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|setValueAt
parameter_list|(
name|Object
name|value
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
name|ObjEntityViewField
name|field
init|=
name|getField
argument_list|(
name|columnIndex
argument_list|)
decl_stmt|;
name|DataObject
name|obj
init|=
name|getDataObject
argument_list|(
name|rowIndex
argument_list|)
decl_stmt|;
name|field
operator|.
name|setValue
argument_list|(
name|obj
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DataObject
name|getDataObject
parameter_list|(
name|int
name|rowIndex
parameter_list|)
block|{
return|return
name|dataObjects
operator|.
name|getDataObject
argument_list|(
name|rowIndex
argument_list|)
return|;
block|}
specifier|public
name|ObjEntityViewField
name|getField
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
return|return
name|view
operator|.
name|getField
argument_list|(
name|columnMap
index|[
name|columnIndex
index|]
argument_list|)
return|;
block|}
specifier|public
name|DataObjectList
name|getDataObjects
parameter_list|()
block|{
return|return
name|dataObjects
return|;
block|}
specifier|public
name|void
name|setDataObjects
parameter_list|(
name|DataObjectList
name|dataObjects
parameter_list|)
block|{
name|this
operator|.
name|dataObjects
operator|.
name|removeDataObjectChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataObjects
operator|=
name|dataObjects
expr_stmt|;
name|this
operator|.
name|dataObjects
operator|.
name|addDataObjectChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|fireTableDataChanged
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|dataChanged
parameter_list|(
name|DataObjectChangeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isMultiObjectChange
argument_list|()
condition|)
block|{
name|fireTableDataChanged
argument_list|()
expr_stmt|;
return|return;
block|}
name|int
name|affectedRow
init|=
name|event
operator|.
name|getAffectedDataObjectIndex
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|event
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|DataObjectChangeEvent
operator|.
name|DATAOBJECT_ADDED
case|:
name|fireTableRowsInserted
argument_list|(
name|affectedRow
argument_list|,
name|affectedRow
argument_list|)
expr_stmt|;
break|break;
case|case
name|DataObjectChangeEvent
operator|.
name|DATAOBJECT_REMOVED
case|:
name|fireTableRowsDeleted
argument_list|(
name|affectedRow
argument_list|,
name|affectedRow
argument_list|)
expr_stmt|;
break|break;
case|case
name|DataObjectChangeEvent
operator|.
name|DATAOBJECT_CHANGED
case|:
name|fireTableRowsUpdated
argument_list|(
name|affectedRow
argument_list|,
name|affectedRow
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fireTableDataChanged
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

