begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|art
operator|.
name|oneway
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|art
operator|.
name|oneway
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|OneWayMappingCase
import|;
end_import

begin_comment
comment|/**  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|OneWayOneToManyTest
extends|extends
name|OneWayMappingCase
block|{
specifier|protected
name|DataContext
name|ctxt
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteTestData
argument_list|()
expr_stmt|;
name|ctxt
operator|=
name|getDomain
argument_list|()
operator|.
name|createDataContext
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testReadList
parameter_list|()
throws|throws
name|Exception
block|{
name|createTestData
argument_list|(
literal|"testReadList"
argument_list|)
expr_stmt|;
name|Artist
name|a2
init|=
name|fetchArtist
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|a2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|a2
operator|.
name|getPaintingArray
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Painting
name|newPainting
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Painting
name|p1
init|=
operator|(
name|Painting
operator|)
name|ctxt
operator|.
name|newObject
argument_list|(
literal|"Painting"
argument_list|)
decl_stmt|;
name|p1
operator|.
name|setPaintingTitle
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|p1
return|;
block|}
specifier|protected
name|Artist
name|newArtist
parameter_list|()
block|{
name|Artist
name|a1
init|=
operator|(
name|Artist
operator|)
name|ctxt
operator|.
name|newObject
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
name|a1
operator|.
name|setArtistName
argument_list|(
name|CayenneDOTestBase
operator|.
name|artistName
argument_list|)
expr_stmt|;
return|return
name|a1
return|;
block|}
specifier|protected
name|Artist
name|fetchArtist
parameter_list|()
block|{
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
literal|"Artist"
argument_list|,
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"artistName"
argument_list|,
name|CayenneDOTestBase
operator|.
name|artistName
argument_list|)
argument_list|)
decl_stmt|;
name|List
name|ats
init|=
name|ctxt
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
return|return
operator|(
name|ats
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|?
operator|(
name|Artist
operator|)
name|ats
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|null
return|;
block|}
block|}
end_class

end_unit

