begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|art
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|MockQueryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|NamedQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_class
specifier|public
class|class
name|DataContextNamedQueryCachingTest
extends|extends
name|CayenneCase
block|{
specifier|public
name|void
name|testDataContextSharedCache
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteTestData
argument_list|()
expr_stmt|;
name|createTestData
argument_list|(
literal|"prepare"
argument_list|)
expr_stmt|;
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|QueryMetadata
name|cacheKey
init|=
operator|new
name|MockQueryMetadata
argument_list|()
block|{
specifier|public
name|String
name|getCacheKey
parameter_list|()
block|{
return|return
literal|"ParameterizedQueryWithSharedCache"
return|;
block|}
block|}
decl_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getQueryCache
argument_list|()
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|performQuery
argument_list|(
literal|"ParameterizedQueryWithSharedCache"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Object
name|cached
init|=
name|getDomain
argument_list|()
operator|.
name|getQueryCache
argument_list|()
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
operator|(
name|Collection
operator|)
name|cached
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed to cache results of a NamedQuery that points to a caching query"
argument_list|,
name|cached
argument_list|)
expr_stmt|;
comment|// get from cache
name|context
operator|.
name|performQuery
argument_list|(
literal|"ParameterizedQueryWithSharedCache"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|cached
argument_list|,
name|getDomain
argument_list|()
operator|.
name|getQueryCache
argument_list|()
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete one record
name|int
index|[]
name|counts
init|=
name|context
operator|.
name|performNonSelectingQuery
argument_list|(
operator|new
name|SQLTemplate
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
literal|"INSERT INTO ARTIST (ARTIST_ID, ARTIST_NAME) VALUES (5, 'XX')"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// refresh
name|List
name|objects1
init|=
name|context
operator|.
name|performQuery
argument_list|(
literal|"ParameterizedQueryWithSharedCache"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Object
name|cached1
init|=
name|getDomain
argument_list|()
operator|.
name|getQueryCache
argument_list|()
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed to cache results of refreshing NamedQuery that points to a caching query"
argument_list|,
name|cached1
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
literal|"Failed to refresh"
argument_list|,
name|cached
argument_list|,
name|cached1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
operator|(
operator|(
name|Collection
operator|)
name|cached1
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|objects1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDataContextLocalCache
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteTestData
argument_list|()
expr_stmt|;
name|createTestData
argument_list|(
literal|"prepare"
argument_list|)
expr_stmt|;
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|QueryMetadata
name|cacheKey
init|=
operator|new
name|MockQueryMetadata
argument_list|()
block|{
specifier|public
name|String
name|getCacheKey
parameter_list|()
block|{
return|return
literal|"ParameterizedQueryWithLocalCache"
return|;
block|}
block|}
decl_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getQueryCache
argument_list|()
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|performQuery
argument_list|(
literal|"ParameterizedQueryWithLocalCache"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Object
name|cached
init|=
name|context
operator|.
name|getQueryCache
argument_list|()
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed to cache results of a NamedQuery that points to a caching query"
argument_list|,
name|cached
argument_list|)
expr_stmt|;
comment|// get from cache
name|context
operator|.
name|performQuery
argument_list|(
literal|"ParameterizedQueryWithLocalCache"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|cached
argument_list|,
name|context
operator|.
name|getQueryCache
argument_list|()
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// refresh
name|List
name|fetchedCached1
init|=
name|context
operator|.
name|performQuery
argument_list|(
literal|"ParameterizedQueryWithLocalCache"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Object
name|cached1
init|=
name|context
operator|.
name|getQueryCache
argument_list|()
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed to cache results of refreshing NamedQuery that points to a caching query"
argument_list|,
name|cached1
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
literal|"Failed to refresh"
argument_list|,
name|cached
argument_list|,
name|cached1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|cached1
argument_list|,
name|fetchedCached1
argument_list|)
expr_stmt|;
name|List
name|fetchedCached2
init|=
name|context
operator|.
name|performQuery
argument_list|(
literal|"ParameterizedQueryWithLocalCache"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|fetchedCached1
argument_list|,
name|fetchedCached2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSharedCache
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteTestData
argument_list|()
expr_stmt|;
name|createTestData
argument_list|(
literal|"prepare"
argument_list|)
expr_stmt|;
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|NamedQuery
name|q1
init|=
operator|new
name|NamedQuery
argument_list|(
literal|"ParameterizedQueryWithSharedCache"
argument_list|)
decl_stmt|;
name|QueryMetadata
name|cacheKey
init|=
name|q1
operator|.
name|getMetaData
argument_list|(
name|context
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getQueryCache
argument_list|()
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|performQuery
argument_list|(
name|q1
argument_list|)
expr_stmt|;
name|Object
name|cached
init|=
name|getDomain
argument_list|()
operator|.
name|getQueryCache
argument_list|()
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed to cache results of a NamedQuery that points to a caching query"
argument_list|,
name|cached
argument_list|)
expr_stmt|;
comment|// get from cache
name|context
operator|.
name|performQuery
argument_list|(
name|q1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|cached
argument_list|,
name|getDomain
argument_list|()
operator|.
name|getQueryCache
argument_list|()
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// refresh
name|q1
operator|.
name|setForceNoCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|performQuery
argument_list|(
name|q1
argument_list|)
expr_stmt|;
name|Object
name|cached1
init|=
name|getDomain
argument_list|()
operator|.
name|getQueryCache
argument_list|()
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed to cache results of refreshing NamedQuery that points to a caching query"
argument_list|,
name|cached1
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
literal|"Failed to refresh"
argument_list|,
name|cached
argument_list|,
name|cached1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLocalCache
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteTestData
argument_list|()
expr_stmt|;
name|createTestData
argument_list|(
literal|"prepare"
argument_list|)
expr_stmt|;
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|NamedQuery
name|q1
init|=
operator|new
name|NamedQuery
argument_list|(
literal|"ParameterizedQueryWithLocalCache"
argument_list|)
decl_stmt|;
name|QueryMetadata
name|cacheKey
init|=
name|q1
operator|.
name|getMetaData
argument_list|(
name|context
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getQueryCache
argument_list|()
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|performQuery
argument_list|(
name|q1
argument_list|)
expr_stmt|;
name|Object
name|cached
init|=
name|context
operator|.
name|getQueryCache
argument_list|()
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed to cache results of a NamedQuery that points to a caching query"
argument_list|,
name|cached
argument_list|)
expr_stmt|;
comment|// get from cache
name|context
operator|.
name|performQuery
argument_list|(
name|q1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|cached
argument_list|,
name|context
operator|.
name|getQueryCache
argument_list|()
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// refresh
name|q1
operator|.
name|setForceNoCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|performQuery
argument_list|(
name|q1
argument_list|)
expr_stmt|;
name|Object
name|cached1
init|=
name|context
operator|.
name|getQueryCache
argument_list|()
operator|.
name|get
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed to cache results of refreshing NamedQuery that points to a caching query"
argument_list|,
name|cached1
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
literal|"Failed to refresh"
argument_list|,
name|cached
argument_list|,
name|cached1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLocalCacheWithParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteTestData
argument_list|()
expr_stmt|;
name|createTestData
argument_list|(
literal|"prepare"
argument_list|)
expr_stmt|;
name|NamedQuery
name|q1
init|=
operator|new
name|NamedQuery
argument_list|(
literal|"ParameterizedQueryWithLocalCache"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"name"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"AA%"
block|}
argument_list|)
decl_stmt|;
name|DataContext
name|context
init|=
name|createDataContext
argument_list|()
decl_stmt|;
name|List
name|objects1
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|q1
argument_list|)
decl_stmt|;
name|NamedQuery
name|q2
init|=
operator|new
name|NamedQuery
argument_list|(
literal|"ParameterizedQueryWithLocalCache"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"name"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"BB%"
block|}
argument_list|)
decl_stmt|;
name|List
name|objects2
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|q2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Incorrect results retrieved from cache - "
operator|+
literal|"changed parameter set warrants a different cache key"
argument_list|,
name|objects1
operator|.
name|equals
argument_list|(
name|objects2
argument_list|)
argument_list|)
expr_stmt|;
name|NamedQuery
name|q3
init|=
operator|new
name|NamedQuery
argument_list|(
literal|"ParameterizedQueryWithLocalCache"
argument_list|)
decl_stmt|;
name|List
name|objects3
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|q3
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Incorrect results retrieved from cache - "
operator|+
literal|"changed parameter set warrants a different cache key"
argument_list|,
name|objects1
operator|.
name|equals
argument_list|(
name|objects3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Incorrect results retrieved from cache - "
operator|+
literal|"changed parameter set warrants a different cache key"
argument_list|,
name|objects2
operator|.
name|equals
argument_list|(
name|objects3
argument_list|)
argument_list|)
expr_stmt|;
name|blockQueries
argument_list|()
expr_stmt|;
try|try
block|{
comment|// now rerun all queries and see that they are hitting the right cache...
name|List
name|objects11
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|q1
argument_list|)
decl_stmt|;
name|List
name|objects21
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|q2
argument_list|)
decl_stmt|;
name|List
name|objects31
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|q3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|objects1
argument_list|,
name|objects11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|objects2
argument_list|,
name|objects21
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|objects3
argument_list|,
name|objects31
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|unblockQueries
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

