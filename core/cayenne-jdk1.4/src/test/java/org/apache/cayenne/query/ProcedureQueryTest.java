begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|ColumnDescriptor
import|;
end_import

begin_comment
comment|/**  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|ProcedureQueryTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testCreateQuery
parameter_list|()
block|{
name|ProcedureQuery
name|template
init|=
operator|new
name|ProcedureQuery
argument_list|()
decl_stmt|;
name|Query
name|clone
init|=
name|template
operator|.
name|createQuery
argument_list|(
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|clone
operator|instanceof
name|ProcedureQuery
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|template
argument_list|,
name|clone
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCreateQueryWithParameters
parameter_list|()
block|{
name|Map
name|params
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|ProcedureQuery
name|template
init|=
operator|new
name|ProcedureQuery
argument_list|()
decl_stmt|;
name|ProcedureQuery
name|clone
init|=
operator|(
name|ProcedureQuery
operator|)
name|template
operator|.
name|createQuery
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|params
argument_list|,
name|clone
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testResultEntityName
parameter_list|()
block|{
name|ProcedureQuery
name|query
init|=
operator|new
name|ProcedureQuery
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|query
operator|.
name|getResultEntityName
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResultEntityName
argument_list|(
literal|"abc.AAAA"
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"abc.AAAA"
argument_list|,
name|query
operator|.
name|getResultEntityName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testResultDescriptors
parameter_list|()
block|{
name|ProcedureQuery
name|query
init|=
operator|new
name|ProcedureQuery
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|query
operator|.
name|getResultDescriptors
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|query
operator|.
name|getResultDescriptors
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnDescriptor
index|[]
name|descriptor
init|=
operator|new
name|ColumnDescriptor
index|[
literal|5
index|]
decl_stmt|;
name|query
operator|.
name|addResultDescriptor
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|query
operator|.
name|getResultDescriptors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|query
operator|.
name|getResultDescriptors
argument_list|()
operator|.
name|contains
argument_list|(
name|descriptor
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|removeResultDescriptor
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|query
operator|.
name|getResultDescriptors
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|query
operator|.
name|getResultDescriptors
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

