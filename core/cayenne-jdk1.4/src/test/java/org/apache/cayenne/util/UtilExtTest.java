begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneException
import|;
end_import

begin_class
specifier|public
class|class
name|UtilExtTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testPackagePath1
parameter_list|()
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
name|String
name|expectedPath
init|=
literal|"org/apache/cayenne/util"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|Util
operator|.
name|getPackagePath
argument_list|(
name|UtilExtTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPackagePath2
parameter_list|()
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
comment|// inner class
class|class
name|TmpTest
extends|extends
name|Object
block|{ 		}
name|String
name|expectedPath
init|=
literal|"org/apache/cayenne/util"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|Util
operator|.
name|getPackagePath
argument_list|(
name|TmpTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPackagePath3
parameter_list|()
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|Util
operator|.
name|getPackagePath
argument_list|(
literal|"ClassWithNoPackage"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIsEmptyString1
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|Util
operator|.
name|isEmptyString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIsEmptyString2
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|Util
operator|.
name|isEmptyString
argument_list|(
literal|"  "
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIsEmptyString3
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|Util
operator|.
name|isEmptyString
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBackslashFix
parameter_list|()
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
name|String
name|strBefore
init|=
literal|"abcd\\12345\\"
decl_stmt|;
name|String
name|strAfter
init|=
literal|"abcd/12345/"
decl_stmt|;
name|assertEquals
argument_list|(
name|strAfter
argument_list|,
name|Util
operator|.
name|substBackslashes
argument_list|(
name|strBefore
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNullSafeEquals
parameter_list|()
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
comment|// need a special subclass of Object to make "clone" method public
class|class
name|CloneableObject
implements|implements
name|Cloneable
block|{
specifier|public
name|Object
name|clone
parameter_list|()
throws|throws
name|CloneNotSupportedException
block|{
return|return
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|// for the purpose of this test
comment|// all objects of this class considered equal
comment|// (since they carry no state)
return|return
name|obj
operator|.
name|getClass
argument_list|()
operator|==
name|this
operator|.
name|getClass
argument_list|()
return|;
block|}
block|}
name|CloneableObject
name|o1
init|=
operator|new
name|CloneableObject
argument_list|()
decl_stmt|;
name|Object
name|o2
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|o3
init|=
name|o1
operator|.
name|clone
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|o3
operator|.
name|equals
argument_list|(
name|o1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|o1
argument_list|,
name|o1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|o1
argument_list|,
name|o3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|o1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
literal|null
argument_list|,
name|o1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testExtractFileExtension1
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fullName
init|=
literal|"n.ext"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ext"
argument_list|,
name|Util
operator|.
name|extractFileExtension
argument_list|(
name|fullName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testExtractFileExtension2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fullName
init|=
literal|"n"
decl_stmt|;
name|assertNull
argument_list|(
name|Util
operator|.
name|extractFileExtension
argument_list|(
name|fullName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testExtractFileExtension3
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fullName
init|=
literal|".ext"
decl_stmt|;
name|assertNull
argument_list|(
name|Util
operator|.
name|extractFileExtension
argument_list|(
name|fullName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStripFileExtension1
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fullName
init|=
literal|"n.ext"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"n"
argument_list|,
name|Util
operator|.
name|stripFileExtension
argument_list|(
name|fullName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStripFileExtension2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fullName
init|=
literal|"n"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"n"
argument_list|,
name|Util
operator|.
name|stripFileExtension
argument_list|(
name|fullName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStripFileExtension3
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fullName
init|=
literal|".ext"
decl_stmt|;
name|assertEquals
argument_list|(
literal|".ext"
argument_list|,
name|Util
operator|.
name|stripFileExtension
argument_list|(
name|fullName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEncodeXmlAttribute1
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|unencoded
init|=
literal|"normalstring"
decl_stmt|;
name|assertEquals
argument_list|(
name|unencoded
argument_list|,
name|Util
operator|.
name|encodeXmlAttribute
argument_list|(
name|unencoded
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEncodeXmlAttribute2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|unencoded
init|=
literal|"<a>"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"&lt;a&gt;"
argument_list|,
name|Util
operator|.
name|encodeXmlAttribute
argument_list|(
name|unencoded
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEncodeXmlAttribute3
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|unencoded
init|=
literal|"a&b"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a&amp;b"
argument_list|,
name|Util
operator|.
name|encodeXmlAttribute
argument_list|(
name|unencoded
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUnwindException1
parameter_list|()
throws|throws
name|Exception
block|{
name|Throwable
name|e
init|=
operator|new
name|Throwable
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|e
argument_list|,
name|Util
operator|.
name|unwindException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUnwindException2
parameter_list|()
throws|throws
name|Exception
block|{
name|CayenneException
name|e
init|=
operator|new
name|CayenneException
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|e
argument_list|,
name|Util
operator|.
name|unwindException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUnwindException3
parameter_list|()
throws|throws
name|Exception
block|{
name|Throwable
name|root
init|=
operator|new
name|Throwable
argument_list|()
decl_stmt|;
name|CayenneException
name|e
init|=
operator|new
name|CayenneException
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|root
argument_list|,
name|Util
operator|.
name|unwindException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPrettyTrim1
parameter_list|()
throws|throws
name|Exception
block|{
comment|// size is too short, must throw
try|try
block|{
name|Util
operator|.
name|prettyTrim
argument_list|(
literal|"abc"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testPrettyTrim2
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"123"
argument_list|,
name|Util
operator|.
name|prettyTrim
argument_list|(
literal|"123"
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"123456"
argument_list|,
name|Util
operator|.
name|prettyTrim
argument_list|(
literal|"123456"
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1...67"
argument_list|,
name|Util
operator|.
name|prettyTrim
argument_list|(
literal|"1234567"
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1...78"
argument_list|,
name|Util
operator|.
name|prettyTrim
argument_list|(
literal|"12345678"
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

