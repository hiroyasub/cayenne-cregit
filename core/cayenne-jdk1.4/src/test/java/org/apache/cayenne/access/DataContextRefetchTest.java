begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|CayenneCase
import|;
end_import

begin_comment
comment|/**  * @author Andrus Adamchik  * @deprecated since 3.0  */
end_comment

begin_class
specifier|public
class|class
name|DataContextRefetchTest
extends|extends
name|CayenneCase
block|{
specifier|public
name|void
name|testRefetchTempId
parameter_list|()
block|{
name|MockDataNode
name|engine
init|=
name|MockDataNode
operator|.
name|interceptNode
argument_list|(
name|getDomain
argument_list|()
argument_list|,
name|getNode
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|DataContext
name|context
init|=
name|getDomain
argument_list|()
operator|.
name|createDataContext
argument_list|()
decl_stmt|;
name|ObjectId
name|tempID
init|=
operator|new
name|ObjectId
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
try|try
block|{
name|context
operator|.
name|refetchObject
argument_list|(
name|tempID
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Refetching temp ID must have generated an error."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|ex
parameter_list|)
block|{
comment|// expected ... but check that no queries were run
name|assertEquals
argument_list|(
literal|"Refetching temp id correctly failed, "
operator|+
literal|"but DataContext shouldn't have run a query"
argument_list|,
literal|0
argument_list|,
name|engine
operator|.
name|getRunCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|engine
operator|.
name|stopInterceptNode
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

