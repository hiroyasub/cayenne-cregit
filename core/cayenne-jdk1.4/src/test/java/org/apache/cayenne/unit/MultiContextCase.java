begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * Superclass of test cases requiring multiple DataContexts with   * the same parent DataDomain.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|MultiContextCase
extends|extends
name|CayenneCase
block|{
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|deleteTestData
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|fixSharedConfiguration
parameter_list|()
block|{
comment|// for context to deserialize properly,
comment|// Configuration singleton must have the right default domain
name|Configuration
name|config
init|=
name|Configuration
operator|.
name|getSharedConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|getDomain
argument_list|()
operator|!=
name|config
operator|.
name|getDomain
argument_list|()
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|getDomain
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|removeDomain
argument_list|(
name|config
operator|.
name|getDomain
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|addDomain
argument_list|(
name|getDomain
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Helper method to create a new DataContext with the ObjectStore      * state being the mirror of the given context. This is done by      * serializing/deserializing the DataContext.      */
specifier|protected
name|DataContext
name|mirrorDataContext
parameter_list|(
name|DataContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|fixSharedConfiguration
argument_list|()
expr_stmt|;
name|DataContext
name|mirror
init|=
operator|(
name|DataContext
operator|)
name|Util
operator|.
name|cloneViaSerialization
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|context
argument_list|,
name|mirror
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|context
operator|.
name|getObjectStore
argument_list|()
argument_list|,
name|mirror
operator|.
name|getObjectStore
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|isUsingSharedSnapshotCache
argument_list|()
condition|)
block|{
name|assertSame
argument_list|(
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
argument_list|,
name|mirror
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotSame
argument_list|(
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
argument_list|,
name|mirror
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|mirror
return|;
block|}
block|}
end_class

end_unit

