begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|web
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_comment
comment|/**  * A class that provides access to common Cayenne web configuration parameters retrieved  * either from a FilterConfig or a ServletConfig configuration.  *   * @since 3.1  */
end_comment

begin_class
specifier|public
class|class
name|WebConfiguration
block|{
specifier|static
specifier|final
name|String
name|CONFIGURATION_LOCATION_PARAMETER
init|=
literal|"configuration-location"
decl_stmt|;
specifier|static
specifier|final
name|String
name|EXTRA_MODULES_PARAMETER
init|=
literal|"extra-modules"
decl_stmt|;
specifier|private
name|FilterConfig
name|configuration
decl_stmt|;
specifier|public
name|WebConfiguration
parameter_list|(
specifier|final
name|ServletConfig
name|servletConfiguration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
operator|new
name|FilterConfig
argument_list|()
block|{
specifier|public
name|ServletContext
name|getServletContext
parameter_list|()
block|{
return|return
name|servletConfiguration
operator|.
name|getServletContext
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"all"
argument_list|)
specifier|public
name|Enumeration
name|getInitParameterNames
parameter_list|()
block|{
return|return
name|servletConfiguration
operator|.
name|getInitParameterNames
argument_list|()
return|;
block|}
specifier|public
name|String
name|getInitParameter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|servletConfiguration
operator|.
name|getInitParameter
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|String
name|getFilterName
parameter_list|()
block|{
return|return
name|servletConfiguration
operator|.
name|getServletName
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
specifier|public
name|WebConfiguration
parameter_list|(
name|FilterConfig
name|filterConfiguration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|filterConfiguration
expr_stmt|;
block|}
comment|/**      * Returns a non-null location of an XML Cayenne configuration, extracted from the      * filter or servlet configuration parameters.      */
specifier|public
name|String
name|getConfigurationLocation
parameter_list|()
block|{
name|String
name|configurationLocation
init|=
name|configuration
operator|.
name|getInitParameter
argument_list|(
name|CONFIGURATION_LOCATION_PARAMETER
argument_list|)
decl_stmt|;
if|if
condition|(
name|configurationLocation
operator|!=
literal|null
condition|)
block|{
return|return
name|configurationLocation
return|;
block|}
name|String
name|name
init|=
name|configuration
operator|.
name|getFilterName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|name
operator|.
name|endsWith
argument_list|(
literal|".xml"
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|+
literal|".xml"
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
comment|/**      * Creates and returns a collection of modules made of provided standard modules and      * extra custom modules specified via an optional "extra-modules" init parameter. The      * value of the parameter is expected to be a comma or space-separated list of class      * names, with each class implementing {@link Module} interface. Each custom module      * must have a no-arg constructor. If a module of this type is already in the modules      * collection, such module is skipped.      */
specifier|public
name|Collection
argument_list|<
name|Module
argument_list|>
name|createModules
parameter_list|(
name|Module
modifier|...
name|standardModules
parameter_list|)
throws|throws
name|ServletException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|existingModules
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Module
argument_list|>
name|modules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|standardModules
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Module
name|module
range|:
name|standardModules
control|)
block|{
name|modules
operator|.
name|add
argument_list|(
name|module
argument_list|)
expr_stmt|;
name|existingModules
operator|.
name|add
argument_list|(
name|module
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|extraModules
init|=
name|configuration
operator|.
name|getInitParameter
argument_list|(
name|EXTRA_MODULES_PARAMETER
argument_list|)
decl_stmt|;
if|if
condition|(
name|extraModules
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|toks
init|=
operator|new
name|StringTokenizer
argument_list|(
name|extraModules
argument_list|,
literal|", \n\r"
argument_list|)
decl_stmt|;
while|while
condition|(
name|toks
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|moduleName
init|=
name|toks
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|existingModules
operator|.
name|add
argument_list|(
name|moduleName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Module
name|module
decl_stmt|;
try|try
block|{
name|module
operator|=
operator|(
name|Module
operator|)
name|Util
operator|.
name|getJavaClass
argument_list|(
name|moduleName
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Error instantiating custom DI module '%s' by filter '%s': %s"
argument_list|,
name|moduleName
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ServletException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|modules
operator|.
name|add
argument_list|(
name|module
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|modules
return|;
block|}
comment|/**      * Returns a map of all init parameters from the underlying FilterConfig or      * ServletConfig object.      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameters
parameter_list|()
block|{
name|Enumeration
argument_list|<
name|?
argument_list|>
name|en
init|=
name|configuration
operator|.
name|getInitParameterNames
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|en
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|en
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|en
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|configuration
operator|.
name|getInitParameter
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|parameters
return|;
block|}
comment|/**      * Returns servlet or filter init parameters, excluding those recognized by      * WebConfiguration. Namely 'configuration-location' and 'extra-modules' parameters      * are removed from the returned map.      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getOtherParameters
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|parameters
operator|.
name|remove
argument_list|(
name|CONFIGURATION_LOCATION_PARAMETER
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|remove
argument_list|(
name|EXTRA_MODULES_PARAMETER
argument_list|)
expr_stmt|;
block|}
return|return
name|parameters
return|;
block|}
block|}
end_class

end_unit

