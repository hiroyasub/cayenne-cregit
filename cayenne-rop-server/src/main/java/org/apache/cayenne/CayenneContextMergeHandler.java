begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|ArcId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphChangeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ArcProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ToManyProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * An object that merges "backdoor" modifications of the object graph coming from the  * underlying DataChannel. When doing an update, CayenneContextMergeHandler blocks  * broadcasting of GraphManager events.  *   * @since 1.2  */
end_comment

begin_class
class|class
name|CayenneContextMergeHandler
implements|implements
name|GraphChangeHandler
implements|,
name|DataChannelListener
block|{
name|CayenneContext
name|context
decl_stmt|;
name|boolean
name|active
decl_stmt|;
name|CayenneContextMergeHandler
parameter_list|(
name|CayenneContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|active
operator|=
literal|true
expr_stmt|;
block|}
comment|// ******* DataChannelListener methods *******
annotation|@
name|Override
specifier|public
name|void
name|graphChanged
parameter_list|(
specifier|final
name|GraphEvent
name|e
parameter_list|)
block|{
comment|// process flush
if|if
condition|(
name|shouldProcessEvent
argument_list|(
name|e
argument_list|)
operator|&&
name|e
operator|.
name|getDiff
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|runWithEventsDisabled
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|e
operator|.
name|getDiff
argument_list|()
operator|.
name|apply
argument_list|(
name|CayenneContextMergeHandler
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// post event outside of "execute" to make sure it is sent
name|repostAfterMerge
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|graphFlushed
parameter_list|(
specifier|final
name|GraphEvent
name|e
parameter_list|)
block|{
comment|// TODO (Andrus, 10/17/2005) - there are a few problems with commit processing:
comment|// 1. Event mechanism reliability:
comment|// - events may come out of order (commit and then preceeding flush)
comment|// - events may be missing all together (commit arrived, while prior flush did
comment|// not)
comment|// Possible solution - an "event_version_id" to be used for optimistic locking
comment|// 2. We don't know if our own dirty objects were committed or not...
comment|// For now we will simply merge the changes, and keep the context dirty
if|if
condition|(
name|shouldProcessEvent
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|runWithEventsDisabled
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|e
operator|.
name|getDiff
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|getDiff
argument_list|()
operator|.
name|apply
argument_list|(
name|CayenneContextMergeHandler
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// post event outside of "execute" to make sure it is sent
name|repostAfterMerge
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|graphRolledback
parameter_list|(
specifier|final
name|GraphEvent
name|e
parameter_list|)
block|{
comment|// TODO: andrus, 3/29/2007: per CAY-771, if a LOCAL peer context posted the event,
comment|// just ignore it, however if the REMOTE peer reverted the parent remote
comment|// DataContext, we need to invalidate stale committed objects...
block|}
comment|// ******* End DataChannelListener methods *******
name|void
name|repostAfterMerge
parameter_list|(
name|GraphEvent
name|originalEvent
parameter_list|)
block|{
comment|// though the subject is CHANGE, "merge" events are really lifecycle.
if|if
condition|(
name|context
operator|.
name|isLifecycleEventsEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|fireDataChannelChanged
argument_list|(
name|originalEvent
operator|.
name|getSource
argument_list|()
argument_list|,
name|originalEvent
operator|.
name|getDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Executes merging of the external diff.      */
name|void
name|merge
parameter_list|(
specifier|final
name|GraphDiff
name|diff
parameter_list|)
block|{
name|runWithEventsDisabled
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|diff
operator|.
name|apply
argument_list|(
name|CayenneContextMergeHandler
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// ******* GraphChangeHandler methods *********
annotation|@
name|Override
specifier|public
name|void
name|nodeIdChanged
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|Object
name|newId
parameter_list|)
block|{
comment|// do not unregister the node just yet... only put replaced id in deadIds to
comment|// remove it later. Otherwise stored operations will not work
name|Object
name|node
init|=
name|context
operator|.
name|internalGraphManager
argument_list|()
operator|.
name|getNode
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|internalGraphManager
argument_list|()
operator|.
name|deadIds
argument_list|()
operator|.
name|add
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|context
operator|.
name|internalGraphManager
argument_list|()
operator|.
name|registerNode
argument_list|(
name|newId
argument_list|,
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Persistent
condition|)
block|{
comment|// inject new id
operator|(
operator|(
name|Persistent
operator|)
name|node
operator|)
operator|.
name|setObjectId
argument_list|(
operator|(
name|ObjectId
operator|)
name|newId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeCreated
parameter_list|(
name|Object
name|nodeId
parameter_list|)
block|{
comment|// ignore
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeRemoved
parameter_list|(
name|Object
name|nodeId
parameter_list|)
block|{
name|context
operator|.
name|getGraphManager
argument_list|()
operator|.
name|unregisterNode
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodePropertyChanged
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|String
name|property
parameter_list|,
name|Object
name|oldValue
parameter_list|,
name|Object
name|newValue
parameter_list|)
block|{
name|Object
name|object
init|=
name|context
operator|.
name|internalGraphManager
argument_list|()
operator|.
name|getNode
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|!=
literal|null
condition|)
block|{
comment|// do not override local changes....
name|PropertyDescriptor
name|p
init|=
name|propertyForId
argument_list|(
name|nodeId
argument_list|,
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|p
operator|.
name|readPropertyDirectly
argument_list|(
name|object
argument_list|)
argument_list|,
name|oldValue
argument_list|)
condition|)
block|{
name|p
operator|.
name|writePropertyDirectly
argument_list|(
name|object
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|arcCreated
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|Object
name|targetNodeId
parameter_list|,
name|ArcId
name|arcId
parameter_list|)
block|{
comment|// null source or target likely means the object is not faulted yet... Faults
comment|// shouldn't get disturbed by adding/removing arcs
name|Object
name|source
init|=
name|context
operator|.
name|internalGraphManager
argument_list|()
operator|.
name|getNode
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
comment|// no need to connect non-existent object
return|return;
block|}
comment|// TODO (Andrus, 10/17/2005) - check for local modifications to avoid
comment|// overwriting...
name|ArcProperty
name|p
init|=
operator|(
name|ArcProperty
operator|)
name|propertyForId
argument_list|(
name|nodeId
argument_list|,
name|arcId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isFault
argument_list|(
name|source
argument_list|)
condition|)
block|{
return|return;
block|}
name|Object
name|target
init|=
name|context
operator|.
name|internalGraphManager
argument_list|()
operator|.
name|getNode
argument_list|(
name|targetNodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
name|target
operator|=
name|context
operator|.
name|createFault
argument_list|(
operator|(
name|ObjectId
operator|)
name|targetNodeId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|instanceof
name|ToManyProperty
condition|)
block|{
operator|(
operator|(
name|ToManyProperty
operator|)
name|p
operator|)
operator|.
name|addTargetDirectly
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|.
name|writePropertyDirectly
argument_list|(
name|source
argument_list|,
literal|null
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|arcDeleted
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|Object
name|targetNodeId
parameter_list|,
name|ArcId
name|arcId
parameter_list|)
block|{
comment|// null source or target likely means the object is not faulted yet... Faults
comment|// shouldn't get disturbed by adding/removing arcs
name|Object
name|source
init|=
name|context
operator|.
name|internalGraphManager
argument_list|()
operator|.
name|getNode
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
comment|// no need to disconnect non-existent object
return|return;
block|}
comment|// (see "TODO" in 'arcCreated')
name|ArcProperty
name|p
init|=
operator|(
name|ArcProperty
operator|)
name|propertyForId
argument_list|(
name|nodeId
argument_list|,
name|arcId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isFault
argument_list|(
name|source
argument_list|)
condition|)
block|{
return|return;
block|}
name|Object
name|target
init|=
name|context
operator|.
name|internalGraphManager
argument_list|()
operator|.
name|getNode
argument_list|(
name|targetNodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
name|target
operator|=
name|context
operator|.
name|createFault
argument_list|(
operator|(
name|ObjectId
operator|)
name|targetNodeId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|instanceof
name|ToManyProperty
condition|)
block|{
operator|(
operator|(
name|ToManyProperty
operator|)
name|p
operator|)
operator|.
name|removeTargetDirectly
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|.
name|writePropertyDirectly
argument_list|(
name|source
argument_list|,
name|target
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|PropertyDescriptor
name|propertyForId
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|ClassDescriptor
name|descriptor
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getClassDescriptor
argument_list|(
operator|(
operator|(
name|ObjectId
operator|)
name|nodeId
operator|)
operator|.
name|getEntityName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|descriptor
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
comment|// Returns true if this object is active; an event came from our channel, but did not
comment|// originate in it.
name|boolean
name|shouldProcessEvent
parameter_list|(
name|GraphEvent
name|e
parameter_list|)
block|{
comment|// only process events that came from our channel, but did not originate in it
comment|// (i.e. likely posted by EventBridge)
return|return
name|active
operator|&&
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|context
operator|.
name|getChannel
argument_list|()
operator|&&
name|e
operator|.
name|getPostedBy
argument_list|()
operator|!=
name|context
operator|&&
name|e
operator|.
name|getPostedBy
argument_list|()
operator|!=
name|context
operator|.
name|getChannel
argument_list|()
return|;
block|}
comment|// executes a closure, disabling ObjectContext events for the duration of the
comment|// execution.
specifier|private
name|void
name|runWithEventsDisabled
parameter_list|(
name|Runnable
name|closure
parameter_list|)
block|{
synchronized|synchronized
init|(
name|context
operator|.
name|internalGraphManager
argument_list|()
init|)
block|{
name|boolean
name|changeEventsEnabled
init|=
name|context
operator|.
name|internalGraphManager
argument_list|()
operator|.
name|changeEventsEnabled
decl_stmt|;
name|context
operator|.
name|internalGraphManager
argument_list|()
operator|.
name|changeEventsEnabled
operator|=
literal|false
expr_stmt|;
name|boolean
name|lifecycleEventsEnabled
init|=
name|context
operator|.
name|internalGraphManager
argument_list|()
operator|.
name|lifecycleEventsEnabled
decl_stmt|;
name|context
operator|.
name|internalGraphManager
argument_list|()
operator|.
name|lifecycleEventsEnabled
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|closure
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|context
operator|.
name|internalGraphManager
argument_list|()
operator|.
name|changeEventsEnabled
operator|=
name|changeEventsEnabled
expr_stmt|;
name|context
operator|.
name|internalGraphManager
argument_list|()
operator|.
name|lifecycleEventsEnabled
operator|=
name|lifecycleEventsEnabled
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

