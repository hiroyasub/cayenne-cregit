begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|hessian
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|caucho
operator|.
name|hessian
operator|.
name|io
operator|.
name|AbstractSerializerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|caucho
operator|.
name|hessian
operator|.
name|io
operator|.
name|SerializerFactory
import|;
end_import

begin_comment
comment|/**  * A utility class that configures Hessian serialization properties using reflection.  *   * @since 1.2  */
end_comment

begin_class
specifier|public
class|class
name|HessianConfig
block|{
comment|/**      * Creates a Hessian SerializerFactory configured with zero or more      * AbstractSerializerFactory extensions. Extensions are specified as class names. This      * method can inject EntityResolver if an extension factory class defines      *<em>setEntityResolver(EntityResolver)</em> method.      *       * @param factoryNames an array of factory class names. Each class must be a concrete      *            subclass of<em>com.caucho.hessian.io.AbstractSerializerFactory</em>      *            and have a default constructor.      * @param resolver if not null, EntityResolver will be injected into all factories      *            that implement<em>setEntityResolver(EntityResolver)</em> method.      */
specifier|public
specifier|static
name|SerializerFactory
name|createFactory
parameter_list|(
name|String
index|[]
name|factoryNames
parameter_list|,
name|EntityResolver
name|resolver
parameter_list|)
block|{
name|SerializerFactory
name|factory
init|=
operator|new
name|CayenneSerializerFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factoryNames
operator|!=
literal|null
operator|&&
name|factoryNames
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|factoryName
range|:
name|factoryNames
control|)
block|{
try|try
block|{
name|factory
operator|.
name|addFactory
argument_list|(
name|loadFactory
argument_list|(
name|factoryName
argument_list|,
name|resolver
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error configuring factory class "
operator|+
name|factoryName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|factory
return|;
block|}
specifier|static
name|AbstractSerializerFactory
name|loadFactory
parameter_list|(
name|String
name|factoryName
parameter_list|,
name|EntityResolver
name|resolver
parameter_list|)
throws|throws
name|Exception
block|{
name|ClassLoader
name|loader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|factoryClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|factoryName
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|AbstractSerializerFactory
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|factoryClass
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|factoryClass
operator|+
literal|" is not a AbstractSerializerFactory"
argument_list|)
throw|;
block|}
name|Constructor
name|c
init|=
name|factoryClass
operator|.
name|getDeclaredConstructor
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|isAccessible
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|c
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|AbstractSerializerFactory
name|object
init|=
operator|(
name|AbstractSerializerFactory
operator|)
name|c
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|resolver
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Method
name|setter
init|=
name|factoryClass
operator|.
name|getDeclaredMethod
argument_list|(
literal|"setEntityResolver"
argument_list|,
name|EntityResolver
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|isAccessible
argument_list|(
name|setter
argument_list|)
condition|)
block|{
name|setter
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|setter
operator|.
name|invoke
argument_list|(
name|object
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore injection exception
block|}
block|}
return|return
name|object
return|;
block|}
block|}
end_class

end_unit

