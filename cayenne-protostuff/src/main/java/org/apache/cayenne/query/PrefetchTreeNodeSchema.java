begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|io
operator|.
name|protostuff
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|io
operator|.
name|protostuff
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|io
operator|.
name|protostuff
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_comment
comment|/**  * As {@link PrefetchTreeNode} has {@link PrefetchTreeNode#readResolve readResolve} method, which isn't supported  * by Protostuff, we have to provide custom schema for this class.  *  * @see java.io.Serializable  */
end_comment

begin_class
specifier|public
class|class
name|PrefetchTreeNodeSchema
implements|implements
name|Schema
argument_list|<
name|PrefetchTreeNode
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|fieldMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|fieldMap
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fieldMap
operator|.
name|put
argument_list|(
literal|"phantom"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fieldMap
operator|.
name|put
argument_list|(
literal|"semantics"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fieldMap
operator|.
name|put
argument_list|(
literal|"ejbqlPathEntityId"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|fieldMap
operator|.
name|put
argument_list|(
literal|"entityName"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fieldMap
operator|.
name|put
argument_list|(
literal|"children"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFieldName
parameter_list|(
name|int
name|number
parameter_list|)
block|{
switch|switch
condition|(
name|number
condition|)
block|{
case|case
literal|1
case|:
return|return
literal|"name"
return|;
case|case
literal|2
case|:
return|return
literal|"phantom"
return|;
case|case
literal|3
case|:
return|return
literal|"semantics"
return|;
case|case
literal|4
case|:
return|return
literal|"ejbqlPathEntityId"
return|;
case|case
literal|5
case|:
return|return
literal|"entityName"
return|;
case|case
literal|6
case|:
return|return
literal|"children"
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFieldNumber
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|fieldMap
operator|.
name|getOrDefault
argument_list|(
name|name
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInitialized
parameter_list|(
name|PrefetchTreeNode
name|message
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrefetchTreeNode
name|newMessage
parameter_list|()
block|{
return|return
operator|new
name|PrefetchTreeNode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|messageName
parameter_list|()
block|{
return|return
name|PrefetchTreeNode
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|messageFullName
parameter_list|()
block|{
return|return
name|PrefetchTreeNode
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|PrefetchTreeNode
argument_list|>
name|typeClass
parameter_list|()
block|{
return|return
name|PrefetchTreeNode
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mergeFrom
parameter_list|(
name|Input
name|input
parameter_list|,
name|PrefetchTreeNode
name|message
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|number
init|=
name|input
operator|.
name|readFieldNumber
argument_list|(
name|this
argument_list|)
init|;
condition|;
name|number
operator|=
name|input
operator|.
name|readFieldNumber
argument_list|(
name|this
argument_list|)
control|)
block|{
switch|switch
condition|(
name|number
condition|)
block|{
case|case
literal|0
case|:
name|message
operator|.
name|readResolve
argument_list|()
expr_stmt|;
return|return;
case|case
literal|1
case|:
name|message
operator|.
name|name
operator|=
name|input
operator|.
name|readString
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|message
operator|.
name|setPhantom
argument_list|(
name|input
operator|.
name|readBool
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|message
operator|.
name|setSemantics
argument_list|(
name|input
operator|.
name|readInt32
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|message
operator|.
name|setEjbqlPathEntityId
argument_list|(
name|input
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|message
operator|.
name|setEntityName
argument_list|(
name|input
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
if|if
condition|(
name|message
operator|.
name|children
operator|==
literal|null
condition|)
block|{
name|message
operator|.
name|children
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|children
operator|.
name|add
argument_list|(
name|input
operator|.
name|mergeObject
argument_list|(
literal|null
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|input
operator|.
name|handleUnknownField
argument_list|(
name|number
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeTo
parameter_list|(
name|Output
name|output
parameter_list|,
name|PrefetchTreeNode
name|message
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|message
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|writeString
argument_list|(
literal|1
argument_list|,
name|message
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|writeBool
argument_list|(
literal|2
argument_list|,
name|message
operator|.
name|isPhantom
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeInt32
argument_list|(
literal|3
argument_list|,
name|message
operator|.
name|getSemantics
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|getEjbqlPathEntityId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|writeString
argument_list|(
literal|4
argument_list|,
name|message
operator|.
name|getEjbqlPathEntityId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|.
name|getEntityName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|writeString
argument_list|(
literal|5
argument_list|,
name|message
operator|.
name|getEntityName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|.
name|hasChildren
argument_list|()
condition|)
block|{
for|for
control|(
name|PrefetchTreeNode
name|node
range|:
name|message
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|output
operator|.
name|writeObject
argument_list|(
literal|6
argument_list|,
name|node
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

