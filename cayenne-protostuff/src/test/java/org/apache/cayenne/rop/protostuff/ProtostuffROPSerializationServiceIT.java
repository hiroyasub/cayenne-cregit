begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|rop
operator|.
name|protostuff
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|rop
operator|.
name|protostuff
operator|.
name|persistent
operator|.
name|ClientMtTable1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|rop
operator|.
name|protostuff
operator|.
name|persistent
operator|.
name|ClientMtTable2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|ProtostuffROPSerializationServiceIT
extends|extends
name|RuntimeBase
block|{
specifier|private
name|ClientMtTable1
name|table1
decl_stmt|;
specifier|private
name|ClientMtTable2
name|table2
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|=
name|clientRuntime
operator|.
name|newContext
argument_list|()
expr_stmt|;
name|table1
operator|=
name|context
operator|.
name|newObject
argument_list|(
name|ClientMtTable1
operator|.
name|class
argument_list|)
expr_stmt|;
name|table1
operator|.
name|setGlobalAttribute
argument_list|(
literal|"table1"
argument_list|)
expr_stmt|;
name|table1
operator|.
name|setDateAttribute
argument_list|(
name|LocalDate
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|table2
operator|=
name|context
operator|.
name|newObject
argument_list|(
name|ClientMtTable2
operator|.
name|class
argument_list|)
expr_stmt|;
name|table2
operator|.
name|setGlobalAttribute
argument_list|(
literal|"table2"
argument_list|)
expr_stmt|;
name|table1
operator|.
name|addToTable2Array
argument_list|(
name|table2
argument_list|)
expr_stmt|;
name|table2
operator|.
name|setTable1
argument_list|(
name|table1
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|setDown
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|deleteObjects
argument_list|(
name|table2
argument_list|,
name|table1
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerializationWithPrefetch1
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientMtTable1
name|table1
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ClientMtTable1
operator|.
name|class
argument_list|)
operator|.
name|prefetch
argument_list|(
name|ClientMtTable1
operator|.
name|TABLE2ARRAY
operator|.
name|joint
argument_list|()
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|ClientMtTable2
name|table2
init|=
name|table1
operator|.
name|getTable2Array
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|table1
argument_list|,
name|table1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|table2
argument_list|,
name|table2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerializationWithPrefetch2
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientMtTable2
name|table2
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ClientMtTable2
operator|.
name|class
argument_list|)
operator|.
name|prefetch
argument_list|(
name|ClientMtTable2
operator|.
name|TABLE1
operator|.
name|joint
argument_list|()
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|ClientMtTable1
name|table1
init|=
name|table2
operator|.
name|getTable1
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|table1
argument_list|,
name|table1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|table2
argument_list|,
name|table2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

