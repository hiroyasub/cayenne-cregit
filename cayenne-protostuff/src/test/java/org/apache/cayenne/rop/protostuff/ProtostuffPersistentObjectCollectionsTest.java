begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|rop
operator|.
name|protostuff
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistentObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|MapAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|rop
operator|.
name|ROPSerializationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|PersistentObjectList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|PersistentObjectMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|PersistentObjectSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|ProtostuffPersistentObjectCollectionsTest
extends|extends
name|ProtostuffProperties
block|{
specifier|private
name|ROPSerializationService
name|serializationService
decl_stmt|;
specifier|private
name|TestObject
name|object1
decl_stmt|;
specifier|private
name|TestObject
name|object2
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|serializationService
operator|=
operator|new
name|ProtostuffROPSerializationService
argument_list|()
expr_stmt|;
name|object1
operator|=
operator|new
name|TestObject
argument_list|()
expr_stmt|;
name|object2
operator|=
operator|new
name|TestObject
argument_list|()
expr_stmt|;
name|object1
operator|.
name|name
operator|=
literal|"object1"
expr_stmt|;
name|object2
operator|.
name|name
operator|=
literal|"object2"
expr_stmt|;
name|object1
operator|.
name|object
operator|=
name|object2
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPersistentObjectList
parameter_list|()
throws|throws
name|IOException
block|{
name|PersistentObjectList
name|list
init|=
operator|new
name|PersistentObjectList
argument_list|(
name|object1
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|object2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|serializationService
operator|.
name|serialize
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|PersistentObjectList
name|list0
init|=
name|serializationService
operator|.
name|deserialize
argument_list|(
name|bytes
argument_list|,
name|PersistentObjectList
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|list0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|getRelationshipName
argument_list|()
argument_list|,
name|list0
operator|.
name|getRelationshipName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|getRelationshipOwner
argument_list|()
argument_list|,
name|list0
operator|.
name|getRelationshipOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|object0
init|=
name|list0
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|object2
argument_list|,
name|object0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPersistentObjectListWithWrapper
parameter_list|()
throws|throws
name|IOException
block|{
name|PersistentObjectList
name|list
init|=
operator|new
name|PersistentObjectList
argument_list|(
name|object1
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|object2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|serializationService
operator|.
name|serialize
argument_list|(
operator|new
name|ListWrapper
argument_list|(
name|list
argument_list|)
argument_list|)
decl_stmt|;
name|ListWrapper
name|lw
init|=
name|serializationService
operator|.
name|deserialize
argument_list|(
name|bytes
argument_list|,
name|ListWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|lw
operator|.
name|object
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lw
operator|.
name|object
operator|instanceof
name|PersistentObjectList
argument_list|)
expr_stmt|;
name|PersistentObjectList
name|list0
init|=
operator|(
name|PersistentObjectList
operator|)
name|lw
operator|.
name|object
decl_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|getRelationshipName
argument_list|()
argument_list|,
name|list0
operator|.
name|getRelationshipName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|getRelationshipOwner
argument_list|()
argument_list|,
name|list0
operator|.
name|getRelationshipOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|object0
init|=
name|list0
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|object2
argument_list|,
name|object0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPersistentObjectSet
parameter_list|()
throws|throws
name|IOException
block|{
name|PersistentObjectSet
name|set
init|=
operator|new
name|PersistentObjectSet
argument_list|(
name|object1
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|object2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|serializationService
operator|.
name|serialize
argument_list|(
name|set
argument_list|)
decl_stmt|;
name|PersistentObjectSet
name|set0
init|=
name|serializationService
operator|.
name|deserialize
argument_list|(
name|bytes
argument_list|,
name|PersistentObjectSet
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|set0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|set
operator|.
name|getRelationshipName
argument_list|()
argument_list|,
name|set0
operator|.
name|getRelationshipName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|set
operator|.
name|getRelationshipOwner
argument_list|()
argument_list|,
name|set0
operator|.
name|getRelationshipOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|object0
init|=
name|set0
operator|.
name|toArray
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|object2
argument_list|,
name|object0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPersistentObjectSetWithWrapper
parameter_list|()
throws|throws
name|IOException
block|{
name|PersistentObjectSet
name|set
init|=
operator|new
name|PersistentObjectSet
argument_list|(
name|object1
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|object2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|serializationService
operator|.
name|serialize
argument_list|(
operator|new
name|SetWrapper
argument_list|(
name|set
argument_list|)
argument_list|)
decl_stmt|;
name|SetWrapper
name|sw
init|=
name|serializationService
operator|.
name|deserialize
argument_list|(
name|bytes
argument_list|,
name|SetWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sw
operator|.
name|object
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sw
operator|.
name|object
operator|instanceof
name|PersistentObjectSet
argument_list|)
expr_stmt|;
name|PersistentObjectSet
name|set0
init|=
operator|(
name|PersistentObjectSet
operator|)
name|sw
operator|.
name|object
decl_stmt|;
name|assertNotNull
argument_list|(
name|set0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|set
operator|.
name|getRelationshipName
argument_list|()
argument_list|,
name|set0
operator|.
name|getRelationshipName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|set
operator|.
name|getRelationshipOwner
argument_list|()
argument_list|,
name|set0
operator|.
name|getRelationshipOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|object0
init|=
name|set0
operator|.
name|toArray
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|object2
argument_list|,
name|object0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPersistentObjectMap
parameter_list|()
throws|throws
name|IOException
block|{
name|PersistentObjectMap
name|map
init|=
operator|new
name|PersistentObjectMap
argument_list|(
name|object1
argument_list|,
literal|"test"
argument_list|,
operator|new
name|MapAccessor
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|object2
operator|.
name|name
argument_list|,
name|object2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|serializationService
operator|.
name|serialize
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|PersistentObjectMap
name|map0
init|=
name|serializationService
operator|.
name|deserialize
argument_list|(
name|bytes
argument_list|,
name|PersistentObjectMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map0
operator|.
name|getRelationshipName
argument_list|()
argument_list|,
name|map0
operator|.
name|getRelationshipName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map0
operator|.
name|getRelationshipOwner
argument_list|()
argument_list|,
name|map0
operator|.
name|getRelationshipOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|object0
init|=
name|map0
operator|.
name|get
argument_list|(
name|object2
operator|.
name|name
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|object2
argument_list|,
name|object0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPersistentObjectMapWithWrapper
parameter_list|()
throws|throws
name|IOException
block|{
name|PersistentObjectMap
name|map
init|=
operator|new
name|PersistentObjectMap
argument_list|(
name|object1
argument_list|,
literal|"test"
argument_list|,
operator|new
name|MapAccessor
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|object2
operator|.
name|name
argument_list|,
name|object2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|serializationService
operator|.
name|serialize
argument_list|(
operator|new
name|MapWrapper
argument_list|(
name|map
argument_list|)
argument_list|)
decl_stmt|;
name|MapWrapper
name|mw
init|=
name|serializationService
operator|.
name|deserialize
argument_list|(
name|bytes
argument_list|,
name|MapWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mw
operator|.
name|object
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mw
operator|.
name|object
operator|instanceof
name|PersistentObjectMap
argument_list|)
expr_stmt|;
name|PersistentObjectMap
name|map0
init|=
operator|(
name|PersistentObjectMap
operator|)
name|mw
operator|.
name|object
decl_stmt|;
name|assertEquals
argument_list|(
name|map0
operator|.
name|getRelationshipName
argument_list|()
argument_list|,
name|map0
operator|.
name|getRelationshipName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map0
operator|.
name|getRelationshipOwner
argument_list|()
argument_list|,
name|map0
operator|.
name|getRelationshipOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|object0
init|=
name|map0
operator|.
name|get
argument_list|(
name|object2
operator|.
name|name
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|object2
argument_list|,
name|object0
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|TestObject
extends|extends
name|PersistentObject
block|{
specifier|public
name|String
name|name
decl_stmt|;
specifier|public
name|TestObject
name|object
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|TestObject
operator|)
condition|)
return|return
literal|false
return|;
name|TestObject
name|that
init|=
operator|(
name|TestObject
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|?
operator|!
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
else|:
name|that
operator|.
name|name
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|object
operator|!=
literal|null
condition|?
name|object
operator|.
name|equals
argument_list|(
name|that
operator|.
name|object
argument_list|)
else|:
name|that
operator|.
name|object
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|name
operator|!=
literal|null
condition|?
name|name
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|object
operator|!=
literal|null
condition|?
name|object
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ListWrapper
block|{
name|List
argument_list|<
name|?
argument_list|>
name|object
decl_stmt|;
specifier|public
name|ListWrapper
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|object
parameter_list|)
block|{
name|this
operator|.
name|object
operator|=
name|object
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|SetWrapper
block|{
name|Set
argument_list|<
name|?
argument_list|>
name|object
decl_stmt|;
specifier|public
name|SetWrapper
parameter_list|(
name|Set
argument_list|<
name|?
argument_list|>
name|object
parameter_list|)
block|{
name|this
operator|.
name|object
operator|=
name|object
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MapWrapper
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|object
decl_stmt|;
specifier|public
name|MapWrapper
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|object
parameter_list|)
block|{
name|this
operator|.
name|object
operator|=
name|object
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

