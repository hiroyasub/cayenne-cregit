begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * https://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|event
operator|.
name|EventBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|BaseConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|ClientMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|rop
operator|.
name|ROPSerializationService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A ClientConnection that connects to a DataChannel. Used as an emulator of a remote  * service. Emulation includes serialization/deserialization of objects via {@link ROPSerializationService}.  *  * {@link LocalConnection} should be replaced by this one after moving all ROP functionality to the separate module.  * It'll provide more flexibility around which serialization should be used.  */
end_comment

begin_class
specifier|public
class|class
name|ProtostuffLocalConnection
extends|extends
name|BaseConnection
block|{
specifier|protected
name|DataChannel
name|channel
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ROPSerializationService
name|serializationService
decl_stmt|;
specifier|public
name|ProtostuffLocalConnection
parameter_list|(
name|DataChannel
name|channel
parameter_list|)
block|{
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|EventBridge
name|getServerEventBridge
parameter_list|()
throws|throws
name|CayenneRuntimeException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|beforeSendMessage
parameter_list|(
name|ClientMessage
name|message
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
comment|// noop
block|}
annotation|@
name|Override
specifier|protected
name|Object
name|doSendMessage
parameter_list|(
name|ClientMessage
name|message
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
try|try
block|{
name|ClientMessage
name|processedMessage
init|=
operator|(
name|ClientMessage
operator|)
name|cloneViaSerializationService
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|DispatchHelper
operator|.
name|dispatch
argument_list|(
name|channel
argument_list|,
name|processedMessage
argument_list|)
decl_stmt|;
return|return
name|cloneViaSerializationService
argument_list|(
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error deserializing result"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|cloneViaSerializationService
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
name|serializationService
operator|.
name|serialize
argument_list|(
name|object
argument_list|)
decl_stmt|;
return|return
name|serializationService
operator|.
name|deserialize
argument_list|(
name|data
argument_list|,
name|object
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

