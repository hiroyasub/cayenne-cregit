begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|naming
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNodeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Embeddable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EmbeddableAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ProcedureParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|QueryDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
class|class
name|DeduplicationVisitor
implements|implements
name|ConfigurationNodeVisitor
argument_list|<
name|String
argument_list|>
block|{
specifier|private
name|ConfigurationNode
name|parent
decl_stmt|;
specifier|private
name|String
name|baseName
decl_stmt|;
specifier|private
name|String
name|dupesPattern
decl_stmt|;
name|DeduplicationVisitor
parameter_list|(
name|ConfigurationNode
name|parent
parameter_list|,
name|String
name|baseName
parameter_list|,
name|String
name|dupesPattern
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|baseName
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|baseName
argument_list|)
expr_stmt|;
name|this
operator|.
name|dupesPattern
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|dupesPattern
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|visitDataChannelDescriptor
parameter_list|(
name|DataChannelDescriptor
name|channelDescriptor
parameter_list|)
block|{
comment|// DataChannelDescriptor is top-level. No context or naming conflicts are expected...
return|return
name|baseName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|visitDataNodeDescriptor
parameter_list|(
name|DataNodeDescriptor
name|nodeDescriptor
parameter_list|)
block|{
return|return
name|resolve
argument_list|(
name|name
lambda|->
block|{
name|DataChannelDescriptor
name|dataChannelDescriptor
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|parent
decl_stmt|;
for|for
control|(
name|DataNodeDescriptor
name|dataNodeDescriptor
range|:
name|dataChannelDescriptor
operator|.
name|getNodeDescriptors
argument_list|()
control|)
block|{
if|if
condition|(
name|dataNodeDescriptor
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|visitDataMap
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
return|return
name|resolve
argument_list|(
name|name
lambda|->
block|{
comment|// null context is a situation when DataMap is a
comment|// top level object of the project
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|parent
operator|instanceof
name|DataChannelDescriptor
condition|)
block|{
name|DataChannelDescriptor
name|domain
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|parent
decl_stmt|;
return|return
name|domain
operator|.
name|getDataMap
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
return|return
literal|false
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|visitObjEntity
parameter_list|(
name|ObjEntity
name|entity
parameter_list|)
block|{
return|return
name|resolve
argument_list|(
name|name
lambda|->
operator|(
operator|(
name|DataMap
operator|)
name|parent
operator|)
operator|.
name|getObjEntity
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|visitDbEntity
parameter_list|(
name|DbEntity
name|entity
parameter_list|)
block|{
return|return
name|resolve
argument_list|(
name|name
lambda|->
operator|(
operator|(
name|DataMap
operator|)
name|parent
operator|)
operator|.
name|getDbEntity
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|visitEmbeddable
parameter_list|(
name|Embeddable
name|embeddable
parameter_list|)
block|{
return|return
name|resolve
argument_list|(
name|name
lambda|->
block|{
name|DataMap
name|map
init|=
operator|(
name|DataMap
operator|)
name|parent
decl_stmt|;
return|return
name|map
operator|.
name|getEmbeddable
argument_list|(
name|map
operator|.
name|getNameWithDefaultPackage
argument_list|(
name|name
argument_list|)
argument_list|)
operator|!=
literal|null
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|visitEmbeddableAttribute
parameter_list|(
name|EmbeddableAttribute
name|attribute
parameter_list|)
block|{
return|return
name|resolve
argument_list|(
name|name
lambda|->
operator|(
operator|(
name|Embeddable
operator|)
name|parent
operator|)
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|visitObjAttribute
parameter_list|(
name|ObjAttribute
name|attribute
parameter_list|)
block|{
return|return
name|resolveObjEntityProperty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|visitDbAttribute
parameter_list|(
name|DbAttribute
name|attribute
parameter_list|)
block|{
return|return
name|resolveDbEntityProperty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|visitObjRelationship
parameter_list|(
name|ObjRelationship
name|relationship
parameter_list|)
block|{
return|return
name|resolveObjEntityProperty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|visitDbRelationship
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|)
block|{
return|return
name|resolveDbEntityProperty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|visitProcedure
parameter_list|(
name|Procedure
name|procedure
parameter_list|)
block|{
return|return
name|resolve
argument_list|(
name|name
lambda|->
operator|(
operator|(
name|DataMap
operator|)
name|parent
operator|)
operator|.
name|getProcedure
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|visitProcedureParameter
parameter_list|(
name|ProcedureParameter
name|parameter
parameter_list|)
block|{
return|return
name|resolve
argument_list|(
name|name
lambda|->
block|{
comment|// it doesn't matter if we create a parameter with a duplicate name.. parameters are positional anyway..
comment|// still try to use unique names for visual consistency
name|Procedure
name|procedure
init|=
operator|(
name|Procedure
operator|)
name|parent
decl_stmt|;
for|for
control|(
name|ProcedureParameter
name|parameter1
range|:
name|procedure
operator|.
name|getCallParameters
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|parameter1
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|visitQuery
parameter_list|(
name|QueryDescriptor
name|query
parameter_list|)
block|{
return|return
name|resolve
argument_list|(
name|name
lambda|->
operator|(
operator|(
name|DataMap
operator|)
name|parent
operator|)
operator|.
name|getQueryDescriptor
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
argument_list|)
return|;
block|}
name|String
name|resolve
parameter_list|(
name|Predicate
argument_list|<
name|String
argument_list|>
name|nameChecker
parameter_list|)
block|{
name|int
name|c
init|=
literal|1
decl_stmt|;
name|String
name|name
init|=
name|baseName
decl_stmt|;
while|while
condition|(
name|nameChecker
operator|.
name|test
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
name|String
operator|.
name|format
argument_list|(
name|dupesPattern
argument_list|,
name|baseName
argument_list|,
name|c
operator|++
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|private
name|String
name|resolveDbEntityProperty
parameter_list|()
block|{
return|return
name|resolve
argument_list|(
name|name
lambda|->
block|{
name|DbEntity
name|entity
init|=
operator|(
name|DbEntity
operator|)
name|parent
decl_stmt|;
comment|// check if either attribute or relationship name matches...
return|return
name|entity
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
operator|||
name|entity
operator|.
name|getRelationship
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
return|;
block|}
argument_list|)
return|;
block|}
specifier|private
name|String
name|resolveObjEntityProperty
parameter_list|()
block|{
return|return
name|resolve
argument_list|(
name|name
lambda|->
block|{
name|ObjEntity
name|entity
init|=
operator|(
name|ObjEntity
operator|)
name|parent
decl_stmt|;
comment|// check if either attribute or relationship name matches...
if|if
condition|(
name|entity
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
operator|||
name|entity
operator|.
name|getRelationship
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|//  check if there's a callback method that shadows attribute getter (unlikely, but still)
name|String
name|conflictingCallback
init|=
literal|"get"
operator|+
name|NameUtil
operator|.
name|capitalize
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|entity
operator|.
name|getCallbackMethods
argument_list|()
operator|.
name|contains
argument_list|(
name|conflictingCallback
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

