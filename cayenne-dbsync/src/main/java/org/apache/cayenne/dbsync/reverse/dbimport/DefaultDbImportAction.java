begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptorLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataMapLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|DataSourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|DbAdapterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
operator|.
name|DataChannelMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
operator|.
name|DataMapMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
operator|.
name|context
operator|.
name|MergerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
operator|.
name|factory
operator|.
name|MergerTokenFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
operator|.
name|factory
operator|.
name|MergerTokenFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
operator|.
name|token
operator|.
name|MergerToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
operator|.
name|token
operator|.
name|model
operator|.
name|AbstractToModelToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|naming
operator|.
name|ObjectNameGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbload
operator|.
name|DbLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbload
operator|.
name|DbLoaderConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbload
operator|.
name|ModelMergeDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbload
operator|.
name|ProxyModelMergeDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
operator|.
name|CatalogFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
operator|.
name|FiltersConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
operator|.
name|SchemaFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|ProjectSaver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
operator|.
name|URLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|SimpleValidationFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|ValidationFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|ValidationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
operator|.
name|isBlank
import|;
end_import

begin_comment
comment|/**  * A default implementation of {@link DbImportAction} that can load DB schema and merge it to a new or an existing  * DataMap.  *  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|DefaultDbImportAction
implements|implements
name|DbImportAction
block|{
specifier|private
specifier|final
name|ProjectSaver
name|projectSaver
decl_stmt|;
specifier|protected
specifier|final
name|Logger
name|logger
decl_stmt|;
specifier|private
specifier|final
name|DataSourceFactory
name|dataSourceFactory
decl_stmt|;
specifier|private
specifier|final
name|DbAdapterFactory
name|adapterFactory
decl_stmt|;
specifier|private
specifier|final
name|DataMapLoader
name|mapLoader
decl_stmt|;
specifier|private
specifier|final
name|MergerTokenFactoryProvider
name|mergerTokenFactoryProvider
decl_stmt|;
specifier|private
specifier|final
name|DataChannelDescriptorLoader
name|dataChannelDescriptorLoader
decl_stmt|;
specifier|private
specifier|final
name|DataChannelMetaData
name|metaData
decl_stmt|;
specifier|private
name|boolean
name|hasChanges
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|MergerToken
argument_list|>
name|tokens
decl_stmt|;
specifier|private
name|DataMap
name|loadedDataMap
decl_stmt|;
specifier|public
name|DefaultDbImportAction
parameter_list|(
annotation|@
name|Inject
name|Logger
name|logger
parameter_list|,
annotation|@
name|Inject
name|ProjectSaver
name|projectSaver
parameter_list|,
annotation|@
name|Inject
name|DataSourceFactory
name|dataSourceFactory
parameter_list|,
annotation|@
name|Inject
name|DbAdapterFactory
name|adapterFactory
parameter_list|,
annotation|@
name|Inject
name|DataMapLoader
name|mapLoader
parameter_list|,
annotation|@
name|Inject
name|MergerTokenFactoryProvider
name|mergerTokenFactoryProvider
parameter_list|,
annotation|@
name|Inject
name|DataChannelDescriptorLoader
name|dataChannelDescriptorLoader
parameter_list|,
annotation|@
name|Inject
name|DataChannelMetaData
name|metaData
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|projectSaver
operator|=
name|projectSaver
expr_stmt|;
name|this
operator|.
name|dataSourceFactory
operator|=
name|dataSourceFactory
expr_stmt|;
name|this
operator|.
name|adapterFactory
operator|=
name|adapterFactory
expr_stmt|;
name|this
operator|.
name|mapLoader
operator|=
name|mapLoader
expr_stmt|;
name|this
operator|.
name|mergerTokenFactoryProvider
operator|=
name|mergerTokenFactoryProvider
expr_stmt|;
name|this
operator|.
name|metaData
operator|=
name|metaData
expr_stmt|;
name|this
operator|.
name|dataChannelDescriptorLoader
operator|=
name|dataChannelDescriptorLoader
expr_stmt|;
block|}
specifier|protected
specifier|static
name|List
argument_list|<
name|MergerToken
argument_list|>
name|sort
parameter_list|(
name|List
argument_list|<
name|MergerToken
argument_list|>
name|reverse
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|reverse
argument_list|)
expr_stmt|;
return|return
name|reverse
return|;
block|}
comment|/**      * Flattens many-to-many relationships in the generated model.      */
specifier|public
specifier|static
name|void
name|flattenManyToManyRelationships
parameter_list|(
name|DataMap
name|map
parameter_list|,
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|loadedObjEntities
parameter_list|,
name|ObjectNameGenerator
name|objectNameGenerator
parameter_list|)
block|{
if|if
condition|(
name|loadedObjEntities
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|entitiesForDelete
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjEntity
name|curEntity
range|:
name|loadedObjEntities
control|)
block|{
name|ManyToManyCandidateEntity
name|entity
init|=
name|ManyToManyCandidateEntity
operator|.
name|build
argument_list|(
name|curEntity
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|entity
operator|.
name|optimizeRelationships
argument_list|(
name|objectNameGenerator
argument_list|)
expr_stmt|;
name|entitiesForDelete
operator|.
name|add
argument_list|(
name|curEntity
argument_list|)
expr_stmt|;
block|}
block|}
comment|// remove needed entities
for|for
control|(
name|ObjEntity
name|curDeleteEntity
range|:
name|entitiesForDelete
control|)
block|{
name|map
operator|.
name|removeObjEntity
argument_list|(
name|curDeleteEntity
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|loadedObjEntities
operator|.
name|removeAll
argument_list|(
name|entitiesForDelete
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|DbImportConfiguration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|commit
argument_list|(
name|config
argument_list|,
name|loadDataMap
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DbAdapter
name|createAdapter
parameter_list|(
name|DataNodeDescriptor
name|dataNodeDescriptor
parameter_list|,
name|DataSource
name|dataSource
parameter_list|)
throws|throws
name|Exception
block|{
name|DbAdapter
name|adapter
init|=
name|adapterFactory
operator|.
name|createAdapter
argument_list|(
name|dataNodeDescriptor
argument_list|,
name|dataSource
argument_list|)
decl_stmt|;
comment|// Warm up the AutoAdapter by calling any method. This to avoid AutoAdapter opening a connection later in
comment|// the middle of import to detect the DB type. Opening two connections in the same thread causes issues with
comment|// some DBs (namely com.sap.cloud.db.jdbc:ngdbc:2.4.56)
name|adapter
operator|.
name|getPkGenerator
argument_list|()
expr_stmt|;
return|return
name|adapter
return|;
block|}
specifier|protected
name|void
name|commit
parameter_list|(
name|DbImportConfiguration
name|config
parameter_list|,
name|DataMap
name|sourceDataMap
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|hasChanges
condition|)
block|{
name|DataMap
name|targetDataMap
init|=
name|loadedDataMap
decl_stmt|;
name|syncDataMapProperties
argument_list|(
name|targetDataMap
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|applyTokens
argument_list|(
name|targetDataMap
argument_list|,
name|tokens
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|saveLoaded
argument_list|(
name|targetDataMap
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|this
operator|.
name|loadedDataMap
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|hasChanges
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|protected
name|DataMap
name|loadDataMap
parameter_list|(
name|DbImportConfiguration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"DB connection: "
operator|+
name|config
operator|.
name|getDataSourceInfo
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DataNodeDescriptor
name|dataNodeDescriptor
init|=
name|config
operator|.
name|createDataNodeDescriptor
argument_list|()
decl_stmt|;
name|DataSource
name|dataSource
init|=
name|dataSourceFactory
operator|.
name|getDataSource
argument_list|(
name|dataNodeDescriptor
argument_list|)
decl_stmt|;
name|DbAdapter
name|adapter
init|=
name|createAdapter
argument_list|(
name|dataNodeDescriptor
argument_list|,
name|dataSource
argument_list|)
decl_stmt|;
name|DataMap
name|sourceDataMap
decl_stmt|;
name|DataMap
name|targetDataMap
init|=
name|existingTargetMap
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|ReverseEngineering
name|dataMapReverseEngineering
init|=
name|metaData
operator|.
name|get
argument_list|(
name|targetDataMap
argument_list|,
name|ReverseEngineering
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|config
operator|.
name|isUseDataMapReverseEngineering
argument_list|()
operator|)
operator|&&
operator|(
name|dataMapReverseEngineering
operator|!=
literal|null
operator|)
condition|)
block|{
name|putReverseEngineeringToConfig
argument_list|(
name|dataMapReverseEngineering
argument_list|,
name|config
argument_list|,
name|dataSource
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|dataMapReverseEngineering
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|config
operator|.
name|isUseDataMapReverseEngineering
argument_list|()
operator|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Found several dbimport configs. DataMap dbimport config was skipped. "
operator|+
literal|"Configuration selected from build file"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|dataMapReverseEngineering
operator|==
literal|null
operator|)
operator|&&
operator|(
name|config
operator|.
name|isUseDataMapReverseEngineering
argument_list|()
operator|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Missing dbimport config. Database is imported completely."
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Connection
name|connection
init|=
name|dataSource
operator|.
name|getConnection
argument_list|()
init|)
block|{
name|sourceDataMap
operator|=
name|load
argument_list|(
name|config
argument_list|,
name|adapter
argument_list|,
name|connection
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|targetDataMap
operator|==
literal|null
condition|)
block|{
name|String
name|path
init|=
name|config
operator|.
name|getTargetDataMap
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|config
operator|.
name|getTargetDataMap
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"'"
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Map file does not exist. Loaded db model will be saved into '"
operator|+
name|path
argument_list|)
expr_stmt|;
name|hasChanges
operator|=
literal|true
expr_stmt|;
name|targetDataMap
operator|=
name|newTargetDataMap
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|loadedDataMap
operator|=
name|targetDataMap
expr_stmt|;
comment|// In that moment our data map fills with source map
comment|// transform source DataMap before merging
name|transformSourceBeforeMerge
argument_list|(
name|sourceDataMap
argument_list|,
name|targetDataMap
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|MergerTokenFactory
name|mergerTokenFactory
init|=
name|mergerTokenFactoryProvider
operator|.
name|get
argument_list|(
name|adapter
argument_list|)
decl_stmt|;
name|DbLoaderConfiguration
name|loaderConfig
init|=
name|config
operator|.
name|getDbLoaderConfig
argument_list|()
decl_stmt|;
name|tokens
operator|=
name|DataMapMerger
operator|.
name|builder
argument_list|(
name|mergerTokenFactory
argument_list|)
operator|.
name|filters
argument_list|(
name|loaderConfig
operator|.
name|getFiltersConfig
argument_list|()
argument_list|)
operator|.
name|skipPKTokens
argument_list|(
name|loaderConfig
operator|.
name|isSkipPrimaryKeyLoading
argument_list|()
argument_list|)
operator|.
name|skipRelationshipsTokens
argument_list|(
name|loaderConfig
operator|.
name|isSkipRelationshipsLoading
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|createMergeTokens
argument_list|(
name|targetDataMap
argument_list|,
name|sourceDataMap
argument_list|)
expr_stmt|;
name|tokens
operator|=
name|log
argument_list|(
name|sort
argument_list|(
name|reverse
argument_list|(
name|mergerTokenFactory
argument_list|,
name|tokens
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hasChanges
operator||=
name|checkDataMapProperties
argument_list|(
name|targetDataMap
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|hasChanges
operator||=
name|hasTokensToImport
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
return|return
name|sourceDataMap
return|;
block|}
specifier|private
name|void
name|putReverseEngineeringToConfig
parameter_list|(
name|ReverseEngineering
name|reverseEngineering
parameter_list|,
name|DbImportConfiguration
name|config
parameter_list|,
name|DataSource
name|dataSource
parameter_list|,
name|DbAdapter
name|dbAdapter
parameter_list|)
throws|throws
name|SQLException
block|{
name|config
operator|.
name|setSkipRelationshipsLoading
argument_list|(
name|reverseEngineering
operator|.
name|getSkipRelationshipsLoading
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setSkipPrimaryKeyLoading
argument_list|(
name|reverseEngineering
operator|.
name|getSkipPrimaryKeyLoading
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setStripFromTableNames
argument_list|(
name|reverseEngineering
operator|.
name|getStripFromTableNames
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setTableTypes
argument_list|(
name|reverseEngineering
operator|.
name|getTableTypes
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setMeaningfulPkTables
argument_list|(
name|reverseEngineering
operator|.
name|getMeaningfulPkTables
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setNamingStrategy
argument_list|(
name|reverseEngineering
operator|.
name|getNamingStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setFiltersConfig
argument_list|(
operator|new
name|FiltersConfigBuilder
argument_list|(
operator|new
name|ReverseEngineering
argument_list|(
name|reverseEngineering
argument_list|)
argument_list|)
operator|.
name|dataSource
argument_list|(
name|dataSource
argument_list|)
operator|.
name|dbAdapter
argument_list|(
name|dbAdapter
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setForceDataMapCatalog
argument_list|(
name|reverseEngineering
operator|.
name|isForceDataMapCatalog
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setForceDataMapSchema
argument_list|(
name|reverseEngineering
operator|.
name|isForceDataMapSchema
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setDefaultPackage
argument_list|(
name|reverseEngineering
operator|.
name|getDefaultPackage
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setUseJava7Types
argument_list|(
name|reverseEngineering
operator|.
name|isUseJava7Types
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|transformSourceBeforeMerge
parameter_list|(
name|DataMap
name|sourceDataMap
parameter_list|,
name|DataMap
name|targetDataMap
parameter_list|,
name|DbImportConfiguration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|.
name|isForceDataMapCatalog
argument_list|()
condition|)
block|{
name|String
name|catalog
init|=
name|targetDataMap
operator|.
name|getDefaultCatalog
argument_list|()
decl_stmt|;
for|for
control|(
name|DbEntity
name|e
range|:
name|sourceDataMap
operator|.
name|getDbEntities
argument_list|()
control|)
block|{
name|e
operator|.
name|setCatalog
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|configuration
operator|.
name|isForceDataMapSchema
argument_list|()
condition|)
block|{
name|String
name|schema
init|=
name|targetDataMap
operator|.
name|getDefaultSchema
argument_list|()
decl_stmt|;
for|for
control|(
name|DbEntity
name|e
range|:
name|sourceDataMap
operator|.
name|getDbEntities
argument_list|()
control|)
block|{
name|e
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|hasTokensToImport
parameter_list|(
name|Collection
argument_list|<
name|MergerToken
argument_list|>
name|tokens
parameter_list|)
block|{
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Detected changes: No changes to import."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|checkDataMapProperties
parameter_list|(
name|DataMap
name|targetDataMap
parameter_list|,
name|DbImportConfiguration
name|config
parameter_list|)
block|{
name|String
name|defaultPackage
init|=
name|config
operator|.
name|getDefaultPackage
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultPackage
operator|==
literal|null
operator|||
name|isBlank
argument_list|(
name|defaultPackage
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|defaultPackage
operator|.
name|equals
argument_list|(
name|targetDataMap
operator|.
name|getDefaultPackage
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|syncDataMapProperties
parameter_list|(
name|DataMap
name|targetDataMap
parameter_list|,
name|DbImportConfiguration
name|config
parameter_list|)
block|{
name|String
name|defaultPackage
init|=
name|config
operator|.
name|getDefaultPackage
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultPackage
operator|==
literal|null
operator|||
name|isBlank
argument_list|(
name|defaultPackage
argument_list|)
condition|)
block|{
return|return;
block|}
name|targetDataMap
operator|.
name|setDefaultPackage
argument_list|(
name|defaultPackage
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|relationshipsSanity
parameter_list|(
name|DataMap
name|executed
parameter_list|)
block|{
for|for
control|(
name|ObjEntity
name|objEntity
range|:
name|executed
operator|.
name|getObjEntities
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ObjRelationship
argument_list|>
name|rels
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|objEntity
operator|.
name|getRelationships
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjRelationship
name|rel
range|:
name|rels
control|)
block|{
if|if
condition|(
name|rel
operator|.
name|getSourceEntity
argument_list|()
operator|==
literal|null
operator|||
name|rel
operator|.
name|getTargetEntity
argument_list|()
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Incorrect obj relationship source or target entity is null: "
operator|+
name|rel
argument_list|)
expr_stmt|;
name|objEntity
operator|.
name|removeRelationship
argument_list|(
name|rel
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|Collection
argument_list|<
name|MergerToken
argument_list|>
name|log
parameter_list|(
name|List
argument_list|<
name|MergerToken
argument_list|>
name|tokens
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Detected changes: No changes to import."
argument_list|)
expr_stmt|;
return|return
name|tokens
return|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Detected changes: "
argument_list|)
expr_stmt|;
for|for
control|(
name|MergerToken
name|token
range|:
name|tokens
control|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"    %-20s %s"
argument_list|,
name|token
operator|.
name|getTokenName
argument_list|()
argument_list|,
name|token
operator|.
name|getTokenValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
name|tokens
return|;
block|}
specifier|protected
name|DataMap
name|existingTargetMap
parameter_list|(
name|DbImportConfiguration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|configuration
operator|.
name|getTargetDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
operator|&&
name|file
operator|.
name|exists
argument_list|()
operator|&&
name|file
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|URLResource
name|configurationResource
init|=
operator|new
name|URLResource
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
decl_stmt|;
name|DataMap
name|dataMap
init|=
name|mapLoader
operator|.
name|load
argument_list|(
name|configurationResource
argument_list|)
decl_stmt|;
name|dataMap
operator|.
name|setNamespace
argument_list|(
operator|new
name|EntityResolver
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|dataMap
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|setConfigurationSource
argument_list|(
name|configurationResource
argument_list|)
expr_stmt|;
return|return
name|dataMap
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|DataMap
name|newTargetDataMap
parameter_list|(
name|DbImportConfiguration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|DataMap
name|dataMap
init|=
operator|new
name|DataMap
argument_list|()
decl_stmt|;
name|dataMap
operator|.
name|setName
argument_list|(
name|config
operator|.
name|getDataMapName
argument_list|()
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|setConfigurationSource
argument_list|(
operator|new
name|URLResource
argument_list|(
name|config
operator|.
name|getTargetDataMap
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|setNamespace
argument_list|(
operator|new
name|EntityResolver
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|dataMap
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// update map defaults
comment|// do not override default package of existing DataMap unless it is
comment|// explicitly requested by the plugin caller
name|String
name|defaultPackage
init|=
name|config
operator|.
name|getDefaultPackage
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultPackage
operator|!=
literal|null
operator|&&
name|defaultPackage
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|dataMap
operator|.
name|setDefaultPackage
argument_list|(
name|defaultPackage
argument_list|)
expr_stmt|;
block|}
name|CatalogFilter
index|[]
name|catalogs
init|=
name|config
operator|.
name|getDbLoaderConfig
argument_list|()
operator|.
name|getFiltersConfig
argument_list|()
operator|.
name|getCatalogs
argument_list|()
decl_stmt|;
if|if
condition|(
name|catalogs
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// do not override default catalog of existing DataMap unless it is
comment|// explicitly requested by the plugin caller, and the provided catalog is
comment|// not a pattern
name|String
name|catalog
init|=
name|catalogs
index|[
literal|0
index|]
operator|.
name|name
decl_stmt|;
if|if
condition|(
name|catalog
operator|!=
literal|null
operator|&&
name|catalog
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|catalog
operator|.
name|indexOf
argument_list|(
literal|'%'
argument_list|)
operator|<
literal|0
condition|)
block|{
name|dataMap
operator|.
name|setDefaultCatalog
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
block|}
comment|// do not override default schema of existing DataMap unless it is
comment|// explicitly requested by the plugin caller, and the provided schema is
comment|// not a pattern
name|SchemaFilter
index|[]
name|schemas
init|=
name|catalogs
index|[
literal|0
index|]
operator|.
name|schemas
decl_stmt|;
if|if
condition|(
name|schemas
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|String
name|schema
init|=
name|schemas
index|[
literal|0
index|]
operator|.
name|name
decl_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
operator|&&
name|schema
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|schema
operator|.
name|indexOf
argument_list|(
literal|'%'
argument_list|)
operator|<
literal|0
condition|)
block|{
name|dataMap
operator|.
name|setDefaultSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|dataMap
return|;
block|}
specifier|private
name|List
argument_list|<
name|MergerToken
argument_list|>
name|reverse
parameter_list|(
name|MergerTokenFactory
name|mergerTokenFactory
parameter_list|,
name|Iterable
argument_list|<
name|MergerToken
argument_list|>
name|mergeTokens
parameter_list|)
block|{
name|List
argument_list|<
name|MergerToken
argument_list|>
name|tokens
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MergerToken
name|token
range|:
name|mergeTokens
control|)
block|{
if|if
condition|(
name|token
operator|instanceof
name|AbstractToModelToken
condition|)
block|{
continue|continue;
block|}
name|tokens
operator|.
name|add
argument_list|(
name|token
operator|.
name|createReverse
argument_list|(
name|mergerTokenFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tokens
return|;
block|}
specifier|private
name|void
name|applyTokens
parameter_list|(
name|DataMap
name|targetDataMap
parameter_list|,
name|Collection
argument_list|<
name|MergerToken
argument_list|>
name|tokens
parameter_list|,
name|DbImportConfiguration
name|config
parameter_list|)
block|{
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Detected changes: No changes to import."
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|loadedObjEntities
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|ModelMergeDelegate
name|mergeDelegate
init|=
operator|new
name|ProxyModelMergeDelegate
argument_list|(
name|config
operator|.
name|createMergeDelegate
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|objEntityAdded
parameter_list|(
name|ObjEntity
name|ent
parameter_list|)
block|{
name|loadedObjEntities
operator|.
name|add
argument_list|(
name|ent
argument_list|)
expr_stmt|;
name|super
operator|.
name|objEntityAdded
argument_list|(
name|ent
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ObjectNameGenerator
name|nameGenerator
init|=
name|config
operator|.
name|createNameGenerator
argument_list|()
decl_stmt|;
name|MergerContext
name|mergerContext
init|=
name|MergerContext
operator|.
name|builder
argument_list|(
name|targetDataMap
argument_list|)
operator|.
name|delegate
argument_list|(
name|mergeDelegate
argument_list|)
operator|.
name|nameGenerator
argument_list|(
name|nameGenerator
argument_list|)
operator|.
name|usingJava7Types
argument_list|(
name|config
operator|.
name|isUseJava7Types
argument_list|()
argument_list|)
operator|.
name|meaningfulPKFilter
argument_list|(
name|config
operator|.
name|createMeaningfulPKFilter
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|MergerToken
name|token
range|:
name|tokens
control|)
block|{
try|try
block|{
name|token
operator|.
name|execute
argument_list|(
name|mergerContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Migration Error. Can't apply changes from token: "
operator|+
name|token
operator|.
name|getTokenName
argument_list|()
operator|+
literal|" ("
operator|+
name|token
operator|.
name|getTokenValue
argument_list|()
operator|+
literal|")"
decl_stmt|;
name|logger
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|mergerContext
operator|.
name|getValidationResult
argument_list|()
operator|.
name|addFailure
argument_list|(
operator|new
name|SimpleValidationFailure
argument_list|(
name|th
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ValidationResult
name|failures
init|=
name|mergerContext
operator|.
name|getValidationResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|failures
operator|.
name|hasFailures
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Migration Complete."
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"Migration finished. The following problem(s) were encountered and ignored."
argument_list|)
expr_stmt|;
for|for
control|(
name|ValidationFailure
name|failure
range|:
name|failures
operator|.
name|getFailures
argument_list|()
control|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|failure
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Migration Complete Successfully."
argument_list|)
expr_stmt|;
block|}
name|flattenManyToManyRelationships
argument_list|(
name|targetDataMap
argument_list|,
name|loadedObjEntities
argument_list|,
name|nameGenerator
argument_list|)
expr_stmt|;
name|relationshipsSanity
argument_list|(
name|targetDataMap
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|logMessages
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|messages
parameter_list|)
block|{
name|messages
operator|.
name|forEach
argument_list|(
name|logger
operator|::
name|info
argument_list|)
expr_stmt|;
block|}
comment|/**      * Save imported data.      * This can create DataMap and/or Project files.      */
specifier|protected
name|void
name|saveLoaded
parameter_list|(
name|DataMap
name|dataMap
parameter_list|,
name|DbImportConfiguration
name|config
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|ConfigurationTree
argument_list|<
name|ConfigurationNode
argument_list|>
name|projectRoot
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|getCayenneProject
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Old version of cdbimport, no Cayenne project, need to save only DataMap
name|projectRoot
operator|=
operator|new
name|ConfigurationTree
argument_list|<>
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Cayenne project is present
name|DataChannelDescriptor
name|dataChannelDescriptor
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|getCayenneProject
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// Cayenne project file exists, need to read it and push DataMap inside
name|URLResource
name|configurationResource
init|=
operator|new
name|URLResource
argument_list|(
name|config
operator|.
name|getCayenneProject
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
decl_stmt|;
name|ConfigurationTree
argument_list|<
name|DataChannelDescriptor
argument_list|>
name|configurationTree
init|=
name|dataChannelDescriptorLoader
operator|.
name|load
argument_list|(
name|configurationResource
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|configurationTree
operator|.
name|getLoadFailures
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unable to load cayenne project %s, %s"
argument_list|,
name|config
operator|.
name|getCayenneProject
argument_list|()
argument_list|,
name|configurationTree
operator|.
name|getLoadFailures
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
throw|;
block|}
name|dataChannelDescriptor
operator|=
name|configurationTree
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
comment|// remove old copy of DataMap if it's there
name|DataMap
name|oldDataMap
init|=
name|dataChannelDescriptor
operator|.
name|getDataMap
argument_list|(
name|dataMap
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDataMap
operator|!=
literal|null
condition|)
block|{
name|dataChannelDescriptor
operator|.
name|getDataMaps
argument_list|()
operator|.
name|remove
argument_list|(
name|oldDataMap
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// No project file yet, can simply create empty project with resulting DataMap
name|dataChannelDescriptor
operator|=
operator|new
name|DataChannelDescriptor
argument_list|()
expr_stmt|;
name|dataChannelDescriptor
operator|.
name|setName
argument_list|(
name|getProjectNameFromFileName
argument_list|(
name|config
operator|.
name|getCayenneProject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dataChannelDescriptor
operator|.
name|setConfigurationSource
argument_list|(
operator|new
name|URLResource
argument_list|(
name|config
operator|.
name|getCayenneProject
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Project file does not exist. New project will be saved into '"
operator|+
name|config
operator|.
name|getCayenneProject
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dataChannelDescriptor
operator|.
name|getDataMaps
argument_list|()
operator|.
name|add
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
name|projectRoot
operator|=
operator|new
name|ConfigurationTree
argument_list|<>
argument_list|(
name|dataChannelDescriptor
argument_list|)
expr_stmt|;
block|}
name|Project
name|project
init|=
operator|new
name|Project
argument_list|(
name|projectRoot
argument_list|)
decl_stmt|;
name|projectSaver
operator|.
name|save
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"All changes saved."
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getProjectNameFromFileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|int
name|xmlExtPosition
init|=
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|".xml"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|fileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|xmlExtPosition
operator|==
operator|-
literal|1
condition|?
name|fileName
operator|.
name|length
argument_list|()
else|:
name|xmlExtPosition
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|startsWith
argument_list|(
literal|"cayenne-"
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|"cayenne-"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|protected
name|DataMap
name|load
parameter_list|(
name|DbImportConfiguration
name|config
parameter_list|,
name|DbAdapter
name|adapter
parameter_list|,
name|Connection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createDbLoader
argument_list|(
name|adapter
argument_list|,
name|connection
argument_list|,
name|config
argument_list|)
operator|.
name|load
argument_list|()
return|;
block|}
specifier|protected
name|DbLoader
name|createDbLoader
parameter_list|(
name|DbAdapter
name|adapter
parameter_list|,
name|Connection
name|connection
parameter_list|,
name|DbImportConfiguration
name|config
parameter_list|)
block|{
return|return
operator|new
name|DbLoader
argument_list|(
name|adapter
argument_list|,
name|connection
argument_list|,
name|config
operator|.
name|getDbLoaderConfig
argument_list|()
argument_list|,
name|config
operator|.
name|createLoaderDelegate
argument_list|()
argument_list|,
name|config
operator|.
name|createNameGenerator
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

