begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
operator|.
name|token
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
operator|.
name|context
operator|.
name|MergerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
operator|.
name|factory
operator|.
name|MergerTokenFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
operator|.
name|token
operator|.
name|MergerToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_class
specifier|public
class|class
name|AddRelationshipToModel
extends|extends
name|AbstractToModelToken
operator|.
name|Entity
block|{
specifier|public
specifier|static
specifier|final
name|String
name|COMMA_SEPARATOR
init|=
literal|", "
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|COMMA_SEPARATOR_LENGTH
init|=
name|COMMA_SEPARATOR
operator|.
name|length
argument_list|()
decl_stmt|;
specifier|private
name|DbRelationship
name|relationship
decl_stmt|;
specifier|public
name|AddRelationshipToModel
parameter_list|(
name|DbEntity
name|entity
parameter_list|,
name|DbRelationship
name|relationship
parameter_list|)
block|{
name|super
argument_list|(
literal|"Add Relationship"
argument_list|,
literal|115
argument_list|,
name|entity
argument_list|)
expr_stmt|;
name|this
operator|.
name|relationship
operator|=
name|relationship
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|getTokenValue
parameter_list|(
name|DbRelationship
name|rel
parameter_list|)
block|{
name|String
name|attributes
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|rel
operator|.
name|getJoins
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|attributes
operator|=
name|rel
operator|.
name|getJoins
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTargetName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|DbJoin
name|dbJoin
range|:
name|rel
operator|.
name|getJoins
argument_list|()
control|)
block|{
name|attributes
operator|+=
name|dbJoin
operator|.
name|getTargetName
argument_list|()
operator|+
name|COMMA_SEPARATOR
expr_stmt|;
block|}
name|attributes
operator|=
literal|"{"
operator|+
name|attributes
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|attributes
operator|.
name|length
argument_list|()
operator|-
name|COMMA_SEPARATOR_LENGTH
argument_list|)
operator|+
literal|"}"
expr_stmt|;
block|}
return|return
name|rel
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|rel
operator|.
name|getSourceEntity
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"->"
operator|+
name|rel
operator|.
name|getTargetEntityName
argument_list|()
operator|+
literal|"."
operator|+
name|attributes
return|;
block|}
annotation|@
name|Override
specifier|public
name|MergerToken
name|createReverse
parameter_list|(
name|MergerTokenFactory
name|factory
parameter_list|)
block|{
return|return
name|factory
operator|.
name|createDropRelationshipToDb
argument_list|(
name|getEntity
argument_list|()
argument_list|,
name|relationship
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|MergerContext
name|context
parameter_list|)
block|{
comment|// Set name to relationship if it was created without it, e.g. in createReverse() action
if|if
condition|(
name|relationship
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|relationship
operator|.
name|setName
argument_list|(
name|context
operator|.
name|getNameGenerator
argument_list|()
operator|.
name|relationshipName
argument_list|(
name|relationship
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getEntity
argument_list|()
operator|.
name|addRelationship
argument_list|(
name|relationship
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjEntity
name|e
range|:
name|getEntity
argument_list|()
operator|.
name|mappedObjEntities
argument_list|()
control|)
block|{
name|context
operator|.
name|getEntityMergeSupport
argument_list|()
operator|.
name|synchronizeOnDbRelationshipAdded
argument_list|(
name|e
argument_list|,
name|relationship
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getDelegate
argument_list|()
operator|.
name|dbRelationshipAdded
argument_list|(
name|relationship
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTokenValue
parameter_list|()
block|{
name|String
name|attributes
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|relationship
operator|.
name|getJoins
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|attributes
operator|=
name|relationship
operator|.
name|getJoins
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTargetName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|DbJoin
name|dbJoin
range|:
name|relationship
operator|.
name|getJoins
argument_list|()
control|)
block|{
name|attributes
operator|+=
name|dbJoin
operator|.
name|getTargetName
argument_list|()
operator|+
name|COMMA_SEPARATOR
expr_stmt|;
block|}
name|attributes
operator|=
literal|"{"
operator|+
name|attributes
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|attributes
operator|.
name|length
argument_list|()
operator|-
name|COMMA_SEPARATOR_LENGTH
argument_list|)
operator|+
literal|"}"
expr_stmt|;
block|}
return|return
name|relationship
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|relationship
operator|.
name|getSourceEntity
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"->"
operator|+
name|relationship
operator|.
name|getTargetEntityName
argument_list|()
operator|+
literal|"."
operator|+
name|attributes
return|;
block|}
block|}
end_class

end_unit

