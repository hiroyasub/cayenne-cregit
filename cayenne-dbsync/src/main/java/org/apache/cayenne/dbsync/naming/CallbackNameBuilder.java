begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|naming
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNodeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_comment
comment|// TODO: fold CallbackMethod to org.apache.cayenne.map package and make it a ConfigurationNode
end_comment

begin_comment
comment|// then we can get rid off this fork...
end_comment

begin_class
class|class
name|CallbackNameBuilder
extends|extends
name|NameBuilder
block|{
specifier|public
name|CallbackNameBuilder
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|CallbackNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
name|String
name|baseName
init|=
name|this
operator|.
name|baseName
operator|!=
literal|null
condition|?
name|this
operator|.
name|baseName
else|:
literal|"onEvent"
decl_stmt|;
return|return
operator|new
name|DeduplicationVisitor
argument_list|(
name|parent
argument_list|,
name|baseName
argument_list|,
name|dupesPattern
argument_list|)
operator|.
name|resolve
argument_list|(
name|name
lambda|->
block|{
name|ObjEntity
name|entity
init|=
operator|(
name|ObjEntity
operator|)
name|parent
decl_stmt|;
if|if
condition|(
name|entity
operator|.
name|getCallbackMethods
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
condition|)
block|{
name|String
name|conflictingProperty
init|=
name|NameUtil
operator|.
name|uncapitalize
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
comment|// check if either attribute or relationship name matches...
if|if
condition|(
name|entity
operator|.
name|getAttribute
argument_list|(
name|conflictingProperty
argument_list|)
operator|!=
literal|null
operator|||
name|entity
operator|.
name|getRelationship
argument_list|(
name|conflictingProperty
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
argument_list|)
return|;
block|}
specifier|static
class|class
name|CallbackNode
implements|implements
name|ConfigurationNode
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|acceptVisitor
parameter_list|(
name|ConfigurationNodeVisitor
argument_list|<
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

