begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|naming
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|naming
operator|.
name|ExportedKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|naming
operator|.
name|NameConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jvnet
operator|.
name|inflector
operator|.
name|Noun
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * A strategy for generating names of entities, attributes etc.  *   * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|DefaultObjectNameGenerator
implements|implements
name|ObjectNameGenerator
block|{
annotation|@
name|Override
specifier|public
name|String
name|createDbRelationshipName
parameter_list|(
name|ExportedKey
name|key
parameter_list|,
name|boolean
name|toMany
parameter_list|)
block|{
name|String
name|name
decl_stmt|;
if|if
condition|(
name|toMany
condition|)
block|{
try|try
block|{
comment|/** 				 * by default we use english language rules here. uppercase is 				 * required for NameConverter to work properly 				 */
name|name
operator|=
name|Noun
operator|.
name|pluralOf
argument_list|(
name|key
operator|.
name|getFKTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|inflectorError
parameter_list|)
block|{
comment|/** 				 * seems that Inflector cannot be trusted. For instance, it 				 * throws an exception when invoked for word "ADDRESS" (although 				 * lower case works fine). To feel safe, we use superclass' 				 * behavior if something's gone wrong 				 */
return|return
name|key
operator|.
name|getFKTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
block|}
else|else
block|{
name|String
name|fkColName
init|=
name|key
operator|.
name|getFKColumnName
argument_list|()
decl_stmt|;
comment|// trim "ID" in the end
if|if
condition|(
name|fkColName
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|key
operator|.
name|getPKTableName
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|fkColName
operator|.
name|toUpperCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"_ID"
argument_list|)
operator|&&
name|fkColName
operator|.
name|length
argument_list|()
operator|>
literal|3
condition|)
block|{
name|name
operator|=
name|fkColName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fkColName
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fkColName
operator|.
name|toUpperCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"ID"
argument_list|)
operator|&&
name|fkColName
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
block|{
name|name
operator|=
name|fkColName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fkColName
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/** 				 * We don't want relationship to conflict with attribute, so 				 * we'd better return superior value with 'to' 				 */
name|name
operator|=
name|key
operator|.
name|getPKTableName
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|NameConverter
operator|.
name|underscoredToJava
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|createObjEntityName
parameter_list|(
name|DbEntity
name|dbEntity
parameter_list|)
block|{
return|return
name|NameConverter
operator|.
name|underscoredToJava
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|createObjAttributeName
parameter_list|(
name|DbAttribute
name|attr
parameter_list|)
block|{
return|return
name|NameConverter
operator|.
name|underscoredToJava
argument_list|(
name|attr
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|createObjRelationshipName
parameter_list|(
name|DbRelationship
name|dbRel
parameter_list|)
block|{
return|return
name|NameConverter
operator|.
name|underscoredToJava
argument_list|(
name|dbRel
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
end_class

end_unit

