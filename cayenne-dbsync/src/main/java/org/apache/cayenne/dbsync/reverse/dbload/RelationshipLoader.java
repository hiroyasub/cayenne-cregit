begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbload
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|naming
operator|.
name|NameBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|naming
operator|.
name|ObjectNameGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|EqualsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|public
class|class
name|RelationshipLoader
extends|extends
name|AbstractLoader
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RelationshipLoader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ObjectNameGenerator
name|nameGenerator
decl_stmt|;
name|RelationshipLoader
parameter_list|(
name|DbLoaderConfiguration
name|config
parameter_list|,
name|DbLoaderDelegate
name|delegate
parameter_list|,
name|ObjectNameGenerator
name|nameGenerator
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|,
name|config
argument_list|,
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|nameGenerator
operator|=
name|nameGenerator
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|DatabaseMetaData
name|metaData
parameter_list|,
name|DbLoadDataStore
name|map
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|config
operator|.
name|isSkipRelationshipsLoading
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|ExportedKey
argument_list|>
argument_list|>
name|entry
range|:
name|map
operator|.
name|getExportedKeysEntrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Process keys for: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|ExportedKey
argument_list|>
name|exportedKeys
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ExportedKey
name|key
init|=
name|exportedKeys
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
name|ExportedKey
operator|.
name|KeyData
name|PK
init|=
name|key
operator|.
name|getPk
argument_list|()
decl_stmt|;
name|ExportedKey
operator|.
name|KeyData
name|FK
init|=
name|key
operator|.
name|getFk
argument_list|()
decl_stmt|;
name|DbEntity
name|pkEntity
init|=
name|map
operator|.
name|getDbEntity
argument_list|(
name|PK
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
name|DbEntity
name|fkEntity
init|=
name|map
operator|.
name|getDbEntity
argument_list|(
name|FK
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pkEntity
operator|==
literal|null
operator|||
name|fkEntity
operator|==
literal|null
condition|)
block|{
comment|// Check for existence of this entities were made in creation of ExportedKey
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|!
operator|new
name|EqualsBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|pkEntity
operator|.
name|getCatalog
argument_list|()
argument_list|,
name|PK
operator|.
name|getCatalog
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|pkEntity
operator|.
name|getSchema
argument_list|()
argument_list|,
name|PK
operator|.
name|getSchema
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|fkEntity
operator|.
name|getCatalog
argument_list|()
argument_list|,
name|FK
operator|.
name|getCatalog
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|fkEntity
operator|.
name|getSchema
argument_list|()
argument_list|,
name|PK
operator|.
name|getSchema
argument_list|()
argument_list|)
operator|.
name|isEquals
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Skip relation: '"
operator|+
name|key
operator|+
literal|"' because it related to objects from other catalog/schema"
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"     relation primary key: '"
operator|+
name|PK
operator|.
name|getCatalog
argument_list|()
operator|+
literal|"."
operator|+
name|PK
operator|.
name|getSchema
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"       primary key entity: '"
operator|+
name|pkEntity
operator|.
name|getCatalog
argument_list|()
operator|+
literal|"."
operator|+
name|pkEntity
operator|.
name|getSchema
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"     relation foreign key: '"
operator|+
name|FK
operator|.
name|getCatalog
argument_list|()
operator|+
literal|"."
operator|+
name|FK
operator|.
name|getSchema
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"       foreign key entity: '"
operator|+
name|fkEntity
operator|.
name|getCatalog
argument_list|()
operator|+
literal|"."
operator|+
name|fkEntity
operator|.
name|getSchema
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// forwardRelationship is a reference from table with primary key
comment|// it is what exactly we load from db
name|DbRelationship
name|forwardRelationship
init|=
operator|new
name|DbRelationship
argument_list|()
decl_stmt|;
name|forwardRelationship
operator|.
name|setSourceEntity
argument_list|(
name|pkEntity
argument_list|)
expr_stmt|;
name|forwardRelationship
operator|.
name|setTargetEntityName
argument_list|(
name|fkEntity
argument_list|)
expr_stmt|;
comment|// TODO: dirty and non-transparent... using DbRelationshipDetected for the benefit of the merge package.
comment|// This info is available from joins....
name|DbRelationshipDetected
name|reverseRelationship
init|=
operator|new
name|DbRelationshipDetected
argument_list|()
decl_stmt|;
name|reverseRelationship
operator|.
name|setFkName
argument_list|(
name|FK
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|reverseRelationship
operator|.
name|setSourceEntity
argument_list|(
name|fkEntity
argument_list|)
expr_stmt|;
name|reverseRelationship
operator|.
name|setTargetEntityName
argument_list|(
name|pkEntity
argument_list|)
expr_stmt|;
name|reverseRelationship
operator|.
name|setToMany
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|createAndAppendJoins
argument_list|(
name|exportedKeys
argument_list|,
name|pkEntity
argument_list|,
name|fkEntity
argument_list|,
name|forwardRelationship
argument_list|,
name|reverseRelationship
argument_list|)
expr_stmt|;
name|boolean
name|toDependentPK
init|=
name|isToDependentPK
argument_list|(
name|forwardRelationship
argument_list|)
decl_stmt|;
name|boolean
name|toMany
init|=
name|isToMany
argument_list|(
name|toDependentPK
argument_list|,
name|fkEntity
argument_list|,
name|forwardRelationship
argument_list|)
decl_stmt|;
name|forwardRelationship
operator|.
name|setToDependentPK
argument_list|(
name|toDependentPK
argument_list|)
expr_stmt|;
name|forwardRelationship
operator|.
name|setToMany
argument_list|(
name|toMany
argument_list|)
expr_stmt|;
comment|// set relationship names only after their joins are ready ...
comment|// generator logic is based on relationship state...
name|forwardRelationship
operator|.
name|setName
argument_list|(
name|NameBuilder
operator|.
name|builder
argument_list|(
name|forwardRelationship
argument_list|,
name|pkEntity
argument_list|)
operator|.
name|baseName
argument_list|(
name|nameGenerator
operator|.
name|relationshipName
argument_list|(
name|forwardRelationship
argument_list|)
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|reverseRelationship
operator|.
name|setName
argument_list|(
name|NameBuilder
operator|.
name|builder
argument_list|(
name|reverseRelationship
argument_list|,
name|fkEntity
argument_list|)
operator|.
name|baseName
argument_list|(
name|nameGenerator
operator|.
name|relationshipName
argument_list|(
name|reverseRelationship
argument_list|)
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|delegate
operator|.
name|dbRelationshipLoaded
argument_list|(
name|fkEntity
argument_list|,
name|reverseRelationship
argument_list|)
condition|)
block|{
name|fkEntity
operator|.
name|addRelationship
argument_list|(
name|reverseRelationship
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delegate
operator|.
name|dbRelationshipLoaded
argument_list|(
name|pkEntity
argument_list|,
name|forwardRelationship
argument_list|)
condition|)
block|{
name|pkEntity
operator|.
name|addRelationship
argument_list|(
name|forwardRelationship
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|isToMany
parameter_list|(
name|boolean
name|toDependentPK
parameter_list|,
name|DbEntity
name|fkEntity
parameter_list|,
name|DbRelationship
name|forwardRelationship
parameter_list|)
block|{
return|return
operator|!
name|toDependentPK
operator|||
name|fkEntity
operator|.
name|getPrimaryKeys
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
name|forwardRelationship
operator|.
name|getJoins
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|isToDependentPK
parameter_list|(
name|DbRelationship
name|forwardRelationship
parameter_list|)
block|{
for|for
control|(
name|DbJoin
name|dbJoin
range|:
name|forwardRelationship
operator|.
name|getJoins
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|dbJoin
operator|.
name|getTarget
argument_list|()
operator|.
name|isPrimaryKey
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|createAndAppendJoins
parameter_list|(
name|Set
argument_list|<
name|ExportedKey
argument_list|>
name|exportedKeys
parameter_list|,
name|DbEntity
name|pkEntity
parameter_list|,
name|DbEntity
name|fkEntity
parameter_list|,
name|DbRelationship
name|forwardRelationship
parameter_list|,
name|DbRelationship
name|reverseRelationship
parameter_list|)
block|{
for|for
control|(
name|ExportedKey
name|exportedKey
range|:
name|exportedKeys
control|)
block|{
comment|// Create and append joins
name|String
name|pkName
init|=
name|exportedKey
operator|.
name|getPk
argument_list|()
operator|.
name|getColumn
argument_list|()
decl_stmt|;
name|String
name|fkName
init|=
name|exportedKey
operator|.
name|getFk
argument_list|()
operator|.
name|getColumn
argument_list|()
decl_stmt|;
comment|// skip invalid joins...
name|DbAttribute
name|pkAtt
init|=
name|pkEntity
operator|.
name|getAttribute
argument_list|(
name|pkName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pkAtt
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"no attribute for declared primary key: "
operator|+
name|pkName
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|DbAttribute
name|fkAtt
init|=
name|fkEntity
operator|.
name|getAttribute
argument_list|(
name|fkName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fkAtt
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"no attribute for declared foreign key: "
operator|+
name|fkName
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|forwardRelationship
operator|.
name|addJoin
argument_list|(
operator|new
name|DbJoin
argument_list|(
name|forwardRelationship
argument_list|,
name|pkName
argument_list|,
name|fkName
argument_list|)
argument_list|)
expr_stmt|;
name|reverseRelationship
operator|.
name|addJoin
argument_list|(
operator|new
name|DbJoin
argument_list|(
name|reverseRelationship
argument_list|,
name|fkName
argument_list|,
name|pkName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

