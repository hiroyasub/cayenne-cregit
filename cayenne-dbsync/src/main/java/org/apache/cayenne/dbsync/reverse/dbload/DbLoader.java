begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbload
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|naming
operator|.
name|ObjectNameGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Loads DB schema into a DataMap, creating DbEntities and Procedures. Consists of a list of specialized loaders that  * iteratively load parts of metadata, such as Entity names, Attributes, Relationships, etc.  *  * @see AbstractLoader and its descendants  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|DbLoader
block|{
specifier|private
name|List
argument_list|<
name|AbstractLoader
argument_list|>
name|loaders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Connection
name|connection
decl_stmt|;
specifier|private
specifier|final
name|DbAdapter
name|adapter
decl_stmt|;
specifier|private
specifier|final
name|DbLoaderConfiguration
name|config
decl_stmt|;
specifier|private
specifier|final
name|DbLoaderDelegate
name|delegate
decl_stmt|;
specifier|private
specifier|final
name|ObjectNameGenerator
name|nameGenerator
decl_stmt|;
specifier|public
name|DbLoader
parameter_list|(
name|DbAdapter
name|adapter
parameter_list|,
name|Connection
name|connection
parameter_list|,
name|DbLoaderConfiguration
name|config
parameter_list|,
name|DbLoaderDelegate
name|delegate
parameter_list|,
name|ObjectNameGenerator
name|nameGenerator
parameter_list|)
block|{
name|this
operator|.
name|adapter
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|this
operator|.
name|nameGenerator
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|nameGenerator
argument_list|)
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
operator|==
literal|null
condition|?
operator|new
name|DefaultDbLoaderDelegate
argument_list|()
else|:
name|delegate
expr_stmt|;
name|createLoaders
argument_list|()
expr_stmt|;
block|}
comment|/**      * Order of loaders is important, as loader can rely on data previously loaded      */
specifier|private
name|void
name|createLoaders
parameter_list|()
block|{
name|loaders
operator|.
name|add
argument_list|(
operator|new
name|EntityLoader
argument_list|(
name|adapter
argument_list|,
name|config
argument_list|,
name|delegate
argument_list|)
argument_list|)
expr_stmt|;
name|loaders
operator|.
name|add
argument_list|(
operator|new
name|AttributeLoader
argument_list|(
name|adapter
argument_list|,
name|config
argument_list|,
name|delegate
argument_list|)
argument_list|)
expr_stmt|;
name|loaders
operator|.
name|add
argument_list|(
operator|new
name|PrimaryKeyLoader
argument_list|(
name|config
argument_list|,
name|delegate
argument_list|)
argument_list|)
expr_stmt|;
name|loaders
operator|.
name|add
argument_list|(
operator|new
name|ExportedKeyLoader
argument_list|(
name|config
argument_list|,
name|delegate
argument_list|)
argument_list|)
expr_stmt|;
name|loaders
operator|.
name|add
argument_list|(
operator|new
name|RelationshipLoader
argument_list|(
name|config
argument_list|,
name|delegate
argument_list|,
name|nameGenerator
argument_list|)
argument_list|)
expr_stmt|;
name|loaders
operator|.
name|add
argument_list|(
operator|new
name|ProcedureLoader
argument_list|(
name|adapter
argument_list|,
name|config
argument_list|,
name|delegate
argument_list|)
argument_list|)
expr_stmt|;
name|loaders
operator|.
name|add
argument_list|(
operator|new
name|ProcedureColumnLoader
argument_list|(
name|adapter
argument_list|,
name|config
argument_list|,
name|delegate
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return new DataMap with data loaded from DB      */
specifier|public
name|DataMap
name|load
parameter_list|()
throws|throws
name|SQLException
block|{
name|DbLoadDataStore
name|loadedData
init|=
operator|new
name|DbLoadDataStore
argument_list|()
decl_stmt|;
name|DatabaseMetaData
name|metaData
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
for|for
control|(
name|AbstractLoader
name|loader
range|:
name|loaders
control|)
block|{
name|loader
operator|.
name|load
argument_list|(
name|metaData
argument_list|,
name|loadedData
argument_list|)
expr_stmt|;
block|}
return|return
name|loadedData
return|;
block|}
comment|//// Utility methods that better be moved somewhere ////
comment|/**      * Retrieves catalogs for a given connection.      * using a static method for catalog loading as we don't need a full DbLoader for this operation      * @return List with the catalog names; empty list if none found.      */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|loadCatalogs
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
init|(
name|ResultSet
name|rs
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getCatalogs
argument_list|()
init|)
block|{
return|return
name|getStrings
argument_list|(
name|rs
argument_list|,
literal|1
argument_list|)
return|;
block|}
block|}
comment|/**      * Retrieves the schemas for the given connection.      * using a static method for catalog loading as we don't need a full DbLoader for this operation      * @return List with the schema names; empty list if none found.      */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|loadSchemas
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
init|(
name|ResultSet
name|rs
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getSchemas
argument_list|()
init|)
block|{
return|return
name|getStrings
argument_list|(
name|rs
argument_list|,
literal|1
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getStrings
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|int
name|columnIndex
parameter_list|)
throws|throws
name|SQLException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|strings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|strings
operator|.
name|add
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
name|columnIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|strings
return|;
block|}
block|}
end_class

end_unit

