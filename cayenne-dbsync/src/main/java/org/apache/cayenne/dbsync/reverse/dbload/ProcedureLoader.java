begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbload
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
operator|.
name|CatalogFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
operator|.
name|PatternFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
operator|.
name|SchemaFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ProcedureLoader
extends|extends
name|PerCatalogAndSchemaLoader
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProcedureLoader
operator|.
name|class
argument_list|)
decl_stmt|;
name|ProcedureLoader
parameter_list|(
name|DbAdapter
name|adapter
parameter_list|,
name|DbLoaderConfiguration
name|config
parameter_list|,
name|DbLoaderDelegate
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|adapter
argument_list|,
name|config
argument_list|,
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ResultSet
name|getResultSet
parameter_list|(
name|String
name|catalogName
parameter_list|,
name|String
name|schemaName
parameter_list|,
name|DatabaseMetaData
name|metaData
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|metaData
operator|.
name|getProcedures
argument_list|(
name|catalogName
argument_list|,
name|schemaName
argument_list|,
name|WILDCARD
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|shouldLoad
parameter_list|(
name|CatalogFilter
name|catalog
parameter_list|,
name|SchemaFilter
name|schema
parameter_list|)
block|{
name|PatternFilter
name|filter
init|=
name|config
operator|.
name|getFiltersConfig
argument_list|()
operator|.
name|proceduresFilter
argument_list|(
name|catalog
operator|.
name|name
argument_list|,
name|schema
operator|.
name|name
argument_list|)
decl_stmt|;
return|return
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processResultSet
parameter_list|(
name|CatalogFilter
name|catalog
parameter_list|,
name|SchemaFilter
name|schema
parameter_list|,
name|DbLoadDataStore
name|map
parameter_list|,
name|ResultSet
name|rs
parameter_list|)
throws|throws
name|SQLException
block|{
name|PatternFilter
name|filter
init|=
name|config
operator|.
name|getFiltersConfig
argument_list|()
operator|.
name|proceduresFilter
argument_list|(
name|catalog
operator|.
name|name
argument_list|,
name|schema
operator|.
name|name
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"PROCEDURE_NAME"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|filter
operator|.
name|isIncluded
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"skipping Cayenne PK procedure: "
operator|+
name|name
argument_list|)
expr_stmt|;
return|return;
block|}
name|Procedure
name|procedure
init|=
operator|new
name|Procedure
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|procedure
operator|.
name|setCatalog
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"PROCEDURE_CAT"
argument_list|)
argument_list|)
expr_stmt|;
name|procedure
operator|.
name|setSchema
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"PROCEDURE_SCHEM"
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|rs
operator|.
name|getShort
argument_list|(
literal|"PROCEDURE_TYPE"
argument_list|)
condition|)
block|{
case|case
name|DatabaseMetaData
operator|.
name|procedureNoResult
case|:
case|case
name|DatabaseMetaData
operator|.
name|procedureResultUnknown
case|:
name|procedure
operator|.
name|setReturningValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatabaseMetaData
operator|.
name|procedureReturnsResult
case|:
name|procedure
operator|.
name|setReturningValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
name|map
operator|.
name|addProcedureSafe
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

