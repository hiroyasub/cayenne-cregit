begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
operator|.
name|factory
operator|.
name|MergerTokenFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
operator|.
name|token
operator|.
name|MergerToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
operator|.
name|FiltersConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_comment
comment|/**  * Merger of relationships.  * Scoped to single DbEntity and it's counterpart.  */
end_comment

begin_class
specifier|public
class|class
name|DbRelationshipMerger
extends|extends
name|AbstractMerger
argument_list|<
name|DbEntity
argument_list|,
name|DbRelationship
argument_list|>
block|{
specifier|private
specifier|final
name|boolean
name|skipRelationshipsTokens
decl_stmt|;
specifier|private
specifier|final
name|FiltersConfig
name|filtersConfig
decl_stmt|;
name|DbRelationshipMerger
parameter_list|(
name|MergerTokenFactory
name|tokenFactory
parameter_list|,
name|boolean
name|skipRelationshipsTokens
parameter_list|,
name|FiltersConfig
name|filtersConfig
parameter_list|)
block|{
name|super
argument_list|(
name|tokenFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|skipRelationshipsTokens
operator|=
name|skipRelationshipsTokens
expr_stmt|;
name|this
operator|.
name|filtersConfig
operator|=
name|filtersConfig
expr_stmt|;
block|}
annotation|@
name|Override
name|MergerDictionaryDiff
argument_list|<
name|DbRelationship
argument_list|>
name|createDiff
parameter_list|(
name|DbEntity
name|original
parameter_list|,
name|DbEntity
name|imported
parameter_list|)
block|{
return|return
operator|new
name|MergerDictionaryDiff
operator|.
name|Builder
argument_list|<
name|DbRelationship
argument_list|>
argument_list|()
operator|.
name|originalDictionary
argument_list|(
operator|new
name|DbRelationshipDictionary
argument_list|(
name|original
argument_list|,
name|filtersConfig
argument_list|)
argument_list|)
operator|.
name|importedDictionary
argument_list|(
operator|new
name|DbRelationshipDictionary
argument_list|(
name|imported
argument_list|,
name|filtersConfig
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|DbEntity
name|getOriginalSourceDbEntity
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|)
block|{
return|return
name|getOriginalDictionary
argument_list|()
operator|.
name|getByName
argument_list|(
name|relationship
operator|.
name|getSourceEntity
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|DbEntity
name|getOriginalTargetDbEntity
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|)
block|{
return|return
name|getOriginalDictionary
argument_list|()
operator|.
name|getByName
argument_list|(
name|relationship
operator|.
name|getTargetEntityName
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @param imported DbRelationship that is in db but not in model      * @return generated tokens      */
annotation|@
name|Override
name|Collection
argument_list|<
name|MergerToken
argument_list|>
name|createTokensForMissingOriginal
parameter_list|(
name|DbRelationship
name|imported
parameter_list|)
block|{
name|DbEntity
name|originalDbEntity
init|=
name|getOriginalSourceDbEntity
argument_list|(
name|imported
argument_list|)
decl_stmt|;
name|DbEntity
name|targetEntity
init|=
name|getOriginalTargetDbEntity
argument_list|(
name|imported
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetEntity
operator|!=
literal|null
condition|)
block|{
name|imported
operator|.
name|setTargetEntityName
argument_list|(
name|targetEntity
argument_list|)
expr_stmt|;
block|}
name|imported
operator|.
name|setSourceEntity
argument_list|(
name|originalDbEntity
argument_list|)
expr_stmt|;
comment|// manipulate the joins to match the DbAttributes in the model
for|for
control|(
name|DbJoin
name|join
range|:
name|imported
operator|.
name|getJoins
argument_list|()
control|)
block|{
name|DbAttribute
name|sourceAttr
init|=
name|findDbAttribute
argument_list|(
name|originalDbEntity
argument_list|,
name|join
operator|.
name|getSourceName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceAttr
operator|!=
literal|null
condition|)
block|{
name|join
operator|.
name|setSourceName
argument_list|(
name|sourceAttr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DbAttribute
name|targetAttr
init|=
name|findDbAttribute
argument_list|(
name|targetEntity
argument_list|,
name|join
operator|.
name|getTargetName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetAttr
operator|!=
literal|null
condition|)
block|{
name|join
operator|.
name|setTargetName
argument_list|(
name|targetAttr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add all relationships. Tokens will decide whether or not to execute
name|MergerToken
name|token
init|=
name|getTokenFactory
argument_list|()
operator|.
name|createDropRelationshipToDb
argument_list|(
name|originalDbEntity
argument_list|,
name|imported
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|token
argument_list|)
return|;
block|}
comment|/**      * @param original DbRelationship that is in model but not in db      * @return generated tokens      */
annotation|@
name|Override
name|Collection
argument_list|<
name|MergerToken
argument_list|>
name|createTokensForMissingImported
parameter_list|(
name|DbRelationship
name|original
parameter_list|)
block|{
if|if
condition|(
name|skipRelationshipsTokens
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DbEntity
name|originalDbEntity
init|=
name|getOriginalSourceDbEntity
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|MergerToken
name|token
init|=
name|getTokenFactory
argument_list|()
operator|.
name|createAddRelationshipToDb
argument_list|(
name|originalDbEntity
argument_list|,
name|original
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|token
argument_list|)
return|;
block|}
comment|/**      *      * @param same pair of found in model and in db DbRelationships      * @return generated tokens      */
annotation|@
name|Override
name|Collection
argument_list|<
name|MergerToken
argument_list|>
name|createTokensForSame
parameter_list|(
name|MergerDiffPair
argument_list|<
name|DbRelationship
argument_list|>
name|same
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/**      * case insensitive search for a {@link DbAttribute} in a {@link DbEntity}      * by name      */
specifier|private
name|DbAttribute
name|findDbAttribute
parameter_list|(
name|DbEntity
name|entity
parameter_list|,
name|String
name|caseInsensitiveName
parameter_list|)
block|{
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|DbAttribute
name|a
range|:
name|entity
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|caseInsensitiveName
argument_list|)
condition|)
block|{
return|return
name|a
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|MergerToken
argument_list|>
name|createMergeTokens
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

