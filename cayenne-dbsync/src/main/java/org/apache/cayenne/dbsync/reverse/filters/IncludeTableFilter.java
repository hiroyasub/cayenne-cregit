begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/** * @since 4.0. */
end_comment

begin_class
specifier|public
class|class
name|IncludeTableFilter
implements|implements
name|Comparable
argument_list|<
name|IncludeTableFilter
argument_list|>
block|{
specifier|public
specifier|final
name|Pattern
name|pattern
decl_stmt|;
specifier|public
specifier|final
name|PatternFilter
name|columnsFilter
decl_stmt|;
comment|/**      * @since 4.1      */
specifier|public
specifier|final
name|PatternFilter
name|relationshipFilter
decl_stmt|;
specifier|public
name|IncludeTableFilter
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
argument_list|(
name|pattern
argument_list|,
name|PatternFilter
operator|.
name|INCLUDE_EVERYTHING
argument_list|,
name|PatternFilter
operator|.
name|INCLUDE_EVERYTHING
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IncludeTableFilter
parameter_list|(
name|String
name|pattern
parameter_list|,
name|PatternFilter
name|columnsFilter
parameter_list|)
block|{
name|this
argument_list|(
name|pattern
argument_list|,
name|columnsFilter
argument_list|,
name|PatternFilter
operator|.
name|INCLUDE_EVERYTHING
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since 4.1      */
specifier|public
name|IncludeTableFilter
parameter_list|(
name|String
name|pattern
parameter_list|,
name|PatternFilter
name|columnsFilter
parameter_list|,
name|PatternFilter
name|relationshipFilter
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|PatternFilter
operator|.
name|pattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|this
operator|.
name|columnsFilter
operator|=
name|columnsFilter
expr_stmt|;
name|this
operator|.
name|relationshipFilter
operator|=
name|relationshipFilter
expr_stmt|;
block|}
specifier|public
name|boolean
name|isIncludeColumn
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|columnsFilter
operator|.
name|isIncluded
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * @since 4.1      */
specifier|public
name|boolean
name|isIncludeRelationship
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|relationshipFilter
operator|.
name|isIncluded
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|IncludeTableFilter
name|o
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|==
literal|null
operator|&&
name|o
operator|.
name|pattern
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
if|else if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
if|else if
condition|(
name|o
operator|.
name|pattern
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
name|pattern
operator|.
name|pattern
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|pattern
operator|.
name|pattern
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|,
literal|""
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|StringBuilder
name|toString
parameter_list|(
name|StringBuilder
name|res
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|res
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
literal|"Include: "
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|pattern
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" Columns: "
argument_list|)
expr_stmt|;
name|columnsFilter
operator|.
name|toString
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|res
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
block|}
end_class

end_unit

