begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
operator|.
name|NamespaceAwareNestedTagHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
class|class
name|CatalogHandler
extends|extends
name|NamespaceAwareNestedTagHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CATALOG_TAG
init|=
literal|"catalog"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CATALOG_NAME_TAG
init|=
literal|"name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SCHEMA_TAG
init|=
literal|"schema"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INCLUDE_TABLE_TAG
init|=
literal|"includeTable"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXCLUDE_TABLE_TAG
init|=
literal|"excludeTable"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INCLUDE_COLUMN_TAG
init|=
literal|"includeColumn"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXCLUDE_COLUMN_TAG
init|=
literal|"excludeColumn"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INCLUDE_PROCEDURE_TAG
init|=
literal|"includeProcedure"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXCLUDE_PROCEDURE_TAG
init|=
literal|"excludeProcedure"
decl_stmt|;
specifier|private
name|ReverseEngineering
name|configuration
decl_stmt|;
specifier|private
name|Catalog
name|catalog
decl_stmt|;
name|CatalogHandler
parameter_list|(
name|NamespaceAwareNestedTagHandler
name|parentHandler
parameter_list|,
name|ReverseEngineering
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|parentHandler
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ContentHandler
name|createChildTagHandler
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|namespaceURI
operator|.
name|equals
argument_list|(
name|targetNamespace
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|localName
condition|)
block|{
case|case
name|SCHEMA_TAG
case|:
return|return
operator|new
name|SchemaHandler
argument_list|(
name|this
argument_list|,
name|catalog
argument_list|)
return|;
case|case
name|INCLUDE_TABLE_TAG
case|:
return|return
operator|new
name|IncludeTableHandler
argument_list|(
name|this
argument_list|,
name|catalog
argument_list|)
return|;
block|}
block|}
return|return
name|super
operator|.
name|createChildTagHandler
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|,
name|attributes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|processElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
switch|switch
condition|(
name|localName
condition|)
block|{
case|case
name|CATALOG_TAG
case|:
name|createCatalog
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processCharData
parameter_list|(
name|String
name|localName
parameter_list|,
name|String
name|data
parameter_list|)
block|{
switch|switch
condition|(
name|localName
condition|)
block|{
case|case
name|INCLUDE_TABLE_TAG
case|:
name|createIncludeTable
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|CATALOG_NAME_TAG
case|:
name|createCatalogName
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXCLUDE_TABLE_TAG
case|:
name|createExcludeTable
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|INCLUDE_COLUMN_TAG
case|:
name|createIncludeColumn
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXCLUDE_COLUMN_TAG
case|:
name|createExcludeColumn
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|INCLUDE_PROCEDURE_TAG
case|:
name|createIncludeProcedure
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXCLUDE_PROCEDURE_TAG
case|:
name|createExcludeProcedure
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|private
name|void
name|createIncludeTable
parameter_list|(
name|String
name|includeTableData
parameter_list|)
block|{
if|if
condition|(
name|includeTableData
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|catalog
operator|!=
literal|null
condition|)
block|{
name|IncludeTable
name|includeTable
init|=
operator|new
name|IncludeTable
argument_list|()
decl_stmt|;
name|includeTable
operator|.
name|setName
argument_list|(
name|includeTableData
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|addIncludeTable
argument_list|(
name|includeTable
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createCatalogName
parameter_list|(
name|String
name|catalogName
parameter_list|)
block|{
if|if
condition|(
name|catalogName
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|catalog
operator|!=
literal|null
condition|)
block|{
name|catalog
operator|.
name|setName
argument_list|(
name|catalogName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createExcludeProcedure
parameter_list|(
name|String
name|excludeProcedure
parameter_list|)
block|{
if|if
condition|(
name|excludeProcedure
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|catalog
operator|!=
literal|null
condition|)
block|{
name|catalog
operator|.
name|addExcludeProcedure
argument_list|(
operator|new
name|ExcludeProcedure
argument_list|(
name|excludeProcedure
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createIncludeProcedure
parameter_list|(
name|String
name|includeProcedure
parameter_list|)
block|{
if|if
condition|(
name|includeProcedure
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|catalog
operator|!=
literal|null
condition|)
block|{
name|catalog
operator|.
name|addIncludeProcedure
argument_list|(
operator|new
name|IncludeProcedure
argument_list|(
name|includeProcedure
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createExcludeColumn
parameter_list|(
name|String
name|excludeColumn
parameter_list|)
block|{
if|if
condition|(
name|excludeColumn
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|catalog
operator|!=
literal|null
condition|)
block|{
name|catalog
operator|.
name|addExcludeColumn
argument_list|(
operator|new
name|ExcludeColumn
argument_list|(
name|excludeColumn
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createIncludeColumn
parameter_list|(
name|String
name|includeColumn
parameter_list|)
block|{
if|if
condition|(
name|includeColumn
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|catalog
operator|!=
literal|null
condition|)
block|{
name|catalog
operator|.
name|addIncludeColumn
argument_list|(
operator|new
name|IncludeColumn
argument_list|(
name|includeColumn
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createExcludeTable
parameter_list|(
name|String
name|excludeTable
parameter_list|)
block|{
if|if
condition|(
name|excludeTable
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|catalog
operator|!=
literal|null
condition|)
block|{
name|catalog
operator|.
name|addExcludeTable
argument_list|(
operator|new
name|ExcludeTable
argument_list|(
name|excludeTable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createCatalog
parameter_list|()
block|{
name|catalog
operator|=
operator|new
name|Catalog
argument_list|()
expr_stmt|;
name|configuration
operator|.
name|addCatalog
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

