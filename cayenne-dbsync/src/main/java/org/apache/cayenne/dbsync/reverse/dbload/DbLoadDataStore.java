begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbload
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DetectedDbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Procedure
import|;
end_import

begin_comment
comment|/**  * Temporary storage for loaded from DB DbEntities and Procedures.  * DataMap is used but it's functionality is excessive and  * there can be unwanted side effects.  * But we can't get rid of it right now as parallel data structure  * for dbEntity, attributes, procedures etc.. must be created  * or some other work around should be implemented because  * some functionality relies on side effects (e.g. entity resolution  * in relationship)  */
end_comment

begin_class
specifier|public
class|class
name|DbLoadDataStore
extends|extends
name|DataMap
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|ExportedKey
argument_list|>
argument_list|>
name|exportedKeys
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|DbLoadDataStore
parameter_list|()
block|{
name|super
argument_list|(
literal|"__generated_by_dbloader__"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addDbEntity
parameter_list|(
name|DbEntity
name|entity
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|entity
operator|instanceof
name|DetectedDbEntity
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only DetectedDbEntity can be inserted in this map"
argument_list|)
throw|;
block|}
name|super
operator|.
name|addDbEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
name|DbEntity
name|addDbEntitySafe
parameter_list|(
name|DbEntity
name|entity
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|entity
operator|instanceof
name|DetectedDbEntity
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only DetectedDbEntity can be inserted in this map"
argument_list|)
throw|;
block|}
name|DbEntity
name|old
init|=
name|getDbEntity
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|removeDbEntity
argument_list|(
name|old
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addDbEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
return|return
name|old
return|;
block|}
name|void
name|addProcedureSafe
parameter_list|(
name|Procedure
name|procedure
parameter_list|)
block|{
name|Procedure
name|old
init|=
name|getProcedure
argument_list|(
name|procedure
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|removeProcedure
argument_list|(
name|old
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addProcedure
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
block|}
name|void
name|addExportedKey
parameter_list|(
name|ExportedKey
name|key
parameter_list|)
block|{
name|Set
argument_list|<
name|ExportedKey
argument_list|>
name|exportedKeys
init|=
name|this
operator|.
name|exportedKeys
operator|.
name|get
argument_list|(
name|key
operator|.
name|getStrKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exportedKeys
operator|==
literal|null
condition|)
block|{
name|exportedKeys
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|exportedKeys
operator|.
name|put
argument_list|(
name|key
operator|.
name|getStrKey
argument_list|()
argument_list|,
name|exportedKeys
argument_list|)
expr_stmt|;
block|}
name|exportedKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|ExportedKey
argument_list|>
argument_list|>
argument_list|>
name|getExportedKeysEntrySet
parameter_list|()
block|{
return|return
name|exportedKeys
operator|.
name|entrySet
argument_list|()
return|;
block|}
block|}
end_class

end_unit

