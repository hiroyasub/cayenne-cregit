begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|EqualsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|CompareToBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isBlank
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|DbType
implements|implements
name|Comparable
argument_list|<
name|DbType
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DbType
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|String
name|jdbc
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|length
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|precision
decl_stmt|;
specifier|public
specifier|final
name|Integer
name|scale
decl_stmt|;
specifier|public
specifier|final
name|Boolean
name|notNull
decl_stmt|;
specifier|public
name|DbType
parameter_list|(
name|String
name|jdbc
parameter_list|)
block|{
name|this
argument_list|(
name|jdbc
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DbType
parameter_list|(
name|String
name|jdbc
parameter_list|,
name|Integer
name|length
parameter_list|,
name|Integer
name|precision
parameter_list|,
name|Integer
name|scale
parameter_list|,
name|Boolean
name|notNull
parameter_list|)
block|{
if|if
condition|(
name|isBlank
argument_list|(
name|jdbc
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Jdbc type can't be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|jdbc
operator|=
name|jdbc
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|getValidInt
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|getValidInt
argument_list|(
name|precision
argument_list|)
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|getValidInt
argument_list|(
name|scale
argument_list|)
expr_stmt|;
name|this
operator|.
name|notNull
operator|=
name|notNull
expr_stmt|;
block|}
specifier|public
name|String
name|getJdbc
parameter_list|()
block|{
return|return
name|jdbc
return|;
block|}
specifier|public
name|Integer
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
specifier|public
name|Integer
name|getPrecision
parameter_list|()
block|{
return|return
name|precision
return|;
block|}
specifier|public
name|Integer
name|getScale
parameter_list|()
block|{
return|return
name|scale
return|;
block|}
specifier|public
name|Boolean
name|getNotNull
parameter_list|()
block|{
return|return
name|notNull
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|DbType
name|rhs
init|=
operator|(
name|DbType
operator|)
name|obj
decl_stmt|;
return|return
operator|new
name|EqualsBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|this
operator|.
name|jdbc
argument_list|,
name|rhs
operator|.
name|jdbc
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|length
argument_list|,
name|rhs
operator|.
name|length
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|precision
argument_list|,
name|rhs
operator|.
name|precision
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|scale
argument_list|,
name|rhs
operator|.
name|scale
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|notNull
argument_list|,
name|rhs
operator|.
name|notNull
argument_list|)
operator|.
name|isEquals
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|jdbc
argument_list|)
operator|.
name|append
argument_list|(
name|length
argument_list|)
operator|.
name|append
argument_list|(
name|precision
argument_list|)
operator|.
name|append
argument_list|(
name|scale
argument_list|)
operator|.
name|append
argument_list|(
name|notNull
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|res
init|=
name|jdbc
decl_stmt|;
name|String
name|len
init|=
literal|"*"
decl_stmt|;
if|if
condition|(
name|isPositive
argument_list|(
name|length
argument_list|)
condition|)
block|{
name|len
operator|=
name|length
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isPositive
argument_list|(
name|precision
argument_list|)
condition|)
block|{
name|len
operator|=
name|precision
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|res
operator|+=
literal|" ("
operator|+
name|len
expr_stmt|;
if|if
condition|(
name|isPositive
argument_list|(
name|scale
argument_list|)
condition|)
block|{
name|res
operator|+=
literal|", "
operator|+
name|scale
expr_stmt|;
block|}
name|res
operator|+=
literal|")"
expr_stmt|;
if|if
condition|(
name|notNull
operator|!=
literal|null
operator|&&
name|notNull
condition|)
block|{
name|res
operator|+=
literal|" NOT NULL"
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
specifier|private
name|boolean
name|isPositive
parameter_list|(
name|Integer
name|num
parameter_list|)
block|{
return|return
name|num
operator|!=
literal|null
operator|&&
name|num
operator|>
literal|0
return|;
block|}
specifier|private
name|Integer
name|getValidInt
parameter_list|(
name|Integer
name|num
parameter_list|)
block|{
if|if
condition|(
name|num
operator|==
literal|null
operator|||
name|num
operator|>
literal|0
condition|)
block|{
return|return
name|num
return|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid int value '"
operator|+
name|num
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**      * Compare by specificity the most specific DbPath should be first in ordered list      */
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|DbType
name|dbType
parameter_list|)
block|{
return|return
operator|new
name|CompareToBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|dbType
operator|.
name|jdbc
argument_list|,
name|jdbc
argument_list|)
operator|.
name|append
argument_list|(
name|dbType
operator|.
name|getSpecificity
argument_list|()
argument_list|,
name|getSpecificity
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|dbType
operator|.
name|length
argument_list|,
name|length
argument_list|)
operator|.
name|append
argument_list|(
name|dbType
operator|.
name|precision
argument_list|,
name|precision
argument_list|)
operator|.
name|append
argument_list|(
name|dbType
operator|.
name|scale
argument_list|,
name|scale
argument_list|)
operator|.
name|append
argument_list|(
name|dbType
operator|.
name|notNull
argument_list|,
name|notNull
argument_list|)
operator|.
name|toComparison
argument_list|()
return|;
block|}
specifier|private
name|int
name|getSpecificity
parameter_list|()
block|{
name|int
name|res
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|isPositive
argument_list|(
name|length
argument_list|)
condition|)
block|{
name|res
operator|+=
literal|100
expr_stmt|;
block|}
if|if
condition|(
name|isPositive
argument_list|(
name|precision
argument_list|)
condition|)
block|{
name|res
operator|+=
literal|100
expr_stmt|;
block|}
if|if
condition|(
name|isPositive
argument_list|(
name|scale
argument_list|)
condition|)
block|{
name|res
operator|+=
literal|10
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|notNull
operator|!=
literal|null
condition|)
block|{
name|res
operator|+=
literal|5
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
specifier|public
name|boolean
name|isCover
parameter_list|(
name|DbType
name|type
parameter_list|)
block|{
return|return
name|this
operator|.
name|jdbc
operator|.
name|equals
argument_list|(
name|type
operator|.
name|jdbc
argument_list|)
operator|&&
operator|(
name|isCover
argument_list|(
name|length
argument_list|,
name|type
operator|.
name|length
argument_list|)
operator|||
name|length
operator|==
literal|null
operator|&&
name|type
operator|.
name|length
operator|==
literal|null
operator|&&
name|isCover
argument_list|(
name|precision
argument_list|,
name|type
operator|.
name|precision
argument_list|)
operator|)
operator|&&
name|isCover
argument_list|(
name|scale
argument_list|,
name|type
operator|.
name|scale
argument_list|)
operator|&&
name|isCover
argument_list|(
name|notNull
argument_list|,
name|type
operator|.
name|notNull
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isCover
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
return|return
name|a
operator|==
literal|null
operator|||
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
end_class

end_unit

