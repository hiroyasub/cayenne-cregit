begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|abstract
class|class
name|MergerDictionary
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|dictionary
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|MergerDictionary
parameter_list|()
block|{
block|}
name|void
name|init
parameter_list|()
block|{
for|for
control|(
name|T
name|entity
range|:
name|getAll
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|getName
argument_list|(
name|entity
argument_list|)
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|dictionary
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
name|T
name|getByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|dictionary
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
name|void
name|remove
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|dictionary
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|getDictionary
parameter_list|()
block|{
return|return
name|dictionary
return|;
block|}
specifier|abstract
name|String
name|getName
parameter_list|(
name|T
name|entity
parameter_list|)
function_decl|;
specifier|abstract
name|Collection
argument_list|<
name|T
argument_list|>
name|getAll
parameter_list|()
function_decl|;
block|}
end_class

end_unit

