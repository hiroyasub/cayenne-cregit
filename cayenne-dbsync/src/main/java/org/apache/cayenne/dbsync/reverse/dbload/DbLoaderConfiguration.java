begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbload
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
operator|.
name|TableFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
operator|.
name|FiltersConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
operator|.
name|PatternFilter
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|DbLoaderConfiguration
block|{
specifier|private
name|Boolean
name|skipRelationshipsLoading
decl_stmt|;
specifier|private
name|Boolean
name|skipPrimaryKeyLoading
decl_stmt|;
specifier|private
name|String
index|[]
name|tableTypes
decl_stmt|;
specifier|private
name|FiltersConfig
name|filtersConfig
decl_stmt|;
specifier|public
name|String
index|[]
name|getTableTypes
parameter_list|()
block|{
return|return
name|tableTypes
return|;
block|}
specifier|public
name|void
name|setTableTypes
parameter_list|(
name|String
index|[]
name|tableTypes
parameter_list|)
block|{
name|this
operator|.
name|tableTypes
operator|=
name|tableTypes
expr_stmt|;
block|}
specifier|public
name|FiltersConfig
name|getFiltersConfig
parameter_list|()
block|{
if|if
condition|(
name|filtersConfig
operator|==
literal|null
condition|)
block|{
comment|// this case is used often in tests where config not initialized properly
return|return
name|FiltersConfig
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|TableFilter
operator|.
name|everything
argument_list|()
argument_list|,
name|PatternFilter
operator|.
name|INCLUDE_NOTHING
argument_list|)
return|;
block|}
return|return
name|filtersConfig
return|;
block|}
specifier|public
name|void
name|setFiltersConfig
parameter_list|(
name|FiltersConfig
name|filtersConfig
parameter_list|)
block|{
name|this
operator|.
name|filtersConfig
operator|=
name|filtersConfig
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSkipRelationshipsLoading
parameter_list|()
block|{
return|return
name|skipRelationshipsLoading
operator|!=
literal|null
operator|&&
name|skipRelationshipsLoading
return|;
block|}
specifier|public
name|void
name|setSkipRelationshipsLoading
parameter_list|(
name|Boolean
name|skipRelationshipsLoading
parameter_list|)
block|{
name|this
operator|.
name|skipRelationshipsLoading
operator|=
name|skipRelationshipsLoading
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSkipPrimaryKeyLoading
parameter_list|()
block|{
return|return
name|skipPrimaryKeyLoading
operator|!=
literal|null
operator|&&
name|skipPrimaryKeyLoading
return|;
block|}
specifier|public
name|void
name|setSkipPrimaryKeyLoading
parameter_list|(
name|Boolean
name|skipPrimaryKeyLoading
parameter_list|)
block|{
name|this
operator|.
name|skipPrimaryKeyLoading
operator|=
name|skipPrimaryKeyLoading
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|res
init|=
literal|"EntitiesFilters: "
operator|+
name|getFiltersConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSkipRelationshipsLoading
argument_list|()
condition|)
block|{
name|res
operator|+=
literal|"\n Skip Loading Relationships! \n"
expr_stmt|;
block|}
if|if
condition|(
name|isSkipPrimaryKeyLoading
argument_list|()
condition|)
block|{
name|res
operator|+=
literal|"\n Skip Loading PrimaryKeys! \n"
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
block|}
end_class

end_unit

