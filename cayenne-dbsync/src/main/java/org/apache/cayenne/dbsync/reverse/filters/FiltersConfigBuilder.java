begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbimport
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbimport
operator|.
name|ExcludeColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbimport
operator|.
name|ExcludeProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbimport
operator|.
name|ExcludeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbimport
operator|.
name|IncludeColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbimport
operator|.
name|IncludeProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbimport
operator|.
name|IncludeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbimport
operator|.
name|PatternParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbimport
operator|.
name|ReverseEngineering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbimport
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|FiltersConfigBuilder
block|{
specifier|private
specifier|final
name|ReverseEngineering
name|engineering
decl_stmt|;
specifier|public
name|FiltersConfigBuilder
parameter_list|(
name|ReverseEngineering
name|engineering
parameter_list|)
block|{
name|this
operator|.
name|engineering
operator|=
name|engineering
expr_stmt|;
block|}
specifier|public
name|FiltersConfig
name|build
parameter_list|()
block|{
name|compact
argument_list|()
expr_stmt|;
return|return
operator|new
name|FiltersConfig
argument_list|(
name|transformCatalogs
argument_list|(
name|engineering
operator|.
name|getCatalogs
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|CatalogFilter
index|[]
name|transformCatalogs
parameter_list|(
name|Collection
argument_list|<
name|Catalog
argument_list|>
name|catalogs
parameter_list|)
block|{
name|CatalogFilter
index|[]
name|catalogFilters
init|=
operator|new
name|CatalogFilter
index|[
name|catalogs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Catalog
name|catalog
range|:
name|catalogs
control|)
block|{
name|catalogFilters
index|[
name|i
index|]
operator|=
operator|new
name|CatalogFilter
argument_list|(
name|catalog
operator|.
name|getName
argument_list|()
argument_list|,
name|transformSchemas
argument_list|(
name|catalog
operator|.
name|getSchemas
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|catalogFilters
return|;
block|}
specifier|private
name|SchemaFilter
index|[]
name|transformSchemas
parameter_list|(
name|Collection
argument_list|<
name|Schema
argument_list|>
name|schemas
parameter_list|)
block|{
name|SchemaFilter
index|[]
name|schemaFilters
init|=
operator|new
name|SchemaFilter
index|[
name|schemas
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Schema
name|schema
range|:
name|schemas
control|)
block|{
name|schemaFilters
index|[
name|i
index|]
operator|=
operator|new
name|SchemaFilter
argument_list|(
name|schema
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|TableFilter
argument_list|(
name|transformIncludeTable
argument_list|(
name|schema
operator|.
name|getIncludeTables
argument_list|()
argument_list|)
argument_list|,
name|transformExcludeTable
argument_list|(
name|schema
operator|.
name|getExcludeTables
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|transform
argument_list|(
name|schema
operator|.
name|getIncludeProcedures
argument_list|()
argument_list|,
name|schema
operator|.
name|getExcludeProcedures
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|schemaFilters
return|;
block|}
specifier|private
name|SortedSet
argument_list|<
name|Pattern
argument_list|>
name|transformExcludeTable
parameter_list|(
name|Collection
argument_list|<
name|ExcludeTable
argument_list|>
name|excludeTables
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|Pattern
argument_list|>
name|res
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|PatternFilter
operator|.
name|PATTERN_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|ExcludeTable
name|exclude
range|:
name|excludeTables
control|)
block|{
name|res
operator|.
name|add
argument_list|(
name|PatternFilter
operator|.
name|pattern
argument_list|(
name|exclude
operator|.
name|getPattern
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
specifier|private
name|SortedSet
argument_list|<
name|IncludeTableFilter
argument_list|>
name|transformIncludeTable
parameter_list|(
name|Collection
argument_list|<
name|IncludeTable
argument_list|>
name|includeTables
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|IncludeTableFilter
argument_list|>
name|includeTableFilters
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|IncludeTable
name|includeTable
range|:
name|includeTables
control|)
block|{
name|includeTableFilters
operator|.
name|add
argument_list|(
operator|new
name|IncludeTableFilter
argument_list|(
name|includeTable
operator|.
name|getPattern
argument_list|()
argument_list|,
name|transform
argument_list|(
name|includeTable
operator|.
name|getIncludeColumns
argument_list|()
argument_list|,
name|includeTable
operator|.
name|getExcludeColumns
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|includeTableFilters
return|;
block|}
specifier|private
name|PatternFilter
name|transform
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|PatternParam
argument_list|>
name|include
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|PatternParam
argument_list|>
name|exclude
parameter_list|)
block|{
name|PatternFilter
name|filter
init|=
operator|new
name|PatternFilter
argument_list|()
decl_stmt|;
for|for
control|(
name|PatternParam
name|patternParam
range|:
name|include
control|)
block|{
name|filter
operator|.
name|include
argument_list|(
name|patternParam
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatternParam
name|patternParam
range|:
name|exclude
control|)
block|{
name|filter
operator|.
name|exclude
argument_list|(
name|patternParam
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|filter
return|;
block|}
comment|/**      * Goal of this method transform ReverseEngineering config into more regular form      * From      *<pre>      *      ReverseEngineering      *          Catalog      *              Schema      *                  IncludeTable      *                      IncludeColumn      *                      ExcludeColumn      *                  ExcludeTable      *                  IncludeProcedures      *                  ExcludeProcedures      *                  IncludeColumn      *                  ExcludeColumn      *              IncludeTable      *                  IncludeColumn      *                  ExcludeColumn      *              ExcludeTable      *              IncludeProcedures      *              ExcludeProcedures      *              IncludeColumn      *              ExcludeColumn      *          Schema      *              IncludeTable      *                  IncludeColumn      *                  ExcludeColumn      *              ExcludeTable      *              IncludeProcedures      *              ExcludeProcedures      *              IncludeColumn      *              ExcludeColumn      *          IncludeTable      *              IncludeColumn      *              ExcludeColumn      *          ExcludeTable      *          IncludeProcedures      *          ExcludeProcedures      *          IncludeColumn      *          ExcludeColumn      *</pre>      * Into      *<pre>      *  ReverseEngineering      *          Catalog      *              Schema      *                  IncludeTable      *                      IncludeColumn      *                      ExcludeColumn      *                  ExcludeTable      *                  IncludeProcedures      *                  ExcludeProcedures      *</pre>      */
name|void
name|compact
parameter_list|()
block|{
name|addEmptyElements
argument_list|()
expr_stmt|;
name|compactColumnFilters
argument_list|()
expr_stmt|;
name|compactTableFilter
argument_list|()
expr_stmt|;
name|compactProcedureFilter
argument_list|()
expr_stmt|;
name|compactSchemas
argument_list|()
expr_stmt|;
name|clearGlobalFilters
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|compactSchemas
parameter_list|()
block|{
for|for
control|(
name|Catalog
name|catalog
range|:
name|engineering
operator|.
name|getCatalogs
argument_list|()
control|)
block|{
name|catalog
operator|.
name|getSchemas
argument_list|()
operator|.
name|addAll
argument_list|(
name|engineering
operator|.
name|getSchemas
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|compactProcedureFilter
parameter_list|()
block|{
name|Collection
argument_list|<
name|IncludeProcedure
argument_list|>
name|engIncludeProcedures
init|=
name|engineering
operator|.
name|getIncludeProcedures
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ExcludeProcedure
argument_list|>
name|engExcludeProcedures
init|=
name|engineering
operator|.
name|getExcludeProcedures
argument_list|()
decl_stmt|;
for|for
control|(
name|Catalog
name|catalog
range|:
name|engineering
operator|.
name|getCatalogs
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|IncludeProcedure
argument_list|>
name|catalogIncludeProcedures
init|=
name|catalog
operator|.
name|getIncludeProcedures
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ExcludeProcedure
argument_list|>
name|catalogExcludeProcedures
init|=
name|catalog
operator|.
name|getExcludeProcedures
argument_list|()
decl_stmt|;
for|for
control|(
name|Schema
name|schema
range|:
name|catalog
operator|.
name|getSchemas
argument_list|()
control|)
block|{
name|schema
operator|.
name|getIncludeProcedures
argument_list|()
operator|.
name|addAll
argument_list|(
name|engIncludeProcedures
argument_list|)
expr_stmt|;
name|schema
operator|.
name|getIncludeProcedures
argument_list|()
operator|.
name|addAll
argument_list|(
name|catalogIncludeProcedures
argument_list|)
expr_stmt|;
name|schema
operator|.
name|getExcludeProcedures
argument_list|()
operator|.
name|addAll
argument_list|(
name|engExcludeProcedures
argument_list|)
expr_stmt|;
name|schema
operator|.
name|getExcludeProcedures
argument_list|()
operator|.
name|addAll
argument_list|(
name|catalogExcludeProcedures
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Schema
name|schema
range|:
name|engineering
operator|.
name|getSchemas
argument_list|()
control|)
block|{
name|schema
operator|.
name|getIncludeProcedures
argument_list|()
operator|.
name|addAll
argument_list|(
name|engIncludeProcedures
argument_list|)
expr_stmt|;
name|schema
operator|.
name|getExcludeProcedures
argument_list|()
operator|.
name|addAll
argument_list|(
name|engExcludeProcedures
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|compactTableFilter
parameter_list|()
block|{
name|Collection
argument_list|<
name|IncludeTable
argument_list|>
name|engIncludeTables
init|=
name|engineering
operator|.
name|getIncludeTables
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ExcludeTable
argument_list|>
name|engExcludeTables
init|=
name|engineering
operator|.
name|getExcludeTables
argument_list|()
decl_stmt|;
for|for
control|(
name|Catalog
name|catalog
range|:
name|engineering
operator|.
name|getCatalogs
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|IncludeTable
argument_list|>
name|catalogIncludeTables
init|=
name|catalog
operator|.
name|getIncludeTables
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ExcludeTable
argument_list|>
name|catalogExcludeTables
init|=
name|catalog
operator|.
name|getExcludeTables
argument_list|()
decl_stmt|;
for|for
control|(
name|Schema
name|schema
range|:
name|catalog
operator|.
name|getSchemas
argument_list|()
control|)
block|{
name|schema
operator|.
name|getIncludeTables
argument_list|()
operator|.
name|addAll
argument_list|(
name|engIncludeTables
argument_list|)
expr_stmt|;
name|schema
operator|.
name|getIncludeTables
argument_list|()
operator|.
name|addAll
argument_list|(
name|catalogIncludeTables
argument_list|)
expr_stmt|;
name|schema
operator|.
name|getExcludeTables
argument_list|()
operator|.
name|addAll
argument_list|(
name|engExcludeTables
argument_list|)
expr_stmt|;
name|schema
operator|.
name|getExcludeTables
argument_list|()
operator|.
name|addAll
argument_list|(
name|catalogExcludeTables
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Schema
name|schema
range|:
name|engineering
operator|.
name|getSchemas
argument_list|()
control|)
block|{
name|schema
operator|.
name|getIncludeTables
argument_list|()
operator|.
name|addAll
argument_list|(
name|engIncludeTables
argument_list|)
expr_stmt|;
name|schema
operator|.
name|getExcludeTables
argument_list|()
operator|.
name|addAll
argument_list|(
name|engExcludeTables
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|compactColumnFilters
parameter_list|()
block|{
name|Collection
argument_list|<
name|IncludeColumn
argument_list|>
name|engIncludeColumns
init|=
name|engineering
operator|.
name|getIncludeColumns
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ExcludeColumn
argument_list|>
name|engExcludeColumns
init|=
name|engineering
operator|.
name|getExcludeColumns
argument_list|()
decl_stmt|;
for|for
control|(
name|Catalog
name|catalog
range|:
name|engineering
operator|.
name|getCatalogs
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|IncludeColumn
argument_list|>
name|catalogIncludeColumns
init|=
name|catalog
operator|.
name|getIncludeColumns
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ExcludeColumn
argument_list|>
name|catalogExcludeColumns
init|=
name|catalog
operator|.
name|getExcludeColumns
argument_list|()
decl_stmt|;
for|for
control|(
name|Schema
name|schema
range|:
name|catalog
operator|.
name|getSchemas
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|IncludeColumn
argument_list|>
name|schemaIncludeColumns
init|=
name|schema
operator|.
name|getIncludeColumns
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ExcludeColumn
argument_list|>
name|schemaExcludeColumns
init|=
name|schema
operator|.
name|getExcludeColumns
argument_list|()
decl_stmt|;
for|for
control|(
name|IncludeTable
name|includeTable
range|:
name|schema
operator|.
name|getIncludeTables
argument_list|()
control|)
block|{
name|includeTable
operator|.
name|getIncludeColumns
argument_list|()
operator|.
name|addAll
argument_list|(
name|engIncludeColumns
argument_list|)
expr_stmt|;
name|includeTable
operator|.
name|getIncludeColumns
argument_list|()
operator|.
name|addAll
argument_list|(
name|catalogIncludeColumns
argument_list|)
expr_stmt|;
name|includeTable
operator|.
name|getIncludeColumns
argument_list|()
operator|.
name|addAll
argument_list|(
name|schemaIncludeColumns
argument_list|)
expr_stmt|;
name|includeTable
operator|.
name|getExcludeColumns
argument_list|()
operator|.
name|addAll
argument_list|(
name|engExcludeColumns
argument_list|)
expr_stmt|;
name|includeTable
operator|.
name|getExcludeColumns
argument_list|()
operator|.
name|addAll
argument_list|(
name|catalogExcludeColumns
argument_list|)
expr_stmt|;
name|includeTable
operator|.
name|getExcludeColumns
argument_list|()
operator|.
name|addAll
argument_list|(
name|schemaExcludeColumns
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|IncludeTable
name|includeTable
range|:
name|catalog
operator|.
name|getIncludeTables
argument_list|()
control|)
block|{
name|includeTable
operator|.
name|getIncludeColumns
argument_list|()
operator|.
name|addAll
argument_list|(
name|engIncludeColumns
argument_list|)
expr_stmt|;
name|includeTable
operator|.
name|getIncludeColumns
argument_list|()
operator|.
name|addAll
argument_list|(
name|catalogIncludeColumns
argument_list|)
expr_stmt|;
name|includeTable
operator|.
name|getExcludeColumns
argument_list|()
operator|.
name|addAll
argument_list|(
name|engExcludeColumns
argument_list|)
expr_stmt|;
name|includeTable
operator|.
name|getExcludeColumns
argument_list|()
operator|.
name|addAll
argument_list|(
name|catalogExcludeColumns
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Schema
name|schema
range|:
name|engineering
operator|.
name|getSchemas
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|IncludeColumn
argument_list|>
name|schemaIncludeColumns
init|=
name|schema
operator|.
name|getIncludeColumns
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ExcludeColumn
argument_list|>
name|schemaExcludeColumns
init|=
name|schema
operator|.
name|getExcludeColumns
argument_list|()
decl_stmt|;
for|for
control|(
name|IncludeTable
name|includeTable
range|:
name|schema
operator|.
name|getIncludeTables
argument_list|()
control|)
block|{
name|includeTable
operator|.
name|getIncludeColumns
argument_list|()
operator|.
name|addAll
argument_list|(
name|engIncludeColumns
argument_list|)
expr_stmt|;
name|includeTable
operator|.
name|getIncludeColumns
argument_list|()
operator|.
name|addAll
argument_list|(
name|schemaIncludeColumns
argument_list|)
expr_stmt|;
name|includeTable
operator|.
name|getExcludeColumns
argument_list|()
operator|.
name|addAll
argument_list|(
name|engExcludeColumns
argument_list|)
expr_stmt|;
name|includeTable
operator|.
name|getExcludeColumns
argument_list|()
operator|.
name|addAll
argument_list|(
name|schemaExcludeColumns
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|IncludeTable
name|includeTable
range|:
name|engineering
operator|.
name|getIncludeTables
argument_list|()
control|)
block|{
name|includeTable
operator|.
name|getIncludeColumns
argument_list|()
operator|.
name|addAll
argument_list|(
name|engIncludeColumns
argument_list|)
expr_stmt|;
name|includeTable
operator|.
name|getExcludeColumns
argument_list|()
operator|.
name|addAll
argument_list|(
name|engExcludeColumns
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|clearGlobalFilters
parameter_list|()
block|{
for|for
control|(
name|Catalog
name|catalog
range|:
name|engineering
operator|.
name|getCatalogs
argument_list|()
control|)
block|{
name|catalog
operator|.
name|clearIncludeTables
argument_list|()
expr_stmt|;
name|catalog
operator|.
name|clearExcludeTables
argument_list|()
expr_stmt|;
name|catalog
operator|.
name|clearIncludeProcedures
argument_list|()
expr_stmt|;
name|catalog
operator|.
name|clearExcludeProcedures
argument_list|()
expr_stmt|;
name|catalog
operator|.
name|clearIncludeColumns
argument_list|()
expr_stmt|;
name|catalog
operator|.
name|clearExcludeColumns
argument_list|()
expr_stmt|;
for|for
control|(
name|Schema
name|schema
range|:
name|catalog
operator|.
name|getSchemas
argument_list|()
control|)
block|{
name|schema
operator|.
name|clearIncludeColumns
argument_list|()
expr_stmt|;
name|schema
operator|.
name|clearExcludeColumns
argument_list|()
expr_stmt|;
block|}
block|}
name|engineering
operator|.
name|clearIncludeTables
argument_list|()
expr_stmt|;
name|engineering
operator|.
name|clearExcludeTables
argument_list|()
expr_stmt|;
name|engineering
operator|.
name|clearIncludeProcedures
argument_list|()
expr_stmt|;
name|engineering
operator|.
name|clearExcludeProcedures
argument_list|()
expr_stmt|;
name|engineering
operator|.
name|clearIncludeColumns
argument_list|()
expr_stmt|;
name|engineering
operator|.
name|clearExcludeColumns
argument_list|()
expr_stmt|;
name|engineering
operator|.
name|getSchemas
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|addEmptyElements
parameter_list|()
block|{
if|if
condition|(
name|engineering
operator|.
name|getCatalogs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|engineering
operator|.
name|addCatalog
argument_list|(
operator|new
name|Catalog
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Catalog
name|catalog
range|:
name|engineering
operator|.
name|getCatalogs
argument_list|()
control|)
block|{
if|if
condition|(
name|catalog
operator|.
name|getSchemas
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|engineering
operator|.
name|getSchemas
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|catalog
operator|.
name|addSchema
argument_list|(
operator|new
name|Schema
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Schema
name|schema
range|:
name|catalog
operator|.
name|getSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|schema
operator|.
name|getIncludeTables
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|catalog
operator|.
name|getIncludeTables
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|engineering
operator|.
name|getIncludeTables
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|schema
operator|.
name|addIncludeTable
argument_list|(
operator|new
name|IncludeTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Schema
name|schema
range|:
name|engineering
operator|.
name|getSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|schema
operator|.
name|getIncludeTables
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|engineering
operator|.
name|getIncludeTables
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|schema
operator|.
name|addIncludeTable
argument_list|(
operator|new
name|IncludeTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

