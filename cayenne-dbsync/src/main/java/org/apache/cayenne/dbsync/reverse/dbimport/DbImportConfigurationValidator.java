begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|DataSourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|DbAdapterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|DbImportConfigurationValidator
implements|implements
name|Cloneable
block|{
specifier|private
specifier|final
name|ReverseEngineering
name|reverseEngineering
decl_stmt|;
specifier|private
specifier|final
name|DbImportConfiguration
name|config
decl_stmt|;
specifier|private
specifier|final
name|Injector
name|injector
decl_stmt|;
specifier|public
name|DbImportConfigurationValidator
parameter_list|(
name|ReverseEngineering
name|reverseEngineering
parameter_list|,
name|DbImportConfiguration
name|config
parameter_list|,
name|Injector
name|injector
parameter_list|)
block|{
name|this
operator|.
name|reverseEngineering
operator|=
name|reverseEngineering
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|injector
operator|=
name|injector
expr_stmt|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|Exception
block|{
name|DataNodeDescriptor
name|dataNodeDescriptor
init|=
name|config
operator|.
name|createDataNodeDescriptor
argument_list|()
decl_stmt|;
name|DbAdapter
name|adapter
decl_stmt|;
try|try
block|{
name|DataSource
name|dataSource
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|DataSourceFactory
operator|.
name|class
argument_list|)
operator|.
name|getDataSource
argument_list|(
name|dataNodeDescriptor
argument_list|)
decl_stmt|;
name|adapter
operator|=
name|injector
operator|.
name|getInstance
argument_list|(
name|DbAdapterFactory
operator|.
name|class
argument_list|)
operator|.
name|createAdapter
argument_list|(
name|dataNodeDescriptor
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Error creating DataSource or DbAdapter for DataNodeDescriptor ("
operator|+
name|dataNodeDescriptor
operator|+
literal|")"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
if|if
condition|(
name|adapter
operator|!=
literal|null
operator|&&
operator|!
name|adapter
operator|.
name|supportsCatalogsOnReverseEngineering
argument_list|()
operator|&&
operator|!
name|isReverseEngineeringCatalogsEmpty
argument_list|()
condition|)
block|{
name|String
name|message
init|=
literal|"Your database does not support catalogs on reverse engineering. "
operator|+
literal|"It allows to connect to only one at the moment. "
operator|+
literal|"Please don't note catalogs in<dbimport> configuration."
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|isReverseEngineeringCatalogsEmpty
parameter_list|()
block|{
name|Collection
argument_list|<
name|Catalog
argument_list|>
name|catalogs
init|=
name|reverseEngineering
operator|.
name|getCatalogs
argument_list|()
decl_stmt|;
if|if
condition|(
name|catalogs
operator|==
literal|null
operator|||
name|catalogs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|Catalog
name|catalog
range|:
name|catalogs
control|)
block|{
if|if
condition|(
name|catalog
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

