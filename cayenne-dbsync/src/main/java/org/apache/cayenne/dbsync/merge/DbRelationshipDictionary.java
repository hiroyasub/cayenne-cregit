begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
operator|.
name|FiltersConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
operator|.
name|PatternFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
operator|.
name|TableFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_class
class|class
name|DbRelationshipDictionary
extends|extends
name|MergerDictionary
argument_list|<
name|DbRelationship
argument_list|>
block|{
specifier|private
specifier|final
name|DbEntity
name|container
decl_stmt|;
specifier|private
specifier|final
name|FiltersConfig
name|filtersConfig
decl_stmt|;
name|DbRelationshipDictionary
parameter_list|(
name|DbEntity
name|container
parameter_list|,
name|FiltersConfig
name|filtersConfig
parameter_list|)
block|{
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
name|this
operator|.
name|filtersConfig
operator|=
name|filtersConfig
expr_stmt|;
block|}
annotation|@
name|Override
name|String
name|getName
parameter_list|(
name|DbRelationship
name|entity
parameter_list|)
block|{
return|return
operator|new
name|Signature
argument_list|(
name|entity
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
name|Collection
argument_list|<
name|DbRelationship
argument_list|>
name|getAll
parameter_list|()
block|{
return|return
name|filter
argument_list|()
return|;
block|}
comment|/**      * @since 4.1      */
specifier|private
name|Collection
argument_list|<
name|DbRelationship
argument_list|>
name|filter
parameter_list|()
block|{
if|if
condition|(
name|filtersConfig
operator|==
literal|null
condition|)
block|{
return|return
name|container
operator|.
name|getRelationships
argument_list|()
return|;
block|}
name|Collection
argument_list|<
name|DbRelationship
argument_list|>
name|existingFiltered
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|TableFilter
name|tableFilter
init|=
name|filtersConfig
operator|.
name|tableFilter
argument_list|(
name|container
operator|.
name|getCatalog
argument_list|()
argument_list|,
name|container
operator|.
name|getSchema
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableFilter
operator|!=
literal|null
operator|&&
name|tableFilter
operator|.
name|isIncludeTable
argument_list|(
name|container
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|PatternFilter
name|patternFilter
init|=
name|tableFilter
operator|.
name|getIncludeTableRelationshipFilter
argument_list|(
name|container
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DbRelationship
name|rel
range|:
name|container
operator|.
name|getRelationships
argument_list|()
control|)
block|{
if|if
condition|(
name|patternFilter
operator|.
name|isIncluded
argument_list|(
name|rel
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|existingFiltered
operator|.
name|add
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|existingFiltered
return|;
block|}
comment|/**      * Signature of DbRelationship is sorted strings generated from its DbJoins      */
specifier|private
specifier|static
class|class
name|Signature
block|{
specifier|private
specifier|final
name|DbRelationship
name|relationship
decl_stmt|;
specifier|private
name|String
index|[]
name|joinSignature
decl_stmt|;
specifier|private
name|Signature
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|)
block|{
name|this
operator|.
name|relationship
operator|=
name|relationship
expr_stmt|;
name|build
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
if|if
condition|(
name|joinSignature
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|name
init|=
name|joinSignature
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|joinSignature
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|name
operator|+=
literal|"|"
operator|+
name|joinSignature
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|private
name|void
name|build
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|joins
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DbJoin
name|join
range|:
name|relationship
operator|.
name|getJoins
argument_list|()
control|)
block|{
name|joins
operator|.
name|add
argument_list|(
operator|(
name|join
operator|.
name|getSource
argument_list|()
operator|==
literal|null
condition|?
literal|"~"
else|:
name|join
operator|.
name|getSource
argument_list|()
operator|.
name|getName
argument_list|()
operator|)
operator|+
literal|"."
operator|+
name|join
operator|.
name|getSourceName
argument_list|()
operator|+
literal|">"
operator|+
operator|(
name|join
operator|.
name|getTarget
argument_list|()
operator|==
literal|null
condition|?
literal|"~"
else|:
name|join
operator|.
name|getTarget
argument_list|()
operator|.
name|getName
argument_list|()
operator|)
operator|+
literal|"."
operator|+
name|join
operator|.
name|getTargetName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|joinSignature
operator|=
name|joins
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

