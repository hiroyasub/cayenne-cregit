begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbload
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|AttributeLoaderIT
extends|extends
name|BaseLoaderIT
block|{
annotation|@
name|Test
specifier|public
name|void
name|testAttributeLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|createDbEntities
argument_list|()
expr_stmt|;
name|AttributeLoader
name|loader
init|=
operator|new
name|AttributeLoader
argument_list|(
name|adapter
argument_list|,
name|EMPTY_CONFIG
argument_list|,
operator|new
name|DefaultDbLoaderDelegate
argument_list|()
argument_list|)
decl_stmt|;
name|loader
operator|.
name|load
argument_list|(
name|connection
operator|.
name|getMetaData
argument_list|()
argument_list|,
name|store
argument_list|)
expr_stmt|;
name|DbEntity
name|artist
init|=
name|getDbEntity
argument_list|(
literal|"ARTIST"
argument_list|)
decl_stmt|;
name|DbAttribute
name|a
init|=
name|getDbAttribute
argument_list|(
name|artist
argument_list|,
literal|"ARTIST_ID"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
name|accessStackAdapter
operator|.
name|onlyGenericNumberType
argument_list|()
condition|)
block|{
comment|// All integer types are mapped to NUMERIC in Oracle DB.
name|assertEquals
argument_list|(
name|Types
operator|.
name|NUMERIC
argument_list|,
name|a
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|Types
operator|.
name|BIGINT
argument_list|,
name|a
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|a
operator|.
name|isMandatory
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|isGenerated
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|=
name|getDbAttribute
argument_list|(
name|artist
argument_list|,
literal|"ARTIST_NAME"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|a
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|254
argument_list|,
name|a
operator|.
name|getMaxLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|isMandatory
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|=
name|getDbAttribute
argument_list|(
name|artist
argument_list|,
literal|"DATE_OF_BIRTH"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
name|accessStackAdapter
operator|.
name|onlyGenericDateType
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|Types
operator|.
name|DATE
operator|==
name|a
operator|.
name|getType
argument_list|()
operator|||
name|Types
operator|.
name|TIMESTAMP
operator|==
name|a
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|Types
operator|.
name|DATE
argument_list|,
name|a
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|a
operator|.
name|isMandatory
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|accessStackAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|assertLobDbEntities
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|adapter
operator|.
name|supportsGeneratedKeys
argument_list|()
condition|)
block|{
name|assertGenerated
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAttributeLoadTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|DatabaseMetaData
name|metaData
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|DbLoaderDelegate
name|delegate
init|=
operator|new
name|DefaultDbLoaderDelegate
argument_list|()
decl_stmt|;
comment|// We need all data to check relationships, so simply load it all
name|EntityLoader
name|entityLoader
init|=
operator|new
name|EntityLoader
argument_list|(
name|adapter
argument_list|,
name|EMPTY_CONFIG
argument_list|,
name|delegate
argument_list|)
decl_stmt|;
name|AttributeLoader
name|attributeLoader
init|=
operator|new
name|AttributeLoader
argument_list|(
name|adapter
argument_list|,
name|EMPTY_CONFIG
argument_list|,
name|delegate
argument_list|)
decl_stmt|;
name|entityLoader
operator|.
name|load
argument_list|(
name|metaData
argument_list|,
name|store
argument_list|)
expr_stmt|;
name|attributeLoader
operator|.
name|load
argument_list|(
name|metaData
argument_list|,
name|store
argument_list|)
expr_stmt|;
name|DbEntity
name|dbe
init|=
name|getDbEntity
argument_list|(
literal|"PAINTING"
argument_list|)
decl_stmt|;
name|DbEntity
name|floatTest
init|=
name|getDbEntity
argument_list|(
literal|"FLOAT_TEST"
argument_list|)
decl_stmt|;
name|DbEntity
name|smallintTest
init|=
name|getDbEntity
argument_list|(
literal|"SMALLINT_TEST"
argument_list|)
decl_stmt|;
name|DbAttribute
name|integerAttr
init|=
name|getDbAttribute
argument_list|(
name|dbe
argument_list|,
literal|"PAINTING_ID"
argument_list|)
decl_stmt|;
name|DbAttribute
name|decimalAttr
init|=
name|getDbAttribute
argument_list|(
name|dbe
argument_list|,
literal|"ESTIMATED_PRICE"
argument_list|)
decl_stmt|;
name|DbAttribute
name|varcharAttr
init|=
name|getDbAttribute
argument_list|(
name|dbe
argument_list|,
literal|"PAINTING_TITLE"
argument_list|)
decl_stmt|;
name|DbAttribute
name|floatAttr
init|=
name|getDbAttribute
argument_list|(
name|floatTest
argument_list|,
literal|"FLOAT_COL"
argument_list|)
decl_stmt|;
name|DbAttribute
name|smallintAttr
init|=
name|getDbAttribute
argument_list|(
name|smallintTest
argument_list|,
literal|"SMALLINT_COL"
argument_list|)
decl_stmt|;
comment|// check decimal
name|assertTrue
argument_list|(
name|msgForTypeMismatch
argument_list|(
name|Types
operator|.
name|DECIMAL
argument_list|,
name|decimalAttr
argument_list|)
argument_list|,
name|Types
operator|.
name|DECIMAL
operator|==
name|decimalAttr
operator|.
name|getType
argument_list|()
operator|||
name|Types
operator|.
name|NUMERIC
operator|==
name|decimalAttr
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|decimalAttr
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
comment|// check varchar
name|assertEquals
argument_list|(
name|msgForTypeMismatch
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|varcharAttr
argument_list|)
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|varcharAttr
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|255
argument_list|,
name|varcharAttr
operator|.
name|getMaxLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// check integer
comment|// All integer types are mapped to NUMERIC in Oracle DB.
if|if
condition|(
name|accessStackAdapter
operator|.
name|onlyGenericNumberType
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|msgForTypeMismatch
argument_list|(
name|Types
operator|.
name|NUMERIC
argument_list|,
name|integerAttr
argument_list|)
argument_list|,
name|Types
operator|.
name|NUMERIC
argument_list|,
name|integerAttr
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|msgForTypeMismatch
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|integerAttr
argument_list|)
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|integerAttr
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check float
name|assertTrue
argument_list|(
name|msgForTypeMismatch
argument_list|(
name|Types
operator|.
name|FLOAT
argument_list|,
name|floatAttr
argument_list|)
argument_list|,
name|Types
operator|.
name|FLOAT
operator|==
name|floatAttr
operator|.
name|getType
argument_list|()
operator|||
name|Types
operator|.
name|DOUBLE
operator|==
name|floatAttr
operator|.
name|getType
argument_list|()
operator|||
name|Types
operator|.
name|REAL
operator|==
name|floatAttr
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// check smallint
comment|// All integer types are mapped to NUMERIC in Oracle DB.
if|if
condition|(
name|accessStackAdapter
operator|.
name|onlyGenericNumberType
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|msgForTypeMismatch
argument_list|(
name|Types
operator|.
name|NUMERIC
argument_list|,
name|smallintAttr
argument_list|)
argument_list|,
name|Types
operator|.
name|NUMERIC
argument_list|,
name|smallintAttr
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|msgForTypeMismatch
argument_list|(
name|Types
operator|.
name|SMALLINT
argument_list|,
name|smallintAttr
argument_list|)
argument_list|,
name|Types
operator|.
name|SMALLINT
operator|==
name|smallintAttr
operator|.
name|getType
argument_list|()
operator|||
name|Types
operator|.
name|INTEGER
operator|==
name|smallintAttr
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertGenerated
parameter_list|()
block|{
name|DbEntity
name|bag
init|=
name|getDbEntity
argument_list|(
literal|"GENERATED_COLUMN_TEST"
argument_list|)
decl_stmt|;
name|DbAttribute
name|id
init|=
name|getDbAttribute
argument_list|(
name|bag
argument_list|,
literal|"GENERATED_COLUMN"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|id
operator|.
name|isGenerated
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertLobDbEntities
parameter_list|()
block|{
name|DbEntity
name|blobEnt
init|=
name|getDbEntity
argument_list|(
literal|"BLOB_TEST"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|blobEnt
argument_list|)
expr_stmt|;
name|DbAttribute
name|blobAttr
init|=
name|getDbAttribute
argument_list|(
name|blobEnt
argument_list|,
literal|"BLOB_COL"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|blobAttr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msgForTypeMismatch
argument_list|(
name|Types
operator|.
name|BLOB
argument_list|,
name|blobAttr
argument_list|)
argument_list|,
name|Types
operator|.
name|BLOB
operator|==
name|blobAttr
operator|.
name|getType
argument_list|()
operator|||
name|Types
operator|.
name|VARBINARY
operator|==
name|blobAttr
operator|.
name|getType
argument_list|()
operator|||
name|Types
operator|.
name|LONGVARBINARY
operator|==
name|blobAttr
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|DbEntity
name|clobEnt
init|=
name|getDbEntity
argument_list|(
literal|"CLOB_TEST"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clobEnt
argument_list|)
expr_stmt|;
name|DbAttribute
name|clobAttr
init|=
name|getDbAttribute
argument_list|(
name|clobEnt
argument_list|,
literal|"CLOB_COL"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|clobAttr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msgForTypeMismatch
argument_list|(
name|Types
operator|.
name|CLOB
argument_list|,
name|clobAttr
argument_list|)
argument_list|,
name|Types
operator|.
name|CLOB
operator|==
name|clobAttr
operator|.
name|getType
argument_list|()
operator|||
name|Types
operator|.
name|VARCHAR
operator|==
name|clobAttr
operator|.
name|getType
argument_list|()
operator|||
name|Types
operator|.
name|LONGVARCHAR
operator|==
name|clobAttr
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DbAttribute
name|getDbAttribute
parameter_list|(
name|DbEntity
name|ent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|DbAttribute
name|da
init|=
name|ent
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// sometimes table names get converted to lowercase
if|if
condition|(
name|da
operator|==
literal|null
condition|)
block|{
name|da
operator|=
name|ent
operator|.
name|getAttribute
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|da
return|;
block|}
specifier|private
specifier|static
name|String
name|msgForTypeMismatch
parameter_list|(
name|int
name|origType
parameter_list|,
name|DbAttribute
name|newAttr
parameter_list|)
block|{
name|String
name|nt
init|=
name|TypesMapping
operator|.
name|getSqlNameByType
argument_list|(
name|newAttr
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|ot
init|=
name|TypesMapping
operator|.
name|getSqlNameByType
argument_list|(
name|origType
argument_list|)
decl_stmt|;
return|return
name|attrMismatch
argument_list|(
name|newAttr
operator|.
name|getName
argument_list|()
argument_list|,
literal|"expected type:<"
operator|+
name|ot
operator|+
literal|">, but was<"
operator|+
name|nt
operator|+
literal|">"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|attrMismatch
parameter_list|(
name|String
name|attrName
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
return|return
literal|"[Error loading attribute '"
operator|+
name|attrName
operator|+
literal|"': "
operator|+
name|msg
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

