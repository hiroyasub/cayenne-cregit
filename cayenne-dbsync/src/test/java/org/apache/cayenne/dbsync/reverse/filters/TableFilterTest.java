begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|filters
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TableFilterTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testIncludeEverything
parameter_list|()
block|{
name|TableFilter
name|filter
init|=
name|TableFilter
operator|.
name|everything
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|"table"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|"aaaa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|"alex"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInclude
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|IncludeTableFilter
argument_list|>
name|includes
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|includes
operator|.
name|add
argument_list|(
operator|new
name|IncludeTableFilter
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
operator|new
name|IncludeTableFilter
argument_list|(
literal|"bb"
argument_list|)
argument_list|)
expr_stmt|;
name|TableFilter
name|filter
init|=
operator|new
name|TableFilter
argument_list|(
name|includes
argument_list|,
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|PatternFilter
operator|.
name|PATTERN_COMPARATOR
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|"aa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|"aaaa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|"bb"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|"bbbb"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExclude
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|Pattern
argument_list|>
name|excludes
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|PatternFilter
operator|.
name|PATTERN_COMPARATOR
argument_list|)
decl_stmt|;
name|excludes
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|excludes
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"bb"
argument_list|)
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|IncludeTableFilter
argument_list|>
name|includes
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|includes
operator|.
name|add
argument_list|(
operator|new
name|IncludeTableFilter
argument_list|(
literal|null
argument_list|,
name|PatternFilter
operator|.
name|INCLUDE_EVERYTHING
argument_list|)
argument_list|)
expr_stmt|;
name|TableFilter
name|filter
init|=
operator|new
name|TableFilter
argument_list|(
name|includes
argument_list|,
name|excludes
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|"aa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|"aaaa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|"bb"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|"bbbb"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncludeExclude
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|Pattern
argument_list|>
name|excludes
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|PatternFilter
operator|.
name|PATTERN_COMPARATOR
argument_list|)
decl_stmt|;
name|excludes
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|excludes
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"bb"
argument_list|)
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|IncludeTableFilter
argument_list|>
name|includes
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|includes
operator|.
name|add
argument_list|(
operator|new
name|IncludeTableFilter
argument_list|(
literal|"aa.*"
argument_list|)
argument_list|)
expr_stmt|;
name|TableFilter
name|filter
init|=
operator|new
name|TableFilter
argument_list|(
name|includes
argument_list|,
name|excludes
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|"aa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|"aaaa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|"bb"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|isIncludeTable
argument_list|(
literal|"bbbb"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTableFilter
parameter_list|()
block|{
name|TreeSet
argument_list|<
name|IncludeTableFilter
argument_list|>
name|includes
init|=
operator|new
name|TreeSet
argument_list|<
name|IncludeTableFilter
argument_list|>
argument_list|()
decl_stmt|;
name|includes
operator|.
name|add
argument_list|(
operator|new
name|IncludeTableFilter
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|includes
operator|.
name|add
argument_list|(
operator|new
name|IncludeTableFilter
argument_list|(
literal|"bb"
argument_list|)
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|Pattern
argument_list|>
name|excludes
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|TableFilter
name|filter
init|=
operator|new
name|TableFilter
argument_list|(
name|includes
argument_list|,
name|excludes
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|filter
operator|.
name|getIncludeTableColumnFilter
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|filter
operator|.
name|getIncludeTableColumnFilter
argument_list|(
literal|"aa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|filter
operator|.
name|getIncludeTableColumnFilter
argument_list|(
literal|"aaaa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|filter
operator|.
name|getIncludeTableColumnFilter
argument_list|(
literal|"bb"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|filter
operator|.
name|getIncludeTableColumnFilter
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|filter
operator|.
name|getIncludeTableColumnFilter
argument_list|(
literal|"bbbb"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

