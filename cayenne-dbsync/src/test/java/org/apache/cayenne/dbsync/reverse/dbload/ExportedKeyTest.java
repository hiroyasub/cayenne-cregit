begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbload
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|ExportedKeyTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testEqualsKeyData
parameter_list|()
throws|throws
name|SQLException
block|{
name|ExportedKey
operator|.
name|KeyData
name|keyData1
init|=
operator|new
name|ExportedKey
operator|.
name|KeyData
argument_list|(
literal|"Catalog"
argument_list|,
literal|null
argument_list|,
literal|"Table"
argument_list|,
literal|"Column"
argument_list|,
literal|"Name"
argument_list|)
decl_stmt|;
name|ExportedKey
operator|.
name|KeyData
name|keyData2
init|=
operator|new
name|ExportedKey
operator|.
name|KeyData
argument_list|(
literal|"Catalog"
argument_list|,
literal|null
argument_list|,
literal|"Table"
argument_list|,
literal|"Column"
argument_list|,
literal|"Name"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyData1
operator|.
name|equals
argument_list|(
name|keyData2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyData2
operator|.
name|equals
argument_list|(
name|keyData1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keyData1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|keyData2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualsExportedKey
parameter_list|()
throws|throws
name|SQLException
block|{
name|ResultSet
name|rs1
init|=
name|mock
argument_list|(
name|ResultSet
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rs1
operator|.
name|getString
argument_list|(
literal|"PKTABLE_CAT"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"PKCatalog"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs1
operator|.
name|getString
argument_list|(
literal|"PKTABLE_SCHEM"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs1
operator|.
name|getString
argument_list|(
literal|"PKTABLE_NAME"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"PKTable"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs1
operator|.
name|getString
argument_list|(
literal|"PKCOLUMN_NAME"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"PKColumn"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs1
operator|.
name|getString
argument_list|(
literal|"PK_NAME"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"PKName"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs1
operator|.
name|getString
argument_list|(
literal|"FKTABLE_CAT"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"FKCatalog"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs1
operator|.
name|getString
argument_list|(
literal|"FKTABLE_SCHEM"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"FKSchema"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs1
operator|.
name|getString
argument_list|(
literal|"FKTABLE_NAME"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"FKTable"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs1
operator|.
name|getString
argument_list|(
literal|"FKCOLUMN_NAME"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"FKColumn"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs1
operator|.
name|getString
argument_list|(
literal|"FK_NAME"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"FKName"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs1
operator|.
name|getShort
argument_list|(
literal|"KEY_SEQ"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|ExportedKey
name|keyData1
init|=
operator|new
name|ExportedKey
argument_list|(
name|rs1
argument_list|)
decl_stmt|;
name|ResultSet
name|rs2
init|=
name|mock
argument_list|(
name|ResultSet
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rs2
operator|.
name|getString
argument_list|(
literal|"PKTABLE_CAT"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"PKCatalog"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs2
operator|.
name|getString
argument_list|(
literal|"PKTABLE_SCHEM"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs2
operator|.
name|getString
argument_list|(
literal|"PKTABLE_NAME"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"PKTable"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs2
operator|.
name|getString
argument_list|(
literal|"PKCOLUMN_NAME"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"PKColumn"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs2
operator|.
name|getString
argument_list|(
literal|"PK_NAME"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"PKName"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs2
operator|.
name|getString
argument_list|(
literal|"FKTABLE_CAT"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"FKCatalog"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs2
operator|.
name|getString
argument_list|(
literal|"FKTABLE_SCHEM"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"FKSchema"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs2
operator|.
name|getString
argument_list|(
literal|"FKTABLE_NAME"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"FKTable"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs2
operator|.
name|getString
argument_list|(
literal|"FKCOLUMN_NAME"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"FKColumn"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs2
operator|.
name|getString
argument_list|(
literal|"FK_NAME"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"FKName"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs2
operator|.
name|getShort
argument_list|(
literal|"KEY_SEQ"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|ExportedKey
name|keyData2
init|=
operator|new
name|ExportedKey
argument_list|(
name|rs2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyData1
operator|.
name|equals
argument_list|(
name|keyData2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|keyData2
operator|.
name|equals
argument_list|(
name|keyData1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keyData1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|keyData2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

