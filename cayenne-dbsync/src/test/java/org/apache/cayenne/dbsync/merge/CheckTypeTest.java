begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
operator|.
name|factory
operator|.
name|MergerTokenFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
operator|.
name|factory
operator|.
name|MySQLMergerTokenFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
operator|.
name|factory
operator|.
name|PostgresMergerTokenFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|merge
operator|.
name|token
operator|.
name|MergerToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|CheckTypeTest
block|{
name|DbEntity
name|dbEntity
decl_stmt|;
name|DbAttribute
name|original
decl_stmt|;
name|DbAttribute
name|imported
decl_stmt|;
name|MergerTokenFactory
name|mergerTokenFactory
decl_stmt|;
name|MergerDiffPair
argument_list|<
name|DbAttribute
argument_list|>
name|diffPair
decl_stmt|;
name|DbAttributeMerger
name|dbAttributeMerger
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|dbEntity
operator|=
operator|new
name|DbEntity
argument_list|(
literal|"NEW_TABLE"
argument_list|)
expr_stmt|;
name|original
operator|=
operator|new
name|DbAttribute
argument_list|(
literal|"NAME"
argument_list|)
expr_stmt|;
name|original
operator|.
name|setEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|imported
operator|=
operator|new
name|DbAttribute
argument_list|(
literal|"NAME"
argument_list|)
expr_stmt|;
name|imported
operator|.
name|setEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|mergerTokenFactory
operator|=
operator|new
name|MySQLMergerTokenFactory
argument_list|()
expr_stmt|;
name|diffPair
operator|=
operator|new
name|MergerDiffPair
argument_list|<>
argument_list|(
name|original
argument_list|,
name|imported
argument_list|)
expr_stmt|;
name|dbAttributeMerger
operator|=
operator|new
name|DbAttributeMerger
argument_list|(
name|mergerTokenFactory
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckBooleanBitTypeMySQL
parameter_list|()
block|{
name|original
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|imported
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|BIT
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|MergerToken
argument_list|>
name|mergerTokens
init|=
name|dbAttributeMerger
operator|.
name|createTokensForSame
argument_list|(
name|diffPair
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mergerTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckBlobLongvarbinaryTypeMySQL
parameter_list|()
block|{
name|original
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|BLOB
argument_list|)
expr_stmt|;
name|imported
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|LONGVARBINARY
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|MergerToken
argument_list|>
name|mergerTokens
init|=
name|dbAttributeMerger
operator|.
name|createTokensForSame
argument_list|(
name|diffPair
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mergerTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckBooleanIntegerTypeMySQL
parameter_list|()
block|{
name|original
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|imported
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|MergerToken
argument_list|>
name|mergerTokens
init|=
name|dbAttributeMerger
operator|.
name|createTokensForSame
argument_list|(
name|diffPair
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mergerTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MergerToken
name|mergerToken1
init|=
operator|(
name|MergerToken
operator|)
name|mergerTokens
operator|.
name|toArray
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|String
name|mergerToken
init|=
literal|"NEW_TABLE.NAME type: INTEGER -> BOOLEAN"
decl_stmt|;
name|assertEquals
argument_list|(
name|mergerToken
argument_list|,
name|mergerToken1
operator|.
name|getTokenValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckBooleanBitTypePostgres
parameter_list|()
block|{
name|original
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|imported
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|BIT
argument_list|)
expr_stmt|;
name|mergerTokenFactory
operator|=
operator|new
name|PostgresMergerTokenFactory
argument_list|()
expr_stmt|;
name|dbAttributeMerger
operator|=
operator|new
name|DbAttributeMerger
argument_list|(
name|mergerTokenFactory
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|MergerToken
argument_list|>
name|mergerTokens
init|=
name|dbAttributeMerger
operator|.
name|createTokensForSame
argument_list|(
name|diffPair
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mergerTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MergerToken
name|mergerToken1
init|=
operator|(
name|MergerToken
operator|)
name|mergerTokens
operator|.
name|toArray
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|String
name|mergerToken
init|=
literal|"NEW_TABLE.NAME type: BIT -> BOOLEAN"
decl_stmt|;
name|assertEquals
argument_list|(
name|mergerToken
argument_list|,
name|mergerToken1
operator|.
name|getTokenValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckNumericDecimalType
parameter_list|()
block|{
name|original
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|NUMERIC
argument_list|)
expr_stmt|;
name|imported
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|MergerToken
argument_list|>
name|mergerTokens
init|=
name|dbAttributeMerger
operator|.
name|createTokensForSame
argument_list|(
name|diffPair
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mergerTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckMaxLengthType
parameter_list|()
block|{
name|original
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|CHAR
argument_list|)
expr_stmt|;
name|original
operator|.
name|setMaxLength
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|imported
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|CHAR
argument_list|)
expr_stmt|;
name|imported
operator|.
name|setMaxLength
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|MergerToken
argument_list|>
name|mergerTokens
init|=
name|dbAttributeMerger
operator|.
name|createTokensForSame
argument_list|(
name|diffPair
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mergerTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MergerToken
name|mergerToken1
init|=
operator|(
name|MergerToken
operator|)
name|mergerTokens
operator|.
name|toArray
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|String
name|mergerToken
init|=
literal|"NEW_TABLE.NAME maxLength: 2 -> 1"
decl_stmt|;
name|assertEquals
argument_list|(
name|mergerToken
argument_list|,
name|mergerToken1
operator|.
name|getTokenValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckScaleType
parameter_list|()
block|{
name|original
operator|.
name|setScale
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|imported
operator|.
name|setScale
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|MergerToken
argument_list|>
name|mergerTokens
init|=
name|dbAttributeMerger
operator|.
name|createTokensForSame
argument_list|(
name|diffPair
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mergerTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MergerToken
name|mergerToken1
init|=
operator|(
name|MergerToken
operator|)
name|mergerTokens
operator|.
name|toArray
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|String
name|mergerToken
init|=
literal|"NEW_TABLE.NAME scale: 2 -> 1"
decl_stmt|;
name|assertEquals
argument_list|(
name|mergerToken
argument_list|,
name|mergerToken1
operator|.
name|getTokenValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckAttributePrecisionType
parameter_list|()
block|{
name|original
operator|.
name|setAttributePrecision
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|imported
operator|.
name|setAttributePrecision
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|MergerToken
argument_list|>
name|mergerTokens
init|=
name|dbAttributeMerger
operator|.
name|createTokensForSame
argument_list|(
name|diffPair
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mergerTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MergerToken
name|mergerToken1
init|=
operator|(
name|MergerToken
operator|)
name|mergerTokens
operator|.
name|toArray
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|String
name|mergerToken
init|=
literal|"NEW_TABLE.NAME precision: 2 -> 1"
decl_stmt|;
name|assertEquals
argument_list|(
name|mergerToken
argument_list|,
name|mergerToken1
operator|.
name|getTokenValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimeType
parameter_list|()
block|{
name|original
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|original
operator|.
name|setMaxLength
argument_list|(
literal|19
argument_list|)
expr_stmt|;
name|imported
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|imported
operator|.
name|setMaxLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|MergerToken
argument_list|>
name|mergerTokens
init|=
name|dbAttributeMerger
operator|.
name|createTokensForSame
argument_list|(
name|diffPair
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mergerTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MergerToken
name|mergerToken1
init|=
operator|(
name|MergerToken
operator|)
name|mergerTokens
operator|.
name|toArray
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|String
name|mergerToken
init|=
literal|"NEW_TABLE.NAME maxLength: 0 -> 19"
decl_stmt|;
name|assertEquals
argument_list|(
name|mergerToken
argument_list|,
name|mergerToken1
operator|.
name|getTokenValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckTypeWithoutChanges
parameter_list|()
block|{
name|diffPair
operator|=
operator|new
name|MergerDiffPair
argument_list|<>
argument_list|(
name|original
argument_list|,
name|imported
argument_list|)
expr_stmt|;
name|dbAttributeMerger
operator|=
operator|new
name|DbAttributeMerger
argument_list|(
name|mergerTokenFactory
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|MergerToken
argument_list|>
name|mergerTokens
init|=
name|dbAttributeMerger
operator|.
name|createTokensForSame
argument_list|(
name|diffPair
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mergerTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

