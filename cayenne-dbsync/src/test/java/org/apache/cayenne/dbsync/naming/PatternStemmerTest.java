begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|naming
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|PatternStemmerTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testStemNoMatch
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"xyzabc"
argument_list|,
operator|new
name|PatternStemmer
argument_list|(
literal|"^pre"
argument_list|,
literal|false
argument_list|)
operator|.
name|stem
argument_list|(
literal|"xyzabc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStemCaseSensitive
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"PREUPPERCASE"
argument_list|,
operator|new
name|PatternStemmer
argument_list|(
literal|"^pre"
argument_list|,
literal|true
argument_list|)
operator|.
name|stem
argument_list|(
literal|"PREUPPERCASE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UPPERCASE"
argument_list|,
operator|new
name|PatternStemmer
argument_list|(
literal|"^pre"
argument_list|,
literal|true
argument_list|)
operator|.
name|stem
argument_list|(
literal|"preUPPERCASE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStemCaseInsensitive
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"lowercase"
argument_list|,
operator|new
name|PatternStemmer
argument_list|(
literal|"^pre"
argument_list|,
literal|false
argument_list|)
operator|.
name|stem
argument_list|(
literal|"prelowercase"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UPPERCASE"
argument_list|,
operator|new
name|PatternStemmer
argument_list|(
literal|"^pre"
argument_list|,
literal|false
argument_list|)
operator|.
name|stem
argument_list|(
literal|"PREUPPERCASE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStemHead
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"name"
argument_list|,
operator|new
name|PatternStemmer
argument_list|(
literal|"^strip_"
argument_list|,
literal|false
argument_list|)
operator|.
name|stem
argument_list|(
literal|"strip_name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"strip_name"
argument_list|,
operator|new
name|PatternStemmer
argument_list|(
literal|"^strip_"
argument_list|,
literal|false
argument_list|)
operator|.
name|stem
argument_list|(
literal|"strip_strip_name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStemTail
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"name"
argument_list|,
operator|new
name|PatternStemmer
argument_list|(
literal|"_strip$"
argument_list|,
literal|false
argument_list|)
operator|.
name|stem
argument_list|(
literal|"name_strip"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"name_strip"
argument_list|,
operator|new
name|PatternStemmer
argument_list|(
literal|"_strip$"
argument_list|,
literal|false
argument_list|)
operator|.
name|stem
argument_list|(
literal|"name_strip_strip"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStemMiddle
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"start_end"
argument_list|,
operator|new
name|PatternStemmer
argument_list|(
literal|"_strip"
argument_list|,
literal|false
argument_list|)
operator|.
name|stem
argument_list|(
literal|"start_strip_end"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"start_end"
argument_list|,
operator|new
name|PatternStemmer
argument_list|(
literal|"_strip"
argument_list|,
literal|false
argument_list|)
operator|.
name|stem
argument_list|(
literal|"start_strip_strip_end"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

