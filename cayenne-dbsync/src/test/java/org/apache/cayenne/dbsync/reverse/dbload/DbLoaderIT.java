begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbload
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|naming
operator|.
name|DefaultObjectNameGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|naming
operator|.
name|NoStemStemmer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|UnitDbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCaseDataSourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_comment
comment|/**  * All tests have been moved to corresponding loaders tests.  */
end_comment

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|DbLoaderIT
extends|extends
name|ServerCase
block|{
specifier|public
specifier|static
specifier|final
name|DbLoaderConfiguration
name|CONFIG
init|=
operator|new
name|DbLoaderConfiguration
argument_list|()
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ServerRuntime
name|runtime
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DbAdapter
name|adapter
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ServerCaseDataSourceFactory
name|dataSourceFactory
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|UnitDbAdapter
name|accessStackAdapter
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
specifier|static
name|String
name|msgForTypeMismatch
parameter_list|(
name|DbAttribute
name|origAttr
parameter_list|,
name|DbAttribute
name|newAttr
parameter_list|)
block|{
return|return
name|msgForTypeMismatch
argument_list|(
name|origAttr
operator|.
name|getType
argument_list|()
argument_list|,
name|newAttr
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|msgForTypeMismatch
parameter_list|(
name|int
name|origType
parameter_list|,
name|DbAttribute
name|newAttr
parameter_list|)
block|{
name|String
name|nt
init|=
name|TypesMapping
operator|.
name|getSqlNameByType
argument_list|(
name|newAttr
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|ot
init|=
name|TypesMapping
operator|.
name|getSqlNameByType
argument_list|(
name|origType
argument_list|)
decl_stmt|;
return|return
name|attrMismatch
argument_list|(
name|newAttr
operator|.
name|getName
argument_list|()
argument_list|,
literal|"expected type:<"
operator|+
name|ot
operator|+
literal|">, but was<"
operator|+
name|nt
operator|+
literal|">"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|attrMismatch
parameter_list|(
name|String
name|attrName
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
return|return
literal|"[Error loading attribute '"
operator|+
name|attrName
operator|+
literal|"': "
operator|+
name|msg
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|connection
operator|=
name|dataSourceFactory
operator|.
name|getSharedDataSource
argument_list|()
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
specifier|private
name|DbLoader
name|createDbLoader
parameter_list|(
name|boolean
name|meaningfulPK
parameter_list|,
name|boolean
name|meaningfulFK
parameter_list|)
block|{
return|return
operator|new
name|DbLoader
argument_list|(
name|adapter
argument_list|,
name|connection
argument_list|,
name|CONFIG
argument_list|,
literal|null
argument_list|,
operator|new
name|DefaultObjectNameGenerator
argument_list|(
name|NoStemStemmer
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|assertUniqueConstraintsInRelationships
parameter_list|(
name|DataMap
name|map
parameter_list|)
block|{
comment|// unfortunately JDBC metadata doesn't provide info for UNIQUE
comment|// constraints....
comment|// cant reengineer them...
comment|// upd. actually it's provided:
comment|// http://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html#getIndexInfo%28java.lang.String,%20java.lang.String,%20java.lang.String,%20boolean,%20boolean%29
comment|// find rel to TO_ONEFK1
comment|/*          * Iterator it = getDbEntity(map,          * "TO_ONEFK2").getRelationships().iterator(); DbRelationship rel =          * (DbRelationship) it.next(); assertEquals("TO_ONEFK1",          * rel.getTargetEntityName());          * assertFalse("UNIQUE constraint was ignored...", rel.isToMany());          */
block|}
block|}
end_class

end_unit

