begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|compatibility
operator|.
name|DocumentProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|CompatibilityDataMapLoader
extends|extends
name|XMLDataMapLoader
block|{
annotation|@
name|Inject
name|DocumentProvider
name|documentProvider
decl_stmt|;
annotation|@
name|Override
specifier|public
name|DataMap
name|load
parameter_list|(
name|Resource
name|configurationResource
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
name|Document
name|document
init|=
name|documentProvider
operator|.
name|getDocument
argument_list|(
name|configurationResource
operator|.
name|getURL
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|load
argument_list|(
name|configurationResource
argument_list|)
return|;
block|}
try|try
block|{
name|DOMSource
name|source
init|=
operator|new
name|DOMSource
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|TransformerFactory
name|transFactory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|transFactory
operator|.
name|newTransformer
argument_list|()
operator|.
name|transform
argument_list|(
name|source
argument_list|,
operator|new
name|StreamResult
argument_list|(
name|baos
argument_list|)
argument_list|)
expr_stmt|;
name|InputSource
name|isource
init|=
operator|new
name|InputSource
argument_list|(
name|source
operator|.
name|getSystemId
argument_list|()
argument_list|)
decl_stmt|;
name|isource
operator|.
name|setByteStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|XMLReader
name|parser
init|=
name|Util
operator|.
name|createXmlReader
argument_list|()
decl_stmt|;
name|LoaderContext
name|loaderContext
init|=
operator|new
name|LoaderContext
argument_list|(
name|parser
argument_list|,
name|handlerFactory
argument_list|)
decl_stmt|;
name|loaderContext
operator|.
name|addDataMapListener
argument_list|(
operator|new
name|DataMapLoaderListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onDataMapLoaded
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
name|map
operator|=
name|dataMap
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|RootDataMapHandler
name|rootHandler
init|=
operator|new
name|RootDataMapHandler
argument_list|(
name|loaderContext
argument_list|)
decl_stmt|;
name|parser
operator|.
name|setContentHandler
argument_list|(
name|rootHandler
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setErrorHandler
argument_list|(
name|rootHandler
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|isource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error loading configuration from %s"
argument_list|,
name|e
argument_list|,
name|configurationResource
operator|.
name|getURL
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unable to load data map from %s"
argument_list|,
name|configurationResource
operator|.
name|getURL
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|map
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// set name based on location if no name provided by map itself
name|map
operator|.
name|setName
argument_list|(
name|mapNameFromLocation
argument_list|(
name|configurationResource
operator|.
name|getURL
argument_list|()
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
block|}
end_class

end_unit

