begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|PojoMapperTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testObjectCreation
parameter_list|()
block|{
name|PojoMapper
argument_list|<
name|C1
argument_list|>
name|descriptor
init|=
operator|new
name|PojoMapper
argument_list|<>
argument_list|(
name|C1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
index|[]
name|data
init|=
block|{
literal|"123"
block|,
name|o
block|,
literal|42
block|}
decl_stmt|;
name|C1
name|object
init|=
name|descriptor
operator|.
name|apply
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"123"
argument_list|,
name|object
operator|.
name|a
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|o
argument_list|,
name|object
operator|.
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|object
operator|.
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CayenneRuntimeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNonPublicClass
parameter_list|()
block|{
operator|new
name|PojoMapper
argument_list|<>
argument_list|(
name|C2
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CayenneRuntimeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNonPublicConstructor
parameter_list|()
block|{
operator|new
name|PojoMapper
argument_list|<>
argument_list|(
name|C3
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CayenneRuntimeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNonDefaultConstructor
parameter_list|()
block|{
operator|new
name|PojoMapper
argument_list|<>
argument_list|(
name|C4
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CayenneRuntimeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testWrongArgumentCount
parameter_list|()
block|{
name|PojoMapper
argument_list|<
name|C1
argument_list|>
name|descriptor
init|=
operator|new
name|PojoMapper
argument_list|<>
argument_list|(
name|C1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
index|[]
name|data
init|=
block|{
literal|"123"
block|,
operator|new
name|Object
argument_list|()
block|,
literal|42
block|,
literal|32
block|}
decl_stmt|;
name|descriptor
operator|.
name|apply
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|C1
block|{
name|String
name|a
decl_stmt|;
name|Object
name|b
decl_stmt|;
name|int
name|c
decl_stmt|;
block|}
specifier|private
specifier|static
class|class
name|C2
block|{
name|int
name|a
decl_stmt|;
block|}
specifier|public
specifier|static
class|class
name|C3
block|{
name|int
name|a
decl_stmt|;
specifier|private
name|C3
parameter_list|()
block|{
block|}
block|}
specifier|public
specifier|static
class|class
name|C4
block|{
name|int
name|a
decl_stmt|;
specifier|public
name|C4
parameter_list|(
name|int
name|a
parameter_list|)
block|{
block|}
block|}
block|}
end_class

end_unit

