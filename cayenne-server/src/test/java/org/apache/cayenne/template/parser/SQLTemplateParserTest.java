begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
operator|.
name|DefaultTemplateContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
operator|.
name|TemplateContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|SQLTemplateParserTest
block|{
specifier|private
name|TemplateContextFactory
name|contextFactory
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|contextFactory
operator|=
operator|new
name|DefaultTemplateContextFactory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnchangedParse
parameter_list|()
throws|throws
name|Exception
block|{
name|Context
name|context
init|=
name|contextFactory
operator|.
name|createContext
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|template
init|=
literal|"SELECT * FROM a"
decl_stmt|;
name|String
name|sql
init|=
name|parseString
argument_list|(
name|template
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|template
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParameterParse
parameter_list|()
throws|throws
name|Exception
block|{
name|Context
name|context
init|=
name|contextFactory
operator|.
name|createContext
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|template
init|=
literal|"SELECT $a FROM a"
decl_stmt|;
name|String
name|sql
init|=
name|parseString
argument_list|(
name|template
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"SELECT true FROM a"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIfElseParse
parameter_list|()
throws|throws
name|Exception
block|{
name|Context
name|context
init|=
name|contextFactory
operator|.
name|createContext
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|template
init|=
literal|"SELECT #if($a) * #else 1 #end FROM a"
decl_stmt|;
name|String
name|sql
init|=
name|parseString
argument_list|(
name|template
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"SELECT  *  FROM a"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|context
operator|=
name|contextFactory
operator|.
name|createContext
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|=
literal|"SELECT #if($a) * #else 1 #end FROM a"
expr_stmt|;
name|sql
operator|=
name|parseString
argument_list|(
name|template
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SELECT  1  FROM a"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindParse
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"var"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"bbb"
argument_list|)
expr_stmt|;
name|Context
name|context
init|=
name|contextFactory
operator|.
name|createContext
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|String
name|template
init|=
literal|"SELECT #if($a) #bind($a, 'INT' ,2) #else #bind($b, 'CHAR' ,2) #end FROM a"
decl_stmt|;
name|String
name|sql
init|=
name|parseString
argument_list|(
name|template
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"SELECT  ?  FROM a"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|getParameterBindings
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"var"
argument_list|,
name|context
operator|.
name|getParameterBindings
argument_list|()
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComplexParse
parameter_list|()
throws|throws
name|Exception
block|{
class|class
name|Helper
block|{
specifier|public
name|String
name|cayenneExp
parameter_list|(
name|Object
name|obj
parameter_list|,
name|String
name|exp
parameter_list|)
block|{
return|return
literal|"aaaa"
return|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"var"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"myHelper"
argument_list|,
operator|new
name|Helper
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|template
init|=
literal|"SELECT * \n"
operator|+
literal|"FROM ME\n"
operator|+
literal|"#if($a) \n"
operator|+
literal|"WHERE \n"
operator|+
literal|"COLUMN1 #bind($myHelper.cayenneExp($a, 'db:ID_COLUMN1'), 'INT')\n"
operator|+
literal|"     \tAND \n"
operator|+
literal|"COLUMN2 #bind($myHelper.cayenneExp($a, 'db:ID_COLUMN2'), 'VARCHAR')\n"
operator|+
literal|"#end\n"
decl_stmt|;
name|Context
name|context
init|=
name|contextFactory
operator|.
name|createContext
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|parseString
argument_list|(
name|template
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"SELECT * \n"
operator|+
literal|"FROM ME\n"
operator|+
literal|" \n"
operator|+
literal|"WHERE \n"
operator|+
literal|"COLUMN1 ?\n"
operator|+
literal|"     \tAND \n"
operator|+
literal|"COLUMN2 ?\n\n"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|context
operator|.
name|getParameterBindings
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaaa"
argument_list|,
name|context
operator|.
name|getParameterBindings
argument_list|()
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComplexParse2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tpl
init|=
literal|"SELECT "
operator|+
literal|"#result('t0.BIGDECIMAL_FIELD' 'java.math.BigDecimal' 'ec0_0' 'ec0_0' 2), "
operator|+
literal|"#result('t0.ID' 'java.lang.Integer' 'ec0_1' 'ec0_1' 4) "
operator|+
literal|"FROM BIGDECIMAL_ENTITY t0 WHERE {fn ABS( t0.BIGDECIMAL_FIELD)}< #bind($id0 'DECIMAL')"
decl_stmt|;
name|Context
name|context
init|=
name|contextFactory
operator|.
name|createContext
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"id0"
argument_list|,
literal|123
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|parseString
argument_list|(
name|tpl
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"SELECT "
operator|+
literal|"t0.BIGDECIMAL_FIELD AS ec0_0, "
operator|+
literal|"t0.ID AS ec0_1 "
operator|+
literal|"FROM BIGDECIMAL_ENTITY t0 WHERE {fn ABS( t0.BIGDECIMAL_FIELD)}< ?"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|getParameterBindings
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|context
operator|.
name|getColumnDescriptors
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComplexParse3
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tpl
init|=
literal|"SELECT "
operator|+
literal|"#result('COUNT(*)' 'java.lang.Long' 'sc0'), "
operator|+
literal|"#result('t0.ARTIST_NAME' 'java.lang.String' 'ec1_0' 'ec1_0' 1), "
operator|+
literal|"#result('t0.DATE_OF_BIRTH' 'java.util.Date' 'ec1_1' 'ec1_1' 91), "
operator|+
literal|"#result('t0.ARTIST_ID' 'java.lang.Long' 'ec1_2' 'ec1_2' -5), "
operator|+
literal|"#result('SUM(t1.ESTIMATED_PRICE)' 'java.math.BigDecimal' 'sc2') "
operator|+
literal|"FROM ARTIST t0 "
operator|+
literal|"LEFT OUTER JOIN PAINTING t1 ON (t0.ARTIST_ID = t1.ARTIST_ID) "
operator|+
literal|"GROUP BY t0.ARTIST_NAME, t0.DATE_OF_BIRTH, t0.ARTIST_ID ORDER BY t0.ARTIST_NAME"
decl_stmt|;
name|Context
name|context
init|=
name|contextFactory
operator|.
name|createContext
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|parseString
argument_list|(
name|tpl
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|context
operator|.
name|getColumnDescriptors
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SELECT COUNT(*) AS sc0, t0.ARTIST_NAME AS ec1_0, "
operator|+
literal|"t0.DATE_OF_BIRTH AS ec1_1, t0.ARTIST_ID AS ec1_2, SUM(t1.ESTIMATED_PRICE) AS sc2 "
operator|+
literal|"FROM ARTIST t0 "
operator|+
literal|"LEFT OUTER JOIN PAINTING t1 ON (t0.ARTIST_ID = t1.ARTIST_ID) "
operator|+
literal|"GROUP BY t0.ARTIST_NAME, t0.DATE_OF_BIRTH, t0.ARTIST_ID ORDER BY t0.ARTIST_NAME"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHelperObject
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tpl
init|=
literal|"($helper.cayenneExp($a, 'field'))"
decl_stmt|;
name|Context
name|context
init|=
name|contextFactory
operator|.
name|createContext
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
operator|new
name|TestBean
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|parseString
argument_list|(
name|tpl
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(5)"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMethodCallArray
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tpl
init|=
literal|"$a.arrayMethod(['1' '2' '3'])"
decl_stmt|;
name|Context
name|context
init|=
name|contextFactory
operator|.
name|createContext
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
operator|new
name|TestBean
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|parseString
argument_list|(
name|tpl
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"array_3"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMethodCallArray2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tpl
init|=
literal|"$a.arrayMethod(['1', '2', '3'])"
decl_stmt|;
name|Context
name|context
init|=
name|contextFactory
operator|.
name|createContext
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
operator|new
name|TestBean
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|parseString
argument_list|(
name|tpl
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"array_3"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMethodCallInt
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tpl
init|=
literal|"$a.intMethod(42)"
decl_stmt|;
name|Context
name|context
init|=
name|contextFactory
operator|.
name|createContext
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
operator|new
name|TestBean
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|parseString
argument_list|(
name|tpl
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"int_42"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMethodCallString
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tpl
init|=
literal|"$a.stringMethod(\"abc\")"
decl_stmt|;
name|Context
name|context
init|=
name|contextFactory
operator|.
name|createContext
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
operator|new
name|TestBean
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|parseString
argument_list|(
name|tpl
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"string_abc"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMethodCallFloat
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tpl
init|=
literal|"$a.floatMethod(3.14)"
decl_stmt|;
name|Context
name|context
init|=
name|contextFactory
operator|.
name|createContext
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
operator|new
name|TestBean
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|parseString
argument_list|(
name|tpl
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"float_3.14"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Method overload not properly supported, this test can return m2_true"
argument_list|)
specifier|public
name|void
name|testMethodCallSelectByArgType1
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tpl
init|=
literal|"$a.method(123)"
decl_stmt|;
name|Context
name|context
init|=
name|contextFactory
operator|.
name|createContext
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
operator|new
name|TestBean
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|parseString
argument_list|(
name|tpl
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"m1_123"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMethodCallSelectByArgType2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tpl
init|=
literal|"$a.method(true)"
decl_stmt|;
name|Context
name|context
init|=
name|contextFactory
operator|.
name|createContext
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
operator|new
name|TestBean
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|parseString
argument_list|(
name|tpl
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"m2_true"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertyAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tpl
init|=
literal|"$a.field()"
decl_stmt|;
name|Context
name|context
init|=
name|contextFactory
operator|.
name|createContext
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
operator|new
name|TestBean
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|parseString
argument_list|(
name|tpl
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedBrackets
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tpl
init|=
literal|"(#bind('A' 'b'))"
decl_stmt|;
name|String
name|sql
init|=
name|parseString
argument_list|(
name|tpl
argument_list|,
name|contextFactory
operator|.
name|createContext
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(?)"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQuotes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|template
init|=
literal|"\"$a\""
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|Context
name|context
init|=
name|contextFactory
operator|.
name|createContext
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|parseString
argument_list|(
name|template
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"\"val\""
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|context
operator|=
name|contextFactory
operator|.
name|createContext
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|template
operator|=
literal|"'$a'"
expr_stmt|;
name|sql
operator|=
name|parseString
argument_list|(
name|template
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"'val'"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComma
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|template
init|=
literal|"$a,$a"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|Context
name|context
init|=
name|contextFactory
operator|.
name|createContext
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|parseString
argument_list|(
name|template
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"val,val"
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|parseString
parameter_list|(
name|String
name|tpl
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|ParseException
block|{
operator|new
name|SQLTemplateParser
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|tpl
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|template
argument_list|()
operator|.
name|evaluate
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|context
operator|.
name|buildTemplate
argument_list|()
return|;
block|}
specifier|static
specifier|public
class|class
name|TestBean
block|{
specifier|private
name|int
name|field
decl_stmt|;
name|TestBean
parameter_list|(
name|int
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
specifier|public
name|int
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
specifier|public
name|String
name|arrayMethod
parameter_list|(
name|Object
index|[]
name|array
parameter_list|)
block|{
return|return
literal|"array_"
operator|+
name|array
operator|.
name|length
return|;
block|}
specifier|public
name|String
name|stringMethod
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
literal|"string_"
operator|+
name|string
return|;
block|}
specifier|public
name|String
name|intMethod
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
literal|"int_"
operator|+
name|i
return|;
block|}
specifier|public
name|String
name|floatMethod
parameter_list|(
name|float
name|f
parameter_list|)
block|{
return|return
literal|"float_"
operator|+
name|f
return|;
block|}
specifier|public
name|String
name|method
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
literal|"m1_"
operator|+
name|i
return|;
block|}
specifier|public
name|String
name|method
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
return|return
literal|"m2_"
operator|+
name|b
return|;
block|}
block|}
block|}
end_class

end_unit

