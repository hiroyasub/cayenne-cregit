begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|relationships_flattened
operator|.
name|Entity1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|relationships_flattened
operator|.
name|Entity3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|relationships_flattened
operator|.
name|FlattenedCircular
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|relationships_flattened
operator|.
name|FlattenedTest1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|relationships_flattened
operator|.
name|FlattenedTest2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|relationships_flattened
operator|.
name|FlattenedTest3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|relationships_flattened
operator|.
name|FlattenedTest4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|relationships_flattened
operator|.
name|FlattenedTest5
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|ValidationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test case for objects with flattened relationships.  */
end_comment

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|RELATIONSHIPS_FLATTENED_PROJECT
argument_list|)
specifier|public
class|class
name|FlattenedRelationshipsIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DataContext
name|context1
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
specifier|private
name|TableHelper
name|tFlattenedTest1
decl_stmt|;
specifier|private
name|TableHelper
name|tFlattenedTest2
decl_stmt|;
specifier|private
name|TableHelper
name|tFlattenedTest3
decl_stmt|;
specifier|private
name|TableHelper
name|tComplexJoin
decl_stmt|;
specifier|private
name|TableHelper
name|tFlattenedCircular
decl_stmt|;
specifier|private
name|TableHelper
name|tFlattenedCircularJoin
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|tFlattenedTest1
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"FLATTENED_TEST_1"
argument_list|)
expr_stmt|;
name|tFlattenedTest1
operator|.
name|setColumns
argument_list|(
literal|"FT1_ID"
argument_list|,
literal|"NAME"
argument_list|)
expr_stmt|;
name|tFlattenedTest2
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"FLATTENED_TEST_2"
argument_list|)
expr_stmt|;
name|tFlattenedTest2
operator|.
name|setColumns
argument_list|(
literal|"FT2_ID"
argument_list|,
literal|"FT1_ID"
argument_list|,
literal|"NAME"
argument_list|)
expr_stmt|;
name|tFlattenedTest3
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"FLATTENED_TEST_3"
argument_list|)
expr_stmt|;
name|tFlattenedTest3
operator|.
name|setColumns
argument_list|(
literal|"FT3_ID"
argument_list|,
literal|"FT2_ID"
argument_list|,
literal|"NAME"
argument_list|)
expr_stmt|;
name|tComplexJoin
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"COMPLEX_JOIN"
argument_list|)
expr_stmt|;
name|tComplexJoin
operator|.
name|setColumns
argument_list|(
literal|"PK"
argument_list|,
literal|"FT1_FK"
argument_list|,
literal|"FT3_FK"
argument_list|,
literal|"EXTRA_COLUMN"
argument_list|)
expr_stmt|;
name|tFlattenedCircular
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"FLATTENED_CIRCULAR"
argument_list|)
expr_stmt|;
name|tFlattenedCircular
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|)
expr_stmt|;
name|tFlattenedCircularJoin
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"FLATTENED_CIRCULAR_JOIN"
argument_list|)
expr_stmt|;
name|tFlattenedCircularJoin
operator|.
name|setColumns
argument_list|(
literal|"SIDE1_ID"
argument_list|,
literal|"SIDE2_ID"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createFlattenedTestDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|tFlattenedTest1
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"ft1"
argument_list|)
expr_stmt|;
name|tFlattenedTest1
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"ft12"
argument_list|)
expr_stmt|;
name|tFlattenedTest2
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|"ft2"
argument_list|)
expr_stmt|;
name|tFlattenedTest3
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|"ft3"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createFlattenedCircularDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|tFlattenedCircular
operator|.
name|insert
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|tFlattenedCircular
operator|.
name|insert
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|tFlattenedCircular
operator|.
name|insert
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|tFlattenedCircularJoin
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tFlattenedCircularJoin
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createCircularJoinDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|tFlattenedTest1
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"ft12"
argument_list|)
expr_stmt|;
name|tFlattenedTest3
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|null
argument_list|,
literal|"ft3-a"
argument_list|)
expr_stmt|;
name|tFlattenedTest3
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|null
argument_list|,
literal|"ft3-b"
argument_list|)
expr_stmt|;
name|tComplexJoin
operator|.
name|insert
argument_list|(
literal|2000
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|tComplexJoin
operator|.
name|insert
argument_list|(
literal|2001
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|tComplexJoin
operator|.
name|insert
argument_list|(
literal|2002
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertJoinWithPK
parameter_list|()
block|{
name|FlattenedTest1
name|obj01
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest1
operator|.
name|class
argument_list|)
decl_stmt|;
name|FlattenedTest3
name|obj11
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest3
operator|.
name|class
argument_list|)
decl_stmt|;
name|FlattenedTest3
name|obj12
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest3
operator|.
name|class
argument_list|)
decl_stmt|;
name|obj01
operator|.
name|setName
argument_list|(
literal|"t01"
argument_list|)
expr_stmt|;
name|obj11
operator|.
name|setName
argument_list|(
literal|"t11"
argument_list|)
expr_stmt|;
name|obj12
operator|.
name|setName
argument_list|(
literal|"t12"
argument_list|)
expr_stmt|;
name|obj01
operator|.
name|addToFt3OverComplex
argument_list|(
name|obj11
argument_list|)
expr_stmt|;
name|obj01
operator|.
name|addToFt3OverComplex
argument_list|(
name|obj12
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|int
name|pk
init|=
name|Cayenne
operator|.
name|intPKForObject
argument_list|(
name|obj01
argument_list|)
decl_stmt|;
name|context
operator|.
name|invalidateObjects
argument_list|(
name|obj01
argument_list|,
name|obj11
argument_list|,
name|obj12
argument_list|)
expr_stmt|;
name|FlattenedTest1
name|fresh01
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context1
argument_list|,
name|FlattenedTest1
operator|.
name|class
argument_list|,
name|pk
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"t01"
argument_list|,
name|fresh01
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ValueHolder
name|related
init|=
operator|(
name|ValueHolder
operator|)
name|fresh01
operator|.
name|getFt3OverComplex
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|related
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|related
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnsetJoinWithPK
parameter_list|()
throws|throws
name|Exception
block|{
name|createCircularJoinDataSet
argument_list|()
expr_stmt|;
name|SQLTemplate
name|joinSelect
init|=
operator|new
name|SQLTemplate
argument_list|(
name|FlattenedTest1
operator|.
name|class
argument_list|,
literal|"SELECT * FROM COMPLEX_JOIN"
argument_list|)
decl_stmt|;
name|joinSelect
operator|.
name|setFetchingDataRows
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|context
operator|.
name|performQuery
argument_list|(
name|joinSelect
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FlattenedTest1
name|ft1
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|FlattenedTest1
operator|.
name|class
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ft12"
argument_list|,
name|ft1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FlattenedTest3
argument_list|>
name|related
init|=
name|ft1
operator|.
name|getFt3OverComplex
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|ValueHolder
operator|)
name|related
operator|)
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|related
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FlattenedTest3
name|ft3
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|FlattenedTest3
operator|.
name|class
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|related
operator|.
name|contains
argument_list|(
name|ft3
argument_list|)
argument_list|)
expr_stmt|;
name|ft1
operator|.
name|removeFromFt3OverComplex
argument_list|(
name|ft3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|related
operator|.
name|contains
argument_list|(
name|ft3
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// the thing here is that there are two join records between
comment|// FT1 and FT3 (emulating invalid data or extras in the join table that
comment|// are ignored in the object model).. all (2) joins must be deleted
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|context
operator|.
name|performQuery
argument_list|(
name|joinSelect
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQualifyOnToManyFlattened
parameter_list|()
block|{
name|FlattenedTest1
name|obj01
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest1
operator|.
name|class
argument_list|)
decl_stmt|;
name|FlattenedTest2
name|obj02
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest2
operator|.
name|class
argument_list|)
decl_stmt|;
name|FlattenedTest3
name|obj031
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest3
operator|.
name|class
argument_list|)
decl_stmt|;
name|FlattenedTest3
name|obj032
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest3
operator|.
name|class
argument_list|)
decl_stmt|;
name|FlattenedTest1
name|obj11
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest1
operator|.
name|class
argument_list|)
decl_stmt|;
name|FlattenedTest2
name|obj12
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest2
operator|.
name|class
argument_list|)
decl_stmt|;
name|FlattenedTest3
name|obj131
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest3
operator|.
name|class
argument_list|)
decl_stmt|;
name|obj01
operator|.
name|setName
argument_list|(
literal|"t01"
argument_list|)
expr_stmt|;
name|obj02
operator|.
name|setName
argument_list|(
literal|"t02"
argument_list|)
expr_stmt|;
name|obj031
operator|.
name|setName
argument_list|(
literal|"t031"
argument_list|)
expr_stmt|;
name|obj032
operator|.
name|setName
argument_list|(
literal|"t032"
argument_list|)
expr_stmt|;
name|obj02
operator|.
name|setToFT1
argument_list|(
name|obj01
argument_list|)
expr_stmt|;
name|obj02
operator|.
name|addToFt3Array
argument_list|(
name|obj031
argument_list|)
expr_stmt|;
name|obj02
operator|.
name|addToFt3Array
argument_list|(
name|obj032
argument_list|)
expr_stmt|;
name|obj11
operator|.
name|setName
argument_list|(
literal|"t11"
argument_list|)
expr_stmt|;
name|obj131
operator|.
name|setName
argument_list|(
literal|"t131"
argument_list|)
expr_stmt|;
name|obj12
operator|.
name|setName
argument_list|(
literal|"t12"
argument_list|)
expr_stmt|;
name|obj12
operator|.
name|addToFt3Array
argument_list|(
name|obj131
argument_list|)
expr_stmt|;
name|obj12
operator|.
name|setToFT1
argument_list|(
name|obj11
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// test 1: qualify on flattened attribute
name|List
argument_list|<
name|FlattenedTest1
argument_list|>
name|objects1
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|FlattenedTest1
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|FlattenedTest1
operator|.
name|FT3ARRAY
operator|.
name|dot
argument_list|(
name|FlattenedTest3
operator|.
name|NAME
argument_list|)
operator|.
name|eq
argument_list|(
literal|"t031"
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|obj01
argument_list|,
name|objects1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// test 2: qualify on flattened relationship
name|List
argument_list|<
name|FlattenedTest1
argument_list|>
name|objects2
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|FlattenedTest1
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|FlattenedTest1
operator|.
name|FT3ARRAY
operator|.
name|contains
argument_list|(
name|obj131
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|obj11
argument_list|,
name|objects2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToOneSeriesFlattenedRel
parameter_list|()
block|{
name|FlattenedTest1
name|ft1
init|=
operator|(
name|FlattenedTest1
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"FlattenedTest1"
argument_list|)
decl_stmt|;
name|ft1
operator|.
name|setName
argument_list|(
literal|"FT1Name"
argument_list|)
expr_stmt|;
name|FlattenedTest2
name|ft2
init|=
operator|(
name|FlattenedTest2
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"FlattenedTest2"
argument_list|)
decl_stmt|;
name|ft2
operator|.
name|setName
argument_list|(
literal|"FT2Name"
argument_list|)
expr_stmt|;
name|FlattenedTest3
name|ft3
init|=
operator|(
name|FlattenedTest3
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"FlattenedTest3"
argument_list|)
decl_stmt|;
name|ft3
operator|.
name|setName
argument_list|(
literal|"FT3Name"
argument_list|)
expr_stmt|;
name|ft2
operator|.
name|setToFT1
argument_list|(
name|ft1
argument_list|)
expr_stmt|;
name|ft2
operator|.
name|addToFt3Array
argument_list|(
name|ft3
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|context
operator|.
name|invalidateObjects
argument_list|(
name|ft1
argument_list|,
name|ft2
argument_list|,
name|ft3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FlattenedTest3
argument_list|>
name|results
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|FlattenedTest3
operator|.
name|class
argument_list|,
name|FlattenedTest3
operator|.
name|NAME
operator|.
name|eq
argument_list|(
literal|"FT3Name"
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FlattenedTest3
name|fetchedFT3
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|FlattenedTest1
name|fetchedFT1
init|=
name|fetchedFT3
operator|.
name|getToFT1
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"FT1Name"
argument_list|,
name|fetchedFT1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTakeObjectSnapshotFlattenedFault
parameter_list|()
throws|throws
name|Exception
block|{
name|createFlattenedTestDataSet
argument_list|()
expr_stmt|;
comment|// fetch
name|List
argument_list|<
name|FlattenedTest3
argument_list|>
name|ft3s
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|FlattenedTest3
operator|.
name|class
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ft3s
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FlattenedTest3
name|ft3
init|=
name|ft3s
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ft3
operator|.
name|readPropertyDirectly
argument_list|(
literal|"toFT1"
argument_list|)
operator|instanceof
name|Fault
argument_list|)
expr_stmt|;
comment|// test that taking a snapshot does not trigger a fault, and generally works well
name|DataRow
name|snapshot
init|=
name|context
operator|.
name|currentSnapshot
argument_list|(
name|ft3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ft3"
argument_list|,
name|snapshot
operator|.
name|get
argument_list|(
literal|"NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ft3
operator|.
name|readPropertyDirectly
argument_list|(
literal|"toFT1"
argument_list|)
operator|instanceof
name|Fault
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRefetchWithFlattenedFaultToOneTarget1
parameter_list|()
throws|throws
name|Exception
block|{
name|createFlattenedTestDataSet
argument_list|()
expr_stmt|;
comment|// fetch
name|List
argument_list|<
name|FlattenedTest3
argument_list|>
name|ft3s
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|FlattenedTest3
operator|.
name|class
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ft3s
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FlattenedTest3
name|ft3
init|=
name|ft3s
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ft3
operator|.
name|readPropertyDirectly
argument_list|(
literal|"toFT1"
argument_list|)
operator|instanceof
name|Fault
argument_list|)
expr_stmt|;
comment|// refetch
name|ObjectSelect
operator|.
name|query
argument_list|(
name|FlattenedTest3
operator|.
name|class
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ft3
operator|.
name|readPropertyDirectly
argument_list|(
literal|"toFT1"
argument_list|)
operator|instanceof
name|Fault
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlattenedCircular
parameter_list|()
throws|throws
name|Exception
block|{
name|createFlattenedCircularDataSet
argument_list|()
expr_stmt|;
name|FlattenedCircular
name|fc1
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|FlattenedCircular
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FlattenedCircular
argument_list|>
name|side2s
init|=
name|fc1
operator|.
name|getSide2s
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|side2s
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FlattenedCircular
argument_list|>
name|side1s
init|=
name|fc1
operator|.
name|getSide1s
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|side1s
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Should be able to save/insert an object with flattened (complex) toOne relationship      */
annotation|@
name|Test
specifier|public
name|void
name|testFlattenedComplexToOneRelationship
parameter_list|()
block|{
name|FlattenedTest1
name|ft1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest1
operator|.
name|class
argument_list|)
decl_stmt|;
name|ft1
operator|.
name|setName
argument_list|(
literal|"FT1"
argument_list|)
expr_stmt|;
name|FlattenedTest5
name|ft5
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest5
operator|.
name|class
argument_list|)
decl_stmt|;
name|ft5
operator|.
name|setName
argument_list|(
literal|"FT5"
argument_list|)
expr_stmt|;
name|ft5
operator|.
name|setToFT1
argument_list|(
name|ft1
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|FlattenedTest5
name|ft5Persisted
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|FlattenedTest5
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ft1
argument_list|,
name|ft5Persisted
operator|.
name|getToFT1
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Should be able to save/insert an object with null flattened (complex) toOne relationship      */
annotation|@
name|Test
specifier|public
name|void
name|testNullFlattenedComplexToOneRelationship
parameter_list|()
block|{
name|FlattenedTest5
name|ft5
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest5
operator|.
name|class
argument_list|)
decl_stmt|;
name|ft5
operator|.
name|setName
argument_list|(
literal|"FT5"
argument_list|)
expr_stmt|;
comment|// should be valid for save
name|ValidationResult
name|validationResult
init|=
operator|new
name|ValidationResult
argument_list|()
decl_stmt|;
name|ft5
operator|.
name|validateForSave
argument_list|(
name|validationResult
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|validationResult
operator|.
name|toString
argument_list|()
argument_list|,
name|validationResult
operator|.
name|getFailures
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ObjectSelect
operator|.
name|query
argument_list|(
name|FlattenedTest5
operator|.
name|class
argument_list|)
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetFlattenedRelationship
parameter_list|()
block|{
name|FlattenedTest1
name|flattenedTest1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest1
operator|.
name|class
argument_list|)
decl_stmt|;
name|flattenedTest1
operator|.
name|setName
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|FlattenedTest3
name|flattenedTest3
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest3
operator|.
name|class
argument_list|)
decl_stmt|;
name|flattenedTest3
operator|.
name|setName
argument_list|(
literal|"f3"
argument_list|)
expr_stmt|;
name|flattenedTest3
operator|.
name|setToFT1
argument_list|(
name|flattenedTest1
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|FlattenedTest3
argument_list|>
name|flattenedTest3s
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|FlattenedTest3
operator|.
name|class
argument_list|)
operator|.
name|prefetch
argument_list|(
name|FlattenedTest3
operator|.
name|TO_FT1
operator|.
name|disjoint
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|flattenedTest3s
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f3"
argument_list|,
name|flattenedTest3s
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|flattenedTest3s
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getToFT1
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSecondToOneReverseToFk
parameter_list|()
block|{
name|FlattenedTest1
name|flattenedTest1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest1
operator|.
name|class
argument_list|)
decl_stmt|;
name|flattenedTest1
operator|.
name|setName
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|FlattenedTest4
name|flattenedTest4
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest4
operator|.
name|class
argument_list|)
decl_stmt|;
name|flattenedTest4
operator|.
name|setName
argument_list|(
literal|"f4"
argument_list|)
expr_stmt|;
name|flattenedTest1
operator|.
name|addToFt4ArrayFor1
argument_list|(
name|flattenedTest4
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSecondToOneToFk
parameter_list|()
block|{
name|Entity1
name|entity1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Entity1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Entity3
name|entity3
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Entity3
operator|.
name|class
argument_list|)
decl_stmt|;
name|entity1
operator|.
name|setToEntity3
argument_list|(
name|entity3
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Entity1
argument_list|>
name|entity1s
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Entity1
operator|.
name|class
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Entity1
operator|.
name|TO_ENTITY3
operator|.
name|disjoint
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entity1s
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entity1s
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getToEntity3
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetFlattenedCircular
parameter_list|()
block|{
name|FlattenedCircular
name|flattenedCircular1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedCircular
operator|.
name|class
argument_list|)
decl_stmt|;
name|FlattenedCircular
name|flattenedCircular2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedCircular
operator|.
name|class
argument_list|)
decl_stmt|;
name|flattenedCircular1
operator|.
name|addToSide1s
argument_list|(
name|flattenedCircular2
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|FlattenedCircular
argument_list|>
name|flattenedCirculars
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|FlattenedCircular
operator|.
name|class
argument_list|)
operator|.
name|prefetch
argument_list|(
name|FlattenedCircular
operator|.
name|SIDE1S
operator|.
name|disjoint
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|flattenedCirculars
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFt1ToFt5Flattened
parameter_list|()
block|{
name|FlattenedTest1
name|flattenedTest1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest1
operator|.
name|class
argument_list|)
decl_stmt|;
name|flattenedTest1
operator|.
name|setName
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|FlattenedTest5
name|flattenedTest5
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest5
operator|.
name|class
argument_list|)
decl_stmt|;
name|flattenedTest5
operator|.
name|setName
argument_list|(
literal|"f5"
argument_list|)
expr_stmt|;
name|flattenedTest1
operator|.
name|addToFt5Array
argument_list|(
name|flattenedTest5
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|FlattenedTest1
argument_list|>
name|flattenedTest1s
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|FlattenedTest1
operator|.
name|class
argument_list|)
operator|.
name|prefetch
argument_list|(
name|FlattenedTest1
operator|.
name|FT5ARRAY
operator|.
name|disjoint
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|flattenedTest1s
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|flattenedTest1s
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFt5Array
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFt5ToFt1Flattened
parameter_list|()
block|{
name|FlattenedTest5
name|flattenedTest5
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest5
operator|.
name|class
argument_list|)
decl_stmt|;
name|flattenedTest5
operator|.
name|setName
argument_list|(
literal|"f5"
argument_list|)
expr_stmt|;
name|FlattenedTest1
name|flattenedTest1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|FlattenedTest1
operator|.
name|class
argument_list|)
decl_stmt|;
name|flattenedTest1
operator|.
name|setName
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|flattenedTest5
operator|.
name|setToFT1
argument_list|(
name|flattenedTest1
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|FlattenedTest5
argument_list|>
name|flattenedTest5s
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|FlattenedTest5
operator|.
name|class
argument_list|)
operator|.
name|prefetch
argument_list|(
name|FlattenedTest5
operator|.
name|TO_FT1
operator|.
name|disjoint
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|flattenedTest5s
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f5"
argument_list|,
name|flattenedTest5s
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|flattenedTest5s
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getToFT1
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

