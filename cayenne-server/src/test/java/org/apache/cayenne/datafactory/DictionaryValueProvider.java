begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|datafactory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|DictionaryValueProvider
parameter_list|<
name|T
parameter_list|>
implements|implements
name|ValueProvider
argument_list|<
name|T
argument_list|>
block|{
specifier|private
name|Random
name|random
init|=
name|ValueProvider
operator|.
name|RANDOM
decl_stmt|;
specifier|public
name|DictionaryValueProvider
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
block|}
comment|/**      * Returns a random item from an array of items      *      * @return Item from the array      */
specifier|public
name|T
name|randomValue
parameter_list|()
block|{
return|return
name|randomValue
argument_list|(
literal|100
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Returns a random item from an array of items or null depending on the      * probability parameter. The probability determines the chance (in %) of      * returning an item from the array versus null.      *      * @param probability      *            chance (in %, 100 being guaranteed) of returning an item from      *            the array      * @return Item from the array or the default value      */
specifier|public
name|T
name|randomValue
parameter_list|(
name|int
name|probability
parameter_list|)
block|{
return|return
name|randomValue
argument_list|(
name|probability
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Returns a random item from an array of items or the defaultItem depending      * on the probability parameter. The probability determines the chance (in      * %) of returning an item from the array versus the default value.      *      * @param probability      *            chance (in %, 100 being guaranteed) of returning an item from      *            the array      * @param defaultItem      *            value to return if the probability test fails      * @return Item from the array or the default value      */
specifier|public
name|T
name|randomValue
parameter_list|(
name|int
name|probability
parameter_list|,
name|T
name|defaultItem
parameter_list|)
block|{
if|if
condition|(
name|values
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Item array cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|values
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Item array cannot be empty"
argument_list|)
throw|;
block|}
return|return
name|chance
argument_list|(
name|probability
argument_list|)
condition|?
name|values
argument_list|()
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|values
argument_list|()
operator|.
name|length
argument_list|)
index|]
else|:
name|defaultItem
return|;
block|}
comment|/**      * Gives you a true/false based on a probability with a random number      * generator. Can be used to optionally add elements.      *      *<pre>      * if (DataFactory.chance(70)) {      * 	// 70% chance of this code being executed      * }      *</pre>      *      * @param chance      *            % chance of returning true      * @return      */
specifier|public
name|boolean
name|chance
parameter_list|(
name|int
name|chance
parameter_list|)
block|{
return|return
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|chance
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRandom
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|T
index|[]
name|values
parameter_list|()
function_decl|;
block|}
end_class

end_unit

