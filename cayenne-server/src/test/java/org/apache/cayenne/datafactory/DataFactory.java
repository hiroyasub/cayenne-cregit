begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|datafactory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|DataFactory
block|{
specifier|private
name|Random
name|random
init|=
name|ValueProvider
operator|.
name|RANDOM
decl_stmt|;
comment|/**      * @return A random first name      */
specifier|public
name|String
name|getFirstName
parameter_list|()
block|{
return|return
name|ValueProvider
operator|.
name|FIRST_NAMES
operator|.
name|randomValue
argument_list|()
return|;
block|}
comment|/**      * @return a combination of first and last name values in one string      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getFirstName
argument_list|()
operator|+
literal|" "
operator|+
name|getLastName
argument_list|()
return|;
block|}
comment|/**      * @return A random last name      */
specifier|public
name|String
name|getLastName
parameter_list|()
block|{
return|return
name|ValueProvider
operator|.
name|LAST_NAMES
operator|.
name|randomValue
argument_list|()
return|;
block|}
comment|/**      * @return A random street name      */
specifier|public
name|String
name|getStreetName
parameter_list|()
block|{
return|return
name|ValueProvider
operator|.
name|STREET_NAMES
operator|.
name|randomValue
argument_list|()
return|;
block|}
comment|/**      * @return A random street suffix      */
specifier|public
name|String
name|getStreetSuffix
parameter_list|()
block|{
return|return
name|ValueProvider
operator|.
name|ADDRESS_SUFFIXES
operator|.
name|randomValue
argument_list|()
return|;
block|}
comment|/**      * @return City as a string      */
specifier|public
name|String
name|getCity
parameter_list|()
block|{
return|return
name|ValueProvider
operator|.
name|CITIES
operator|.
name|randomValue
argument_list|()
return|;
block|}
comment|/**      * Generates an address value consisting of house number, street name and      * street suffix. i.e.<code>543 Larkhill Road</code>      *      * @return Address as a string      */
specifier|public
name|String
name|getAddress
parameter_list|()
block|{
name|int
name|num
init|=
literal|404
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|1400
argument_list|)
decl_stmt|;
return|return
name|num
operator|+
literal|" "
operator|+
name|getStreetName
argument_list|()
operator|+
literal|" "
operator|+
name|getStreetSuffix
argument_list|()
return|;
block|}
comment|/**      * Generates line 2 for a street address (usually an Apt. or Suite #).      * Returns default value if the probabilty test fails.      *      * @return Street address line 2      */
specifier|public
name|String
name|getAddressLine2
parameter_list|()
block|{
name|int
name|test
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|<
literal|50
condition|)
block|{
return|return
literal|"Apt #"
operator|+
literal|100
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|"Suite #"
operator|+
literal|100
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
return|;
block|}
block|}
comment|/**      * Creates a random birthdate within the range of 1955 to 1985      *      * @return Date representing a birthdate      */
specifier|public
name|Date
name|getBirthDate
parameter_list|()
block|{
name|Date
name|base
init|=
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|getDate
argument_list|(
name|base
argument_list|,
operator|-
literal|365
operator|*
literal|15
argument_list|,
literal|365
operator|*
literal|15
argument_list|)
return|;
block|}
comment|/**      * Returns a random int value.      *      * @return random number      */
specifier|public
name|int
name|getNumber
parameter_list|()
block|{
return|return
name|getNumberBetween
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
comment|/**      * Returns a random number between 0 and max      *      * @param max      *            Maximum value of result      * @return random number no more than max      */
specifier|public
name|int
name|getNumberUpTo
parameter_list|(
name|int
name|max
parameter_list|)
block|{
return|return
name|getNumberBetween
argument_list|(
literal|0
argument_list|,
name|max
argument_list|)
return|;
block|}
comment|/**      * Returns a number betwen min and max      *      * @param min      *            minimum value of result      * @param max      *            maximum value of result      * @return Random number within range      */
specifier|public
name|int
name|getNumberBetween
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
if|if
condition|(
name|max
operator|<
name|min
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Minimum must be less than minimum (min=%d, max=%d)"
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|min
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|max
operator|-
name|min
argument_list|)
return|;
block|}
comment|/**      * Builds a date from the year, month, day values passed in      *      * @param year      *            The year of the final {@link Date} result      * @param month      *            The month of the final {@link Date} result (from 1-12)      * @param day      *            The day of the final {@link Date} result      * @return Date representing the passed in values.      */
specifier|public
name|Date
name|getDate
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|,
name|int
name|day
parameter_list|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|year
argument_list|,
name|month
operator|-
literal|1
argument_list|,
name|day
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
block|}
comment|/**      * Returns a random date which is in the range<code>baseData</code> +      *<code>minDaysFromData</code> to<code>baseData</code> +      *<code>maxDaysFromData</code>. This method does not alter the time      * component and the time is set to the time value of the base date.      *      * @param baseDate      *            Date to start from      * @param minDaysFromDate      *            minimum number of days from the baseDate the result can be      * @param maxDaysFromDate      *            maximum number of days from the baseDate the result can be      * @return A random date      */
specifier|public
name|Date
name|getDate
parameter_list|(
name|Date
name|baseDate
parameter_list|,
name|int
name|minDaysFromDate
parameter_list|,
name|int
name|maxDaysFromDate
parameter_list|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|baseDate
argument_list|)
expr_stmt|;
name|int
name|diff
init|=
name|minDaysFromDate
operator|+
operator|(
name|random
operator|.
name|nextInt
argument_list|(
name|maxDaysFromDate
operator|-
name|minDaysFromDate
argument_list|)
operator|)
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DATE
argument_list|,
name|diff
argument_list|)
expr_stmt|;
return|return
name|cal
operator|.
name|getTime
argument_list|()
return|;
block|}
comment|/**      * Returns a random date between two dates. This method will alter the time      * component of the dates      *      * @param minDate      *            Minimum date that can be returned      * @param maxDate      *            Maximum date that can be returned      * @return random date between these two dates.      */
specifier|public
name|Date
name|getDateBetween
parameter_list|(
name|Date
name|minDate
parameter_list|,
name|Date
name|maxDate
parameter_list|)
block|{
comment|// this can break if seconds is an int
name|long
name|seconds
init|=
operator|(
name|maxDate
operator|.
name|getTime
argument_list|()
operator|-
name|minDate
operator|.
name|getTime
argument_list|()
operator|)
operator|/
literal|1000
decl_stmt|;
name|seconds
operator|=
operator|(
name|long
operator|)
operator|(
name|random
operator|.
name|nextDouble
argument_list|()
operator|*
name|seconds
operator|)
expr_stmt|;
name|Date
name|result
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|result
operator|.
name|setTime
argument_list|(
name|minDate
operator|.
name|getTime
argument_list|()
operator|+
operator|(
name|seconds
operator|*
literal|1000
operator|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Returns random text made up of english words of length      *<code>length</code>      *      * @param length      *            length of returned string      *      * @return string made up of actual words with length<code>length</code>      */
specifier|public
name|String
name|getRandomText
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
name|getRandomText
argument_list|(
name|length
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**      * Returns random text made up of english words      *      * @param minLength      *            minimum length of returned string      * @param maxLength      *            maximum length of returned string      * @return string of length between min and max length      */
specifier|public
name|String
name|getRandomText
parameter_list|(
name|int
name|minLength
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
name|validateMinMaxParams
argument_list|(
name|minLength
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|maxLength
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|minLength
decl_stmt|;
if|if
condition|(
name|maxLength
operator|!=
name|minLength
condition|)
block|{
name|length
operator|=
name|length
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|maxLength
operator|-
name|minLength
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|length
operator|--
expr_stmt|;
block|}
name|String
name|word
init|=
name|getRandomWord
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|word
argument_list|)
expr_stmt|;
name|length
operator|=
name|length
operator|-
name|word
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|<
name|maxLength
condition|)
block|{
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|sb
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|maxLength
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|validateMinMaxParams
parameter_list|(
name|int
name|minLength
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
if|if
condition|(
name|minLength
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Minimum length must be a non-negative number"
argument_list|)
throw|;
block|}
if|if
condition|(
name|maxLength
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Maximum length must be a non-negative number"
argument_list|)
throw|;
block|}
if|if
condition|(
name|maxLength
operator|<
name|minLength
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Minimum length must be less than maximum length (min=%d, max=%d)"
argument_list|,
name|minLength
argument_list|,
name|maxLength
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**      * @return a random character      */
specifier|public
name|char
name|getRandomChar
parameter_list|()
block|{
return|return
operator|(
name|char
operator|)
operator|(
name|random
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
operator|+
literal|'a'
operator|)
return|;
block|}
comment|/**      * Return a string containing<code>length</code> random characters      *      * @param length      *            number of characters to use in the string      * @return A string containing<code>length</code> random characters      */
specifier|public
name|String
name|getRandomChars
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
name|getRandomChars
argument_list|(
name|length
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/**      * Return a string containing between<code>length</code> random characters      *      * @param maxLength max number of characters to use in the string      * @param minLength min number of characters to use in the string      * @return A string containing<code>length</code> random characters      */
specifier|public
name|String
name|getRandomChars
parameter_list|(
name|int
name|minLength
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
name|validateMinMaxParams
argument_list|(
name|minLength
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|maxLength
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|minLength
decl_stmt|;
if|if
condition|(
name|maxLength
operator|!=
name|minLength
condition|)
block|{
name|length
operator|=
name|length
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|maxLength
operator|-
name|minLength
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getRandomChar
argument_list|()
argument_list|)
expr_stmt|;
name|length
operator|--
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Returns a word of a length between 1 and 10 characters.      *      * @return A work of max length 10      */
specifier|public
name|String
name|getRandomWord
parameter_list|()
block|{
return|return
name|ValueProvider
operator|.
name|WORDS
operator|.
name|randomValue
argument_list|()
return|;
block|}
comment|/**      *      * @param chance      *            Chance of a suffix being returned      * @return      */
specifier|public
name|String
name|getSuffix
parameter_list|(
name|int
name|chance
parameter_list|)
block|{
return|return
name|ValueProvider
operator|.
name|suffixes
operator|.
name|randomValue
argument_list|(
name|chance
argument_list|)
return|;
block|}
comment|/**      * Return a person prefix or null if the odds are too low.      *      * @param chance      *            Odds of a prefix being returned      * @return Prefix string      */
specifier|public
name|String
name|getPrefix
parameter_list|(
name|int
name|chance
parameter_list|)
block|{
return|return
name|ValueProvider
operator|.
name|prefixes
operator|.
name|randomValue
argument_list|(
name|chance
argument_list|)
return|;
block|}
comment|/**      * Returns a string containing a set of numbers with a fixed number of      * digits      *      * @param digits      *            number of digits in the final number      * @return Random number as a string with a fixed length      */
specifier|public
name|String
name|getNumberText
parameter_list|(
name|int
name|digits
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|(
name|digits
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|digits
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|append
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Generates an email address      *      * @return an email address      */
specifier|public
name|String
name|getEmailAddress
parameter_list|()
block|{
return|return
name|getLogin
argument_list|()
operator|+
literal|"@"
operator|+
name|ValueProvider
operator|.
name|EMAIL_HOSTS
operator|.
name|randomValue
argument_list|()
operator|+
literal|"."
operator|+
name|ValueProvider
operator|.
name|TLDS
operator|.
name|randomValue
argument_list|()
return|;
block|}
specifier|public
name|String
name|getLogin
parameter_list|()
block|{
name|int
name|test
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|String
name|login
decl_stmt|;
if|if
condition|(
name|test
operator|<
literal|20
condition|)
block|{
name|login
operator|=
name|getFirstName
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|+
name|getLastName
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|test
operator|<
literal|40
condition|)
block|{
name|login
operator|=
name|getFirstName
argument_list|()
operator|+
literal|"."
operator|+
name|getLastName
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|test
operator|<
literal|45
condition|)
block|{
name|login
operator|=
name|getFirstName
argument_list|()
operator|+
literal|"_"
operator|+
name|getLastName
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|test
operator|<
literal|55
condition|)
block|{
name|login
operator|=
name|getLastName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|login
operator|=
name|getRandomWord
argument_list|()
operator|+
name|getRandomWord
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|>
literal|80
condition|)
block|{
name|login
operator|=
name|login
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
return|return
name|login
return|;
block|}
specifier|public
name|boolean
name|chance
parameter_list|(
name|int
name|chance
parameter_list|)
block|{
return|return
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|chance
return|;
block|}
comment|/**      * Call randomize with a seed value to reset the random number generator. By      * using the same seed over different tests, you will should get the same      * results out for the same data generation calls.      *      * @param seed      *            Seed value to use to generate random numbers      */
specifier|public
name|void
name|randomize
parameter_list|(
name|int
name|seed
parameter_list|)
block|{
name|random
operator|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

