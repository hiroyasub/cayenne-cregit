begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|ROPainting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|CayenneDataObjectSetToManyListIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|ServerRuntime
name|runtime
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ObjectContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
specifier|protected
name|TableHelper
name|tArtist
decl_stmt|;
specifier|protected
name|TableHelper
name|tPainting
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|tArtist
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"ARTIST"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|setColumns
argument_list|(
literal|"ARTIST_ID"
argument_list|,
literal|"ARTIST_NAME"
argument_list|)
expr_stmt|;
name|tPainting
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"PAINTING"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|setColumns
argument_list|(
literal|"PAINTING_ID"
argument_list|,
literal|"PAINTING_TITLE"
argument_list|,
literal|"ARTIST_ID"
argument_list|)
operator|.
name|setColumnTypes
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|createArtistWithPaintingDataSet
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createArtistWithPaintingDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|tArtist
operator|.
name|insert
argument_list|(
literal|8
argument_list|,
literal|"artist 8"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|6
argument_list|,
literal|"painting 6"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|7
argument_list|,
literal|"painting 7"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|8
argument_list|,
literal|"painting 8"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadRO1
parameter_list|()
block|{
name|Artist
name|a1
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ROPainting
argument_list|>
name|paints
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ROPainting
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|ROPainting
operator|.
name|TO_ARTIST
operator|.
name|eq
argument_list|(
name|a1
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|paints
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ROPainting
name|rop1
init|=
name|paints
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|a1
argument_list|,
name|rop1
operator|.
name|getToArtist
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetEmptyList1
parameter_list|()
block|{
name|Artist
name|artist
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|artist
operator|.
name|setToManyTarget
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ROPainting
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|paints
init|=
name|artist
operator|.
name|getPaintingArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|paints
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSetEmptyList2
parameter_list|()
block|{
name|Artist
name|artist
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|artist
operator|.
name|setToManyTarget
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNonExistentRelName
parameter_list|()
block|{
name|Artist
name|artist
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|artist
operator|.
name|setToManyTarget
argument_list|(
literal|"doesnotexist"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ROPainting
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEmptyRelName
parameter_list|()
block|{
name|Artist
name|artist
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|artist
operator|.
name|setToManyTarget
argument_list|(
literal|""
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ROPainting
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullRelName
parameter_list|()
block|{
name|Artist
name|artist
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|artist
operator|.
name|setToManyTarget
argument_list|(
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ROPainting
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTotalDifferentPaintings
parameter_list|()
block|{
name|Artist
name|artist
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|8
argument_list|)
decl_stmt|;
comment|// copy the paintings list. Replacing paintings wont change the copy
name|List
argument_list|<
name|Painting
argument_list|>
name|oldPaints
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|artist
operator|.
name|getPaintingArray
argument_list|()
argument_list|)
decl_stmt|;
name|Painting
name|paintX
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|paintX
operator|.
name|setPaintingTitle
argument_list|(
literal|"pantingX"
argument_list|)
expr_stmt|;
name|Painting
name|paintY
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|paintY
operator|.
name|setPaintingTitle
argument_list|(
literal|"paintingY"
argument_list|)
expr_stmt|;
name|Painting
name|paintZ
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|paintZ
operator|.
name|setPaintingTitle
argument_list|(
literal|"paintingZ"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|DataObject
argument_list|>
name|returnList
init|=
name|artist
operator|.
name|setToManyTarget
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|getName
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|paintX
argument_list|,
name|paintY
argument_list|,
name|paintZ
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|returnList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnList
operator|.
name|containsAll
argument_list|(
name|oldPaints
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|newPaints
init|=
name|artist
operator|.
name|getPaintingArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|newPaints
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Painting
name|oldPaint
range|:
name|oldPaints
control|)
block|{
comment|// no element of oldPaints should exist in the newPaints
name|assertFalse
argument_list|(
name|newPaints
operator|.
name|contains
argument_list|(
name|oldPaint
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSamePaintings
parameter_list|()
block|{
name|Artist
name|artist
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|oldPaints
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|artist
operator|.
name|getPaintingArray
argument_list|()
argument_list|)
decl_stmt|;
name|Painting
name|paint6
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Painting
operator|.
name|class
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|Painting
name|paint7
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Painting
operator|.
name|class
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|Painting
name|paint8
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Painting
operator|.
name|class
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|newPaints
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|paint6
argument_list|,
name|paint7
argument_list|,
name|paint8
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|DataObject
argument_list|>
name|returnList
init|=
name|artist
operator|.
name|setToManyTarget
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|getName
argument_list|()
argument_list|,
name|newPaints
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|returnList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|newPaints
operator|=
name|artist
operator|.
name|getPaintingArray
argument_list|()
expr_stmt|;
comment|// testing if oldPaints and newPaints contain the same objects
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|newPaints
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|oldPaints
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newPaints
operator|.
name|containsAll
argument_list|(
name|oldPaints
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOldPlusNewPaintings
parameter_list|()
block|{
name|Artist
name|artist
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|oldPaints
init|=
name|artist
operator|.
name|getPaintingArray
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|newPaints
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|newPaints
operator|.
name|addAll
argument_list|(
name|oldPaints
argument_list|)
expr_stmt|;
name|Painting
name|paintX
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|paintX
operator|.
name|setPaintingTitle
argument_list|(
literal|"pantingX"
argument_list|)
expr_stmt|;
name|Painting
name|paintY
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|paintY
operator|.
name|setPaintingTitle
argument_list|(
literal|"paintingY"
argument_list|)
expr_stmt|;
name|Painting
name|paintZ
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|paintZ
operator|.
name|setPaintingTitle
argument_list|(
literal|"paintingZ"
argument_list|)
expr_stmt|;
name|newPaints
operator|.
name|add
argument_list|(
name|paintX
argument_list|)
expr_stmt|;
name|newPaints
operator|.
name|add
argument_list|(
name|paintY
argument_list|)
expr_stmt|;
name|newPaints
operator|.
name|add
argument_list|(
name|paintZ
argument_list|)
expr_stmt|;
name|artist
operator|.
name|setToManyTarget
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|getName
argument_list|()
argument_list|,
name|newPaints
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|newPaints2
init|=
name|artist
operator|.
name|getPaintingArray
argument_list|()
decl_stmt|;
name|Painting
name|paint6
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Painting
operator|.
name|class
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|Painting
name|paint7
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Painting
operator|.
name|class
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|Painting
name|paint8
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Painting
operator|.
name|class
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|newPaints2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newPaints2
operator|.
name|contains
argument_list|(
name|paintX
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newPaints2
operator|.
name|contains
argument_list|(
name|paintY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newPaints2
operator|.
name|contains
argument_list|(
name|paintZ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newPaints2
operator|.
name|contains
argument_list|(
name|paint6
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newPaints2
operator|.
name|contains
argument_list|(
name|paint7
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newPaints2
operator|.
name|contains
argument_list|(
name|paint8
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveOneOldAndAddOneNewPaintings
parameter_list|()
block|{
name|Artist
name|artist
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|newPaints
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Painting
name|paint6
init|=
name|artist
operator|.
name|getPaintingArray
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Painting
name|paint7
init|=
name|artist
operator|.
name|getPaintingArray
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Painting
name|paint8
init|=
name|artist
operator|.
name|getPaintingArray
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Painting
name|paintX
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|paintX
operator|.
name|setPaintingTitle
argument_list|(
literal|"pantingX"
argument_list|)
expr_stmt|;
name|Painting
name|paintY
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|paintY
operator|.
name|setPaintingTitle
argument_list|(
literal|"paintingY"
argument_list|)
expr_stmt|;
name|newPaints
operator|.
name|add
argument_list|(
name|paint6
argument_list|)
expr_stmt|;
name|newPaints
operator|.
name|add
argument_list|(
name|paint7
argument_list|)
expr_stmt|;
name|newPaints
operator|.
name|add
argument_list|(
name|paintX
argument_list|)
expr_stmt|;
name|newPaints
operator|.
name|add
argument_list|(
name|paintY
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|DataObject
argument_list|>
name|returnList
init|=
name|artist
operator|.
name|setToManyTarget
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|getName
argument_list|()
argument_list|,
name|newPaints
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|returnList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|paint8
argument_list|,
name|returnList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|newPaints2
init|=
name|artist
operator|.
name|getPaintingArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|newPaints2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newPaints2
operator|.
name|contains
argument_list|(
name|paintX
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newPaints2
operator|.
name|contains
argument_list|(
name|paintY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newPaints2
operator|.
name|contains
argument_list|(
name|paint6
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newPaints2
operator|.
name|contains
argument_list|(
name|paint7
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Testing if collection type is list, everything should work fine without a RuntimeException 	 */
annotation|@
name|Test
specifier|public
name|void
name|testRelationCollectionTypeList
parameter_list|()
block|{
name|Artist
name|artist
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|artist
operator|.
name|readProperty
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|getName
argument_list|()
argument_list|)
operator|instanceof
name|List
argument_list|)
expr_stmt|;
try|try
block|{
name|artist
operator|.
name|setToManyTarget
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Painting
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|artist
operator|.
name|getPaintingArray
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

