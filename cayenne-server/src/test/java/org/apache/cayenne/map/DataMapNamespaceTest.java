begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_comment
comment|/**  * Test case for recursive lookup of DataMap resources via a parent  * namespace.  *   */
end_comment

begin_class
specifier|public
class|class
name|DataMapNamespaceTest
block|{
specifier|protected
name|DataMap
name|map
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|map
operator|=
operator|new
name|DataMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespace
parameter_list|()
block|{
name|assertNull
argument_list|(
name|map
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|MappingNamespace
name|namespace
init|=
operator|new
name|MockMappingNamespace
argument_list|()
decl_stmt|;
name|map
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|namespace
argument_list|,
name|map
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|setNamespace
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDbEntity
parameter_list|()
block|{
name|MockMappingNamespace
name|namespace
init|=
operator|new
name|MockMappingNamespace
argument_list|()
decl_stmt|;
name|map
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|DbEntity
name|e1
init|=
operator|new
name|DbEntity
argument_list|(
literal|"entity"
argument_list|)
decl_stmt|;
name|DbEntity
name|e2
init|=
operator|new
name|DbEntity
argument_list|(
literal|"entity"
argument_list|)
decl_stmt|;
name|namespace
operator|.
name|addDbEntity
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|e1
argument_list|,
name|map
operator|.
name|getDbEntity
argument_list|(
literal|"entity"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|addDbEntity
argument_list|(
name|e2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|e2
argument_list|,
name|map
operator|.
name|getDbEntity
argument_list|(
literal|"entity"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|removeDbEntity
argument_list|(
literal|"entity"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|e1
argument_list|,
name|map
operator|.
name|getDbEntity
argument_list|(
literal|"entity"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetObjEntity
parameter_list|()
throws|throws
name|Exception
block|{
name|MockMappingNamespace
name|namespace
init|=
operator|new
name|MockMappingNamespace
argument_list|()
decl_stmt|;
name|map
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|ObjEntity
name|e1
init|=
operator|new
name|ObjEntity
argument_list|(
literal|"entity"
argument_list|)
decl_stmt|;
name|ObjEntity
name|e2
init|=
operator|new
name|ObjEntity
argument_list|(
literal|"entity"
argument_list|)
decl_stmt|;
name|namespace
operator|.
name|addObjEntity
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|e1
argument_list|,
name|map
operator|.
name|getObjEntity
argument_list|(
literal|"entity"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|addObjEntity
argument_list|(
name|e2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|e2
argument_list|,
name|map
operator|.
name|getObjEntity
argument_list|(
literal|"entity"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|removeObjEntity
argument_list|(
literal|"entity"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|e1
argument_list|,
name|map
operator|.
name|getObjEntity
argument_list|(
literal|"entity"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProcedure
parameter_list|()
throws|throws
name|Exception
block|{
name|MockMappingNamespace
name|namespace
init|=
operator|new
name|MockMappingNamespace
argument_list|()
decl_stmt|;
name|map
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|Procedure
name|p1
init|=
operator|new
name|Procedure
argument_list|(
literal|"procedure"
argument_list|)
decl_stmt|;
name|Procedure
name|p2
init|=
operator|new
name|Procedure
argument_list|(
literal|"procedure"
argument_list|)
decl_stmt|;
name|namespace
operator|.
name|addProcedure
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|p1
argument_list|,
name|map
operator|.
name|getProcedure
argument_list|(
literal|"procedure"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|addProcedure
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|p2
argument_list|,
name|map
operator|.
name|getProcedure
argument_list|(
literal|"procedure"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|removeProcedure
argument_list|(
literal|"procedure"
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|p1
argument_list|,
name|map
operator|.
name|getProcedure
argument_list|(
literal|"procedure"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|MockMappingNamespace
name|namespace
init|=
operator|new
name|MockMappingNamespace
argument_list|()
decl_stmt|;
name|map
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|QueryDescriptor
name|q1
init|=
name|QueryDescriptor
operator|.
name|selectQueryDescriptor
argument_list|()
decl_stmt|;
name|q1
operator|.
name|setName
argument_list|(
literal|"query"
argument_list|)
expr_stmt|;
name|QueryDescriptor
name|q2
init|=
name|QueryDescriptor
operator|.
name|selectQueryDescriptor
argument_list|()
decl_stmt|;
name|q2
operator|.
name|setName
argument_list|(
literal|"query"
argument_list|)
expr_stmt|;
name|namespace
operator|.
name|addQueryDescriptor
argument_list|(
name|q1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|q1
argument_list|,
name|map
operator|.
name|getQueryDescriptor
argument_list|(
literal|"query"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|addQueryDescriptor
argument_list|(
name|q2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|q2
argument_list|,
name|map
operator|.
name|getQueryDescriptor
argument_list|(
literal|"query"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|removeQueryDescriptor
argument_list|(
literal|"query"
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|q1
argument_list|,
name|map
operator|.
name|getQueryDescriptor
argument_list|(
literal|"query"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

