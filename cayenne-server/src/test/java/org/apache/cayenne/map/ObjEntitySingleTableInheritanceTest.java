begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|ObjEntitySingleTableInheritanceTest
block|{
specifier|protected
name|DataMap
name|map
decl_stmt|;
specifier|protected
name|DbEntity
name|dbEntity
decl_stmt|;
specifier|protected
name|DbAttribute
name|dbAttribute1
decl_stmt|;
specifier|protected
name|DbAttribute
name|dbAttribute2
decl_stmt|;
specifier|protected
name|DbAttribute
name|dbAttribute3
decl_stmt|;
specifier|protected
name|DbRelationship
name|dbRelationship1
decl_stmt|;
specifier|protected
name|DbRelationship
name|dbRelationship2
decl_stmt|;
specifier|protected
name|DbRelationship
name|dbRelationship3
decl_stmt|;
specifier|protected
name|ObjEntity
name|entity1
decl_stmt|;
specifier|protected
name|ObjEntity
name|entity2
decl_stmt|;
specifier|protected
name|ObjEntity
name|entity3
decl_stmt|;
specifier|protected
name|ObjAttribute
name|attribute1
decl_stmt|;
specifier|protected
name|ObjAttribute
name|attribute2
decl_stmt|;
specifier|protected
name|ObjAttribute
name|attribute3
decl_stmt|;
specifier|protected
name|ObjRelationship
name|relationship1
decl_stmt|;
specifier|protected
name|ObjRelationship
name|relationship2
decl_stmt|;
specifier|protected
name|ObjRelationship
name|relationship3
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|map
operator|=
operator|new
name|DataMap
argument_list|()
expr_stmt|;
comment|// create common DbEntity
name|dbEntity
operator|=
operator|new
name|DbEntity
argument_list|(
literal|"DB"
argument_list|)
expr_stmt|;
name|dbAttribute1
operator|=
operator|new
name|DbAttribute
argument_list|(
literal|"ATTRIBUTE1"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|dbEntity
argument_list|)
expr_stmt|;
name|dbAttribute2
operator|=
operator|new
name|DbAttribute
argument_list|(
literal|"ATTRIBUTE2"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|dbEntity
argument_list|)
expr_stmt|;
name|dbAttribute3
operator|=
operator|new
name|DbAttribute
argument_list|(
literal|"ATTRIBUTE3"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|dbEntity
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|dbAttribute1
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|dbAttribute2
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|dbAttribute3
argument_list|)
expr_stmt|;
name|dbRelationship1
operator|=
operator|new
name|DbRelationship
argument_list|(
literal|"DBR1"
argument_list|)
expr_stmt|;
name|dbRelationship2
operator|=
operator|new
name|DbRelationship
argument_list|(
literal|"DBR2"
argument_list|)
expr_stmt|;
name|dbRelationship3
operator|=
operator|new
name|DbRelationship
argument_list|(
literal|"DBR3"
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addRelationship
argument_list|(
name|dbRelationship1
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addRelationship
argument_list|(
name|dbRelationship2
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addRelationship
argument_list|(
name|dbRelationship3
argument_list|)
expr_stmt|;
name|map
operator|.
name|addDbEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|entity1
operator|=
operator|new
name|ObjEntity
argument_list|(
literal|"e1"
argument_list|)
expr_stmt|;
name|entity2
operator|=
operator|new
name|ObjEntity
argument_list|(
literal|"e2"
argument_list|)
expr_stmt|;
name|entity3
operator|=
operator|new
name|ObjEntity
argument_list|(
literal|"e3"
argument_list|)
expr_stmt|;
name|attribute1
operator|=
operator|new
name|ObjAttribute
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|attribute2
operator|=
operator|new
name|ObjAttribute
argument_list|(
literal|"a2"
argument_list|)
expr_stmt|;
name|attribute3
operator|=
operator|new
name|ObjAttribute
argument_list|(
literal|"a3"
argument_list|)
expr_stmt|;
name|entity1
operator|.
name|addAttribute
argument_list|(
name|attribute1
argument_list|)
expr_stmt|;
name|entity2
operator|.
name|addAttribute
argument_list|(
name|attribute2
argument_list|)
expr_stmt|;
name|entity3
operator|.
name|addAttribute
argument_list|(
name|attribute3
argument_list|)
expr_stmt|;
name|relationship1
operator|=
operator|new
name|ObjRelationship
argument_list|(
literal|"r1"
argument_list|)
expr_stmt|;
name|relationship2
operator|=
operator|new
name|ObjRelationship
argument_list|(
literal|"r2"
argument_list|)
expr_stmt|;
name|relationship3
operator|=
operator|new
name|ObjRelationship
argument_list|(
literal|"r3"
argument_list|)
expr_stmt|;
name|entity1
operator|.
name|addRelationship
argument_list|(
name|relationship1
argument_list|)
expr_stmt|;
name|entity2
operator|.
name|addRelationship
argument_list|(
name|relationship2
argument_list|)
expr_stmt|;
name|entity3
operator|.
name|addRelationship
argument_list|(
name|relationship3
argument_list|)
expr_stmt|;
name|map
operator|.
name|addObjEntity
argument_list|(
name|entity1
argument_list|)
expr_stmt|;
name|map
operator|.
name|addObjEntity
argument_list|(
name|entity2
argument_list|)
expr_stmt|;
name|map
operator|.
name|addObjEntity
argument_list|(
name|entity3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInheritedAttributes
parameter_list|()
throws|throws
name|Exception
block|{
name|assertSame
argument_list|(
name|attribute1
argument_list|,
name|entity1
operator|.
name|getAttribute
argument_list|(
literal|"a1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entity1
operator|.
name|getAttribute
argument_list|(
literal|"a2"
argument_list|)
argument_list|)
expr_stmt|;
name|entity1
operator|.
name|setSuperEntityName
argument_list|(
literal|"e2"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entity1
operator|.
name|getAttribute
argument_list|(
literal|"a2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a2"
argument_list|,
name|entity1
operator|.
name|getAttribute
argument_list|(
literal|"a2"
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|entity1
argument_list|,
name|entity1
operator|.
name|getAttribute
argument_list|(
literal|"a2"
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entity1
operator|.
name|getAttribute
argument_list|(
literal|"a3"
argument_list|)
argument_list|)
expr_stmt|;
name|entity2
operator|.
name|setSuperEntityName
argument_list|(
literal|"e3"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entity1
operator|.
name|getAttribute
argument_list|(
literal|"a3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInheritedRelationships
parameter_list|()
throws|throws
name|Exception
block|{
name|assertSame
argument_list|(
name|relationship1
argument_list|,
name|entity1
operator|.
name|getRelationship
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entity1
operator|.
name|getRelationship
argument_list|(
literal|"r2"
argument_list|)
argument_list|)
expr_stmt|;
name|entity1
operator|.
name|setSuperEntityName
argument_list|(
literal|"e2"
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|relationship2
argument_list|,
name|entity1
operator|.
name|getRelationship
argument_list|(
literal|"r2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entity1
operator|.
name|getRelationship
argument_list|(
literal|"r3"
argument_list|)
argument_list|)
expr_stmt|;
name|entity2
operator|.
name|setSuperEntityName
argument_list|(
literal|"e3"
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|relationship3
argument_list|,
name|entity1
operator|.
name|getRelationship
argument_list|(
literal|"r3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAttributeForDbAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|entity1
operator|.
name|setSuperEntityName
argument_list|(
literal|"e2"
argument_list|)
expr_stmt|;
name|entity2
operator|.
name|setDbEntityName
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attribute1
operator|.
name|setDbAttributePath
argument_list|(
name|dbAttribute1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attribute2
operator|.
name|setDbAttributePath
argument_list|(
name|dbAttribute2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entity2
operator|.
name|getAttributeForDbAttribute
argument_list|(
name|dbAttribute1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|attribute2
argument_list|,
name|entity2
operator|.
name|getAttributeForDbAttribute
argument_list|(
name|dbAttribute2
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|attribute1
argument_list|,
name|entity1
operator|.
name|getAttributeForDbAttribute
argument_list|(
name|dbAttribute1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entity1
operator|.
name|getAttributeForDbAttribute
argument_list|(
name|dbAttribute2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRelationshipForDbRelationship
parameter_list|()
throws|throws
name|Exception
block|{
name|entity1
operator|.
name|setSuperEntityName
argument_list|(
literal|"e2"
argument_list|)
expr_stmt|;
name|entity2
operator|.
name|setDbEntityName
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|relationship1
operator|.
name|addDbRelationship
argument_list|(
name|dbRelationship1
argument_list|)
expr_stmt|;
name|relationship2
operator|.
name|addDbRelationship
argument_list|(
name|dbRelationship2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entity2
operator|.
name|getRelationshipForDbRelationship
argument_list|(
name|dbRelationship1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|relationship2
argument_list|,
name|entity2
operator|.
name|getRelationshipForDbRelationship
argument_list|(
name|dbRelationship2
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|relationship1
argument_list|,
name|entity1
operator|.
name|getRelationshipForDbRelationship
argument_list|(
name|dbRelationship1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|relationship2
argument_list|,
name|entity1
operator|.
name|getRelationshipForDbRelationship
argument_list|(
name|dbRelationship2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

