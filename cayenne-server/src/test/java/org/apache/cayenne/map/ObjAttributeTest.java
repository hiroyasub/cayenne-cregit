begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|ObjAttributeTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testDbAttribute
parameter_list|()
block|{
name|ObjAttribute
name|attribute
init|=
operator|new
name|ObjAttribute
argument_list|(
literal|"a1"
argument_list|)
decl_stmt|;
name|DbAttribute
name|dbAttr
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"tst_name"
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|attribute
operator|.
name|setDbAttributePath
argument_list|(
name|dbAttr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dbAttr
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getDbAttributeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDbAttributePath
parameter_list|()
block|{
name|ObjAttribute
name|attribute
init|=
operator|new
name|ObjAttribute
argument_list|(
literal|"a1"
argument_list|)
decl_stmt|;
name|attribute
operator|.
name|setDbAttributePath
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|attribute
operator|.
name|getDbAttributePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|attribute
operator|.
name|getDbAttributeName
argument_list|()
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|setDbAttributePath
argument_list|(
literal|"a.b"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a.b"
argument_list|,
name|attribute
operator|.
name|getDbAttributePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|attribute
operator|.
name|getDbAttributeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testType
parameter_list|()
block|{
name|ObjAttribute
name|attribute
init|=
operator|new
name|ObjAttribute
argument_list|(
literal|"a1"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
literal|"org.aa.zz"
decl_stmt|;
name|attribute
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|type
argument_list|,
name|attribute
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerializability
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjAttribute
name|a1
init|=
operator|new
name|ObjAttribute
argument_list|(
literal|"a1"
argument_list|)
decl_stmt|;
name|ObjAttribute
name|a2
init|=
name|Util
operator|.
name|cloneViaSerialization
argument_list|(
name|a1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|a1
operator|.
name|getName
argument_list|()
argument_list|,
name|a2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetClientAttribute
parameter_list|()
block|{
name|ObjAttribute
name|a1
init|=
operator|new
name|ObjAttribute
argument_list|(
literal|"a1"
argument_list|)
decl_stmt|;
name|a1
operator|.
name|setType
argument_list|(
literal|"x.y.z"
argument_list|)
expr_stmt|;
name|ObjAttribute
name|a2
init|=
name|a1
operator|.
name|getClientAttribute
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|a2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a1
operator|.
name|getName
argument_list|()
argument_list|,
name|a2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a1
operator|.
name|getType
argument_list|()
argument_list|,
name|a2
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetJavaClass
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjAttribute
name|a1
init|=
operator|new
name|ObjAttribute
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|a1
operator|.
name|setType
argument_list|(
literal|"byte"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|byte
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|a1
operator|.
name|getJavaClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a1
operator|.
name|setType
argument_list|(
literal|"byte[]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|byte
index|[]
operator|.
expr|class
operator|.
name|getName
argument_list|()
argument_list|,
name|a1
operator|.
name|getJavaClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a1
operator|.
name|setType
argument_list|(
literal|"java.lang.Byte"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|a1
operator|.
name|getJavaClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a1
operator|.
name|setType
argument_list|(
literal|"java.lang.Byte[]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
index|[]
operator|.
expr|class
operator|.
name|getName
argument_list|()
argument_list|,
name|a1
operator|.
name|getJavaClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

