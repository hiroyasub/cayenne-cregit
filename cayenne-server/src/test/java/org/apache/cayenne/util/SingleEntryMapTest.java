begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|SingleEntryMapTest
block|{
specifier|private
name|SingleEntryMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createMap
parameter_list|()
block|{
name|map
operator|=
operator|new
name|SingleEntryMap
argument_list|<>
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|constructor
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|values
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|map
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|constructorWithNullKey
parameter_list|()
block|{
operator|new
name|SingleEntryMap
argument_list|<>
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|constructorWithValue
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mapWithValue
init|=
operator|new
name|SingleEntryMap
argument_list|<>
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mapWithValue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
name|int
operator|)
name|mapWithValue
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|mapWithValue
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mapWithValue
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|mapWithValue
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|321
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|321
argument_list|,
operator|(
name|int
operator|)
name|mapWithValue
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|constructorWithNullValue
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|mapWithValue
init|=
operator|new
name|SingleEntryMap
argument_list|<>
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mapWithValue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mapWithValue
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|mapWithValue
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|321
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|321
argument_list|,
operator|(
name|int
operator|)
name|mapWithValue
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|constructorWithNullKeyAndValue
parameter_list|()
block|{
operator|new
name|SingleEntryMap
argument_list|<>
argument_list|(
literal|null
argument_list|,
literal|123
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|entrySet
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|setValue
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsKey
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|size
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isEmpty
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsValue
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|containsValue
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|get
parameter_list|()
block|{
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|put
parameter_list|()
block|{
name|assertNull
argument_list|(
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|321
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|321
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|putWrongKey
parameter_list|()
block|{
name|map
operator|.
name|put
argument_list|(
literal|"test2"
argument_list|,
literal|321
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|assertNull
argument_list|(
name|map
operator|.
name|remove
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|remove
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|remove
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|remove
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putAll
parameter_list|()
block|{
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map2
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|map2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|putAllWrongKey
parameter_list|()
block|{
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map2
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"test2"
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|map2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|keySet
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|values
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|map
operator|.
name|values
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|values
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getKey
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|map
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|map
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getValue
parameter_list|()
block|{
name|assertNull
argument_list|(
name|map
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|321
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|321
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setValue
parameter_list|()
block|{
name|assertNull
argument_list|(
name|map
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|setValue
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|setValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|setValue
argument_list|(
literal|321
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|321
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|map
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|map
argument_list|,
name|singletonMap
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
argument_list|,
name|singletonMap
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|map
argument_list|,
name|singletonMap
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|map
argument_list|,
name|singletonMap
argument_list|(
literal|"test2"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|map
argument_list|,
name|singletonMap
argument_list|(
literal|"test"
argument_list|,
literal|124
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|321
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|other
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|other
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|321
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
argument_list|,
name|other
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|map
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCode
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|emptyMap
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|,
name|map
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
operator|.
name|hashCode
argument_list|()
argument_list|,
name|map
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|singletonMap
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|map
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|singletonMap
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|map
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|singletonMap
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|map
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|singletonMap
argument_list|(
literal|"test2"
argument_list|,
literal|123
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|map
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|singletonMap
argument_list|(
literal|"test"
argument_list|,
literal|124
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|map
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
operator|.
name|hashCode
argument_list|()
argument_list|,
name|map
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|321
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|other
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|other
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|321
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|other
operator|.
name|hashCode
argument_list|()
argument_list|,
name|map
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
operator|.
name|hashCode
argument_list|()
argument_list|,
name|map
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|emptyMap
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|map
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|singletonMap
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|map
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|singletonMap
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|map
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|singletonMap
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|map
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|singletonMap
argument_list|(
literal|"test2"
argument_list|,
literal|123
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|map
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|singletonMap
argument_list|(
literal|"test"
argument_list|,
literal|124
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|map
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|321
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|other
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|other
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|321
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|other
operator|.
name|toString
argument_list|()
argument_list|,
name|map
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|forEach
parameter_list|()
block|{
name|map
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|fail
argument_list|(
literal|"Unexpected value in map: "
operator|+
name|k
operator|+
literal|"="
operator|+
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|map
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
name|int
operator|)
name|v
argument_list|)
expr_stmt|;
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getOrDefault
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|321
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|getOrDefault
argument_list|(
literal|"test"
argument_list|,
literal|321
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|321
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|getOrDefault
argument_list|(
literal|"test2"
argument_list|,
literal|321
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|getOrDefault
argument_list|(
literal|"test"
argument_list|,
literal|321
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|321
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|getOrDefault
argument_list|(
literal|"test2"
argument_list|,
literal|321
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putIfAbsent
parameter_list|()
block|{
name|assertNull
argument_list|(
name|map
operator|.
name|putIfAbsent
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|putIfAbsent
argument_list|(
literal|"test"
argument_list|,
literal|321
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|putIfAbsent
argument_list|(
literal|"test"
argument_list|,
literal|456
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|putIfAbsentWrongKey
parameter_list|()
block|{
name|map
operator|.
name|putIfAbsent
argument_list|(
literal|"test2"
argument_list|,
literal|321
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|computeIfAbsent
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|computeIfAbsent
argument_list|(
literal|"test"
argument_list|,
name|k
lambda|->
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|computeIfAbsent
argument_list|(
literal|"test"
argument_list|,
name|k
lambda|->
literal|321
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|computeIfAbsent
argument_list|(
literal|"test"
argument_list|,
name|k
lambda|->
literal|456
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|computeIfAbsentWrongKey
parameter_list|()
block|{
name|map
operator|.
name|computeIfAbsent
argument_list|(
literal|"test2"
argument_list|,
name|k
lambda|->
literal|123
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|computeIfPresent
parameter_list|()
block|{
name|assertNull
argument_list|(
name|map
operator|.
name|computeIfPresent
argument_list|(
literal|"test"
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|v
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|124
argument_list|)
argument_list|,
name|map
operator|.
name|computeIfPresent
argument_list|(
literal|"test"
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|v
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|computeIfPresent
argument_list|(
literal|"test2"
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|v
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|computeIfPresent
argument_list|(
literal|"test3"
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
literal|321
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compute
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|compute
argument_list|(
literal|"test"
argument_list|,
operator|(
name|k
operator|,
name|v
operator|)
operator|->
name|v
operator|==
literal|null
condition|?
literal|123
else|:
name|v
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|124
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|compute
argument_list|(
literal|"test"
argument_list|,
operator|(
name|k
operator|,
name|v
operator|)
operator|->
name|v
operator|==
literal|null
condition|?
literal|123
else|:
name|v
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|125
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|compute
argument_list|(
literal|"test"
argument_list|,
operator|(
name|k
operator|,
name|v
operator|)
operator|->
name|v
operator|==
literal|null
condition|?
literal|123
else|:
name|v
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|computeWrongKey
parameter_list|()
block|{
name|map
operator|.
name|compute
argument_list|(
literal|"test2"
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
literal|123
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|merge
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|merge
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|,
name|Integer
operator|::
name|sum
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|merge
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|,
name|Integer
operator|::
name|sum
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|merge
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|,
name|Integer
operator|::
name|sum
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|mergeWrongKey
parameter_list|()
block|{
name|map
operator|.
name|merge
argument_list|(
literal|"test2"
argument_list|,
literal|123
argument_list|,
parameter_list|(
name|oldV
parameter_list|,
name|newV
parameter_list|)
lambda|->
name|oldV
operator|+
name|newV
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replace
parameter_list|()
block|{
name|assertNull
argument_list|(
name|map
operator|.
name|replace
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|replace
argument_list|(
literal|"test"
argument_list|,
literal|321
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|replace
argument_list|(
literal|"test2"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|replace
argument_list|(
literal|"test"
argument_list|,
literal|321
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|321
argument_list|,
operator|(
name|int
operator|)
name|map
operator|.
name|replace
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|map
operator|.
name|replace
argument_list|(
literal|"test2"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replaceWithValue
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|map
operator|.
name|replace
argument_list|(
literal|"test"
argument_list|,
literal|321
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|replace
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|replace
argument_list|(
literal|"test2"
argument_list|,
literal|null
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|replace
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|,
literal|321
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|replace
argument_list|(
literal|"test"
argument_list|,
literal|321
argument_list|,
literal|456
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|replace
argument_list|(
literal|"test"
argument_list|,
literal|321
argument_list|,
literal|456
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|replace
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|replace
argument_list|(
literal|"test2"
argument_list|,
literal|null
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|replace
argument_list|(
literal|"test2"
argument_list|,
literal|456
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeWithValue
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|map
operator|.
name|remove
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|remove
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|remove
argument_list|(
literal|"test2"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|remove
argument_list|(
literal|"test2"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|remove
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|remove
argument_list|(
literal|"test"
argument_list|,
literal|321
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|remove
argument_list|(
literal|"test2"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|remove
argument_list|(
literal|"test2"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|remove
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|map
operator|.
name|remove
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

