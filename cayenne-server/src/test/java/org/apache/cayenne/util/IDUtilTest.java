begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|ByteArrayTypeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|IDUtilTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testPseudoUniqueByteSequence1
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|IDUtil
operator|.
name|pseudoUniqueByteSequence
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must throw an exception on short sequences"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPseudoUniqueByteSequence2
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|byte16
init|=
name|IDUtil
operator|.
name|pseudoUniqueByteSequence
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|byte16
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|byte16
operator|.
name|length
argument_list|)
expr_stmt|;
try|try
block|{
name|ByteArrayTypeTest
operator|.
name|assertByteArraysEqual
argument_list|(
name|byte16
argument_list|,
name|IDUtil
operator|.
name|pseudoUniqueByteSequence
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Same byte array.."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPseudoUniqueByteSequence3
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|byte17
init|=
name|IDUtil
operator|.
name|pseudoUniqueByteSequence
argument_list|(
literal|17
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|byte17
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|byte17
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|byte123
init|=
name|IDUtil
operator|.
name|pseudoUniqueByteSequence
argument_list|(
literal|123
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|byte123
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|byte123
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

