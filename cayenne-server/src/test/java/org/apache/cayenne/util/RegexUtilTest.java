begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|RegexUtilTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testSubstBackslashes
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|RegexUtil
operator|.
name|BACKSLASH
operator|.
name|matcher
argument_list|(
literal|"\\"
argument_list|)
operator|.
name|find
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|RegexUtil
operator|.
name|BACKSLASH
operator|.
name|matcher
argument_list|(
literal|"abc\\"
argument_list|)
operator|.
name|find
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|RegexUtil
operator|.
name|substBackslashes
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|RegexUtil
operator|.
name|substBackslashes
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ab/c"
argument_list|,
name|RegexUtil
operator|.
name|substBackslashes
argument_list|(
literal|"ab/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ab/c"
argument_list|,
name|RegexUtil
operator|.
name|substBackslashes
argument_list|(
literal|"ab\\c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ab//c"
argument_list|,
name|RegexUtil
operator|.
name|substBackslashes
argument_list|(
literal|"ab\\\\c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ab//c"
argument_list|,
name|RegexUtil
operator|.
name|substBackslashes
argument_list|(
literal|"ab\\/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/ab/c"
argument_list|,
name|RegexUtil
operator|.
name|substBackslashes
argument_list|(
literal|"\\ab\\c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetPackagePath
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|RegexUtil
operator|.
name|DOT
operator|.
name|matcher
argument_list|(
literal|"."
argument_list|)
operator|.
name|find
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|RegexUtil
operator|.
name|DOT
operator|.
name|matcher
argument_list|(
literal|"abc.aa.aa"
argument_list|)
operator|.
name|find
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|RegexUtil
operator|.
name|getPackagePath
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|RegexUtil
operator|.
name|getPackagePath
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|RegexUtil
operator|.
name|getPackagePath
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|RegexUtil
operator|.
name|getPackagePath
argument_list|(
literal|"a.b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a/c"
argument_list|,
name|RegexUtil
operator|.
name|getPackagePath
argument_list|(
literal|"a.c.b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

