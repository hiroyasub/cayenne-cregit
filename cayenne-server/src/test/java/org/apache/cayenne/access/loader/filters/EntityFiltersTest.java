begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|FilterFactory
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|EntityFiltersTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testJoinWithEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|EntityFilters
name|filter1
init|=
operator|new
name|EntityFilters
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|EntityFilters
name|filter2
init|=
operator|new
name|EntityFilters
argument_list|(
literal|null
argument_list|,
name|include
argument_list|(
literal|"table"
argument_list|)
argument_list|,
name|include
argument_list|(
literal|"column"
argument_list|)
argument_list|,
name|include
argument_list|(
literal|"procedure"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|filter2
argument_list|,
name|filter1
operator|.
name|join
argument_list|(
name|filter2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|filter2
argument_list|,
name|filter2
operator|.
name|join
argument_list|(
name|filter1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJoinExcludeInclude
parameter_list|()
throws|throws
name|Exception
block|{
name|EntityFilters
name|filter1
init|=
operator|new
name|EntityFilters
argument_list|(
literal|null
argument_list|,
name|exclude
argument_list|(
literal|"table"
argument_list|)
argument_list|,
name|exclude
argument_list|(
literal|"column"
argument_list|)
argument_list|,
name|exclude
argument_list|(
literal|"procedure"
argument_list|)
argument_list|)
decl_stmt|;
name|EntityFilters
name|filter2
init|=
operator|new
name|EntityFilters
argument_list|(
literal|null
argument_list|,
name|include
argument_list|(
literal|"table"
argument_list|)
argument_list|,
name|include
argument_list|(
literal|"column"
argument_list|)
argument_list|,
name|include
argument_list|(
literal|"procedure"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|EntityFilters
argument_list|(
literal|null
argument_list|,
name|list
argument_list|(
name|exclude
argument_list|(
literal|"table"
argument_list|)
argument_list|,
name|include
argument_list|(
literal|"table"
argument_list|)
argument_list|)
argument_list|,
name|list
argument_list|(
name|exclude
argument_list|(
literal|"column"
argument_list|)
argument_list|,
name|include
argument_list|(
literal|"column"
argument_list|)
argument_list|)
argument_list|,
name|list
argument_list|(
name|exclude
argument_list|(
literal|"procedure"
argument_list|)
argument_list|,
name|include
argument_list|(
literal|"procedure"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|filter1
operator|.
name|join
argument_list|(
name|filter2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|EntityFilters
argument_list|(
literal|null
argument_list|,
name|list
argument_list|(
name|include
argument_list|(
literal|"table"
argument_list|)
argument_list|,
name|exclude
argument_list|(
literal|"table"
argument_list|)
argument_list|)
argument_list|,
name|list
argument_list|(
name|include
argument_list|(
literal|"column"
argument_list|)
argument_list|,
name|exclude
argument_list|(
literal|"column"
argument_list|)
argument_list|)
argument_list|,
name|list
argument_list|(
name|include
argument_list|(
literal|"procedure"
argument_list|)
argument_list|,
name|exclude
argument_list|(
literal|"procedure"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|filter2
operator|.
name|join
argument_list|(
name|filter1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|EntityFilters
name|filters
init|=
operator|new
name|EntityFilters
argument_list|(
operator|new
name|DbPath
argument_list|()
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|filters
operator|.
name|tableFilter
argument_list|()
operator|.
name|equals
argument_list|(
name|NULL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filters
operator|.
name|columnFilter
argument_list|()
operator|.
name|equals
argument_list|(
name|NULL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filters
operator|.
name|procedureFilter
argument_list|()
operator|.
name|equals
argument_list|(
name|NULL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

