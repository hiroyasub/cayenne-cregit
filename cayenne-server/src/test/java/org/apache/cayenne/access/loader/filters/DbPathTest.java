begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|FiltersFactory
operator|.
name|path
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|DbPathTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testIsCover
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|isCover
argument_list|(
name|path
argument_list|(
literal|"Hello"
argument_list|,
literal|"World"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|isCover
argument_list|(
name|path
argument_list|(
literal|"Hello"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|isCover
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|"Yo"
argument_list|)
operator|.
name|isCover
argument_list|(
name|path
argument_list|(
literal|"Yo!"
argument_list|,
literal|"Yo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|"Yo"
argument_list|)
operator|.
name|isCover
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|"Yo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|"Yo!"
argument_list|)
operator|.
name|isCover
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|"Yo!!"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|path
argument_list|(
literal|"aa"
argument_list|,
literal|"Yo!"
argument_list|)
operator|.
name|isCover
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|"Yo!!"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|path
argument_list|(
literal|"aaa"
argument_list|,
literal|"Yo!"
argument_list|)
operator|.
name|isCover
argument_list|(
name|path
argument_list|(
literal|"aa"
argument_list|,
literal|"Yo!!"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|path
argument_list|(
literal|"aa"
argument_list|,
literal|null
argument_list|)
operator|.
name|isCover
argument_list|(
name|path
argument_list|(
literal|"aa"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|path
argument_list|(
literal|"aa"
argument_list|,
literal|null
argument_list|)
operator|.
name|isCover
argument_list|(
name|path
argument_list|(
literal|"aa"
argument_list|,
literal|"bb"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|path
argument_list|(
literal|"aa"
argument_list|,
literal|"Yo!"
argument_list|)
operator|.
name|isCover
argument_list|(
name|path
argument_list|(
literal|"aa"
argument_list|,
literal|"Yo!"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|path
argument_list|(
literal|"aa"
argument_list|,
literal|"Yo!"
argument_list|)
operator|.
name|isCover
argument_list|(
name|path
argument_list|(
literal|"aa"
argument_list|,
literal|"Yo!!"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"APP"
argument_list|)
operator|.
name|isCover
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|"schema_01"
argument_list|)
operator|.
name|isCover
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"schema_01"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|"schema_01"
argument_list|)
operator|.
name|isCover
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|"schema_01"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|"schema_01"
argument_list|)
operator|.
name|isCover
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"schema_02"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|"schema_02"
argument_list|)
operator|.
name|isCover
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"schema_01"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToString
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"%"
argument_list|,
name|path
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/schema"
argument_list|,
name|path
argument_list|(
literal|""
argument_list|,
literal|"schema"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"%/schema"
argument_list|,
name|path
argument_list|(
literal|null
argument_list|,
literal|"schema"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"catalog/schema"
argument_list|,
name|path
argument_list|(
literal|"catalog"
argument_list|,
literal|"schema"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"catalog//table"
argument_list|,
name|path
argument_list|(
literal|"catalog"
argument_list|,
literal|""
argument_list|,
literal|"table"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"catalog/%/table"
argument_list|,
name|path
argument_list|(
literal|"catalog"
argument_list|,
literal|null
argument_list|,
literal|"table"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"//table"
argument_list|,
name|path
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"table"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"%/%/table"
argument_list|,
name|path
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"table"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"%"
argument_list|,
name|path
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c/%/"
argument_list|,
name|path
argument_list|(
literal|"c"
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|DbPath
name|path1
init|=
name|path
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DbPath
name|path2
init|=
name|path
argument_list|(
literal|""
argument_list|,
literal|"APP"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|path1
argument_list|,
name|path1
operator|.
name|merge
argument_list|(
name|path2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path1
argument_list|,
name|path2
operator|.
name|merge
argument_list|(
name|path1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|DbPath
argument_list|>
name|pathes
init|=
operator|new
name|TreeSet
argument_list|<
name|DbPath
argument_list|>
argument_list|()
decl_stmt|;
name|pathes
operator|.
name|add
argument_list|(
name|path
argument_list|(
literal|"q"
argument_list|,
literal|"w"
argument_list|)
argument_list|)
expr_stmt|;
name|pathes
operator|.
name|add
argument_list|(
name|path
argument_list|(
literal|"q"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|pathes
operator|.
name|add
argument_list|(
name|path
argument_list|(
literal|"q"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|pathes
operator|.
name|add
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|pathes
operator|.
name|add
argument_list|(
name|path
argument_list|(
literal|"q"
argument_list|,
literal|"w"
argument_list|)
argument_list|)
expr_stmt|;
name|pathes
operator|.
name|add
argument_list|(
name|path
argument_list|(
literal|"q"
argument_list|,
literal|"w"
argument_list|)
argument_list|)
expr_stmt|;
name|pathes
operator|.
name|add
argument_list|(
name|path
argument_list|(
literal|"q"
argument_list|,
literal|"w"
argument_list|)
argument_list|)
expr_stmt|;
name|pathes
operator|.
name|add
argument_list|(
name|path
argument_list|(
literal|"q"
argument_list|,
literal|"w"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|pathes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

