begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|SQLTemplateProcessorChainTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testProcessTemplateNoChunks
parameter_list|()
throws|throws
name|Exception
block|{
comment|// whatever is inside the chain, it should render as empty if there
comment|// is no chunks...
name|SQLStatement
name|compiled
init|=
operator|new
name|SQLTemplateProcessor
argument_list|()
operator|.
name|processTemplate
argument_list|(
literal|"#chain(' AND ') #end"
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|compiled
operator|.
name|getSql
argument_list|()
argument_list|)
expr_stmt|;
name|compiled
operator|=
operator|new
name|SQLTemplateProcessor
argument_list|()
operator|.
name|processTemplate
argument_list|(
literal|"#chain(' AND ') garbage #end"
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|compiled
operator|.
name|getSql
argument_list|()
argument_list|)
expr_stmt|;
name|compiled
operator|=
operator|new
name|SQLTemplateProcessor
argument_list|()
operator|.
name|processTemplate
argument_list|(
literal|"#chain(' AND ' 'PREFIX') #end"
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|compiled
operator|.
name|getSql
argument_list|()
argument_list|)
expr_stmt|;
name|compiled
operator|=
operator|new
name|SQLTemplateProcessor
argument_list|()
operator|.
name|processTemplate
argument_list|(
literal|"#chain(' AND ' 'PREFIX') garbage #end"
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|compiled
operator|.
name|getSql
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcessTemplateFullChain
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|template
init|=
literal|"#chain(' OR ')"
operator|+
literal|"#chunk($a)$a#end"
operator|+
literal|"#chunk($b)$b#end"
operator|+
literal|"#chunk($c)$c#end"
operator|+
literal|"#end"
decl_stmt|;
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"[A]"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"[B]"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
literal|"[C]"
argument_list|)
expr_stmt|;
name|SQLStatement
name|compiled
init|=
operator|new
name|SQLTemplateProcessor
argument_list|()
operator|.
name|processTemplate
argument_list|(
name|template
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[A] OR [B] OR [C]"
argument_list|,
name|compiled
operator|.
name|getSql
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcessTemplateFullChainAndPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|template
init|=
literal|"#chain(' OR ' 'WHERE ')"
operator|+
literal|"#chunk($a)$a#end"
operator|+
literal|"#chunk($b)$b#end"
operator|+
literal|"#chunk($c)$c#end"
operator|+
literal|"#end"
decl_stmt|;
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"[A]"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"[B]"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
literal|"[C]"
argument_list|)
expr_stmt|;
name|SQLStatement
name|compiled
init|=
operator|new
name|SQLTemplateProcessor
argument_list|()
operator|.
name|processTemplate
argument_list|(
name|template
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"WHERE [A] OR [B] OR [C]"
argument_list|,
name|compiled
operator|.
name|getSql
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcessTemplatePartialChainMiddle
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|template
init|=
literal|"#chain(' OR ' 'WHERE ')"
operator|+
literal|"#chunk($a)$a#end"
operator|+
literal|"#chunk($b)$b#end"
operator|+
literal|"#chunk($c)$c#end"
operator|+
literal|"#end"
decl_stmt|;
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"[A]"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
literal|"[C]"
argument_list|)
expr_stmt|;
name|SQLStatement
name|compiled
init|=
operator|new
name|SQLTemplateProcessor
argument_list|()
operator|.
name|processTemplate
argument_list|(
name|template
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"WHERE [A] OR [C]"
argument_list|,
name|compiled
operator|.
name|getSql
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcessTemplatePartialChainStart
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|template
init|=
literal|"#chain(' OR ' 'WHERE ')"
operator|+
literal|"#chunk($a)$a#end"
operator|+
literal|"#chunk($b)$b#end"
operator|+
literal|"#chunk($c)$c#end"
operator|+
literal|"#end"
decl_stmt|;
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"[B]"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
literal|"[C]"
argument_list|)
expr_stmt|;
name|SQLStatement
name|compiled
init|=
operator|new
name|SQLTemplateProcessor
argument_list|()
operator|.
name|processTemplate
argument_list|(
name|template
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"WHERE [B] OR [C]"
argument_list|,
name|compiled
operator|.
name|getSql
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcessTemplatePartialChainEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|template
init|=
literal|"#chain(' OR ' 'WHERE ')"
operator|+
literal|"#chunk($a)$a#end"
operator|+
literal|"#chunk($b)$b#end"
operator|+
literal|"#chunk($c)$c#end"
operator|+
literal|"#end"
decl_stmt|;
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"[A]"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"[B]"
argument_list|)
expr_stmt|;
name|SQLStatement
name|compiled
init|=
operator|new
name|SQLTemplateProcessor
argument_list|()
operator|.
name|processTemplate
argument_list|(
name|template
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"WHERE [A] OR [B]"
argument_list|,
name|compiled
operator|.
name|getSql
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcessTemplateChainWithGarbage
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|template
init|=
literal|"#chain(' OR ' 'WHERE ')"
operator|+
literal|"#chunk($a)$a#end"
operator|+
literal|" some other stuff"
operator|+
literal|"#chunk($c)$c#end"
operator|+
literal|"#end"
decl_stmt|;
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"[A]"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
literal|"[C]"
argument_list|)
expr_stmt|;
name|SQLStatement
name|compiled
init|=
operator|new
name|SQLTemplateProcessor
argument_list|()
operator|.
name|processTemplate
argument_list|(
name|template
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"WHERE [A] some other stuff OR [C]"
argument_list|,
name|compiled
operator|.
name|getSql
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcessTemplateChainUnconditionalChunks
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|template
init|=
literal|"#chain(' OR ' 'WHERE ')"
operator|+
literal|"#chunk()C1#end"
operator|+
literal|"#chunk()C2#end"
operator|+
literal|"#chunk()C3#end"
operator|+
literal|"#end"
decl_stmt|;
name|SQLStatement
name|compiled
init|=
operator|new
name|SQLTemplateProcessor
argument_list|()
operator|.
name|processTemplate
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"WHERE C1 OR C2 OR C3"
argument_list|,
name|compiled
operator|.
name|getSql
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcessTemplateEmptyChain
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|template
init|=
literal|"#chain(' OR ' 'WHERE ')"
operator|+
literal|"#chunk($a)$a#end"
operator|+
literal|"#chunk($b)$b#end"
operator|+
literal|"#chunk($c)$c#end"
operator|+
literal|"#end"
decl_stmt|;
name|SQLStatement
name|compiled
init|=
operator|new
name|SQLTemplateProcessor
argument_list|()
operator|.
name|processTemplate
argument_list|(
name|template
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|compiled
operator|.
name|getSql
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcessTemplateWithFalseOrZero1
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|template
init|=
literal|"#chain(' OR ' 'WHERE ')"
operator|+
literal|"#chunk($a)[A]#end"
operator|+
literal|"#chunk($b)[B]#end"
operator|+
literal|"#chunk($c)$c#end"
operator|+
literal|"#end"
decl_stmt|;
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SQLStatement
name|compiled
init|=
operator|new
name|SQLTemplateProcessor
argument_list|()
operator|.
name|processTemplate
argument_list|(
name|template
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"WHERE [A] OR [B]"
argument_list|,
name|compiled
operator|.
name|getSql
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcessTemplateWithFalseOrZero2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|template
init|=
literal|"#chain(' OR ' 'WHERE ')"
operator|+
literal|"#chunk($a)$a#end"
operator|+
literal|"#chunk($b)$b#end"
operator|+
literal|"#chunk($c)$c#end"
operator|+
literal|"#end"
decl_stmt|;
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SQLStatement
name|compiled
init|=
operator|new
name|SQLTemplateProcessor
argument_list|()
operator|.
name|processTemplate
argument_list|(
name|template
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"WHERE false OR 0"
argument_list|,
name|compiled
operator|.
name|getSql
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

