begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tx
operator|.
name|BaseTransaction
import|;
end_import

begin_comment
comment|/**  * A query engine used for unit testing. Returns canned results instead of doing the  * actual query.  *   */
end_comment

begin_class
specifier|public
class|class
name|MockQueryEngine
implements|implements
name|QueryEngine
block|{
comment|// mockup the actual results
specifier|protected
name|Map
name|results
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|protected
name|EntityResolver
name|entityResolver
decl_stmt|;
specifier|protected
name|int
name|runCount
decl_stmt|;
specifier|public
name|MockQueryEngine
parameter_list|()
block|{
block|}
specifier|public
name|MockQueryEngine
parameter_list|(
name|QueryEngine
name|engine
parameter_list|)
block|{
name|this
argument_list|(
name|engine
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MockQueryEngine
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
name|this
operator|.
name|entityResolver
operator|=
name|resolver
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|runCount
operator|=
literal|0
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getRunCount
parameter_list|()
block|{
return|return
name|runCount
return|;
block|}
specifier|public
name|void
name|addExpectedResult
parameter_list|(
name|Query
name|query
parameter_list|,
name|List
name|result
parameter_list|)
block|{
name|results
operator|.
name|put
argument_list|(
name|query
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|performQueries
parameter_list|(
name|Collection
name|queries
parameter_list|,
name|OperationObserver
name|resultConsumer
parameter_list|,
name|BaseTransaction
name|transaction
parameter_list|)
block|{
name|initWithPresetResults
argument_list|(
name|queries
argument_list|,
name|resultConsumer
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|performQueries
parameter_list|(
name|Collection
name|queries
parameter_list|,
name|OperationObserver
name|resultConsumer
parameter_list|)
block|{
name|initWithPresetResults
argument_list|(
name|queries
argument_list|,
name|resultConsumer
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initWithPresetResults
parameter_list|(
name|Collection
name|queries
parameter_list|,
name|OperationObserver
name|resultConsumer
parameter_list|)
block|{
name|runCount
operator|++
expr_stmt|;
comment|// stick preset results to the consumer
name|Iterator
name|it
init|=
name|queries
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Query
name|query
init|=
operator|(
name|Query
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|resultConsumer
operator|.
name|nextRows
argument_list|(
name|query
argument_list|,
operator|(
name|List
operator|)
name|results
operator|.
name|get
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|DataNode
name|lookupDataNode
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|EntityResolver
name|getEntityResolver
parameter_list|()
block|{
return|return
name|entityResolver
return|;
block|}
specifier|public
name|Collection
name|getDataMaps
parameter_list|()
block|{
return|return
operator|(
name|entityResolver
operator|!=
literal|null
operator|)
condition|?
name|entityResolver
operator|.
name|getDataMaps
argument_list|()
else|:
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
block|}
end_class

end_unit

