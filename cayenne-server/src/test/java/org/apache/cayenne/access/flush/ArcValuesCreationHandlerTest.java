begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|ObjectDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
operator|.
name|DbRowOpType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
operator|.
name|DbRowOpVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
operator|.
name|InsertDbRowOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
operator|.
name|Values
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|ArcValuesCreationHandlerTest
block|{
specifier|private
name|ArcValuesCreationHandler
name|handler
decl_stmt|;
specifier|private
name|DbRowOpFactory
name|factory
decl_stmt|;
specifier|private
name|InsertDbRowOp
name|dbRowOp
decl_stmt|;
specifier|private
name|Values
name|values
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|factory
operator|=
name|mock
argument_list|(
name|DbRowOpFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|handler
operator|=
operator|new
name|ArcValuesCreationHandler
argument_list|(
name|factory
argument_list|,
name|DbRowOpType
operator|.
name|INSERT
argument_list|)
expr_stmt|;
name|dbRowOp
operator|=
name|mock
argument_list|(
name|InsertDbRowOp
operator|.
name|class
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|Values
argument_list|(
name|dbRowOp
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ObjectDiff
name|diff
init|=
name|mock
argument_list|(
name|ObjectDiff
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClassDescriptor
name|descriptor
init|=
name|mock
argument_list|(
name|ClassDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjEntity
name|entity
init|=
name|mock
argument_list|(
name|ObjEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjRelationship
name|relationship
init|=
name|mock
argument_list|(
name|ObjRelationship
operator|.
name|class
argument_list|)
decl_stmt|;
name|DbRelationship
name|dbRelationship
init|=
name|mock
argument_list|(
name|DbRelationship
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjectStore
name|store
init|=
name|mock
argument_list|(
name|ObjectStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|Persistent
name|object
init|=
name|mock
argument_list|(
name|Persistent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getDbRelationships
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|dbRelationship
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getRelationship
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|relationship
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|descriptor
operator|.
name|getEntity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|dbRowOp
operator|.
name|accept
argument_list|(
name|any
argument_list|(
name|DbRowOpVisitor
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|dbRowOp
operator|.
name|getValues
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|factory
operator|.
name|getDiff
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|diff
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|factory
operator|.
name|getDescriptor
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|factory
operator|.
name|getStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|factory
operator|.
name|getObject
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|factory
operator|.
name|getOrCreate
argument_list|(
name|isNull
argument_list|()
argument_list|,
name|any
argument_list|(
name|ObjectId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|DbRowOpType
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dbRowOp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|processRelationshipPkPkMaster
parameter_list|()
block|{
name|ObjectId
name|srcId
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"test1"
argument_list|,
literal|"id1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ObjectId
name|targetId
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"test2"
argument_list|,
literal|"id2"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|DbRelationship
name|relationship
init|=
name|DbRelBuilder
operator|.
name|of
argument_list|(
literal|"id1"
argument_list|,
literal|"id2"
argument_list|)
operator|.
name|withToDepPk
argument_list|()
operator|.
name|withDstPk
argument_list|()
operator|.
name|withSrcPk
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|handler
operator|.
name|processRelationship
argument_list|(
name|relationship
argument_list|,
name|srcId
argument_list|,
name|targetId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|factory
argument_list|)
operator|.
name|getOrCreate
argument_list|(
name|isNull
argument_list|()
argument_list|,
name|eq
argument_list|(
name|targetId
argument_list|)
argument_list|,
name|eq
argument_list|(
name|DbRowOpType
operator|.
name|UPDATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetId
operator|.
name|isReplacementIdAttached
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|targetId
operator|.
name|getReplacementIdMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|targetId
operator|.
name|getReplacementIdMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"id2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|srcId
operator|.
name|isReplacementIdAttached
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|processRelationshipPkPkDependent
parameter_list|()
block|{
name|ObjectId
name|srcId
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"test1"
argument_list|,
literal|"id1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ObjectId
name|targetId
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"test2"
argument_list|,
literal|"id2"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|DbRelationship
name|relationship
init|=
name|DbRelBuilder
operator|.
name|of
argument_list|(
literal|"id1"
argument_list|,
literal|"id2"
argument_list|)
operator|.
name|withDstPk
argument_list|()
operator|.
name|withSrcPk
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|handler
operator|.
name|processRelationship
argument_list|(
name|relationship
argument_list|,
name|srcId
argument_list|,
name|targetId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|factory
argument_list|)
operator|.
name|getOrCreate
argument_list|(
name|isNull
argument_list|()
argument_list|,
name|eq
argument_list|(
name|srcId
argument_list|)
argument_list|,
name|eq
argument_list|(
name|DbRowOpType
operator|.
name|INSERT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|srcId
operator|.
name|isReplacementIdAttached
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|srcId
operator|.
name|getReplacementIdMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|srcId
operator|.
name|getReplacementIdMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"id1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|targetId
operator|.
name|isReplacementIdAttached
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|processRelationshipPkFkMaster
parameter_list|()
block|{
name|ObjectId
name|srcId
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"test1"
argument_list|,
literal|"pk"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ObjectId
name|targetId
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"test2"
argument_list|,
literal|"id2"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|DbRelationship
name|relationship
init|=
name|DbRelBuilder
operator|.
name|of
argument_list|(
literal|"pk"
argument_list|,
literal|"fk"
argument_list|)
operator|.
name|withSrcPk
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|handler
operator|.
name|processRelationship
argument_list|(
name|relationship
argument_list|,
name|srcId
argument_list|,
name|targetId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|factory
argument_list|)
operator|.
name|getOrCreate
argument_list|(
name|isNull
argument_list|()
argument_list|,
name|eq
argument_list|(
name|targetId
argument_list|)
argument_list|,
name|eq
argument_list|(
name|DbRowOpType
operator|.
name|UPDATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|srcId
operator|.
name|isReplacementIdAttached
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|targetId
operator|.
name|isReplacementIdAttached
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dbRowOp
argument_list|)
operator|.
name|getValues
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|snapshot
init|=
name|values
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|snapshot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|snapshot
operator|.
name|get
argument_list|(
literal|"fk"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|processRelationshipFkPkDependent
parameter_list|()
block|{
name|ObjectId
name|srcId
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"test1"
argument_list|,
literal|"id1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ObjectId
name|targetId
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"test2"
argument_list|,
literal|"pk"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|DbRelationship
name|relationship
init|=
name|DbRelBuilder
operator|.
name|of
argument_list|(
literal|"fk"
argument_list|,
literal|"pk"
argument_list|)
operator|.
name|withDstPk
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|handler
operator|.
name|processRelationship
argument_list|(
name|relationship
argument_list|,
name|srcId
argument_list|,
name|targetId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|factory
argument_list|)
operator|.
name|getOrCreate
argument_list|(
name|isNull
argument_list|()
argument_list|,
name|eq
argument_list|(
name|srcId
argument_list|)
argument_list|,
name|eq
argument_list|(
name|DbRowOpType
operator|.
name|INSERT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|srcId
operator|.
name|isReplacementIdAttached
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|targetId
operator|.
name|isReplacementIdAttached
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|dbRowOp
argument_list|)
operator|.
name|getValues
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|snapshot
init|=
name|values
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|snapshot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snapshot
operator|.
name|get
argument_list|(
literal|"fk"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
specifier|static
class|class
name|DbRelBuilder
block|{
specifier|private
name|String
name|srcName
decl_stmt|;
specifier|private
name|String
name|dstName
decl_stmt|;
specifier|private
name|boolean
name|srcPk
decl_stmt|;
specifier|private
name|boolean
name|dstPk
decl_stmt|;
specifier|private
name|boolean
name|toDepPk
decl_stmt|;
specifier|static
name|DbRelBuilder
name|of
parameter_list|(
name|String
name|srcName
parameter_list|,
name|String
name|dstName
parameter_list|)
block|{
name|DbRelBuilder
name|builder
init|=
operator|new
name|DbRelBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|srcName
operator|=
name|srcName
expr_stmt|;
name|builder
operator|.
name|dstName
operator|=
name|dstName
expr_stmt|;
return|return
name|builder
return|;
block|}
name|DbRelBuilder
name|withSrcPk
parameter_list|()
block|{
name|srcPk
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
name|DbRelBuilder
name|withDstPk
parameter_list|()
block|{
name|dstPk
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
name|DbRelBuilder
name|withToDepPk
parameter_list|()
block|{
name|toDepPk
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
name|DbRelationship
name|build
parameter_list|()
block|{
name|DbRelationship
name|relationship
init|=
name|mock
argument_list|(
name|DbRelationship
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|isToDependentPK
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|toDepPk
argument_list|)
expr_stmt|;
name|DbJoin
name|join
init|=
name|mock
argument_list|(
name|DbJoin
operator|.
name|class
argument_list|)
decl_stmt|;
name|DbAttribute
name|src
init|=
operator|new
name|DbAttribute
argument_list|(
name|srcName
argument_list|)
decl_stmt|;
name|src
operator|.
name|setPrimaryKey
argument_list|(
name|srcPk
argument_list|)
expr_stmt|;
name|DbAttribute
name|target
init|=
operator|new
name|DbAttribute
argument_list|(
name|dstName
argument_list|)
decl_stmt|;
name|target
operator|.
name|setPrimaryKey
argument_list|(
name|dstPk
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|join
operator|.
name|getSource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|join
operator|.
name|getSourceName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|join
operator|.
name|getTarget
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|join
operator|.
name|getTargetName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|target
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getJoins
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|join
argument_list|)
argument_list|)
expr_stmt|;
name|DbRelationship
name|mockRel
init|=
name|mock
argument_list|(
name|DbRelationship
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|relationship
operator|.
name|getReverseRelationship
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockRel
argument_list|)
expr_stmt|;
return|return
name|relationship
return|;
block|}
block|}
block|}
end_class

end_unit

