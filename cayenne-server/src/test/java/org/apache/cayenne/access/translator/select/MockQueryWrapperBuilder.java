begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|BaseProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|MockQueryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|PrefetchTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Select
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
class|class
name|MockQueryWrapperBuilder
block|{
specifier|private
name|boolean
name|distinct
decl_stmt|;
specifier|private
name|QueryMetadata
name|metaData
decl_stmt|;
specifier|private
name|PrefetchTreeNode
name|prefetchTreeNode
decl_stmt|;
specifier|private
name|Expression
name|qualifier
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|Ordering
argument_list|>
name|orderings
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|Property
argument_list|<
name|?
argument_list|>
argument_list|>
name|columns
decl_stmt|;
specifier|private
name|Expression
name|havingQualifier
decl_stmt|;
specifier|private
name|Select
argument_list|<
name|?
argument_list|>
name|mockSelect
decl_stmt|;
specifier|private
name|boolean
name|needsResultSetMapping
decl_stmt|;
name|MockQueryWrapperBuilder
name|withDistinct
parameter_list|(
name|boolean
name|distinct
parameter_list|)
block|{
name|this
operator|.
name|distinct
operator|=
name|distinct
expr_stmt|;
return|return
name|this
return|;
block|}
name|MockQueryWrapperBuilder
name|withMetaData
parameter_list|(
name|QueryMetadata
name|metaData
parameter_list|)
block|{
name|this
operator|.
name|metaData
operator|=
name|metaData
expr_stmt|;
return|return
name|this
return|;
block|}
name|MockQueryWrapperBuilder
name|withPrefetchTreeNode
parameter_list|(
name|PrefetchTreeNode
name|prefetchTreeNode
parameter_list|)
block|{
name|this
operator|.
name|prefetchTreeNode
operator|=
name|prefetchTreeNode
expr_stmt|;
return|return
name|this
return|;
block|}
name|MockQueryWrapperBuilder
name|withQualifier
parameter_list|(
name|Expression
name|qualifier
parameter_list|)
block|{
name|this
operator|.
name|qualifier
operator|=
name|qualifier
expr_stmt|;
return|return
name|this
return|;
block|}
name|MockQueryWrapperBuilder
name|withOrderings
parameter_list|(
name|Collection
argument_list|<
name|Ordering
argument_list|>
name|orderings
parameter_list|)
block|{
name|this
operator|.
name|orderings
operator|=
name|orderings
expr_stmt|;
return|return
name|this
return|;
block|}
name|MockQueryWrapperBuilder
name|withColumns
parameter_list|(
name|Collection
argument_list|<
name|Property
argument_list|<
name|?
argument_list|>
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
name|MockQueryWrapperBuilder
name|withHavingQualifier
parameter_list|(
name|Expression
name|havingQualifier
parameter_list|)
block|{
name|this
operator|.
name|havingQualifier
operator|=
name|havingQualifier
expr_stmt|;
return|return
name|this
return|;
block|}
name|MockQueryWrapperBuilder
name|withSelect
parameter_list|(
name|Select
argument_list|<
name|?
argument_list|>
name|select
parameter_list|)
block|{
name|this
operator|.
name|mockSelect
operator|=
name|select
expr_stmt|;
return|return
name|this
return|;
block|}
name|MockQueryWrapperBuilder
name|withNeedsResultSetMapping
parameter_list|(
name|boolean
name|needsResultSetMapping
parameter_list|)
block|{
name|this
operator|.
name|needsResultSetMapping
operator|=
name|needsResultSetMapping
expr_stmt|;
return|return
name|this
return|;
block|}
name|TranslatableQueryWrapper
name|build
parameter_list|()
block|{
return|return
operator|new
name|TranslatableQueryWrapper
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isDistinct
parameter_list|()
block|{
return|return
name|distinct
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryMetadata
name|getMetaData
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
return|return
name|metaData
operator|!=
literal|null
condition|?
name|metaData
else|:
operator|new
name|MockQueryMetadata
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|getQualifier
parameter_list|()
block|{
return|return
name|qualifier
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Ordering
argument_list|>
name|getOrderings
parameter_list|()
block|{
return|return
name|orderings
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Property
argument_list|<
name|?
argument_list|>
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|columns
return|;
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|getHavingQualifier
parameter_list|()
block|{
return|return
name|havingQualifier
return|;
block|}
annotation|@
name|Override
specifier|public
name|Select
argument_list|<
name|?
argument_list|>
name|unwrap
parameter_list|()
block|{
return|return
name|mockSelect
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsResultSetMapping
parameter_list|()
block|{
return|return
name|needsResultSetMapping
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

