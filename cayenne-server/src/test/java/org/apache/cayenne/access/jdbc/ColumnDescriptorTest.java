begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|ColumnDescriptorTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testName
parameter_list|()
block|{
name|ColumnDescriptor
name|column
init|=
operator|new
name|ColumnDescriptor
argument_list|()
decl_stmt|;
name|column
operator|.
name|setName
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|column
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLabel
parameter_list|()
block|{
name|ColumnDescriptor
name|column
init|=
operator|new
name|ColumnDescriptor
argument_list|()
decl_stmt|;
name|column
operator|.
name|setDataRowKey
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|column
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDbAttributeConstructor
parameter_list|()
block|{
name|DbEntity
name|entity
init|=
operator|new
name|DbEntity
argument_list|(
literal|"entity"
argument_list|)
decl_stmt|;
name|DbAttribute
name|a
init|=
operator|new
name|DbAttribute
argument_list|()
decl_stmt|;
name|a
operator|.
name|setName
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|a
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|a
operator|.
name|setEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|entity
operator|.
name|addAttribute
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|ColumnDescriptor
name|column
init|=
operator|new
name|ColumnDescriptor
argument_list|(
name|a
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"name"
argument_list|,
name|column
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"name"
argument_list|,
name|column
operator|.
name|getQualifiedColumnName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"entity"
argument_list|,
name|column
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|column
operator|.
name|getJavaClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"name"
argument_list|,
name|column
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|column
operator|.
name|getJdbcType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|ColumnDescriptor
name|column1
init|=
operator|new
name|ColumnDescriptor
argument_list|()
decl_stmt|;
name|column1
operator|.
name|setName
argument_list|(
literal|"n1"
argument_list|)
expr_stmt|;
name|column1
operator|.
name|namePrefix
operator|=
literal|"np1"
expr_stmt|;
name|column1
operator|.
name|setTableName
argument_list|(
literal|"t1"
argument_list|)
expr_stmt|;
comment|// type should be ignored in the comparison
name|column1
operator|.
name|setJdbcType
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|ColumnDescriptor
name|column2
init|=
operator|new
name|ColumnDescriptor
argument_list|()
decl_stmt|;
name|column2
operator|.
name|setName
argument_list|(
literal|"n1"
argument_list|)
expr_stmt|;
name|column2
operator|.
name|namePrefix
operator|=
literal|"np1"
expr_stmt|;
name|column2
operator|.
name|setTableName
argument_list|(
literal|"t1"
argument_list|)
expr_stmt|;
name|column2
operator|.
name|setJdbcType
argument_list|(
name|Types
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|ColumnDescriptor
name|column3
init|=
operator|new
name|ColumnDescriptor
argument_list|()
decl_stmt|;
name|column3
operator|.
name|setName
argument_list|(
literal|"n1"
argument_list|)
expr_stmt|;
name|column3
operator|.
name|namePrefix
operator|=
literal|"np3"
expr_stmt|;
name|column3
operator|.
name|setTableName
argument_list|(
literal|"t1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|column1
argument_list|,
name|column2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|column1
operator|.
name|equals
argument_list|(
name|column3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|column3
operator|.
name|equals
argument_list|(
name|column2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCode
parameter_list|()
block|{
name|ColumnDescriptor
name|column1
init|=
operator|new
name|ColumnDescriptor
argument_list|()
decl_stmt|;
name|column1
operator|.
name|setName
argument_list|(
literal|"n1"
argument_list|)
expr_stmt|;
name|column1
operator|.
name|namePrefix
operator|=
literal|"np1"
expr_stmt|;
name|column1
operator|.
name|setTableName
argument_list|(
literal|"t1"
argument_list|)
expr_stmt|;
comment|// type should be ignored in the comparison
name|column1
operator|.
name|setJdbcType
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|ColumnDescriptor
name|column2
init|=
operator|new
name|ColumnDescriptor
argument_list|()
decl_stmt|;
name|column2
operator|.
name|setName
argument_list|(
literal|"n1"
argument_list|)
expr_stmt|;
name|column2
operator|.
name|namePrefix
operator|=
literal|"np1"
expr_stmt|;
name|column2
operator|.
name|setTableName
argument_list|(
literal|"t1"
argument_list|)
expr_stmt|;
name|column2
operator|.
name|setJdbcType
argument_list|(
name|Types
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|ColumnDescriptor
name|column3
init|=
operator|new
name|ColumnDescriptor
argument_list|()
decl_stmt|;
name|column3
operator|.
name|setName
argument_list|(
literal|"n1"
argument_list|)
expr_stmt|;
name|column3
operator|.
name|namePrefix
operator|=
literal|"np3"
expr_stmt|;
name|column3
operator|.
name|setTableName
argument_list|(
literal|"t1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|column1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|column2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// this is not really required by the hashcode contract... but just to see that
comment|// different columns generally end up in different buckets..
name|assertTrue
argument_list|(
name|column1
operator|.
name|hashCode
argument_list|()
operator|!=
name|column3
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

