begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ObjectStoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|event
operator|.
name|DefaultEventManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|parallel
operator|.
name|ParallelTestContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|DataContextSharedCacheEmpiricIT
extends|extends
name|ServerCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NEW_NAME
init|=
literal|"versionX"
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ServerRuntime
name|runtime
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ObjectStoreFactory
name|objectStoreFactory
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
specifier|private
name|DataContext
name|c1
decl_stmt|;
specifier|private
name|DataContext
name|c2
decl_stmt|;
specifier|private
name|DefaultEventManager
name|eventManager
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|eventManager
operator|=
operator|new
name|DefaultEventManager
argument_list|()
expr_stmt|;
name|DataRowStore
name|cache
init|=
operator|new
name|DataRowStore
argument_list|(
literal|"cacheTest"
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|,
name|eventManager
argument_list|)
decl_stmt|;
name|c1
operator|=
operator|new
name|DataContext
argument_list|(
name|runtime
operator|.
name|getDataDomain
argument_list|()
argument_list|,
name|objectStoreFactory
operator|.
name|createObjectStore
argument_list|(
name|cache
argument_list|)
argument_list|)
expr_stmt|;
name|c2
operator|=
operator|new
name|DataContext
argument_list|(
name|runtime
operator|.
name|getDataDomain
argument_list|()
argument_list|,
name|objectStoreFactory
operator|.
name|createObjectStore
argument_list|(
name|cache
argument_list|)
argument_list|)
expr_stmt|;
comment|// prepare a single artist record
name|TableHelper
name|tArtist
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"ARTIST"
argument_list|)
decl_stmt|;
name|tArtist
operator|.
name|setColumns
argument_list|(
literal|"ARTIST_ID"
argument_list|,
literal|"ARTIST_NAME"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"version1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|eventManager
operator|!=
literal|null
condition|)
block|{
name|eventManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectSelectCommitRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// select both, a2 should go second...
name|List
argument_list|<
name|?
argument_list|>
name|artists
init|=
name|c1
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|Artist
name|a1
init|=
operator|(
name|Artist
operator|)
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|altArtists
init|=
name|c2
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
specifier|final
name|Artist
name|a2
init|=
operator|(
name|Artist
operator|)
name|altArtists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|a2
operator|==
name|a1
argument_list|)
expr_stmt|;
comment|// Update Artist
name|a1
operator|.
name|setArtistName
argument_list|(
name|NEW_NAME
argument_list|)
expr_stmt|;
name|c1
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertOnCommit
argument_list|(
name|a2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectSelectCommitRefreshReverse
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|altArtists
init|=
name|c2
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
specifier|final
name|Artist
name|a2
init|=
operator|(
name|Artist
operator|)
name|altArtists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|artists
init|=
name|c1
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|Artist
name|a1
init|=
operator|(
name|Artist
operator|)
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|a2
operator|==
name|a1
argument_list|)
expr_stmt|;
comment|// Update Artist
name|a1
operator|.
name|setArtistName
argument_list|(
name|NEW_NAME
argument_list|)
expr_stmt|;
name|c1
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertOnCommit
argument_list|(
name|a2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectUpdateSelectCommitRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectQuery
name|query
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|artists
init|=
name|c1
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|Artist
name|a1
init|=
operator|(
name|Artist
operator|)
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Update Artist
name|a1
operator|.
name|setArtistName
argument_list|(
name|NEW_NAME
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|altArtists
init|=
name|c2
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
specifier|final
name|Artist
name|a2
init|=
operator|(
name|Artist
operator|)
name|altArtists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|a2
operator|==
name|a1
argument_list|)
expr_stmt|;
name|c1
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertOnCommit
argument_list|(
name|a2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertOnCommit
parameter_list|(
specifier|final
name|Artist
name|a2
parameter_list|)
throws|throws
name|Exception
block|{
comment|// check underlying cache
specifier|final
name|DataRow
name|freshSnapshot
init|=
name|c2
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|a2
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No snapshot for artist"
argument_list|,
name|freshSnapshot
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NEW_NAME
argument_list|,
name|freshSnapshot
operator|.
name|get
argument_list|(
literal|"ARTIST_NAME"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check peer artist
name|ParallelTestContainer
name|helper
init|=
operator|new
name|ParallelTestContainer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|assertResult
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"Snapshot change is not propagated: "
operator|+
name|freshSnapshot
argument_list|,
name|NEW_NAME
argument_list|,
name|a2
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|runTest
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

