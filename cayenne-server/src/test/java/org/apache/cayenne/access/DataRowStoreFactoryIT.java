begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DefaultRuntimeProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|RuntimeProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Binder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|DIBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|event
operator|.
name|DefaultEventManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|event
operator|.
name|EventManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|log
operator|.
name|CommonsJdbcEventLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|log
operator|.
name|JdbcEventLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tx
operator|.
name|DefaultTransactionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tx
operator|.
name|DefaultTransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tx
operator|.
name|TransactionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tx
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|MULTI_TIER_PROJECT
argument_list|)
specifier|public
class|class
name|DataRowStoreFactoryIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Test
specifier|public
name|void
name|testGetDataRowStore
parameter_list|()
throws|throws
name|Exception
block|{
name|ServerRuntime
name|runtime
init|=
name|getUnitTestInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ServerRuntime
operator|.
name|class
argument_list|)
decl_stmt|;
name|DataRowStore
name|dataStore
init|=
name|runtime
operator|.
name|getInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|DataRowStoreFactory
operator|.
name|class
argument_list|)
operator|.
name|createDataRowStore
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dataStore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDataRowStoreWithParameters
parameter_list|()
block|{
specifier|final
name|DataDomain
name|DOMAIN
init|=
operator|new
name|DataDomain
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|EventManager
name|EVENT_MANAGER
init|=
operator|new
name|DefaultEventManager
argument_list|()
decl_stmt|;
specifier|final
name|int
name|CACHE_SIZE
init|=
literal|500
decl_stmt|;
specifier|final
name|int
name|EXPIRATION_PROPERTY
init|=
literal|60
operator|*
literal|60
operator|*
literal|24
decl_stmt|;
name|Module
name|testModule
init|=
operator|new
name|Module
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|binder
operator|.
name|bindMap
argument_list|(
name|Constants
operator|.
name|PROPERTIES_MAP
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|DataDomain
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|DOMAIN
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|EventManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|EVENT_MANAGER
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|TransactionManager
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|DefaultTransactionManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|TransactionFactory
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|DefaultTransactionFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|JdbcEventLogger
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|CommonsJdbcEventLogger
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|RuntimeProperties
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|DefaultRuntimeProperties
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|DataRowStoreFactory
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|DefaultDataRowStoreFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bindMap
argument_list|(
name|Constants
operator|.
name|DATA_ROW_STORE_PROPERTIES_MAP
argument_list|)
operator|.
name|put
argument_list|(
name|DataRowStore
operator|.
name|SNAPSHOT_CACHE_SIZE_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|CACHE_SIZE
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|DataRowStore
operator|.
name|SNAPSHOT_EXPIRATION_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|EXPIRATION_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Injector
name|injector
init|=
name|DIBootstrap
operator|.
name|createInjector
argument_list|(
name|testModule
argument_list|)
decl_stmt|;
name|DataRowStore
name|dataStore
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|DataRowStoreFactory
operator|.
name|class
argument_list|)
operator|.
name|createDataRowStore
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dataStore
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dataStore
operator|.
name|maximumSize
argument_list|()
argument_list|,
name|CACHE_SIZE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDataRowStoreWithBridge
parameter_list|()
block|{
specifier|final
name|DataDomain
name|DOMAIN
init|=
operator|new
name|DataDomain
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|EventManager
name|EVENT_MANAGER
init|=
operator|new
name|DefaultEventManager
argument_list|()
decl_stmt|;
name|Module
name|testModule
init|=
operator|new
name|Module
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|binder
operator|.
name|bindMap
argument_list|(
name|Constants
operator|.
name|PROPERTIES_MAP
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|DataDomain
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|DOMAIN
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|EventManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|EVENT_MANAGER
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|TransactionManager
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|DefaultTransactionManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|TransactionFactory
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|DefaultTransactionFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|JdbcEventLogger
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|CommonsJdbcEventLogger
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|RuntimeProperties
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|DefaultRuntimeProperties
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|DataRowStoreFactory
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|DefaultDataRowStoreFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bindMap
argument_list|(
name|Constants
operator|.
name|DATA_ROW_STORE_PROPERTIES_MAP
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Injector
name|injector
init|=
name|DIBootstrap
operator|.
name|createInjector
argument_list|(
name|testModule
argument_list|)
decl_stmt|;
name|DataRowStore
name|dataStore
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|DataRowStoreFactory
operator|.
name|class
argument_list|)
operator|.
name|createDataRowStore
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|dataStore
operator|.
name|stopListeners
argument_list|()
expr_stmt|;
name|dataStore
operator|.
name|startListeners
argument_list|()
expr_stmt|;
name|dataStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

