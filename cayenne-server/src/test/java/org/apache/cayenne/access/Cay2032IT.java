begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|cay_2032
operator|.
name|Team
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|CAY_2032
argument_list|)
specifier|public
class|class
name|Cay2032IT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createTestData
parameter_list|()
throws|throws
name|Exception
block|{
comment|// USERS table has field `name` BLOB to trigger suppressDistinct in translator
name|TableHelper
name|tUser
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"USERS"
argument_list|)
decl_stmt|;
name|tUser
operator|.
name|setColumns
argument_list|(
literal|"user_id"
argument_list|)
expr_stmt|;
name|tUser
operator|.
name|insert
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|tUser
operator|.
name|insert
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|tUser
operator|.
name|insert
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|TableHelper
name|tTeam
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"TEAM"
argument_list|)
decl_stmt|;
name|tTeam
operator|.
name|setColumns
argument_list|(
literal|"team_id"
argument_list|)
expr_stmt|;
name|tTeam
operator|.
name|insert
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|tTeam
operator|.
name|insert
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|tTeam
operator|.
name|insert
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|tTeam
operator|.
name|insert
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|TableHelper
name|tTeamHasUser
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"USER_HAS_TEAM"
argument_list|)
decl_stmt|;
name|tTeamHasUser
operator|.
name|setColumns
argument_list|(
literal|"team_id"
argument_list|,
literal|"user_id"
argument_list|)
expr_stmt|;
name|tTeamHasUser
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tTeamHasUser
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tTeamHasUser
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tTeamHasUser
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|tTeamHasUser
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tTeamHasUser
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkResult
parameter_list|(
name|List
argument_list|<
name|Team
argument_list|>
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTeamUsers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getTeamUsers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getTeamUsers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getTeamUsers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrefetchDisjoint
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Team
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Team
operator|.
name|class
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Team
operator|.
name|TEAM_USERS
operator|.
name|disjoint
argument_list|()
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Team
operator|.
name|TEAM_ID_PK_PROPERTY
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|checkResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrefetchDisjointById
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Team
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Team
operator|.
name|class
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Team
operator|.
name|TEAM_USERS
operator|.
name|disjointById
argument_list|()
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Team
operator|.
name|TEAM_ID_PK_PROPERTY
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|checkResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrefetchJoint
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Team
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Team
operator|.
name|class
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Team
operator|.
name|TEAM_USERS
operator|.
name|joint
argument_list|()
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Team
operator|.
name|TEAM_ID_PK_PROPERTY
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|checkResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

