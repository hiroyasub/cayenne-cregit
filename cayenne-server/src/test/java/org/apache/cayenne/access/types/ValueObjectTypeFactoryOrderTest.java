begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|ValueObjectTypeFactoryOrderTest
block|{
name|ExtendedTypeMap
name|extendedTypeMap
decl_stmt|;
name|ValueObjectType
name|valueObjectType1
decl_stmt|,
name|valueObjectType2
decl_stmt|;
name|ExtendedType
name|tstType1
decl_stmt|,
name|tstType2
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUpRegistry
parameter_list|()
block|{
name|valueObjectType1
operator|=
name|createMockValueType
argument_list|(
name|UUID
operator|.
name|class
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|valueObjectType2
operator|=
name|createMockValueType
argument_list|(
name|UUID
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|extendedTypeMap
operator|=
operator|new
name|ExtendedTypeMap
argument_list|()
expr_stmt|;
name|tstType1
operator|=
name|mock
argument_list|(
name|ExtendedType
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|tstType1
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"byte[]"
argument_list|)
expr_stmt|;
name|extendedTypeMap
operator|.
name|registerType
argument_list|(
name|tstType1
argument_list|)
expr_stmt|;
name|tstType2
operator|=
operator|new
name|MockExtendedType
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|extendedTypeMap
operator|.
name|registerType
argument_list|(
name|tstType2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ValueObjectType
name|createMockValueType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|valueClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|targetClass
parameter_list|)
block|{
name|ValueObjectType
name|valueObjectType
init|=
name|mock
argument_list|(
name|ValueObjectType
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|valueObjectType
operator|.
name|getValueType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|valueClass
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|valueObjectType
operator|.
name|getTargetType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|targetClass
argument_list|)
expr_stmt|;
return|return
name|valueObjectType
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testByteFirstOrder
parameter_list|()
block|{
name|List
argument_list|<
name|ValueObjectType
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|valueObjectType1
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|valueObjectType2
argument_list|)
expr_stmt|;
name|DefaultValueObjectTypeRegistry
name|registry
init|=
operator|new
name|DefaultValueObjectTypeRegistry
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|ValueObjectTypeFactory
name|factory
init|=
operator|new
name|ValueObjectTypeFactory
argument_list|(
name|extendedTypeMap
argument_list|,
name|registry
argument_list|)
decl_stmt|;
name|ValueObjectTypeFactory
operator|.
name|ExtendedTypeConverter
name|converter
init|=
operator|(
name|ValueObjectTypeFactory
operator|.
name|ExtendedTypeConverter
operator|)
name|factory
operator|.
name|getType
argument_list|(
name|UUID
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|converter
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|tstType1
argument_list|,
name|converter
operator|.
name|extendedType
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|tstType2
argument_list|,
name|converter
operator|.
name|extendedType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringFirstOrder
parameter_list|()
block|{
name|List
argument_list|<
name|ValueObjectType
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|valueObjectType2
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|valueObjectType1
argument_list|)
expr_stmt|;
name|DefaultValueObjectTypeRegistry
name|registry
init|=
operator|new
name|DefaultValueObjectTypeRegistry
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|ValueObjectTypeFactory
name|factory
init|=
operator|new
name|ValueObjectTypeFactory
argument_list|(
name|extendedTypeMap
argument_list|,
name|registry
argument_list|)
decl_stmt|;
name|ValueObjectTypeFactory
operator|.
name|ExtendedTypeConverter
name|converter
init|=
operator|(
name|ValueObjectTypeFactory
operator|.
name|ExtendedTypeConverter
operator|)
name|factory
operator|.
name|getType
argument_list|(
name|UUID
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|converter
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|tstType2
argument_list|,
name|converter
operator|.
name|extendedType
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|tstType1
argument_list|,
name|converter
operator|.
name|extendedType
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

