begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
package|;
end_package

begin_import
import|import
name|com
operator|.
name|mockrunner
operator|.
name|mock
operator|.
name|jdbc
operator|.
name|MockResultSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|EnumTypeTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testConstructor
parameter_list|()
throws|throws
name|Exception
block|{
name|EnumType
name|type
init|=
operator|new
name|EnumType
argument_list|(
name|MockEnum
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MockEnum
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|type
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MockEnum
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|,
name|type
operator|.
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MockEnum
operator|.
name|values
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertSame
argument_list|(
name|MockEnum
operator|.
name|values
argument_list|()
index|[
name|i
index|]
argument_list|,
name|type
operator|.
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidConstructor1
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
operator|new
name|EnumType
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Non-enum class went through"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidConstructor2
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
operator|new
name|EnumType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Null class went through"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaterializeStringObject
parameter_list|()
throws|throws
name|Exception
block|{
name|EnumType
name|type
init|=
operator|new
name|EnumType
argument_list|(
name|MockEnum
operator|.
name|class
argument_list|)
decl_stmt|;
name|MockResultSet
name|rs
init|=
operator|new
name|MockResultSet
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|rs
operator|.
name|addColumn
argument_list|(
literal|"Enum"
argument_list|)
expr_stmt|;
name|rs
operator|.
name|addRow
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"b"
block|}
argument_list|)
expr_stmt|;
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
name|Object
name|o
init|=
name|type
operator|.
name|materializeObject
argument_list|(
name|rs
argument_list|,
literal|1
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|MockEnum
operator|.
name|b
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaterializeNumericObject
parameter_list|()
throws|throws
name|Exception
block|{
name|EnumType
name|type
init|=
operator|new
name|EnumType
argument_list|(
name|MockEnum
operator|.
name|class
argument_list|)
decl_stmt|;
name|MockResultSet
name|rs
init|=
operator|new
name|MockResultSet
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|rs
operator|.
name|addColumn
argument_list|(
literal|"Enum"
argument_list|)
expr_stmt|;
name|rs
operator|.
name|addRow
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|2
block|}
argument_list|)
expr_stmt|;
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
name|Object
name|o
init|=
name|type
operator|.
name|materializeObject
argument_list|(
name|rs
argument_list|,
literal|1
argument_list|,
name|Types
operator|.
name|NUMERIC
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|MockEnum
operator|.
name|c
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaterializeStringObjectInnerEnum
parameter_list|()
throws|throws
name|Exception
block|{
name|EnumType
name|type
init|=
operator|new
name|EnumType
argument_list|(
name|InnerEnumHolder
operator|.
name|InnerEnum
operator|.
name|class
argument_list|)
decl_stmt|;
name|MockResultSet
name|rs
init|=
operator|new
name|MockResultSet
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|rs
operator|.
name|addColumn
argument_list|(
literal|"Enum"
argument_list|)
expr_stmt|;
name|rs
operator|.
name|addRow
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"b"
block|}
argument_list|)
expr_stmt|;
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
name|Object
name|o
init|=
name|type
operator|.
name|materializeObject
argument_list|(
name|rs
argument_list|,
literal|1
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|InnerEnumHolder
operator|.
name|InnerEnum
operator|.
name|b
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaterializeNumericObjectInnerEnum
parameter_list|()
throws|throws
name|Exception
block|{
name|EnumType
name|type
init|=
operator|new
name|EnumType
argument_list|(
name|InnerEnumHolder
operator|.
name|InnerEnum
operator|.
name|class
argument_list|)
decl_stmt|;
name|MockResultSet
name|rs
init|=
operator|new
name|MockResultSet
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|rs
operator|.
name|addColumn
argument_list|(
literal|"Enum"
argument_list|)
expr_stmt|;
name|rs
operator|.
name|addRow
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|2
block|}
argument_list|)
expr_stmt|;
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
name|Object
name|o
init|=
name|type
operator|.
name|materializeObject
argument_list|(
name|rs
argument_list|,
literal|1
argument_list|,
name|Types
operator|.
name|NUMERIC
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|InnerEnumHolder
operator|.
name|InnerEnum
operator|.
name|c
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

