begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
operator|.
name|DefaultSelectTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ColumnSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|cay_2641
operator|.
name|ArtistLazy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|cay_2641
operator|.
name|DatamapLazy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|cay_2641
operator|.
name|PaintingLazy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|CAY_2641
argument_list|)
specifier|public
class|class
name|Cay2641IT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|ObjectContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DbAdapter
name|adapter
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|th
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"ArtistLazy"
argument_list|)
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"NAME"
argument_list|,
literal|"SURNAME"
argument_list|)
operator|.
name|setColumnTypes
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|)
decl_stmt|;
name|th
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"artist1"
argument_list|,
literal|"artist2"
argument_list|)
expr_stmt|;
name|th
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"PaintingLazy"
argument_list|)
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"NAME"
argument_list|,
literal|"ARTIST_ID"
argument_list|)
operator|.
name|setColumnTypes
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|th
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"painting1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTranslatorSql
parameter_list|()
block|{
name|ObjectSelect
argument_list|<
name|ArtistLazy
argument_list|>
name|artists
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ArtistLazy
operator|.
name|class
argument_list|)
decl_stmt|;
name|DefaultSelectTranslator
name|translator
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|artists
argument_list|,
name|adapter
argument_list|,
name|context
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|translator
operator|.
name|getSql
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|sql
operator|.
name|contains
argument_list|(
literal|"t0.NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|string
init|=
literal|"SELECT t0.SURNAME, t0.ID FROM ArtistLazy t0"
decl_stmt|;
name|assertEquals
argument_list|(
name|sql
argument_list|,
name|string
argument_list|)
expr_stmt|;
name|ColumnSelect
argument_list|<
name|String
argument_list|>
name|select
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|ArtistLazy
operator|.
name|class
argument_list|,
name|ArtistLazy
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|translator
operator|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|select
argument_list|,
name|adapter
argument_list|,
name|context
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|=
name|translator
operator|.
name|getSql
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|contains
argument_list|(
literal|"t0.NAME"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTypeAttributes
parameter_list|()
block|{
name|List
argument_list|<
name|ArtistLazy
argument_list|>
name|artists
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ArtistLazy
operator|.
name|class
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Object
name|object
init|=
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|readPropertyDirectly
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|object
operator|instanceof
name|Fault
argument_list|)
expr_stmt|;
name|object
operator|=
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|readPropertyDirectly
argument_list|(
literal|"surname"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist2"
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTypeLazyAttribute
parameter_list|()
block|{
name|ArtistLazy
name|artist
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ArtistLazy
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Object
name|object
init|=
name|artist
operator|.
name|readPropertyDirectly
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|object
operator|instanceof
name|Fault
argument_list|)
expr_stmt|;
name|artist
operator|.
name|getName
argument_list|()
expr_stmt|;
name|object
operator|=
name|artist
operator|.
name|readPropertyDirectly
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist1"
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrefetchLazyTranslatorSql
parameter_list|()
block|{
name|ObjectSelect
argument_list|<
name|PaintingLazy
argument_list|>
name|paintingLazyObjectSelect
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|PaintingLazy
operator|.
name|class
argument_list|)
operator|.
name|prefetch
argument_list|(
name|PaintingLazy
operator|.
name|ARTIST
operator|.
name|joint
argument_list|()
argument_list|)
decl_stmt|;
name|DefaultSelectTranslator
name|translator
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|paintingLazyObjectSelect
argument_list|,
name|adapter
argument_list|,
name|context
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|translator
operator|.
name|getSql
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|sql
operator|.
name|contains
argument_list|(
literal|"t0.NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|string
init|=
literal|"SELECT t0.ARTIST_ID, t0.ID, t1.ID, t1.SURNAME FROM PaintingLazy t0 LEFT JOIN ArtistLazy t1 ON t0.ARTIST_ID = t1.ID"
decl_stmt|;
name|assertEquals
argument_list|(
name|sql
argument_list|,
name|string
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrefetchLazyTypeAttributes
parameter_list|()
block|{
name|List
argument_list|<
name|PaintingLazy
argument_list|>
name|paintingLazyList
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|PaintingLazy
operator|.
name|class
argument_list|)
operator|.
name|prefetch
argument_list|(
name|PaintingLazy
operator|.
name|ARTIST
operator|.
name|joint
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Object
name|object
init|=
name|paintingLazyList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|readPropertyDirectly
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|object
operator|instanceof
name|Fault
argument_list|)
expr_stmt|;
name|object
operator|=
name|paintingLazyList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|object
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"painting1"
argument_list|,
name|object
argument_list|)
expr_stmt|;
name|ArtistLazy
name|artist
init|=
operator|(
name|ArtistLazy
operator|)
name|paintingLazyList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|readPropertyDirectly
argument_list|(
literal|"artist"
argument_list|)
decl_stmt|;
name|object
operator|=
name|artist
operator|.
name|readPropertyDirectly
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|object
operator|instanceof
name|Fault
argument_list|)
expr_stmt|;
name|object
operator|=
name|artist
operator|.
name|readPropertyDirectly
argument_list|(
literal|"surname"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist2"
argument_list|,
name|object
argument_list|)
expr_stmt|;
name|object
operator|=
name|artist
operator|.
name|getName
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|object
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist1"
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testsSimpleSelectCustomer
parameter_list|()
block|{
name|DatamapLazy
name|optimistic
init|=
name|DatamapLazy
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ArtistLazy
argument_list|>
name|artistLazies
init|=
name|optimistic
operator|.
name|performSimpleSelect
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Object
name|object
init|=
name|artistLazies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|readPropertyDirectly
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|object
operator|instanceof
name|Fault
argument_list|)
expr_stmt|;
name|object
operator|=
name|artistLazies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|readPropertyDirectly
argument_list|(
literal|"surname"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|object
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist2"
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testsPrefetchSelectCustomer
parameter_list|()
block|{
name|DatamapLazy
name|optimistic
init|=
name|DatamapLazy
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PaintingLazy
argument_list|>
name|paintingLazies
init|=
name|optimistic
operator|.
name|performPrefetchSelect
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Object
name|object
init|=
name|paintingLazies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|readPropertyDirectly
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|object
operator|instanceof
name|Fault
argument_list|)
expr_stmt|;
name|ArtistLazy
name|artist
init|=
operator|(
name|ArtistLazy
operator|)
name|paintingLazies
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|readPropertyDirectly
argument_list|(
literal|"artist"
argument_list|)
decl_stmt|;
name|object
operator|=
name|artist
operator|.
name|readPropertyDirectly
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|object
operator|instanceof
name|Fault
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

