begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|SQLGenerationVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|StringBuilderAppendable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|BetweenNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|BitwiseNotNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|ColumnNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|EqualNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|FunctionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|InNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|LikeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|NotEqualNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|NotNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|OpExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|SelectNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|TextNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|ValueNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTAsterisk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|BaseProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|QualifierTranslatorTest
block|{
specifier|private
name|QualifierTranslator
name|translator
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|prepareTranslator
parameter_list|()
block|{
name|DbEntity
name|dbEntity
init|=
operator|new
name|DbEntity
argument_list|()
decl_stmt|;
name|dbEntity
operator|.
name|setName
argument_list|(
literal|"mock"
argument_list|)
expr_stmt|;
name|DbAttribute
name|dbAttributeA
init|=
operator|new
name|DbAttribute
argument_list|()
decl_stmt|;
name|dbAttributeA
operator|.
name|setName
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|dbAttributeA
argument_list|)
expr_stmt|;
name|DbAttribute
name|dbAttributeB
init|=
operator|new
name|DbAttribute
argument_list|()
decl_stmt|;
name|dbAttributeB
operator|.
name|setName
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|dbAttributeB
operator|.
name|setPrimaryKey
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|dbAttributeB
argument_list|)
expr_stmt|;
name|ObjEntity
name|entity
init|=
operator|new
name|ObjEntity
argument_list|()
decl_stmt|;
name|entity
operator|.
name|setName
argument_list|(
literal|"mock"
argument_list|)
expr_stmt|;
name|ObjAttribute
name|attribute
init|=
operator|new
name|ObjAttribute
argument_list|()
decl_stmt|;
name|attribute
operator|.
name|setName
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|setDbAttributePath
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|entity
operator|.
name|addAttribute
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
name|ObjAttribute
name|attribute2
init|=
operator|new
name|ObjAttribute
argument_list|()
decl_stmt|;
name|attribute2
operator|.
name|setName
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|attribute2
operator|.
name|setDbAttributePath
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|entity
operator|.
name|addAttribute
argument_list|(
name|attribute2
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setDbEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|DataMap
name|dataMap
init|=
operator|new
name|DataMap
argument_list|()
decl_stmt|;
name|dataMap
operator|.
name|addDbEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|addObjEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|EntityResolver
name|resolver
init|=
operator|new
name|EntityResolver
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|addDataMap
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
name|TranslatableQueryWrapper
name|wrapper
init|=
operator|new
name|MockQueryWrapperBuilder
argument_list|()
operator|.
name|withMetaData
argument_list|(
operator|new
name|MockQueryMetadataBuilder
argument_list|()
operator|.
name|withDbEntity
argument_list|(
name|dbEntity
argument_list|)
operator|.
name|withObjEntity
argument_list|(
name|entity
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TranslatorContext
name|context
init|=
operator|new
name|MockTranslatorContext
argument_list|(
name|wrapper
argument_list|,
name|resolver
argument_list|)
decl_stmt|;
name|translator
operator|=
operator|new
name|QualifierTranslator
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|translateNull
parameter_list|()
block|{
name|assertNull
argument_list|(
name|translator
operator|.
name|translate
argument_list|(
operator|(
name|Expression
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|translator
operator|.
name|translate
argument_list|(
operator|(
name|BaseProperty
argument_list|<
name|?
argument_list|>
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|translateIn
parameter_list|()
block|{
block|{
name|Node
name|in
init|=
name|translate
argument_list|(
literal|"db:a in (1,2)"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|in
argument_list|,
name|instanceOf
argument_list|(
name|InNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|in
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|InNode
operator|)
name|in
operator|)
operator|.
name|isNot
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ColumnNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ValueNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|ColumnNode
operator|)
name|in
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|,
operator|(
name|Object
index|[]
operator|)
operator|(
operator|(
name|ValueNode
operator|)
name|in
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|in
init|=
name|translator
operator|.
name|translate
argument_list|(
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
literal|"a"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|in
argument_list|,
name|instanceOf
argument_list|(
name|InNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|in
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|InNode
operator|)
name|in
operator|)
operator|.
name|isNot
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ColumnNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|in
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ValueNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|ColumnNode
operator|)
name|in
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|,
operator|(
name|Object
index|[]
operator|)
operator|(
operator|(
name|ValueNode
operator|)
name|in
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|notIn
init|=
name|translate
argument_list|(
literal|"db:a not in (1,2)"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notIn
argument_list|,
name|instanceOf
argument_list|(
name|InNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|notIn
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|InNode
operator|)
name|notIn
operator|)
operator|.
name|isNot
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notIn
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ColumnNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notIn
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ValueNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|ColumnNode
operator|)
name|notIn
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|,
operator|(
name|Object
index|[]
operator|)
operator|(
operator|(
name|ValueNode
operator|)
name|notIn
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|translateBetween
parameter_list|()
block|{
block|{
name|Node
name|between
init|=
name|translate
argument_list|(
literal|"db:a between 1 and 5"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|between
argument_list|,
name|instanceOf
argument_list|(
name|BetweenNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|between
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|BetweenNode
operator|)
name|between
operator|)
operator|.
name|isNot
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|between
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ColumnNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|between
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ValueNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|between
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ValueNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|notBetween
init|=
name|translate
argument_list|(
literal|"db:b not between 2 and 6"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notBetween
argument_list|,
name|instanceOf
argument_list|(
name|BetweenNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|notBetween
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|BetweenNode
operator|)
name|notBetween
operator|)
operator|.
name|isNot
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notBetween
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ColumnNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notBetween
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ValueNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notBetween
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ValueNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|translateNot
parameter_list|()
block|{
name|Node
name|not
init|=
name|translate
argument_list|(
literal|"not true"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|not
argument_list|,
name|instanceOf
argument_list|(
name|NotNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|not
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|not
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|TextNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" 1=1"
argument_list|,
operator|(
operator|(
name|TextNode
operator|)
name|not
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|translateBitwiseNot
parameter_list|()
block|{
name|Node
name|not
init|=
name|translate
argument_list|(
literal|"~123"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|not
argument_list|,
name|instanceOf
argument_list|(
name|BitwiseNotNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|not
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|not
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ValueNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
operator|(
name|ValueNode
operator|)
name|not
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|translateEqual
parameter_list|()
block|{
block|{
name|Node
name|eq
init|=
name|translate
argument_list|(
literal|"db:a = 123"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|eq
argument_list|,
name|instanceOf
argument_list|(
name|EqualNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|eq
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|eq
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ColumnNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|eq
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ValueNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|ColumnNode
operator|)
name|eq
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
operator|(
operator|(
name|ValueNode
operator|)
name|eq
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|neq
init|=
name|translate
argument_list|(
literal|"db:b != 321"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|neq
argument_list|,
name|instanceOf
argument_list|(
name|NotEqualNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|neq
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|neq
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ColumnNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|neq
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ValueNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
operator|(
operator|(
name|ColumnNode
operator|)
name|neq
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|321
argument_list|,
operator|(
operator|(
name|ValueNode
operator|)
name|neq
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|translateLike
parameter_list|()
block|{
block|{
comment|// no support for escape char in exp parser
name|Node
name|like
init|=
name|translator
operator|.
name|translate
argument_list|(
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
literal|"a"
argument_list|,
literal|"abc"
argument_list|,
literal|'~'
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|like
argument_list|,
name|instanceOf
argument_list|(
name|LikeNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'~'
argument_list|,
operator|(
operator|(
name|LikeNode
operator|)
name|like
operator|)
operator|.
name|getEscape
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|LikeNode
operator|)
name|like
operator|)
operator|.
name|isIgnoreCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|LikeNode
operator|)
name|like
operator|)
operator|.
name|isNot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|like
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|like
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ColumnNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|like
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ValueNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|ColumnNode
operator|)
name|like
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
operator|(
operator|(
name|ValueNode
operator|)
name|like
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|notLike
init|=
name|translate
argument_list|(
literal|"db:a not like 'abc'"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notLike
argument_list|,
name|instanceOf
argument_list|(
name|LikeNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|LikeNode
operator|)
name|notLike
operator|)
operator|.
name|getEscape
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|LikeNode
operator|)
name|notLike
operator|)
operator|.
name|isIgnoreCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|LikeNode
operator|)
name|notLike
operator|)
operator|.
name|isNot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|notLike
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notLike
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ColumnNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notLike
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ValueNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|ColumnNode
operator|)
name|notLike
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
operator|(
operator|(
name|ValueNode
operator|)
name|notLike
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|likeIgnoreCase
init|=
name|translate
argument_list|(
literal|"db:a likeIgnoreCase 'abc'"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|likeIgnoreCase
argument_list|,
name|instanceOf
argument_list|(
name|LikeNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|LikeNode
operator|)
name|likeIgnoreCase
operator|)
operator|.
name|getEscape
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|LikeNode
operator|)
name|likeIgnoreCase
operator|)
operator|.
name|isIgnoreCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|LikeNode
operator|)
name|likeIgnoreCase
operator|)
operator|.
name|isNot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|likeIgnoreCase
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|likeIgnoreCase
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ColumnNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|likeIgnoreCase
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ValueNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|ColumnNode
operator|)
name|likeIgnoreCase
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
operator|(
operator|(
name|ValueNode
operator|)
name|likeIgnoreCase
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|notLikeIgnoreCase
init|=
name|translate
argument_list|(
literal|"db:a not likeIgnoreCase 'abc'"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|notLikeIgnoreCase
argument_list|,
name|instanceOf
argument_list|(
name|LikeNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|LikeNode
operator|)
name|notLikeIgnoreCase
operator|)
operator|.
name|getEscape
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|LikeNode
operator|)
name|notLikeIgnoreCase
operator|)
operator|.
name|isIgnoreCase
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|LikeNode
operator|)
name|notLikeIgnoreCase
operator|)
operator|.
name|isNot
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|notLikeIgnoreCase
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notLikeIgnoreCase
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ColumnNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|notLikeIgnoreCase
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ValueNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|ColumnNode
operator|)
name|notLikeIgnoreCase
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
operator|(
operator|(
name|ValueNode
operator|)
name|notLikeIgnoreCase
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|translateFunctionCall
parameter_list|()
block|{
block|{
name|Node
name|function
init|=
name|translate
argument_list|(
literal|"trim(a)"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|function
argument_list|,
name|instanceOf
argument_list|(
name|FunctionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TRIM"
argument_list|,
operator|(
operator|(
name|FunctionNode
operator|)
name|function
operator|)
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|FunctionNode
operator|)
name|function
operator|)
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|function
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|function
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ColumnNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|ColumnNode
operator|)
name|function
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|function
init|=
name|translate
argument_list|(
literal|"year(a)"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|function
argument_list|,
name|instanceOf
argument_list|(
name|FunctionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"YEAR"
argument_list|,
operator|(
operator|(
name|FunctionNode
operator|)
name|function
operator|)
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|FunctionNode
operator|)
name|function
operator|)
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|function
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|function
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ColumnNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|ColumnNode
operator|)
name|function
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|translateMathExp
parameter_list|()
block|{
block|{
name|Node
name|op
init|=
name|translate
argument_list|(
literal|"1 + 2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|op
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"+"
argument_list|,
operator|(
operator|(
name|OpExpressionNode
operator|)
name|op
operator|)
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|op
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|op
init|=
name|translate
argument_list|(
literal|"1 - 2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|op
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-"
argument_list|,
operator|(
operator|(
name|OpExpressionNode
operator|)
name|op
operator|)
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|op
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|op
init|=
name|translate
argument_list|(
literal|"1 / 2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|op
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
operator|(
operator|(
name|OpExpressionNode
operator|)
name|op
operator|)
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|op
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|op
init|=
name|translate
argument_list|(
literal|"1 * 2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|op
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
operator|(
operator|(
name|OpExpressionNode
operator|)
name|op
operator|)
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|op
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|op
init|=
name|translate
argument_list|(
literal|"-2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|op
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-"
argument_list|,
operator|(
operator|(
name|OpExpressionNode
operator|)
name|op
operator|)
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|op
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|op
init|=
name|translate
argument_list|(
literal|"1& 2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|op
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"&"
argument_list|,
operator|(
operator|(
name|OpExpressionNode
operator|)
name|op
operator|)
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|op
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|op
init|=
name|translate
argument_list|(
literal|"1 | 2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|op
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"|"
argument_list|,
operator|(
operator|(
name|OpExpressionNode
operator|)
name|op
operator|)
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|op
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|op
init|=
name|translate
argument_list|(
literal|"1 ^ 2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|op
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"^"
argument_list|,
operator|(
operator|(
name|OpExpressionNode
operator|)
name|op
operator|)
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|op
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|op
init|=
name|translate
argument_list|(
literal|"1<< 2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|op
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<<"
argument_list|,
operator|(
operator|(
name|OpExpressionNode
operator|)
name|op
operator|)
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|op
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|op
init|=
name|translate
argument_list|(
literal|"1>> 2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|op
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">>"
argument_list|,
operator|(
operator|(
name|OpExpressionNode
operator|)
name|op
operator|)
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|op
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|translateComparision
parameter_list|()
block|{
block|{
name|Node
name|op
init|=
name|translate
argument_list|(
literal|"a< 2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|op
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<"
argument_list|,
operator|(
operator|(
name|OpExpressionNode
operator|)
name|op
operator|)
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|op
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|op
init|=
name|translate
argument_list|(
literal|"a> 2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|op
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">"
argument_list|,
operator|(
operator|(
name|OpExpressionNode
operator|)
name|op
operator|)
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|op
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|op
init|=
name|translate
argument_list|(
literal|"a<= 2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|op
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<="
argument_list|,
operator|(
operator|(
name|OpExpressionNode
operator|)
name|op
operator|)
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|op
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|op
init|=
name|translate
argument_list|(
literal|"a>= 2"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|op
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">="
argument_list|,
operator|(
operator|(
name|OpExpressionNode
operator|)
name|op
operator|)
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|op
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|translateConst
parameter_list|()
block|{
block|{
name|Node
name|op
init|=
name|translate
argument_list|(
literal|"true"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|op
argument_list|,
name|instanceOf
argument_list|(
name|TextNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" 1=1"
argument_list|,
operator|(
operator|(
name|TextNode
operator|)
name|op
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|op
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|op
init|=
name|translate
argument_list|(
literal|"false"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|op
argument_list|,
name|instanceOf
argument_list|(
name|TextNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" 1=0"
argument_list|,
operator|(
operator|(
name|TextNode
operator|)
name|op
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|op
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Node
name|op
init|=
name|translator
operator|.
name|translate
argument_list|(
operator|new
name|ASTAsterisk
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|op
argument_list|,
name|instanceOf
argument_list|(
name|TextNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" *"
argument_list|,
operator|(
operator|(
name|TextNode
operator|)
name|op
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|op
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|translateExists
parameter_list|()
block|{
name|Node
name|exists
init|=
name|translator
operator|.
name|translate
argument_list|(
name|ExpressionFactory
operator|.
name|exists
argument_list|(
name|ObjectSelect
operator|.
name|dbQuery
argument_list|(
literal|"mock"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exists
argument_list|,
name|instanceOf
argument_list|(
name|FunctionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"EXISTS"
argument_list|,
operator|(
operator|(
name|FunctionNode
operator|)
name|exists
operator|)
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exists
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exists
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|SelectNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|translateFullObject
parameter_list|()
block|{
name|Node
name|fullObj
init|=
name|translator
operator|.
name|translate
argument_list|(
name|ExpressionFactory
operator|.
name|fullObjectExp
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|fullObj
argument_list|,
name|instanceOf
argument_list|(
name|ColumnNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ColumnNode
name|columnNode
init|=
operator|(
name|ColumnNode
operator|)
name|fullObj
decl_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|columnNode
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CayenneRuntimeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|translateEnclosingObject
parameter_list|()
block|{
comment|// can't translate enclosing exp not in nested query
name|translator
operator|.
name|translate
argument_list|(
name|ExpressionFactory
operator|.
name|enclosingObjectExp
argument_list|(
name|ExpressionFactory
operator|.
name|dbPathExp
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|translateAnd
parameter_list|()
block|{
name|Node
name|and
init|=
name|translate
argument_list|(
literal|"true and false"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|and
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|and
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AND"
argument_list|,
operator|(
operator|(
name|OpExpressionNode
operator|)
name|and
operator|)
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|and
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|and
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|TextNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" 1=1"
argument_list|,
operator|(
operator|(
name|TextNode
operator|)
name|and
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|and
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|TextNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" 1=0"
argument_list|,
operator|(
operator|(
name|TextNode
operator|)
name|and
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|translateComplexAnd
parameter_list|()
block|{
name|Node
name|and
init|=
name|translate
argument_list|(
literal|"a< 2 and b in (5,6) and b = 7"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|and
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|and
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AND"
argument_list|,
operator|(
operator|(
name|OpExpressionNode
operator|)
name|and
operator|)
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|and
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|SQLGenerationVisitor
name|visitor
init|=
operator|new
name|SQLGenerationVisitor
argument_list|(
operator|new
name|StringBuilderAppendable
argument_list|()
argument_list|)
decl_stmt|;
name|and
operator|.
name|visit
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" ( t0.a< 2 ) AND t0.b IN ( 5, 6) AND ( t0.b = 7 )"
argument_list|,
name|visitor
operator|.
name|getSQLString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|translateOr
parameter_list|()
block|{
name|Node
name|or
init|=
name|translate
argument_list|(
literal|"true or false"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|or
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|or
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"OR"
argument_list|,
operator|(
operator|(
name|OpExpressionNode
operator|)
name|or
operator|)
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|or
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|or
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|TextNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|or
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|TextNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|translateNullComparision
parameter_list|()
block|{
name|Node
name|or
init|=
name|translate
argument_list|(
literal|"a> null"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|or
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|or
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">"
argument_list|,
operator|(
operator|(
name|OpExpressionNode
operator|)
name|or
operator|)
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|or
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|or
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ColumnNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|or
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ValueNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|translateComplexExp
parameter_list|()
block|{
name|Node
name|result
init|=
name|translate
argument_list|(
literal|"(a>= 1 + 2 / 3<< 4) and (db:b != true)"
argument_list|)
decl_stmt|;
block|{
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AND"
argument_list|,
operator|(
operator|(
name|OpExpressionNode
operator|)
name|result
operator|)
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|NotEqualNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|OpExpressionNode
name|left
init|=
operator|(
name|OpExpressionNode
operator|)
name|result
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|">="
argument_list|,
name|left
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|left
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|left
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ColumnNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|ColumnNode
operator|)
name|left
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|left
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|OpExpressionNode
name|shift
init|=
operator|(
name|OpExpressionNode
operator|)
name|left
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<<"
argument_list|,
name|shift
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shift
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|OpExpressionNode
name|plus
init|=
operator|(
name|OpExpressionNode
operator|)
name|shift
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"+"
argument_list|,
name|plus
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|plus
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|plus
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ValueNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|ValueNode
operator|)
name|plus
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|plus
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|OpExpressionNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|OpExpressionNode
name|div
init|=
operator|(
name|OpExpressionNode
operator|)
name|plus
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/"
argument_list|,
name|div
operator|.
name|getOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|div
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|div
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ValueNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|ValueNode
operator|)
name|div
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|div
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ValueNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
operator|(
name|ValueNode
operator|)
name|div
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|shift
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ValueNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
operator|(
name|ValueNode
operator|)
name|shift
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|NotEqualNode
name|right
init|=
operator|(
name|NotEqualNode
operator|)
name|result
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|right
operator|.
name|getChildrenCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|right
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ColumnNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
operator|(
operator|(
name|ColumnNode
operator|)
name|right
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|right
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|ValueNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
operator|(
operator|(
name|ValueNode
operator|)
name|right
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Node
name|translate
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|translator
operator|.
name|translate
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

