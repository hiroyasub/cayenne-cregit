begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|FilterFactory
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|FiltersFactory
operator|.
name|path
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|FiltersFactory
operator|.
name|eFilters
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|FiltersConfigTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSorting
parameter_list|()
throws|throws
name|Exception
block|{
name|FiltersConfig
name|filters
init|=
operator|new
name|FiltersConfig
argument_list|(
name|entityFilter
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|"aaa"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|"aa"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|"aa"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|"aa"
argument_list|,
literal|"aa"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|"aa"
argument_list|,
literal|"aa"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|"b"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|DbPath
argument_list|>
name|iterator
init|=
name|filters
operator|.
name|getDbPaths
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|(
literal|"aa"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|(
literal|"aa"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|(
literal|"aa"
argument_list|,
literal|"aa"
argument_list|)
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|(
literal|"aaa"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|(
literal|"b"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|EntityFilters
name|entityFilter
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|s1
parameter_list|)
block|{
return|return
operator|new
name|EntityFilters
argument_list|(
operator|new
name|DbPath
argument_list|(
name|s
argument_list|,
name|s1
argument_list|)
argument_list|,
name|include
argument_list|(
literal|"IncludeTable"
argument_list|)
argument_list|,
name|TRUE
argument_list|,
name|TRUE
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testActionsWithEmptyCatalog
parameter_list|()
throws|throws
name|Exception
block|{
name|FiltersConfig
name|filters
init|=
operator|new
name|FiltersConfig
argument_list|(
name|entityFilter
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|"aaa"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|"aa"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DbPath
argument_list|>
name|actions
init|=
name|filters
operator|.
name|pathsForQueries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|actions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|()
argument_list|,
name|actions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testActionsWithEmptySchemas
parameter_list|()
throws|throws
name|Exception
block|{
name|FiltersConfig
name|filters
init|=
operator|new
name|FiltersConfig
argument_list|(
name|entityFilter
argument_list|(
literal|"aaa"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|"aaa"
argument_list|,
literal|"11"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|"aa"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|"aa"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|"aa"
argument_list|,
literal|"aa"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|"aa"
argument_list|,
literal|"aa"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DbPath
argument_list|>
name|actions
init|=
name|filters
operator|.
name|pathsForQueries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|actions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|(
literal|"aa"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|actions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|(
literal|"aaa"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|actions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testActionsWithSchemas
parameter_list|()
throws|throws
name|Exception
block|{
name|FiltersConfig
name|filters
init|=
operator|new
name|FiltersConfig
argument_list|(
name|entityFilter
argument_list|(
literal|"aaa"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|"aa"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|"aa"
argument_list|,
literal|"aa"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|"aa"
argument_list|,
literal|"aa"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|"aa"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|"aa"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|"aa"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DbPath
argument_list|>
name|actions
init|=
name|filters
operator|.
name|pathsForQueries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|actions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|(
literal|"aa"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|actions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|(
literal|"aa"
argument_list|,
literal|"aa"
argument_list|)
argument_list|,
name|actions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|(
literal|"aa"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|actions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|(
literal|"aaa"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|actions
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testActionsWithSchemasAndEmptyCatalog
parameter_list|()
throws|throws
name|Exception
block|{
name|FiltersConfig
name|filters
init|=
operator|new
name|FiltersConfig
argument_list|(
name|entityFilter
argument_list|(
literal|""
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|""
argument_list|,
literal|"aa"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|""
argument_list|,
literal|"aa"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|""
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|""
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|""
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DbPath
argument_list|>
name|actions
init|=
name|filters
operator|.
name|pathsForQueries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|actions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|actions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"aa"
argument_list|)
argument_list|,
name|actions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|actions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFiltersOneFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|FiltersConfig
name|filters
init|=
operator|new
name|FiltersConfig
argument_list|(
name|eFilters
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|include
argument_list|(
literal|"table"
argument_list|)
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|""
argument_list|,
literal|"aa"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|""
argument_list|,
literal|"aa"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|""
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|""
argument_list|,
literal|"b"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|""
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|eFilters
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|include
argument_list|(
literal|"table"
argument_list|)
argument_list|)
argument_list|,
name|filters
operator|.
name|filter
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFiltersJoinFilters
parameter_list|()
throws|throws
name|Exception
block|{
name|FiltersConfig
name|filters
init|=
operator|new
name|FiltersConfig
argument_list|(
name|eFilters
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|include
argument_list|(
literal|"table"
argument_list|)
argument_list|)
argument_list|,
name|eFilters
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|exclude
argument_list|(
literal|"table"
argument_list|)
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|""
argument_list|,
literal|"aa"
argument_list|)
argument_list|,
name|entityFilter
argument_list|(
literal|""
argument_list|,
literal|"aa"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|eFilters
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|list
argument_list|(
name|include
argument_list|(
literal|"table"
argument_list|)
argument_list|,
name|exclude
argument_list|(
literal|"table"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|filters
operator|.
name|filter
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entityFilter
argument_list|(
literal|""
argument_list|,
literal|"aa"
argument_list|)
argument_list|,
name|filters
operator|.
name|filter
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"aa"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFiltersJoinFiltersWithNull
parameter_list|()
throws|throws
name|Exception
block|{
name|FiltersConfig
name|filters
init|=
operator|new
name|FiltersConfig
argument_list|(
name|eFilters
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|include
argument_list|(
literal|"table"
argument_list|)
argument_list|)
argument_list|,
name|eFilters
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|exclude
argument_list|(
literal|"table"
argument_list|)
argument_list|)
argument_list|,
name|eFilters
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"a"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|eFilters
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"a"
argument_list|)
argument_list|,
name|list
argument_list|(
name|include
argument_list|(
literal|"table"
argument_list|)
argument_list|,
name|exclude
argument_list|(
literal|"table"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|filters
operator|.
name|filter
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFiltersTopLevelTables
parameter_list|()
throws|throws
name|Exception
block|{
name|FiltersConfig
name|filters
init|=
operator|new
name|FiltersConfig
argument_list|(
name|eFilters
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|include
argument_list|(
literal|"TableName"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|eFilters
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|include
argument_list|(
literal|"TableName"
argument_list|)
argument_list|)
argument_list|,
name|filters
operator|.
name|filter
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"APP"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFiltersFor2Schemas
parameter_list|()
throws|throws
name|Exception
block|{
name|FiltersConfig
name|filters
init|=
operator|new
name|FiltersConfig
argument_list|(
name|eFilters
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|"schema_01"
argument_list|)
argument_list|,
name|include
argument_list|(
literal|"TableName_01"
argument_list|)
argument_list|)
argument_list|,
name|eFilters
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|"schema_02"
argument_list|)
argument_list|,
name|include
argument_list|(
literal|"TableName_01"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|eFilters
argument_list|(
name|path
argument_list|(
literal|null
argument_list|,
literal|"schema_01"
argument_list|)
argument_list|,
name|include
argument_list|(
literal|"TableName_01"
argument_list|)
argument_list|)
argument_list|,
name|filters
operator|.
name|filter
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"schema_01"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"In case we don't have filter that cover path we should return null filter "
argument_list|,
name|eFilters
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"app"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|,
name|filters
operator|.
name|filter
argument_list|(
name|path
argument_list|(
literal|""
argument_list|,
literal|"app"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

