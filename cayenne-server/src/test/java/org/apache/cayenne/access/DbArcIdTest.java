begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_class
specifier|public
class|class
name|DbArcIdTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testHashCode
parameter_list|()
block|{
name|DbArcId
name|id1
init|=
operator|new
name|DbArcId
argument_list|(
name|ObjectId
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"k"
argument_list|,
literal|"v"
argument_list|)
argument_list|,
operator|new
name|DbRelationship
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|h1
init|=
name|id1
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|h1
argument_list|,
name|id1
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|h1
argument_list|,
name|id1
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|DbArcId
name|id1_eq
init|=
operator|new
name|DbArcId
argument_list|(
name|ObjectId
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"k"
argument_list|,
literal|"v"
argument_list|)
argument_list|,
operator|new
name|DbRelationship
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|h1
argument_list|,
name|id1_eq
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|DbArcId
name|id2
init|=
operator|new
name|DbArcId
argument_list|(
name|ObjectId
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"k"
argument_list|,
literal|"v"
argument_list|)
argument_list|,
operator|new
name|DbRelationship
argument_list|(
literal|"r2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|h1
argument_list|,
name|id2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|DbArcId
name|id3
init|=
operator|new
name|DbArcId
argument_list|(
name|ObjectId
operator|.
name|of
argument_list|(
literal|"y"
argument_list|,
literal|"k"
argument_list|,
literal|"v"
argument_list|)
argument_list|,
operator|new
name|DbRelationship
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|h1
argument_list|,
name|id3
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|DbArcId
name|id1
init|=
operator|new
name|DbArcId
argument_list|(
name|ObjectId
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"k"
argument_list|,
literal|"v"
argument_list|)
argument_list|,
operator|new
name|DbRelationship
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id1
argument_list|,
name|id1
argument_list|)
expr_stmt|;
name|DbArcId
name|id1_eq
init|=
operator|new
name|DbArcId
argument_list|(
name|ObjectId
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"k"
argument_list|,
literal|"v"
argument_list|)
argument_list|,
operator|new
name|DbRelationship
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id1
argument_list|,
name|id1_eq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id1_eq
argument_list|,
name|id1
argument_list|)
expr_stmt|;
name|DbArcId
name|id2
init|=
operator|new
name|DbArcId
argument_list|(
name|ObjectId
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"k"
argument_list|,
literal|"v"
argument_list|)
argument_list|,
operator|new
name|DbRelationship
argument_list|(
literal|"r2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|id1
argument_list|,
name|id2
argument_list|)
expr_stmt|;
name|DbArcId
name|id3
init|=
operator|new
name|DbArcId
argument_list|(
name|ObjectId
operator|.
name|of
argument_list|(
literal|"y"
argument_list|,
literal|"k"
argument_list|,
literal|"v"
argument_list|)
argument_list|,
operator|new
name|DbRelationship
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|id1
argument_list|,
name|id3
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|id1
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

