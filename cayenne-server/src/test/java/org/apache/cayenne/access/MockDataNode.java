begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_class
specifier|public
class|class
name|MockDataNode
extends|extends
name|DataNode
block|{
specifier|protected
name|DataDomain
name|domain
decl_stmt|;
specifier|protected
name|DataNode
name|node
decl_stmt|;
comment|// mockup the actual results
specifier|protected
name|boolean
name|replaceResults
decl_stmt|;
specifier|protected
name|Map
name|results
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|protected
name|int
name|runCount
decl_stmt|;
specifier|public
specifier|static
name|MockDataNode
name|interceptNode
parameter_list|(
name|DataDomain
name|domain
parameter_list|,
name|DataNode
name|node
parameter_list|)
block|{
name|MockDataNode
name|mockNode
init|=
operator|new
name|MockDataNode
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|mockNode
operator|.
name|domain
operator|=
name|domain
expr_stmt|;
name|domain
operator|.
name|removeDataNode
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|domain
operator|.
name|addNode
argument_list|(
name|mockNode
argument_list|)
expr_stmt|;
return|return
name|mockNode
return|;
block|}
specifier|public
name|MockDataNode
parameter_list|(
name|DataNode
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
specifier|public
name|void
name|stopInterceptNode
parameter_list|()
block|{
if|if
condition|(
name|domain
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No domain set."
argument_list|)
throw|;
block|}
name|domain
operator|.
name|removeDataNode
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|domain
operator|.
name|addNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|runCount
operator|=
literal|0
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getRunCount
parameter_list|()
block|{
return|return
name|runCount
return|;
block|}
specifier|public
name|void
name|addExpectedResult
parameter_list|(
name|Query
name|query
parameter_list|,
name|List
name|result
parameter_list|)
block|{
name|replaceResults
operator|=
literal|true
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|query
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|performQueries
parameter_list|(
name|Collection
name|queries
parameter_list|,
name|OperationObserver
name|resultConsumer
parameter_list|)
block|{
name|runCount
operator|+=
name|queries
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|replaceResults
condition|)
block|{
name|initWithPresetResults
argument_list|(
name|queries
argument_list|,
name|resultConsumer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node
operator|.
name|performQueries
argument_list|(
name|queries
argument_list|,
name|resultConsumer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initWithPresetResults
parameter_list|(
name|Collection
name|queries
parameter_list|,
name|OperationObserver
name|resultConsumer
parameter_list|)
block|{
comment|// stick preset results to the consumer
name|Iterator
name|it
init|=
name|queries
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Query
name|query
init|=
operator|(
name|Query
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|resultConsumer
operator|.
name|nextRows
argument_list|(
name|query
argument_list|,
operator|(
name|List
operator|)
name|results
operator|.
name|get
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addDataMap
parameter_list|(
name|DataMap
name|map
parameter_list|)
block|{
name|node
operator|.
name|addDataMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|node
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DbAdapter
name|getAdapter
parameter_list|()
block|{
return|return
name|node
operator|.
name|getAdapter
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
name|getDataMaps
parameter_list|()
block|{
return|return
name|node
operator|.
name|getDataMaps
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataSource
name|getDataSource
parameter_list|()
block|{
return|return
name|node
operator|.
name|getDataSource
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDataSourceFactory
parameter_list|()
block|{
return|return
name|node
operator|.
name|getDataSourceFactory
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|EntityResolver
name|getEntityResolver
parameter_list|()
block|{
return|return
name|node
operator|.
name|getEntityResolver
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|node
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeDataMap
parameter_list|(
name|String
name|mapName
parameter_list|)
block|{
name|node
operator|.
name|removeDataMap
argument_list|(
name|mapName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAdapter
parameter_list|(
name|DbAdapter
name|adapter
parameter_list|)
block|{
name|node
operator|.
name|setAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDataMaps
parameter_list|(
name|Collection
name|dataMaps
parameter_list|)
block|{
name|node
operator|.
name|setDataMaps
argument_list|(
name|dataMaps
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDataSource
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
block|{
name|node
operator|.
name|setDataSource
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDataSourceFactory
parameter_list|(
name|String
name|dataSourceFactory
parameter_list|)
block|{
name|node
operator|.
name|setDataSourceFactory
argument_list|(
name|dataSourceFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setEntityResolver
parameter_list|(
name|EntityResolver
name|entityResolver
parameter_list|)
block|{
name|node
operator|.
name|setEntityResolver
argument_list|(
name|entityResolver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|node
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|node
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

