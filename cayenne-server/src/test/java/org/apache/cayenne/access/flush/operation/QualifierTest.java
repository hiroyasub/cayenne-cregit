begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistenceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|QualifierTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testScalarObjectIdQualifier
parameter_list|()
block|{
name|ObjectId
name|id
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"test"
argument_list|,
literal|"id"
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|Persistent
name|persistent
init|=
name|mockObject
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|DbRowOp
name|row
init|=
name|mockRow
argument_list|(
name|persistent
argument_list|)
decl_stmt|;
name|Qualifier
name|qualifier
init|=
operator|new
name|Qualifier
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|qualifierSnapshot
init|=
name|qualifier
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"id"
argument_list|,
literal|123
argument_list|)
argument_list|,
name|qualifierSnapshot
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|qualifier
operator|.
name|isUsingOptimisticLocking
argument_list|()
argument_list|)
expr_stmt|;
name|qualifierSnapshot
operator|=
name|qualifier
operator|.
name|getSnapshot
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"id"
argument_list|,
literal|123
argument_list|)
argument_list|,
name|qualifierSnapshot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapObjectIdQualifier
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|idMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|idMap
operator|.
name|put
argument_list|(
literal|"id1"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|idMap
operator|.
name|put
argument_list|(
literal|"id2"
argument_list|,
literal|321
argument_list|)
expr_stmt|;
name|ObjectId
name|id
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"test"
argument_list|,
name|idMap
argument_list|)
decl_stmt|;
name|Persistent
name|persistent
init|=
name|mockObject
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|DbRowOp
name|row
init|=
name|mockRow
argument_list|(
name|persistent
argument_list|)
decl_stmt|;
name|Qualifier
name|qualifier
init|=
operator|new
name|Qualifier
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|qualifierSnapshot
init|=
name|qualifier
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|idMap
argument_list|,
name|qualifierSnapshot
argument_list|)
expr_stmt|;
name|qualifierSnapshot
operator|=
name|qualifier
operator|.
name|getSnapshot
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|idMap
argument_list|,
name|qualifierSnapshot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAdditionalQualifier
parameter_list|()
block|{
name|ObjectId
name|id
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"test"
argument_list|,
literal|"id"
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|Persistent
name|persistent
init|=
name|mockObject
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|DbRowOp
name|row
init|=
name|mockRow
argument_list|(
name|persistent
argument_list|)
decl_stmt|;
name|Qualifier
name|qualifier
init|=
operator|new
name|Qualifier
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|qualifier
operator|.
name|addAdditionalQualifier
argument_list|(
operator|new
name|DbAttribute
argument_list|(
literal|"attr"
argument_list|)
argument_list|,
literal|42
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|qualifierSnapshot
init|=
name|qualifier
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedSnapshot
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedSnapshot
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|expectedSnapshot
operator|.
name|put
argument_list|(
literal|"attr"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSnapshot
argument_list|,
name|qualifierSnapshot
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qualifier
operator|.
name|isUsingOptimisticLocking
argument_list|()
argument_list|)
expr_stmt|;
name|qualifierSnapshot
operator|=
name|qualifier
operator|.
name|getSnapshot
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSnapshot
argument_list|,
name|qualifierSnapshot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOptimisticQualifier
parameter_list|()
block|{
name|ObjectId
name|id
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"test"
argument_list|,
literal|"id"
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|Persistent
name|persistent
init|=
name|mockObject
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|DbRowOp
name|row
init|=
name|mockRow
argument_list|(
name|persistent
argument_list|)
decl_stmt|;
name|Qualifier
name|qualifier
init|=
operator|new
name|Qualifier
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|qualifier
operator|.
name|addAdditionalQualifier
argument_list|(
operator|new
name|DbAttribute
argument_list|(
literal|"attr"
argument_list|)
argument_list|,
literal|42
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|qualifierSnapshot
init|=
name|qualifier
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedSnapshot
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedSnapshot
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|expectedSnapshot
operator|.
name|put
argument_list|(
literal|"attr"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSnapshot
argument_list|,
name|qualifierSnapshot
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qualifier
operator|.
name|isUsingOptimisticLocking
argument_list|()
argument_list|)
expr_stmt|;
name|qualifierSnapshot
operator|=
name|qualifier
operator|.
name|getSnapshot
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSnapshot
argument_list|,
name|qualifierSnapshot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSameBatch
parameter_list|()
block|{
name|ObjectId
name|id1
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"test"
argument_list|,
literal|"id"
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|Persistent
name|persistent1
init|=
name|mockObject
argument_list|(
name|id1
argument_list|)
decl_stmt|;
name|DbRowOp
name|row1
init|=
name|mockRow
argument_list|(
name|persistent1
argument_list|)
decl_stmt|;
name|Qualifier
name|qualifier1
init|=
operator|new
name|Qualifier
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|ObjectId
name|id2
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"test"
argument_list|,
literal|"id"
argument_list|,
literal|321
argument_list|)
decl_stmt|;
name|Persistent
name|persistent2
init|=
name|mockObject
argument_list|(
name|id2
argument_list|)
decl_stmt|;
name|DbRowOp
name|row2
init|=
name|mockRow
argument_list|(
name|persistent2
argument_list|)
decl_stmt|;
name|Qualifier
name|qualifier2
init|=
operator|new
name|Qualifier
argument_list|(
name|row2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|qualifier1
operator|.
name|isSameBatch
argument_list|(
name|qualifier2
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectId
name|id3
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"test"
argument_list|,
literal|"id"
argument_list|,
literal|321
argument_list|)
decl_stmt|;
name|Persistent
name|persistent3
init|=
name|mockObject
argument_list|(
name|id3
argument_list|)
decl_stmt|;
name|DbRowOp
name|row3
init|=
name|mockRow
argument_list|(
name|persistent3
argument_list|)
decl_stmt|;
name|Qualifier
name|qualifier3
init|=
operator|new
name|Qualifier
argument_list|(
name|row3
argument_list|)
decl_stmt|;
name|qualifier3
operator|.
name|addAdditionalQualifier
argument_list|(
operator|new
name|DbAttribute
argument_list|(
literal|"attr"
argument_list|)
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|qualifier1
operator|.
name|isSameBatch
argument_list|(
name|qualifier3
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DbRowOp
name|mockRow
parameter_list|(
name|Persistent
name|persistent
parameter_list|)
block|{
name|DbRowOp
name|row
init|=
name|mock
argument_list|(
name|DbRowOp
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjectId
name|objectId
init|=
name|persistent
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|row
operator|.
name|getChangeId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|objectId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|row
operator|.
name|getObject
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|persistent
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|row
operator|.
name|getEntity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockEntity
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|row
return|;
block|}
specifier|private
name|Persistent
name|mockObject
parameter_list|(
name|ObjectId
name|id
parameter_list|)
block|{
name|Persistent
name|persistent
init|=
name|mock
argument_list|(
name|Persistent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|persistent
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|persistent
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PersistenceState
operator|.
name|MODIFIED
argument_list|)
expr_stmt|;
return|return
name|persistent
return|;
block|}
specifier|private
name|DbEntity
name|mockEntity
parameter_list|()
block|{
name|DbAttribute
name|attribute1
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|attribute1
operator|.
name|setPrimaryKey
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DbAttribute
name|attribute2
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"attr"
argument_list|)
decl_stmt|;
name|DbEntity
name|testEntity
init|=
operator|new
name|DbEntity
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|testEntity
operator|.
name|addAttribute
argument_list|(
name|attribute1
argument_list|)
expr_stmt|;
name|testEntity
operator|.
name|addAttribute
argument_list|(
name|attribute2
argument_list|)
expr_stmt|;
return|return
name|testEntity
return|;
block|}
block|}
end_class

end_unit

