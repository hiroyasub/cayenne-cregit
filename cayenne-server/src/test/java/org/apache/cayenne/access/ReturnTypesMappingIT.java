begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|MappedSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|return_types
operator|.
name|ReturnTypesMap1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|return_types
operator|.
name|ReturnTypesMap2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|return_types
operator|.
name|ReturnTypesMapLobs1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|PostgresUnitDbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|UnitDbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_comment
comment|/**  * Test Types mapping for selected columns  */
end_comment

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|RETURN_TYPES_PROJECT
argument_list|)
specifier|public
class|class
name|ReturnTypesMappingIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|UnitDbAdapter
name|unitDbAdapter
decl_stmt|;
comment|/*      * TODO: olga: We need divided TYPES_MAPPING_TES2 to 2 schemas with lobs columns and not lobs columns      */
annotation|@
name|Test
specifier|public
name|void
name|testBIGINT
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|columnName
init|=
literal|"BIGINT_COLUMN"
decl_stmt|;
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Long
name|bigintValue
init|=
literal|5326457654783454355l
decl_stmt|;
name|test
operator|.
name|setBigintColumn
argument_list|(
name|bigintValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|unitDbAdapter
operator|.
name|onlyGenericNumberType
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|bigintValue
argument_list|)
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bigintValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBIGINT2
parameter_list|()
throws|throws
name|Exception
block|{
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Long
name|bigintValue
init|=
literal|5326457654783454355l
decl_stmt|;
name|test
operator|.
name|setBigintColumn
argument_list|(
name|bigintValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap1
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Long
name|columnValue
init|=
name|testRead
operator|.
name|getBigintColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bigintValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBINARY
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|String
name|columnName
init|=
literal|"BINARY_COLUMN"
decl_stmt|;
name|ReturnTypesMap2
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap2
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|binaryValue
init|=
block|{
literal|3
block|,
literal|4
block|,
literal|5
block|,
operator|-
literal|6
block|,
literal|7
block|,
literal|0
block|,
literal|2
block|,
literal|9
block|,
literal|45
block|,
literal|64
block|,
literal|3
block|,
literal|127
block|,
operator|-
literal|128
block|,
operator|-
literal|60
block|}
decl_stmt|;
name|test
operator|.
name|setBinaryColumn
argument_list|(
name|binaryValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|binaryValue
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|columnValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBINARY2
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|ReturnTypesMap2
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap2
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|binaryValue
init|=
block|{
literal|3
block|,
literal|4
block|,
literal|5
block|,
operator|-
literal|6
block|,
literal|7
block|,
literal|0
block|,
literal|2
block|,
literal|9
block|,
literal|45
block|,
literal|64
block|,
literal|3
block|,
literal|127
block|,
operator|-
literal|128
block|,
operator|-
literal|60
block|}
decl_stmt|;
name|test
operator|.
name|setBinaryColumn
argument_list|(
name|binaryValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap2
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap2
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|byte
index|[]
name|columnValue
init|=
name|testRead
operator|.
name|getBinaryColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|binaryValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBIT
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|columnName
init|=
literal|"BIT_COLUMN"
decl_stmt|;
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|bitValue
init|=
literal|true
decl_stmt|;
name|test
operator|.
name|setBitColumn
argument_list|(
name|bitValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Boolean
operator|.
name|class
operator|.
name|equals
argument_list|(
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
operator|||
name|Short
operator|.
name|class
operator|.
name|equals
argument_list|(
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
operator|||
name|Integer
operator|.
name|class
operator|.
name|equals
argument_list|(
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bitValue
operator|.
name|equals
argument_list|(
name|columnValue
argument_list|)
operator|||
operator|(
operator|(
name|Number
operator|)
name|columnValue
operator|)
operator|.
name|intValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBIT2
parameter_list|()
throws|throws
name|Exception
block|{
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|bitValue
init|=
literal|true
decl_stmt|;
name|test
operator|.
name|setBitColumn
argument_list|(
name|bitValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap1
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Boolean
name|columnValue
init|=
name|testRead
operator|.
name|getBitColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bitValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBLOB
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
literal|"In postresql blob_column has OID type, but in JAVA it converts into long not into byte."
argument_list|,
operator|!
operator|(
name|unitDbAdapter
operator|instanceof
name|PostgresUnitDbAdapter
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|String
name|columnName
init|=
literal|"BLOB_COLUMN"
decl_stmt|;
name|ReturnTypesMap2
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap2
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|blobValue
init|=
block|{
literal|3
block|,
literal|4
block|,
literal|5
block|,
operator|-
literal|6
block|,
literal|7
block|,
literal|0
block|,
literal|2
block|,
literal|9
block|,
literal|45
block|,
literal|64
block|,
literal|3
block|,
literal|127
block|,
operator|-
literal|128
block|,
operator|-
literal|60
block|}
decl_stmt|;
name|test
operator|.
name|setBlobColumn
argument_list|(
name|blobValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|blobValue
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|columnValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBLOB2
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|ReturnTypesMap2
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap2
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|blobValue
init|=
block|{
literal|3
block|,
literal|4
block|,
literal|5
block|,
operator|-
literal|6
block|,
literal|7
block|,
literal|0
block|,
literal|2
block|,
literal|9
block|,
literal|45
block|,
literal|64
block|,
literal|3
block|,
literal|127
block|,
operator|-
literal|128
block|,
operator|-
literal|60
block|}
decl_stmt|;
name|test
operator|.
name|setBlobColumn
argument_list|(
name|blobValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap2
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap2
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|byte
index|[]
name|columnValue
init|=
name|testRead
operator|.
name|getBlobColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|blobValue
argument_list|,
name|columnValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBOOLEAN
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|columnName
init|=
literal|"BOOLEAN_COLUMN"
decl_stmt|;
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|booleanValue
init|=
literal|true
decl_stmt|;
name|test
operator|.
name|setBooleanColumn
argument_list|(
name|booleanValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Boolean
operator|.
name|class
operator|.
name|equals
argument_list|(
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
operator|||
name|Short
operator|.
name|class
operator|.
name|equals
argument_list|(
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
operator|||
name|Integer
operator|.
name|class
operator|.
name|equals
argument_list|(
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|booleanValue
operator|.
name|equals
argument_list|(
name|columnValue
argument_list|)
operator|||
operator|(
operator|(
name|Number
operator|)
name|columnValue
operator|)
operator|.
name|intValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBOOLEAN2
parameter_list|()
throws|throws
name|Exception
block|{
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|booleanValue
init|=
literal|true
decl_stmt|;
name|test
operator|.
name|setBooleanColumn
argument_list|(
name|booleanValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap1
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Boolean
name|columnValue
init|=
name|testRead
operator|.
name|getBooleanColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|booleanValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCHAR
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|columnName
init|=
literal|"CHAR_COLUMN"
decl_stmt|;
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|charValue
init|=
literal|"Char string for tests!"
decl_stmt|;
name|test
operator|.
name|setCharColumn
argument_list|(
name|charValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|charValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNCHAR
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|columnName
init|=
literal|"NCHAR_COLUMN"
decl_stmt|;
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|charValue
init|=
literal|"Ø¯Ø±Ø®ØªâÙØ§Û Ø¬Ø³ØªØ¬ÙÛ ÙØªÙØ§Ø²ÙØ ÙÛØ§Ø²Û ÙØ¯Ø§Ø±Ø¯ Ú©Ù Ø¨Ù ØµÙØ±Øª!"
decl_stmt|;
name|test
operator|.
name|setNcharColumn
argument_list|(
name|charValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|charValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCHAR2
parameter_list|()
throws|throws
name|Exception
block|{
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|charValue
init|=
literal|"Char string for tests!"
decl_stmt|;
name|test
operator|.
name|setCharColumn
argument_list|(
name|charValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap1
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|String
name|columnValue
init|=
name|testRead
operator|.
name|getCharColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|charValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCLOB
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|String
name|columnName
init|=
literal|"CLOB_COLUMN"
decl_stmt|;
name|ReturnTypesMapLobs1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMapLobs1
operator|.
name|class
argument_list|)
decl_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"CLOB very large string for tests!!!!\n"
argument_list|)
expr_stmt|;
block|}
name|String
name|clobValue
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|test
operator|.
name|setClobColumn
argument_list|(
name|clobValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesLobsMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnValue
operator|==
literal|null
operator|&&
name|testRead
operator|.
name|containsKey
argument_list|(
name|columnName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|columnValue
operator|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clobValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNCLOB
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|String
name|columnName
init|=
literal|"NCLOB_COLUMN"
decl_stmt|;
name|ReturnTypesMapLobs1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMapLobs1
operator|.
name|class
argument_list|)
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"Ø±ÙØ¯Ø§ÙÙ Ø¨ÛØ± Ù Ø¯Ø¯ ÙÚ©âÚ©Ø±ÙÛØª Ø¯Ø±Ø®Øª Ø¨Û Ø±Ø§ Ø²ÙØ§ÙÛ Ú©Ù Ø¯Ø± Ø´Ø±Ú©Øª Ø¨ÙØ¦ÛÙÚ¯ [Û±]Ø ÙØ´ØºÙÙ Ø¨Ù Ú©Ø§Ø± Ø¨ÙØ¯ÙØ¯ Ø§Ø¨Ø¯Ø§Ø¹ ÙÙÙØ¯ÙØ¯Ø Ø§ÙØ§ Ø­Ø±Ù B ÙØ§ÙØ¹Ø§Ù\" Ø§Ø² Ú©Ø¬Ø§ Ø¢ÙØ¯ÙØ Ø¯Ø§Ú¯ÙØ§Ø³ Ú©Ø§ÙØ± ÛÚ© Ø³Ø±Û Ø§Ø² Ø§Ø­ØªÙØ§ÙØ§Øª Ø±Ø§ Ù¾ÛØ´ÙÙØ§Ø¯ Ú©Ø±Ø¯:\n"
operator|+
literal|"\"Balanced,\" \"Broad,\" ÛØ§ \"Bushy\" ÙÙÚ©Ù Ø§Ø³Øª Ø§Ø³ØªÙØ§Ø¯Ù Ø´Ø¯ÙâØ¨Ø§Ø´ÙØ¯ [ÚÙÙ ÙÙÙÙ Ø¨Ø±Ú¯âÙØ§ Ø¯Ø± ÛÚ© Ø³Ø·Ø­ ÙØ±Ø§Ø± Ø¯Ø§Ø±ÙØ¯]. Ø¯ÛÚ¯Ø±Ø§Ù Ø§Ø¸ÙØ§Ø± Ø¯Ø§Ø´ØªÙØ¯ Ú©Ù Ø­Ø±Ù \"B\" Ø§Ø² Ú©ÙÙÙÙ Ø¨ÙØ¦ÛÙÚ¯ Ú¯Ø±ÙØªÙ Ø´Ø¯Ù Ø§Ø³Øª [Ø¨Ù Ø§ÛÙ Ø¯ÙÛÙ Ú©Ù Ù¾Ø¯ÛØ¯Ø¢ÙØ±Ø¯ÙØ¯Ù Ø¯Ø±Ø³Ø§Ù 1972 Ø¯Ø± Ø¢Ø²ÙØ§ÛØ´Ú¯Ø§ÙâÙØ§Û ØªØ­ÙÛÙØ§ØªÛ Ø¹ÙÙÛ Ø´Ø±Ú©Øª Ø¨ÙØ¦ÛÙÚ¯ Ú©Ø§Ø± ÙÛâÚ©Ø±Ø¯]. Ø¨Ø§ Ø§ÛÙ ÙØ¬ÙØ¯ Ù¾ÙØ¯Ø§Ø´ØªÙ Ø¯Ø±Ø®Øª Ø¨Û Ø¨Ù Ø¹ÙÙØ§Ù Ø¯Ø±Ø®Øª \"Ø¨ÙÛÙØ±\" ÙÛØ² Ø¯Ø±Ø®ÙØ± Ø§Ø³Øª.[Û²]"
argument_list|)
expr_stmt|;
block|}
name|String
name|clobValue
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|test
operator|.
name|setNclobColumn
argument_list|(
name|clobValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesLobsMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnValue
operator|==
literal|null
operator|&&
name|testRead
operator|.
name|containsKey
argument_list|(
name|columnName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|columnValue
operator|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clobValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCLOB2
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|ReturnTypesMapLobs1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMapLobs1
operator|.
name|class
argument_list|)
decl_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"CLOB very large string for tests!!!!\n"
argument_list|)
expr_stmt|;
block|}
name|String
name|clobValue
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|test
operator|.
name|setClobColumn
argument_list|(
name|clobValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMapLobs1
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMapLobs1
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|String
name|columnValue
init|=
name|testRead
operator|.
name|getClobColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clobValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDATE
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|columnName
init|=
literal|"DATE_COLUMN"
decl_stmt|;
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|2002
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Date
name|dateValue
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|test
operator|.
name|setDateColumn
argument_list|(
name|dateValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Date
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dateValue
operator|.
name|toString
argument_list|()
argument_list|,
name|columnValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDATE2
parameter_list|()
throws|throws
name|Exception
block|{
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|2002
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Date
name|dateValue
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|test
operator|.
name|setDateColumn
argument_list|(
name|dateValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap1
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Date
name|columnValue
init|=
name|testRead
operator|.
name|getDateColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Date
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dateValue
operator|.
name|toString
argument_list|()
argument_list|,
name|columnValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDECIMAL
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|columnName
init|=
literal|"DECIMAL_COLUMN"
decl_stmt|;
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|BigDecimal
name|decimalValue
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"578438.57843"
argument_list|)
decl_stmt|;
name|test
operator|.
name|setDecimalColumn
argument_list|(
name|decimalValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|decimalValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDECIMAL2
parameter_list|()
throws|throws
name|Exception
block|{
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|BigDecimal
name|decimalValue
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"578438.57843"
argument_list|)
decl_stmt|;
name|test
operator|.
name|setDecimalColumn
argument_list|(
name|decimalValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap1
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|BigDecimal
name|columnValue
init|=
name|testRead
operator|.
name|getDecimalColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|decimalValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDOUBLE
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|columnName
init|=
literal|"DOUBLE_COLUMN"
decl_stmt|;
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Double
name|doubleValue
init|=
literal|3298.4349783d
decl_stmt|;
name|test
operator|.
name|setDoubleColumn
argument_list|(
name|doubleValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|unitDbAdapter
operator|.
name|onlyGenericNumberType
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|doubleValue
argument_list|)
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|doubleValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDOUBLE2
parameter_list|()
throws|throws
name|Exception
block|{
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Double
name|doubleValue
init|=
literal|3298.4349783d
decl_stmt|;
name|test
operator|.
name|setDoubleColumn
argument_list|(
name|doubleValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap1
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Double
name|columnValue
init|=
name|testRead
operator|.
name|getDoubleColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|doubleValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFLOAT
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|columnName
init|=
literal|"FLOAT_COLUMN"
decl_stmt|;
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Float
name|floatValue
init|=
literal|375.437f
decl_stmt|;
name|test
operator|.
name|setFloatColumn
argument_list|(
name|floatValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|unitDbAdapter
operator|.
name|onlyGenericNumberType
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|Float
operator|.
name|class
operator|.
name|equals
argument_list|(
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
operator|||
name|Double
operator|.
name|class
operator|.
name|equals
argument_list|(
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|floatValue
operator|.
name|floatValue
argument_list|()
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|columnValue
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFLOAT2
parameter_list|()
throws|throws
name|Exception
block|{
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Float
name|floatValue
init|=
literal|375.437f
decl_stmt|;
name|test
operator|.
name|setFloatColumn
argument_list|(
name|floatValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap1
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Float
name|columnValue
init|=
name|testRead
operator|.
name|getFloatColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|floatValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testINTEGER
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|columnName
init|=
literal|"INTEGER_COLUMN"
decl_stmt|;
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Integer
name|integerValue
init|=
literal|54235
decl_stmt|;
name|test
operator|.
name|setIntegerColumn
argument_list|(
name|integerValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|integerValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testINTEGER2
parameter_list|()
throws|throws
name|Exception
block|{
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Integer
name|integerValue
init|=
literal|54235
decl_stmt|;
name|test
operator|.
name|setIntegerColumn
argument_list|(
name|integerValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap1
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Integer
name|columnValue
init|=
name|testRead
operator|.
name|getIntegerColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|integerValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLONGVARBINARY
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|String
name|columnName
init|=
literal|"LONGVARBINARY_COLUMN"
decl_stmt|;
name|ReturnTypesMap2
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap2
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|longvarbinaryValue
init|=
block|{
literal|3
block|,
literal|4
block|,
literal|5
block|,
operator|-
literal|6
block|,
literal|7
block|,
literal|0
block|,
literal|2
block|,
literal|9
block|,
literal|45
block|,
literal|64
block|,
literal|3
block|,
literal|127
block|,
operator|-
literal|128
block|,
operator|-
literal|60
block|}
decl_stmt|;
name|test
operator|.
name|setLongvarbinaryColumn
argument_list|(
name|longvarbinaryValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|longvarbinaryValue
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|columnValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLONGVARBINARY2
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|ReturnTypesMap2
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap2
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|longvarbinaryValue
init|=
block|{
literal|3
block|,
literal|4
block|,
literal|5
block|,
operator|-
literal|6
block|,
literal|7
block|,
literal|0
block|,
literal|2
block|,
literal|9
block|,
literal|45
block|,
literal|64
block|,
literal|3
block|,
literal|127
block|,
operator|-
literal|128
block|,
operator|-
literal|60
block|}
decl_stmt|;
name|test
operator|.
name|setLongvarbinaryColumn
argument_list|(
name|longvarbinaryValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap2
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap2
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|byte
index|[]
name|columnValue
init|=
name|testRead
operator|.
name|getLongvarbinaryColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|longvarbinaryValue
argument_list|,
name|columnValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLONGVARCHAR
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|columnName
init|=
literal|"LONGVARCHAR_COLUMN"
decl_stmt|;
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"LONGVARCHAR large string for tests!!!!\n"
argument_list|)
expr_stmt|;
block|}
name|String
name|longvarcharValue
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|test
operator|.
name|setLongvarcharColumn
argument_list|(
name|longvarcharValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|longvarcharValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLONGNVARCHAR
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|columnName
init|=
literal|"LONGNVARCHAR_COLUMN"
decl_stmt|;
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"Û ÙØªÙØ§Ø²ÙØ ÙÛØ§Ø²Û ÙØ¯Ø§Ø±Ø¯ Ú©Ù Ø¨ large string for tests!!!!\n"
argument_list|)
expr_stmt|;
block|}
name|String
name|longnvarcharValue
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|test
operator|.
name|setLongnvarcharColumn
argument_list|(
name|longnvarcharValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|longnvarcharValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLONGVARCHAR2
parameter_list|()
throws|throws
name|Exception
block|{
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"LONGVARCHAR large string for tests!!!!\n"
argument_list|)
expr_stmt|;
block|}
name|String
name|longvarcharValue
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|test
operator|.
name|setLongvarcharColumn
argument_list|(
name|longvarcharValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap1
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|String
name|columnValue
init|=
name|testRead
operator|.
name|getLongvarcharColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|longvarcharValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNUMERIC
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|columnName
init|=
literal|"NUMERIC_COLUMN"
decl_stmt|;
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|BigDecimal
name|numericValue
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"578438.57843"
argument_list|)
decl_stmt|;
name|test
operator|.
name|setNumericColumn
argument_list|(
name|numericValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numericValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNUMERIC2
parameter_list|()
throws|throws
name|Exception
block|{
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|BigDecimal
name|numericValue
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"578438.57843"
argument_list|)
decl_stmt|;
name|test
operator|.
name|setNumericColumn
argument_list|(
name|numericValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap1
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|BigDecimal
name|columnValue
init|=
name|testRead
operator|.
name|getNumericColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numericValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testREAL
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|columnName
init|=
literal|"REAL_COLUMN"
decl_stmt|;
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Float
name|realValue
init|=
literal|5788.57843f
decl_stmt|;
name|test
operator|.
name|setRealColumn
argument_list|(
name|realValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
comment|// MySQL can treat REAL as either DOUBLE or FLOAT depending on the
comment|// engine settings
if|if
condition|(
name|unitDbAdapter
operator|.
name|onlyGenericNumberType
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|realAsDouble
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
name|realValue
argument_list|)
argument_list|,
operator|(
name|Double
operator|)
name|columnValue
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|Float
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|realValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testREAL2
parameter_list|()
throws|throws
name|Exception
block|{
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Float
name|realValue
init|=
literal|5788.57843f
decl_stmt|;
name|test
operator|.
name|setRealColumn
argument_list|(
name|realValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap1
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Float
name|columnValue
init|=
name|testRead
operator|.
name|getRealColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|realValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSMALLINT
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|columnName
init|=
literal|"SMALLINT_COLUMN"
decl_stmt|;
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Short
name|smallintValue
init|=
literal|32564
decl_stmt|;
name|Integer
name|intValue
init|=
literal|32564
decl_stmt|;
name|test
operator|.
name|setSmallintColumn
argument_list|(
name|smallintValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|unitDbAdapter
operator|.
name|onlyGenericNumberType
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|intValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|smallintValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSMALLINT2
parameter_list|()
throws|throws
name|Exception
block|{
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Short
name|smallintValue
init|=
literal|32564
decl_stmt|;
name|test
operator|.
name|setSmallintColumn
argument_list|(
name|smallintValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap1
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Short
name|columnValue
init|=
name|testRead
operator|.
name|getSmallintColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|smallintValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTIME
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|columnName
init|=
literal|"TIME_COLUMN"
decl_stmt|;
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|2003
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|Date
name|timeValue
init|=
operator|new
name|Time
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|test
operator|.
name|setTimeColumn
argument_list|(
name|timeValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Date
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|timeValue
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Time
argument_list|(
operator|(
operator|(
name|Date
operator|)
name|columnValue
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTIME2
parameter_list|()
throws|throws
name|Exception
block|{
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|2003
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|Date
name|timeValue
init|=
operator|new
name|Time
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|test
operator|.
name|setTimeColumn
argument_list|(
name|timeValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap1
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Date
name|columnValue
init|=
name|testRead
operator|.
name|getTimeColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Date
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|timeValue
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Time
argument_list|(
name|columnValue
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTIMESTAMP
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|columnName
init|=
literal|"TIMESTAMP_COLUMN"
decl_stmt|;
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Date
name|timestampValue
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|test
operator|.
name|setTimestampColumn
argument_list|(
name|timestampValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Date
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// some DB's, noteably MySQL, strip the milliseconds from timestamps,
comment|// so comparing within 1 second precision
name|long
name|delta
init|=
name|timestampValue
operator|.
name|getTime
argument_list|()
operator|-
operator|(
operator|(
name|Date
operator|)
name|columnValue
operator|)
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|delta
operator|<
literal|1000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTIMESTAMP2
parameter_list|()
throws|throws
name|Exception
block|{
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Date
name|timestampValue
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|test
operator|.
name|setTimestampColumn
argument_list|(
name|timestampValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap1
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Date
name|columnValue
init|=
name|testRead
operator|.
name|getTimestampColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Date
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// some DB's, noteably MySQL, strip the milliseconds from timestamps,
comment|// so comparing within 1 second precision
name|long
name|delta
init|=
name|timestampValue
operator|.
name|getTime
argument_list|()
operator|-
operator|(
operator|(
name|Date
operator|)
name|columnValue
operator|)
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|delta
operator|<
literal|1000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTINYINT
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|columnName
init|=
literal|"TINYINT_COLUMN"
decl_stmt|;
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Byte
name|tinyintValue
init|=
literal|89
decl_stmt|;
name|Integer
name|intValue
init|=
literal|89
decl_stmt|;
name|test
operator|.
name|setTinyintColumn
argument_list|(
name|tinyintValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|unitDbAdapter
operator|.
name|onlyGenericNumberType
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|tinyintValue
operator|.
name|intValue
argument_list|()
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|columnValue
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTINYINT2
parameter_list|()
throws|throws
name|Exception
block|{
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|Byte
name|tinyintValue
init|=
literal|89
decl_stmt|;
name|test
operator|.
name|setTinyintColumn
argument_list|(
name|tinyintValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap1
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Byte
name|columnValue
init|=
name|testRead
operator|.
name|getTinyintColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tinyintValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVARBINARY
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|String
name|columnName
init|=
literal|"VARBINARY_COLUMN"
decl_stmt|;
name|ReturnTypesMap2
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap2
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|varbinaryValue
init|=
block|{
literal|3
block|,
literal|4
block|,
literal|5
block|,
operator|-
literal|6
block|,
literal|7
block|,
literal|0
block|,
literal|2
block|,
literal|9
block|,
literal|45
block|,
literal|64
block|,
literal|3
block|,
literal|127
block|,
operator|-
literal|128
block|,
operator|-
literal|60
block|}
decl_stmt|;
name|test
operator|.
name|setVarbinaryColumn
argument_list|(
name|varbinaryValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap2"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|varbinaryValue
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|columnValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVARBINARY2
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|ReturnTypesMap2
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap2
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|varbinaryValue
init|=
block|{
literal|3
block|,
literal|4
block|,
literal|5
block|,
operator|-
literal|6
block|,
literal|7
block|,
literal|0
block|,
literal|2
block|,
literal|9
block|,
literal|45
block|,
literal|64
block|,
literal|3
block|,
literal|127
block|,
operator|-
literal|128
block|,
operator|-
literal|60
block|}
decl_stmt|;
name|test
operator|.
name|setVarbinaryColumn
argument_list|(
name|varbinaryValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap2
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap2
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|byte
index|[]
name|columnValue
init|=
name|testRead
operator|.
name|getVarbinaryColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|varbinaryValue
argument_list|,
name|columnValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVARCHAR
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|columnName
init|=
literal|"VARCHAR_COLUMN"
decl_stmt|;
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|varcharValue
init|=
literal|"VARChar string for tests!"
decl_stmt|;
name|test
operator|.
name|setVarcharColumn
argument_list|(
name|varcharValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|varcharValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNVARCHAR
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|columnName
init|=
literal|"NVARCHAR_COLUMN"
decl_stmt|;
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|varcharValue
init|=
literal|"Û ÙØªÙØ§Ø²ÙØ ÙÛØ§Ø²Û ÙØ¯Ø§Ø±Ø¯ Ú©Ù Ø¨"
decl_stmt|;
name|test
operator|.
name|setNvarcharColumn
argument_list|(
name|varcharValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|DataRow
name|testRead
init|=
operator|(
name|DataRow
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|MappedSelect
operator|.
name|query
argument_list|(
literal|"SelectReturnTypesMap1"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|columnValue
init|=
name|testRead
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|varcharValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVARCHAR2
parameter_list|()
throws|throws
name|Exception
block|{
name|ReturnTypesMap1
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|varcharValue
init|=
literal|"VARChar string for tests!"
decl_stmt|;
name|test
operator|.
name|setVarcharColumn
argument_list|(
name|varcharValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|ReturnTypesMap1
name|testRead
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ReturnTypesMap1
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|String
name|columnValue
init|=
name|testRead
operator|.
name|getVarcharColumn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columnValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|columnValue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|varcharValue
argument_list|,
name|columnValue
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

