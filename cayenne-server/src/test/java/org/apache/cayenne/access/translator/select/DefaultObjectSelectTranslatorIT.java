begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|DefaultObjectSelectTranslatorIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Inject
name|DbAdapter
name|adapter
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|simpleSql
parameter_list|()
block|{
name|ObjectSelect
argument_list|<
name|Artist
argument_list|>
name|select
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|DefaultSelectTranslator
name|translator
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|select
argument_list|,
name|adapter
argument_list|,
name|context
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|translator
operator|.
name|getSql
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|contains
argument_list|(
literal|"t0.ARTIST_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|contains
argument_list|(
literal|"t0.DATE_OF_BIRTH"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|contains
argument_list|(
literal|"t0.ARTIST_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|indexOf
argument_list|(
literal|"FROM ARTIST t0"
argument_list|)
operator|>
name|sql
operator|.
name|indexOf
argument_list|(
literal|"t0.ARTIST_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|translator
operator|.
name|getBindings
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|translator
operator|.
name|getResultColumns
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ARTIST_NAME"
argument_list|,
name|translator
operator|.
name|getResultColumns
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DATE_OF_BIRTH"
argument_list|,
name|translator
operator|.
name|getResultColumns
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ARTIST_ID"
argument_list|,
name|translator
operator|.
name|getResultColumns
argument_list|()
index|[
literal|2
index|]
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|translator
operator|.
name|hasJoins
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|translator
operator|.
name|isSuppressingDistinct
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|selectWithComplexWhere
parameter_list|()
block|{
name|ObjectSelect
argument_list|<
name|Artist
argument_list|>
name|select
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|eq
argument_list|(
literal|"artist"
argument_list|)
operator|.
name|andExp
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
operator|.
name|eq
argument_list|(
literal|"painting"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|DefaultSelectTranslator
name|translator
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|select
argument_list|,
name|adapter
argument_list|,
name|context
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|translator
operator|.
name|getSql
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|startsWith
argument_list|(
literal|"SELECT DISTINCT"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|contains
argument_list|(
literal|"t0.ARTIST_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|contains
argument_list|(
literal|"t0.DATE_OF_BIRTH"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|contains
argument_list|(
literal|"t0.ARTIST_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|indexOf
argument_list|(
literal|"FROM ARTIST t0"
argument_list|)
operator|>
name|sql
operator|.
name|indexOf
argument_list|(
literal|"t0.ARTIST_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|indexOf
argument_list|(
literal|"JOIN PAINTING t1"
argument_list|)
operator|>
name|sql
operator|.
name|indexOf
argument_list|(
literal|"FROM ARTIST t0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|indexOf
argument_list|(
literal|"WHERE"
argument_list|)
operator|>
name|sql
operator|.
name|indexOf
argument_list|(
literal|"JOIN PAINTING t1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|translator
operator|.
name|getBindings
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ARTIST_NAME"
argument_list|,
name|translator
operator|.
name|getBindings
argument_list|()
index|[
literal|0
index|]
operator|.
name|getAttribute
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"PAINTING_TITLE"
argument_list|,
name|translator
operator|.
name|getBindings
argument_list|()
index|[
literal|1
index|]
operator|.
name|getAttribute
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|translator
operator|.
name|getResultColumns
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ARTIST_NAME"
argument_list|,
name|translator
operator|.
name|getResultColumns
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DATE_OF_BIRTH"
argument_list|,
name|translator
operator|.
name|getResultColumns
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ARTIST_ID"
argument_list|,
name|translator
operator|.
name|getResultColumns
argument_list|()
index|[
literal|2
index|]
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|translator
operator|.
name|hasJoins
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|translator
operator|.
name|isSuppressingDistinct
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|selectWithJointPrefetch
parameter_list|()
block|{
name|ObjectSelect
argument_list|<
name|Painting
argument_list|>
name|select
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Painting
operator|.
name|TO_ARTIST
operator|.
name|joint
argument_list|()
argument_list|)
decl_stmt|;
name|DefaultSelectTranslator
name|translator
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|select
argument_list|,
name|adapter
argument_list|,
name|context
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|translator
operator|.
name|getSql
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|contains
argument_list|(
literal|"t0.ESTIMATED_PRICE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|contains
argument_list|(
literal|"t0.PAINTING_DESCRIPTION"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|contains
argument_list|(
literal|"t0.PAINTING_TITLE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|contains
argument_list|(
literal|"t0.ARTIST_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|contains
argument_list|(
literal|"t0.GALLERY_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|contains
argument_list|(
literal|"t0.PAINTING_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|contains
argument_list|(
literal|"t1.ARTIST_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|contains
argument_list|(
literal|"t1.DATE_OF_BIRTH"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|contains
argument_list|(
literal|"t1.ARTIST_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|indexOf
argument_list|(
literal|"FROM PAINTING t0"
argument_list|)
operator|>
name|sql
operator|.
name|indexOf
argument_list|(
literal|"t1.ARTIST_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|indexOf
argument_list|(
literal|"LEFT JOIN ARTIST t1"
argument_list|)
operator|>
name|sql
operator|.
name|indexOf
argument_list|(
literal|"FROM PAINTING t0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|translator
operator|.
name|getBindings
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|translator
operator|.
name|getResultColumns
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ESTIMATED_PRICE"
argument_list|,
name|translator
operator|.
name|getResultColumns
argument_list|()
index|[
literal|0
index|]
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"PAINTING_DESCRIPTION"
argument_list|,
name|translator
operator|.
name|getResultColumns
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"PAINTING_TITLE"
argument_list|,
name|translator
operator|.
name|getResultColumns
argument_list|()
index|[
literal|2
index|]
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ARTIST_ID"
argument_list|,
name|translator
operator|.
name|getResultColumns
argument_list|()
index|[
literal|3
index|]
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"GALLERY_ID"
argument_list|,
name|translator
operator|.
name|getResultColumns
argument_list|()
index|[
literal|4
index|]
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"PAINTING_ID"
argument_list|,
name|translator
operator|.
name|getResultColumns
argument_list|()
index|[
literal|5
index|]
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"toArtist.ARTIST_ID"
argument_list|,
name|translator
operator|.
name|getResultColumns
argument_list|()
index|[
literal|6
index|]
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"toArtist.DATE_OF_BIRTH"
argument_list|,
name|translator
operator|.
name|getResultColumns
argument_list|()
index|[
literal|7
index|]
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"toArtist.ARTIST_NAME"
argument_list|,
name|translator
operator|.
name|getResultColumns
argument_list|()
index|[
literal|8
index|]
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|translator
operator|.
name|hasJoins
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|translator
operator|.
name|isSuppressingDistinct
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

