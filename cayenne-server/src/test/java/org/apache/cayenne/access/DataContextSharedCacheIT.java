begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistenceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|util
operator|.
name|ServerCaseSyncModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|parallel
operator|.
name|ParallelTestContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ExtraModules
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|util
operator|.
name|SQLTemplateCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test suite for testing behavior of multiple DataContexts that share the same underlying  * DataDomain.  */
end_comment

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|TESTMAP_PROJECT
argument_list|)
annotation|@
name|ExtraModules
argument_list|(
name|ServerCaseSyncModule
operator|.
name|class
argument_list|)
specifier|public
class|class
name|DataContextSharedCacheIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DataContext
name|context1
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|SQLTemplateCustomizer
name|sqlTemplateCustomizer
decl_stmt|;
specifier|private
name|Artist
name|artist
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// prepare a single artist record
name|artist
operator|=
operator|(
name|Artist
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Artist"
argument_list|)
expr_stmt|;
name|artist
operator|.
name|setArtistName
argument_list|(
literal|"version1"
argument_list|)
expr_stmt|;
name|artist
operator|.
name|setDateOfBirth
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test case to prove that refreshing snapshots as a result of the database fetch will      * be propagated across DataContexts.      */
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotChangePropagationOnSelect
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|originalName
init|=
name|artist
operator|.
name|getArtistName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|newName
init|=
literal|"version2"
decl_stmt|;
comment|// update artist using raw SQL
name|SQLTemplate
name|query
init|=
name|sqlTemplateCustomizer
operator|.
name|createSQLTemplate
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
literal|"UPDATE ARTIST SET ARTIST_NAME = #bind($newName) "
operator|+
literal|"WHERE ARTIST_NAME = #bind($oldName)"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"newName"
argument_list|,
name|newName
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"oldName"
argument_list|,
name|originalName
argument_list|)
expr_stmt|;
name|query
operator|.
name|setParams
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|context
operator|.
name|performNonSelectingQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
comment|// fetch updated artist into the new context, and see if the original
comment|// one gets updated
name|List
argument_list|<
name|Artist
argument_list|>
name|artists
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|eq
argument_list|(
name|newName
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Artist
name|altArtist
init|=
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// check underlying cache
name|DataRow
name|freshSnapshot
init|=
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|altArtist
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|freshSnapshot
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newName
argument_list|,
name|freshSnapshot
operator|.
name|get
argument_list|(
literal|"ARTIST_NAME"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check both artists
name|assertEquals
argument_list|(
name|newName
argument_list|,
name|altArtist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|ParallelTestContainer
name|helper
init|=
operator|new
name|ParallelTestContainer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|assertResult
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"Peer object state wasn't refreshed on fetch"
argument_list|,
name|newName
argument_list|,
name|artist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|runTest
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case to prove that changes made to an object in one ObjectStore and committed      * to the database will be reflected in the peer ObjectStore using the same      * DataRowCache.      */
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotChangePropagation
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|originalName
init|=
name|artist
operator|.
name|getArtistName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|newName
init|=
literal|"version2"
decl_stmt|;
comment|// make sure we have a fully resolved copy of an artist object
comment|// in the second context
specifier|final
name|Artist
name|altArtist
init|=
name|context1
operator|.
name|localObject
argument_list|(
name|artist
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|altArtist
operator|==
name|artist
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalName
argument_list|,
name|altArtist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|altArtist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update Artist
name|artist
operator|.
name|setArtistName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
comment|// no changes propagated till commit...
name|assertEquals
argument_list|(
name|originalName
argument_list|,
name|altArtist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// check underlying cache
name|DataRow
name|freshSnapshot
init|=
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|altArtist
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newName
argument_list|,
name|freshSnapshot
operator|.
name|get
argument_list|(
literal|"ARTIST_NAME"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check peer artist
name|ParallelTestContainer
name|helper
init|=
operator|new
name|ParallelTestContainer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|assertResult
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|newName
argument_list|,
name|altArtist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|runTest
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case to prove that changes made to an object in one ObjectStore and committed      * to the database will be correctly merged in the peer ObjectStore using the same      * DataRowCache. E.g. modified objects will be merged so that no new changes are lost.      */
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotChangePropagationToModifiedObjects
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|originalName
init|=
name|artist
operator|.
name|getArtistName
argument_list|()
decl_stmt|;
name|Date
name|originalDate
init|=
name|artist
operator|.
name|getDateOfBirth
argument_list|()
decl_stmt|;
name|String
name|newName
init|=
literal|"version2"
decl_stmt|;
specifier|final
name|Date
name|newDate
init|=
operator|new
name|Date
argument_list|(
name|originalDate
operator|.
name|getTime
argument_list|()
operator|-
literal|10000
argument_list|)
decl_stmt|;
specifier|final
name|String
name|newAltName
init|=
literal|"version3"
decl_stmt|;
comment|// make sure we have a fully resolved copy of an artist object
comment|// in the second context
specifier|final
name|Artist
name|altArtist
init|=
name|context1
operator|.
name|localObject
argument_list|(
name|artist
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|altArtist
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|altArtist
operator|==
name|artist
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalName
argument_list|,
name|altArtist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|altArtist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update Artist peers independently
name|artist
operator|.
name|setArtistName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|artist
operator|.
name|setDateOfBirth
argument_list|(
name|newDate
argument_list|)
expr_stmt|;
name|altArtist
operator|.
name|setArtistName
argument_list|(
name|newAltName
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// check underlying cache
name|DataRow
name|freshSnapshot
init|=
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|altArtist
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newName
argument_list|,
name|freshSnapshot
operator|.
name|get
argument_list|(
literal|"ARTIST_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newDate
argument_list|,
name|freshSnapshot
operator|.
name|get
argument_list|(
literal|"DATE_OF_BIRTH"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check peer artist
name|ParallelTestContainer
name|helper
init|=
operator|new
name|ParallelTestContainer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|assertResult
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|newAltName
argument_list|,
name|altArtist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newDate
argument_list|,
name|altArtist
operator|.
name|getDateOfBirth
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|MODIFIED
argument_list|,
name|altArtist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|runTest
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case to prove that deleting an object in one ObjectStore and committing to the      * database will be reflected in the peer ObjectStore using the same DataRowCache. By      * default COMMITTED objects will be changed to TRANSIENT.      */
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotDeletePropagationToCommitted
parameter_list|()
throws|throws
name|Exception
block|{
comment|// make sure we have a fully resolved copy of an artist object
comment|// in the second context
specifier|final
name|Artist
name|altArtist
init|=
name|context1
operator|.
name|localObject
argument_list|(
name|artist
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|altArtist
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|altArtist
operator|==
name|artist
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artist
operator|.
name|getArtistName
argument_list|()
argument_list|,
name|altArtist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|altArtist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update Artist
name|context
operator|.
name|deleteObjects
argument_list|(
name|artist
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// check underlying cache
name|assertNull
argument_list|(
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|altArtist
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check peer artist
name|ParallelTestContainer
name|helper
init|=
operator|new
name|ParallelTestContainer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|assertResult
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|TRANSIENT
argument_list|,
name|altArtist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|altArtist
operator|.
name|getObjectContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|runTest
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case to prove that deleting an object in one ObjectStore and committed to the      * database will be reflected in the peer ObjectStore using the same DataRowCache. By      * default HOLLOW objects will be changed to TRANSIENT.      */
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotDeletePropagationToHollow
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Artist
name|altArtist
init|=
name|context1
operator|.
name|localObject
argument_list|(
name|artist
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|altArtist
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|altArtist
operator|==
name|artist
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|HOLLOW
argument_list|,
name|altArtist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update Artist
name|context
operator|.
name|deleteObjects
argument_list|(
name|artist
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// check underlying cache
name|assertNull
argument_list|(
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|altArtist
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check peer artist
name|ParallelTestContainer
name|helper
init|=
operator|new
name|ParallelTestContainer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|assertResult
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|TRANSIENT
argument_list|,
name|altArtist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|altArtist
operator|.
name|getObjectContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|runTest
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case to prove that deleting an object in one ObjectStore and committed to the      * database will be reflected in the peer ObjectStore using the same DataRowCache. By      * default MODIFIED objects will be changed to NEW.      */
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotDeletePropagationToModified
parameter_list|()
throws|throws
name|Exception
block|{
comment|// make sure we have a fully resolved copy of an artist object
comment|// in the second context
specifier|final
name|Artist
name|altArtist
init|=
name|context1
operator|.
name|localObject
argument_list|(
name|artist
argument_list|)
decl_stmt|;
name|altArtist
operator|.
name|getArtistName
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|altArtist
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|altArtist
operator|==
name|artist
argument_list|)
expr_stmt|;
comment|// modify peer
name|altArtist
operator|.
name|setArtistName
argument_list|(
literal|"version2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|MODIFIED
argument_list|,
name|altArtist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update Artist
name|context
operator|.
name|deleteObjects
argument_list|(
name|artist
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// check underlying cache
name|assertNull
argument_list|(
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|altArtist
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check peer artist
name|ParallelTestContainer
name|helper
init|=
operator|new
name|ParallelTestContainer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|assertResult
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|NEW
argument_list|,
name|altArtist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|runTest
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
comment|// check if now we can save this object again, and with the original
comment|// ObjectId
name|ObjectId
name|id
init|=
name|altArtist
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|id
operator|.
name|getIdSnapshot
argument_list|()
operator|.
name|get
argument_list|(
name|Artist
operator|.
name|ARTIST_ID_PK_COLUMN
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|id
operator|.
name|isTemporary
argument_list|()
argument_list|)
expr_stmt|;
name|context1
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|altArtist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case to prove that deleting an object in one ObjectStore and committing to the      * database will be reflected in the peer ObjectStore using the same DataRowCache. By      * default DELETED objects will be changed to TRANSIENT.      */
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotDeletePropagationToDeleted
parameter_list|()
throws|throws
name|Exception
block|{
comment|// make sure we have a fully resolved copy of an artist object
comment|// in the second context
specifier|final
name|Artist
name|altArtist
init|=
name|context1
operator|.
name|localObject
argument_list|(
name|artist
argument_list|)
decl_stmt|;
name|altArtist
operator|.
name|getArtistName
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|altArtist
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|altArtist
operator|==
name|artist
argument_list|)
expr_stmt|;
comment|// delete peer
name|context1
operator|.
name|deleteObjects
argument_list|(
name|altArtist
argument_list|)
expr_stmt|;
comment|// Update Artist
name|context
operator|.
name|deleteObjects
argument_list|(
name|artist
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// check underlying cache
name|assertNull
argument_list|(
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|altArtist
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check peer artist
name|ParallelTestContainer
name|helper
init|=
operator|new
name|ParallelTestContainer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|assertResult
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|TRANSIENT
argument_list|,
name|altArtist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|altArtist
operator|.
name|getObjectContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|runTest
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|context1
operator|.
name|hasChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case to prove that deleting an object in one ObjectStore and committing to the      * database will be reflected in the peer ObjectStore using the same DataRowCache,      * including proper processing of deleted object being held in to-many collections.      */
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotDeletePropagationToManyRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|Painting
name|painting1
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Painting"
argument_list|)
decl_stmt|;
name|painting1
operator|.
name|setPaintingTitle
argument_list|(
literal|"p1"
argument_list|)
expr_stmt|;
name|painting1
operator|.
name|setToArtist
argument_list|(
name|artist
argument_list|)
expr_stmt|;
name|Painting
name|painting2
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Painting"
argument_list|)
decl_stmt|;
name|painting2
operator|.
name|setPaintingTitle
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
name|painting2
operator|.
name|setToArtist
argument_list|(
name|artist
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// make sure we have a fully resolved copy of an artist and painting
comment|// objects
comment|// in the second context
specifier|final
name|Artist
name|altArtist
init|=
name|context1
operator|.
name|localObject
argument_list|(
name|artist
argument_list|)
decl_stmt|;
specifier|final
name|Painting
name|altPainting1
init|=
name|context1
operator|.
name|localObject
argument_list|(
name|painting1
argument_list|)
decl_stmt|;
specifier|final
name|Painting
name|altPainting2
init|=
name|context1
operator|.
name|localObject
argument_list|(
name|painting2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|artist
operator|.
name|getArtistName
argument_list|()
argument_list|,
name|altArtist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|painting1
operator|.
name|getPaintingTitle
argument_list|()
argument_list|,
name|altPainting1
operator|.
name|getPaintingTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|painting2
operator|.
name|getPaintingTitle
argument_list|()
argument_list|,
name|altPainting2
operator|.
name|getPaintingTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|altArtist
operator|.
name|getPaintingArray
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|altArtist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|altPainting1
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|altPainting2
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure toOne relationships from Paintings
comment|// are resolved...
name|altPainting1
operator|.
name|getToArtist
argument_list|()
expr_stmt|;
name|altPainting2
operator|.
name|getToArtist
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|altArtist
argument_list|,
name|altPainting1
operator|.
name|readPropertyDirectly
argument_list|(
literal|"toArtist"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|altArtist
argument_list|,
name|altPainting2
operator|.
name|readPropertyDirectly
argument_list|(
literal|"toArtist"
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete painting
name|context
operator|.
name|deleteObjects
argument_list|(
name|painting1
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// check underlying cache
name|assertNull
argument_list|(
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|painting1
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check peer artist
name|ParallelTestContainer
name|helper
init|=
operator|new
name|ParallelTestContainer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|assertResult
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|TRANSIENT
argument_list|,
name|altPainting1
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|altArtist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Painting
argument_list|>
name|list
init|=
name|altArtist
operator|.
name|getPaintingArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|list
operator|.
name|contains
argument_list|(
name|altPainting1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|runTest
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case to prove that inserting an object in one ObjectStore and committing to      * the database will be reflected in the peer ObjectStore using the same DataRowCache.      * This would mean refreshing to-many collections.      */
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotInsertPropagationToManyRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|Painting
name|painting1
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Painting"
argument_list|)
decl_stmt|;
name|painting1
operator|.
name|setPaintingTitle
argument_list|(
literal|"p1"
argument_list|)
expr_stmt|;
name|painting1
operator|.
name|setToArtist
argument_list|(
name|artist
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// make sure we have a fully resolved copy of an artist and painting
comment|// objects
comment|// in the second context
specifier|final
name|Artist
name|altArtist
init|=
name|context1
operator|.
name|localObject
argument_list|(
name|artist
argument_list|)
decl_stmt|;
specifier|final
name|Painting
name|altPainting1
init|=
name|context1
operator|.
name|localObject
argument_list|(
name|painting1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|artist
operator|.
name|getArtistName
argument_list|()
argument_list|,
name|altArtist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|painting1
operator|.
name|getPaintingTitle
argument_list|()
argument_list|,
name|altPainting1
operator|.
name|getPaintingTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|altArtist
operator|.
name|getPaintingArray
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|altArtist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|altPainting1
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
comment|// insert new painting and add to artist
name|Painting
name|painting2
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Painting"
argument_list|)
decl_stmt|;
name|painting2
operator|.
name|setPaintingTitle
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
name|painting2
operator|.
name|setToArtist
argument_list|(
name|artist
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// check peer artist
comment|// use threaded helper as a barrier, to avoid triggering faults earlier than
comment|// needed
name|ParallelTestContainer
name|helper
init|=
operator|new
name|ParallelTestContainer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|assertResult
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
name|value
init|=
name|altArtist
operator|.
name|readPropertyDirectly
argument_list|(
literal|"paintingArray"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected: "
operator|+
name|value
argument_list|,
name|value
operator|instanceof
name|ToManyList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|ToManyList
operator|)
name|value
operator|)
operator|.
name|isFault
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|helper
operator|.
name|runTest
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|list
init|=
name|altArtist
operator|.
name|getPaintingArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks that cache is refreshed when a query "refreshingObjects" property is set to      * true.      */
annotation|@
name|Test
specifier|public
name|void
name|testCacheRefreshingOnSelect
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|originalName
init|=
name|artist
operator|.
name|getArtistName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|newName
init|=
literal|"version2"
decl_stmt|;
name|DataContext
name|context
init|=
operator|(
name|DataContext
operator|)
name|artist
operator|.
name|getObjectContext
argument_list|()
decl_stmt|;
name|DataRow
name|oldSnapshot
init|=
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|artist
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|oldSnapshot
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalName
argument_list|,
name|oldSnapshot
operator|.
name|get
argument_list|(
literal|"ARTIST_NAME"
argument_list|)
argument_list|)
expr_stmt|;
comment|// update artist using raw SQL
name|SQLTemplate
name|update
init|=
name|sqlTemplateCustomizer
operator|.
name|createSQLTemplate
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
literal|"UPDATE ARTIST SET ARTIST_NAME = #bind($newName) WHERE ARTIST_NAME = #bind($oldName)"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"newName"
argument_list|,
name|newName
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"oldName"
argument_list|,
name|originalName
argument_list|)
expr_stmt|;
name|update
operator|.
name|setParams
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|context
operator|.
name|performNonSelectingQuery
argument_list|(
name|update
argument_list|)
expr_stmt|;
comment|// fetch updated artist without refreshing
name|List
name|artists
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|eq
argument_list|(
name|newName
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|artist
operator|=
operator|(
name|Artist
operator|)
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// check underlying cache
name|DataRow
name|freshSnapshot
init|=
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|artist
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|oldSnapshot
argument_list|,
name|freshSnapshot
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newName
argument_list|,
name|freshSnapshot
operator|.
name|get
argument_list|(
literal|"ARTIST_NAME"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check an artist
name|assertEquals
argument_list|(
name|newName
argument_list|,
name|artist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotEvictedForHollow
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|originalName
init|=
name|artist
operator|.
name|getArtistName
argument_list|()
decl_stmt|;
name|context
operator|.
name|invalidateObjects
argument_list|(
name|artist
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|HOLLOW
argument_list|,
name|artist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|artist
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// resolve object
name|assertEquals
argument_list|(
name|originalName
argument_list|,
name|artist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|DataRow
name|freshSnapshot
init|=
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|artist
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|freshSnapshot
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalName
argument_list|,
name|freshSnapshot
operator|.
name|get
argument_list|(
literal|"ARTIST_NAME"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotEvictedAndObjectsHollowedForInvalidate
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|originalName
init|=
name|artist
operator|.
name|getArtistName
argument_list|()
decl_stmt|;
comment|// make sure we have a fully resolved copy of an artist object
comment|// in the second context
specifier|final
name|Artist
name|altArtist
init|=
name|context1
operator|.
name|localObject
argument_list|(
name|artist
argument_list|)
decl_stmt|;
name|context1
operator|.
name|prepareForAccess
argument_list|(
name|altArtist
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|altArtist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|invalidateObjects
argument_list|(
name|artist
argument_list|)
expr_stmt|;
comment|// original context
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|HOLLOW
argument_list|,
name|artist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|artist
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// alternate context
operator|new
name|ParallelTestContainer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|assertResult
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|HOLLOW
argument_list|,
name|altArtist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|context1
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|altArtist
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|runTest
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// resolve object
name|assertEquals
argument_list|(
name|originalName
argument_list|,
name|altArtist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|DataRow
name|altFreshSnapshot
init|=
name|context1
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|altArtist
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|altFreshSnapshot
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalName
argument_list|,
name|altFreshSnapshot
operator|.
name|get
argument_list|(
literal|"ARTIST_NAME"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotEvictedForCommitted
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newName
init|=
literal|"version2"
decl_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|artist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|forgetSnapshot
argument_list|(
name|artist
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|artist
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// modify object and try to save
name|artist
operator|.
name|setArtistName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|newName
argument_list|,
name|artist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|DataRow
name|freshSnapshot
init|=
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|artist
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|freshSnapshot
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newName
argument_list|,
name|freshSnapshot
operator|.
name|get
argument_list|(
literal|"ARTIST_NAME"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotEvictedForModified
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|newName
init|=
literal|"version2"
decl_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|artist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
comment|// modify object PRIOR to killing the snapshot
name|artist
operator|.
name|setArtistName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|forgetSnapshot
argument_list|(
name|artist
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|artist
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|newName
argument_list|,
name|artist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|DataRow
name|freshSnapshot
init|=
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|artist
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|freshSnapshot
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newName
argument_list|,
name|freshSnapshot
operator|.
name|get
argument_list|(
literal|"ARTIST_NAME"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotEvictedAndChangedForModified
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|originalName
init|=
name|artist
operator|.
name|getArtistName
argument_list|()
decl_stmt|;
name|String
name|newName
init|=
literal|"version2"
decl_stmt|;
name|String
name|backendName
init|=
literal|"version3"
decl_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|artist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
comment|// modify object PRIOR to killing the snapshot
name|artist
operator|.
name|setArtistName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|forgetSnapshot
argument_list|(
name|artist
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|artist
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// now replace the row in the database
name|String
name|template
init|=
literal|"UPDATE ARTIST SET ARTIST_NAME = #bind($newName) WHERE ARTIST_NAME = #bind($oldName)"
decl_stmt|;
name|SQLTemplate
name|update
init|=
operator|new
name|SQLTemplate
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"newName"
argument_list|,
name|backendName
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"oldName"
argument_list|,
name|originalName
argument_list|)
expr_stmt|;
name|update
operator|.
name|setParams
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|context
operator|.
name|performNonSelectingQuery
argument_list|(
name|update
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|newName
argument_list|,
name|artist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|DataRow
name|freshSnapshot
init|=
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|artist
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|freshSnapshot
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newName
argument_list|,
name|freshSnapshot
operator|.
name|get
argument_list|(
literal|"ARTIST_NAME"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotEvictedForDeleted
parameter_list|()
throws|throws
name|Exception
block|{
comment|// remember ObjectId
name|ObjectId
name|id
init|=
name|artist
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|artist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete object PRIOR to killing the snapshot
name|context
operator|.
name|deleteObjects
argument_list|(
name|artist
argument_list|)
expr_stmt|;
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|forgetSnapshot
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|TRANSIENT
argument_list|,
name|artist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|getCachedSnapshot
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

