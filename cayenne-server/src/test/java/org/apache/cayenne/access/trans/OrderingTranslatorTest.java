begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|trans
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|TranslationCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCaseDataSourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|ServerCase
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|OrderingTranslatorTest
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|DataNode
name|node
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ServerCaseDataSourceFactory
name|dataSourceFactory
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUpAfterInjection
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|connection
operator|=
name|dataSourceFactory
operator|.
name|getSharedDataSource
argument_list|()
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDownBeforeInjection
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests ascending ordering on string attribute.      */
specifier|public
name|void
name|testDoTranslation1
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|q
operator|.
name|addOrdering
argument_list|(
literal|"artistName"
argument_list|,
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
name|TstQueryAssembler
name|qa
init|=
operator|new
name|TstQueryAssembler
argument_list|(
name|q
argument_list|,
name|node
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|TranslationCase
name|tstCase
init|=
operator|new
name|TranslationCase
argument_list|(
literal|"Artist"
argument_list|,
literal|null
argument_list|,
literal|"ta.ARTIST_NAME"
argument_list|)
decl_stmt|;
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
operator|new
name|OrderingTranslator
argument_list|(
name|qa
argument_list|)
operator|.
name|appendPart
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|tstCase
operator|.
name|assertTranslatedWell
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests descending ordering on string attribute.      */
specifier|public
name|void
name|testDoTranslation2
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|q
operator|.
name|addOrdering
argument_list|(
literal|"artistName"
argument_list|,
name|SortOrder
operator|.
name|DESCENDING
argument_list|)
expr_stmt|;
name|TstQueryAssembler
name|qa
init|=
operator|new
name|TstQueryAssembler
argument_list|(
name|q
argument_list|,
name|node
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|TranslationCase
name|tstCase
init|=
operator|new
name|TranslationCase
argument_list|(
literal|"Artist"
argument_list|,
literal|null
argument_list|,
literal|"ta.ARTIST_NAME DESC"
argument_list|)
decl_stmt|;
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
operator|new
name|OrderingTranslator
argument_list|(
name|qa
argument_list|)
operator|.
name|appendPart
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|tstCase
operator|.
name|assertTranslatedWell
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests ascending case-insensitive ordering on string attribute.      */
specifier|public
name|void
name|testDoTranslation4
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|q
operator|.
name|addOrdering
argument_list|(
literal|"artistName"
argument_list|,
name|SortOrder
operator|.
name|ASCENDING_INSENSITIVE
argument_list|)
expr_stmt|;
name|TstQueryAssembler
name|qa
init|=
operator|new
name|TstQueryAssembler
argument_list|(
name|q
argument_list|,
name|node
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|TranslationCase
name|tstCase
init|=
operator|new
name|TranslationCase
argument_list|(
literal|"Artist"
argument_list|,
literal|null
argument_list|,
literal|"UPPER(ta.ARTIST_NAME)"
argument_list|)
decl_stmt|;
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
operator|new
name|OrderingTranslator
argument_list|(
name|qa
argument_list|)
operator|.
name|appendPart
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|orderBySql
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|orderBySql
operator|.
name|contains
argument_list|(
literal|"UPPER("
argument_list|)
argument_list|)
expr_stmt|;
name|tstCase
operator|.
name|assertTranslatedWell
argument_list|(
name|orderBySql
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDoTranslation5
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|q
operator|.
name|addOrdering
argument_list|(
literal|"artistName"
argument_list|,
name|SortOrder
operator|.
name|DESCENDING_INSENSITIVE
argument_list|)
expr_stmt|;
name|q
operator|.
name|addOrdering
argument_list|(
literal|"paintingArray.estimatedPrice"
argument_list|,
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
name|TstQueryAssembler
name|qa
init|=
operator|new
name|TstQueryAssembler
argument_list|(
name|q
argument_list|,
name|node
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|TranslationCase
name|tstCase
init|=
operator|new
name|TranslationCase
argument_list|(
literal|"Artist"
argument_list|,
literal|null
argument_list|,
literal|"UPPER(ta.ARTIST_NAME) DESC, ta.ESTIMATED_PRICE"
argument_list|)
decl_stmt|;
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
operator|new
name|OrderingTranslator
argument_list|(
name|qa
argument_list|)
operator|.
name|appendPart
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|orderBySql
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Check there is an UPPER modifier
name|int
name|indexOfUpper
init|=
name|orderBySql
operator|.
name|indexOf
argument_list|(
literal|"UPPER("
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|indexOfUpper
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// and ensure there is only ONE upper modifier
name|assertTrue
argument_list|(
name|orderBySql
operator|.
name|indexOf
argument_list|(
literal|"UPPER("
argument_list|,
name|indexOfUpper
operator|+
literal|1
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|tstCase
operator|.
name|assertTranslatedWell
argument_list|(
name|orderBySql
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDoTranslation6
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|q
operator|.
name|addOrdering
argument_list|(
literal|"artistName"
argument_list|,
name|SortOrder
operator|.
name|ASCENDING_INSENSITIVE
argument_list|)
expr_stmt|;
name|q
operator|.
name|addOrdering
argument_list|(
literal|"paintingArray.estimatedPrice"
argument_list|,
name|SortOrder
operator|.
name|ASCENDING_INSENSITIVE
argument_list|)
expr_stmt|;
name|TstQueryAssembler
name|qa
init|=
operator|new
name|TstQueryAssembler
argument_list|(
name|q
argument_list|,
name|node
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|TranslationCase
name|tstCase
init|=
operator|new
name|TranslationCase
argument_list|(
literal|"Artist"
argument_list|,
literal|null
argument_list|,
literal|"UPPER(ta.ARTIST_NAME), UPPER(ta.ESTIMATED_PRICE)"
argument_list|)
decl_stmt|;
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
operator|new
name|OrderingTranslator
argument_list|(
name|qa
argument_list|)
operator|.
name|appendPart
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|orderBySql
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Check there is at least one UPPER modifier
name|int
name|indexOfUpper
init|=
name|orderBySql
operator|.
name|indexOf
argument_list|(
literal|"UPPER("
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|indexOfUpper
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// and ensure there is another after it
name|assertTrue
argument_list|(
name|orderBySql
operator|.
name|indexOf
argument_list|(
literal|"UPPER("
argument_list|,
name|indexOfUpper
operator|+
literal|1
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|tstCase
operator|.
name|assertTranslatedWell
argument_list|(
name|orderBySql
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDoTranslation3
parameter_list|()
throws|throws
name|Exception
block|{
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|q
operator|.
name|addOrdering
argument_list|(
literal|"artistName"
argument_list|,
name|SortOrder
operator|.
name|DESCENDING
argument_list|)
expr_stmt|;
name|q
operator|.
name|addOrdering
argument_list|(
literal|"paintingArray.estimatedPrice"
argument_list|,
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
name|TstQueryAssembler
name|qa
init|=
operator|new
name|TstQueryAssembler
argument_list|(
name|q
argument_list|,
name|node
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|TranslationCase
name|tstCase
init|=
operator|new
name|TranslationCase
argument_list|(
literal|"Artist"
argument_list|,
literal|null
argument_list|,
literal|"ta.ARTIST_NAME DESC, ta.ESTIMATED_PRICE"
argument_list|)
decl_stmt|;
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
operator|new
name|OrderingTranslator
argument_list|(
name|qa
argument_list|)
operator|.
name|appendPart
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|orderBySql
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
name|tstCase
operator|.
name|assertTranslatedWell
argument_list|(
name|orderBySql
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

