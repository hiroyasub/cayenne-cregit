begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|PathComponentsTest
block|{
specifier|private
name|PathComponents
name|components1
decl_stmt|;
specifier|private
name|PathComponents
name|components2
decl_stmt|;
specifier|private
name|PathComponents
name|components3
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|components1
operator|=
operator|new
name|PathComponents
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|components2
operator|=
operator|new
name|PathComponents
argument_list|(
literal|"a+.bcd"
argument_list|)
expr_stmt|;
name|components3
operator|=
operator|new
name|PathComponents
argument_list|(
literal|"a.bc.defg"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|size
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|components1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|components2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|components3
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getLast
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|components1
operator|.
name|getLast
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bcd"
argument_list|,
name|components2
operator|.
name|getLast
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"defg"
argument_list|,
name|components3
operator|.
name|getLast
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getParent
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|components1
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a+"
argument_list|,
name|components2
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a.bc"
argument_list|,
name|components3
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getAll
parameter_list|()
block|{
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|,
name|components1
operator|.
name|getAll
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a+"
block|,
literal|"bcd"
block|}
argument_list|,
name|components2
operator|.
name|getAll
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"bc"
block|,
literal|"defg"
block|}
argument_list|,
name|components3
operator|.
name|getAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPath
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|components1
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a+.bcd"
argument_list|,
name|components2
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a.bc.defg"
argument_list|,
name|components3
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

