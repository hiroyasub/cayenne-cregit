begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|DeleteNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|SQLBuilder
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|DeleteBuilderTest
extends|extends
name|BaseSqlBuilderTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testDelete
parameter_list|()
block|{
name|DeleteBuilder
name|builder
init|=
operator|new
name|DeleteBuilder
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|node
argument_list|,
name|instanceOf
argument_list|(
name|DeleteNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSQL
argument_list|(
literal|"DELETE FROM test"
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteWithQualifier
parameter_list|()
block|{
name|DeleteBuilder
name|builder
init|=
operator|new
name|DeleteBuilder
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|builder
operator|.
name|where
argument_list|(
name|column
argument_list|(
literal|"col1"
argument_list|)
operator|.
name|eq
argument_list|(
name|value
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|column
argument_list|(
literal|"col2"
argument_list|)
operator|.
name|eq
argument_list|(
name|value
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|column
argument_list|(
literal|"col3"
argument_list|)
operator|.
name|eq
argument_list|(
name|value
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|node
argument_list|,
name|instanceOf
argument_list|(
name|DeleteNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSQL
argument_list|(
literal|"DELETE FROM test WHERE ( ( col1 = 1 ) AND ( col2 = 'test' ) ) AND ( col3 IS NULL )"
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteDbEntityCatalog
parameter_list|()
block|{
name|DbEntity
name|entity
init|=
operator|new
name|DbEntity
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|entity
operator|.
name|setCatalog
argument_list|(
literal|"catalog"
argument_list|)
expr_stmt|;
name|DeleteBuilder
name|builder
init|=
operator|new
name|DeleteBuilder
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|node
argument_list|,
name|instanceOf
argument_list|(
name|DeleteNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSQL
argument_list|(
literal|"DELETE FROM catalog.test"
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|assertQuotedSQL
argument_list|(
literal|"DELETE FROM `catalog`.`test`"
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteDbEntityCatalogAndSchema
parameter_list|()
block|{
name|DbEntity
name|entity
init|=
operator|new
name|DbEntity
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|entity
operator|.
name|setSchema
argument_list|(
literal|"schema"
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setCatalog
argument_list|(
literal|"catalog"
argument_list|)
expr_stmt|;
name|DeleteBuilder
name|builder
init|=
operator|new
name|DeleteBuilder
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|node
argument_list|,
name|instanceOf
argument_list|(
name|DeleteNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSQL
argument_list|(
literal|"DELETE FROM catalog.schema.test"
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|assertQuotedSQL
argument_list|(
literal|"DELETE FROM `catalog`.`schema`.`test`"
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

