begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|DefaultValueObjectTypeRegistryTest
block|{
name|DefaultValueObjectTypeRegistry
name|registry
decl_stmt|;
name|ValueObjectType
name|valueObjectType1
decl_stmt|,
name|valueObjectType2
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUpRegistry
parameter_list|()
block|{
name|valueObjectType1
operator|=
name|mock
argument_list|(
name|ValueObjectType
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|valueObjectType1
operator|.
name|getValueType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|valueObjectType1
operator|.
name|getTargetType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|valueObjectType2
operator|=
name|mock
argument_list|(
name|ValueObjectType
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|valueObjectType2
operator|.
name|getValueType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Number
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|valueObjectType2
operator|.
name|getTargetType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ValueObjectType
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|valueObjectType1
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|valueObjectType2
argument_list|)
expr_stmt|;
name|registry
operator|=
operator|new
name|DefaultValueObjectTypeRegistry
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitialState
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|registry
operator|.
name|typeCache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|registry
operator|.
name|typeCache
operator|.
name|containsKey
argument_list|(
name|Integer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|registry
operator|.
name|typeCache
operator|.
name|containsKey
argument_list|(
name|Number
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|registry
operator|.
name|typeCache
operator|.
name|containsKey
argument_list|(
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|registry
operator|.
name|typeCache
operator|.
name|containsKey
argument_list|(
name|Float
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getValueType
parameter_list|()
throws|throws
name|Exception
block|{
name|ValueObjectType
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|valueObjectType
init|=
name|registry
operator|.
name|getValueType
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|valueObjectType1
argument_list|,
name|valueObjectType
argument_list|)
expr_stmt|;
name|valueObjectType
operator|=
name|registry
operator|.
name|getValueType
argument_list|(
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|valueObjectType
argument_list|)
expr_stmt|;
name|valueObjectType
operator|=
name|registry
operator|.
name|getValueType
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|valueObjectType
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|registry
operator|.
name|typeCache
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|registry
operator|.
name|typeCache
operator|.
name|containsKey
argument_list|(
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|registry
operator|.
name|typeCache
operator|.
name|containsKey
argument_list|(
name|Float
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

