begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannelQueryFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannelQueryFilterChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannelSyncFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannelSyncFilterChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|annotation
operator|.
name|PostPersist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|ListResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|DataDomainFiltersIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|ObjectContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ServerRuntime
name|runtime
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testDefaultFilters
parameter_list|()
block|{
comment|// There is a default TransactionFilter
name|DataDomain
name|domain
init|=
name|runtime
operator|.
name|getDataDomain
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|domain
operator|.
name|queryFilters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|domain
operator|.
name|syncFilters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnQuery_FilterOrdering
parameter_list|()
block|{
name|DataDomain
name|domain
init|=
name|runtime
operator|.
name|getDataDomain
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|DataChannelQueryFilter
name|f1
init|=
parameter_list|(
name|originatingContext
parameter_list|,
name|query
parameter_list|,
name|filterChain
parameter_list|)
lambda|->
block|{
name|results
operator|.
name|add
argument_list|(
literal|"f1start"
argument_list|)
expr_stmt|;
name|QueryResponse
name|response
init|=
name|filterChain
operator|.
name|onQuery
argument_list|(
name|originatingContext
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"f1end"
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
decl_stmt|;
name|DataChannelQueryFilter
name|f2
init|=
parameter_list|(
name|originatingContext
parameter_list|,
name|query
parameter_list|,
name|filterChain
parameter_list|)
lambda|->
block|{
name|results
operator|.
name|add
argument_list|(
literal|"f2start"
argument_list|)
expr_stmt|;
name|QueryResponse
name|response
init|=
name|filterChain
operator|.
name|onQuery
argument_list|(
name|originatingContext
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"f2end"
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
decl_stmt|;
name|domain
operator|.
name|queryFilters
operator|.
name|add
argument_list|(
name|f1
argument_list|)
expr_stmt|;
name|domain
operator|.
name|queryFilters
operator|.
name|add
argument_list|(
name|f2
argument_list|)
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|QueryResponse
name|response
init|=
name|domain
operator|.
name|onQuery
argument_list|(
name|context
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f2start"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1start"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1end"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f2end"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnSync_FilterOrdering
parameter_list|()
block|{
name|DataDomain
name|domain
init|=
name|runtime
operator|.
name|getDataDomain
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|DataChannelSyncFilter
name|f1
init|=
parameter_list|(
name|originatingContext
parameter_list|,
name|changes
parameter_list|,
name|syncType
parameter_list|,
name|filterChain
parameter_list|)
lambda|->
block|{
name|results
operator|.
name|add
argument_list|(
literal|"f1start"
argument_list|)
expr_stmt|;
name|GraphDiff
name|response
init|=
name|filterChain
operator|.
name|onSync
argument_list|(
name|originatingContext
argument_list|,
name|changes
argument_list|,
name|syncType
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"f1end"
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
decl_stmt|;
name|DataChannelSyncFilter
name|f2
init|=
parameter_list|(
name|originatingContext
parameter_list|,
name|changes
parameter_list|,
name|syncType
parameter_list|,
name|filterChain
parameter_list|)
lambda|->
block|{
name|results
operator|.
name|add
argument_list|(
literal|"f2start"
argument_list|)
expr_stmt|;
name|GraphDiff
name|response
init|=
name|filterChain
operator|.
name|onSync
argument_list|(
name|originatingContext
argument_list|,
name|changes
argument_list|,
name|syncType
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"f2end"
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
decl_stmt|;
name|domain
operator|.
name|syncFilters
operator|.
name|add
argument_list|(
name|f1
argument_list|)
expr_stmt|;
name|domain
operator|.
name|syncFilters
operator|.
name|add
argument_list|(
name|f2
argument_list|)
expr_stmt|;
name|Artist
name|a
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a
operator|.
name|setArtistName
argument_list|(
literal|"AAA"
argument_list|)
expr_stmt|;
comment|// testing domain.onSync indirectly
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f2start"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1start"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1end"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f2end"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnQuery_Blocking
parameter_list|()
block|{
name|DataDomain
name|domain
init|=
name|runtime
operator|.
name|getDataDomain
argument_list|()
decl_stmt|;
name|QueryResponse
name|r1
init|=
operator|new
name|ListResponse
argument_list|()
decl_stmt|;
name|QueryResponse
name|r2
init|=
operator|new
name|ListResponse
argument_list|()
decl_stmt|;
name|DataChannelQueryFilter
name|f1
init|=
parameter_list|(
name|originatingContext
parameter_list|,
name|query
parameter_list|,
name|filterChain
parameter_list|)
lambda|->
name|r1
decl_stmt|;
name|DataChannelQueryFilter
name|f2
init|=
parameter_list|(
name|originatingContext
parameter_list|,
name|query
parameter_list|,
name|filterChain
parameter_list|)
lambda|->
name|r2
decl_stmt|;
name|domain
operator|.
name|queryFilters
operator|.
name|add
argument_list|(
name|f1
argument_list|)
expr_stmt|;
name|domain
operator|.
name|queryFilters
operator|.
name|add
argument_list|(
name|f2
argument_list|)
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|QueryResponse
name|response
init|=
name|domain
operator|.
name|onQuery
argument_list|(
name|context
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|r2
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncAndQueryFilter
parameter_list|()
block|{
name|ComplexFilter
name|complexFilter
init|=
operator|new
name|ComplexFilter
argument_list|()
decl_stmt|;
name|DataDomain
name|domain
init|=
name|runtime
operator|.
name|getDataDomain
argument_list|()
decl_stmt|;
name|domain
operator|.
name|addQueryFilter
argument_list|(
name|complexFilter
argument_list|)
expr_stmt|;
name|domain
operator|.
name|addSyncFilter
argument_list|(
name|complexFilter
argument_list|)
expr_stmt|;
name|Artist
name|a
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a
operator|.
name|setArtistName
argument_list|(
literal|"AAA"
argument_list|)
expr_stmt|;
comment|// testing domain.onSync indirectly
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|complexFilter
operator|.
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"onSync"
argument_list|,
name|complexFilter
operator|.
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"postPersist"
argument_list|,
name|complexFilter
operator|.
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|ComplexFilter
implements|implements
name|DataChannelQueryFilter
implements|,
name|DataChannelSyncFilter
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|QueryResponse
name|onQuery
parameter_list|(
name|ObjectContext
name|originatingContext
parameter_list|,
name|Query
name|query
parameter_list|,
name|DataChannelQueryFilterChain
name|filterChain
parameter_list|)
block|{
name|results
operator|.
name|add
argument_list|(
literal|"onQuery"
argument_list|)
expr_stmt|;
return|return
name|filterChain
operator|.
name|onQuery
argument_list|(
name|originatingContext
argument_list|,
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|GraphDiff
name|onSync
parameter_list|(
name|ObjectContext
name|originatingContext
parameter_list|,
name|GraphDiff
name|changes
parameter_list|,
name|int
name|syncType
parameter_list|,
name|DataChannelSyncFilterChain
name|filterChain
parameter_list|)
block|{
name|results
operator|.
name|add
argument_list|(
literal|"onSync"
argument_list|)
expr_stmt|;
return|return
name|filterChain
operator|.
name|onSync
argument_list|(
name|originatingContext
argument_list|,
name|changes
argument_list|,
name|syncType
argument_list|)
return|;
block|}
annotation|@
name|PostPersist
specifier|public
name|void
name|postPersist
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|results
operator|.
name|add
argument_list|(
literal|"postPersist"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

