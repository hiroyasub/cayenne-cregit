begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|SQLGenerationVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|StringBuilderAppendable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|compound
operator|.
name|CompoundFkTestEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|compound
operator|.
name|CompoundPkTestEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|UnitDbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|COMPOUND_PROJECT
argument_list|)
specifier|public
class|class
name|QualifierTranslatorIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|ServerRuntime
name|runtime
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ObjectContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|DBHelper
name|dbHelper
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|tCompoundPKTest
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"COMPOUND_PK_TEST"
argument_list|)
decl_stmt|;
name|tCompoundPKTest
operator|.
name|setColumns
argument_list|(
literal|"KEY1"
argument_list|,
literal|"KEY2"
argument_list|,
literal|"NAME"
argument_list|)
expr_stmt|;
name|tCompoundPKTest
operator|.
name|insert
argument_list|(
literal|"PK1"
argument_list|,
literal|"PK2"
argument_list|,
literal|"BBB"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompoundPK
parameter_list|()
block|{
name|CompoundPkTestEntity
name|testEntity
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|CompoundPkTestEntity
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testEntity
argument_list|)
expr_stmt|;
name|ObjectSelect
argument_list|<
name|CompoundFkTestEntity
argument_list|>
name|query
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|CompoundFkTestEntity
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|CompoundFkTestEntity
operator|.
name|TO_COMPOUND_PK
operator|.
name|eq
argument_list|(
name|testEntity
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|CompoundFkTestEntity
operator|.
name|NAME
operator|.
name|like
argument_list|(
literal|"test%"
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|CompoundFkTestEntity
operator|.
name|NAME
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|DefaultSelectTranslator
name|translator
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|query
argument_list|,
name|runtime
operator|.
name|getDataDomain
argument_list|()
operator|.
name|getDefaultNode
argument_list|()
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|context
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|QualifierTranslator
name|qualifierTranslator
init|=
name|translator
operator|.
name|getContext
argument_list|()
operator|.
name|getQualifierTranslator
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|qualifierTranslator
operator|.
name|translate
argument_list|(
name|query
operator|.
name|getWhere
argument_list|()
argument_list|)
decl_stmt|;
name|SQLGenerationVisitor
name|visitor
init|=
operator|new
name|SQLGenerationVisitor
argument_list|(
operator|new
name|StringBuilderAppendable
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|.
name|visit
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" ( ( ( t0.F_KEY1 = 'PK1' ) AND ( t0.F_KEY2 = 'PK2' ) ) AND t0.NAME LIKE 'test%' ) AND t0.NAME LIKE '%a%'"
argument_list|,
name|visitor
operator|.
name|getSQLString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

