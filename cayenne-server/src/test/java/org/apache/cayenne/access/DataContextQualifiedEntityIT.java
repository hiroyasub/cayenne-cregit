begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inheritance_people
operator|.
name|AbstractPerson
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inheritance_people
operator|.
name|CustomerRepresentative
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inheritance_people
operator|.
name|Employee
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inheritance_people
operator|.
name|Manager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|PeopleProjectCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|DataContextQualifiedEntityIT
extends|extends
name|PeopleProjectCase
block|{
annotation|@
name|Inject
specifier|protected
name|ObjectContext
name|context
decl_stmt|;
specifier|protected
name|TableHelper
name|tPerson
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// manually break circular deps
name|dbHelper
operator|.
name|update
argument_list|(
literal|"PERSON"
argument_list|)
operator|.
name|set
argument_list|(
literal|"DEPARTMENT_ID"
argument_list|,
literal|null
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
name|tPerson
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"PERSON"
argument_list|)
expr_stmt|;
name|tPerson
operator|.
name|setColumns
argument_list|(
literal|"CLIENT_COMPANY_ID"
argument_list|,
literal|"CLIENT_CONTACT_TYPE"
argument_list|,
literal|"DEPARTMENT_ID"
argument_list|,
literal|"NAME"
argument_list|,
literal|"PERSON_ID"
argument_list|,
literal|"PERSON_TYPE"
argument_list|,
literal|"SALARY"
argument_list|)
operator|.
name|setColumnTypes
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
name|Types
operator|.
name|CHAR
argument_list|,
name|Types
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createPersonsDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|tPerson
operator|.
name|insert
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"e1"
argument_list|,
literal|1
argument_list|,
literal|"EE"
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
name|tPerson
operator|.
name|insert
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"e2"
argument_list|,
literal|2
argument_list|,
literal|"EE"
argument_list|,
literal|25000
argument_list|)
expr_stmt|;
name|tPerson
operator|.
name|insert
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"e3"
argument_list|,
literal|3
argument_list|,
literal|"EE"
argument_list|,
literal|28000
argument_list|)
expr_stmt|;
name|tPerson
operator|.
name|insert
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"m1"
argument_list|,
literal|4
argument_list|,
literal|"EM"
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|tPerson
operator|.
name|insert
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"m2"
argument_list|,
literal|5
argument_list|,
literal|"EM"
argument_list|,
literal|40000
argument_list|)
expr_stmt|;
name|tPerson
operator|.
name|insert
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"c1"
argument_list|,
literal|6
argument_list|,
literal|"C"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelect
parameter_list|()
throws|throws
name|Exception
block|{
name|createPersonsDataSet
argument_list|()
expr_stmt|;
comment|// just check that an appropriate qualifier was applied
comment|// no inheritance checks in this case...
comment|// select Abstract Ppl
name|List
argument_list|<
name|?
argument_list|>
name|abstractPpl
init|=
name|context
operator|.
name|performQuery
argument_list|(
operator|new
name|SelectQuery
argument_list|(
name|AbstractPerson
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|abstractPpl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// select Customer Reps
name|List
argument_list|<
name|?
argument_list|>
name|customerReps
init|=
name|context
operator|.
name|performQuery
argument_list|(
operator|new
name|SelectQuery
argument_list|(
name|CustomerRepresentative
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|customerReps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// select Employees
name|List
argument_list|<
name|?
argument_list|>
name|employees
init|=
name|context
operator|.
name|performQuery
argument_list|(
operator|new
name|SelectQuery
argument_list|(
name|Employee
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|employees
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// select Managers
name|List
argument_list|<
name|?
argument_list|>
name|managers
init|=
name|context
operator|.
name|performQuery
argument_list|(
operator|new
name|SelectQuery
argument_list|(
name|Manager
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|managers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrefetch
parameter_list|()
throws|throws
name|Exception
block|{
name|createPersonsDataSet
argument_list|()
expr_stmt|;
comment|// select Managers.. make sure prefetch query works as expected
name|List
argument_list|<
name|?
argument_list|>
name|managers
init|=
name|context
operator|.
name|performQuery
argument_list|(
operator|new
name|SelectQuery
argument_list|(
name|Manager
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|managers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

