begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTDbPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTObjPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|cay_2666
operator|.
name|CAY2666
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|CAY_2666
argument_list|)
specifier|public
class|class
name|Cay2666IT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
specifier|private
name|TableHelper
name|tTest
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testExp_Path
parameter_list|()
block|{
name|Expression
name|exp1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"object$.path"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Expression
operator|.
name|OBJ_PATH
argument_list|,
name|exp1
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Expression
name|exp2
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"db:object.path$"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Expression
operator|.
name|DB_PATH
argument_list|,
name|exp2
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathExp
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"abc$.xyz$"
argument_list|,
name|ExpressionFactory
operator|.
name|pathExp
argument_list|(
literal|"abc$.xyz$"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDbPathExp
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"db:abc.xyz$"
argument_list|,
name|ExpressionFactory
operator|.
name|dbPathExp
argument_list|(
literal|"abc.xyz$"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpWithAlias
parameter_list|()
block|{
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"paintings#p1.galleries$#p2.name = 'Test'"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"p1.p2.name"
argument_list|,
name|expression
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"galleries$"
argument_list|,
operator|(
operator|(
name|ASTObjPath
operator|)
name|expression
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getPathAliases
argument_list|()
operator|.
name|get
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpWithAliasAndOuterJoin
parameter_list|()
block|{
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"paintings$#p1+.name = 'Test'"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"p1.name"
argument_list|,
name|expression
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"paintings$+"
argument_list|,
operator|(
operator|(
name|ASTObjPath
operator|)
name|expression
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getPathAliases
argument_list|()
operator|.
name|get
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDbPathWithDollarSign
parameter_list|()
throws|throws
name|IOException
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
operator|new
name|ASTDbPath
argument_list|(
literal|"x$"
argument_list|)
operator|.
name|appendAsString
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"db:x$"
argument_list|,
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpDbPathWithDollarSign
parameter_list|()
throws|throws
name|IOException
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"db:x$ = 'A'"
argument_list|)
decl_stmt|;
name|Expression
name|expression
init|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTDbPath
argument_list|(
literal|"x$"
argument_list|)
argument_list|,
literal|"A"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|exp
operator|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"x$ = 'A'"
argument_list|)
expr_stmt|;
name|expression
operator|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTDbPath
argument_list|(
literal|"x$"
argument_list|)
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|exp
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|exp
operator|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"db:x$ = $name"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|expression
operator|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTDbPath
argument_list|(
literal|"x$"
argument_list|)
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testObjPathWithDollarSign
parameter_list|()
throws|throws
name|IOException
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
operator|new
name|ASTObjPath
argument_list|(
literal|"obj:x$"
argument_list|)
operator|.
name|appendAsString
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"obj:x$"
argument_list|,
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"y$"
argument_list|,
operator|new
name|ASTObjPath
argument_list|(
literal|"y$"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpObjPathWithDollarSign
parameter_list|()
throws|throws
name|IOException
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"obj:x$ = 'A'"
argument_list|)
decl_stmt|;
name|Expression
name|expression
init|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"x$"
argument_list|)
argument_list|,
literal|"A"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|exp
operator|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"x$ = 'A'"
argument_list|)
expr_stmt|;
name|expression
operator|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"x$"
argument_list|)
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|exp
operator|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"obj:x$ = $name"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|expression
operator|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"x$"
argument_list|)
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpressionWithDollarSign
parameter_list|()
throws|throws
name|Exception
block|{
name|tTest
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"Cay2666"
argument_list|)
expr_stmt|;
name|tTest
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"NAME$"
argument_list|)
expr_stmt|;
name|tTest
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"st.One"
argument_list|)
expr_stmt|;
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"name$ = 'st.One'"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CAY2666
argument_list|>
name|cay2666List
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|CAY2666
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|expression
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cay2666List
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"obj:name$ = 'st.Two'"
argument_list|)
expr_stmt|;
name|cay2666List
operator|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|CAY2666
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|expression
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cay2666List
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tTest
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"st.Two"
argument_list|)
expr_stmt|;
name|expression
operator|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"db:NAME$ = 'st.Two'"
argument_list|)
expr_stmt|;
name|cay2666List
operator|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|CAY2666
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|expression
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cay2666List
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

