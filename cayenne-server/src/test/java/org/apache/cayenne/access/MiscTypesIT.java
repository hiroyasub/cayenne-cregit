begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|MockSerializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|ArraysEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|CharacterEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|SerializableEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|UnitDbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|ServerCase
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|MiscTypesIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|ObjectContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|UnitDbAdapter
name|accessStackAdapter
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUpAfterInjection
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|accessStackAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"SERIALIZABLE_ENTITY"
argument_list|)
expr_stmt|;
block|}
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"ARRAYS_ENTITY"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"CHARACTER_ENTITY"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerializable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// this test requires BLOB support
if|if
condition|(
operator|!
name|accessStackAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
return|return;
block|}
name|SerializableEntity
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|SerializableEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|MockSerializable
name|i
init|=
operator|new
name|MockSerializable
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
name|test
operator|.
name|setSerializableField
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|SerializableEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|SerializableEntity
name|testRead
init|=
operator|(
name|SerializableEntity
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testRead
operator|.
name|getSerializableField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|.
name|getName
argument_list|()
argument_list|,
name|testRead
operator|.
name|getSerializableField
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|.
name|setSerializableField
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testByteArray
parameter_list|()
block|{
name|ArraysEntity
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ArraysEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|a
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|test
operator|.
name|setByteArray
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|ArraysEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArraysEntity
name|testRead
init|=
operator|(
name|ArraysEntity
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testRead
operator|.
name|getByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertArraysEqual
argument_list|(
name|a
argument_list|,
name|testRead
operator|.
name|getByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|.
name|setByteArray
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCharArray
parameter_list|()
block|{
name|ArraysEntity
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ArraysEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|char
index|[]
name|a
init|=
operator|new
name|char
index|[]
block|{
literal|'x'
block|,
literal|'y'
block|,
literal|'z'
block|}
decl_stmt|;
name|test
operator|.
name|setCharArray
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|ArraysEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArraysEntity
name|testRead
init|=
operator|(
name|ArraysEntity
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testRead
operator|.
name|getCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertArraysEqual
argument_list|(
name|a
argument_list|,
name|testRead
operator|.
name|getCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|.
name|setCharArray
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCharacterArray
parameter_list|()
block|{
name|ArraysEntity
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ArraysEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|Character
index|[]
name|a
init|=
operator|new
name|Character
index|[]
block|{
operator|new
name|Character
argument_list|(
literal|'x'
argument_list|)
block|,
operator|new
name|Character
argument_list|(
literal|'y'
argument_list|)
block|,
operator|new
name|Character
argument_list|(
literal|'z'
argument_list|)
block|}
decl_stmt|;
name|test
operator|.
name|setCharWrapperArray
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|ArraysEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArraysEntity
name|testRead
init|=
operator|(
name|ArraysEntity
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testRead
operator|.
name|getCharWrapperArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertArraysEqual
argument_list|(
name|a
argument_list|,
name|testRead
operator|.
name|getCharWrapperArray
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|.
name|setCharWrapperArray
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCharacter
parameter_list|()
block|{
name|CharacterEntity
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|CharacterEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|test
operator|.
name|setCharacterField
argument_list|(
operator|new
name|Character
argument_list|(
literal|'c'
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|CharacterEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|CharacterEntity
name|testRead
init|=
operator|(
name|CharacterEntity
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testRead
operator|.
name|getCharacterField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Character
argument_list|(
literal|'c'
argument_list|)
argument_list|,
name|testRead
operator|.
name|getCharacterField
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|.
name|setCharacterField
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testByteWrapperArray
parameter_list|()
block|{
name|ArraysEntity
name|test
init|=
name|context
operator|.
name|newObject
argument_list|(
name|ArraysEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|Byte
index|[]
name|a
init|=
operator|new
name|Byte
index|[]
block|{
operator|new
name|Byte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
operator|new
name|Byte
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|)
block|,
operator|new
name|Byte
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|)
block|}
decl_stmt|;
name|test
operator|.
name|setByteWrapperArray
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|ArraysEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArraysEntity
name|testRead
init|=
operator|(
name|ArraysEntity
operator|)
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|testRead
operator|.
name|getByteWrapperArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertArraysEqual
argument_list|(
name|a
argument_list|,
name|testRead
operator|.
name|getByteWrapperArray
argument_list|()
argument_list|)
expr_stmt|;
name|test
operator|.
name|setByteWrapperArray
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|assertArraysEqual
parameter_list|(
name|Object
name|a1
parameter_list|,
name|Object
name|a2
parameter_list|)
block|{
if|if
condition|(
name|a1
operator|==
literal|null
operator|&&
name|a2
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|a1
operator|==
literal|null
operator|&&
name|a2
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"First array is null"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a2
operator|==
literal|null
operator|&&
name|a1
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Second array is null"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|Array
operator|.
name|getLength
argument_list|(
name|a1
argument_list|)
argument_list|,
name|Array
operator|.
name|getLength
argument_list|(
name|a2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Array
operator|.
name|getLength
argument_list|(
name|a1
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Difference at index "
operator|+
name|i
argument_list|,
name|Array
operator|.
name|get
argument_list|(
name|a1
argument_list|,
name|i
argument_list|)
argument_list|,
name|Array
operator|.
name|get
argument_list|(
name|a2
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

