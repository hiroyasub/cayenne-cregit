begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|ColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|log
operator|.
name|JdbcEventLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|PrefetchTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|ArtGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|ArtistExhibit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|CompoundPainting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Exhibit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Gallery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|UnitDbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|DefaultSelectTranslatorIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|UnitDbAdapter
name|unitAdapter
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|JdbcEventLogger
name|logger
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DataNode
name|dataNode
decl_stmt|;
comment|/** 	 * Tests query creation with qualifier and ordering. 	 */
annotation|@
name|Test
specifier|public
name|void
name|testCreateSqlString1
parameter_list|()
throws|throws
name|Exception
block|{
comment|// query with qualifier and ordering
name|ObjectSelect
argument_list|<
name|Artist
argument_list|>
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|like
argument_list|(
literal|"a%"
argument_list|)
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH
operator|.
name|asc
argument_list|()
argument_list|)
decl_stmt|;
name|SelectTranslator
name|defaultSelectTranslator
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|generatedSql
init|=
name|defaultSelectTranslator
operator|.
name|getSql
argument_list|()
decl_stmt|;
comment|// do some simple assertions to make sure all parts are in
name|assertNotNull
argument_list|(
name|generatedSql
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|defaultSelectTranslator
operator|.
name|hasJoins
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" FROM "
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" WHERE "
argument_list|)
operator|>
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" FROM "
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" ORDER BY "
argument_list|)
operator|>
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" WHERE "
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Tests query creation with qualifier and ordering. 	 */
annotation|@
name|Test
specifier|public
name|void
name|testDbEntityQualifier
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectSelect
argument_list|<
name|Artist
argument_list|>
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|DbEntity
name|entity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"ARTIST"
argument_list|)
decl_stmt|;
specifier|final
name|DbEntity
name|middleEntity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"ARTIST_GROUP"
argument_list|)
decl_stmt|;
name|SelectTranslator
name|transl
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|entity
operator|.
name|setQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"ARTIST_NAME = \"123\""
argument_list|)
argument_list|)
expr_stmt|;
name|middleEntity
operator|.
name|setQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"GROUP_ID = 1987"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|generatedSql
init|=
name|transl
operator|.
name|getSql
argument_list|()
decl_stmt|;
comment|// do some simple assertions to make sure all parts are in
name|assertNotNull
argument_list|(
name|generatedSql
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" FROM "
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|generatedSql
operator|.
name|contains
argument_list|(
literal|"RTRIM"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST_NAME) ="
argument_list|)
operator|>
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"RTRIM("
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|generatedSql
operator|.
name|contains
argument_list|(
literal|"TRIM"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST_NAME) ="
argument_list|)
operator|>
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"TRIM("
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST_NAME ="
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|entity
operator|.
name|setQualifier
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|middleEntity
operator|.
name|setQualifier
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDbEntityQualifier_OuterJoin
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectSelect
argument_list|<
name|Painting
argument_list|>
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Painting
operator|.
name|TO_ARTIST
operator|.
name|outer
argument_list|()
operator|.
name|dot
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|)
operator|.
name|asc
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|DbEntity
name|entity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"ARTIST"
argument_list|)
decl_stmt|;
specifier|final
name|DbEntity
name|middleEntity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"ARTIST_GROUP"
argument_list|)
decl_stmt|;
name|SelectTranslator
name|transl
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|entity
operator|.
name|setQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"ARTIST_NAME = \"123\""
argument_list|)
argument_list|)
expr_stmt|;
name|middleEntity
operator|.
name|setQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"GROUP_ID = 1987"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|generatedSql
init|=
name|transl
operator|.
name|getSql
argument_list|()
decl_stmt|;
comment|// do some simple assertions to make sure all parts are in
name|assertNotNull
argument_list|(
name|generatedSql
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" FROM "
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|generatedSql
operator|.
name|contains
argument_list|(
literal|"RTRIM"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST_NAME) ="
argument_list|)
operator|>
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"RTRIM("
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|generatedSql
operator|.
name|contains
argument_list|(
literal|"TRIM"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST_NAME) ="
argument_list|)
operator|>
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"TRIM("
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST_NAME ="
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|entity
operator|.
name|setQualifier
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|middleEntity
operator|.
name|setQualifier
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDbEntityQualifier_FlattenedRel
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectSelect
argument_list|<
name|Artist
argument_list|>
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|GROUP_ARRAY
operator|.
name|dot
argument_list|(
name|ArtGroup
operator|.
name|NAME
argument_list|)
operator|.
name|eq
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DbEntity
name|entity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"ARTIST"
argument_list|)
decl_stmt|;
specifier|final
name|DbEntity
name|middleEntity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"ARTIST_GROUP"
argument_list|)
decl_stmt|;
name|SelectTranslator
name|transl
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|entity
operator|.
name|setQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"ARTIST_NAME = \"123\""
argument_list|)
argument_list|)
expr_stmt|;
name|middleEntity
operator|.
name|setQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"GROUP_ID = 1987"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|generatedSql
init|=
name|transl
operator|.
name|getSql
argument_list|()
decl_stmt|;
comment|// do some simple assertions to make sure all parts are in
name|assertNotNull
argument_list|(
name|generatedSql
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" FROM "
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|generatedSql
operator|.
name|contains
argument_list|(
literal|"RTRIM"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST_NAME) ="
argument_list|)
operator|>
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"RTRIM("
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|generatedSql
operator|.
name|contains
argument_list|(
literal|"TRIM"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST_NAME) ="
argument_list|)
operator|>
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"TRIM("
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST_NAME ="
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|entity
operator|.
name|setQualifier
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|middleEntity
operator|.
name|setQualifier
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDbEntityQualifier_RelatedMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectSelect
argument_list|<
name|Painting
argument_list|>
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Painting
operator|.
name|class
argument_list|,
name|Painting
operator|.
name|TO_ARTIST
operator|.
name|dot
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|)
operator|.
name|eq
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DbEntity
name|entity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"ARTIST"
argument_list|)
decl_stmt|;
specifier|final
name|DbEntity
name|middleEntity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"ARTIST_GROUP"
argument_list|)
decl_stmt|;
name|SelectTranslator
name|transl
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|entity
operator|.
name|setQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"ARTIST_NAME = \"123\""
argument_list|)
argument_list|)
expr_stmt|;
name|middleEntity
operator|.
name|setQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"GROUP_ID = 1987"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|generatedSql
init|=
name|transl
operator|.
name|getSql
argument_list|()
decl_stmt|;
comment|// do some simple assertions to make sure all parts are in
name|assertNotNull
argument_list|(
name|generatedSql
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" FROM "
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|generatedSql
operator|.
name|contains
argument_list|(
literal|"RTRIM"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST_NAME) ="
argument_list|)
operator|>
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"RTRIM("
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|generatedSql
operator|.
name|contains
argument_list|(
literal|"TRIM"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST_NAME) ="
argument_list|)
operator|>
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"TRIM("
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST_NAME ="
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|entity
operator|.
name|setQualifier
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|middleEntity
operator|.
name|setQualifier
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Tests query creation with "distinct" specified. 	 */
annotation|@
name|Test
specifier|public
name|void
name|testCreateSqlString2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// query with "distinct" set
name|ObjectSelect
argument_list|<
name|Artist
argument_list|>
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|q
operator|.
name|distinct
argument_list|()
expr_stmt|;
name|String
name|generatedSql
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
operator|.
name|getSql
argument_list|()
decl_stmt|;
comment|// do some simple assertions to make sure all parts are in
name|assertNotNull
argument_list|(
name|generatedSql
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|startsWith
argument_list|(
literal|"SELECT DISTINCT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Test aliases when the same table used in more then 1 relationship. Check 	 * translation of relationship path "ArtistExhibit.toArtist.artistName" and 	 * "ArtistExhibit.toExhibit.toGallery.paintingArray.toArtist.artistName". 	 */
annotation|@
name|Test
specifier|public
name|void
name|testCreateSqlString5
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectSelect
argument_list|<
name|ArtistExhibit
argument_list|>
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ArtistExhibit
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|ArtistExhibit
operator|.
name|TO_ARTIST
operator|.
name|dot
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|)
operator|.
name|like
argument_list|(
literal|"a%"
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|ArtistExhibit
operator|.
name|TO_EXHIBIT
operator|.
name|dot
argument_list|(
name|Exhibit
operator|.
name|TO_GALLERY
argument_list|)
operator|.
name|dot
argument_list|(
name|Gallery
operator|.
name|PAINTING_ARRAY
argument_list|)
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|TO_ARTIST
argument_list|)
operator|.
name|dot
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|)
operator|.
name|like
argument_list|(
literal|"a%"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|generatedSql
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
operator|.
name|getSql
argument_list|()
decl_stmt|;
comment|// logObj.warn("Query: " + generatedSql);
comment|// do some simple assertions to make sure all parts are in
name|assertNotNull
argument_list|(
name|generatedSql
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" FROM "
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" WHERE "
argument_list|)
operator|>
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" FROM "
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that there are 2 distinct aliases for the ARTIST table
name|int
name|ind1
init|=
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST t"
argument_list|,
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" FROM "
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ind1
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|ind2
init|=
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST t"
argument_list|,
name|ind1
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ind2
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|charAt
argument_list|(
name|ind1
operator|+
literal|"ARTIST t"
operator|.
name|length
argument_list|()
argument_list|)
operator|!=
name|generatedSql
operator|.
name|charAt
argument_list|(
name|ind2
operator|+
literal|"ARTIST t"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Test aliases when the same table used in more then 1 relationship. Check 	 * translation of relationship path "ArtistExhibit.toArtist.artistName" and 	 * "ArtistExhibit.toArtist.paintingArray.paintingTitle". 	 */
annotation|@
name|Test
specifier|public
name|void
name|testCreateSqlString6
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectSelect
argument_list|<
name|ArtistExhibit
argument_list|>
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ArtistExhibit
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|ArtistExhibit
operator|.
name|TO_ARTIST
operator|.
name|dot
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|)
operator|.
name|like
argument_list|(
literal|"a%"
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|ArtistExhibit
operator|.
name|TO_ARTIST
operator|.
name|dot
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
argument_list|)
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
operator|.
name|like
argument_list|(
literal|"p%"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|generatedSql
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
operator|.
name|getSql
argument_list|()
decl_stmt|;
comment|// do some simple assertions to make sure all parts are in
name|assertNotNull
argument_list|(
name|generatedSql
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" FROM "
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" WHERE "
argument_list|)
operator|>
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" FROM "
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that there is only one distinct alias for the ARTIST
comment|// table
name|int
name|ind1
init|=
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST t"
argument_list|,
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" FROM "
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ind1
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|ind2
init|=
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST t"
argument_list|,
name|ind1
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
argument_list|,
name|ind2
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Test query when qualifying on the same attribute more than once. Check 	 * translation "Artist.dateOfBirth> ? AND Artist.dateOfBirth< ?". 	 */
annotation|@
name|Test
specifier|public
name|void
name|testCreateSqlString7
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectSelect
argument_list|<
name|Artist
argument_list|>
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH
operator|.
name|gt
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH
operator|.
name|lt
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|generatedSql
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
operator|.
name|getSql
argument_list|()
decl_stmt|;
comment|// logObj.warn("Query: " + generatedSql);
comment|// do some simple assertions to make sure all parts are in
name|assertNotNull
argument_list|(
name|generatedSql
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i1
init|=
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" FROM "
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i1
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|i2
init|=
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" WHERE "
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i2
operator|>
name|i1
argument_list|)
expr_stmt|;
name|int
name|i3
init|=
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"DATE_OF_BIRTH"
argument_list|,
name|i2
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|>
name|i2
argument_list|)
expr_stmt|;
name|int
name|i4
init|=
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"DATE_OF_BIRTH"
argument_list|,
name|i3
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No second DOB comparison: "
operator|+
name|i4
operator|+
literal|", "
operator|+
name|i3
argument_list|,
name|i4
operator|>
name|i3
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Test query when qualifying on the same attribute accessed over 	 * relationship, more than once. Check translation 	 * "Painting.toArtist.dateOfBirth> ? AND Painting.toArtist.dateOfBirth< 	 * ?". 	 */
annotation|@
name|Test
specifier|public
name|void
name|testCreateSqlString8
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectSelect
argument_list|<
name|Painting
argument_list|>
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|Painting
operator|.
name|TO_ARTIST
operator|.
name|dot
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|)
operator|.
name|gt
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|Painting
operator|.
name|TO_ARTIST
operator|.
name|dot
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|)
operator|.
name|lt
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|generatedSql
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
operator|.
name|getSql
argument_list|()
decl_stmt|;
comment|// do some simple assertions to make sure all parts are in
name|assertNotNull
argument_list|(
name|generatedSql
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|generatedSql
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i1
init|=
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" FROM "
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i1
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|i2
init|=
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|" WHERE "
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i2
operator|>
name|i1
argument_list|)
expr_stmt|;
name|int
name|i3
init|=
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"DATE_OF_BIRTH"
argument_list|,
name|i2
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|>
name|i2
argument_list|)
expr_stmt|;
name|int
name|i4
init|=
name|generatedSql
operator|.
name|indexOf
argument_list|(
literal|"DATE_OF_BIRTH"
argument_list|,
name|i3
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No second DOB comparison: "
operator|+
name|i4
operator|+
literal|", "
operator|+
name|i3
argument_list|,
name|i4
operator|>
name|i3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSqlString9
parameter_list|()
throws|throws
name|Exception
block|{
comment|// query for a compound ObjEntity with qualifier
name|ObjectSelect
argument_list|<
name|CompoundPainting
argument_list|>
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|CompoundPainting
operator|.
name|class
argument_list|,
name|CompoundPainting
operator|.
name|ARTIST_NAME
operator|.
name|like
argument_list|(
literal|"a%"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
operator|.
name|getSql
argument_list|()
decl_stmt|;
comment|// do some simple assertions to make sure all parts are in
name|assertNotNull
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i1
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|" FROM "
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i1
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|i2
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"PAINTING"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i2
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|i3
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|i4
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"GALLERY"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i4
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|i5
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"PAINTING_INFO"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i5
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|i6
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST_NAME"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i6
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|i7
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"ESTIMATED_PRICE"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i7
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|i8
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"GALLERY_NAME"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i8
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|i9
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"PAINTING_TITLE"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i9
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|i10
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"TEXT_REVIEW"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i10
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|i11
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"PAINTING_ID"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i11
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|i12
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST_ID"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i12
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|i13
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"GALLERY_ID"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i13
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSqlString10
parameter_list|()
throws|throws
name|Exception
block|{
comment|// query with to-many joint prefetches
name|ObjectSelect
argument_list|<
name|Artist
argument_list|>
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|joint
argument_list|()
argument_list|)
decl_stmt|;
name|SelectTranslator
name|transl
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|transl
operator|.
name|getSql
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i1
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST_ID"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|sql
argument_list|,
name|i1
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|i2
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"FROM"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|sql
argument_list|,
name|i2
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
argument_list|,
name|sql
operator|.
name|indexOf
argument_list|(
literal|"PAINTING_ID"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// assert we have one join
name|assertTrue
argument_list|(
name|transl
operator|.
name|hasJoins
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSqlString11
parameter_list|()
throws|throws
name|Exception
block|{
comment|// query with joint prefetches and other joins
name|ObjectSelect
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
operator|.
name|eq
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|joint
argument_list|()
argument_list|)
decl_stmt|;
name|SelectTranslator
name|transl
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|transl
operator|.
name|getSql
argument_list|()
expr_stmt|;
comment|// assert we only have one join
name|assertTrue
argument_list|(
name|transl
operator|.
name|hasJoins
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSqlString12
parameter_list|()
throws|throws
name|Exception
block|{
comment|// query with to-one joint prefetches
name|ObjectSelect
argument_list|<
name|Painting
argument_list|>
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Painting
operator|.
name|TO_ARTIST
operator|.
name|joint
argument_list|()
argument_list|)
decl_stmt|;
name|SelectTranslator
name|transl
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
name|transl
operator|.
name|getSql
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i1
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"ARTIST_ID"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|sql
argument_list|,
name|i1
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|i2
init|=
name|sql
operator|.
name|indexOf
argument_list|(
literal|"FROM"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|sql
argument_list|,
name|i2
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sql
argument_list|,
name|sql
operator|.
name|indexOf
argument_list|(
literal|"PAINTING_ID"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// assert we have one join
name|assertTrue
argument_list|(
name|transl
operator|.
name|hasJoins
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSqlString13
parameter_list|()
throws|throws
name|Exception
block|{
comment|// query with invalid joint prefetches
name|ObjectSelect
argument_list|<
name|Painting
argument_list|>
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
operator|.
name|prefetch
argument_list|(
literal|"invalid.invalid"
argument_list|,
name|PrefetchTreeNode
operator|.
name|JOINT_PREFETCH_SEMANTICS
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
operator|.
name|getSql
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Invalid jointPrefetch must have thrown..."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExpressionException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSqlStringWithQuoteSqlIdentifiers
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|ObjectSelect
argument_list|<
name|Artist
argument_list|>
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH
operator|.
name|asc
argument_list|()
argument_list|)
decl_stmt|;
name|DbEntity
name|entity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"ARTIST"
argument_list|)
decl_stmt|;
name|entity
operator|.
name|getDataMap
argument_list|()
operator|.
name|setQuotingSQLIdentifiers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|charStart
init|=
name|unitAdapter
operator|.
name|getIdentifiersStartQuote
argument_list|()
decl_stmt|;
name|String
name|charEnd
init|=
name|unitAdapter
operator|.
name|getIdentifiersEndQuote
argument_list|()
decl_stmt|;
name|String
name|s
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
operator|.
name|getSql
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|iFrom
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|" FROM "
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|iFrom
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|artistName
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"ARTIST_NAME"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|artistName
operator|>
literal|0
operator|&&
name|artistName
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|artistId
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"ARTIST_ID"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|artistId
operator|>
literal|0
operator|&&
name|artistId
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|dateOfBirth
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"DATE_OF_BIRTH"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dateOfBirth
operator|>
literal|0
operator|&&
name|dateOfBirth
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|iArtist
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"ARTIST"
operator|+
name|charEnd
operator|+
literal|" "
operator|+
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|iArtist
operator|>
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|iOrderBy
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|" ORDER BY "
argument_list|)
decl_stmt|;
name|int
name|dateOfBirth2
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"DATE_OF_BIRTH"
operator|+
name|charEnd
argument_list|,
name|iOrderBy
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|iOrderBy
operator|>
name|iArtist
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dateOfBirth2
operator|>
name|iOrderBy
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|DbEntity
name|entity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"ARTIST"
argument_list|)
decl_stmt|;
name|entity
operator|.
name|getDataMap
argument_list|()
operator|.
name|setQuotingSQLIdentifiers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSqlStringWithQuoteSqlIdentifiers2
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|ObjectSelect
argument_list|<
name|Artist
argument_list|>
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH
operator|.
name|gt
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH
operator|.
name|lt
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DbEntity
name|entity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"ARTIST"
argument_list|)
decl_stmt|;
name|entity
operator|.
name|getDataMap
argument_list|()
operator|.
name|setQuotingSQLIdentifiers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|charStart
init|=
name|unitAdapter
operator|.
name|getIdentifiersStartQuote
argument_list|()
decl_stmt|;
name|String
name|charEnd
init|=
name|unitAdapter
operator|.
name|getIdentifiersEndQuote
argument_list|()
decl_stmt|;
name|String
name|s
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
operator|.
name|getSql
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|iFrom
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|" FROM "
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|iFrom
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|artistName
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"ARTIST_NAME"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|artistName
operator|>
literal|0
operator|&&
name|artistName
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|artistId
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"ARTIST_ID"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|artistId
operator|>
literal|0
operator|&&
name|artistId
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|dateOfBirth
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"DATE_OF_BIRTH"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dateOfBirth
operator|>
literal|0
operator|&&
name|dateOfBirth
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|iArtist
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"ARTIST"
operator|+
name|charEnd
operator|+
literal|" "
operator|+
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|iArtist
operator|>
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|iWhere
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|" WHERE "
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|iWhere
operator|>
name|iArtist
argument_list|)
expr_stmt|;
name|int
name|dateOfBirth2
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"DATE_OF_BIRTH"
operator|+
name|charEnd
operator|+
literal|"> ?"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dateOfBirth2
operator|>
name|iWhere
argument_list|)
expr_stmt|;
name|int
name|iAnd
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|" AND "
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|iAnd
operator|>
name|iWhere
argument_list|)
expr_stmt|;
name|int
name|dateOfBirth3
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"DATE_OF_BIRTH"
operator|+
name|charEnd
operator|+
literal|"< ?"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dateOfBirth3
operator|>
name|iAnd
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|DbEntity
name|entity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"ARTIST"
argument_list|)
decl_stmt|;
name|entity
operator|.
name|getDataMap
argument_list|()
operator|.
name|setQuotingSQLIdentifiers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSqlStringWithQuoteSqlIdentifiers3
parameter_list|()
throws|throws
name|Exception
block|{
comment|// query with joint prefetches and other joins
comment|// and with QuoteSqlIdentifiers = true
try|try
block|{
name|ObjectSelect
argument_list|<
name|Artist
argument_list|>
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
operator|.
name|eq
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|joint
argument_list|()
argument_list|)
decl_stmt|;
name|DbEntity
name|entity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"ARTIST"
argument_list|)
decl_stmt|;
name|entity
operator|.
name|getDataMap
argument_list|()
operator|.
name|setQuotingSQLIdentifiers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|charStart
init|=
name|unitAdapter
operator|.
name|getIdentifiersStartQuote
argument_list|()
decl_stmt|;
name|String
name|charEnd
init|=
name|unitAdapter
operator|.
name|getIdentifiersEndQuote
argument_list|()
decl_stmt|;
name|String
name|s
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
operator|.
name|getSql
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|s
operator|.
name|startsWith
argument_list|(
literal|"SELECT DISTINCT "
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|iFrom
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|" FROM "
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iFrom
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|artistName
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"ARTIST_NAME"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|artistName
operator|>
literal|0
operator|&&
name|artistName
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|artistId
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"ARTIST_ID"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|artistId
operator|>
literal|0
operator|&&
name|artistId
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|dateOfBirth
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"DATE_OF_BIRTH"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|dateOfBirth
operator|>
literal|0
operator|&&
name|dateOfBirth
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|estimatedPrice
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t1"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"ESTIMATED_PRICE"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|estimatedPrice
operator|>
literal|0
operator|&&
name|estimatedPrice
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|paintingDescription
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t1"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"PAINTING_DESCRIPTION"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|paintingDescription
operator|>
literal|0
operator|&&
name|paintingDescription
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|paintingTitle
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t1"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"PAINTING_TITLE"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|paintingTitle
operator|>
literal|0
operator|&&
name|paintingTitle
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|artistIdT1
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t1"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"ARTIST_ID"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|artistIdT1
operator|>
literal|0
operator|&&
name|artistIdT1
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|galleryId
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t1"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"GALLERY_ID"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|galleryId
operator|>
literal|0
operator|&&
name|galleryId
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|paintingId
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t1"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"PAINTING_ID"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|paintingId
operator|>
literal|0
operator|&&
name|paintingId
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|iArtist
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"ARTIST"
operator|+
name|charEnd
operator|+
literal|" "
operator|+
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iArtist
operator|>
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|iLeftJoin
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"LEFT JOIN"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iLeftJoin
operator|>
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|iPainting
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"PAINTING"
operator|+
name|charEnd
operator|+
literal|" "
operator|+
name|charStart
operator|+
literal|"t1"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iPainting
operator|>
name|iLeftJoin
argument_list|)
expr_stmt|;
name|int
name|iOn
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|" ON "
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iOn
operator|>
name|iLeftJoin
argument_list|)
expr_stmt|;
name|int
name|iArtistId
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"ARTIST_ID"
operator|+
name|charEnd
argument_list|,
name|iLeftJoin
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iArtistId
operator|>
name|iOn
argument_list|)
expr_stmt|;
name|int
name|iArtistIdT1
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t1"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"ARTIST_ID"
operator|+
name|charEnd
argument_list|,
name|iLeftJoin
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iArtistIdT1
operator|>
name|iOn
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|,
name|iLeftJoin
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iArtistIdT1
operator|>
name|i
operator|||
name|iArtistId
operator|>
name|i
argument_list|)
expr_stmt|;
name|int
name|iJoin
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"JOIN"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iJoin
operator|>
name|iLeftJoin
argument_list|)
expr_stmt|;
name|int
name|iPainting2
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"PAINTING"
operator|+
name|charEnd
operator|+
literal|" "
operator|+
name|charStart
operator|+
literal|"t2"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iPainting2
operator|>
name|iJoin
argument_list|)
expr_stmt|;
name|int
name|iOn2
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|" ON "
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iOn2
operator|>
name|iJoin
argument_list|)
expr_stmt|;
name|int
name|iArtistId2
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"ARTIST_ID"
operator|+
name|charEnd
argument_list|,
name|iJoin
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iArtistId2
operator|>
name|iOn2
argument_list|)
expr_stmt|;
name|int
name|iArtistId2T2
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t2"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"ARTIST_ID"
operator|+
name|charEnd
argument_list|,
name|iJoin
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iArtistId2T2
operator|>
name|iOn2
argument_list|)
expr_stmt|;
name|int
name|i2
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|,
name|iJoin
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iArtistId2T2
operator|>
name|i2
operator|||
name|iArtistId2
operator|>
name|i2
argument_list|)
expr_stmt|;
name|int
name|iWhere
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|" WHERE "
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iWhere
operator|>
name|iJoin
argument_list|)
expr_stmt|;
name|int
name|paintingTitle2
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t2"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"PAINTING_TITLE"
operator|+
name|charEnd
operator|+
literal|" = ?"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|paintingTitle2
operator|>
name|iWhere
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|DbEntity
name|entity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"ARTIST"
argument_list|)
decl_stmt|;
name|entity
operator|.
name|getDataMap
argument_list|()
operator|.
name|setQuotingSQLIdentifiers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSqlStringWithQuoteSqlIdentifiers4
parameter_list|()
throws|throws
name|Exception
block|{
comment|// query with to-one joint prefetches
comment|// and with QuoteSqlIdentifiers = true
try|try
block|{
name|ObjectSelect
argument_list|<
name|Painting
argument_list|>
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Painting
operator|.
name|TO_ARTIST
operator|.
name|joint
argument_list|()
argument_list|)
decl_stmt|;
name|DbEntity
name|entity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"PAINTING"
argument_list|)
decl_stmt|;
name|entity
operator|.
name|getDataMap
argument_list|()
operator|.
name|setQuotingSQLIdentifiers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|charStart
init|=
name|unitAdapter
operator|.
name|getIdentifiersStartQuote
argument_list|()
decl_stmt|;
name|String
name|charEnd
init|=
name|unitAdapter
operator|.
name|getIdentifiersEndQuote
argument_list|()
decl_stmt|;
name|String
name|s
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
operator|.
name|getSql
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|s
operator|.
name|startsWith
argument_list|(
literal|"SELECT "
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|iFrom
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|" FROM "
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iFrom
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|paintingDescription
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"PAINTING_DESCRIPTION"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|paintingDescription
operator|>
literal|0
operator|&&
name|paintingDescription
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|paintingTitle
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"PAINTING_TITLE"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|paintingTitle
operator|>
literal|0
operator|&&
name|paintingTitle
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|artistIdT1
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"ARTIST_ID"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|artistIdT1
operator|>
literal|0
operator|&&
name|artistIdT1
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|estimatedPrice
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"ESTIMATED_PRICE"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|estimatedPrice
operator|>
literal|0
operator|&&
name|estimatedPrice
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|galleryId
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"GALLERY_ID"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|galleryId
operator|>
literal|0
operator|&&
name|galleryId
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|paintingId
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"PAINTING_ID"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|paintingId
operator|>
literal|0
operator|&&
name|paintingId
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|artistName
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t1"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"ARTIST_NAME"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|artistName
operator|>
literal|0
operator|&&
name|artistName
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|artistId
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t1"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"ARTIST_ID"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|artistId
operator|>
literal|0
operator|&&
name|artistId
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|dateOfBirth
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t1"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"DATE_OF_BIRTH"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|dateOfBirth
operator|>
literal|0
operator|&&
name|dateOfBirth
operator|<
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|iPainting
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"PAINTING"
operator|+
name|charEnd
operator|+
literal|" "
operator|+
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iPainting
operator|>
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|iLeftJoin
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"LEFT JOIN"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iLeftJoin
operator|>
name|iFrom
argument_list|)
expr_stmt|;
name|int
name|iArtist
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"ARTIST"
operator|+
name|charEnd
operator|+
literal|" "
operator|+
name|charStart
operator|+
literal|"t1"
operator|+
name|charEnd
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iArtist
operator|>
name|iLeftJoin
argument_list|)
expr_stmt|;
name|int
name|iOn
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|" ON "
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iOn
operator|>
name|iLeftJoin
argument_list|)
expr_stmt|;
name|int
name|iArtistId
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t0"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"ARTIST_ID"
operator|+
name|charEnd
argument_list|,
name|iLeftJoin
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iArtistId
operator|>
name|iOn
argument_list|)
expr_stmt|;
name|int
name|iArtistIdT1
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|charStart
operator|+
literal|"t1"
operator|+
name|charEnd
operator|+
literal|"."
operator|+
name|charStart
operator|+
literal|"ARTIST_ID"
operator|+
name|charEnd
argument_list|,
name|iLeftJoin
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iArtistIdT1
operator|>
name|iOn
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|,
name|iLeftJoin
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
argument_list|,
name|iArtistIdT1
operator|>
name|i
operator|||
name|iArtistId
operator|>
name|i
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|DbEntity
name|entity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"PAINTING"
argument_list|)
decl_stmt|;
name|entity
operator|.
name|getDataMap
argument_list|()
operator|.
name|setQuotingSQLIdentifiers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Tests columns generated for a simple object query. 	 */
annotation|@
name|Test
specifier|public
name|void
name|testBuildResultColumns1
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectSelect
argument_list|<
name|Painting
argument_list|>
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|SelectTranslator
name|tr
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|tr
operator|.
name|getSql
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columns
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|tr
operator|.
name|getResultColumns
argument_list|()
argument_list|)
decl_stmt|;
name|columns
operator|.
name|sort
argument_list|(
name|Comparator
operator|.
name|comparing
argument_list|(
name|ColumnDescriptor
operator|::
name|getName
argument_list|)
argument_list|)
expr_stmt|;
name|DbEntity
name|entity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"PAINTING"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DbAttribute
argument_list|>
name|attributes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|entity
operator|.
name|getAttributes
argument_list|()
argument_list|)
decl_stmt|;
name|attributes
operator|.
name|sort
argument_list|(
name|Comparator
operator|.
name|comparing
argument_list|(
name|DbAttribute
operator|::
name|getName
argument_list|)
argument_list|)
expr_stmt|;
comment|// all DbAttributes must be included
name|assertEquals
argument_list|(
name|attributes
operator|.
name|size
argument_list|()
argument_list|,
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DbAttribute
name|attribute
init|=
name|attributes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ColumnDescriptor
name|descriptor
init|=
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|attribute
argument_list|,
name|descriptor
operator|.
name|getAttribute
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|descriptor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|descriptor
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
argument_list|,
name|descriptor
operator|.
name|getJdbcType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Tests columns generated for an object query with joint prefetch. 	 */
annotation|@
name|Test
specifier|public
name|void
name|testBuildResultColumns2
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectSelect
argument_list|<
name|Painting
argument_list|>
name|q
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Painting
operator|.
name|TO_ARTIST
operator|.
name|joint
argument_list|()
argument_list|)
decl_stmt|;
name|SelectTranslator
name|tr
init|=
operator|new
name|DefaultSelectTranslator
argument_list|(
name|q
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|tr
operator|.
name|getSql
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ColumnDescriptor
argument_list|>
name|columns
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|tr
operator|.
name|getResultColumns
argument_list|()
argument_list|)
decl_stmt|;
name|columns
operator|.
name|sort
argument_list|(
name|Comparator
operator|.
name|comparing
argument_list|(
name|ColumnDescriptor
operator|::
name|getName
argument_list|)
argument_list|)
expr_stmt|;
name|DbEntity
name|rootEntity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"PAINTING"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DbAttribute
argument_list|>
name|attributes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rootEntity
operator|.
name|getAttributes
argument_list|()
argument_list|)
decl_stmt|;
name|DbEntity
name|joinedEntity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"ARTIST"
argument_list|)
decl_stmt|;
name|attributes
operator|.
name|addAll
argument_list|(
name|joinedEntity
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|sort
argument_list|(
name|Comparator
operator|.
name|comparing
argument_list|(
name|DbAttribute
operator|::
name|getName
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DbAttribute
name|attribute
init|=
name|attributes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ColumnDescriptor
name|descriptor
init|=
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|attribute
argument_list|,
name|descriptor
operator|.
name|getAttribute
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|descriptor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"ARTIST"
operator|.
name|equals
argument_list|(
name|attribute
operator|.
name|getEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"toArtist."
operator|+
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|descriptor
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|descriptor
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
argument_list|,
name|descriptor
operator|.
name|getJdbcType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

