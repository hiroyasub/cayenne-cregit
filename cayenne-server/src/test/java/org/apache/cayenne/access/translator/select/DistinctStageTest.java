begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|ColumnNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|DistinctStageTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|isUnsupportedForDistinct
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|DistinctStage
operator|.
name|isUnsupportedForDistinct
argument_list|(
name|Types
operator|.
name|BLOB
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DistinctStage
operator|.
name|isUnsupportedForDistinct
argument_list|(
name|Types
operator|.
name|CLOB
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DistinctStage
operator|.
name|isUnsupportedForDistinct
argument_list|(
name|Types
operator|.
name|NCLOB
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DistinctStage
operator|.
name|isUnsupportedForDistinct
argument_list|(
name|Types
operator|.
name|LONGVARCHAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DistinctStage
operator|.
name|isUnsupportedForDistinct
argument_list|(
name|Types
operator|.
name|LONGNVARCHAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|DistinctStage
operator|.
name|isUnsupportedForDistinct
argument_list|(
name|Types
operator|.
name|LONGVARBINARY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|DistinctStage
operator|.
name|isUnsupportedForDistinct
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|DistinctStage
operator|.
name|isUnsupportedForDistinct
argument_list|(
name|Types
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|DistinctStage
operator|.
name|isUnsupportedForDistinct
argument_list|(
name|Types
operator|.
name|CHAR
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|DistinctStage
operator|.
name|isUnsupportedForDistinct
argument_list|(
name|Types
operator|.
name|DECIMAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|DistinctStage
operator|.
name|isUnsupportedForDistinct
argument_list|(
name|Types
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|DistinctStage
operator|.
name|isUnsupportedForDistinct
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noSuppression
parameter_list|()
block|{
name|TranslatableQueryWrapper
name|wrapper
init|=
operator|new
name|MockQueryWrapperBuilder
argument_list|()
operator|.
name|withDistinct
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TranslatorContext
name|context
init|=
operator|new
name|MockTranslatorContext
argument_list|(
name|wrapper
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|isDistinctSuppression
argument_list|()
argument_list|)
expr_stmt|;
name|DistinctStage
name|stage
init|=
operator|new
name|DistinctStage
argument_list|()
decl_stmt|;
name|stage
operator|.
name|perform
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|isDistinctSuppression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|explicitSuppression
parameter_list|()
block|{
name|TranslatableQueryWrapper
name|wrapper
init|=
operator|new
name|MockQueryWrapperBuilder
argument_list|()
operator|.
name|withDistinct
argument_list|(
literal|true
argument_list|)
operator|.
name|withMetaData
argument_list|(
operator|new
name|MockQueryMetadataBuilder
argument_list|()
operator|.
name|withSuppressDistinct
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TranslatorContext
name|context
init|=
operator|new
name|MockTranslatorContext
argument_list|(
name|wrapper
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|isDistinctSuppression
argument_list|()
argument_list|)
expr_stmt|;
name|DistinctStage
name|stage
init|=
operator|new
name|DistinctStage
argument_list|()
decl_stmt|;
name|stage
operator|.
name|perform
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|isDistinctSuppression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|suppressionByType
parameter_list|()
block|{
name|TranslatableQueryWrapper
name|wrapper
init|=
operator|new
name|MockQueryWrapperBuilder
argument_list|()
operator|.
name|withDistinct
argument_list|(
literal|true
argument_list|)
operator|.
name|withMetaData
argument_list|(
operator|new
name|MockQueryMetadataBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TranslatorContext
name|context
init|=
operator|new
name|MockTranslatorContext
argument_list|(
name|wrapper
argument_list|)
decl_stmt|;
name|DbAttribute
name|attribute
init|=
operator|new
name|DbAttribute
argument_list|()
decl_stmt|;
name|attribute
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|LONGVARBINARY
argument_list|)
expr_stmt|;
name|Node
name|node
init|=
operator|new
name|ColumnNode
argument_list|(
literal|"t0"
argument_list|,
literal|"attr"
argument_list|,
literal|null
argument_list|,
name|attribute
argument_list|)
decl_stmt|;
name|context
operator|.
name|addResultNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|isDistinctSuppression
argument_list|()
argument_list|)
expr_stmt|;
name|DistinctStage
name|stage
init|=
operator|new
name|DistinctStage
argument_list|()
decl_stmt|;
name|stage
operator|.
name|perform
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|isDistinctSuppression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

