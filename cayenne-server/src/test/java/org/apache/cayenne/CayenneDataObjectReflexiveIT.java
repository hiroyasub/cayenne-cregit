begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|reflexive
operator|.
name|Other
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|reflexive
operator|.
name|Reflexive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|REFLEXIVE_PROJECT
argument_list|)
specifier|public
class|class
name|CayenneDataObjectReflexiveIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|ObjectContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ServerRuntime
name|runtime
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|addReflexiveParentAndChild
parameter_list|()
block|{
comment|// can add Reflexive Parent and Child, 100 times
specifier|final
name|int
name|attempts
init|=
literal|100
decl_stmt|;
name|int
name|errors
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attempts
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Reflexive
name|parent
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Reflexive
operator|.
name|class
argument_list|)
decl_stmt|;
name|parent
operator|.
name|setName
argument_list|(
literal|"parentA"
operator|+
name|i
argument_list|)
expr_stmt|;
comment|// and child is created and associated to "Parent"
specifier|final
name|Reflexive
name|child
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Reflexive
operator|.
name|class
argument_list|)
decl_stmt|;
name|child
operator|.
name|setName
argument_list|(
literal|"childA"
operator|+
name|i
argument_list|)
expr_stmt|;
name|child
operator|.
name|setToParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
try|try
block|{
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|errors
operator|++
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|context
operator|.
name|rollbackChanges
argument_list|()
expr_stmt|;
block|}
block|}
comment|// then no error occurred
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed on %s of %s attempts."
argument_list|,
name|errors
argument_list|,
name|attempts
argument_list|)
argument_list|,
literal|0
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addReflexiveParentAndChildWithOtherRelationshipOnParent
parameter_list|()
block|{
comment|// can add Reflexive Parent (that belongsTo Other) and Child,
comment|// we will do this 100 times, because it randomly does it correctly/incorrectly
comment|// given some "other" Object
specifier|final
name|Other
name|other
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Other
operator|.
name|class
argument_list|)
decl_stmt|;
name|other
operator|.
name|setName
argument_list|(
literal|"OtherB"
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
specifier|final
name|int
name|attempts
init|=
literal|100
decl_stmt|;
name|int
name|errors
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attempts
condition|;
name|i
operator|++
control|)
block|{
comment|// when parent is created and associated to "Other"
specifier|final
name|Reflexive
name|parent
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Reflexive
operator|.
name|class
argument_list|)
decl_stmt|;
name|parent
operator|.
name|setName
argument_list|(
literal|"parentB"
operator|+
name|i
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setToOther
argument_list|(
name|other
argument_list|)
expr_stmt|;
comment|// and child is created and associated to "Parent"
specifier|final
name|Reflexive
name|child
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Reflexive
operator|.
name|class
argument_list|)
decl_stmt|;
name|child
operator|.
name|setName
argument_list|(
literal|"childB"
operator|+
name|i
argument_list|)
expr_stmt|;
name|child
operator|.
name|setToParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
try|try
block|{
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|errors
operator|++
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|context
operator|.
name|rollbackChanges
argument_list|()
expr_stmt|;
block|}
block|}
comment|// then no error occurred
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed on %s of %s attempts."
argument_list|,
name|errors
argument_list|,
name|attempts
argument_list|)
argument_list|,
literal|0
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

