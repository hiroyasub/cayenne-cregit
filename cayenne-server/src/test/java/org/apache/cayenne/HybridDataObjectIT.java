begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|hybrid
operator|.
name|HybridEntity1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|hybrid
operator|.
name|HybridEntity2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|HYBRID_DATA_OBJECT_PROJECT
argument_list|)
specifier|public
class|class
name|HybridDataObjectIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ServerRuntime
name|runtime
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testCreateNew
parameter_list|()
block|{
name|HybridEntity1
name|entity1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|HybridEntity1
operator|.
name|class
argument_list|)
decl_stmt|;
name|HybridEntity2
name|entity2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|HybridEntity2
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|entity1
operator|.
name|values
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entity2
operator|.
name|values
argument_list|)
expr_stmt|;
name|HybridEntity1
name|selectEntity1
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|HybridEntity1
operator|.
name|class
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|selectEntity1
operator|.
name|getIntField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|selectEntity1
operator|.
name|getStrField
argument_list|()
argument_list|)
expr_stmt|;
name|HybridEntity2
name|selectEntity2
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|HybridEntity2
operator|.
name|class
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|selectEntity2
operator|.
name|getIntField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|selectEntity2
operator|.
name|getStrField
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetFieldAttributes
parameter_list|()
block|{
name|HybridEntity1
name|entity1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|HybridEntity1
operator|.
name|class
argument_list|)
decl_stmt|;
name|entity1
operator|.
name|setIntField
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|entity1
operator|.
name|setStrField
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|HybridEntity2
name|entity2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|HybridEntity2
operator|.
name|class
argument_list|)
decl_stmt|;
name|entity2
operator|.
name|setIntField
argument_list|(
literal|321
argument_list|)
expr_stmt|;
name|entity2
operator|.
name|setStrField
argument_list|(
literal|"cba"
argument_list|)
expr_stmt|;
name|entity2
operator|.
name|setHybridEntity1
argument_list|(
name|entity1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entity1
operator|.
name|values
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entity2
operator|.
name|values
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|HybridEntity1
name|selectEntity1
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|HybridEntity1
operator|.
name|class
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|selectEntity1
operator|.
name|getIntField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|selectEntity1
operator|.
name|getStrField
argument_list|()
argument_list|)
expr_stmt|;
name|HybridEntity2
name|selectEntity2
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|HybridEntity2
operator|.
name|class
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|321
argument_list|,
name|selectEntity2
operator|.
name|getIntField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cba"
argument_list|,
name|selectEntity2
operator|.
name|getStrField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|selectEntity1
argument_list|,
name|selectEntity2
operator|.
name|getHybridEntity1
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetDynamicDbAttributes
parameter_list|()
block|{
comment|// add attributes that in DbEntity but not mapped yet
name|addRuntimeAttribute
argument_list|(
name|HybridEntity1
operator|.
name|class
argument_list|,
literal|"FLOAT_FIELD"
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
name|addRuntimeAttribute
argument_list|(
name|HybridEntity2
operator|.
name|class
argument_list|,
literal|"BOOLEAN_FIELD"
argument_list|,
literal|"boolean"
argument_list|)
expr_stmt|;
try|try
block|{
name|HybridEntity1
name|entity1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|HybridEntity1
operator|.
name|class
argument_list|)
decl_stmt|;
name|entity1
operator|.
name|writeProperty
argument_list|(
literal|"FLOAT_FIELD"
argument_list|,
literal|3.14
argument_list|)
expr_stmt|;
name|HybridEntity2
name|entity2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|HybridEntity2
operator|.
name|class
argument_list|)
decl_stmt|;
name|entity2
operator|.
name|writeProperty
argument_list|(
literal|"BOOLEAN_FIELD"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entity1
operator|.
name|values
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entity2
operator|.
name|values
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|entity1
operator|.
name|writeProperty
argument_list|(
literal|"FLOAT_FIELD"
argument_list|,
literal|2.17
argument_list|)
expr_stmt|;
name|entity2
operator|.
name|writeProperty
argument_list|(
literal|"BOOLEAN_FIELD"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// attributes should be merged with context cache
name|HybridEntity1
name|selectEntity1
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|HybridEntity1
operator|.
name|class
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2.17
argument_list|,
name|selectEntity1
operator|.
name|readProperty
argument_list|(
literal|"FLOAT_FIELD"
argument_list|)
argument_list|)
expr_stmt|;
name|HybridEntity2
name|selectEntity2
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|HybridEntity2
operator|.
name|class
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|selectEntity2
operator|.
name|readProperty
argument_list|(
literal|"BOOLEAN_FIELD"
argument_list|)
argument_list|)
expr_stmt|;
comment|// attributes should be read from DB
name|ObjectContext
name|cleanContext
init|=
name|runtime
operator|.
name|newContext
argument_list|()
decl_stmt|;
name|HybridEntity1
name|selectCleanEntity1
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|HybridEntity1
operator|.
name|class
argument_list|)
operator|.
name|selectOne
argument_list|(
name|cleanContext
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3.14
argument_list|,
name|selectCleanEntity1
operator|.
name|readProperty
argument_list|(
literal|"FLOAT_FIELD"
argument_list|)
argument_list|)
expr_stmt|;
name|HybridEntity2
name|selectCleanEntity2
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|HybridEntity2
operator|.
name|class
argument_list|)
operator|.
name|selectOne
argument_list|(
name|cleanContext
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|selectCleanEntity2
operator|.
name|readProperty
argument_list|(
literal|"BOOLEAN_FIELD"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|removeRuntimeAttribute
argument_list|(
name|HybridEntity1
operator|.
name|class
argument_list|,
literal|"FLOAT_FIELD"
argument_list|)
expr_stmt|;
name|removeRuntimeAttribute
argument_list|(
name|HybridEntity2
operator|.
name|class
argument_list|,
literal|"BOOLEAN_FIELD"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetDynamicNonDbAttributes
parameter_list|()
block|{
comment|// test write arbitrary data into object
name|HybridEntity1
name|entity1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|HybridEntity1
operator|.
name|class
argument_list|)
decl_stmt|;
name|entity1
operator|.
name|writeProperty
argument_list|(
literal|"CUSTOM_NON_DB_ATTRIBUTE"
argument_list|,
literal|42L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42L
argument_list|,
name|entity1
operator|.
name|readProperty
argument_list|(
literal|"CUSTOM_NON_DB_ATTRIBUTE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entity1
operator|.
name|values
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|entity1
operator|.
name|writeProperty
argument_list|(
literal|"CUSTOM_NON_DB_ATTRIBUTE"
argument_list|,
literal|12L
argument_list|)
expr_stmt|;
name|HybridEntity1
name|selectEntity1
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|HybridEntity1
operator|.
name|class
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
comment|// this will be restored from context cache
name|assertEquals
argument_list|(
literal|12L
argument_list|,
name|selectEntity1
operator|.
name|readProperty
argument_list|(
literal|"CUSTOM_NON_DB_ATTRIBUTE"
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectContext
name|cleanContext
init|=
name|runtime
operator|.
name|newContext
argument_list|()
decl_stmt|;
name|HybridEntity1
name|selectCleanEntity1
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|HybridEntity1
operator|.
name|class
argument_list|)
operator|.
name|selectOne
argument_list|(
name|cleanContext
argument_list|)
decl_stmt|;
comment|// this will be read from db only
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|selectCleanEntity1
operator|.
name|readProperty
argument_list|(
literal|"CUSTOM_NON_DB_ATTRIBUTE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|HybridEntity1
name|entity1
init|=
operator|new
name|HybridEntity1
argument_list|()
decl_stmt|;
name|entity1
operator|.
name|setIntField
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|entity1
operator|.
name|setStrField
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|entity1
operator|.
name|writeProperty
argument_list|(
literal|"CUSTOM_PROPERTY"
argument_list|,
literal|3.14
argument_list|)
expr_stmt|;
name|HybridEntity1
name|clonedEntity1
init|=
name|Util
operator|.
name|cloneViaSerialization
argument_list|(
name|entity1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|clonedEntity1
operator|.
name|getIntField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|clonedEntity1
operator|.
name|getStrField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.14
argument_list|,
name|clonedEntity1
operator|.
name|readProperty
argument_list|(
literal|"CUSTOM_PROPERTY"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDirectPropertyWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|HybridEntity1
name|entity1
init|=
operator|new
name|HybridEntity1
argument_list|()
decl_stmt|;
name|HybridEntity2
name|entity2
init|=
operator|new
name|HybridEntity2
argument_list|()
decl_stmt|;
name|entity2
operator|.
name|writePropertyDirectly
argument_list|(
literal|"intField"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|entity2
operator|.
name|writePropertyDirectly
argument_list|(
literal|"strField"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entity2
operator|.
name|values
argument_list|)
expr_stmt|;
name|entity2
operator|.
name|writePropertyDirectly
argument_list|(
literal|"CUSTOM_PROPERTY"
argument_list|,
literal|3.14
argument_list|)
expr_stmt|;
name|entity2
operator|.
name|writePropertyDirectly
argument_list|(
literal|"hybridEntity1"
argument_list|,
name|entity1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entity2
operator|.
name|values
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|entity2
operator|.
name|readPropertyDirectly
argument_list|(
literal|"intField"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|entity2
operator|.
name|readPropertyDirectly
argument_list|(
literal|"strField"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.14
argument_list|,
name|entity2
operator|.
name|readPropertyDirectly
argument_list|(
literal|"CUSTOM_PROPERTY"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entity1
argument_list|,
name|entity2
operator|.
name|readPropertyDirectly
argument_list|(
literal|"hybridEntity1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addRuntimeAttribute
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|entityClass
parameter_list|,
name|String
name|attributeName
parameter_list|,
name|String
name|attributeType
parameter_list|)
block|{
name|ObjEntity
name|entity
init|=
name|runtime
operator|.
name|getDataDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getObjEntity
argument_list|(
name|entityClass
argument_list|)
decl_stmt|;
name|ObjAttribute
name|attribute
init|=
operator|new
name|ObjAttribute
argument_list|()
decl_stmt|;
name|attribute
operator|.
name|setName
argument_list|(
name|attributeName
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|setDbAttributePath
argument_list|(
name|attributeName
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|setType
argument_list|(
name|attributeType
argument_list|)
expr_stmt|;
name|entity
operator|.
name|addAttribute
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|removeRuntimeAttribute
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|entityClass
parameter_list|,
name|String
name|attributeName
parameter_list|)
block|{
name|ObjEntity
name|entity
init|=
name|runtime
operator|.
name|getDataDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getObjEntity
argument_list|(
name|entityClass
argument_list|)
decl_stmt|;
name|entity
operator|.
name|removeAttribute
argument_list|(
name|attributeName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

