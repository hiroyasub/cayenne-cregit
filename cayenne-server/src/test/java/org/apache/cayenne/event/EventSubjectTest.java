begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|event
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_class
specifier|public
class|class
name|EventSubjectTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testIllegalArguments
parameter_list|()
block|{
try|try
block|{
name|EventSubject
operator|.
name|getSubject
argument_list|(
literal|null
argument_list|,
literal|"Subject"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// OK
block|}
try|try
block|{
name|EventSubject
operator|.
name|getSubject
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// OK
block|}
try|try
block|{
name|EventSubject
operator|.
name|getSubject
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// OK
block|}
block|}
specifier|public
name|void
name|testEqualityOfClonedSubjects
parameter_list|()
throws|throws
name|Exception
block|{
name|EventSubject
name|s1
init|=
name|EventSubject
operator|.
name|getSubject
argument_list|(
name|EventSubjectTest
operator|.
name|class
argument_list|,
literal|"MySubject"
argument_list|)
decl_stmt|;
name|EventSubject
name|s2
init|=
operator|(
name|EventSubject
operator|)
name|Util
operator|.
name|cloneViaSerialization
argument_list|(
name|s1
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|s2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIdenticalSubject
parameter_list|()
block|{
name|EventSubject
name|s1
init|=
name|EventSubject
operator|.
name|getSubject
argument_list|(
name|EventSubjectTest
operator|.
name|class
argument_list|,
literal|"MySubject"
argument_list|)
decl_stmt|;
name|EventSubject
name|s2
init|=
name|EventSubject
operator|.
name|getSubject
argument_list|(
name|EventSubjectTest
operator|.
name|class
argument_list|,
literal|"MySubject"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEqualityOfIdenticalSubjects
parameter_list|()
block|{
name|EventSubject
name|s1
init|=
name|EventSubject
operator|.
name|getSubject
argument_list|(
name|EventSubjectTest
operator|.
name|class
argument_list|,
literal|"MySubject"
argument_list|)
decl_stmt|;
name|EventSubject
name|s2
init|=
name|EventSubject
operator|.
name|getSubject
argument_list|(
name|EventSubjectTest
operator|.
name|class
argument_list|,
literal|"MySubject"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEqualityOfSubjectsByDifferentOwner
parameter_list|()
block|{
name|EventSubject
name|s1
init|=
name|EventSubject
operator|.
name|getSubject
argument_list|(
name|EventSubject
operator|.
name|class
argument_list|,
literal|"MySubject"
argument_list|)
decl_stmt|;
name|EventSubject
name|s2
init|=
name|EventSubject
operator|.
name|getSubject
argument_list|(
name|EventSubjectTest
operator|.
name|class
argument_list|,
literal|"MySubject"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|s1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEqualityOfSubjectsByDifferentTopic
parameter_list|()
block|{
name|EventSubject
name|s1
init|=
name|EventSubject
operator|.
name|getSubject
argument_list|(
name|EventSubjectTest
operator|.
name|class
argument_list|,
literal|"Subject1"
argument_list|)
decl_stmt|;
name|EventSubject
name|s2
init|=
name|EventSubject
operator|.
name|getSubject
argument_list|(
name|EventSubjectTest
operator|.
name|class
argument_list|,
literal|"Subject2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|s1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSubjectEqualsNull
parameter_list|()
block|{
name|EventSubject
name|s1
init|=
name|EventSubject
operator|.
name|getSubject
argument_list|(
name|EventSubjectTest
operator|.
name|class
argument_list|,
literal|"MySubject"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|s1
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: (Andrus) This test can not be run reliably and in fact consistently
comment|// fails in some environments, since forcing GC at a certain time is not
comment|// guaranteed.
comment|/*      * public void testSubjectGC() { EventSubject s =      * EventSubject.getSubject(EventSubjectTst.class, "GCSubject"); long hash1 =      * s.hashCode(); // try to make the subject go away s = null; System.gc();      * System.gc(); s = EventSubject.getSubject(EventSubjectTst.class,      * "GCSubject"); long hash2 = s.hashCode(); Assert.assertTrue(hash1 !=      * hash2); }      */
block|}
end_class

end_unit

