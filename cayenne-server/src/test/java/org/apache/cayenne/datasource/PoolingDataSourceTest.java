begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|datasource
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|datasource
operator|.
name|PoolAwareConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|datasource
operator|.
name|UnmanagedPoolingDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|datasource
operator|.
name|PoolingDataSourceParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
specifier|public
class|class
name|PoolingDataSourceTest
block|{
specifier|private
name|DataSource
name|nonPooling
decl_stmt|;
specifier|private
name|PoolingDataSourceParameters
name|params
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|SQLException
block|{
name|nonPooling
operator|=
name|mock
argument_list|(
name|DataSource
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nonPooling
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Connection
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Connection
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|mock
argument_list|(
name|Connection
operator|.
name|class
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|PoolingDataSourceParameters
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testManagePool_High
parameter_list|()
throws|throws
name|SQLException
block|{
name|int
name|max
init|=
literal|5
decl_stmt|;
name|params
operator|.
name|setMinConnections
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|params
operator|.
name|setMaxConnections
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|UnmanagedPoolingDataSource
name|ds
init|=
operator|new
name|UnmanagedPoolingDataSource
argument_list|(
name|nonPooling
argument_list|,
name|params
argument_list|)
decl_stmt|;
comment|// opening and closing 'max' connections should fill the pool to the
comment|// top...
name|Connection
index|[]
name|open
init|=
operator|new
name|Connection
index|[
name|max
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|max
condition|;
name|i
operator|++
control|)
block|{
name|open
index|[
name|i
index|]
operator|=
name|ds
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Connection
name|c
range|:
name|open
control|)
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// now we can start calling 'managePool', and it would close connections
comment|// one at a time until we reach a threshold on idle
name|assertEquals
argument_list|(
name|max
argument_list|,
name|ds
operator|.
name|poolSize
argument_list|()
argument_list|)
expr_stmt|;
name|ds
operator|.
name|managePool
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|max
operator|-
literal|1
argument_list|,
name|ds
operator|.
name|poolSize
argument_list|()
argument_list|)
expr_stmt|;
name|ds
operator|.
name|managePool
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|max
operator|-
literal|2
argument_list|,
name|ds
operator|.
name|poolSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// pool equilibrium was reached. subsequent calls should not open or
comment|// close connections
name|ds
operator|.
name|managePool
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|max
operator|-
literal|2
argument_list|,
name|ds
operator|.
name|poolSize
argument_list|()
argument_list|)
expr_stmt|;
name|ds
operator|.
name|managePool
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|max
operator|-
literal|2
argument_list|,
name|ds
operator|.
name|poolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testManagePool_Low
parameter_list|()
throws|throws
name|SQLException
block|{
name|int
name|min
init|=
literal|2
decl_stmt|;
name|params
operator|.
name|setMinConnections
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|params
operator|.
name|setMaxConnections
argument_list|(
name|min
operator|+
literal|5
argument_list|)
expr_stmt|;
name|UnmanagedPoolingDataSource
name|ds
init|=
operator|new
name|UnmanagedPoolingDataSource
argument_list|(
name|nonPooling
argument_list|,
name|params
argument_list|)
decl_stmt|;
comment|// we start with a min number of connections
name|assertEquals
argument_list|(
name|min
argument_list|,
name|ds
operator|.
name|poolSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// now lets evict a bunch of connections before we can start growing the
comment|// pool again
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|min
condition|;
name|i
operator|++
control|)
block|{
name|ds
operator|.
name|retire
argument_list|(
name|ds
operator|.
name|uncheckNonBlocking
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// now we can start calling 'managePool', and it would open connections
comment|// one at a time
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ds
operator|.
name|poolSize
argument_list|()
argument_list|)
expr_stmt|;
name|ds
operator|.
name|managePool
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ds
operator|.
name|poolSize
argument_list|()
argument_list|)
expr_stmt|;
name|ds
operator|.
name|managePool
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ds
operator|.
name|poolSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// pool equilibrium was reached. subsequent calls should not open or
comment|// close connections
name|ds
operator|.
name|managePool
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ds
operator|.
name|poolSize
argument_list|()
argument_list|)
expr_stmt|;
name|ds
operator|.
name|managePool
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ds
operator|.
name|poolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testManagePool_Empty
parameter_list|()
throws|throws
name|SQLException
block|{
name|int
name|max
init|=
literal|5
decl_stmt|;
name|params
operator|.
name|setMinConnections
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|params
operator|.
name|setMaxConnections
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|UnmanagedPoolingDataSource
name|ds
init|=
operator|new
name|UnmanagedPoolingDataSource
argument_list|(
name|nonPooling
argument_list|,
name|params
argument_list|)
decl_stmt|;
comment|// opening and closing 'max' connections should fill the pool to the
comment|// top...
name|Connection
index|[]
name|open
init|=
operator|new
name|Connection
index|[
name|max
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|max
condition|;
name|i
operator|++
control|)
block|{
name|open
index|[
name|i
index|]
operator|=
name|ds
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
comment|// all connections are in use, so managePool should do nothing
name|assertEquals
argument_list|(
name|max
argument_list|,
name|ds
operator|.
name|poolSize
argument_list|()
argument_list|)
expr_stmt|;
name|ds
operator|.
name|managePool
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|max
argument_list|,
name|ds
operator|.
name|poolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidateUnchecked
parameter_list|()
block|{
specifier|final
name|PoolAwareConnection
index|[]
name|connections
init|=
name|validConnections
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|params
operator|.
name|setMinConnections
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|params
operator|.
name|setMaxConnections
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|UnmanagedPoolingDataSource
name|ds
init|=
operator|new
name|UnmanagedPoolingDataSource
argument_list|(
name|nonPooling
argument_list|,
name|params
argument_list|)
block|{
name|int
name|i
decl_stmt|;
annotation|@
name|Override
name|PoolAwareConnection
name|createWrapped
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|connections
index|[
name|i
operator|++
index|]
return|;
block|}
block|}
decl_stmt|;
comment|// now that the pool is created, invalidate a few leading connections
name|when
argument_list|(
name|connections
index|[
literal|0
index|]
operator|.
name|validate
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connections
index|[
literal|1
index|]
operator|.
name|validate
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Connection
name|faceHeadConnection
init|=
name|mock
argument_list|(
name|Connection
operator|.
name|class
argument_list|)
decl_stmt|;
name|PoolAwareConnection
name|fakeHead
init|=
name|mock
argument_list|(
name|PoolAwareConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fakeHead
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|faceHeadConnection
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|connections
index|[
literal|2
index|]
argument_list|,
name|ds
operator|.
name|validateUnchecked
argument_list|(
name|fakeHead
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetConnection_UpperCap
parameter_list|()
throws|throws
name|SQLException
block|{
name|int
name|max
init|=
literal|5
decl_stmt|;
name|params
operator|.
name|setMaxConnections
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|params
operator|.
name|setMaxQueueWaitTime
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|UnmanagedPoolingDataSource
name|ds
init|=
operator|new
name|UnmanagedPoolingDataSource
argument_list|(
name|nonPooling
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|Connection
index|[]
name|unchecked
init|=
operator|new
name|Connection
index|[
name|max
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|max
condition|;
name|i
operator|++
control|)
block|{
name|unchecked
index|[
name|i
index|]
operator|=
name|ds
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|ds
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Pool overflow not checked"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// expected ... all connections are taken
block|}
comment|// return one connection ... it should become immediately available
name|unchecked
index|[
literal|0
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
name|Connection
name|c
init|=
name|ds
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|PoolAwareConnection
index|[]
name|validConnections
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|PoolAwareConnection
index|[]
name|connections
init|=
operator|new
name|PoolAwareConnection
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Connection
name|c
init|=
name|mock
argument_list|(
name|Connection
operator|.
name|class
argument_list|)
decl_stmt|;
name|connections
index|[
name|i
index|]
operator|=
name|mock
argument_list|(
name|PoolAwareConnection
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connections
index|[
name|i
index|]
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connections
index|[
name|i
index|]
operator|.
name|validate
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|connections
return|;
block|}
block|}
end_class

end_unit

