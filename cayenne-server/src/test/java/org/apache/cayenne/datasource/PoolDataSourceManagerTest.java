begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|datasource
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
specifier|public
class|class
name|PoolDataSourceManagerTest
block|{
specifier|private
name|UnmanagedPoolingDataSource
name|mockPoolingDataSource
decl_stmt|;
specifier|private
name|PoolingDataSourceManager
name|dataSourceManager
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|SQLException
block|{
name|this
operator|.
name|mockPoolingDataSource
operator|=
name|mock
argument_list|(
name|UnmanagedPoolingDataSource
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataSourceManager
operator|=
operator|new
name|PoolingDataSourceManager
argument_list|(
name|mockPoolingDataSource
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
block|{
name|dataSourceManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRun_Manage
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
index|[]
name|counter
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|counter
index|[
literal|0
index|]
operator|++
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|mockPoolingDataSource
argument_list|)
operator|.
name|managePool
argument_list|()
expr_stmt|;
name|dataSourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// we can't predict the number of 'managePool' invocations, but it
comment|// should be incrementing as the time goes
name|int
name|c0
init|=
name|counter
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|c0
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|int
name|c1
init|=
name|counter
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|c1
operator|>
name|c0
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|int
name|c2
init|=
name|counter
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|c2
operator|>
name|c1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

