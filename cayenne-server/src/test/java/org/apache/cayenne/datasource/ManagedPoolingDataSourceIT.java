begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|datasource
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|OngoingStubbing
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|ManagedPoolingDataSourceIT
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ManagedPoolingDataSourceIT
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|int
name|poolSize
decl_stmt|;
specifier|private
name|OnOffDataSourceManager
name|dataSourceManager
decl_stmt|;
specifier|private
name|UnmanagedPoolingDataSource
name|unmanagedPool
decl_stmt|;
specifier|private
name|ManagedPoolingDataSource
name|managedPool
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|SQLException
block|{
name|this
operator|.
name|poolSize
operator|=
literal|4
expr_stmt|;
name|this
operator|.
name|dataSourceManager
operator|=
operator|new
name|OnOffDataSourceManager
argument_list|()
expr_stmt|;
name|PoolingDataSourceParameters
name|parameters
init|=
operator|new
name|PoolingDataSourceParameters
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|setMaxConnections
argument_list|(
name|poolSize
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setMinConnections
argument_list|(
name|poolSize
operator|/
literal|2
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setMaxQueueWaitTime
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setValidationQuery
argument_list|(
literal|"SELECT 1"
argument_list|)
expr_stmt|;
name|this
operator|.
name|unmanagedPool
operator|=
operator|new
name|UnmanagedPoolingDataSource
argument_list|(
name|dataSourceManager
operator|.
name|mockDataSource
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|this
operator|.
name|managedPool
operator|=
operator|new
name|ManagedPoolingDataSource
argument_list|(
name|unmanagedPool
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
block|{
if|if
condition|(
name|managedPool
operator|!=
literal|null
condition|)
block|{
name|managedPool
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Collection
argument_list|<
name|PoolTask
argument_list|>
name|createTasks
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|Collection
argument_list|<
name|PoolTask
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|tasks
operator|.
name|add
argument_list|(
operator|new
name|PoolTask
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tasks
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetConnection_OnBackendShutdown
parameter_list|()
throws|throws
name|SQLException
throws|,
name|InterruptedException
block|{
comment|// note that this assertion can only work reliably when the pool is inactive...
name|assertEquals
argument_list|(
name|poolSize
argument_list|,
name|managedPool
operator|.
name|poolSize
argument_list|()
operator|+
name|managedPool
operator|.
name|canExpandSize
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|PoolTask
argument_list|>
name|tasks
init|=
name|createTasks
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|4
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|PoolTask
name|task
range|:
name|tasks
control|)
block|{
name|executor
operator|.
name|submit
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
name|dataSourceManager
operator|.
name|off
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|PoolTask
name|task
range|:
name|tasks
control|)
block|{
name|executor
operator|.
name|submit
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|dataSourceManager
operator|.
name|on
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|PoolTask
name|task
range|:
name|tasks
control|)
block|{
name|executor
operator|.
name|submit
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// note that this assertion can only work reliably when the pool is inactive...
name|assertEquals
argument_list|(
name|poolSize
argument_list|,
name|managedPool
operator|.
name|poolSize
argument_list|()
operator|+
name|managedPool
operator|.
name|canExpandSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
class|class
name|PoolTask
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
init|(
name|Connection
name|c
init|=
name|managedPool
operator|.
name|getConnection
argument_list|()
init|;
init|)
block|{
try|try
init|(
name|Statement
name|s
init|=
name|c
operator|.
name|createStatement
argument_list|()
init|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|40
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
if|if
condition|(
name|OnOffDataSourceManager
operator|.
name|NO_CONNECTIONS_MESSAGE
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"db down..."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"error getting connection"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|static
class|class
name|OnOffDataSourceManager
block|{
specifier|static
specifier|final
name|String
name|NO_CONNECTIONS_MESSAGE
init|=
literal|"no connections at the moment"
decl_stmt|;
specifier|private
name|DataSource
name|mockDataSource
decl_stmt|;
specifier|private
name|OngoingStubbing
argument_list|<
name|Connection
argument_list|>
name|createConnectionMock
decl_stmt|;
name|OnOffDataSourceManager
parameter_list|()
throws|throws
name|SQLException
block|{
name|this
operator|.
name|mockDataSource
operator|=
name|mock
argument_list|(
name|DataSource
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|createConnectionMock
operator|=
name|when
argument_list|(
name|mockDataSource
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
name|on
argument_list|()
expr_stmt|;
block|}
name|void
name|off
parameter_list|()
throws|throws
name|SQLException
block|{
name|createConnectionMock
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Connection
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Connection
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
name|NO_CONNECTIONS_MESSAGE
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|void
name|on
parameter_list|()
throws|throws
name|SQLException
block|{
name|createConnectionMock
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Connection
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Connection
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Connection
name|c
init|=
name|mock
argument_list|(
name|Connection
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|c
operator|.
name|createStatement
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Statement
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Statement
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|ResultSet
name|mockRs
init|=
name|mock
argument_list|(
name|ResultSet
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockRs
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Statement
name|mockStatement
init|=
name|mock
argument_list|(
name|Statement
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockStatement
operator|.
name|executeQuery
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockRs
argument_list|)
expr_stmt|;
return|return
name|mockStatement
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

