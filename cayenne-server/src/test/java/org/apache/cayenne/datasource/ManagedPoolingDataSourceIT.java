begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|datasource
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|OngoingStubbing
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|ManagedPoolingDataSourceIT
block|{
specifier|private
name|int
name|poolSize
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ExpiringConnection
argument_list|,
name|Object
argument_list|>
name|connections
decl_stmt|;
specifier|private
name|UnmanagedPoolingDataSource
name|unmanagedPool
decl_stmt|;
specifier|private
name|ManagedPoolingDataSource
name|managedPool
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|SQLException
block|{
name|this
operator|.
name|poolSize
operator|=
literal|3
expr_stmt|;
name|this
operator|.
name|connections
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|DataSource
name|mockDataSource
init|=
name|mock
argument_list|(
name|DataSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockDataSource
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Connection
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Connection
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|createMockConnection
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|PoolingDataSourceParameters
name|parameters
init|=
operator|new
name|PoolingDataSourceParameters
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|setMaxConnections
argument_list|(
name|poolSize
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setMinConnections
argument_list|(
name|poolSize
operator|-
literal|1
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setMaxQueueWaitTime
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setValidationQuery
argument_list|(
literal|"SELECT 1"
argument_list|)
expr_stmt|;
name|this
operator|.
name|unmanagedPool
operator|=
operator|new
name|UnmanagedPoolingDataSource
argument_list|(
name|mockDataSource
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|this
operator|.
name|managedPool
operator|=
operator|new
name|ManagedPoolingDataSource
argument_list|(
name|unmanagedPool
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Connection
name|createMockConnection
parameter_list|()
throws|throws
name|SQLException
block|{
name|ExpiringConnection
name|connectionWrapper
init|=
operator|new
name|ExpiringConnection
argument_list|()
decl_stmt|;
name|connections
operator|.
name|put
argument_list|(
name|connectionWrapper
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|connectionWrapper
operator|.
name|mockConnection
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
block|{
if|if
condition|(
name|managedPool
operator|!=
literal|null
condition|)
block|{
name|managedPool
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|expireConnections
parameter_list|()
throws|throws
name|SQLException
block|{
name|Iterator
argument_list|<
name|ExpiringConnection
argument_list|>
name|it
init|=
name|connections
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExpiringConnection
name|c
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|c
operator|.
name|expire
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAbruptReset
parameter_list|()
throws|throws
name|SQLException
block|{
name|assertTrue
argument_list|(
name|managedPool
operator|.
name|poolSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|managedPool
operator|.
name|availableSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// make sure conn
name|expireConnections
argument_list|()
expr_stmt|;
comment|// CAY-2067 ... this should work on an invalid pool
name|assertNotNull
argument_list|(
name|managedPool
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|ExpiringConnection
block|{
specifier|private
name|Connection
name|mockConnection
decl_stmt|;
specifier|private
name|OngoingStubbing
argument_list|<
name|Statement
argument_list|>
name|createStatementMock
decl_stmt|;
name|ExpiringConnection
parameter_list|()
throws|throws
name|SQLException
block|{
name|this
operator|.
name|mockConnection
operator|=
name|mock
argument_list|(
name|Connection
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|createStatementMock
operator|=
name|when
argument_list|(
name|mockConnection
operator|.
name|createStatement
argument_list|()
argument_list|)
expr_stmt|;
name|createStatementMock
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Statement
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Statement
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|ResultSet
name|mockRs
init|=
name|mock
argument_list|(
name|ResultSet
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockRs
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Statement
name|mockStatement
init|=
name|mock
argument_list|(
name|Statement
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockStatement
operator|.
name|executeQuery
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockRs
argument_list|)
expr_stmt|;
return|return
name|mockStatement
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|void
name|expire
parameter_list|()
throws|throws
name|SQLException
block|{
name|createStatementMock
operator|.
name|thenThrow
argument_list|(
operator|new
name|SQLException
argument_list|(
literal|"Expired"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

