begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ASTEqualTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testToEJBQL
parameter_list|()
block|{
name|ASTEqual
name|e
init|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|"bla"
argument_list|)
decl_stmt|;
comment|// note single quotes - EJBQL does not support doublequotes...
name|assertEquals
argument_list|(
literal|"x.artistName = 'bla'"
argument_list|,
name|e
operator|.
name|toEJBQL
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendAsEJBQL
parameter_list|()
throws|throws
name|IOException
block|{
name|ASTEqual
name|e
init|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|"bla"
argument_list|)
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|e
operator|.
name|appendAsEJBQL
argument_list|(
name|buffer
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|String
name|ejbql
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.artistName = 'bla'"
argument_list|,
name|ejbql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluate
parameter_list|()
block|{
name|ASTEqual
name|equalTo
init|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|"abc"
argument_list|)
decl_stmt|;
name|Artist
name|match
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|match
operator|.
name|setArtistName
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|equalTo
operator|.
name|match
argument_list|(
name|match
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|noMatch
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|noMatch
operator|.
name|setArtistName
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Failed: "
operator|+
name|equalTo
argument_list|,
name|equalTo
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluate_Null
parameter_list|()
block|{
name|ASTEqual
name|equalToNull
init|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ASTEqual
name|equalToNotNull
init|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|"abc"
argument_list|)
decl_stmt|;
name|Artist
name|match
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|equalToNull
operator|.
name|match
argument_list|(
name|match
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|equalToNotNull
operator|.
name|match
argument_list|(
name|match
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|noMatch
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|noMatch
operator|.
name|setArtistName
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|equalToNull
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluate_BigDecimal
parameter_list|()
block|{
name|BigDecimal
name|bd1
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"2.0"
argument_list|)
decl_stmt|;
name|BigDecimal
name|bd2
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"2.0"
argument_list|)
decl_stmt|;
name|BigDecimal
name|bd3
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"2.00"
argument_list|)
decl_stmt|;
name|BigDecimal
name|bd4
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"2.01"
argument_list|)
decl_stmt|;
name|ASTEqual
name|equalTo
init|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
name|Painting
operator|.
name|ESTIMATED_PRICE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|bd1
argument_list|)
decl_stmt|;
name|Painting
name|p
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|p
operator|.
name|setEstimatedPrice
argument_list|(
name|bd2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|equalTo
operator|.
name|match
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
comment|// BigDecimals must compare regardless of the number of trailing zeros
comment|// (see CAY-280)
name|p
operator|.
name|setEstimatedPrice
argument_list|(
name|bd3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|equalTo
operator|.
name|match
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setEstimatedPrice
argument_list|(
name|bd4
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|equalTo
operator|.
name|match
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

