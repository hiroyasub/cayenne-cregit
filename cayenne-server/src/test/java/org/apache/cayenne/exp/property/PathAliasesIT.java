begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Cayenne
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTObjPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Gallery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|PathAliasesIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createArtistsDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|tArtist
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"ARTIST"
argument_list|)
decl_stmt|;
name|tArtist
operator|.
name|setColumns
argument_list|(
literal|"ARTIST_ID"
argument_list|,
literal|"ARTIST_NAME"
argument_list|,
literal|"DATE_OF_BIRTH"
argument_list|)
expr_stmt|;
name|long
name|dateBase
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|tArtist
operator|.
name|insert
argument_list|(
name|i
argument_list|,
literal|"artist"
operator|+
name|i
argument_list|,
operator|new
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|(
name|dateBase
operator|+
literal|10000
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TableHelper
name|tGallery
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"GALLERY"
argument_list|)
decl_stmt|;
name|tGallery
operator|.
name|setColumns
argument_list|(
literal|"GALLERY_ID"
argument_list|,
literal|"GALLERY_NAME"
argument_list|)
expr_stmt|;
name|tGallery
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"tate modern"
argument_list|)
expr_stmt|;
name|TableHelper
name|tGallery1
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"GALLERY"
argument_list|)
decl_stmt|;
name|tGallery1
operator|.
name|setColumns
argument_list|(
literal|"GALLERY_ID"
argument_list|,
literal|"GALLERY_NAME"
argument_list|)
expr_stmt|;
name|tGallery1
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"test gallery"
argument_list|)
expr_stmt|;
name|TableHelper
name|tPaintings
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"PAINTING"
argument_list|)
decl_stmt|;
name|tPaintings
operator|.
name|setColumns
argument_list|(
literal|"PAINTING_ID"
argument_list|,
literal|"PAINTING_TITLE"
argument_list|,
literal|"ARTIST_ID"
argument_list|,
literal|"GALLERY_ID"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|tPaintings
operator|.
name|insert
argument_list|(
name|i
argument_list|,
literal|"painting"
operator|+
name|i
argument_list|,
name|i
operator|%
literal|2
operator|==
literal|0
condition|?
literal|4
else|:
name|i
operator|%
literal|5
operator|+
literal|1
argument_list|,
name|i
operator|%
literal|2
operator|==
literal|0
condition|?
literal|2
else|:
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBeginAlias
parameter_list|()
block|{
name|List
argument_list|<
name|Artist
argument_list|>
name|artists
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|alias
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
operator|.
name|eq
argument_list|(
literal|"painting2"
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|alias
argument_list|(
literal|"p2"
argument_list|)
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
operator|.
name|eq
argument_list|(
literal|"painting4"
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist4"
argument_list|,
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTheSameAliases
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|results
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|alias
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|alias
argument_list|(
literal|"p2"
argument_list|)
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
argument_list|)
operator|.
name|where
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|alias
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
operator|.
name|eq
argument_list|(
literal|"painting2"
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|alias
argument_list|(
literal|"p2"
argument_list|)
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
operator|.
name|eq
argument_list|(
literal|"painting4"
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist4"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"painting2"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"painting4"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMiddleAlias
parameter_list|()
block|{
name|List
argument_list|<
name|Artist
argument_list|>
name|artists
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|TO_GALLERY
argument_list|)
operator|.
name|dot
argument_list|(
name|Gallery
operator|.
name|PAINTING_ARRAY
argument_list|)
operator|.
name|alias
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
operator|.
name|eq
argument_list|(
literal|"painting2"
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|TO_GALLERY
argument_list|)
operator|.
name|dot
argument_list|(
name|Gallery
operator|.
name|PAINTING_ARRAY
argument_list|)
operator|.
name|alias
argument_list|(
literal|"p2"
argument_list|)
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
operator|.
name|eq
argument_list|(
literal|"painting4"
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist4"
argument_list|,
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEntityPropertyAliases
parameter_list|()
block|{
name|Artist
name|artist
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SelectQuery
argument_list|<
name|Painting
argument_list|>
name|query
init|=
name|SelectQuery
operator|.
name|query
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|expression
init|=
name|Painting
operator|.
name|TO_ARTIST
operator|.
name|alias
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|eq
argument_list|(
name|artist
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|paintings
init|=
name|query
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|paintings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"painting5"
argument_list|,
name|paintings
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPaintingTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAliases
parameter_list|()
block|{
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query1
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|expression
init|=
name|ExpressionFactory
operator|.
name|and
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|alias
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
operator|.
name|eq
argument_list|(
literal|"painting2"
argument_list|)
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|alias
argument_list|(
literal|"p2"
argument_list|)
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
operator|.
name|eq
argument_list|(
literal|"painting4"
argument_list|)
argument_list|)
decl_stmt|;
name|query1
operator|.
name|setQualifier
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|artists
init|=
name|query1
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist4"
argument_list|,
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAliasForPath
parameter_list|()
block|{
name|ASTPath
name|astPath
init|=
operator|new
name|ASTObjPath
argument_list|(
literal|"paintingArray.a.galleryName"
argument_list|)
decl_stmt|;
name|astPath
operator|.
name|setPathAliases
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
literal|"toGallery"
argument_list|)
argument_list|)
expr_stmt|;
name|ASTEqual
name|astEqual
init|=
operator|new
name|ASTEqual
argument_list|(
name|astPath
argument_list|,
literal|"tate modern"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|artists
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|PropertyFactory
operator|.
name|createBase
argument_list|(
name|astPath
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|where
argument_list|(
name|astEqual
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|artists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist1"
argument_list|,
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggregationWithAliases
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|artistAndPaintingCount
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|having
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|alias
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|count
argument_list|()
operator|.
name|lt
argument_list|(
literal|5L
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|artistAndPaintingCount
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|Long
operator|)
name|artistAndPaintingCount
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|1
index|]
operator|<
literal|5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderWithAlias
parameter_list|()
block|{
name|ObjectSelect
argument_list|<
name|Artist
argument_list|>
name|query
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|alias
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|ESTIMATED_PRICE
argument_list|)
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|disjoint
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|artists
init|=
name|query
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|artists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPaintingArray
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CayenneRuntimeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testPrefetchWithAliases
parameter_list|()
block|{
name|ObjectSelect
argument_list|<
name|Artist
argument_list|>
name|query
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|prefetch
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|alias
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|disjoint
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|select
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CayenneRuntimeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTheSameAliasesToDifferentProperties
parameter_list|()
block|{
name|ObjectSelect
argument_list|<
name|Artist
argument_list|>
name|query
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|where
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|alias
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
operator|.
name|eq
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|and
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|TO_GALLERY
argument_list|)
operator|.
name|alias
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|dot
argument_list|(
name|Gallery
operator|.
name|GALLERY_NAME
argument_list|)
operator|.
name|eq
argument_list|(
literal|"g1"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|select
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpWithAliases
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"paintingArray#p1.paintingTitle = 'painting2'"
argument_list|)
decl_stmt|;
name|Expression
name|e2
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"paintingArray#p2.paintingTitle = 'painting4'"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|artists
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|e1
argument_list|)
operator|.
name|and
argument_list|(
name|e2
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist4"
argument_list|,
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpWithSeveralAliases
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"paintingArray#p1.toGallery#g1.galleryName = 'tate modern'"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|artists
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|e1
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|artists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist1"
argument_list|,
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMiddleAliasForExp
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"paintingArray.toGallery.paintingArray#p1.paintingTitle = 'painting2'"
argument_list|)
decl_stmt|;
name|Expression
name|e2
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"paintingArray.toGallery.paintingArray#p2.paintingTitle = 'painting4'"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|artists
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|e1
argument_list|)
operator|.
name|and
argument_list|(
name|e2
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist4"
argument_list|,
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEntityPropertyAliasesInExp
parameter_list|()
block|{
name|Painting
name|painting2
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Painting
operator|.
name|class
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Painting
name|painting4
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Painting
operator|.
name|class
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
name|SelectQuery
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|and
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"paintingArray#p1 = $painting1"
argument_list|,
name|painting2
argument_list|)
argument_list|,
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"paintingArray#p2 = $painting2"
argument_list|,
name|painting4
argument_list|)
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|artists
init|=
name|query
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist4"
argument_list|,
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAliasForPathExp
parameter_list|()
block|{
name|ASTPath
name|astPath
init|=
operator|new
name|ASTObjPath
argument_list|(
literal|"paintingArray.p1.galleryName"
argument_list|)
decl_stmt|;
name|astPath
operator|.
name|setPathAliases
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a"
argument_list|,
literal|"toGallery"
argument_list|)
argument_list|)
expr_stmt|;
name|ASTEqual
name|astEqual
init|=
operator|new
name|ASTEqual
argument_list|(
name|astPath
argument_list|,
literal|"test gallery"
argument_list|)
decl_stmt|;
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"paintingArray.toGallery#p1.galleryName"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|artists
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|PropertyFactory
operator|.
name|createBase
argument_list|(
name|e1
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|where
argument_list|(
name|astEqual
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist4"
argument_list|,
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test gallery"
argument_list|,
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTheSameAliasesForExp
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"paintingArray#p1.paintingTitle"
argument_list|)
decl_stmt|;
name|Expression
name|e2
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"paintingArray#p2.paintingTitle"
argument_list|)
decl_stmt|;
name|Expression
name|e3
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"paintingArray#p1.paintingTitle = 'painting2'"
argument_list|)
decl_stmt|;
name|Expression
name|e4
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"paintingArray#p2.paintingTitle = 'painting4'"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|results
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|PropertyFactory
operator|.
name|createBase
argument_list|(
name|e1
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|PropertyFactory
operator|.
name|createBase
argument_list|(
name|e2
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|where
argument_list|(
name|e3
argument_list|)
operator|.
name|and
argument_list|(
name|e4
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist4"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"painting2"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"painting4"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderWithAliasForExp
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"paintingArray#p1.estimatedPrice"
argument_list|)
decl_stmt|;
name|ObjectSelect
argument_list|<
name|Artist
argument_list|>
name|query
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|orderBy
argument_list|(
name|PropertyFactory
operator|.
name|createBase
argument_list|(
name|e1
argument_list|,
name|Number
operator|.
name|class
argument_list|)
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|disjoint
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|artists
init|=
name|query
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|artists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPaintingArray
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggregationWithAliasesForExp
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"paintingArray#p1"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|artistAndPaintingCount
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|having
argument_list|(
name|PropertyFactory
operator|.
name|createBase
argument_list|(
name|e1
argument_list|,
name|Number
operator|.
name|class
argument_list|)
operator|.
name|count
argument_list|()
operator|.
name|lt
argument_list|(
literal|5L
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|artistAndPaintingCount
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|Long
operator|)
name|artistAndPaintingCount
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|1
index|]
operator|<
literal|5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CayenneRuntimeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testPrefetchWithAliasesForExp
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"paintingArray#p1"
argument_list|)
decl_stmt|;
name|ObjectSelect
argument_list|<
name|Artist
argument_list|>
name|query
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|prefetch
argument_list|(
name|PropertyFactory
operator|.
name|createList
argument_list|(
literal|"p1"
argument_list|,
name|e1
argument_list|,
name|Painting
operator|.
name|class
argument_list|)
operator|.
name|disjoint
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|select
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CayenneRuntimeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testExpWithAliasNotToRelSegment
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"paintingArray.paintingTitle#p1 = 'painting2'"
argument_list|)
decl_stmt|;
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|e1
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

