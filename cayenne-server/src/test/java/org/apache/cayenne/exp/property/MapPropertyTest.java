begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|MapPropertyTest
block|{
specifier|private
name|MapProperty
argument_list|<
name|Integer
argument_list|,
name|Artist
argument_list|>
name|property
decl_stmt|;
specifier|private
name|MapProperty
argument_list|<
name|Integer
argument_list|,
name|Artist
argument_list|>
name|property1
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createProperty
parameter_list|()
block|{
name|property
operator|=
operator|new
name|MapProperty
argument_list|<>
argument_list|(
literal|"path"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|class
argument_list|)
expr_stmt|;
name|property1
operator|=
operator|new
name|MapProperty
argument_list|<>
argument_list|(
literal|"path.artist"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|flat
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|property
operator|.
name|flat
argument_list|()
operator|.
name|getExpression
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|fullObjectExp
argument_list|(
name|ExpressionFactory
operator|.
name|pathExp
argument_list|(
literal|"path"
argument_list|)
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsOne
parameter_list|()
block|{
name|Artist
name|artist
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|Expression
name|exp
init|=
name|property
operator|.
name|contains
argument_list|(
name|artist
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"path"
argument_list|,
name|artist
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notContainsOne
parameter_list|()
block|{
name|Artist
name|artist
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|Expression
name|exp
init|=
name|property
operator|.
name|notContains
argument_list|(
name|artist
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|noMatchExp
argument_list|(
literal|"path"
argument_list|,
name|artist
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsManyArray
parameter_list|()
block|{
name|Artist
name|artist1
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|Artist
name|artist2
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|Expression
name|exp
init|=
name|property
operator|.
name|contains
argument_list|(
name|artist1
argument_list|,
name|artist2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
literal|"path"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|artist1
argument_list|,
name|artist2
argument_list|)
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsManyCollection
parameter_list|()
block|{
name|Artist
name|artist1
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|Artist
name|artist2
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|Expression
name|exp
init|=
name|property
operator|.
name|contains
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|artist1
argument_list|,
name|artist2
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
literal|"path"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|artist1
argument_list|,
name|artist2
argument_list|)
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notContainsManyArray
parameter_list|()
block|{
name|Artist
name|artist1
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|Artist
name|artist2
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|Expression
name|exp
init|=
name|property
operator|.
name|notContains
argument_list|(
name|artist1
argument_list|,
name|artist2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|notInExp
argument_list|(
literal|"path"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|artist1
argument_list|,
name|artist2
argument_list|)
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notContainsManyCollection
parameter_list|()
block|{
name|Artist
name|artist1
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|Artist
name|artist2
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|Expression
name|exp
init|=
name|property
operator|.
name|notContains
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|artist1
argument_list|,
name|artist2
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|notInExp
argument_list|(
literal|"path"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|artist1
argument_list|,
name|artist2
argument_list|)
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsOneId
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|property
operator|.
name|containsId
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"path = 1"
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsManyIdArray
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|property
operator|.
name|containsId
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"path in (1,2,3)"
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsManyIdCollection
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|property
operator|.
name|containsId
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"path in (1,2,3)"
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notContainsOneId
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|property
operator|.
name|notContainsId
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"path != 1"
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notContainsManyIdArray
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|property
operator|.
name|notContainsId
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"path not in (1,2,3)"
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|notContainsManyIdCollection
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|property
operator|.
name|notContainsId
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"path not in (1,2,3)"
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|alias
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|=
name|property
operator|.
name|alias
argument_list|(
literal|"alias"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"alias"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
operator|.
name|getPathAliases
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"path.artist"
argument_list|,
name|property1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|property1
operator|=
name|property1
operator|.
name|alias
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"path.a"
argument_list|,
name|property1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|property1
operator|.
name|getExpression
argument_list|()
operator|.
name|getPathAliases
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist"
argument_list|,
name|property1
operator|.
name|getExpression
argument_list|()
operator|.
name|getPathAliases
argument_list|()
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|outer
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|pathExp
argument_list|(
literal|"path"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|=
name|property
operator|.
name|outer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"path+"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|pathExp
argument_list|(
literal|"path+"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|=
name|property
operator|.
name|outer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"path+"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|pathExp
argument_list|(
literal|"path+"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

