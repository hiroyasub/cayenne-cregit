begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ExpressionTraversalTest
block|{
specifier|private
name|TstTraversalHandler
name|handler
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|handler
operator|=
operator|new
name|TstTraversalHandler
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnary_Negative1
parameter_list|()
block|{
name|doExpressionTest
argument_list|(
literal|"-5"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnary_Negative2
parameter_list|()
block|{
name|doExpressionTest
argument_list|(
literal|"-estimatedPrice"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnary_Negative3
parameter_list|()
block|{
name|doExpressionTest
argument_list|(
literal|"-toGallery.paintingArray.estimatedPrice"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinary_In1
parameter_list|()
block|{
name|doExpressionTest
argument_list|(
literal|"toGallery.galleryName in ('g1', 'g2', 'g3')"
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinary_In2
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
literal|"toGallery.galleryName"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"g1"
argument_list|,
literal|"g2"
argument_list|,
literal|"g3"
argument_list|)
argument_list|)
decl_stmt|;
name|doExpressionTest
argument_list|(
name|exp
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinary_In3
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
literal|"toGallery.galleryName"
argument_list|,
literal|"g1"
argument_list|,
literal|"g2"
argument_list|,
literal|"g3"
argument_list|)
decl_stmt|;
name|doExpressionTest
argument_list|(
name|exp
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinary_Like
parameter_list|()
block|{
name|doExpressionTest
argument_list|(
literal|"toGallery.galleryName like 'a%'"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinary_LikeIgnoreCase
parameter_list|()
block|{
name|doExpressionTest
argument_list|(
literal|"toGallery.galleryName likeIgnoreCase 'a%'"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinary_IsNull
parameter_list|()
block|{
name|doExpressionTest
argument_list|(
literal|"toGallery.galleryName = null"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinary_IsNotNull
parameter_list|()
block|{
name|doExpressionTest
argument_list|(
literal|"toGallery.galleryName != null"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTernary_Between
parameter_list|()
block|{
name|doExpressionTest
argument_list|(
literal|"estimatedPrice between 3000 and 15000"
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doExpressionTest
parameter_list|(
name|String
name|expression
parameter_list|,
name|int
name|totalNodes
parameter_list|,
name|int
name|totalLeaves
parameter_list|)
block|{
name|doExpressionTest
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
name|expression
argument_list|)
argument_list|,
name|totalNodes
argument_list|,
name|totalLeaves
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doExpressionTest
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|int
name|totalNodes
parameter_list|,
name|int
name|totalLeaves
parameter_list|)
block|{
name|handler
operator|.
name|reset
argument_list|()
expr_stmt|;
name|expression
operator|.
name|traverse
argument_list|(
name|handler
argument_list|)
expr_stmt|;
comment|// assert statistics
name|handler
operator|.
name|assertConsistency
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|totalNodes
argument_list|,
name|handler
operator|.
name|getNodeCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalLeaves
argument_list|,
name|handler
operator|.
name|getLeafs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

