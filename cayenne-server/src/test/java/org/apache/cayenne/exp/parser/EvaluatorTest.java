begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|EvaluatorTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testEvaluator_Null
parameter_list|()
block|{
name|Evaluator
name|e
init|=
name|Evaluator
operator|.
name|evaluator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|eq
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluator_Object
parameter_list|()
block|{
name|Object
name|o
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Evaluator
name|e
init|=
name|Evaluator
operator|.
name|evaluator
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|o
argument_list|,
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|o
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluator_Number
parameter_list|()
block|{
name|Evaluator
name|e
init|=
name|Evaluator
operator|.
name|evaluator
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|eq
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|eq
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|eq
argument_list|(
literal|1
argument_list|,
literal|1.1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluator_NumberWideningEquals
parameter_list|()
block|{
name|Evaluator
name|e
init|=
name|Evaluator
operator|.
name|evaluator
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
operator|(
name|long
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
operator|(
name|float
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|long
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|float
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|,
operator|(
name|long
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|,
operator|(
name|float
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|,
operator|(
name|long
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|,
operator|(
name|float
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|float
operator|)
literal|1
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|float
operator|)
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|float
operator|)
literal|1
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|float
operator|)
literal|1
argument_list|,
operator|(
name|long
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|float
operator|)
literal|1
argument_list|,
operator|(
name|float
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|float
operator|)
literal|1
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|double
operator|)
literal|1
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|double
operator|)
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|double
operator|)
literal|1
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|double
operator|)
literal|1
argument_list|,
operator|(
name|long
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|double
operator|)
literal|1
argument_list|,
operator|(
name|float
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|double
operator|)
literal|1
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|float
operator|)
literal|1.1
argument_list|,
operator|(
name|float
operator|)
literal|1.1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|float
operator|)
literal|1.1
argument_list|,
operator|(
name|double
operator|)
literal|1.1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|,
operator|new
name|AtomicLong
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|new
name|AtomicLong
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|,
name|BigInteger
operator|.
name|ONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|BigInteger
name|bigInt
init|=
operator|new
name|BigInteger
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|"0"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|bigInt
argument_list|,
name|bigInt
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluator_NumberWideningCompare
parameter_list|()
block|{
name|Evaluator
name|e
init|=
name|Evaluator
operator|.
name|evaluator
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
operator|(
name|long
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
operator|(
name|float
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|long
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|float
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|,
operator|(
name|long
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|,
operator|(
name|float
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|,
operator|(
name|long
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|,
operator|(
name|float
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|float
operator|)
literal|1
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|float
operator|)
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|float
operator|)
literal|1
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|float
operator|)
literal|1
argument_list|,
operator|(
name|long
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|float
operator|)
literal|1
argument_list|,
operator|(
name|float
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|float
operator|)
literal|1
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|double
operator|)
literal|1
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|double
operator|)
literal|1
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|double
operator|)
literal|1
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|double
operator|)
literal|1
argument_list|,
operator|(
name|long
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|double
operator|)
literal|1
argument_list|,
operator|(
name|float
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|double
operator|)
literal|1
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|float
operator|)
literal|1.1
argument_list|,
operator|(
name|float
operator|)
literal|1.1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|float
operator|)
literal|1.1
argument_list|,
operator|(
name|double
operator|)
literal|1.1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|,
operator|new
name|AtomicLong
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|new
name|AtomicLong
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|,
name|BigInteger
operator|.
name|ONE
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
name|BigInteger
operator|.
name|ONE
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|BigInteger
name|bigInt
init|=
operator|new
name|BigInteger
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|"0"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|compare
argument_list|(
name|bigInt
argument_list|,
name|bigInt
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluator_BigDecimal
parameter_list|()
block|{
name|Object
name|lhs
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"1.10"
argument_list|)
decl_stmt|;
name|Evaluator
name|e
init|=
name|Evaluator
operator|.
name|evaluator
argument_list|(
name|lhs
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|"1.1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|"1.10001"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Integer
name|c
init|=
name|e
operator|.
name|compare
argument_list|(
name|lhs
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|"1.10001"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|c
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluator_Persistent
parameter_list|()
block|{
name|ObjectId
name|lhsId
init|=
operator|new
name|ObjectId
argument_list|(
literal|"X"
argument_list|,
literal|"k"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Persistent
name|lhs
init|=
name|mock
argument_list|(
name|Persistent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|lhs
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|lhsId
argument_list|)
expr_stmt|;
name|Evaluator
name|e
init|=
name|Evaluator
operator|.
name|evaluator
argument_list|(
name|lhs
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|ObjectId
name|rhsId1
init|=
operator|new
name|ObjectId
argument_list|(
literal|"X"
argument_list|,
literal|"k"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Persistent
name|rhs1
init|=
name|mock
argument_list|(
name|Persistent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rhs1
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rhsId1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
name|rhs1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
name|rhsId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectId
name|rhsId2
init|=
operator|new
name|ObjectId
argument_list|(
literal|"X"
argument_list|,
literal|"k"
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Persistent
name|rhs2
init|=
name|mock
argument_list|(
name|Persistent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rhs2
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rhsId2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
name|rhs2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
name|rhsId2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluator_Persistent_StringId
parameter_list|()
block|{
name|ObjectId
name|lhsId
init|=
operator|new
name|ObjectId
argument_list|(
literal|"X"
argument_list|,
literal|"k"
argument_list|,
literal|"A"
argument_list|)
decl_stmt|;
name|Persistent
name|lhs
init|=
name|mock
argument_list|(
name|Persistent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|lhs
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|lhsId
argument_list|)
expr_stmt|;
name|Evaluator
name|e
init|=
name|Evaluator
operator|.
name|evaluator
argument_list|(
name|lhs
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|ObjectId
name|rhsId1
init|=
operator|new
name|ObjectId
argument_list|(
literal|"X"
argument_list|,
literal|"k"
argument_list|,
literal|"A"
argument_list|)
decl_stmt|;
name|Persistent
name|rhs1
init|=
name|mock
argument_list|(
name|Persistent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rhs1
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rhsId1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
name|rhs1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
name|rhsId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectId
name|rhsId2
init|=
operator|new
name|ObjectId
argument_list|(
literal|"X"
argument_list|,
literal|"k"
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|Persistent
name|rhs2
init|=
name|mock
argument_list|(
name|Persistent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rhs2
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rhsId2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
name|rhs2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
name|rhsId2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluator_Persistent_MultiKey
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|lhsIdMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|lhsIdMap
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|lhsIdMap
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|ObjectId
name|lhsId
init|=
operator|new
name|ObjectId
argument_list|(
literal|"X"
argument_list|,
name|lhsIdMap
argument_list|)
decl_stmt|;
name|Persistent
name|lhs
init|=
name|mock
argument_list|(
name|Persistent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|lhs
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|lhsId
argument_list|)
expr_stmt|;
name|Evaluator
name|e
init|=
name|Evaluator
operator|.
name|evaluator
argument_list|(
name|lhs
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rhsId1Map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|rhsId1Map
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rhsId1Map
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|ObjectId
name|rhsId1
init|=
operator|new
name|ObjectId
argument_list|(
literal|"X"
argument_list|,
name|rhsId1Map
argument_list|)
decl_stmt|;
name|Persistent
name|rhs1
init|=
name|mock
argument_list|(
name|Persistent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rhs1
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rhsId1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
name|rhs1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
name|rhsId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
name|rhsId1Map
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rhsId2Map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|rhsId2Map
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rhsId2Map
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"BX"
argument_list|)
expr_stmt|;
name|ObjectId
name|rhsId2
init|=
operator|new
name|ObjectId
argument_list|(
literal|"X"
argument_list|,
name|rhsId2Map
argument_list|)
decl_stmt|;
name|Persistent
name|rhs2
init|=
name|mock
argument_list|(
name|Persistent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rhs2
operator|.
name|getObjectId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rhsId2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
name|rhs2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
name|rhsId2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
name|rhsId2Map
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|eq
argument_list|(
name|lhs
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

