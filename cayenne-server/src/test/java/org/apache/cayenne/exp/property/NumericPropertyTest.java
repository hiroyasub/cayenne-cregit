begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
operator|.
name|exp
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|NumericPropertyTest
block|{
specifier|private
name|NumericProperty
argument_list|<
name|Integer
argument_list|>
name|property
decl_stmt|;
specifier|private
name|NumericProperty
argument_list|<
name|Integer
argument_list|>
name|other
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createProperty
parameter_list|()
block|{
name|property
operator|=
operator|new
name|NumericProperty
argument_list|<>
argument_list|(
literal|"path"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|other
operator|=
operator|new
name|NumericProperty
argument_list|<>
argument_list|(
literal|"other"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|avg
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"avg(path)"
argument_list|)
argument_list|,
name|property
operator|.
name|avg
argument_list|()
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|min
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"min(path)"
argument_list|)
argument_list|,
name|property
operator|.
name|min
argument_list|()
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|max
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"max(path)"
argument_list|)
argument_list|,
name|property
operator|.
name|max
argument_list|()
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sum
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"sum(path)"
argument_list|)
argument_list|,
name|property
operator|.
name|sum
argument_list|()
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|count
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"count(path)"
argument_list|)
argument_list|,
name|property
operator|.
name|count
argument_list|()
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|modNumber
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"mod(path, 3)"
argument_list|)
argument_list|,
name|property
operator|.
name|mod
argument_list|(
literal|3
argument_list|)
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|modProp
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"mod(path, other)"
argument_list|)
argument_list|,
name|property
operator|.
name|mod
argument_list|(
name|other
argument_list|)
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|abs
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"abs(path)"
argument_list|)
argument_list|,
name|property
operator|.
name|abs
argument_list|()
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sqrt
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"sqrt(path)"
argument_list|)
argument_list|,
name|property
operator|.
name|sqrt
argument_list|()
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|add
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path + 42"
argument_list|)
argument_list|,
name|property
operator|.
name|add
argument_list|(
literal|42
argument_list|)
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addProp
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path + other"
argument_list|)
argument_list|,
name|property
operator|.
name|add
argument_list|(
name|other
argument_list|)
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sub
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path - 42"
argument_list|)
argument_list|,
name|property
operator|.
name|sub
argument_list|(
literal|42
argument_list|)
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|subProp
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path - other"
argument_list|)
argument_list|,
name|property
operator|.
name|sub
argument_list|(
name|other
argument_list|)
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|div
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path / 42"
argument_list|)
argument_list|,
name|property
operator|.
name|div
argument_list|(
literal|42
argument_list|)
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|divProp
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path / other"
argument_list|)
argument_list|,
name|property
operator|.
name|div
argument_list|(
name|other
argument_list|)
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mul
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path * 42"
argument_list|)
argument_list|,
name|property
operator|.
name|mul
argument_list|(
literal|42
argument_list|)
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mulProp
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path * other"
argument_list|)
argument_list|,
name|property
operator|.
name|mul
argument_list|(
name|other
argument_list|)
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|neg
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"- path"
argument_list|)
argument_list|,
name|property
operator|.
name|neg
argument_list|()
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|between
parameter_list|()
block|{
name|Expression
name|exp1
init|=
name|exp
argument_list|(
literal|"path between 42 and 123"
argument_list|)
decl_stmt|;
name|Expression
name|exp2
init|=
name|property
operator|.
name|between
argument_list|(
literal|42
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exp1
argument_list|,
name|exp2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|betweenProp
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path between -other and other"
argument_list|)
argument_list|,
name|property
operator|.
name|between
argument_list|(
name|other
operator|.
name|neg
argument_list|()
argument_list|,
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|eq
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path = 123"
argument_list|)
argument_list|,
name|property
operator|.
name|eq
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|eqProp
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path = other"
argument_list|)
argument_list|,
name|property
operator|.
name|eq
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ne
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path != 123"
argument_list|)
argument_list|,
name|property
operator|.
name|ne
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|neProp
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path != other"
argument_list|)
argument_list|,
name|property
operator|.
name|ne
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|inArray
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path in (1, 2, 3)"
argument_list|)
argument_list|,
name|property
operator|.
name|in
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|inCollection
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path in (1, 2, 3)"
argument_list|)
argument_list|,
name|property
operator|.
name|in
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ninArray
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path not in (1, 2, 3)"
argument_list|)
argument_list|,
name|property
operator|.
name|nin
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ninCollection
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path not in (1, 2, 3)"
argument_list|)
argument_list|,
name|property
operator|.
name|nin
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gt
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path> 123"
argument_list|)
argument_list|,
name|property
operator|.
name|gt
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gtProp
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path> other"
argument_list|)
argument_list|,
name|property
operator|.
name|gt
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gte
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path>= 123"
argument_list|)
argument_list|,
name|property
operator|.
name|gte
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gteProp
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path>= other"
argument_list|)
argument_list|,
name|property
operator|.
name|gte
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|lt
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path< 42"
argument_list|)
argument_list|,
name|property
operator|.
name|lt
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ltProp
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path< other"
argument_list|)
argument_list|,
name|property
operator|.
name|lt
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|lte
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path<= 42"
argument_list|)
argument_list|,
name|property
operator|.
name|lte
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|lteProp
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path<= other"
argument_list|)
argument_list|,
name|property
operator|.
name|lte
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isTrue
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path = true"
argument_list|)
argument_list|,
name|property
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isFalse
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path = false"
argument_list|)
argument_list|,
name|property
operator|.
name|isFalse
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|alias
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|property
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|=
name|property
operator|.
name|alias
argument_list|(
literal|"alias"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"alias"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"alias"
argument_list|,
name|property
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

