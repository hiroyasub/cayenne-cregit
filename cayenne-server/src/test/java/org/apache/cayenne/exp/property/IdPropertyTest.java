begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|PropertyFactory
operator|.
name|createNumericId
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|IdPropertyTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|expressionContentAttribute
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|dbIdPathExp
argument_list|(
literal|"ARTIST_ID"
argument_list|)
argument_list|,
name|createNumericId
argument_list|(
literal|"ARTIST_ID"
argument_list|,
literal|"Artist"
argument_list|,
name|Long
operator|.
name|class
argument_list|)
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|expressionContentPathAttribute
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|dbIdPathExp
argument_list|(
literal|"path.ARTIST_ID"
argument_list|)
argument_list|,
name|createNumericId
argument_list|(
literal|"ARTIST_ID"
argument_list|,
literal|"path"
argument_list|,
literal|"Artist"
argument_list|,
name|Long
operator|.
name|class
argument_list|)
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|eqObjectIdAttribute
parameter_list|()
block|{
name|ObjectId
name|id
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"Artist"
argument_list|,
literal|"ARTIST_ID"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchDbIdExp
argument_list|(
literal|"ARTIST_ID"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|createNumericId
argument_list|(
literal|"ARTIST_ID"
argument_list|,
literal|"Artist"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|eq
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CayenneRuntimeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|eqObjectIdWrongAttribute
parameter_list|()
block|{
name|ObjectId
name|id
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"Artist"
argument_list|,
literal|"ARTIST_ID"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|createNumericId
argument_list|(
literal|"ARTIST_PK"
argument_list|,
literal|"Artist"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|eq
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|eqObjectIdCompound
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|key
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|key
operator|.
name|put
argument_list|(
literal|"ARTIST_ID"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|key
operator|.
name|put
argument_list|(
literal|"SERIAL"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ObjectId
name|id
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"Artist"
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|matchDbIdExp
argument_list|(
literal|"ARTIST_ID"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|createNumericId
argument_list|(
literal|"ARTIST_ID"
argument_list|,
literal|"Artist"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|eq
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CayenneRuntimeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|eqObjectIdWrongCompound
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|key
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|key
operator|.
name|put
argument_list|(
literal|"ARTIST_ID"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|key
operator|.
name|put
argument_list|(
literal|"SERIAL"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ObjectId
name|id
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"Artist"
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|createNumericId
argument_list|(
literal|"Artist"
argument_list|,
literal|"ARTIST_ID"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|eq
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

