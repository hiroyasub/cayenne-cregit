begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTLike
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTObjPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|TstJavaBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|BasePropertyTest
block|{
specifier|private
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|property
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createProperty
parameter_list|()
block|{
name|property
operator|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"path"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathExpConstructor
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"path"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomExpConstructor
parameter_list|()
block|{
name|property
operator|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"path"
argument_list|,
operator|new
name|ASTLike
argument_list|()
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ASTLike
argument_list|()
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEq
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|property
operator|.
name|eq
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"path = 1"
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNe
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|property
operator|.
name|ne
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"path != 1"
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIn
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|property
operator|.
name|in
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"path in (1, 2, 3)"
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInCollection
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|property
operator|.
name|in
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"path in (1, 2, 3)"
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNin
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|property
operator|.
name|nin
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"path not in (1, 2, 3)"
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNinCollection
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|property
operator|.
name|nin
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"path not in (1, 2, 3)"
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsNull
parameter_list|()
block|{
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|property
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"path"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|exp
init|=
name|property
operator|.
name|isNull
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"path = null"
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotIsNull
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|property
operator|.
name|isNotNull
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"path != null"
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsTrue
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|property
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"path = true"
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsFalse
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|property
operator|.
name|isFalse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"path = false"
argument_list|)
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlias
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|property
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|=
name|property
operator|.
name|alias
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|property
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"path"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFrom
parameter_list|()
block|{
name|TstJavaBean
name|bean
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setIntField
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"intField"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|7
argument_list|)
argument_list|,
name|INT_FIELD
operator|.
name|getFrom
argument_list|(
name|bean
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFromNestedProperty
parameter_list|()
block|{
name|TstJavaBean
name|bean
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|TstJavaBean
name|nestedBean
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|nestedBean
operator|.
name|setIntField
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setObjectField
argument_list|(
name|nestedBean
argument_list|)
expr_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|OBJECT_FIELD_INT_FIELD
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"objectField.intField"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|7
argument_list|)
argument_list|,
name|OBJECT_FIELD_INT_FIELD
operator|.
name|getFrom
argument_list|(
name|bean
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFromNestedNull
parameter_list|()
block|{
name|TstJavaBean
name|bean
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setObjectField
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|OBJECT_FIELD_INT_FIELD
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"objectField.intField"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|OBJECT_FIELD_INT_FIELD
operator|.
name|getFrom
argument_list|(
name|bean
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFromAll
parameter_list|()
block|{
name|TstJavaBean
name|bean
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setIntField
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|TstJavaBean
name|bean2
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|bean2
operator|.
name|setIntField
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TstJavaBean
argument_list|>
name|beans
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|bean
argument_list|,
name|bean2
argument_list|)
decl_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"intField"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
argument_list|,
name|INT_FIELD
operator|.
name|getFromAll
argument_list|(
name|beans
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetIn
parameter_list|()
block|{
name|TstJavaBean
name|bean
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"intField"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|INT_FIELD
operator|.
name|setIn
argument_list|(
name|bean
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|bean
operator|.
name|getIntField
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetInNestedProperty
parameter_list|()
block|{
name|TstJavaBean
name|bean
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setObjectField
argument_list|(
operator|new
name|TstJavaBean
argument_list|()
argument_list|)
expr_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|OBJECT_FIELD_INT_FIELD
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"objectField.intField"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|OBJECT_FIELD_INT_FIELD
operator|.
name|setIn
argument_list|(
name|bean
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
operator|(
operator|(
name|TstJavaBean
operator|)
name|bean
operator|.
name|getObjectField
argument_list|()
operator|)
operator|.
name|getIntField
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetInNestedNull
parameter_list|()
block|{
name|TstJavaBean
name|bean
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setObjectField
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|OBJECT_FIELD_INT_FIELD
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"objectField.intField"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|OBJECT_FIELD_INT_FIELD
operator|.
name|setIn
argument_list|(
name|bean
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetInAll
parameter_list|()
block|{
name|TstJavaBean
name|bean
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|TstJavaBean
name|bean2
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TstJavaBean
argument_list|>
name|beans
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|bean
argument_list|,
name|bean2
argument_list|)
decl_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"intField"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|INT_FIELD
operator|.
name|setInAll
argument_list|(
name|beans
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|bean
operator|.
name|getIntField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|bean2
operator|.
name|getIntField
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualsWithName
parameter_list|()
block|{
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"intField"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD2
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"intField"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|INT_FIELD
argument_list|,
name|INT_FIELD2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|INT_FIELD
argument_list|,
name|INT_FIELD2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCodeWithName
parameter_list|()
block|{
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"intField"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD2
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"intField"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|BaseProperty
argument_list|<
name|Long
argument_list|>
name|LONG_FIELD
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"longField"
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|INT_FIELD
operator|.
name|hashCode
argument_list|()
argument_list|,
name|INT_FIELD2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|INT_FIELD
operator|.
name|hashCode
argument_list|()
argument_list|,
name|LONG_FIELD
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualsWithNameAndType
parameter_list|()
block|{
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"intField"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD2
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"intField"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|INT_FIELD
argument_list|,
name|INT_FIELD2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|INT_FIELD
argument_list|,
name|INT_FIELD2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCodeWithNameAndType
parameter_list|()
block|{
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"intField"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD2
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"intField"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|BaseProperty
argument_list|<
name|Long
argument_list|>
name|LONG_FIELD
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"longField"
argument_list|,
literal|null
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|INT_FIELD
operator|.
name|hashCode
argument_list|()
argument_list|,
name|INT_FIELD2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|INT_FIELD
operator|.
name|hashCode
argument_list|()
argument_list|,
name|LONG_FIELD
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualsWithExpAndType
parameter_list|()
block|{
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|null
argument_list|,
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD2
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|null
argument_list|,
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|INT_FIELD
argument_list|,
name|INT_FIELD2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|INT_FIELD
argument_list|,
name|INT_FIELD2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCodeWithExpAndType
parameter_list|()
block|{
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|null
argument_list|,
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD2
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|null
argument_list|,
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD3
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|null
argument_list|,
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|INT_FIELD
operator|.
name|hashCode
argument_list|()
argument_list|,
name|INT_FIELD2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|INT_FIELD
operator|.
name|hashCode
argument_list|()
argument_list|,
name|INT_FIELD3
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFunctionProperty
parameter_list|()
block|{
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|property
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"intField"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|arg
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"intField2"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|operator
init|=
name|property
operator|.
name|function
argument_list|(
literal|"%"
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|arg
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"fn('%', intField, intField2)"
argument_list|)
argument_list|,
name|operator
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFunctionScalar
parameter_list|()
block|{
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|property
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"intField"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|operator
init|=
name|property
operator|.
name|function
argument_list|(
literal|"%"
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"fn('%', intField, 10)"
argument_list|)
argument_list|,
name|operator
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOperatorProperty
parameter_list|()
block|{
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|property
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"intField"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|arg
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"intField2"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|operator
init|=
name|property
operator|.
name|operator
argument_list|(
literal|"%"
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|arg
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"op('%', intField, intField2)"
argument_list|)
argument_list|,
name|operator
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOperatorScalar
parameter_list|()
block|{
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|property
init|=
operator|new
name|BaseProperty
argument_list|<>
argument_list|(
literal|"intField"
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|operator
init|=
name|property
operator|.
name|operator
argument_list|(
literal|"%"
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"op('%', intField, 10)"
argument_list|)
argument_list|,
name|operator
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

