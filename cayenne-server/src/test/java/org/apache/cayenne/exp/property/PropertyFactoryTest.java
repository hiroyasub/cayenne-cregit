begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|PropertyFactoryTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|createBase
parameter_list|()
block|{
name|BaseProperty
argument_list|<
name|Integer
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createBase
argument_list|(
literal|"path"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createBase1
parameter_list|()
block|{
name|BaseProperty
argument_list|<
name|Boolean
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createBase
argument_list|(
literal|"path"
argument_list|,
name|exp
argument_list|(
literal|"path = 1"
argument_list|)
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path = 1"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createBase2
parameter_list|()
block|{
name|BaseProperty
argument_list|<
name|Boolean
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createBase
argument_list|(
name|exp
argument_list|(
literal|"path = 1"
argument_list|)
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path = 1"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createString
parameter_list|()
block|{
name|StringProperty
argument_list|<
name|String
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createString
argument_list|(
literal|"path"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createString1
parameter_list|()
block|{
name|StringProperty
argument_list|<
name|String
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createString
argument_list|(
name|exp
argument_list|(
literal|"path"
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createString2
parameter_list|()
block|{
name|StringProperty
argument_list|<
name|StringBuilder
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createString
argument_list|(
literal|"path"
argument_list|,
name|exp
argument_list|(
literal|"concat(path, 'abc')"
argument_list|)
argument_list|,
name|StringBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"concat(path, 'abc')"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StringBuilder
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createNumeric
parameter_list|()
block|{
name|NumericProperty
argument_list|<
name|Integer
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createNumeric
argument_list|(
literal|"path"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createNumeric1
parameter_list|()
block|{
name|NumericProperty
argument_list|<
name|Integer
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createNumeric
argument_list|(
name|exp
argument_list|(
literal|"path + 1"
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path + 1"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createNumeric2
parameter_list|()
block|{
name|NumericProperty
argument_list|<
name|Double
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createNumeric
argument_list|(
literal|"path"
argument_list|,
name|exp
argument_list|(
literal|"path / 2"
argument_list|)
argument_list|,
name|Double
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path / 2"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createDate
parameter_list|()
block|{
name|DateProperty
argument_list|<
name|LocalDate
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createDate
argument_list|(
literal|"path"
argument_list|,
name|LocalDate
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LocalDate
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createDate1
parameter_list|()
block|{
name|DateProperty
argument_list|<
name|LocalDate
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createDate
argument_list|(
name|exp
argument_list|(
literal|"year(path)"
argument_list|)
argument_list|,
name|LocalDate
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"year(path)"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LocalDate
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createDate2
parameter_list|()
block|{
name|DateProperty
argument_list|<
name|LocalDate
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createDate
argument_list|(
literal|"path"
argument_list|,
name|exp
argument_list|(
literal|"year(path)"
argument_list|)
argument_list|,
name|LocalDate
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"year(path)"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LocalDate
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createEntity
parameter_list|()
block|{
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createEntity
argument_list|(
literal|"path"
argument_list|,
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createEntity1
parameter_list|()
block|{
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createEntity
argument_list|(
name|exp
argument_list|(
literal|"path+.subpath"
argument_list|)
argument_list|,
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path+.subpath"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createEntity2
parameter_list|()
block|{
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createEntity
argument_list|(
literal|"path"
argument_list|,
name|exp
argument_list|(
literal|"path+.subpath"
argument_list|)
argument_list|,
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path+.subpath"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createSelf
parameter_list|()
block|{
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fullObjectExp
argument_list|()
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createSelf1
parameter_list|()
block|{
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|exp
argument_list|(
literal|"path"
argument_list|)
argument_list|,
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fullObjectExp
argument_list|(
name|exp
argument_list|(
literal|"path"
argument_list|)
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createList
parameter_list|()
block|{
name|ListProperty
argument_list|<
name|Artist
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createList
argument_list|(
literal|"path"
argument_list|,
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|property
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createList1
parameter_list|()
block|{
name|ListProperty
argument_list|<
name|Artist
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createList
argument_list|(
literal|"path"
argument_list|,
name|exp
argument_list|(
literal|"path+.sub"
argument_list|)
argument_list|,
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path+.sub"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|property
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createSet
parameter_list|()
block|{
name|SetProperty
argument_list|<
name|Artist
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createSet
argument_list|(
literal|"path"
argument_list|,
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Set
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|property
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createSet1
parameter_list|()
block|{
name|SetProperty
argument_list|<
name|Artist
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createSet
argument_list|(
literal|"path"
argument_list|,
name|exp
argument_list|(
literal|"path+.sub"
argument_list|)
argument_list|,
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path+.sub"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Set
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|property
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createMap
parameter_list|()
block|{
name|MapProperty
argument_list|<
name|Integer
argument_list|,
name|Artist
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createMap
argument_list|(
literal|"path"
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Map
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|property
operator|.
name|getKeyType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|property
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createMap1
parameter_list|()
block|{
name|MapProperty
argument_list|<
name|Integer
argument_list|,
name|Artist
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createMap
argument_list|(
literal|"path"
argument_list|,
name|exp
argument_list|(
literal|"path+.sub"
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path+.sub"
argument_list|)
argument_list|,
name|property
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Map
operator|.
name|class
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|property
operator|.
name|getKeyType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|property
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

