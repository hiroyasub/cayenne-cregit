begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTFalse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|SimpleNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ExpressionTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testToEJBQL_numericType_integer
parameter_list|()
block|{
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"consignment.parts"
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.consignment.parts = 123"
argument_list|,
name|e
operator|.
name|toEJBQL
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToEJBQL_numericType_long
parameter_list|()
block|{
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"consignment.parts"
argument_list|,
literal|1418342400L
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.consignment.parts = 1418342400"
argument_list|,
name|e
operator|.
name|toEJBQL
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToEJBQL_numericType_float
parameter_list|()
block|{
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|greaterOrEqualExp
argument_list|(
literal|"consignment.parts"
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
literal|"3.145"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.consignment.parts>= 3.145"
argument_list|,
name|e
operator|.
name|toEJBQL
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToEJBQL_numericType_double
parameter_list|()
block|{
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|greaterOrEqualExp
argument_list|(
literal|"consignment.parts"
argument_list|,
literal|3.14
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.consignment.parts>= 3.14"
argument_list|,
name|e
operator|.
name|toEJBQL
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendAsEJBQL_Timestamp_ParameterCapture
parameter_list|()
throws|throws
name|IOException
block|{
name|Date
name|now
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|greaterOrEqualExp
argument_list|(
literal|"dateOfBirth"
argument_list|,
name|now
argument_list|)
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|parametersAccumulator
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|e
operator|.
name|appendAsEJBQL
argument_list|(
name|parametersAccumulator
argument_list|,
name|buffer
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|String
name|ejbql
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.dateOfBirth>= ?1"
argument_list|,
name|ejbql
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parametersAccumulator
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parametersAccumulator
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendAsEJBQL_in_EncodeListOfParameters_ParameterCapture
parameter_list|()
throws|throws
name|IOException
block|{
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|parametersAccumulator
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|e
operator|.
name|appendAsEJBQL
argument_list|(
name|parametersAccumulator
argument_list|,
name|buffer
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|String
name|ejbql
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.artistName in (?1, ?2, ?3)"
argument_list|,
name|ejbql
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parametersAccumulator
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parametersAccumulator
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parametersAccumulator
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parametersAccumulator
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendAsEJBQL_in_EncodeListOfParameters
parameter_list|()
throws|throws
name|IOException
block|{
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|e
operator|.
name|appendAsEJBQL
argument_list|(
name|buffer
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|String
name|ejbql
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.artistName in ('a', 'b', 'c')"
argument_list|,
name|ejbql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendAsEJBQL_PersistentParamater
parameter_list|()
throws|throws
name|IOException
block|{
name|Artist
name|a
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|ObjectId
name|aId
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"Artist"
argument_list|,
name|Artist
operator|.
name|ARTIST_ID_PK_COLUMN
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|a
operator|.
name|setObjectId
argument_list|(
name|aId
argument_list|)
expr_stmt|;
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"artist"
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|e
operator|.
name|appendAsEJBQL
argument_list|(
name|buffer
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|String
name|ejbql
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.artist = 1"
argument_list|,
name|ejbql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendAsEJBQLNotEquals
parameter_list|()
throws|throws
name|IOException
block|{
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"artistName != 'bla'"
argument_list|)
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|e
operator|.
name|appendAsEJBQL
argument_list|(
name|buffer
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|String
name|ejbql
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.artistName<> 'bla'"
argument_list|,
name|ejbql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsNotNullEx
parameter_list|()
block|{
name|Expression
name|e
init|=
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|isNotNull
argument_list|()
decl_stmt|;
name|String
name|ejbql
init|=
name|e
operator|.
name|toEJBQL
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.artistName is not null"
argument_list|,
name|ejbql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAndExp
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"name"
argument_list|,
literal|"Picasso"
argument_list|)
decl_stmt|;
name|Expression
name|e2
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"age"
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|Expression
name|exp
init|=
name|e1
operator|.
name|andExp
argument_list|(
name|e2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exp
operator|.
name|getType
argument_list|()
argument_list|,
name|Expression
operator|.
name|AND
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|SimpleNode
operator|)
name|exp
operator|)
operator|.
name|jjtGetNumChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrExp
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"name"
argument_list|,
literal|"Picasso"
argument_list|)
decl_stmt|;
name|Expression
name|e2
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"age"
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|Expression
name|exp
init|=
name|e1
operator|.
name|orExp
argument_list|(
name|e2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exp
operator|.
name|getType
argument_list|()
argument_list|,
name|Expression
operator|.
name|OR
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|SimpleNode
operator|)
name|exp
operator|)
operator|.
name|jjtGetNumChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAndExpVarArgs
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"name"
argument_list|,
literal|"Picasso"
argument_list|)
decl_stmt|;
name|Expression
name|e2
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"age"
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|Expression
name|e3
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"height"
argument_list|,
literal|5.5
argument_list|)
decl_stmt|;
name|Expression
name|e4
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"numEars"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Expression
name|exp
init|=
name|e1
operator|.
name|andExp
argument_list|(
name|e2
argument_list|,
name|e3
argument_list|,
name|e4
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exp
operator|.
name|getType
argument_list|()
argument_list|,
name|Expression
operator|.
name|AND
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
operator|(
name|SimpleNode
operator|)
name|exp
operator|)
operator|.
name|jjtGetNumChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrExpVarArgs
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"name"
argument_list|,
literal|"Picasso"
argument_list|)
decl_stmt|;
name|Expression
name|e2
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"age"
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|Expression
name|e3
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"height"
argument_list|,
literal|5.5
argument_list|)
decl_stmt|;
name|Expression
name|e4
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"numEars"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Expression
name|exp
init|=
name|e1
operator|.
name|orExp
argument_list|(
name|e2
argument_list|,
name|e3
argument_list|,
name|e4
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exp
operator|.
name|getType
argument_list|()
argument_list|,
name|Expression
operator|.
name|OR
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
operator|(
name|SimpleNode
operator|)
name|exp
operator|)
operator|.
name|jjtGetNumChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBitwiseNegate
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"~7"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Expression
operator|.
name|BITWISE_NOT
argument_list|,
name|exp
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|SimpleNode
operator|)
name|exp
operator|)
operator|.
name|jjtGetNumChildren
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|8L
argument_list|,
name|exp
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// ~7 = -8 in
comment|// digital world
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBitwiseAnd
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"1& 0"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Expression
operator|.
name|BITWISE_AND
argument_list|,
name|exp
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|SimpleNode
operator|)
name|exp
operator|)
operator|.
name|jjtGetNumChildren
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|exp
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBitwiseOr
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"1 | 0"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Expression
operator|.
name|BITWISE_OR
argument_list|,
name|exp
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|SimpleNode
operator|)
name|exp
operator|)
operator|.
name|jjtGetNumChildren
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exp
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBitwiseXor
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"1 ^ 0"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Expression
operator|.
name|BITWISE_XOR
argument_list|,
name|exp
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|SimpleNode
operator|)
name|exp
operator|)
operator|.
name|jjtGetNumChildren
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exp
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBitwiseLeftShift
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"7<< 2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Expression
operator|.
name|BITWISE_LEFT_SHIFT
argument_list|,
name|exp
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|SimpleNode
operator|)
name|exp
operator|)
operator|.
name|jjtGetNumChildren
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|28L
argument_list|,
name|exp
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBitwiseRightShift
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"7>> 2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Expression
operator|.
name|BITWISE_RIGHT_SHIFT
argument_list|,
name|exp
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|SimpleNode
operator|)
name|exp
operator|)
operator|.
name|jjtGetNumChildren
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|exp
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * (a | b) | c = a | (b | c) 	 */
annotation|@
name|Test
specifier|public
name|void
name|testBitwiseAssociativity
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"(3010 | 2012) | 4095"
argument_list|)
decl_stmt|;
name|Expression
name|e2
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"3010 | (2012 | 4095)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|e1
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|,
name|e2
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * a | b = b | a 	 */
annotation|@
name|Test
specifier|public
name|void
name|testBitwiseCommutativity
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"3010 | 4095"
argument_list|)
decl_stmt|;
name|Expression
name|e2
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"4095 | 3010"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|e1
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|,
name|e2
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * a | (a& b) = a 	 */
annotation|@
name|Test
specifier|public
name|void
name|testBitwiseAbsorption
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"2012 | (2012& 3010)"
argument_list|)
decl_stmt|;
name|Expression
name|e2
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"2012L"
argument_list|)
decl_stmt|;
comment|// scalar becomes Long
comment|// object
name|assertEquals
argument_list|(
name|e1
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|,
name|e2
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * a | (b& c) = (a | b)& (a | c) 	 */
annotation|@
name|Test
specifier|public
name|void
name|testBitwiseDistributivity
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"4095 | (7777& 8888)"
argument_list|)
decl_stmt|;
name|Expression
name|e2
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"(4095 | 7777)& (4095 | 8888)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|e1
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|,
name|e2
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * a | ~a = 1 But in Java computed result is -1 because of JVM represents 	 * negative numbers as positive ones: ~2 = -3; For instance, there are only 	 * 4 bits and that is why -3 means '1101' and 3 means '0011' because of 	 * '1101' + '0011' = (1)'0000' what is zero; but the same time '1101' is 13. 	 */
annotation|@
name|Test
specifier|public
name|void
name|testBitwiseComplements
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"5555 | ~5555"
argument_list|)
decl_stmt|;
name|Expression
name|e2
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"9999& ~9999"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1L
argument_list|,
name|e1
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// ~0 = -1 that
comment|// is the way
comment|// how
comment|// robots kill
comment|// humans what
comment|// means x | ~x
comment|// =
comment|// 1 in boolean
comment|// algebra
comment|// against java
comment|// digital
comment|// bitwise
comment|// operations
comment|// logics
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|e2
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Huntington equation n(n(x) + y) + n(n(x) + n(y)) = x where is 'n' is 	 * negotation (may be any other unary operation) and '+' is disjunction (OR 	 * operation, i.e. '|' bitwise operation). 	 */
annotation|@
name|Test
specifier|public
name|void
name|testBitwiseHuntingtonEquation
parameter_list|()
block|{
name|Expression
name|theHuntingEquation
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"~(~3748 | 4095) | ~(~3748 | ~4095)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3748L
argument_list|,
name|theHuntingEquation
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Robbins equation n(n(x + y) + n(x + n(y))) = x where is 'n' is negotation 	 * and '+' is disjunction (OR operation, i.e. '|' bitwise operation). Every 	 * Robbins algebra is a Boolean algebra according to automated reasoning 	 * program EQP. 	 */
annotation|@
name|Test
specifier|public
name|void
name|testBitwiseRobbinsEquation
parameter_list|()
block|{
name|Expression
name|theRobbinsEquation
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"~(~(5111 | 4095) | ~(5111 | ~4095))"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5111L
argument_list|,
name|theRobbinsEquation
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Bitwise and math operations are ruled by precedence. 	 */
annotation|@
name|Test
specifier|public
name|void
name|testBitwisePrecedence
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"1<< 1& 2"
argument_list|)
decl_stmt|;
comment|// 1<< 1 = 2 and
comment|// after that 2
comment|//& 2
comment|// = 2;
name|Expression
name|e2
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"0 | 1& ~(3 | ~3)"
argument_list|)
decl_stmt|;
comment|// by java
comment|// math
comment|// precedence
comment|// that
comment|// means 0 |
comment|// (1& (~(3
comment|// | (~3))))
name|Expression
name|e3
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"3 | ~(-3) + 2"
argument_list|)
decl_stmt|;
comment|// JVM ~(-3) = 2
comment|// and then 2 +
comment|// 2 is 4 what
comment|// bitwise is
comment|// 100, then 011
comment|// | 100 = 111
comment|// what means 3
comment|// + 4 = 7
name|Expression
name|e4
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"2 * 2 | 2"
argument_list|)
decl_stmt|;
comment|// (2 * 2) | 2 = 4 |
comment|// 2 = '100' | '10'
comment|// = '110' = 6
name|Expression
name|e5
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"6 / 2& 3"
argument_list|)
decl_stmt|;
comment|// (6 / 2)& 3 = 3&
comment|// 3 = 3
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|e1
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|e2
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7L
argument_list|,
name|e3
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6L
argument_list|,
name|e4
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|e5
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendAsEJBQL_NotEquals_ParameterCapture
parameter_list|()
throws|throws
name|IOException
block|{
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"artistName != 'bla'"
argument_list|)
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|parametersAccumulator
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|e
operator|.
name|appendAsEJBQL
argument_list|(
name|parametersAccumulator
argument_list|,
name|buffer
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|String
name|ejbql
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.artistName<> ?1"
argument_list|,
name|ejbql
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parametersAccumulator
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parametersAccumulator
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"bla"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendAsEJBQL_Enum
parameter_list|()
throws|throws
name|IOException
block|{
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"a = enum:org.apache.cayenne.exp.ExpEnum1.THREE"
argument_list|)
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|e
operator|.
name|appendAsEJBQL
argument_list|(
name|buffer
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|String
name|ejbql
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.a = enum:org.apache.cayenne.exp.ExpEnum1.THREE"
argument_list|,
name|ejbql
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendAsString_StringLiteral
parameter_list|()
throws|throws
name|IOException
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"a = 'abc'"
argument_list|)
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|e1
operator|.
name|appendAsString
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a = \"abc\""
argument_list|,
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendAsString_Enum
parameter_list|()
throws|throws
name|IOException
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"a = enum:org.apache.cayenne.exp.ExpEnum1.TWO"
argument_list|)
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|e1
operator|.
name|appendAsString
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a = enum:org.apache.cayenne.exp.ExpEnum1.TWO"
argument_list|,
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomPruneTransform
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"(false and true) and true"
argument_list|)
decl_stmt|;
name|Expression
name|transformed
init|=
name|exp
operator|.
name|transform
argument_list|(
name|node
lambda|->
block|{
if|if
condition|(
name|node
operator|instanceof
name|ASTFalse
condition|)
block|{
return|return
name|Expression
operator|.
name|PRUNED_NODE
return|;
block|}
return|return
name|node
return|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"true and true"
argument_list|,
name|transformed
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

