begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|date_time
operator|.
name|DateTestEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|UnitDbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|DATE_TIME_PROJECT
argument_list|)
specifier|public
class|class
name|ASTFunctionCallDateIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|ObjectContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|UnitDbAdapter
name|unitDbAdapter
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|year
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
name|int
name|month
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
decl_stmt|;
name|int
name|day
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
decl_stmt|;
name|DateTestEntity
name|o1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|year
operator|-
literal|1
argument_list|,
name|month
argument_list|,
name|day
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|o1
operator|.
name|setDateColumn
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|year
argument_list|,
name|month
argument_list|,
name|day
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|o1
operator|.
name|setTimeColumn
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
name|day
operator|-
literal|1
argument_list|)
expr_stmt|;
name|o1
operator|.
name|setTimestampColumn
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|DateTestEntity
name|o2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|year
operator|+
literal|1
argument_list|,
name|month
argument_list|,
name|day
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|o2
operator|.
name|setDateColumn
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|year
argument_list|,
name|month
argument_list|,
name|day
argument_list|,
literal|23
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|o2
operator|.
name|setTimeColumn
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
name|day
operator|+
literal|1
argument_list|)
expr_stmt|;
name|o2
operator|.
name|setTimestampColumn
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCurrentDate
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|greaterOrEqualExp
argument_list|(
literal|"dateColumn"
argument_list|,
operator|new
name|ASTCurrentDate
argument_list|()
argument_list|)
decl_stmt|;
name|DateTestEntity
name|res1
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|,
name|exp
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|res1
argument_list|)
expr_stmt|;
name|Expression
name|exp2
init|=
name|ExpressionFactory
operator|.
name|lessExp
argument_list|(
literal|"dateColumn"
argument_list|,
operator|new
name|ASTCurrentDate
argument_list|()
argument_list|)
decl_stmt|;
name|DateTestEntity
name|res2
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|,
name|exp2
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|res2
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|res1
argument_list|,
name|res2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCurrentTime
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|greaterOrEqualExp
argument_list|(
literal|"timeColumn"
argument_list|,
operator|new
name|ASTCurrentTime
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DateTestEntity
argument_list|>
name|res
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|,
name|exp
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|unitDbAdapter
operator|.
name|supportsTimeSqlType
argument_list|()
condition|)
block|{
comment|// check only that query is executed without error
comment|// result will be invalid most likely as DB doesn't support TIME data type
return|return;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DateTestEntity
name|res1
init|=
name|res
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Expression
name|exp2
init|=
name|ExpressionFactory
operator|.
name|lessExp
argument_list|(
literal|"timeColumn"
argument_list|,
operator|new
name|ASTCurrentTime
argument_list|()
argument_list|)
decl_stmt|;
name|DateTestEntity
name|res2
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|,
name|exp2
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|res2
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|res1
argument_list|,
name|res2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCurrentTimestamp
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|greaterOrEqualExp
argument_list|(
literal|"timestampColumn"
argument_list|,
operator|new
name|ASTCurrentTimestamp
argument_list|()
argument_list|)
decl_stmt|;
name|DateTestEntity
name|res1
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|,
name|exp
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|res1
argument_list|)
expr_stmt|;
name|Expression
name|exp2
init|=
name|ExpressionFactory
operator|.
name|lessExp
argument_list|(
literal|"timestampColumn"
argument_list|,
operator|new
name|ASTCurrentTimestamp
argument_list|()
argument_list|)
decl_stmt|;
name|DateTestEntity
name|res2
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|,
name|exp2
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|res2
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|res1
argument_list|,
name|res2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testASTCurrentDateParse
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"dateColumn> currentDate()"
argument_list|)
decl_stmt|;
name|DateTestEntity
name|res
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|,
name|exp
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testASTCurrentTimeParse
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"timeColumn> currentTime()"
argument_list|)
decl_stmt|;
name|DateTestEntity
name|res
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|,
name|exp
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|unitDbAdapter
operator|.
name|supportsTimeSqlType
argument_list|()
condition|)
block|{
return|return;
block|}
name|assertNotNull
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testASTCurrentTimestampParse
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"timestampColumn> now()"
argument_list|)
decl_stmt|;
name|DateTestEntity
name|res
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|,
name|exp
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

