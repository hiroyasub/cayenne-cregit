begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTAbs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTAvg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTConcat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTLength
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTLocate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTLower
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTMax
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTMin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTMod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTObjPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTScalar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTSqrt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTSubstring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTSum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTTrim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTUpper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|PatternMatchNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|TstJavaBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|PropertyTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testPath
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"x.y"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|pp
init|=
name|p
operator|.
name|path
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"x.y"
argument_list|)
argument_list|,
name|pp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIn
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"x.y"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|e1
init|=
name|p
operator|.
name|in
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.y in (\"a\")"
argument_list|,
name|e1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Expression
name|e2
init|=
name|p
operator|.
name|in
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.y in (\"a\", \"b\")"
argument_list|,
name|e2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Expression
name|e3
init|=
name|p
operator|.
name|in
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x.y in (\"a\", \"b\")"
argument_list|,
name|e3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFrom
parameter_list|()
block|{
name|TstJavaBean
name|bean
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setIntField
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|Property
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"intField"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|7
argument_list|)
argument_list|,
name|INT_FIELD
operator|.
name|getFrom
argument_list|(
name|bean
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFromNestedProperty
parameter_list|()
block|{
name|TstJavaBean
name|bean
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|TstJavaBean
name|nestedBean
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|nestedBean
operator|.
name|setIntField
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setObjectField
argument_list|(
name|nestedBean
argument_list|)
expr_stmt|;
name|Property
argument_list|<
name|Integer
argument_list|>
name|OBJECT_FIELD_INT_FIELD
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"objectField.intField"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|7
argument_list|)
argument_list|,
name|OBJECT_FIELD_INT_FIELD
operator|.
name|getFrom
argument_list|(
name|bean
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFromNestedNull
parameter_list|()
block|{
name|TstJavaBean
name|bean
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setObjectField
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Property
argument_list|<
name|Integer
argument_list|>
name|OBJECT_FIELD_INT_FIELD
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"objectField.intField"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|OBJECT_FIELD_INT_FIELD
operator|.
name|getFrom
argument_list|(
name|bean
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFromAll
parameter_list|()
block|{
name|TstJavaBean
name|bean
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setIntField
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|TstJavaBean
name|bean2
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|bean2
operator|.
name|setIntField
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TstJavaBean
argument_list|>
name|beans
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|bean
argument_list|,
name|bean2
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"intField"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
argument_list|,
name|INT_FIELD
operator|.
name|getFromAll
argument_list|(
name|beans
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetIn
parameter_list|()
block|{
name|TstJavaBean
name|bean
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|Property
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"intField"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|INT_FIELD
operator|.
name|setIn
argument_list|(
name|bean
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|bean
operator|.
name|getIntField
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetInNestedProperty
parameter_list|()
block|{
name|TstJavaBean
name|bean
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setObjectField
argument_list|(
operator|new
name|TstJavaBean
argument_list|()
argument_list|)
expr_stmt|;
name|Property
argument_list|<
name|Integer
argument_list|>
name|OBJECT_FIELD_INT_FIELD
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"objectField.intField"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|OBJECT_FIELD_INT_FIELD
operator|.
name|setIn
argument_list|(
name|bean
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
operator|(
operator|(
name|TstJavaBean
operator|)
name|bean
operator|.
name|getObjectField
argument_list|()
operator|)
operator|.
name|getIntField
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetInNestedNull
parameter_list|()
block|{
name|TstJavaBean
name|bean
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setObjectField
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Property
argument_list|<
name|Integer
argument_list|>
name|OBJECT_FIELD_INT_FIELD
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"objectField.intField"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|OBJECT_FIELD_INT_FIELD
operator|.
name|setIn
argument_list|(
name|bean
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetInAll
parameter_list|()
block|{
name|TstJavaBean
name|bean
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|TstJavaBean
name|bean2
init|=
operator|new
name|TstJavaBean
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TstJavaBean
argument_list|>
name|beans
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|bean
argument_list|,
name|bean2
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"intField"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|INT_FIELD
operator|.
name|setInAll
argument_list|(
name|beans
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|bean
operator|.
name|getIntField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|bean2
operator|.
name|getIntField
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualsWithName
parameter_list|()
block|{
name|Property
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"intField"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD2
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"intField"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|INT_FIELD
operator|!=
name|INT_FIELD2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|INT_FIELD
operator|.
name|equals
argument_list|(
name|INT_FIELD2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCodeWithName
parameter_list|()
block|{
name|Property
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"intField"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD2
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"intField"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|Long
argument_list|>
name|LONG_FIELD
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"longField"
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|INT_FIELD
operator|.
name|hashCode
argument_list|()
operator|==
name|INT_FIELD2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|INT_FIELD
operator|.
name|hashCode
argument_list|()
operator|!=
name|LONG_FIELD
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualsWithNameAndType
parameter_list|()
block|{
name|Property
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"intField"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD2
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"intField"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|INT_FIELD
operator|!=
name|INT_FIELD2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|INT_FIELD
operator|.
name|equals
argument_list|(
name|INT_FIELD2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCodeWithNameAndType
parameter_list|()
block|{
name|Property
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"intField"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD2
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"intField"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|Long
argument_list|>
name|LONG_FIELD
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"longField"
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|INT_FIELD
operator|.
name|hashCode
argument_list|()
operator|==
name|INT_FIELD2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|INT_FIELD
operator|.
name|hashCode
argument_list|()
operator|!=
name|LONG_FIELD
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualsWithExpAndType
parameter_list|()
block|{
name|Property
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD
init|=
operator|new
name|Property
argument_list|<>
argument_list|(
literal|null
argument_list|,
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD2
init|=
operator|new
name|Property
argument_list|<>
argument_list|(
literal|null
argument_list|,
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|INT_FIELD
operator|!=
name|INT_FIELD2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|INT_FIELD
operator|.
name|equals
argument_list|(
name|INT_FIELD2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCodeWithExpAndType
parameter_list|()
block|{
name|Property
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD
init|=
operator|new
name|Property
argument_list|<>
argument_list|(
literal|null
argument_list|,
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD2
init|=
operator|new
name|Property
argument_list|<>
argument_list|(
literal|null
argument_list|,
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|Integer
argument_list|>
name|INT_FIELD3
init|=
operator|new
name|Property
argument_list|<>
argument_list|(
literal|null
argument_list|,
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|INT_FIELD
operator|.
name|hashCode
argument_list|()
argument_list|,
name|INT_FIELD2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|INT_FIELD
operator|.
name|hashCode
argument_list|()
argument_list|,
name|INT_FIELD3
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOuter
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|inner
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"xyz"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"xyz+"
argument_list|,
name|inner
operator|.
name|outer
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|inner1
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"xyz.xxx"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"xyz.xxx+"
argument_list|,
name|inner1
operator|.
name|outer
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|outer
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"xyz+"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"xyz+"
argument_list|,
name|outer
operator|.
name|outer
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLike
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"prop"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|e
init|=
name|p
operator|.
name|like
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"prop like \"abc\""
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLikeIgnoreCase
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"prop"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|e
init|=
name|p
operator|.
name|likeIgnoreCase
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"prop likeIgnoreCase \"abc\""
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLike_NoEscape
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"prop"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|e
init|=
name|p
operator|.
name|like
argument_list|(
literal|"ab%c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"prop like \"ab%c\""
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|PatternMatchNode
operator|)
name|e
operator|)
operator|.
name|getEscapeChar
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContains
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"prop"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|e
init|=
name|p
operator|.
name|contains
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"prop like \"%abc%\""
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|PatternMatchNode
operator|)
name|e
operator|)
operator|.
name|getEscapeChar
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartsWith
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"prop"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|e
init|=
name|p
operator|.
name|startsWith
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"prop like \"abc%\""
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|PatternMatchNode
operator|)
name|e
operator|)
operator|.
name|getEscapeChar
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEndsWith
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"prop"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|e
init|=
name|p
operator|.
name|endsWith
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"prop like \"%abc\""
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|PatternMatchNode
operator|)
name|e
operator|)
operator|.
name|getEscapeChar
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContains_Escape1
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"prop"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|e
init|=
name|p
operator|.
name|contains
argument_list|(
literal|"a%bc"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"prop like \"%a!%bc%\""
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'!'
argument_list|,
operator|(
operator|(
name|PatternMatchNode
operator|)
name|e
operator|)
operator|.
name|getEscapeChar
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContains_Escape2
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"prop"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|e
init|=
name|p
operator|.
name|contains
argument_list|(
literal|"a_!bc"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"prop like \"%a#_!bc%\""
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'#'
argument_list|,
operator|(
operator|(
name|PatternMatchNode
operator|)
name|e
operator|)
operator|.
name|getEscapeChar
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpressionConstructor
parameter_list|()
block|{
name|Property
argument_list|<
name|Integer
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"testPath"
argument_list|,
operator|new
name|ASTObjPath
argument_list|(
literal|"test.path"
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testPath"
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Expression
name|ex
init|=
name|p
operator|.
name|getExpression
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test.path"
argument_list|,
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testDeprecatedConstruct
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
operator|new
name|Property
argument_list|<>
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|p
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p"
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"p"
argument_list|)
argument_list|,
name|p
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreationWithName
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p1
init|=
operator|new
name|Property
argument_list|<>
argument_list|(
literal|"p1"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|p1
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p1"
argument_list|,
name|p1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|p1
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|p2
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"p1"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreationWithExp
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|FunctionExpressionFactory
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|p1
init|=
operator|new
name|Property
argument_list|<>
argument_list|(
literal|null
argument_list|,
name|exp
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|p1
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|p1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|p1
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|p2
init|=
name|Property
operator|.
name|create
argument_list|(
name|exp
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreationWithNameAndExp
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|FunctionExpressionFactory
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|p1
init|=
operator|new
name|Property
argument_list|<>
argument_list|(
literal|"p1"
argument_list|,
name|exp
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|p1
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p1"
argument_list|,
name|p1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|p1
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|p2
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"p1"
argument_list|,
name|exp
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlias
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|FunctionExpressionFactory
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|p1
init|=
operator|new
name|Property
argument_list|<>
argument_list|(
literal|"p1"
argument_list|,
name|exp
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|p1
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p1"
argument_list|,
name|p1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|p1
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|p2
init|=
name|p1
operator|.
name|alias
argument_list|(
literal|"p2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|p2
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p2"
argument_list|,
name|p2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|,
name|p2
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCount
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|Long
argument_list|>
name|newProp
init|=
name|p
operator|.
name|count
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newProp
operator|.
name|getExpression
argument_list|()
operator|instanceof
name|ASTCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getExpression
argument_list|()
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMin
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|newProp
init|=
name|p
operator|.
name|min
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newProp
operator|.
name|getExpression
argument_list|()
operator|instanceof
name|ASTMin
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getExpression
argument_list|()
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMax
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|newProp
init|=
name|p
operator|.
name|max
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newProp
operator|.
name|getExpression
argument_list|()
operator|instanceof
name|ASTMax
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getExpression
argument_list|()
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSum
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|newProp
init|=
name|p
operator|.
name|sum
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newProp
operator|.
name|getExpression
argument_list|()
operator|instanceof
name|ASTSum
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getExpression
argument_list|()
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAvg
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|newProp
init|=
name|p
operator|.
name|avg
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newProp
operator|.
name|getExpression
argument_list|()
operator|instanceof
name|ASTAvg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getExpression
argument_list|()
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAbs
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|newProp
init|=
name|p
operator|.
name|abs
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newProp
operator|.
name|getExpression
argument_list|()
operator|instanceof
name|ASTAbs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getExpression
argument_list|()
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMod
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|newProp
init|=
name|p
operator|.
name|mod
argument_list|(
literal|3.0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|newProp
operator|.
name|getExpression
argument_list|()
operator|instanceof
name|ASTMod
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getExpression
argument_list|()
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.0
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSqrt
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|newProp
init|=
name|p
operator|.
name|sqrt
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newProp
operator|.
name|getExpression
argument_list|()
operator|instanceof
name|ASTSqrt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getExpression
argument_list|()
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLength
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|Integer
argument_list|>
name|newProp
init|=
name|p
operator|.
name|length
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newProp
operator|.
name|getExpression
argument_list|()
operator|instanceof
name|ASTLength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getExpression
argument_list|()
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocateString
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|Integer
argument_list|>
name|newProp
init|=
name|p
operator|.
name|locate
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|newProp
operator|.
name|getExpression
argument_list|()
operator|instanceof
name|ASTLocate
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getExpression
argument_list|()
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocateProperty
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|p2
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"test2"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|Integer
argument_list|>
name|newProp
init|=
name|p
operator|.
name|locate
argument_list|(
name|p2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|newProp
operator|.
name|getExpression
argument_list|()
operator|instanceof
name|ASTLocate
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getExpression
argument_list|()
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p2
operator|.
name|getExpression
argument_list|()
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSustring
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|newProp
init|=
name|p
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|newProp
operator|.
name|getExpression
argument_list|()
operator|instanceof
name|ASTSubstring
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getExpression
argument_list|()
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTrim
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|newProp
init|=
name|p
operator|.
name|trim
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newProp
operator|.
name|getExpression
argument_list|()
operator|instanceof
name|ASTTrim
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getExpression
argument_list|()
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLower
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|newProp
init|=
name|p
operator|.
name|lower
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newProp
operator|.
name|getExpression
argument_list|()
operator|instanceof
name|ASTLower
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getExpression
argument_list|()
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpper
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|newProp
init|=
name|p
operator|.
name|upper
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newProp
operator|.
name|getExpression
argument_list|()
operator|instanceof
name|ASTUpper
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getExpression
argument_list|()
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcat
parameter_list|()
block|{
name|Property
argument_list|<
name|String
argument_list|>
name|p
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|p2
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"concat"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|exp
init|=
operator|new
name|ASTScalar
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Property
argument_list|<
name|String
argument_list|>
name|newProp
init|=
name|p
operator|.
name|concat
argument_list|(
literal|"string"
argument_list|,
name|exp
argument_list|,
name|p2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|newProp
operator|.
name|getExpression
argument_list|()
operator|instanceof
name|ASTConcat
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getExpression
argument_list|()
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string"
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// getOperand unwrapping ASTScalar
name|assertEquals
argument_list|(
name|p2
operator|.
name|getExpression
argument_list|()
argument_list|,
name|newProp
operator|.
name|getExpression
argument_list|()
operator|.
name|getOperand
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

