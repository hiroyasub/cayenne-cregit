begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|ASTAggregateTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testAvgConstruct
parameter_list|()
throws|throws
name|Exception
block|{
name|ASTAvg
name|avg
init|=
operator|new
name|ASTAvg
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AVG"
argument_list|,
name|avg
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ExpressionException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testAvgEvaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|ASTAvg
name|avg
init|=
operator|new
name|ASTAvg
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|avg
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAvgParse
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"AVG(artistName)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exp
operator|instanceof
name|ASTAvg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exp
operator|.
name|getOperandCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exp
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ASTObjPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCountConstruct
parameter_list|()
throws|throws
name|Exception
block|{
name|ASTCount
name|count
init|=
operator|new
name|ASTCount
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"COUNT"
argument_list|,
name|count
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCountExpParse
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"COUNT(artistName)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exp
operator|instanceof
name|ASTCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exp
operator|.
name|getOperandCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exp
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ASTObjPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCountAsteriskParse
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"COUNT(*)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exp
operator|instanceof
name|ASTCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exp
operator|.
name|getOperandCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exp
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ASTAsterisk
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinConstruct
parameter_list|()
throws|throws
name|Exception
block|{
name|ASTMin
name|min
init|=
operator|new
name|ASTMin
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"MIN"
argument_list|,
name|min
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinParse
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"MIN(artistName)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exp
operator|instanceof
name|ASTMin
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exp
operator|.
name|getOperandCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exp
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ASTObjPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxConstruct
parameter_list|()
throws|throws
name|Exception
block|{
name|ASTMax
name|max
init|=
operator|new
name|ASTMax
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"MAX"
argument_list|,
name|max
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxParse
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"MAX(artistName)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exp
operator|instanceof
name|ASTMax
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exp
operator|.
name|getOperandCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exp
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ASTObjPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSumConstruct
parameter_list|()
throws|throws
name|Exception
block|{
name|ASTSum
name|sum
init|=
operator|new
name|ASTSum
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"SUM"
argument_list|,
name|sum
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSumParse
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"SUM(artistName)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exp
operator|instanceof
name|ASTSum
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exp
operator|.
name|getOperandCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exp
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ASTObjPath
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

