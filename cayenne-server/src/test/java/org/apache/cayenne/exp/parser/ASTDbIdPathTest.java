begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|ASTDbIdPathTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testShallowCopy
parameter_list|()
block|{
name|ASTDbIdPath
name|path
init|=
operator|new
name|ASTDbIdPath
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Expression
name|exp
init|=
name|path
operator|.
name|shallowCopy
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|exp
operator|.
name|getType
argument_list|()
argument_list|,
name|Expression
operator|.
name|DBID_PATH
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|exp
argument_list|,
name|instanceOf
argument_list|(
name|ASTDbIdPath
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ASTDbIdPath
name|clone
init|=
operator|(
name|ASTDbIdPath
operator|)
name|exp
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|clone
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendAsString
parameter_list|()
throws|throws
name|IOException
block|{
name|ASTDbIdPath
name|path
init|=
operator|new
name|ASTDbIdPath
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|path
operator|.
name|appendAsString
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dbid:test"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleParse
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"dbid:test"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exp
argument_list|,
name|instanceOf
argument_list|(
name|ASTDbIdPath
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ASTDbIdPath
name|path
init|=
operator|(
name|ASTDbIdPath
operator|)
name|exp
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|path
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExpParse
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"dbid:test = 1"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|exp
argument_list|,
name|instanceOf
argument_list|(
name|ASTEqual
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ASTEqual
name|equal
init|=
operator|(
name|ASTEqual
operator|)
name|exp
decl_stmt|;
name|Node
name|child0
init|=
name|equal
operator|.
name|jjtGetChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|child0
argument_list|,
name|instanceOf
argument_list|(
name|ASTDbIdPath
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ASTDbIdPath
name|path
init|=
operator|(
name|ASTDbIdPath
operator|)
name|child0
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|path
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

