begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
operator|.
name|exp
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|StringPropertyTest
block|{
specifier|private
name|StringProperty
argument_list|<
name|String
argument_list|>
name|property
decl_stmt|;
specifier|private
name|StringProperty
argument_list|<
name|String
argument_list|>
name|other
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createProperty
parameter_list|()
block|{
name|property
operator|=
operator|new
name|StringProperty
argument_list|<>
argument_list|(
literal|"path"
argument_list|,
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|other
operator|=
operator|new
name|StringProperty
argument_list|<>
argument_list|(
literal|"other"
argument_list|,
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|like
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path like 'abc'"
argument_list|)
argument_list|,
name|property
operator|.
name|like
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|likeProp
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path like other"
argument_list|)
argument_list|,
name|property
operator|.
name|like
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|likeWithEscape
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path like 'abc'"
argument_list|)
argument_list|,
name|property
operator|.
name|like
argument_list|(
literal|"abc"
argument_list|,
literal|'|'
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|likeIgnoreCase
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path likeIgnoreCase 'abc'"
argument_list|)
argument_list|,
name|property
operator|.
name|likeIgnoreCase
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|likeIgnoreCaseProp
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path likeIgnoreCase other"
argument_list|)
argument_list|,
name|property
operator|.
name|likeIgnoreCase
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nlike
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path not like 'abc'"
argument_list|)
argument_list|,
name|property
operator|.
name|nlike
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nlikeProp
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path not like other"
argument_list|)
argument_list|,
name|property
operator|.
name|nlike
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nlikeIgnoreCase
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path not likeIgnoreCase 'abc'"
argument_list|)
argument_list|,
name|property
operator|.
name|nlikeIgnoreCase
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nlikeIgnoreCaseProp
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path not likeIgnoreCase other"
argument_list|)
argument_list|,
name|property
operator|.
name|nlikeIgnoreCase
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|contains
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path like '%abc%'"
argument_list|)
argument_list|,
name|property
operator|.
name|contains
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|startsWith
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path like 'abc%'"
argument_list|)
argument_list|,
name|property
operator|.
name|startsWith
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|endsWith
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path like '%abc'"
argument_list|)
argument_list|,
name|property
operator|.
name|endsWith
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|containsIgnoreCase
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path likeIgnoreCase '%abc%'"
argument_list|)
argument_list|,
name|property
operator|.
name|containsIgnoreCase
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|startsWithIgnoreCase
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path likeIgnoreCase 'abc%'"
argument_list|)
argument_list|,
name|property
operator|.
name|startsWithIgnoreCase
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|endsWithIgnoreCase
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path likeIgnoreCase '%abc'"
argument_list|)
argument_list|,
name|property
operator|.
name|endsWithIgnoreCase
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|length
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"length(path)"
argument_list|)
argument_list|,
name|property
operator|.
name|length
argument_list|()
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|locate
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"locate('abc', path)"
argument_list|)
argument_list|,
name|property
operator|.
name|locate
argument_list|(
literal|"abc"
argument_list|)
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|locateProp
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"locate(other, path)"
argument_list|)
argument_list|,
name|property
operator|.
name|locate
argument_list|(
name|other
argument_list|)
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|trim
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"trim(path)"
argument_list|)
argument_list|,
name|property
operator|.
name|trim
argument_list|()
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|upper
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"upper(path)"
argument_list|)
argument_list|,
name|property
operator|.
name|upper
argument_list|()
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|lower
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"lower(path)"
argument_list|)
argument_list|,
name|property
operator|.
name|lower
argument_list|()
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|concat
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"concat(path, 'abc', ' ', 'def', other)"
argument_list|)
argument_list|,
name|property
operator|.
name|concat
argument_list|(
literal|"abc"
argument_list|,
literal|' '
argument_list|,
name|exp
argument_list|(
literal|"'def'"
argument_list|)
argument_list|,
name|other
argument_list|)
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|substring
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"substring(path, 10, 30)"
argument_list|)
argument_list|,
name|property
operator|.
name|substring
argument_list|(
literal|10
argument_list|,
literal|30
argument_list|)
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|substringProp
parameter_list|()
block|{
name|NumericProperty
argument_list|<
name|Integer
argument_list|>
name|offset
init|=
name|PropertyFactory
operator|.
name|createNumeric
argument_list|(
literal|"offset"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// length is a function name, so use len here
name|NumericProperty
argument_list|<
name|Integer
argument_list|>
name|length
init|=
name|PropertyFactory
operator|.
name|createNumeric
argument_list|(
literal|"len"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"substring(path, offset, len)"
argument_list|)
argument_list|,
name|property
operator|.
name|substring
argument_list|(
name|offset
argument_list|,
name|length
argument_list|)
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compare
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path> 'abc'"
argument_list|)
argument_list|,
name|property
operator|.
name|gt
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path> other"
argument_list|)
argument_list|,
name|property
operator|.
name|gt
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path>= 'abc'"
argument_list|)
argument_list|,
name|property
operator|.
name|gte
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path>= other"
argument_list|)
argument_list|,
name|property
operator|.
name|gte
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path< 'abc'"
argument_list|)
argument_list|,
name|property
operator|.
name|lt
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path< other"
argument_list|)
argument_list|,
name|property
operator|.
name|lt
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path<= 'abc'"
argument_list|)
argument_list|,
name|property
operator|.
name|lte
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
argument_list|(
literal|"path<= other"
argument_list|)
argument_list|,
name|property
operator|.
name|lte
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|alias
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"path"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|property
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|=
name|property
operator|.
name|alias
argument_list|(
literal|"alias"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"alias"
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"alias"
argument_list|,
name|property
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

