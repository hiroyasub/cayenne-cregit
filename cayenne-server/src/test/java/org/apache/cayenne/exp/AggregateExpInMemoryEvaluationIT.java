begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|AggregateExpInMemoryEvaluationIT
extends|extends
name|ServerCase
block|{
comment|// Format: d/m/YY
specifier|private
specifier|static
specifier|final
name|DateFormat
name|DATE_FORMAT
init|=
name|DateFormat
operator|.
name|getDateInstance
argument_list|(
name|DateFormat
operator|.
name|SHORT
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createArtistsDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|tArtist
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"ARTIST"
argument_list|)
decl_stmt|;
name|tArtist
operator|.
name|setColumns
argument_list|(
literal|"ARTIST_ID"
argument_list|,
literal|"ARTIST_NAME"
argument_list|,
literal|"DATE_OF_BIRTH"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|setColumnTypes
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|Types
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|java
operator|.
name|sql
operator|.
name|Date
index|[]
name|dates
init|=
operator|new
name|java
operator|.
name|sql
operator|.
name|Date
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|dates
index|[
name|i
operator|-
literal|1
index|]
operator|=
operator|new
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|(
name|DATE_FORMAT
operator|.
name|parse
argument_list|(
literal|"1/"
operator|+
name|i
operator|+
literal|"/17"
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|tArtist
operator|.
name|insert
argument_list|(
name|i
argument_list|,
literal|"artist"
operator|+
name|i
argument_list|,
name|dates
index|[
name|i
operator|%
literal|5
index|]
argument_list|)
expr_stmt|;
block|}
name|TableHelper
name|tGallery
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"GALLERY"
argument_list|)
decl_stmt|;
name|tGallery
operator|.
name|setColumns
argument_list|(
literal|"GALLERY_ID"
argument_list|,
literal|"GALLERY_NAME"
argument_list|)
expr_stmt|;
name|tGallery
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"tate modern"
argument_list|)
expr_stmt|;
name|TableHelper
name|tPaintings
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"PAINTING"
argument_list|)
decl_stmt|;
name|tPaintings
operator|.
name|setColumns
argument_list|(
literal|"PAINTING_ID"
argument_list|,
literal|"PAINTING_TITLE"
argument_list|,
literal|"ARTIST_ID"
argument_list|,
literal|"GALLERY_ID"
argument_list|,
literal|"ESTIMATED_PRICE"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|tPaintings
operator|.
name|insert
argument_list|(
name|i
argument_list|,
literal|"painting"
operator|+
name|i
argument_list|,
name|i
operator|%
literal|5
operator|+
literal|1
argument_list|,
literal|1
argument_list|,
name|i
operator|*
literal|10
argument_list|)
expr_stmt|;
block|}
name|tPaintings
operator|.
name|insert
argument_list|(
literal|21
argument_list|,
literal|"painting21"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|clearArtistsDataSet
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|table
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"PAINTING"
argument_list|,
literal|"ARTIST"
argument_list|,
literal|"GALLERY"
argument_list|)
control|)
block|{
name|TableHelper
name|tHelper
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|tHelper
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCount
parameter_list|()
block|{
name|List
argument_list|<
name|Artist
argument_list|>
name|artists
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Artist
operator|.
name|ARTIST_ID_PK_PROPERTY
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|disjoint
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Expression
name|countExp
init|=
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|count
argument_list|()
operator|.
name|getExpression
argument_list|()
decl_stmt|;
for|for
control|(
name|Artist
name|artist
range|:
name|artists
control|)
block|{
name|assertEquals
argument_list|(
name|artist
operator|.
name|getPaintingArray
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|countExp
operator|.
name|evaluate
argument_list|(
name|artist
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMax
parameter_list|()
block|{
name|List
argument_list|<
name|Artist
argument_list|>
name|artists
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Artist
operator|.
name|ARTIST_ID_PK_PROPERTY
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|disjoint
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Expression
name|maxExp
init|=
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|ESTIMATED_PRICE
argument_list|)
operator|.
name|max
argument_list|()
operator|.
name|getExpression
argument_list|()
decl_stmt|;
name|Object
name|max0
init|=
name|maxExp
operator|.
name|evaluate
argument_list|(
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|BigDecimal
name|expected0
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|20000
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected0
argument_list|,
name|max0
argument_list|)
expr_stmt|;
name|Object
name|max1
init|=
name|maxExp
operator|.
name|evaluate
argument_list|(
name|artists
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|BigDecimal
name|expected1
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|100000
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected1
argument_list|,
name|max1
argument_list|)
expr_stmt|;
name|Object
name|max4
init|=
name|maxExp
operator|.
name|evaluate
argument_list|(
name|artists
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|BigDecimal
name|expected4
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|19000
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected4
argument_list|,
name|max4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMin
parameter_list|()
block|{
name|List
argument_list|<
name|Artist
argument_list|>
name|artists
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Artist
operator|.
name|ARTIST_ID_PK_PROPERTY
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|disjoint
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Expression
name|minExp
init|=
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|ESTIMATED_PRICE
argument_list|)
operator|.
name|min
argument_list|()
operator|.
name|getExpression
argument_list|()
decl_stmt|;
name|Object
name|min0
init|=
name|minExp
operator|.
name|evaluate
argument_list|(
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|BigDecimal
name|expected0
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|5000
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected0
argument_list|,
name|min0
argument_list|)
expr_stmt|;
name|Object
name|min3
init|=
name|minExp
operator|.
name|evaluate
argument_list|(
name|artists
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|BigDecimal
name|expected1
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|3000
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected1
argument_list|,
name|min3
argument_list|)
expr_stmt|;
name|Object
name|min4
init|=
name|minExp
operator|.
name|evaluate
argument_list|(
name|artists
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|BigDecimal
name|expected4
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|4000
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected4
argument_list|,
name|min4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAvg
parameter_list|()
block|{
name|List
argument_list|<
name|Artist
argument_list|>
name|artists
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|disjoint
argument_list|()
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Artist
operator|.
name|ARTIST_ID_PK_PROPERTY
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Expression
name|avgExp
init|=
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|ESTIMATED_PRICE
argument_list|)
operator|.
name|avg
argument_list|()
operator|.
name|getExpression
argument_list|()
decl_stmt|;
name|Object
name|avg0
init|=
name|avgExp
operator|.
name|evaluate
argument_list|(
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|125.0
argument_list|,
name|avg0
argument_list|)
expr_stmt|;
name|Object
name|avg2
init|=
name|avgExp
operator|.
name|evaluate
argument_list|(
name|artists
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|95.0
argument_list|,
name|avg2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

