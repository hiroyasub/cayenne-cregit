begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ExpressionFactoryTest
block|{
specifier|private
name|TstTraversalHandler
name|handler
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|handler
operator|=
operator|new
name|TstTraversalHandler
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatchAllExp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create expressions and check the counts,
comment|// leaf count should be (2N) : 2 leafs for each pair
comment|// node count should be (2N + 1) for nodes with more than 1 pair
comment|// and 2N for a single pair : 2 nodes for each pair + 1 list node
comment|// where N is map size
comment|// check for N in (1..3)
for|for
control|(
name|int
name|n
init|=
literal|1
init|;
name|n
operator|<=
literal|3
condition|;
name|n
operator|++
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// populate map
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|n
condition|;
name|i
operator|++
control|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"k"
operator|+
name|i
argument_list|,
literal|"v"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|matchAllExp
argument_list|(
name|map
argument_list|,
name|Expression
operator|.
name|LESS_THAN
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|handler
operator|.
name|traverseExpression
argument_list|(
name|exp
argument_list|)
expr_stmt|;
comment|// assert statistics
name|handler
operator|.
name|assertConsistency
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Failed: "
operator|+
name|exp
argument_list|,
literal|2
operator|*
name|n
argument_list|,
name|handler
operator|.
name|getLeafs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Failed: "
operator|+
name|exp
argument_list|,
name|n
operator|<
literal|2
condition|?
literal|2
operator|*
name|n
else|:
literal|2
operator|*
name|n
operator|+
literal|1
argument_list|,
name|handler
operator|.
name|getNodeCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJoinExp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create expressions and check the counts,
comment|// leaf count should be (2N) : 2 leafs for each expression
comment|// node count should be N> 1 ? 2 * N + 1 : 2 * N
comment|// where N is map size
comment|// check for N in (1..5)
for|for
control|(
name|int
name|n
init|=
literal|1
init|;
name|n
operator|<=
literal|5
condition|;
name|n
operator|++
control|)
block|{
name|Collection
argument_list|<
name|Expression
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
comment|// populate map
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|n
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
operator|(
literal|"k"
operator|+
name|i
operator|)
argument_list|,
literal|"v"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|joinExp
argument_list|(
name|Expression
operator|.
name|AND
argument_list|,
name|list
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|handler
operator|.
name|traverseExpression
argument_list|(
name|exp
argument_list|)
expr_stmt|;
comment|// assert statistics
name|handler
operator|.
name|assertConsistency
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Failed: "
operator|+
name|exp
argument_list|,
literal|2
operator|*
name|n
argument_list|,
name|handler
operator|.
name|getLeafs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Failed: "
operator|+
name|exp
argument_list|,
name|n
operator|>
literal|1
condition|?
literal|2
operator|*
name|n
operator|+
literal|1
else|:
literal|2
operator|*
name|n
argument_list|,
name|handler
operator|.
name|getNodeCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnd_Collection
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Expression
name|e2
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"b"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Expression
name|e3
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"c"
argument_list|,
literal|"C"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Expression
argument_list|>
name|c
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|)
decl_stmt|;
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|and
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(a = 1) and (b = 2) and (c = \"C\")"
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnd_Collection_OneElement
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Expression
argument_list|>
name|c
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|e1
argument_list|)
decl_stmt|;
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|and
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a = 1"
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnd_Collection_Empty
parameter_list|()
block|{
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|and
argument_list|(
name|Collections
operator|.
expr|<
name|Expression
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
comment|// hmm... is this really a valid return value?
name|assertNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnd_Vararg
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Expression
name|e2
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"b"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Expression
name|e3
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"c"
argument_list|,
literal|"C"
argument_list|)
decl_stmt|;
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|and
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(a = 1) and (b = 2) and (c = \"C\")"
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnd_Vararg_OneElement
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|and
argument_list|(
name|e1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a = 1"
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnd_Vararg_Empty
parameter_list|()
block|{
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|and
argument_list|()
decl_stmt|;
comment|// hmm... is this really a valid return value?
name|assertNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOr_Collection
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Expression
name|e2
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"b"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Expression
name|e3
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"c"
argument_list|,
literal|"C"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Expression
argument_list|>
name|c
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|)
decl_stmt|;
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|or
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(a = 1) or (b = 2) or (c = \"C\")"
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOr_Vararg
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Expression
name|e2
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"b"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Expression
name|e3
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"c"
argument_list|,
literal|"C"
argument_list|)
decl_stmt|;
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|or
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|e3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(a = 1) or (b = 2) or (c = \"C\")"
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExp_Long
parameter_list|()
block|{
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"216201000180L"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|216201000180L
argument_list|,
name|e
operator|.
name|evaluate
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExp_Path
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"object.path"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Expression
operator|.
name|OBJ_PATH
argument_list|,
name|e1
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Expression
name|e2
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"db:object.path"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Expression
operator|.
name|DB_PATH
argument_list|,
name|e2
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Expression
name|e3
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"object+.path"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Expression
operator|.
name|OBJ_PATH
argument_list|,
name|e3
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Expression
name|e4
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"db:object.path+"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Expression
operator|.
name|DB_PATH
argument_list|,
name|e4
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExp_Scalar
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"a = 'abc'"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|e1
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExp_Enum
parameter_list|()
block|{
name|Expression
name|e1
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"a = enum:org.apache.cayenne.exp.ExpEnum1.ONE"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpEnum1
operator|.
name|ONE
argument_list|,
name|e1
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Expression
name|e2
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"a = enum:org.apache.cayenne.exp.ExpEnum1.TWO"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpEnum1
operator|.
name|TWO
argument_list|,
name|e2
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Expression
name|e3
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"a = enum:org.apache.cayenne.exp.ExpEnum1.THREE"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ExpEnum1
operator|.
name|THREE
argument_list|,
name|e3
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ExpressionException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testExp_EnumInvalid1
parameter_list|()
block|{
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"a = enum:org.apache.cayenne.exp.ExpEnum1.BOGUS"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ExpressionException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testExp_EnumInvalid2
parameter_list|()
block|{
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"a = enum:BOGUS"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExp_MapParams
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"a< $a and b = $c"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"a"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"c"
argument_list|,
literal|"CC"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"(a< 5) and (b = \"CC\")"
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

