begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTExists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTNotExists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTSubquery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ColumnSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|SelfPropertyTest
block|{
specifier|private
name|SelfProperty
argument_list|<
name|Artist
argument_list|>
name|property
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createProperty
parameter_list|()
block|{
name|property
operator|=
operator|new
name|SelfProperty
argument_list|<>
argument_list|(
literal|"path"
argument_list|,
literal|null
argument_list|,
name|Artist
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQuery
parameter_list|()
block|{
name|ObjectSelect
argument_list|<
name|Artist
argument_list|>
name|query
init|=
name|property
operator|.
name|query
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|query
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|query
operator|.
name|getWhere
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryWithExp
parameter_list|()
block|{
name|ObjectSelect
argument_list|<
name|Artist
argument_list|>
name|query
init|=
name|property
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|eq
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|query
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"artistName = 'test'"
argument_list|)
argument_list|,
name|query
operator|.
name|getWhere
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnQuery
parameter_list|()
block|{
name|ColumnSelect
argument_list|<
name|String
argument_list|>
name|query
init|=
name|property
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|query
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|query
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|query
operator|.
name|getColumns
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|query
operator|.
name|getWhere
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnsQuery
parameter_list|()
block|{
name|ColumnSelect
argument_list|<
name|Object
index|[]
argument_list|>
name|query
init|=
name|property
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|query
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|query
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Property
argument_list|<
name|?
argument_list|>
argument_list|>
name|iterator
init|=
name|query
operator|.
name|getColumns
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|query
operator|.
name|getWhere
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExists
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|property
operator|.
name|exists
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|eq
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exp
operator|instanceof
name|ASTExists
argument_list|)
expr_stmt|;
name|ASTExists
name|exists
init|=
operator|(
name|ASTExists
operator|)
name|exp
decl_stmt|;
name|Node
name|node
init|=
name|exists
operator|.
name|jjtGetChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|ASTSubquery
argument_list|)
expr_stmt|;
name|ASTSubquery
name|subquery
init|=
operator|(
name|ASTSubquery
operator|)
name|node
decl_stmt|;
name|assertTrue
argument_list|(
name|subquery
operator|.
name|getQuery
argument_list|()
operator|.
name|unwrap
argument_list|()
operator|instanceof
name|ObjectSelect
argument_list|)
expr_stmt|;
name|ObjectSelect
argument_list|<
name|?
argument_list|>
name|subSelect
init|=
operator|(
name|ObjectSelect
argument_list|<
name|?
argument_list|>
operator|)
name|subquery
operator|.
name|getQuery
argument_list|()
operator|.
name|unwrap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|subSelect
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"artistName = 'test'"
argument_list|)
argument_list|,
name|subSelect
operator|.
name|getWhere
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotExists
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|property
operator|.
name|notExists
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|eq
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exp
operator|instanceof
name|ASTNotExists
argument_list|)
expr_stmt|;
name|ASTNotExists
name|exists
init|=
operator|(
name|ASTNotExists
operator|)
name|exp
decl_stmt|;
name|Node
name|node
init|=
name|exists
operator|.
name|jjtGetChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|node
operator|instanceof
name|ASTSubquery
argument_list|)
expr_stmt|;
name|ASTSubquery
name|subquery
init|=
operator|(
name|ASTSubquery
operator|)
name|node
decl_stmt|;
name|assertTrue
argument_list|(
name|subquery
operator|.
name|getQuery
argument_list|()
operator|.
name|unwrap
argument_list|()
operator|instanceof
name|ObjectSelect
argument_list|)
expr_stmt|;
name|ObjectSelect
argument_list|<
name|?
argument_list|>
name|subSelect
init|=
operator|(
name|ObjectSelect
argument_list|<
name|?
argument_list|>
operator|)
name|subquery
operator|.
name|getQuery
argument_list|()
operator|.
name|unwrap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|subSelect
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"artistName = 'test'"
argument_list|)
argument_list|,
name|subSelect
operator|.
name|getWhere
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

