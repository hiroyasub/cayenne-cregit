begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * Class that collects statistics of expression traversal.  */
end_comment

begin_class
specifier|public
class|class
name|TstTraversalHandler
implements|implements
name|TraversalHandler
block|{
specifier|protected
name|List
argument_list|<
name|Object
argument_list|>
name|treeFlatView
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|int
name|children
decl_stmt|;
specifier|protected
name|int
name|nodes
decl_stmt|;
specifier|protected
name|int
name|nodesStarted
decl_stmt|;
specifier|protected
name|int
name|leafs
decl_stmt|;
comment|/** 	 * Performs independent traversal of two expressions, comparing the results. 	 * If expressions structure is different, throws an exception. 	 */
specifier|public
specifier|static
name|void
name|compareExps
parameter_list|(
name|Expression
name|exp1
parameter_list|,
name|Expression
name|exp2
parameter_list|)
block|{
name|TstTraversalHandler
name|handler1
init|=
operator|new
name|TstTraversalHandler
argument_list|()
decl_stmt|;
name|handler1
operator|.
name|traverseExpression
argument_list|(
name|exp1
argument_list|)
expr_stmt|;
name|TstTraversalHandler
name|handler2
init|=
operator|new
name|TstTraversalHandler
argument_list|()
decl_stmt|;
name|handler2
operator|.
name|traverseExpression
argument_list|(
name|exp2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|handler1
operator|.
name|nodes
argument_list|,
name|handler2
operator|.
name|nodes
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TstTraversalHandler
parameter_list|()
block|{
block|}
specifier|public
name|void
name|assertConsistency
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodesStarted
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getTreeFlatView
parameter_list|()
block|{
return|return
name|treeFlatView
return|;
block|}
specifier|public
name|void
name|traverseExpression
parameter_list|(
name|Expression
name|exp
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|exp
operator|.
name|traverse
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|children
operator|=
literal|0
expr_stmt|;
name|nodes
operator|=
literal|0
expr_stmt|;
name|nodesStarted
operator|=
literal|0
expr_stmt|;
name|leafs
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|int
name|getNodeCount
parameter_list|()
block|{
return|return
name|nodes
return|;
block|}
specifier|public
name|int
name|getChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
specifier|public
name|int
name|getNodes
parameter_list|()
block|{
return|return
name|nodes
return|;
block|}
specifier|public
name|int
name|getNodesStarted
parameter_list|()
block|{
return|return
name|nodesStarted
return|;
block|}
specifier|public
name|int
name|getLeafs
parameter_list|()
block|{
return|return
name|leafs
return|;
block|}
specifier|public
name|void
name|finishedChild
parameter_list|(
name|Expression
name|node
parameter_list|,
name|int
name|childIndex
parameter_list|,
name|boolean
name|hasMoreChildren
parameter_list|)
block|{
name|children
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|startNode
parameter_list|(
name|Expression
name|node
parameter_list|,
name|Expression
name|parentNode
parameter_list|)
block|{
name|treeFlatView
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|nodesStarted
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|endNode
parameter_list|(
name|Expression
name|node
parameter_list|,
name|Expression
name|parentNode
parameter_list|)
block|{
name|nodes
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|objectNode
parameter_list|(
name|Object
name|leaf
parameter_list|,
name|Expression
name|parentNode
parameter_list|)
block|{
name|treeFlatView
operator|.
name|add
argument_list|(
name|leaf
argument_list|)
expr_stmt|;
name|leafs
operator|++
expr_stmt|;
block|}
block|}
end_class

end_unit

