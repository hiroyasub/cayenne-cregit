begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Cayenne
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|util
operator|.
name|TstBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|ServerCase
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|ExpressionEvaluateInMemoryIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|ServerRuntime
name|runtime
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|DBHelper
name|dbHelper
decl_stmt|;
specifier|protected
name|TableHelper
name|tArtist
decl_stmt|;
specifier|protected
name|TableHelper
name|tPainting
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUpAfterInjection
parameter_list|()
throws|throws
name|Exception
block|{
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"PAINTING_INFO"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"PAINTING"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"PAINTING1"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"ARTIST_EXHIBIT"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"ARTIST_GROUP"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"ARTIST"
argument_list|)
expr_stmt|;
name|tArtist
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"ARTIST"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|setColumns
argument_list|(
literal|"ARTIST_ID"
argument_list|,
literal|"ARTIST_NAME"
argument_list|)
expr_stmt|;
name|tPainting
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"PAINTING"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|setColumns
argument_list|(
literal|"PAINTING_ID"
argument_list|,
literal|"ARTIST_ID"
argument_list|,
literal|"PAINTING_TITLE"
argument_list|,
literal|"ESTIMATED_PRICE"
argument_list|)
operator|.
name|setColumnTypes
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|Types
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createTwoArtistsThreePaintings
parameter_list|()
throws|throws
name|Exception
block|{
name|tArtist
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"artist1"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"artist2"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|"P1"
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|"P2"
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|null
argument_list|,
literal|"P3"
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateOBJ_PATH_DataObject
parameter_list|()
throws|throws
name|Exception
block|{
name|ASTObjPath
name|node
init|=
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
decl_stmt|;
name|Artist
name|a1
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|a1
operator|.
name|setArtistName
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|node
operator|.
name|evaluate
argument_list|(
name|a1
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|a2
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|a2
operator|.
name|setArtistName
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"123"
argument_list|,
name|node
operator|.
name|evaluate
argument_list|(
name|a2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateOBJ_PATH_JavaBean
parameter_list|()
throws|throws
name|Exception
block|{
name|ASTObjPath
name|node
init|=
operator|new
name|ASTObjPath
argument_list|(
literal|"property2"
argument_list|)
decl_stmt|;
name|TstBean
name|b1
init|=
operator|new
name|TstBean
argument_list|()
decl_stmt|;
name|b1
operator|.
name|setProperty2
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|,
name|node
operator|.
name|evaluate
argument_list|(
name|b1
argument_list|)
argument_list|)
expr_stmt|;
name|TstBean
name|b2
init|=
operator|new
name|TstBean
argument_list|()
decl_stmt|;
name|b2
operator|.
name|setProperty2
argument_list|(
operator|-
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
operator|-
literal|3
argument_list|)
argument_list|,
name|node
operator|.
name|evaluate
argument_list|(
name|b2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateOBJ_PATH_ObjEntity
parameter_list|()
throws|throws
name|Exception
block|{
name|ASTObjPath
name|node
init|=
operator|new
name|ASTObjPath
argument_list|(
literal|"paintingArray.paintingTitle"
argument_list|)
decl_stmt|;
name|ObjEntity
name|ae
init|=
name|runtime
operator|.
name|getDataDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getObjEntity
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
name|target
init|=
name|node
operator|.
name|evaluate
argument_list|(
name|ae
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|target
operator|instanceof
name|ObjAttribute
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateDB_PATH_DbEntity
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|e
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"db:paintingArray.PAINTING_TITLE"
argument_list|)
decl_stmt|;
name|ObjEntity
name|ae
init|=
name|runtime
operator|.
name|getDataDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getObjEntity
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|DbEntity
name|ade
init|=
name|ae
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
name|Object
name|objTarget
init|=
name|e
operator|.
name|evaluate
argument_list|(
name|ae
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|objTarget
operator|instanceof
name|DbAttribute
argument_list|)
expr_stmt|;
name|Object
name|dbTarget
init|=
name|e
operator|.
name|evaluate
argument_list|(
name|ade
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dbTarget
operator|instanceof
name|DbAttribute
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateEQUAL_TOBigDecimal
parameter_list|()
throws|throws
name|Exception
block|{
name|BigDecimal
name|bd1
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"2.0"
argument_list|)
decl_stmt|;
name|BigDecimal
name|bd2
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"2.0"
argument_list|)
decl_stmt|;
name|BigDecimal
name|bd3
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"2.00"
argument_list|)
decl_stmt|;
name|BigDecimal
name|bd4
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"2.01"
argument_list|)
decl_stmt|;
name|Expression
name|equalTo
init|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
name|Painting
operator|.
name|ESTIMATED_PRICE_PROPERTY
argument_list|)
argument_list|,
name|bd1
argument_list|)
decl_stmt|;
name|Painting
name|p
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|p
operator|.
name|setEstimatedPrice
argument_list|(
name|bd2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|equalTo
operator|.
name|match
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
comment|// BigDecimals must compare regardless of the number of trailing zeros
comment|// (see CAY-280)
name|p
operator|.
name|setEstimatedPrice
argument_list|(
name|bd3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|equalTo
operator|.
name|match
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setEstimatedPrice
argument_list|(
name|bd4
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|equalTo
operator|.
name|match
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateEQUAL_TO
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|equalTo
init|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|"abc"
argument_list|)
decl_stmt|;
name|Expression
name|notEqualTo
init|=
operator|new
name|ASTNotEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|"abc"
argument_list|)
decl_stmt|;
name|Artist
name|match
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|match
operator|.
name|setArtistName
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|equalTo
operator|.
name|match
argument_list|(
name|match
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|notEqualTo
operator|.
name|match
argument_list|(
name|match
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|noMatch
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|noMatch
operator|.
name|setArtistName
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Failed: "
operator|+
name|equalTo
argument_list|,
name|equalTo
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed: "
operator|+
name|notEqualTo
argument_list|,
name|notEqualTo
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateEQUAL_TO_Null
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|equalToNull
init|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Expression
name|equalToNotNull
init|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|"abc"
argument_list|)
decl_stmt|;
name|Artist
name|match
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|equalToNull
operator|.
name|match
argument_list|(
name|match
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|equalToNotNull
operator|.
name|match
argument_list|(
name|match
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|noMatch
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|noMatch
operator|.
name|setArtistName
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|equalToNull
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateNOT_EQUAL_TONull
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|notEqualToNull
init|=
operator|new
name|ASTNotEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Expression
name|notEqualToNotNull
init|=
operator|new
name|ASTNotEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|"abc"
argument_list|)
decl_stmt|;
name|Artist
name|match
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|notEqualToNull
operator|.
name|match
argument_list|(
name|match
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|notEqualToNotNull
operator|.
name|match
argument_list|(
name|match
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|noMatch
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|noMatch
operator|.
name|setArtistName
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed: "
operator|+
name|notEqualToNull
argument_list|,
name|notEqualToNull
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateEQUAL_TODataObject
parameter_list|()
throws|throws
name|Exception
block|{
name|Artist
name|a1
init|=
operator|(
name|Artist
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
name|Artist
name|a2
init|=
operator|(
name|Artist
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
name|Painting
name|p1
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Painting"
argument_list|)
decl_stmt|;
name|Painting
name|p2
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Painting"
argument_list|)
decl_stmt|;
name|Painting
name|p3
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Painting"
argument_list|)
decl_stmt|;
name|a1
operator|.
name|setArtistName
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|a2
operator|.
name|setArtistName
argument_list|(
literal|"a2"
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setPaintingTitle
argument_list|(
literal|"p1"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|setPaintingTitle
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
name|p3
operator|.
name|setPaintingTitle
argument_list|(
literal|"p3"
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|p1
operator|.
name|setToArtist
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|p2
operator|.
name|setToArtist
argument_list|(
name|a2
argument_list|)
expr_stmt|;
name|Expression
name|e
init|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"toArtist"
argument_list|)
argument_list|,
name|a1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|match
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|match
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|match
argument_list|(
name|p3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateEQUAL_TO_Temp_ObjectId
parameter_list|()
throws|throws
name|Exception
block|{
name|Artist
name|a1
init|=
operator|(
name|Artist
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
name|Artist
name|a2
init|=
operator|(
name|Artist
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
name|Painting
name|p1
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Painting"
argument_list|)
decl_stmt|;
name|Painting
name|p2
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Painting"
argument_list|)
decl_stmt|;
name|Painting
name|p3
init|=
operator|(
name|Painting
operator|)
name|context
operator|.
name|newObject
argument_list|(
literal|"Painting"
argument_list|)
decl_stmt|;
name|p1
operator|.
name|setToArtist
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|p2
operator|.
name|setToArtist
argument_list|(
name|a2
argument_list|)
expr_stmt|;
name|Expression
name|e
init|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"toArtist"
argument_list|)
argument_list|,
name|a1
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|match
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|match
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|match
argument_list|(
name|p3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateEQUAL_TO_Id
parameter_list|()
throws|throws
name|Exception
block|{
name|createTwoArtistsThreePaintings
argument_list|()
expr_stmt|;
name|Artist
name|a1
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Painting
name|p1
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Painting
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Painting
name|p2
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Painting
operator|.
name|class
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Painting
name|p3
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|Painting
operator|.
name|class
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Expression
name|e
init|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"toArtist"
argument_list|)
argument_list|,
name|Cayenne
operator|.
name|intPKForObject
argument_list|(
name|a1
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|match
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|match
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|match
argument_list|(
name|p3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateAND
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|e1
init|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|"abc"
argument_list|)
decl_stmt|;
name|Expression
name|e2
init|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|"abc"
argument_list|)
decl_stmt|;
name|ASTAnd
name|e
init|=
operator|new
name|ASTAnd
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e1
block|,
name|e2
block|}
argument_list|)
decl_stmt|;
name|Artist
name|match
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|match
operator|.
name|setArtistName
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|match
argument_list|(
name|match
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|noMatch
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|noMatch
operator|.
name|setArtistName
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateOR
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|e1
init|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|"abc"
argument_list|)
decl_stmt|;
name|Expression
name|e2
init|=
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|"xyz"
argument_list|)
decl_stmt|;
name|ASTOr
name|e
init|=
operator|new
name|ASTOr
argument_list|(
operator|new
name|Object
index|[]
block|{
name|e1
block|,
name|e2
block|}
argument_list|)
decl_stmt|;
name|Artist
name|match1
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|match1
operator|.
name|setArtistName
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed: "
operator|+
name|e
argument_list|,
name|e
operator|.
name|match
argument_list|(
name|match1
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|match2
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|match2
operator|.
name|setArtistName
argument_list|(
literal|"xyz"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed: "
operator|+
name|e
argument_list|,
name|e
operator|.
name|match
argument_list|(
name|match2
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|noMatch
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|noMatch
operator|.
name|setArtistName
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Failed: "
operator|+
name|e
argument_list|,
name|e
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateNOT
parameter_list|()
throws|throws
name|Exception
block|{
name|ASTNot
name|e
init|=
operator|new
name|ASTNot
argument_list|(
operator|new
name|ASTEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
decl_stmt|;
name|Artist
name|noMatch
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|noMatch
operator|.
name|setArtistName
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|match
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|match
operator|.
name|setArtistName
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed: "
operator|+
name|e
argument_list|,
name|e
operator|.
name|match
argument_list|(
name|match
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateLESS_THAN
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|e
init|=
operator|new
name|ASTLess
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"estimatedPrice"
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|10000d
argument_list|)
argument_list|)
decl_stmt|;
name|Painting
name|noMatch
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|noMatch
operator|.
name|setEstimatedPrice
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|10001
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Failed: "
operator|+
name|e
argument_list|,
name|e
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
name|Painting
name|noMatch1
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|noMatch1
operator|.
name|setEstimatedPrice
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Failed: "
operator|+
name|e
argument_list|,
name|e
operator|.
name|match
argument_list|(
name|noMatch1
argument_list|)
argument_list|)
expr_stmt|;
name|Painting
name|match
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|match
operator|.
name|setEstimatedPrice
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|9999
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed: "
operator|+
name|e
argument_list|,
name|e
operator|.
name|match
argument_list|(
name|match
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateLESS_THAN_Null
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|ltNull
init|=
operator|new
name|ASTLess
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"estimatedPrice"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Expression
name|ltNotNull
init|=
operator|new
name|ASTLess
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"estimatedPrice"
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|10000d
argument_list|)
argument_list|)
decl_stmt|;
name|Painting
name|noMatch
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|ltNull
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ltNotNull
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateLESS_THAN_EQUAL_TO
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|e
init|=
operator|new
name|ASTLessOrEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"estimatedPrice"
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|10000d
argument_list|)
argument_list|)
decl_stmt|;
name|Painting
name|noMatch
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|noMatch
operator|.
name|setEstimatedPrice
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|10001
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
name|Painting
name|match1
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|match1
operator|.
name|setEstimatedPrice
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|match
argument_list|(
name|match1
argument_list|)
argument_list|)
expr_stmt|;
name|Painting
name|match
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|match
operator|.
name|setEstimatedPrice
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|9999
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed: "
operator|+
name|e
argument_list|,
name|e
operator|.
name|match
argument_list|(
name|match
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateLESS_THAN_EQUAL_TO_Null
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|ltNull
init|=
operator|new
name|ASTLessOrEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"estimatedPrice"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Expression
name|ltNotNull
init|=
operator|new
name|ASTLessOrEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"estimatedPrice"
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|10000d
argument_list|)
argument_list|)
decl_stmt|;
name|Painting
name|noMatch
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|ltNull
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ltNotNull
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateGREATER_THAN
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|e
init|=
operator|new
name|ASTGreater
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"estimatedPrice"
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|10000d
argument_list|)
argument_list|)
decl_stmt|;
name|Painting
name|noMatch
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|noMatch
operator|.
name|setEstimatedPrice
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|9999
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
name|Painting
name|noMatch1
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|noMatch1
operator|.
name|setEstimatedPrice
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|match
argument_list|(
name|noMatch1
argument_list|)
argument_list|)
expr_stmt|;
name|Painting
name|match
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|match
operator|.
name|setEstimatedPrice
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|10001
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed: "
operator|+
name|e
argument_list|,
name|e
operator|.
name|match
argument_list|(
name|match
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateGREATER_THAN_Null
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|gtNull
init|=
operator|new
name|ASTGreater
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"estimatedPrice"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Expression
name|gtNotNull
init|=
operator|new
name|ASTGreater
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"estimatedPrice"
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|10000d
argument_list|)
argument_list|)
decl_stmt|;
name|Painting
name|noMatch
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|gtNull
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gtNotNull
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateGREATER_THAN_EQUAL_TO
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|e
init|=
operator|new
name|ASTGreaterOrEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"estimatedPrice"
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|10000d
argument_list|)
argument_list|)
decl_stmt|;
name|Painting
name|noMatch
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|noMatch
operator|.
name|setEstimatedPrice
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|9999
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
name|Painting
name|match1
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|match1
operator|.
name|setEstimatedPrice
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|match
argument_list|(
name|match1
argument_list|)
argument_list|)
expr_stmt|;
name|Painting
name|match
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|match
operator|.
name|setEstimatedPrice
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|10001
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed: "
operator|+
name|e
argument_list|,
name|e
operator|.
name|match
argument_list|(
name|match
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateGREATER_THAN_EQUAL_TO_Null
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|gtNull
init|=
operator|new
name|ASTGreaterOrEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"estimatedPrice"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Expression
name|gtNotNull
init|=
operator|new
name|ASTGreaterOrEqual
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"estimatedPrice"
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|10000d
argument_list|)
argument_list|)
decl_stmt|;
name|Painting
name|noMatch
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|gtNull
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gtNotNull
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateBETWEEN
parameter_list|()
throws|throws
name|Exception
block|{
comment|// evaluate both BETWEEN and NOT_BETWEEN
name|Expression
name|between
init|=
operator|new
name|ASTBetween
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"estimatedPrice"
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|10d
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|20d
argument_list|)
argument_list|)
decl_stmt|;
name|Expression
name|notBetween
init|=
operator|new
name|ASTNotBetween
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"estimatedPrice"
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|10d
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|20d
argument_list|)
argument_list|)
decl_stmt|;
name|Painting
name|noMatch
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|noMatch
operator|.
name|setEstimatedPrice
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|21
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|between
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|notBetween
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
name|Painting
name|match1
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|match1
operator|.
name|setEstimatedPrice
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|between
operator|.
name|match
argument_list|(
name|match1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|notBetween
operator|.
name|match
argument_list|(
name|match1
argument_list|)
argument_list|)
expr_stmt|;
name|Painting
name|match2
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|match2
operator|.
name|setEstimatedPrice
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed: "
operator|+
name|between
argument_list|,
name|between
operator|.
name|match
argument_list|(
name|match2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Failed: "
operator|+
name|notBetween
argument_list|,
name|notBetween
operator|.
name|match
argument_list|(
name|match2
argument_list|)
argument_list|)
expr_stmt|;
name|Painting
name|match3
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|match3
operator|.
name|setEstimatedPrice
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed: "
operator|+
name|between
argument_list|,
name|between
operator|.
name|match
argument_list|(
name|match3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Failed: "
operator|+
name|notBetween
argument_list|,
name|notBetween
operator|.
name|match
argument_list|(
name|match3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateBETWEEN_Null
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|btNull
init|=
operator|new
name|ASTBetween
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"estimatedPrice"
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|10d
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|20d
argument_list|)
argument_list|)
decl_stmt|;
name|Expression
name|btNotNull
init|=
operator|new
name|ASTNotBetween
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"estimatedPrice"
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|10d
argument_list|)
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|20d
argument_list|)
argument_list|)
decl_stmt|;
name|Painting
name|noMatch
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|btNull
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|btNotNull
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateIN
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|in
init|=
operator|new
name|ASTIn
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"estimatedPrice"
argument_list|)
argument_list|,
operator|new
name|ASTList
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|new
name|BigDecimal
argument_list|(
literal|"10"
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|"20"
argument_list|)
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|Expression
name|notIn
init|=
operator|new
name|ASTNotIn
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"estimatedPrice"
argument_list|)
argument_list|,
operator|new
name|ASTList
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|new
name|BigDecimal
argument_list|(
literal|"10"
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|"20"
argument_list|)
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|Painting
name|noMatch1
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|noMatch1
operator|.
name|setEstimatedPrice
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"21"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|in
operator|.
name|match
argument_list|(
name|noMatch1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|notIn
operator|.
name|match
argument_list|(
name|noMatch1
argument_list|)
argument_list|)
expr_stmt|;
name|Painting
name|noMatch2
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|noMatch2
operator|.
name|setEstimatedPrice
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"11"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Failed: "
operator|+
name|in
argument_list|,
name|in
operator|.
name|match
argument_list|(
name|noMatch2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed: "
operator|+
name|notIn
argument_list|,
name|notIn
operator|.
name|match
argument_list|(
name|noMatch2
argument_list|)
argument_list|)
expr_stmt|;
name|Painting
name|match1
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|match1
operator|.
name|setEstimatedPrice
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"20"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|in
operator|.
name|match
argument_list|(
name|match1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|notIn
operator|.
name|match
argument_list|(
name|match1
argument_list|)
argument_list|)
expr_stmt|;
name|Painting
name|match2
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|match2
operator|.
name|setEstimatedPrice
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed: "
operator|+
name|in
argument_list|,
name|in
operator|.
name|match
argument_list|(
name|match2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Failed: "
operator|+
name|notIn
argument_list|,
name|notIn
operator|.
name|match
argument_list|(
name|match2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateIN_Null
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|in
init|=
operator|new
name|ASTIn
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"estimatedPrice"
argument_list|)
argument_list|,
operator|new
name|ASTList
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|new
name|BigDecimal
argument_list|(
literal|"10"
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|"20"
argument_list|)
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|Expression
name|notIn
init|=
operator|new
name|ASTNotIn
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"estimatedPrice"
argument_list|)
argument_list|,
operator|new
name|ASTList
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|new
name|BigDecimal
argument_list|(
literal|"10"
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|"20"
argument_list|)
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|Painting
name|noMatch
init|=
operator|new
name|Painting
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|in
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|notIn
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateLIKE1
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|like
init|=
operator|new
name|ASTLike
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|"abc%d"
argument_list|)
decl_stmt|;
name|Expression
name|notLike
init|=
operator|new
name|ASTNotLike
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|"abc%d"
argument_list|)
decl_stmt|;
name|Artist
name|noMatch
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|noMatch
operator|.
name|setArtistName
argument_list|(
literal|"dabc"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|like
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|notLike
operator|.
name|match
argument_list|(
name|noMatch
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|match1
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|match1
operator|.
name|setArtistName
argument_list|(
literal|"abc123d"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed: "
operator|+
name|like
argument_list|,
name|like
operator|.
name|match
argument_list|(
name|match1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Failed: "
operator|+
name|notLike
argument_list|,
name|notLike
operator|.
name|match
argument_list|(
name|match1
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|match2
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|match2
operator|.
name|setArtistName
argument_list|(
literal|"abcd"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed: "
operator|+
name|like
argument_list|,
name|like
operator|.
name|match
argument_list|(
name|match2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Failed: "
operator|+
name|notLike
argument_list|,
name|notLike
operator|.
name|match
argument_list|(
name|match2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateLIKE2
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|like
init|=
operator|new
name|ASTLike
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|"abc?d"
argument_list|)
decl_stmt|;
name|Expression
name|notLike
init|=
operator|new
name|ASTNotLike
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|"abc?d"
argument_list|)
decl_stmt|;
name|Artist
name|noMatch1
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|noMatch1
operator|.
name|setArtistName
argument_list|(
literal|"dabc"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|like
operator|.
name|match
argument_list|(
name|noMatch1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|notLike
operator|.
name|match
argument_list|(
name|noMatch1
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|noMatch2
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|noMatch2
operator|.
name|setArtistName
argument_list|(
literal|"abc123d"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Failed: "
operator|+
name|like
argument_list|,
name|like
operator|.
name|match
argument_list|(
name|noMatch2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed: "
operator|+
name|notLike
argument_list|,
name|notLike
operator|.
name|match
argument_list|(
name|noMatch2
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|match
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|match
operator|.
name|setArtistName
argument_list|(
literal|"abcXd"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed: "
operator|+
name|like
argument_list|,
name|like
operator|.
name|match
argument_list|(
name|match
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Failed: "
operator|+
name|notLike
argument_list|,
name|notLike
operator|.
name|match
argument_list|(
name|match
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateLIKE3
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test special chars
name|Expression
name|like
init|=
operator|new
name|ASTLike
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|"/./"
argument_list|)
decl_stmt|;
name|Artist
name|noMatch1
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|noMatch1
operator|.
name|setArtistName
argument_list|(
literal|"/a/"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|like
operator|.
name|match
argument_list|(
name|noMatch1
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|match
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|match
operator|.
name|setArtistName
argument_list|(
literal|"/./"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed: "
operator|+
name|like
argument_list|,
name|like
operator|.
name|match
argument_list|(
name|match
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateLIKE_IGNORE_CASE
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|like
init|=
operator|new
name|ASTLikeIgnoreCase
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|"aBcD"
argument_list|)
decl_stmt|;
name|Expression
name|notLike
init|=
operator|new
name|ASTNotLikeIgnoreCase
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"artistName"
argument_list|)
argument_list|,
literal|"aBcD"
argument_list|)
decl_stmt|;
name|Artist
name|noMatch1
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|noMatch1
operator|.
name|setArtistName
argument_list|(
literal|"dabc"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|like
operator|.
name|match
argument_list|(
name|noMatch1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|notLike
operator|.
name|match
argument_list|(
name|noMatch1
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|match1
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|match1
operator|.
name|setArtistName
argument_list|(
literal|"abcd"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed: "
operator|+
name|like
argument_list|,
name|like
operator|.
name|match
argument_list|(
name|match1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Failed: "
operator|+
name|notLike
argument_list|,
name|notLike
operator|.
name|match
argument_list|(
name|match1
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|match2
init|=
operator|new
name|Artist
argument_list|()
decl_stmt|;
name|match2
operator|.
name|setArtistName
argument_list|(
literal|"ABcD"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed: "
operator|+
name|like
argument_list|,
name|like
operator|.
name|match
argument_list|(
name|match2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Failed: "
operator|+
name|notLike
argument_list|,
name|notLike
operator|.
name|match
argument_list|(
name|match2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateADD
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|add
init|=
operator|new
name|ASTAdd
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
block|,
operator|new
name|Double
argument_list|(
literal|5.5
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6.5
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|add
operator|.
name|evaluate
argument_list|(
literal|null
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateSubtract
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|subtract
init|=
operator|new
name|ASTSubtract
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
block|,
operator|new
name|Double
argument_list|(
literal|0.1
argument_list|)
block|,
operator|new
name|Double
argument_list|(
literal|0.2
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.7
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|subtract
operator|.
name|evaluate
argument_list|(
literal|null
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateMultiply
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|multiply
init|=
operator|new
name|ASTMultiply
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|new
name|Integer
argument_list|(
literal|2
argument_list|)
block|,
operator|new
name|Double
argument_list|(
literal|3.5
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|multiply
operator|.
name|evaluate
argument_list|(
literal|null
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateDivide
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|divide
init|=
operator|new
name|ASTDivide
argument_list|(
operator|new
name|Object
index|[]
block|{
operator|new
name|BigDecimal
argument_list|(
literal|"7.0"
argument_list|)
block|,
operator|new
name|BigDecimal
argument_list|(
literal|"2.0"
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3.5
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|divide
operator|.
name|evaluate
argument_list|(
literal|null
argument_list|)
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateNegate
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
operator|-
literal|3
argument_list|,
operator|(
operator|(
name|Number
operator|)
operator|new
name|ASTNegate
argument_list|(
operator|new
name|Integer
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|evaluate
argument_list|(
literal|null
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
operator|(
operator|(
name|Number
operator|)
operator|new
name|ASTNegate
argument_list|(
operator|new
name|Integer
argument_list|(
operator|-
literal|5
argument_list|)
argument_list|)
operator|.
name|evaluate
argument_list|(
literal|null
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
operator|new
name|ASTTrue
argument_list|()
operator|.
name|evaluate
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEvaluateFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
operator|new
name|ASTFalse
argument_list|()
operator|.
name|evaluate
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

