begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|date_time
operator|.
name|DateTestEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|UnitDbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|DATE_TIME_PROJECT
argument_list|)
specifier|public
class|class
name|ASTExtractIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|ObjectContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|UnitDbAdapter
name|unitDbAdapter
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DateTestEntity
name|o1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|2015
argument_list|,
name|Calendar
operator|.
name|FEBRUARY
argument_list|,
literal|28
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|o1
operator|.
name|setDateColumn
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|2017
argument_list|,
name|Calendar
operator|.
name|MARCH
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|o1
operator|.
name|setTimeColumn
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
literal|29
argument_list|)
expr_stmt|;
name|o1
operator|.
name|setTimestampColumn
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|DateTestEntity
name|o2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|2016
argument_list|,
name|Calendar
operator|.
name|MARCH
argument_list|,
literal|29
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|o2
operator|.
name|setDateColumn
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|2017
argument_list|,
name|Calendar
operator|.
name|APRIL
argument_list|,
literal|1
argument_list|,
literal|23
argument_list|,
literal|59
argument_list|,
literal|39
argument_list|)
expr_stmt|;
name|o2
operator|.
name|setTimeColumn
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|o2
operator|.
name|setTimestampColumn
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testYear
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"year(dateColumn) = 2015"
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|res
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|,
name|exp
argument_list|)
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsExtractPart
argument_list|(
name|ASTExtract
operator|.
name|DateTimePart
operator|.
name|YEAR
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
comment|// else ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMonth
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"month(dateColumn) = 3"
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|res
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|,
name|exp
argument_list|)
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsExtractPart
argument_list|(
name|ASTExtract
operator|.
name|DateTimePart
operator|.
name|MONTH
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
comment|// else ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWeek
parameter_list|()
block|{
comment|// 13 or 14 depends of first day in week in current db
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"week(dateColumn) in (13, 14)"
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|res
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|,
name|exp
argument_list|)
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsExtractPart
argument_list|(
name|ASTExtract
operator|.
name|DateTimePart
operator|.
name|WEEK
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
comment|// else ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDayOfYear
parameter_list|()
block|{
comment|// day can start from 0
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"dayOfYear(dateColumn) in (59, 58)"
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|res
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|,
name|exp
argument_list|)
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsExtractPart
argument_list|(
name|ASTExtract
operator|.
name|DateTimePart
operator|.
name|DAY_OF_YEAR
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
comment|// else ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDayOfYearSelect
parameter_list|()
block|{
try|try
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|res
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|)
operator|.
name|column
argument_list|(
name|DateTestEntity
operator|.
name|DATE_COLUMN
operator|.
name|dayOfYear
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|contains
argument_list|(
literal|59
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|contains
argument_list|(
literal|89
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsExtractPart
argument_list|(
name|ASTExtract
operator|.
name|DateTimePart
operator|.
name|DAY_OF_YEAR
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
comment|// else ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDay
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"day(dateColumn) = 28"
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|res
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|,
name|exp
argument_list|)
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsExtractPart
argument_list|(
name|ASTExtract
operator|.
name|DateTimePart
operator|.
name|DAY
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
comment|// else ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDayOfMonth
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"dayOfMonth(dateColumn) = 28"
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|res
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|,
name|exp
argument_list|)
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsExtractPart
argument_list|(
name|ASTExtract
operator|.
name|DateTimePart
operator|.
name|DAY_OF_MONTH
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
comment|// else ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDayOfWeek
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"dayOfWeek(dateColumn) in (2, 3)"
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|res
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|,
name|exp
argument_list|)
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsExtractPart
argument_list|(
name|ASTExtract
operator|.
name|DateTimePart
operator|.
name|DAY_OF_WEEK
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHour
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"hour(timestampColumn) = 23"
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|res
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|,
name|exp
argument_list|)
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsExtractPart
argument_list|(
name|ASTExtract
operator|.
name|DateTimePart
operator|.
name|HOUR
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
comment|// else ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinute
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"minute(timestampColumn) = 59"
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|res
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|,
name|exp
argument_list|)
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsExtractPart
argument_list|(
name|ASTExtract
operator|.
name|DateTimePart
operator|.
name|MINUTE
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSecond
parameter_list|()
block|{
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"second(timestampColumn) = 39"
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|res
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|DateTestEntity
operator|.
name|class
argument_list|,
name|exp
argument_list|)
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsExtractPart
argument_list|(
name|ASTExtract
operator|.
name|DateTimePart
operator|.
name|SECOND
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

