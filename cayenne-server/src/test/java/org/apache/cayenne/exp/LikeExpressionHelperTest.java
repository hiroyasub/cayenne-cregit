begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTLike
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTObjPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|PatternMatchNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|LikeExpressionHelperTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testEscape_NoEscapeChars
parameter_list|()
block|{
name|PatternMatchNode
name|node
init|=
operator|new
name|ASTLike
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"x"
argument_list|)
argument_list|,
literal|"abc"
argument_list|)
decl_stmt|;
name|LikeExpressionHelper
operator|.
name|escape
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|node
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|node
operator|.
name|getEscapeChar
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEscape_OneChar
parameter_list|()
block|{
name|PatternMatchNode
name|node
init|=
operator|new
name|ASTLike
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"x"
argument_list|)
argument_list|,
literal|"ab_c"
argument_list|)
decl_stmt|;
name|LikeExpressionHelper
operator|.
name|escape
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ab!_c"
argument_list|,
name|node
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'!'
argument_list|,
name|node
operator|.
name|getEscapeChar
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEscape_TwoChars
parameter_list|()
block|{
name|PatternMatchNode
name|node
init|=
operator|new
name|ASTLike
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"x"
argument_list|)
argument_list|,
literal|"ab_c_"
argument_list|)
decl_stmt|;
name|LikeExpressionHelper
operator|.
name|escape
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ab!_c!_"
argument_list|,
name|node
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'!'
argument_list|,
name|node
operator|.
name|getEscapeChar
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEscape_TwoChars_Mix
parameter_list|()
block|{
name|PatternMatchNode
name|node
init|=
operator|new
name|ASTLike
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"x"
argument_list|)
argument_list|,
literal|"ab%c_"
argument_list|)
decl_stmt|;
name|LikeExpressionHelper
operator|.
name|escape
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ab!%c!_"
argument_list|,
name|node
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'!'
argument_list|,
name|node
operator|.
name|getEscapeChar
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEscape_AltEscapeChar1
parameter_list|()
block|{
name|PatternMatchNode
name|node
init|=
operator|new
name|ASTLike
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"x"
argument_list|)
argument_list|,
literal|"a!%c"
argument_list|)
decl_stmt|;
name|LikeExpressionHelper
operator|.
name|escape
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a!#%c"
argument_list|,
name|node
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'#'
argument_list|,
name|node
operator|.
name|getEscapeChar
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEscape_AltEscapeChar2
parameter_list|()
block|{
name|PatternMatchNode
name|node
init|=
operator|new
name|ASTLike
argument_list|(
operator|new
name|ASTObjPath
argument_list|(
literal|"x"
argument_list|)
argument_list|,
literal|"a!%c#_"
argument_list|)
decl_stmt|;
name|LikeExpressionHelper
operator|.
name|escape
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a!$%c#$_"
argument_list|,
name|node
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'$'
argument_list|,
name|node
operator|.
name|getEscapeChar
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

