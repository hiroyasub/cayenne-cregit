begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|log
package|;
end_package

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|DbAttributeBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|BooleanType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|CharType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|ExtendedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|IntegerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DefaultRuntimeProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|CompactSl4jJdbcEventLoggerTest
block|{
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|TestAppender
operator|.
name|events
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|logWithCompact_Union
parameter_list|()
block|{
name|CompactSl4jJdbcEventLogger
name|compactSl4jJdbcEventLogger
init|=
operator|new
name|CompactSl4jJdbcEventLogger
argument_list|(
operator|new
name|DefaultRuntimeProperties
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DbAttributeBinding
index|[]
name|bindings
init|=
name|createBindings
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|LoggingEvent
argument_list|>
name|log
init|=
name|TestAppender
operator|.
name|events
decl_stmt|;
name|assertEquals
argument_list|(
name|log
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|compactSl4jJdbcEventLogger
operator|.
name|logQuery
argument_list|(
literal|"SELECT t0.NAME AS ec0_0, t0.F_KEY1 AS ec0_1, t0.F_KEY2 AS ec0_2,"
operator|+
literal|" t0.PKEY AS ec0_3 FROM COMPOUND_FK_TEST t0 INNER JOIN COMPOUND_PK_TEST "
operator|+
literal|"t1 ON (t0.F_KEY1 = t1.KEY1 AND t0.F_KEY2 = t1.KEY2) WHERE t1.NAME LIKE ?"
argument_list|,
name|createBindings
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|log
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|LoggingEvent
name|firstLogEntry
init|=
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|firstLogEntry
operator|.
name|getLevel
argument_list|()
argument_list|,
name|is
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|firstLogEntry
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"SELECT (4 columns) FROM COMPOUND_FK_TEST t0 "
operator|+
literal|"INNER JOIN COMPOUND_PK_TEST t1 ON (t0.F_KEY1 = t1.KEY1 AND t0.F_KEY2 = t1.KEY2) "
operator|+
literal|"WHERE t1.NAME LIKE ? [bind: 1->t0.NAME: {'', 52, 'true'}, 2->t0.F_KEY1: 'true'] "
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|firstLogEntry
operator|.
name|getLoggerName
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"org.apache.cayenne.log.JdbcEventLogger"
argument_list|)
argument_list|)
expr_stmt|;
name|compactSl4jJdbcEventLogger
operator|.
name|logQuery
argument_list|(
literal|"SELECT t0.NAME AS ec0_0, t0.F_KEY1 AS ec0_1, "
operator|+
literal|"t0.PKEY AS ec0_3 FROM COMPOUND_FK_TEST t0 INNER JOIN COMPOUND_PK_TEST "
operator|+
literal|"t1 ON (t0.F_KEY1 = t1.KEY1 AND t0.F_KEY2 = t1.KEY2) WHERE t1.NAME LIKE ?"
operator|+
literal|"UNION ALL "
operator|+
literal|"SELECT t0.NAME AS ec0_0, t0.F_KEY1 AS ec0_1,"
operator|+
literal|" t0.PKEY AS ec0_3 FROM COMPOUND_FK_TEST t0 INNER JOIN COMPOUND_PK_TEST "
operator|+
literal|"t1 ON (t0.F_KEY1 = t1.KEY1 AND t0.F_KEY2 = t1.KEY2) WHERE t1.NAME LIKE ?"
operator|+
literal|"union all "
operator|+
literal|"SELECT t0.NAME AS ec0_0, t0.F_KEY1 AS ec0_1, t0.F_KEY2 AS ec0_2,"
operator|+
literal|" t0.PKEY AS ec0_3 FROM COMPOUND_FK_TEST t0 INNER JOIN COMPOUND_PK_TEST "
operator|+
literal|"t1 ON (t0.F_KEY1 = t1.KEY1 AND t0.F_KEY2 = t1.KEY2) WHERE t1.NAME LIKE ?"
argument_list|,
name|bindings
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|log
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|firstLogEntry
operator|=
name|log
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|firstLogEntry
operator|.
name|getLevel
argument_list|()
argument_list|,
name|is
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|firstLogEntry
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"SELECT t0.NAME AS ec0_0, t0.F_KEY1 AS ec0_1, t0.PKEY AS ec0_3 FROM COMPOUND_FK_TEST t0 "
operator|+
literal|"INNER JOIN COMPOUND_PK_TEST t1 ON (t0.F_KEY1 = t1.KEY1 AND t0.F_KEY2 = t1.KEY2) "
operator|+
literal|"WHERE t1.NAME LIKE ? UNION ALL SELECT t0.NAME AS ec0_0, t0.F_KEY1 AS ec0_1, t0.PKEY AS ec0_3 "
operator|+
literal|"FROM COMPOUND_FK_TEST t0 INNER JOIN COMPOUND_PK_TEST t1 ON (t0.F_KEY1 = t1.KEY1 AND t0.F_KEY2 = t1.KEY2) "
operator|+
literal|"WHERE t1.NAME LIKE ? UNION all SELECT (4 columns) FROM COMPOUND_FK_TEST t0 INNER JOIN COMPOUND_PK_TEST t1 ON (t0.F_KEY1 = t1.KEY1 AND t0.F_KEY2 = t1.KEY2) "
operator|+
literal|"WHERE t1.NAME LIKE ? [bind: 1->t0.NAME: {'', 52, 'true'}, 2->t0.F_KEY1: 'true'] "
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|firstLogEntry
operator|.
name|getLoggerName
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"org.apache.cayenne.log.JdbcEventLogger"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DbAttributeBinding
index|[]
name|createBindings
parameter_list|()
block|{
return|return
operator|new
name|DbAttributeBinding
index|[]
block|{
name|createBinding
argument_list|(
literal|"t0.NAME"
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
operator|new
name|CharType
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
block|,
name|createBinding
argument_list|(
literal|"t0.NAME"
argument_list|,
literal|2
argument_list|,
literal|52
argument_list|,
operator|new
name|IntegerType
argument_list|()
argument_list|)
block|,
name|createBinding
argument_list|(
literal|"t0.NAME"
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|,
operator|new
name|BooleanType
argument_list|()
argument_list|)
block|,
name|createBinding
argument_list|(
literal|"t0.F_KEY1"
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|,
operator|new
name|BooleanType
argument_list|()
argument_list|)
block|}
return|;
block|}
specifier|private
name|DbAttributeBinding
name|createBinding
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|position
parameter_list|,
name|Object
name|object
parameter_list|,
name|ExtendedType
name|type
parameter_list|)
block|{
name|DbAttributeBinding
name|dbAttributeBinding
init|=
operator|new
name|DbAttributeBinding
argument_list|(
operator|new
name|DbAttribute
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|dbAttributeBinding
operator|.
name|setValue
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|dbAttributeBinding
operator|.
name|setStatementPosition
argument_list|(
name|position
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|dbAttributeBinding
operator|.
name|setExtendedType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|dbAttributeBinding
return|;
block|}
block|}
end_class

end_unit

