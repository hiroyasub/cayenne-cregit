begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultDataChannelDescriptorMergerTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSingleDescriptor
parameter_list|()
block|{
name|DataChannelDescriptor
name|descriptor
init|=
operator|new
name|DataChannelDescriptor
argument_list|()
decl_stmt|;
name|descriptor
operator|.
name|setName
argument_list|(
literal|"Zx"
argument_list|)
expr_stmt|;
name|DefaultDataChannelDescriptorMerger
name|merger
init|=
operator|new
name|DefaultDataChannelDescriptorMerger
argument_list|()
decl_stmt|;
name|DataChannelDescriptor
name|merged
init|=
name|merger
operator|.
name|merge
argument_list|(
name|descriptor
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|descriptor
argument_list|,
name|merged
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Zx"
argument_list|,
name|merged
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMerged_Name
parameter_list|()
block|{
name|DataChannelDescriptor
name|d1
init|=
operator|new
name|DataChannelDescriptor
argument_list|()
decl_stmt|;
name|d1
operator|.
name|setName
argument_list|(
literal|"Zx"
argument_list|)
expr_stmt|;
name|DataChannelDescriptor
name|d2
init|=
operator|new
name|DataChannelDescriptor
argument_list|()
decl_stmt|;
name|d2
operator|.
name|setName
argument_list|(
literal|"Ym"
argument_list|)
expr_stmt|;
name|DefaultDataChannelDescriptorMerger
name|merger
init|=
operator|new
name|DefaultDataChannelDescriptorMerger
argument_list|()
decl_stmt|;
name|DataChannelDescriptor
name|merged
init|=
name|merger
operator|.
name|merge
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|d1
argument_list|,
name|merged
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|d2
argument_list|,
name|merged
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Ym"
argument_list|,
name|merged
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMerged_Properties
parameter_list|()
block|{
name|DataChannelDescriptor
name|d1
init|=
operator|new
name|DataChannelDescriptor
argument_list|()
decl_stmt|;
name|d1
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
literal|"X"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|d1
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
literal|"Y"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|DataChannelDescriptor
name|d2
init|=
operator|new
name|DataChannelDescriptor
argument_list|()
decl_stmt|;
name|d2
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
literal|"X"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|d2
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
literal|"Z"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|DefaultDataChannelDescriptorMerger
name|merger
init|=
operator|new
name|DefaultDataChannelDescriptorMerger
argument_list|()
decl_stmt|;
name|DataChannelDescriptor
name|merged
init|=
name|merger
operator|.
name|merge
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|merged
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|merged
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4"
argument_list|,
name|merged
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"Z"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMerged_DataMaps
parameter_list|()
block|{
name|DataChannelDescriptor
name|d1
init|=
operator|new
name|DataChannelDescriptor
argument_list|()
decl_stmt|;
name|d1
operator|.
name|setName
argument_list|(
literal|"Zx"
argument_list|)
expr_stmt|;
name|DataMap
name|m11
init|=
operator|new
name|DataMap
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|DataMap
name|m12
init|=
operator|new
name|DataMap
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|d1
operator|.
name|getDataMaps
argument_list|()
operator|.
name|add
argument_list|(
name|m11
argument_list|)
expr_stmt|;
name|d1
operator|.
name|getDataMaps
argument_list|()
operator|.
name|add
argument_list|(
name|m12
argument_list|)
expr_stmt|;
name|DataChannelDescriptor
name|d2
init|=
operator|new
name|DataChannelDescriptor
argument_list|()
decl_stmt|;
name|d2
operator|.
name|setName
argument_list|(
literal|"Ym"
argument_list|)
expr_stmt|;
name|DataMap
name|m21
init|=
operator|new
name|DataMap
argument_list|(
literal|"C"
argument_list|)
decl_stmt|;
name|DataMap
name|m22
init|=
operator|new
name|DataMap
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|d2
operator|.
name|getDataMaps
argument_list|()
operator|.
name|add
argument_list|(
name|m21
argument_list|)
expr_stmt|;
name|d2
operator|.
name|getDataMaps
argument_list|()
operator|.
name|add
argument_list|(
name|m22
argument_list|)
expr_stmt|;
name|DefaultDataChannelDescriptorMerger
name|merger
init|=
operator|new
name|DefaultDataChannelDescriptorMerger
argument_list|()
decl_stmt|;
name|DataChannelDescriptor
name|merged
init|=
name|merger
operator|.
name|merge
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|merged
operator|.
name|getDataMaps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|m22
argument_list|,
name|merged
operator|.
name|getDataMap
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|m12
argument_list|,
name|merged
operator|.
name|getDataMap
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|m21
argument_list|,
name|merged
operator|.
name|getDataMap
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMerge_DataNodes
parameter_list|()
block|{
name|DataChannelDescriptor
name|d1
init|=
operator|new
name|DataChannelDescriptor
argument_list|()
decl_stmt|;
name|d1
operator|.
name|setName
argument_list|(
literal|"Zx"
argument_list|)
expr_stmt|;
name|DataNodeDescriptor
name|dn11
init|=
operator|new
name|DataNodeDescriptor
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|DataNodeDescriptor
name|dn12
init|=
operator|new
name|DataNodeDescriptor
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|dn12
operator|.
name|setAdapterType
argument_list|(
literal|"Xa"
argument_list|)
expr_stmt|;
name|d1
operator|.
name|getNodeDescriptors
argument_list|()
operator|.
name|add
argument_list|(
name|dn11
argument_list|)
expr_stmt|;
name|d1
operator|.
name|getNodeDescriptors
argument_list|()
operator|.
name|add
argument_list|(
name|dn12
argument_list|)
expr_stmt|;
name|DataChannelDescriptor
name|d2
init|=
operator|new
name|DataChannelDescriptor
argument_list|()
decl_stmt|;
name|d2
operator|.
name|setName
argument_list|(
literal|"Ym"
argument_list|)
expr_stmt|;
name|DataNodeDescriptor
name|dn21
init|=
operator|new
name|DataNodeDescriptor
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|dn21
operator|.
name|setAdapterType
argument_list|(
literal|"Uy"
argument_list|)
expr_stmt|;
name|DataNodeDescriptor
name|dn22
init|=
operator|new
name|DataNodeDescriptor
argument_list|(
literal|"C"
argument_list|)
decl_stmt|;
name|d2
operator|.
name|getNodeDescriptors
argument_list|()
operator|.
name|add
argument_list|(
name|dn21
argument_list|)
expr_stmt|;
name|d2
operator|.
name|getNodeDescriptors
argument_list|()
operator|.
name|add
argument_list|(
name|dn22
argument_list|)
expr_stmt|;
name|DefaultDataChannelDescriptorMerger
name|merger
init|=
operator|new
name|DefaultDataChannelDescriptorMerger
argument_list|()
decl_stmt|;
name|DataChannelDescriptor
name|merged
init|=
name|merger
operator|.
name|merge
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|merged
operator|.
name|getNodeDescriptors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// DataNodes are merged by copy .. so check they are not same as originals
name|DataNodeDescriptor
name|mergedA
init|=
name|merged
operator|.
name|getNodeDescriptor
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mergedA
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|dn11
argument_list|,
name|mergedA
argument_list|)
expr_stmt|;
name|DataNodeDescriptor
name|mergedB
init|=
name|merged
operator|.
name|getNodeDescriptor
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mergedB
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|dn12
argument_list|,
name|mergedB
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|dn21
argument_list|,
name|mergedB
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Uy"
argument_list|,
name|mergedB
operator|.
name|getAdapterType
argument_list|()
argument_list|)
expr_stmt|;
name|DataNodeDescriptor
name|mergedC
init|=
name|merged
operator|.
name|getNodeDescriptor
argument_list|(
literal|"C"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mergedC
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|dn22
argument_list|,
name|mergedC
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMerge_DataNodesMapLinks
parameter_list|()
block|{
name|DataChannelDescriptor
name|d1
init|=
operator|new
name|DataChannelDescriptor
argument_list|()
decl_stmt|;
name|d1
operator|.
name|setName
argument_list|(
literal|"Zx"
argument_list|)
expr_stmt|;
name|DataNodeDescriptor
name|dn11
init|=
operator|new
name|DataNodeDescriptor
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|dn11
operator|.
name|getDataMapNames
argument_list|()
operator|.
name|add
argument_list|(
literal|"MA"
argument_list|)
expr_stmt|;
name|dn11
operator|.
name|getDataMapNames
argument_list|()
operator|.
name|add
argument_list|(
literal|"MB"
argument_list|)
expr_stmt|;
name|d1
operator|.
name|getNodeDescriptors
argument_list|()
operator|.
name|add
argument_list|(
name|dn11
argument_list|)
expr_stmt|;
name|DataChannelDescriptor
name|d2
init|=
operator|new
name|DataChannelDescriptor
argument_list|()
decl_stmt|;
name|d2
operator|.
name|setName
argument_list|(
literal|"Ym"
argument_list|)
expr_stmt|;
name|DataNodeDescriptor
name|dn21
init|=
operator|new
name|DataNodeDescriptor
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|dn21
operator|.
name|getDataMapNames
argument_list|()
operator|.
name|add
argument_list|(
literal|"MA"
argument_list|)
expr_stmt|;
name|dn21
operator|.
name|getDataMapNames
argument_list|()
operator|.
name|add
argument_list|(
literal|"MC"
argument_list|)
expr_stmt|;
name|d2
operator|.
name|getNodeDescriptors
argument_list|()
operator|.
name|add
argument_list|(
name|dn21
argument_list|)
expr_stmt|;
name|DefaultDataChannelDescriptorMerger
name|merger
init|=
operator|new
name|DefaultDataChannelDescriptorMerger
argument_list|()
decl_stmt|;
name|DataChannelDescriptor
name|merged
init|=
name|merger
operator|.
name|merge
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|merged
operator|.
name|getNodeDescriptors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// DataNodes are merged by copy .. so check they are not same as originals
name|DataNodeDescriptor
name|mergedA
init|=
name|merged
operator|.
name|getNodeDescriptor
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mergedA
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|dn11
argument_list|,
name|mergedA
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|dn21
argument_list|,
name|mergedA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|mergedA
operator|.
name|getDataMapNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mergedA
operator|.
name|getDataMapNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"MA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mergedA
operator|.
name|getDataMapNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"MB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mergedA
operator|.
name|getDataMapNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"MC"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

