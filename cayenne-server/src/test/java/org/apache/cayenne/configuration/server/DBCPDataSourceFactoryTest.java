begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
operator|.
name|URLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|dbcp
operator|.
name|BasicDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|DBCPDataSourceFactoryTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testGetDataSource
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|baseUrl
init|=
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|baseUrl
operator|+
literal|"/"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|DataNodeDescriptor
name|nodeDescriptor
init|=
operator|new
name|DataNodeDescriptor
argument_list|()
decl_stmt|;
name|nodeDescriptor
operator|.
name|setConfigurationSource
argument_list|(
operator|new
name|URLResource
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
name|nodeDescriptor
operator|.
name|setParameters
argument_list|(
literal|"testDBCP.properties"
argument_list|)
expr_stmt|;
name|DBCPDataSourceFactory
name|factory
init|=
operator|new
name|DBCPDataSourceFactory
argument_list|()
decl_stmt|;
name|DataSource
name|dataSource
init|=
name|factory
operator|.
name|getDataSource
argument_list|(
name|nodeDescriptor
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dataSource
operator|instanceof
name|BasicDataSource
argument_list|)
expr_stmt|;
name|BasicDataSource
name|basicDataSource
init|=
operator|(
name|BasicDataSource
operator|)
name|dataSource
decl_stmt|;
name|assertEquals
argument_list|(
literal|"com.example.jdbc.Driver"
argument_list|,
name|basicDataSource
operator|.
name|getDriverClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jdbc:somedb://localhost/cayenne"
argument_list|,
name|basicDataSource
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"john"
argument_list|,
name|basicDataSource
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"secret"
argument_list|,
name|basicDataSource
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|basicDataSource
operator|.
name|getMaxActive
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|basicDataSource
operator|.
name|getMinIdle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|basicDataSource
operator|.
name|getMaxIdle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|basicDataSource
operator|.
name|getMaxWait
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"select 1 from xyz;"
argument_list|,
name|basicDataSource
operator|.
name|getValidationQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDataSource_LegacyConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|baseUrl
init|=
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|baseUrl
operator|+
literal|"/"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|DataNodeDescriptor
name|nodeDescriptor
init|=
operator|new
name|DataNodeDescriptor
argument_list|()
decl_stmt|;
name|nodeDescriptor
operator|.
name|setConfigurationSource
argument_list|(
operator|new
name|URLResource
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
name|nodeDescriptor
operator|.
name|setParameters
argument_list|(
literal|"testDBCP_legacy.properties"
argument_list|)
expr_stmt|;
name|DBCPDataSourceFactory
name|factory
init|=
operator|new
name|DBCPDataSourceFactory
argument_list|()
decl_stmt|;
name|DataSource
name|dataSource
init|=
name|factory
operator|.
name|getDataSource
argument_list|(
name|nodeDescriptor
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dataSource
operator|instanceof
name|BasicDataSource
argument_list|)
expr_stmt|;
name|BasicDataSource
name|basicDataSource
init|=
operator|(
name|BasicDataSource
operator|)
name|dataSource
decl_stmt|;
name|assertEquals
argument_list|(
literal|"com.example.jdbc.Driver"
argument_list|,
name|basicDataSource
operator|.
name|getDriverClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jdbc:somedb://localhost/cayenne"
argument_list|,
name|basicDataSource
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"john"
argument_list|,
name|basicDataSource
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"secret"
argument_list|,
name|basicDataSource
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|basicDataSource
operator|.
name|getMaxActive
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|basicDataSource
operator|.
name|getMinIdle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|basicDataSource
operator|.
name|getMaxIdle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|basicDataSource
operator|.
name|getMaxWait
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"select 1 from xyz;"
argument_list|,
name|basicDataSource
operator|.
name|getValidationQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDataSource_InvalidLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|baseUrl
init|=
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|baseUrl
operator|+
literal|"/"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|DataNodeDescriptor
name|nodeDescriptor
init|=
operator|new
name|DataNodeDescriptor
argument_list|()
decl_stmt|;
name|nodeDescriptor
operator|.
name|setConfigurationSource
argument_list|(
operator|new
name|URLResource
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
name|nodeDescriptor
operator|.
name|setParameters
argument_list|(
literal|"testDBCP.properties.nosuchfile"
argument_list|)
expr_stmt|;
name|DBCPDataSourceFactory
name|factory
init|=
operator|new
name|DBCPDataSourceFactory
argument_list|()
decl_stmt|;
try|try
block|{
name|factory
operator|.
name|getDataSource
argument_list|(
name|nodeDescriptor
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"didn't throw on abscent config file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_class

end_unit

