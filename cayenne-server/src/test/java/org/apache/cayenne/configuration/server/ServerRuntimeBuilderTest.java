begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Module
import|;
end_import

begin_class
specifier|public
class|class
name|ServerRuntimeBuilderTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|test_SingleLocation
parameter_list|()
block|{
name|ServerRuntime
name|runtime
init|=
operator|new
name|ServerRuntimeBuilder
argument_list|(
literal|"xxxx"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|locations
init|=
name|runtime
operator|.
name|getInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|SERVER_PROJECT_LOCATIONS_LIST
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"xxxx"
argument_list|)
argument_list|,
name|locations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|runtime
operator|.
name|getModules
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Module
name|m0
init|=
name|runtime
operator|.
name|getModules
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|m0
operator|instanceof
name|ServerModule
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_MultipleLocations
parameter_list|()
block|{
name|ServerRuntime
name|runtime
init|=
operator|new
name|ServerRuntimeBuilder
argument_list|(
literal|"xxxx"
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"yyyy"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|locations
init|=
name|runtime
operator|.
name|getInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|SERVER_PROJECT_LOCATIONS_LIST
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"xxxx"
argument_list|,
literal|"yyyy"
argument_list|)
argument_list|,
name|locations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|runtime
operator|.
name|getModules
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Module
name|m0
init|=
name|runtime
operator|.
name|getModules
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|m0
operator|instanceof
name|ServerModule
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_ExtraModules
parameter_list|()
block|{
name|Module
name|m
init|=
name|mock
argument_list|(
name|Module
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServerRuntime
name|runtime
init|=
operator|new
name|ServerRuntimeBuilder
argument_list|(
literal|"xxxx"
argument_list|)
operator|.
name|addModule
argument_list|(
name|m
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|runtime
operator|.
name|getModules
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|runtime
operator|.
name|getModules
argument_list|()
index|[
literal|0
index|]
operator|instanceof
name|ServerModule
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|m
argument_list|,
name|runtime
operator|.
name|getModules
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

