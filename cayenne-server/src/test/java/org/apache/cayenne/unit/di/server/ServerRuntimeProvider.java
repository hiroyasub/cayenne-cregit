begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|DataNodeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Binder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|UnitDbAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_class
specifier|public
class|class
name|ServerRuntimeProvider
implements|implements
name|Provider
argument_list|<
name|ServerRuntime
argument_list|>
block|{
specifier|private
name|ServerCaseProperties
name|properties
decl_stmt|;
specifier|private
name|ServerCaseExtraModulesProperties
name|extraModulesProperties
decl_stmt|;
specifier|private
name|ServerCaseDataSourceFactory
name|dataSourceFactory
decl_stmt|;
specifier|private
name|UnitDbAdapter
name|unitDbAdapter
decl_stmt|;
specifier|private
name|Provider
argument_list|<
name|DbAdapter
argument_list|>
name|dbAdapterProvider
decl_stmt|;
specifier|public
name|ServerRuntimeProvider
parameter_list|(
annotation|@
name|Inject
name|ServerCaseDataSourceFactory
name|dataSourceFactory
parameter_list|,
annotation|@
name|Inject
name|ServerCaseProperties
name|properties
parameter_list|,
annotation|@
name|Inject
name|ServerCaseExtraModulesProperties
name|extraModulesProperties
parameter_list|,
annotation|@
name|Inject
name|Provider
argument_list|<
name|DbAdapter
argument_list|>
name|dbAdapterProvider
parameter_list|,
annotation|@
name|Inject
name|UnitDbAdapter
name|unitDbAdapter
parameter_list|)
block|{
name|this
operator|.
name|dataSourceFactory
operator|=
name|dataSourceFactory
expr_stmt|;
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
name|this
operator|.
name|extraModulesProperties
operator|=
name|extraModulesProperties
expr_stmt|;
name|this
operator|.
name|dbAdapterProvider
operator|=
name|dbAdapterProvider
expr_stmt|;
name|this
operator|.
name|unitDbAdapter
operator|=
name|unitDbAdapter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ServerRuntime
name|get
parameter_list|()
throws|throws
name|ConfigurationException
block|{
name|String
name|configurationLocation
init|=
name|properties
operator|.
name|getConfigurationLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|configurationLocation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null 'configurationLocation', "
operator|+
literal|"annotate your test case with @UseServerRuntime"
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|Module
argument_list|>
name|modules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getExtraModules
argument_list|()
argument_list|)
decl_stmt|;
name|modules
operator|.
name|addAll
argument_list|(
name|extraModulesProperties
operator|.
name|getExtraModules
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ServerRuntime
operator|.
name|builder
argument_list|()
operator|.
name|addConfig
argument_list|(
name|configurationLocation
argument_list|)
operator|.
name|addModules
argument_list|(
name|modules
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|protected
name|Collection
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|getExtraModules
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|ServerExtraModule
argument_list|()
argument_list|)
return|;
block|}
class|class
name|ServerExtraModule
implements|implements
name|Module
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
comment|// these are the objects overriding standard ServerModule definitions or
comment|// dependencies needed by such overrides
name|binder
operator|.
name|bind
argument_list|(
name|DbAdapter
operator|.
name|class
argument_list|)
operator|.
name|toProviderInstance
argument_list|(
name|dbAdapterProvider
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|DataDomain
operator|.
name|class
argument_list|)
operator|.
name|toProvider
argument_list|(
name|ServerCaseDataDomainProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|DataNodeFactory
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|ServerCaseDataNodeFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|UnitDbAdapter
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|unitDbAdapter
argument_list|)
expr_stmt|;
name|ServerModule
operator|.
name|extend
argument_list|(
name|binder
argument_list|)
comment|// Use soft references instead of default weak.
comment|// Should remove problems with random-failing tests (those that are GC-sensitive).
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|SERVER_OBJECT_RETAIN_STRATEGY_PROPERTY
argument_list|,
literal|"soft"
argument_list|)
expr_stmt|;
comment|// map DataSources for all test DataNode names
name|binder
operator|.
name|bind
argument_list|(
name|ServerCaseDataSourceFactory
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|dataSourceFactory
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

