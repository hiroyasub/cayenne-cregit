begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|spi
operator|.
name|ModuleProvider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceLoader
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|ModuleProviderChecker
block|{
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|ModuleProvider
argument_list|>
name|expectedProvider
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|ModuleProvider
argument_list|>
name|providerInterface
decl_stmt|;
specifier|public
specifier|static
name|void
name|testProviderPresent
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ModuleProvider
argument_list|>
name|expectedProvider
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ModuleProvider
argument_list|>
name|providerInterface
parameter_list|)
block|{
operator|new
name|ModuleProviderChecker
argument_list|(
name|expectedProvider
argument_list|,
name|providerInterface
argument_list|)
operator|.
name|testProviderPresent
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|ModuleProviderChecker
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ModuleProvider
argument_list|>
name|expectedProvider
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ModuleProvider
argument_list|>
name|providerInterface
parameter_list|)
block|{
name|this
operator|.
name|expectedProvider
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|expectedProvider
argument_list|)
expr_stmt|;
name|this
operator|.
name|providerInterface
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|providerInterface
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Provider interface expected"
argument_list|,
name|providerInterface
operator|.
name|isInterface
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedProvider
operator|.
name|equals
argument_list|(
name|providerInterface
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Expected provider class and required interface should be different."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|testProviderPresent
parameter_list|()
block|{
name|List
argument_list|<
name|ModuleProvider
argument_list|>
name|providers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ModuleProvider
name|p
range|:
name|ServiceLoader
operator|.
name|load
argument_list|(
name|providerInterface
argument_list|)
control|)
block|{
if|if
condition|(
name|expectedProvider
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|providers
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
switch|switch
condition|(
name|providers
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
name|fail
argument_list|(
literal|"Expected provider '"
operator|+
name|expectedProvider
operator|.
name|getName
argument_list|()
operator|+
literal|"' is not found"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
break|break;
default|default:
name|fail
argument_list|(
literal|"Expected provider '"
operator|+
name|expectedProvider
operator|.
name|getName
argument_list|()
operator|+
literal|"' is found more then once: "
operator|+
name|providers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_class

end_unit

