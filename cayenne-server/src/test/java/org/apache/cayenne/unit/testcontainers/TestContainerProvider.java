begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|testcontainers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|JdbcAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testcontainers
operator|.
name|containers
operator|.
name|JdbcDatabaseContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testcontainers
operator|.
name|utility
operator|.
name|DockerImageName
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|TestContainerProvider
block|{
specifier|abstract
name|JdbcDatabaseContainer
argument_list|<
name|?
argument_list|>
name|createContainer
parameter_list|(
name|DockerImageName
name|dockerImageName
parameter_list|)
function_decl|;
specifier|abstract
name|String
name|getDockerImage
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|Class
argument_list|<
name|?
extends|extends
name|JdbcAdapter
argument_list|>
name|getAdapterClass
parameter_list|()
function_decl|;
specifier|public
name|JdbcDatabaseContainer
argument_list|<
name|?
argument_list|>
name|startContainer
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|DockerImageName
name|dockerImageName
init|=
name|DockerImageName
operator|.
name|parse
argument_list|(
name|getDockerImage
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|dockerImageName
operator|=
name|dockerImageName
operator|.
name|withTag
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
name|JdbcDatabaseContainer
argument_list|<
name|?
argument_list|>
name|container
init|=
name|createContainer
argument_list|(
name|dockerImageName
argument_list|)
decl_stmt|;
name|container
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|container
return|;
block|}
block|}
end_class

end_unit

