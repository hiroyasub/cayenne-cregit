begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Binder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|DIBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|spi
operator|.
name|DefaultScope
import|;
end_import

begin_class
specifier|public
class|class
name|DICaseSelfIT
extends|extends
name|DICase
block|{
specifier|private
specifier|static
specifier|final
name|Injector
name|injector
decl_stmt|;
static|static
block|{
name|Module
name|selfTestModule
init|=
operator|new
name|Module
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|DefaultScope
name|testScope
init|=
operator|new
name|DefaultScope
argument_list|()
decl_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|UnitTestLifecycleManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|DefaultUnitTestLifecycleManager
argument_list|(
name|testScope
argument_list|)
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"test-scope"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|.
name|in
argument_list|(
name|testScope
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"singleton-scope"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|.
name|inSingletonScope
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|injector
operator|=
name|DIBootstrap
operator|.
name|createInjector
argument_list|(
name|selfTestModule
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Inject
argument_list|(
literal|"test-scope"
argument_list|)
specifier|protected
name|Object
name|testScoped
decl_stmt|;
annotation|@
name|Inject
argument_list|(
literal|"singleton-scope"
argument_list|)
specifier|protected
name|Object
name|singletonScoped
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Injector
name|getUnitTestInjector
parameter_list|()
block|{
return|return
name|injector
return|;
block|}
specifier|public
name|void
name|testInjection
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
name|testScoped
init|=
name|this
operator|.
name|testScoped
decl_stmt|;
name|assertNotNull
argument_list|(
name|testScoped
argument_list|)
expr_stmt|;
name|Object
name|singletonScoped
init|=
name|this
operator|.
name|singletonScoped
decl_stmt|;
name|assertNotNull
argument_list|(
name|singletonScoped
argument_list|)
expr_stmt|;
name|tearDown
argument_list|()
expr_stmt|;
name|setUp
argument_list|()
expr_stmt|;
name|assertNotSame
argument_list|(
name|testScoped
argument_list|,
name|this
operator|.
name|testScoped
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|this
operator|.
name|testScoped
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|singletonScoped
argument_list|,
name|this
operator|.
name|singletonScoped
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

