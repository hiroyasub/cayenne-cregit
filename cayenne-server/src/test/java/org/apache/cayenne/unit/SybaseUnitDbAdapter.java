begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|SybaseUnitDbAdapter
extends|extends
name|UnitDbAdapter
block|{
specifier|public
name|SybaseUnitDbAdapter
parameter_list|(
name|DbAdapter
name|adapter
parameter_list|)
block|{
name|super
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getIdentifiersStartQuote
parameter_list|()
block|{
return|return
literal|"["
return|;
block|}
specifier|public
name|String
name|getIdentifiersEndQuote
parameter_list|()
block|{
return|return
literal|"]"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsStoredProcedures
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createdTables
parameter_list|(
name|Connection
name|con
parameter_list|,
name|DataMap
name|map
parameter_list|)
throws|throws
name|Exception
block|{
name|Procedure
name|proc
init|=
name|map
operator|.
name|getProcedure
argument_list|(
literal|"cayenne_tst_select_proc"
argument_list|)
decl_stmt|;
if|if
condition|(
name|proc
operator|!=
literal|null
operator|&&
name|proc
operator|.
name|getDataMap
argument_list|()
operator|==
name|map
condition|)
block|{
name|executeDDL
argument_list|(
name|con
argument_list|,
literal|"sybase"
argument_list|,
literal|"create-select-sp.sql"
argument_list|)
expr_stmt|;
name|executeDDL
argument_list|(
name|con
argument_list|,
literal|"sybase"
argument_list|,
literal|"create-update-sp.sql"
argument_list|)
expr_stmt|;
name|executeDDL
argument_list|(
name|con
argument_list|,
literal|"sybase"
argument_list|,
literal|"create-update-sp2.sql"
argument_list|)
expr_stmt|;
name|executeDDL
argument_list|(
name|con
argument_list|,
literal|"sybase"
argument_list|,
literal|"create-out-sp.sql"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|willCreateTables
parameter_list|(
name|Connection
name|con
parameter_list|,
name|DataMap
name|map
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Sybase does not support NULLable BIT columns...
name|DbEntity
name|e
init|=
name|map
operator|.
name|getDbEntity
argument_list|(
literal|"PRIMITIVES_TEST"
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|getAttribute
argument_list|(
literal|"BOOLEAN_COLUMN"
argument_list|)
operator|.
name|setMandatory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|DbEntity
name|e1
init|=
name|map
operator|.
name|getDbEntity
argument_list|(
literal|"INHERITANCE_SUB_ENTITY3"
argument_list|)
decl_stmt|;
if|if
condition|(
name|e1
operator|!=
literal|null
condition|)
block|{
name|e1
operator|.
name|getAttribute
argument_list|(
literal|"SUBENTITY_BOOL_ATTR"
argument_list|)
operator|.
name|setMandatory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|DbEntity
name|e2
init|=
name|map
operator|.
name|getDbEntity
argument_list|(
literal|"MT_TABLE_BOOL"
argument_list|)
decl_stmt|;
if|if
condition|(
name|e2
operator|!=
literal|null
condition|)
block|{
name|e2
operator|.
name|getAttribute
argument_list|(
literal|"BOOLEAN_COLUMN"
argument_list|)
operator|.
name|setMandatory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|DbEntity
name|e3
init|=
name|map
operator|.
name|getDbEntity
argument_list|(
literal|"QUALIFIED1"
argument_list|)
decl_stmt|;
if|if
condition|(
name|e3
operator|!=
literal|null
condition|)
block|{
name|e3
operator|.
name|getAttribute
argument_list|(
literal|"DELETED"
argument_list|)
operator|.
name|setMandatory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|DbEntity
name|e4
init|=
name|map
operator|.
name|getDbEntity
argument_list|(
literal|"QUALIFIED2"
argument_list|)
decl_stmt|;
if|if
condition|(
name|e4
operator|!=
literal|null
condition|)
block|{
name|e4
operator|.
name|getAttribute
argument_list|(
literal|"DELETED"
argument_list|)
operator|.
name|setMandatory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|DbEntity
name|e5
init|=
name|map
operator|.
name|getDbEntity
argument_list|(
literal|"Painting"
argument_list|)
decl_stmt|;
if|if
condition|(
name|e5
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|e5
operator|.
name|getAttribute
argument_list|(
literal|"NEWCOL2"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|e5
operator|.
name|getAttribute
argument_list|(
literal|"DELETED"
argument_list|)
operator|.
name|setMandatory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|DbEntity
name|e6
init|=
name|map
operator|.
name|getDbEntity
argument_list|(
literal|"SOFT_TEST"
argument_list|)
decl_stmt|;
if|if
condition|(
name|e6
operator|!=
literal|null
condition|)
block|{
name|e6
operator|.
name|getAttribute
argument_list|(
literal|"DELETED"
argument_list|)
operator|.
name|setMandatory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|willDropTables
parameter_list|(
name|Connection
name|con
parameter_list|,
name|DataMap
name|map
parameter_list|,
name|Collection
name|tablesToDrop
parameter_list|)
throws|throws
name|Exception
block|{
name|Iterator
name|it
init|=
name|tablesToDrop
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|dropConstraints
argument_list|(
name|con
argument_list|,
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dropProcedures
argument_list|(
name|con
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|dropProcedures
parameter_list|(
name|Connection
name|con
parameter_list|,
name|DataMap
name|map
parameter_list|)
throws|throws
name|Exception
block|{
name|Procedure
name|proc
init|=
name|map
operator|.
name|getProcedure
argument_list|(
literal|"cayenne_tst_select_proc"
argument_list|)
decl_stmt|;
if|if
condition|(
name|proc
operator|!=
literal|null
operator|&&
name|proc
operator|.
name|getDataMap
argument_list|()
operator|==
name|map
condition|)
block|{
name|executeDDL
argument_list|(
name|con
argument_list|,
literal|"sybase"
argument_list|,
literal|"drop-select-sp.sql"
argument_list|)
expr_stmt|;
name|executeDDL
argument_list|(
name|con
argument_list|,
literal|"sybase"
argument_list|,
literal|"drop-update-sp.sql"
argument_list|)
expr_stmt|;
name|executeDDL
argument_list|(
name|con
argument_list|,
literal|"sybase"
argument_list|,
literal|"drop-update-sp2.sql"
argument_list|)
expr_stmt|;
name|executeDDL
argument_list|(
name|con
argument_list|,
literal|"sybase"
argument_list|,
literal|"drop-out-sp.sql"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|dropConstraints
parameter_list|(
name|Connection
name|con
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
name|List
name|names
init|=
operator|new
name|ArrayList
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Statement
name|select
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|ResultSet
name|rs
init|=
name|select
operator|.
name|executeQuery
argument_list|(
literal|"SELECT t0.name "
operator|+
literal|"FROM sysobjects t0, sysconstraints t1, sysobjects t2 "
operator|+
literal|"WHERE t0.id = t1.constrid and t1.tableid = t2.id and t2.name = '"
operator|+
name|tableName
operator|+
literal|"'"
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|select
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Object
name|name
range|:
name|names
control|)
block|{
name|executeDDL
argument_list|(
name|con
argument_list|,
literal|"alter table "
operator|+
name|tableName
operator|+
literal|" drop constraint "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsLobs
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|handlesNullVsEmptyLOBs
parameter_list|()
block|{
comment|// TODO Sybase handling of this must be fixed
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsNullBoolean
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

