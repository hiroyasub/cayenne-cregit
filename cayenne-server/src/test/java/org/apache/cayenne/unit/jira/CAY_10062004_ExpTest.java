begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|jira
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|CAY_10062004_ExpTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testDeepCopy
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|parsed
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"(a = 1 and a = 2) or (a != 1 and a != 2)"
argument_list|)
decl_stmt|;
name|Expression
name|finalExpression
init|=
name|parsed
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|parsed
argument_list|,
name|finalExpression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parsed
operator|.
name|toString
argument_list|()
argument_list|,
name|finalExpression
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAndExpOrExp
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|parsed
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"(a = 1 and a = 2) or (a != 1 and a != 2)"
argument_list|)
decl_stmt|;
name|Expression
name|first
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"a = 1"
argument_list|)
decl_stmt|;
name|Expression
name|second
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"a = 2"
argument_list|)
decl_stmt|;
name|Expression
name|third
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"a != 1"
argument_list|)
decl_stmt|;
name|Expression
name|fourth
init|=
name|Expression
operator|.
name|fromString
argument_list|(
literal|"a != 2"
argument_list|)
decl_stmt|;
comment|// this internally calls "joinExp"
name|Expression
name|firstAndSecond
init|=
name|first
operator|.
name|andExp
argument_list|(
name|second
argument_list|)
decl_stmt|;
name|Expression
name|thirdAndFourth
init|=
name|third
operator|.
name|andExp
argument_list|(
name|fourth
argument_list|)
decl_stmt|;
comment|// this internally calls "joinExp"
name|Expression
name|finalExpression
init|=
name|firstAndSecond
operator|.
name|orExp
argument_list|(
name|thirdAndFourth
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|parsed
argument_list|,
name|finalExpression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parsed
operator|.
name|toString
argument_list|()
argument_list|,
name|finalExpression
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

