begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conn
operator|.
name|DataSourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conn
operator|.
name|PoolDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conn
operator|.
name|PoolManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_class
specifier|public
class|class
name|ServerCaseDataSourceFactory
block|{
specifier|private
name|DataSource
name|sharedDataSource
decl_stmt|;
specifier|private
name|DataSourceInfo
name|dataSourceInfo
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DataSource
argument_list|>
name|dataSources
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|mapsWithDedicatedDataSource
decl_stmt|;
specifier|public
name|ServerCaseDataSourceFactory
parameter_list|(
annotation|@
name|Inject
name|DataSourceInfo
name|dataSourceInfo
parameter_list|)
block|{
name|this
operator|.
name|dataSourceInfo
operator|=
name|dataSourceInfo
expr_stmt|;
name|this
operator|.
name|dataSources
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DataSource
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|mapsWithDedicatedDataSource
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"map-db1"
argument_list|,
literal|"map-db2"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|sharedDataSource
operator|=
name|createDataSource
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DataSource
name|getSharedDataSource
parameter_list|()
block|{
return|return
name|sharedDataSource
return|;
block|}
specifier|public
name|DataSource
name|getDataSource
parameter_list|(
name|String
name|dataMapName
parameter_list|)
block|{
name|DataSource
name|ds
init|=
name|dataSources
operator|.
name|get
argument_list|(
name|dataMapName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ds
operator|==
literal|null
condition|)
block|{
name|ds
operator|=
name|mapsWithDedicatedDataSource
operator|.
name|contains
argument_list|(
name|dataMapName
argument_list|)
condition|?
name|createDataSource
argument_list|()
else|:
name|sharedDataSource
expr_stmt|;
name|dataSources
operator|.
name|put
argument_list|(
name|dataMapName
argument_list|,
name|ds
argument_list|)
expr_stmt|;
block|}
return|return
name|ds
return|;
block|}
specifier|private
name|DataSource
name|createDataSource
parameter_list|()
block|{
try|try
block|{
name|PoolDataSource
name|poolDS
init|=
operator|new
name|PoolDataSource
argument_list|(
name|dataSourceInfo
operator|.
name|getJdbcDriver
argument_list|()
argument_list|,
name|dataSourceInfo
operator|.
name|getDataSourceUrl
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|PoolManager
argument_list|(
name|poolDS
argument_list|,
name|dataSourceInfo
operator|.
name|getMinConnections
argument_list|()
argument_list|,
name|dataSourceInfo
operator|.
name|getMaxConnections
argument_list|()
argument_list|,
name|dataSourceInfo
operator|.
name|getUserName
argument_list|()
argument_list|,
name|dataSourceInfo
operator|.
name|getPassword
argument_list|()
argument_list|,
name|PoolManager
operator|.
name|MAX_QUEUE_WAIT_DEFAULT
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// noop - make sure we are not shutdown by the test scope, but at the
comment|// same time PoolManager methods are exposed (so we can't wrap
comment|// PoolManager)
block|}
block|}
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can not create shared data source."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

