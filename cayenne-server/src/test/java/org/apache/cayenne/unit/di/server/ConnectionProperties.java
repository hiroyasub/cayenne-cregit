begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conn
operator|.
name|DataSourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|ExtendedProperties
import|;
end_import

begin_comment
comment|/**  * ConnectionProperties handles a set of DataSourceInfo objects using  * information stored in $HOME/.cayenne/connection.properties. As of now this is  * purely a utility class. Its features are not used in deployment.  */
end_comment

begin_class
class|class
name|ConnectionProperties
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ADAPTER_KEY
init|=
literal|"adapter"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ADAPTER20_KEY
init|=
literal|"cayenne.adapter"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USER_NAME_KEY
init|=
literal|"jdbc.username"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PASSWORD_KEY
init|=
literal|"jdbc.password"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|URL_KEY
init|=
literal|"jdbc.url"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DRIVER_KEY
init|=
literal|"jdbc.driver"
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DataSourceInfo
argument_list|>
name|connectionInfos
decl_stmt|;
comment|/**      * Constructor for ConnectionProperties.      */
name|ConnectionProperties
parameter_list|(
name|ExtendedProperties
name|props
parameter_list|)
block|{
name|connectionInfos
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DataSourceInfo
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|extractNames
argument_list|(
name|props
argument_list|)
control|)
block|{
name|DataSourceInfo
name|dsi
init|=
name|buildDataSourceInfo
argument_list|(
name|props
operator|.
name|subset
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|connectionInfos
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|dsi
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|size
parameter_list|()
block|{
return|return
name|connectionInfos
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Returns DataSourceInfo object for a symbolic name. If name does not match      * an existing object, returns null.      */
name|DataSourceInfo
name|getConnection
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|connectionInfos
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Creates a DataSourceInfo object from a set of properties.      */
specifier|private
name|DataSourceInfo
name|buildDataSourceInfo
parameter_list|(
name|ExtendedProperties
name|props
parameter_list|)
block|{
name|DataSourceInfo
name|dsi
init|=
operator|new
name|DataSourceInfo
argument_list|()
decl_stmt|;
name|String
name|adapter
init|=
name|props
operator|.
name|getString
argument_list|(
name|ADAPTER_KEY
argument_list|)
decl_stmt|;
comment|// try legacy adapter key
if|if
condition|(
name|adapter
operator|==
literal|null
condition|)
block|{
name|adapter
operator|=
name|props
operator|.
name|getString
argument_list|(
name|ADAPTER20_KEY
argument_list|)
expr_stmt|;
block|}
name|dsi
operator|.
name|setAdapterClassName
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|dsi
operator|.
name|setUserName
argument_list|(
name|props
operator|.
name|getString
argument_list|(
name|USER_NAME_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|dsi
operator|.
name|setPassword
argument_list|(
name|props
operator|.
name|getString
argument_list|(
name|PASSWORD_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|dsi
operator|.
name|setDataSourceUrl
argument_list|(
name|props
operator|.
name|getString
argument_list|(
name|URL_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|dsi
operator|.
name|setJdbcDriver
argument_list|(
name|props
operator|.
name|getString
argument_list|(
name|DRIVER_KEY
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|dsi
return|;
block|}
comment|/**      * Returns a list of connection names configured in the properties object.      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|extractNames
parameter_list|(
name|ExtendedProperties
name|props
parameter_list|)
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|props
operator|.
name|getKeys
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|dotInd
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotInd
operator|<=
literal|0
operator|||
name|dotInd
operator|>=
name|key
operator|.
name|length
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|name
init|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotInd
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
block|}
end_class

end_unit

