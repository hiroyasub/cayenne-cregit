begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataSourceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|UnitDbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_class
specifier|public
class|class
name|UnitDbAdapterProvider
implements|implements
name|Provider
argument_list|<
name|UnitDbAdapter
argument_list|>
block|{
specifier|static
specifier|final
name|String
name|TEST_ADAPTERS_MAP
init|=
literal|"org.apache.cayenne.unit.di.server.CayenneResourcesAccessStackAdapterProvider.adapters"
decl_stmt|;
specifier|private
name|Injector
name|injector
decl_stmt|;
specifier|private
name|DbAdapter
name|adapter
decl_stmt|;
specifier|private
name|DataSourceDescriptor
name|dataSourceInfo
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|adapterTypesMap
decl_stmt|;
specifier|public
name|UnitDbAdapterProvider
parameter_list|(
annotation|@
name|Inject
argument_list|(
name|TEST_ADAPTERS_MAP
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|adapterTypesMap
parameter_list|,
annotation|@
name|Inject
name|DataSourceDescriptor
name|dataSourceInfo
parameter_list|,
annotation|@
name|Inject
name|DbAdapter
name|adapter
parameter_list|,
annotation|@
name|Inject
name|Injector
name|injector
parameter_list|)
block|{
name|this
operator|.
name|dataSourceInfo
operator|=
name|dataSourceInfo
expr_stmt|;
name|this
operator|.
name|adapterTypesMap
operator|=
name|adapterTypesMap
expr_stmt|;
name|this
operator|.
name|adapter
operator|=
name|adapter
expr_stmt|;
name|this
operator|.
name|injector
operator|=
name|injector
expr_stmt|;
block|}
specifier|public
name|UnitDbAdapter
name|get
parameter_list|()
throws|throws
name|ConfigurationException
block|{
name|String
name|testAdapterType
init|=
name|adapterTypesMap
operator|.
name|get
argument_list|(
name|adapter
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|testAdapterType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unmapped adapter type: "
operator|+
name|adapter
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|Class
argument_list|<
name|UnitDbAdapter
argument_list|>
name|type
decl_stmt|;
try|try
block|{
name|type
operator|=
operator|(
name|Class
argument_list|<
name|UnitDbAdapter
argument_list|>
operator|)
name|Util
operator|.
name|getJavaClass
argument_list|(
name|testAdapterType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Invalid class %s of type AccessStackAdapter"
argument_list|,
name|e
argument_list|,
name|testAdapterType
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|UnitDbAdapter
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Class %s is not assignable to AccessStackAdapter"
argument_list|,
name|testAdapterType
argument_list|)
throw|;
block|}
try|try
block|{
name|Constructor
argument_list|<
name|UnitDbAdapter
argument_list|>
name|c
init|=
name|type
operator|.
name|getConstructor
argument_list|(
name|DbAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
name|UnitDbAdapter
name|unitAdapter
init|=
name|c
operator|.
name|newInstance
argument_list|(
name|adapter
argument_list|)
decl_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|unitAdapter
argument_list|)
expr_stmt|;
return|return
name|unitAdapter
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Error instantiating "
operator|+
name|testAdapterType
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

