begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|XMLDataChannelDescriptorLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
operator|.
name|URLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|UnitDbAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|DBCleaner
block|{
specifier|private
name|FlavoredDBHelper
name|dbHelper
decl_stmt|;
specifier|private
name|String
name|location
decl_stmt|;
specifier|private
name|DataDomain
name|domain
decl_stmt|;
specifier|private
name|XMLDataChannelDescriptorLoader
name|loader
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|UnitDbAdapter
name|accessStackAdapter
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|Injector
name|injector
decl_stmt|;
specifier|public
name|DBCleaner
parameter_list|(
name|FlavoredDBHelper
name|dbHelper
parameter_list|,
name|DataDomain
name|dataDomain
parameter_list|,
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|dbHelper
operator|=
name|dbHelper
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|domain
operator|=
name|dataDomain
expr_stmt|;
block|}
specifier|public
name|void
name|clean
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|location
operator|.
name|equals
argument_list|(
name|CayenneProjects
operator|.
name|BINARY_PK_PROJECT
argument_list|)
condition|)
block|{
if|if
condition|(
name|accessStackAdapter
operator|.
name|supportsBinaryPK
argument_list|()
condition|)
block|{
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"BINARY_PK_TEST2"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"BINARY_PK_TEST1"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|location
operator|.
name|equals
argument_list|(
name|CayenneProjects
operator|.
name|EMPTY_PROJECT
argument_list|)
condition|)
block|{
return|return;
block|}
if|else if
condition|(
name|location
operator|.
name|equals
argument_list|(
name|CayenneProjects
operator|.
name|LOB_PROJECT
argument_list|)
condition|)
block|{
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"CLOB_TEST_RELATION"
argument_list|)
expr_stmt|;
if|if
condition|(
name|accessStackAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"BLOB_TEST"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"CLOB_TEST"
argument_list|)
expr_stmt|;
block|}
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"TEST"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|location
operator|.
name|equals
argument_list|(
name|CayenneProjects
operator|.
name|MISC_TYPES_PROJECT
argument_list|)
condition|)
block|{
if|if
condition|(
name|accessStackAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"SERIALIZABLE_ENTITY"
argument_list|)
expr_stmt|;
block|}
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"ARRAYS_ENTITY"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"CHARACTER_ENTITY"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|location
operator|.
name|equals
argument_list|(
name|CayenneProjects
operator|.
name|RETURN_TYPES_PROJECT
argument_list|)
condition|)
block|{
if|if
condition|(
name|accessStackAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"TYPES_MAPPING_LOBS_TEST1"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"TYPES_MAPPING_TEST2"
argument_list|)
expr_stmt|;
block|}
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"TYPES_MAPPING_TEST1"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|loader
operator|=
operator|new
name|XMLDataChannelDescriptorLoader
argument_list|()
expr_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|ConfigurationTree
argument_list|<
name|DataChannelDescriptor
argument_list|>
name|tree
init|=
name|loader
operator|.
name|load
argument_list|(
operator|new
name|URLResource
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|DataMap
name|map
range|:
name|tree
operator|.
name|getRootNode
argument_list|()
operator|.
name|getDataMaps
argument_list|()
control|)
block|{
name|DataMap
name|dataMap
init|=
name|domain
operator|.
name|getDataMap
argument_list|(
name|map
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DbEntity
argument_list|>
name|entities
init|=
operator|new
name|ArrayList
argument_list|<
name|DbEntity
argument_list|>
argument_list|(
name|dataMap
operator|.
name|getDbEntities
argument_list|()
argument_list|)
decl_stmt|;
name|domain
operator|.
name|getEntitySorter
argument_list|()
operator|.
name|sortDbEntities
argument_list|(
name|entities
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|DbEntity
name|entity
range|:
name|entities
control|)
block|{
name|dbHelper
operator|.
name|deleteAll
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

