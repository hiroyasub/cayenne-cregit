begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|meaningful_pk
operator|.
name|auto
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistentObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ValueHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|EntityProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|PropertyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|StringProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|meaningful_pk
operator|.
name|ClientMeaningfulPk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|PersistentObjectHolder
import|;
end_import

begin_comment
comment|/**  * A generated persistent class mapped as "MeaningfulPkDep2" Cayenne entity. It is a good idea to  * avoid changing this class manually, since it will be overwritten next time code is  * regenerated. If you need to make any customizations, put them in a subclass.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|_ClientMeaningfulPkDep2
extends|extends
name|PersistentObject
block|{
specifier|public
specifier|static
specifier|final
name|StringProperty
argument_list|<
name|String
argument_list|>
name|DESCR
init|=
name|PropertyFactory
operator|.
name|createString
argument_list|(
literal|"descr"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StringProperty
argument_list|<
name|String
argument_list|>
name|PK
init|=
name|PropertyFactory
operator|.
name|createString
argument_list|(
literal|"pk"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|EntityProperty
argument_list|<
name|ClientMeaningfulPk
argument_list|>
name|MEANINGFUL_PK
init|=
name|PropertyFactory
operator|.
name|createEntity
argument_list|(
literal|"meaningfulPk"
argument_list|,
name|ClientMeaningfulPk
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|descr
decl_stmt|;
specifier|protected
name|String
name|pk
decl_stmt|;
specifier|protected
name|ValueHolder
argument_list|<
name|ClientMeaningfulPk
argument_list|>
name|meaningfulPk
decl_stmt|;
specifier|public
name|String
name|getDescr
parameter_list|()
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"descr"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|descr
return|;
block|}
specifier|public
name|void
name|setDescr
parameter_list|(
name|String
name|descr
parameter_list|)
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"descr"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|objectContext
operator|.
name|propertyChanged
argument_list|(
name|this
argument_list|,
literal|"descr"
argument_list|,
name|this
operator|.
name|descr
argument_list|,
name|descr
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|descr
operator|=
name|descr
expr_stmt|;
block|}
specifier|public
name|String
name|getPk
parameter_list|()
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"pk"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|pk
return|;
block|}
specifier|public
name|void
name|setPk
parameter_list|(
name|String
name|pk
parameter_list|)
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"pk"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|objectContext
operator|.
name|propertyChanged
argument_list|(
name|this
argument_list|,
literal|"pk"
argument_list|,
name|this
operator|.
name|pk
argument_list|,
name|pk
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|pk
operator|=
name|pk
expr_stmt|;
block|}
specifier|public
name|ClientMeaningfulPk
name|getMeaningfulPk
parameter_list|()
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"meaningfulPk"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|this
operator|.
name|meaningfulPk
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|meaningfulPk
operator|=
operator|new
name|PersistentObjectHolder
argument_list|<>
argument_list|(
name|this
argument_list|,
literal|"meaningfulPk"
argument_list|)
expr_stmt|;
block|}
return|return
name|meaningfulPk
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|setMeaningfulPk
parameter_list|(
name|ClientMeaningfulPk
name|meaningfulPk
parameter_list|)
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"meaningfulPk"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|this
operator|.
name|meaningfulPk
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|meaningfulPk
operator|=
operator|new
name|PersistentObjectHolder
argument_list|<>
argument_list|(
name|this
argument_list|,
literal|"meaningfulPk"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|meaningfulPk
operator|.
name|setValue
argument_list|(
name|meaningfulPk
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

