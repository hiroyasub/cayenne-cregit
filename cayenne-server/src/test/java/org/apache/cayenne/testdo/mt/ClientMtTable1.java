begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|mt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Validating
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|mt
operator|.
name|auto
operator|.
name|_ClientMtTable1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|SimpleValidationFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|ValidationResult
import|;
end_import

begin_class
specifier|public
class|class
name|ClientMtTable1
extends|extends
name|_ClientMtTable1
implements|implements
name|Validating
block|{
specifier|protected
name|boolean
name|validatedForDelete
decl_stmt|;
specifier|protected
name|boolean
name|validatedForInsert
decl_stmt|;
specifier|protected
name|boolean
name|validatedForUpdate
decl_stmt|;
specifier|protected
name|boolean
name|blow
decl_stmt|;
comment|// provide direct access to persistent properties for testing..
specifier|public
name|String
name|getGlobalAttribute1Direct
parameter_list|()
block|{
return|return
name|globalAttribute1
return|;
block|}
specifier|public
name|String
name|getServerAttribute1Direct
parameter_list|()
block|{
return|return
name|serverAttribute1
return|;
block|}
specifier|public
name|List
name|getTable2ArrayDirect
parameter_list|()
block|{
return|return
name|table2Array
return|;
block|}
specifier|public
name|void
name|resetValidation
parameter_list|(
name|boolean
name|blow
parameter_list|)
block|{
name|this
operator|.
name|blow
operator|=
name|blow
expr_stmt|;
name|this
operator|.
name|validatedForDelete
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|validatedForInsert
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|validatedForUpdate
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|validateForDelete
parameter_list|(
name|ValidationResult
name|validationResult
parameter_list|)
block|{
name|validatedForDelete
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|blow
condition|)
block|{
name|validationResult
operator|.
name|addFailure
argument_list|(
operator|new
name|SimpleValidationFailure
argument_list|(
name|this
argument_list|,
literal|"test error"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|validateForInsert
parameter_list|(
name|ValidationResult
name|validationResult
parameter_list|)
block|{
name|validatedForInsert
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|blow
condition|)
block|{
name|validationResult
operator|.
name|addFailure
argument_list|(
operator|new
name|SimpleValidationFailure
argument_list|(
name|this
argument_list|,
literal|"test error"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|validateForUpdate
parameter_list|(
name|ValidationResult
name|validationResult
parameter_list|)
block|{
name|validatedForUpdate
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|blow
condition|)
block|{
name|validationResult
operator|.
name|addFailure
argument_list|(
operator|new
name|SimpleValidationFailure
argument_list|(
name|this
argument_list|,
literal|"test error"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isValidatedForDelete
parameter_list|()
block|{
return|return
name|validatedForDelete
return|;
block|}
specifier|public
name|boolean
name|isValidatedForInsert
parameter_list|()
block|{
return|return
name|validatedForInsert
return|;
block|}
specifier|public
name|boolean
name|isValidatedForUpdate
parameter_list|()
block|{
return|return
name|validatedForUpdate
return|;
block|}
block|}
end_class

end_unit

