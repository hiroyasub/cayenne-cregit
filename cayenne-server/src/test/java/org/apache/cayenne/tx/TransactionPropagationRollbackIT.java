begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tx
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|UnitDbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  *  * This test checks rollback behaviour of different propagation modes.  *  * @see TransactionPropagation  * @since 4.1  */
end_comment

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|TransactionPropagationRollbackIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Inject
name|ServerRuntime
name|runtime
decl_stmt|;
annotation|@
name|Inject
name|UnitDbAdapter
name|unitDbAdapter
decl_stmt|;
name|TransactionManager
name|manager
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|initTransactionManager
parameter_list|()
block|{
comment|// no binding in test container, get it from runtime
name|manager
operator|=
name|runtime
operator|.
name|getInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransactionManager
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see TransactionPropagation#REQUIRES_NEW      */
annotation|@
name|Test
specifier|public
name|void
name|testPropagationRequiresNew
parameter_list|()
block|{
name|TransactionDescriptor
name|descriptor
init|=
operator|new
name|TransactionDescriptor
argument_list|(
name|Connection
operator|.
name|TRANSACTION_SERIALIZABLE
argument_list|,
comment|// ensure that transaction not visible to each other
name|TransactionPropagation
operator|.
name|REQUIRES_NEW
comment|// require new transaction for every operation
argument_list|)
decl_stmt|;
name|performInTransaction
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
comment|// rollback should be performed and no artist will be in DB
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
comment|// painting should be there
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see TransactionPropagation#NESTED      */
annotation|@
name|Test
specifier|public
name|void
name|testPropagationNested
parameter_list|()
block|{
name|TransactionDescriptor
name|descriptor
init|=
operator|new
name|TransactionDescriptor
argument_list|(
name|Connection
operator|.
name|TRANSACTION_SERIALIZABLE
argument_list|,
comment|// ensure that transaction not visible to each other
name|TransactionPropagation
operator|.
name|NESTED
comment|// allow joining to existing transaction
argument_list|)
decl_stmt|;
name|performInTransaction
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
comment|// nested rollback shouldn't affect outer transaction
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
comment|// painting should be there
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see TransactionPropagation#MANDATORY      */
annotation|@
name|Test
specifier|public
name|void
name|testPropagationMandatory
parameter_list|()
block|{
name|TransactionDescriptor
name|descriptor
init|=
operator|new
name|TransactionDescriptor
argument_list|(
name|Connection
operator|.
name|TRANSACTION_SERIALIZABLE
argument_list|,
comment|// ensure that transaction not visible to each other
name|TransactionPropagation
operator|.
name|MANDATORY
comment|// requires existing transaction to join
argument_list|)
decl_stmt|;
name|performInTransaction
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
comment|// nested rollback shouldn't affect outer transaction
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
comment|// painting should be there
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|performInTransaction
parameter_list|(
name|TransactionDescriptor
name|descriptor
parameter_list|)
block|{
name|Artist
name|artist
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|artist
operator|.
name|setArtistName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|manager
operator|.
name|performInTransaction
argument_list|(
parameter_list|()
lambda|->
block|{
comment|// try to perform illegal operation in nested transaction
try|try
block|{
name|manager
operator|.
name|performInTransaction
argument_list|(
parameter_list|()
lambda|->
block|{
name|artist
operator|.
name|setArtistName
argument_list|(
literal|"test3"
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// this should pass
name|artist
operator|.
name|setArtistName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// this should throw
return|return
literal|null
return|;
block|}
argument_list|,
name|descriptor
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{
block|}
comment|// perform some valid commit
name|artist
operator|.
name|setArtistName
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
name|Painting
name|painting
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|painting
operator|.
name|setPaintingTitle
argument_list|(
literal|"painting"
argument_list|)
expr_stmt|;
comment|// Outcome of this will depend on transaction propagation
comment|// if it's nested or mandatory we'll have here artist committed,
comment|// if it's new no artist should be in database
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

