begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|log
operator|.
name|JdbcEventLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultTransactionManagerIT
block|{
annotation|@
name|Test
specifier|public
name|void
name|testPerformInTransaction_Local
parameter_list|()
block|{
specifier|final
name|BaseTransaction
name|tx
init|=
name|mock
argument_list|(
name|BaseTransaction
operator|.
name|class
argument_list|)
decl_stmt|;
name|DefaultTransactionManager
name|txManager
init|=
name|createDefaultTxManager
argument_list|(
parameter_list|()
lambda|->
name|tx
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|expectedResult
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|result
init|=
name|txManager
operator|.
name|performInTransaction
argument_list|(
parameter_list|()
lambda|->
block|{
name|assertSame
argument_list|(
name|tx
argument_list|,
name|BaseTransaction
operator|.
name|getThreadTransaction
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|expectedResult
return|;
block|}
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|expectedResult
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPerformInTransaction_ExistingTx
parameter_list|()
block|{
specifier|final
name|BaseTransaction
name|tx1
init|=
name|mock
argument_list|(
name|BaseTransaction
operator|.
name|class
argument_list|)
decl_stmt|;
name|DefaultTransactionManager
name|txManager
init|=
name|createDefaultTxManager
argument_list|(
parameter_list|()
lambda|->
name|tx1
argument_list|)
decl_stmt|;
specifier|final
name|BaseTransaction
name|tx2
init|=
name|mock
argument_list|(
name|BaseTransaction
operator|.
name|class
argument_list|)
decl_stmt|;
name|BaseTransaction
operator|.
name|bindThreadTransaction
argument_list|(
name|tx2
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Object
name|expectedResult
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|result
init|=
name|txManager
operator|.
name|performInTransaction
argument_list|(
parameter_list|()
lambda|->
block|{
name|assertSame
argument_list|(
name|tx2
argument_list|,
name|BaseTransaction
operator|.
name|getThreadTransaction
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|expectedResult
return|;
block|}
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|expectedResult
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|BaseTransaction
operator|.
name|bindThreadTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedPropagation
parameter_list|()
block|{
specifier|final
name|BaseTransaction
name|tx
init|=
name|mock
argument_list|(
name|BaseTransaction
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|BaseTransaction
operator|.
name|getThreadTransaction
argument_list|()
argument_list|)
expr_stmt|;
name|DefaultTransactionManager
name|txManager
init|=
name|createDefaultTxManager
argument_list|(
parameter_list|()
lambda|->
name|tx
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Object
name|expectedResult
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|result
init|=
name|txManager
operator|.
name|performInTransaction
argument_list|(
parameter_list|()
lambda|->
block|{
name|assertSame
argument_list|(
name|tx
argument_list|,
name|BaseTransaction
operator|.
name|getThreadTransaction
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|expectedResult
return|;
block|}
argument_list|,
name|TransactionDescriptor
operator|.
name|builder
argument_list|()
operator|.
name|propagation
argument_list|(
name|TransactionPropagation
operator|.
name|NESTED
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|expectedResult
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|BaseTransaction
operator|.
name|bindThreadTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CayenneRuntimeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMandatoryPropagationNotStarted
parameter_list|()
block|{
specifier|final
name|BaseTransaction
name|tx
init|=
name|mock
argument_list|(
name|BaseTransaction
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|BaseTransaction
operator|.
name|getThreadTransaction
argument_list|()
argument_list|)
expr_stmt|;
name|DefaultTransactionManager
name|txManager
init|=
name|createDefaultTxManager
argument_list|(
parameter_list|()
lambda|->
name|tx
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Object
name|expectedResult
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|result
init|=
name|txManager
operator|.
name|performInTransaction
argument_list|(
parameter_list|()
lambda|->
block|{
name|assertSame
argument_list|(
name|tx
argument_list|,
name|BaseTransaction
operator|.
name|getThreadTransaction
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|expectedResult
return|;
block|}
argument_list|,
name|TransactionDescriptor
operator|.
name|builder
argument_list|()
operator|.
name|propagation
argument_list|(
name|TransactionPropagation
operator|.
name|MANDATORY
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|expectedResult
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|BaseTransaction
operator|.
name|bindThreadTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMandatoryPropagation
parameter_list|()
block|{
specifier|final
name|BaseTransaction
name|tx
init|=
name|mock
argument_list|(
name|BaseTransaction
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|BaseTransaction
operator|.
name|getThreadTransaction
argument_list|()
argument_list|)
expr_stmt|;
name|DefaultTransactionManager
name|txManager
init|=
name|createDefaultTxManager
argument_list|(
parameter_list|()
lambda|->
name|tx
argument_list|)
decl_stmt|;
name|BaseTransaction
operator|.
name|bindThreadTransaction
argument_list|(
name|tx
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Object
name|expectedResult
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|result
init|=
name|txManager
operator|.
name|performInTransaction
argument_list|(
parameter_list|()
lambda|->
block|{
name|assertSame
argument_list|(
name|tx
argument_list|,
name|BaseTransaction
operator|.
name|getThreadTransaction
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|expectedResult
return|;
block|}
argument_list|,
name|TransactionDescriptor
operator|.
name|builder
argument_list|()
operator|.
name|propagation
argument_list|(
name|TransactionPropagation
operator|.
name|MANDATORY
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|expectedResult
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|BaseTransaction
operator|.
name|bindThreadTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequiresNewPropagation
parameter_list|()
block|{
specifier|final
name|BaseTransaction
name|tx1
init|=
name|mock
argument_list|(
name|BaseTransaction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|BaseTransaction
name|tx2
init|=
name|mock
argument_list|(
name|BaseTransaction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|BaseTransaction
operator|.
name|getThreadTransaction
argument_list|()
argument_list|)
expr_stmt|;
name|DefaultTransactionManager
name|txManager
init|=
name|createDefaultTxManager
argument_list|(
parameter_list|()
lambda|->
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|tx2
return|;
block|}
argument_list|)
decl_stmt|;
name|BaseTransaction
operator|.
name|bindThreadTransaction
argument_list|(
name|tx1
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Object
name|expectedResult
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|result
init|=
name|txManager
operator|.
name|performInTransaction
argument_list|(
parameter_list|()
lambda|->
block|{
name|assertSame
argument_list|(
name|tx2
argument_list|,
name|BaseTransaction
operator|.
name|getThreadTransaction
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|expectedResult
return|;
block|}
argument_list|,
name|TransactionDescriptor
operator|.
name|builder
argument_list|()
operator|.
name|propagation
argument_list|(
name|TransactionPropagation
operator|.
name|REQUIRES_NEW
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|expectedResult
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|tx1
argument_list|,
name|BaseTransaction
operator|.
name|getThreadTransaction
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|BaseTransaction
operator|.
name|bindThreadTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|DefaultTransactionManager
name|createDefaultTxManager
parameter_list|(
specifier|final
name|Supplier
argument_list|<
name|Transaction
argument_list|>
name|txSupplier
parameter_list|)
block|{
return|return
operator|new
name|DefaultTransactionManager
argument_list|(
name|createMockFactory
argument_list|(
name|txSupplier
argument_list|)
argument_list|,
name|mock
argument_list|(
name|JdbcEventLogger
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|TransactionFactory
name|createMockFactory
parameter_list|(
specifier|final
name|Supplier
argument_list|<
name|Transaction
argument_list|>
name|supplier
parameter_list|)
block|{
name|TransactionFactory
name|txFactory
init|=
name|mock
argument_list|(
name|TransactionFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|txFactory
operator|.
name|createTransaction
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|supplier
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|txFactory
operator|.
name|createTransaction
argument_list|(
name|any
argument_list|(
name|TransactionDescriptor
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|supplier
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|txFactory
return|;
block|}
block|}
end_class

end_unit

