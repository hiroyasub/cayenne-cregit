begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tx
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|log
operator|.
name|JdbcEventLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Check if connection can be decorated with listeners and that default connection of TransactionDescriptor  * has major priority  *  * @see BaseTransaction,TransactionDescriptor  * @since 4.2  */
end_comment

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|TransactionCustomConnectionIT
extends|extends
name|ServerCase
block|{
specifier|private
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TransactionIsolationIT
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Inject
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Inject
name|ServerRuntime
name|runtime
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|JdbcEventLogger
name|jdbcEventLogger
decl_stmt|;
name|TransactionManager
name|manager
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|firstReadonlyCondition
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|initTransactionManager
parameter_list|()
block|{
comment|// no binding in test container, get it from runtime
name|manager
operator|=
name|runtime
operator|.
name|getInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|TransactionManager
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test depends on decoration of readonly property of the connection, but not every driver supports readonly setting.      * So this test calculated for drivers with current support, but if it is not supported, this test mustn't fail      * because it checks if readonly wasn't changed by setter and changes firstReadonlyCondition flag value      * if it is true to avoid fails. In that case test is useless, but it's behavior in other cases can submit      * right behavior of methods      */
annotation|@
name|Test
specifier|public
name|void
name|testConnectionDecorationWithListeners
parameter_list|()
block|{
name|Transaction
name|t
init|=
operator|new
name|CayenneTransaction
argument_list|(
name|jdbcEventLogger
argument_list|)
decl_stmt|;
comment|//add listeners which will check if connection object will be changed after every decorate call
name|List
argument_list|<
name|TransactionListener
argument_list|>
name|listeners
init|=
name|addAndGetListenersWithCustomReadonlyTo
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|BaseTransaction
operator|.
name|bindThreadTransaction
argument_list|(
name|t
argument_list|)
expr_stmt|;
try|try
block|{
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|//check if the last listener set readonly property to false
name|t
operator|.
name|getConnections
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|connection
parameter_list|)
lambda|->
block|{
try|try
block|{
name|assertEquals
argument_list|(
name|connection
operator|.
name|isReadOnly
argument_list|()
argument_list|,
name|firstReadonlyCondition
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|throwables
parameter_list|)
block|{
name|throwables
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//check if every decoration from listener was called
for|for
control|(
name|TransactionListener
name|transactionListener
range|:
name|listeners
control|)
block|{
name|verify
argument_list|(
name|transactionListener
argument_list|)
operator|.
name|decorateConnection
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|BaseTransaction
operator|.
name|bindThreadTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|t
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|TransactionListener
argument_list|>
name|addAndGetListenersWithCustomReadonlyTo
parameter_list|(
name|Transaction
name|t
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|classes
init|=
operator|new
name|Class
index|[]
block|{
name|ListenerWithFirstReadonlyDecorator
operator|.
name|class
block|,
name|ListenerWithSecondReadonlyDecorator
operator|.
name|class
block|}
decl_stmt|;
name|List
argument_list|<
name|TransactionListener
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
range|:
name|classes
control|)
block|{
name|TransactionListener
name|listener
init|=
operator|(
name|TransactionListener
operator|)
name|mock
argument_list|(
name|aClass
argument_list|)
decl_stmt|;
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|listener
operator|.
name|decorateConnection
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
name|t
operator|.
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
return|return
name|listeners
return|;
block|}
comment|//listener, which will check if readonly property of connection is false and set it to true
class|class
name|ListenerWithFirstReadonlyDecorator
implements|implements
name|TransactionListener
block|{
annotation|@
name|Override
specifier|public
name|void
name|willCommit
parameter_list|(
name|Transaction
name|tx
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|willRollback
parameter_list|(
name|Transaction
name|tx
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|willAddConnection
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|String
name|connectionName
parameter_list|,
name|Connection
name|connection
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|Connection
name|decorateConnection
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Connection
name|connection
parameter_list|)
block|{
try|try
block|{
name|firstReadonlyCondition
operator|=
name|connection
operator|.
name|isReadOnly
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setReadOnly
argument_list|(
operator|!
name|firstReadonlyCondition
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|isReadOnly
argument_list|()
operator|==
name|firstReadonlyCondition
condition|)
block|{
name|firstReadonlyCondition
operator|=
operator|!
name|connection
operator|.
name|isReadOnly
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|throwables
parameter_list|)
block|{
name|throwables
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|connection
return|;
block|}
block|}
comment|//listener, which will check if readonly property of connection is true and set it to false
class|class
name|ListenerWithSecondReadonlyDecorator
implements|implements
name|TransactionListener
block|{
annotation|@
name|Override
specifier|public
name|void
name|willCommit
parameter_list|(
name|Transaction
name|tx
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|willRollback
parameter_list|(
name|Transaction
name|tx
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|willAddConnection
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|String
name|connectionName
parameter_list|,
name|Connection
name|connection
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|Connection
name|decorateConnection
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Connection
name|connection
parameter_list|)
block|{
try|try
block|{
name|assertEquals
argument_list|(
operator|!
name|firstReadonlyCondition
argument_list|,
name|connection
operator|.
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setReadOnly
argument_list|(
operator|!
name|connection
operator|.
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|isReadOnly
argument_list|()
operator|==
operator|!
name|firstReadonlyCondition
condition|)
block|{
name|firstReadonlyCondition
operator|=
operator|!
name|firstReadonlyCondition
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|throwables
parameter_list|)
block|{
name|throwables
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|connection
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultConnectionInDescriptor
parameter_list|()
block|{
name|Transaction
name|t
init|=
operator|new
name|CayenneTransaction
argument_list|(
name|jdbcEventLogger
argument_list|)
decl_stmt|;
name|BaseTransaction
operator|.
name|bindThreadTransaction
argument_list|(
name|t
argument_list|)
expr_stmt|;
try|try
block|{
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|t
operator|.
name|getConnections
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|connection
operator|.
name|setAutoCommit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|throwables
parameter_list|)
block|{
name|throwables
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|TransactionDescriptor
name|mockDescriptor
init|=
name|mock
argument_list|(
name|TransactionDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockDescriptor
operator|.
name|getConnectionSupplier
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
parameter_list|()
lambda|->
name|connection
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockDescriptor
operator|.
name|getPropagation
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TransactionPropagation
operator|.
name|REQUIRES_NEW
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockDescriptor
operator|.
name|getIsolation
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Connection
operator|.
name|TRANSACTION_SERIALIZABLE
argument_list|)
expr_stmt|;
name|performInTransaction
argument_list|(
name|mockDescriptor
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockDescriptor
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getConnectionSupplier
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|BaseTransaction
operator|.
name|bindThreadTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|t
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|performInTransaction
parameter_list|(
name|TransactionDescriptor
name|descriptor
parameter_list|)
block|{
name|Artist
name|artist
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|artist
operator|.
name|setArtistName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|manager
operator|.
name|performInTransaction
argument_list|(
parameter_list|()
lambda|->
block|{
name|artist
operator|.
name|setArtistName
argument_list|(
literal|"test3"
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|,
name|descriptor
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

