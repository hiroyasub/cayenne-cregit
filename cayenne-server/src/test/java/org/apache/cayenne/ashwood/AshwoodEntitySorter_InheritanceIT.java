begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ashwood
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|PeopleProjectCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|PEOPLE_PROJECT
argument_list|)
specifier|public
class|class
name|AshwoodEntitySorter_InheritanceIT
extends|extends
name|PeopleProjectCase
block|{
annotation|@
name|Inject
specifier|protected
name|ObjectContext
name|context
decl_stmt|;
specifier|private
name|EntityResolver
name|resolver
decl_stmt|;
specifier|private
name|AshwoodEntitySorter
name|sorter
decl_stmt|;
specifier|private
name|DbEntity
name|address
decl_stmt|;
specifier|private
name|DbEntity
name|clientCompany
decl_stmt|;
specifier|private
name|DbEntity
name|department
decl_stmt|;
specifier|private
name|DbEntity
name|person
decl_stmt|;
specifier|private
name|DbEntity
name|personNotes
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|this
operator|.
name|resolver
operator|=
name|context
operator|.
name|getEntityResolver
argument_list|()
expr_stmt|;
name|this
operator|.
name|sorter
operator|=
operator|new
name|AshwoodEntitySorter
argument_list|()
expr_stmt|;
name|sorter
operator|.
name|setEntityResolver
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|this
operator|.
name|address
operator|=
name|resolver
operator|.
name|getDbEntity
argument_list|(
literal|"ADDRESS"
argument_list|)
expr_stmt|;
name|this
operator|.
name|clientCompany
operator|=
name|resolver
operator|.
name|getDbEntity
argument_list|(
literal|"CLIENT_COMPANY"
argument_list|)
expr_stmt|;
name|this
operator|.
name|department
operator|=
name|resolver
operator|.
name|getDbEntity
argument_list|(
literal|"DEPARTMENT"
argument_list|)
expr_stmt|;
name|this
operator|.
name|person
operator|=
name|resolver
operator|.
name|getDbEntity
argument_list|(
literal|"PERSON"
argument_list|)
expr_stmt|;
name|this
operator|.
name|personNotes
operator|=
name|resolver
operator|.
name|getDbEntity
argument_list|(
literal|"PERSON_NOTES"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSortDbEntities
parameter_list|()
block|{
name|List
argument_list|<
name|DbEntity
argument_list|>
name|entities
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|address
argument_list|,
name|clientCompany
argument_list|,
name|department
argument_list|,
name|person
argument_list|,
name|personNotes
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|entities
argument_list|)
expr_stmt|;
name|sorter
operator|.
name|sortDbEntities
argument_list|(
name|entities
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entities
operator|.
name|indexOf
argument_list|(
name|person
argument_list|)
operator|<
name|entities
operator|.
name|indexOf
argument_list|(
name|personNotes
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entities
operator|.
name|indexOf
argument_list|(
name|clientCompany
argument_list|)
operator|<
name|entities
operator|.
name|indexOf
argument_list|(
name|person
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entities
operator|.
name|indexOf
argument_list|(
name|person
argument_list|)
operator|<
name|entities
operator|.
name|indexOf
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
comment|// this is actually undefined as person depends on department, and
comment|// department depends on person
comment|// assertTrue(entities.indexOf(person)< entities.indexOf(department));
block|}
block|}
end_class

end_unit

