begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|oneway
operator|.
name|OnewayTable1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|oneway
operator|.
name|OnewayTable2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|oneway
operator|.
name|OnewayTable3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|oneway
operator|.
name|OnewayTable4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|ServerCase
operator|.
name|ONEWAY_PROJECT
argument_list|)
specifier|public
class|class
name|OneWayRelationshipsIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|ObjectContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
specifier|private
name|TableHelper
name|t1Helper
decl_stmt|;
specifier|private
name|TableHelper
name|t2Helper
decl_stmt|;
specifier|private
name|TableHelper
name|t3Helper
decl_stmt|;
specifier|private
name|TableHelper
name|t4Helper
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUpAfterInjection
parameter_list|()
throws|throws
name|Exception
block|{
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"oneway_table2"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"oneway_table1"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"oneway_table4"
argument_list|)
expr_stmt|;
name|dbHelper
operator|.
name|deleteAll
argument_list|(
literal|"oneway_table3"
argument_list|)
expr_stmt|;
name|t1Helper
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"oneway_table1"
argument_list|)
expr_stmt|;
name|t1Helper
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|)
expr_stmt|;
name|t2Helper
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"oneway_table2"
argument_list|)
expr_stmt|;
name|t2Helper
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"TABLE1_ID"
argument_list|)
expr_stmt|;
name|t3Helper
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"oneway_table3"
argument_list|)
expr_stmt|;
name|t3Helper
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|)
expr_stmt|;
name|t4Helper
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"oneway_table4"
argument_list|)
expr_stmt|;
name|t4Helper
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"TABLE3_ID"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToOne_TwoNew
parameter_list|()
throws|throws
name|SQLException
block|{
name|OnewayTable1
name|t1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|OnewayTable1
operator|.
name|class
argument_list|)
decl_stmt|;
name|OnewayTable2
name|t2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|OnewayTable2
operator|.
name|class
argument_list|)
decl_stmt|;
name|t2
operator|.
name|setToOneOneWayDb
argument_list|(
name|t1
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|int
name|t1Pk
init|=
name|t1Helper
operator|.
name|getInt
argument_list|(
literal|"ID"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Cayenne
operator|.
name|intPKForObject
argument_list|(
name|t1
argument_list|)
argument_list|,
name|t1Pk
argument_list|)
expr_stmt|;
name|int
name|t2FK
init|=
name|t2Helper
operator|.
name|getInt
argument_list|(
literal|"TABLE1_ID"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|t1Pk
argument_list|,
name|t2FK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToOne_Replace
parameter_list|()
throws|throws
name|SQLException
block|{
name|t1Helper
operator|.
name|insert
argument_list|(
literal|1
argument_list|)
operator|.
name|insert
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|t2Helper
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|OnewayTable1
name|t11
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|OnewayTable1
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|OnewayTable1
name|t12
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|OnewayTable1
operator|.
name|class
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|OnewayTable2
name|t2
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|OnewayTable2
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|t11
argument_list|,
name|t2
operator|.
name|getToOneOneWayDb
argument_list|()
argument_list|)
expr_stmt|;
name|t2
operator|.
name|setToOneOneWayDb
argument_list|(
name|t12
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|t12
argument_list|,
name|t2
operator|.
name|getToOneOneWayDb
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|t2FK
init|=
name|t2Helper
operator|.
name|getInt
argument_list|(
literal|"TABLE1_ID"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|t2FK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToOne_ReplaceWithNull
parameter_list|()
throws|throws
name|SQLException
block|{
name|t1Helper
operator|.
name|insert
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|t2Helper
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|OnewayTable1
name|t11
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|OnewayTable1
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|OnewayTable2
name|t2
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|OnewayTable2
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|t11
argument_list|,
name|t2
operator|.
name|getToOneOneWayDb
argument_list|()
argument_list|)
expr_stmt|;
name|t2
operator|.
name|setToOneOneWayDb
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|t2
operator|.
name|getToOneOneWayDb
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|t2FK
init|=
name|t2Helper
operator|.
name|getObject
argument_list|(
literal|"TABLE1_ID"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|t2FK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToMany_TwoNew
parameter_list|()
throws|throws
name|SQLException
block|{
name|OnewayTable3
name|t3
init|=
name|context
operator|.
name|newObject
argument_list|(
name|OnewayTable3
operator|.
name|class
argument_list|)
decl_stmt|;
name|OnewayTable4
name|t4
init|=
name|context
operator|.
name|newObject
argument_list|(
name|OnewayTable4
operator|.
name|class
argument_list|)
decl_stmt|;
name|t3
operator|.
name|addToToManyOneWayDb
argument_list|(
name|t4
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|int
name|t3Pk
init|=
name|t3Helper
operator|.
name|getInt
argument_list|(
literal|"ID"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Cayenne
operator|.
name|intPKForObject
argument_list|(
name|t3
argument_list|)
argument_list|,
name|t3Pk
argument_list|)
expr_stmt|;
name|int
name|t4FK
init|=
name|t4Helper
operator|.
name|getInt
argument_list|(
literal|"TABLE3_ID"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|t3Pk
argument_list|,
name|t4FK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToMany_AddNew
parameter_list|()
throws|throws
name|SQLException
block|{
name|t3Helper
operator|.
name|insert
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|t4Helper
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|OnewayTable3
name|t3
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|OnewayTable3
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|t3
operator|.
name|getToManyOneWayDb
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|OnewayTable4
name|t41
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|OnewayTable4
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t3
operator|.
name|getToManyOneWayDb
argument_list|()
operator|.
name|contains
argument_list|(
name|t41
argument_list|)
argument_list|)
expr_stmt|;
name|OnewayTable4
name|t42
init|=
name|context
operator|.
name|newObject
argument_list|(
name|OnewayTable4
operator|.
name|class
argument_list|)
decl_stmt|;
name|t3
operator|.
name|addToToManyOneWayDb
argument_list|(
name|t42
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|t3
operator|.
name|getToManyOneWayDb
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SQLSelect
argument_list|<
name|Integer
argument_list|>
name|fksQuery
init|=
name|SQLSelect
operator|.
name|scalarQuery
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"oneway-rels"
argument_list|,
literal|"SELECT TABLE3_ID FROM oneway_table4"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|fks
init|=
name|context
operator|.
name|select
argument_list|(
name|fksQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|fk
range|:
name|fks
control|)
block|{
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|fk
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToMany_AddExisting
parameter_list|()
throws|throws
name|SQLException
block|{
name|t3Helper
operator|.
name|insert
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|t4Helper
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|OnewayTable3
name|t3
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|OnewayTable3
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|t3
operator|.
name|getToManyOneWayDb
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|OnewayTable4
name|t41
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|OnewayTable4
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t3
operator|.
name|getToManyOneWayDb
argument_list|()
operator|.
name|contains
argument_list|(
name|t41
argument_list|)
argument_list|)
expr_stmt|;
name|OnewayTable4
name|t42
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|OnewayTable4
operator|.
name|class
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|t3
operator|.
name|addToToManyOneWayDb
argument_list|(
name|t42
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|t3
operator|.
name|getToManyOneWayDb
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SQLSelect
argument_list|<
name|Integer
argument_list|>
name|fksQuery
init|=
name|SQLSelect
operator|.
name|scalarQuery
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"oneway-rels"
argument_list|,
literal|"SELECT TABLE3_ID FROM oneway_table4"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|fks
init|=
name|context
operator|.
name|select
argument_list|(
name|fksQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|fk
range|:
name|fks
control|)
block|{
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|fk
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToMany_RemoveExisting
parameter_list|()
throws|throws
name|SQLException
block|{
name|t3Helper
operator|.
name|insert
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|t4Helper
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|OnewayTable3
name|t3
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|OnewayTable3
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|t3
operator|.
name|getToManyOneWayDb
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|OnewayTable4
name|t41
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|OnewayTable4
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t3
operator|.
name|getToManyOneWayDb
argument_list|()
operator|.
name|contains
argument_list|(
name|t41
argument_list|)
argument_list|)
expr_stmt|;
name|OnewayTable4
name|t42
init|=
name|Cayenne
operator|.
name|objectForPK
argument_list|(
name|context
argument_list|,
name|OnewayTable4
operator|.
name|class
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t3
operator|.
name|getToManyOneWayDb
argument_list|()
operator|.
name|contains
argument_list|(
name|t42
argument_list|)
argument_list|)
expr_stmt|;
name|t3
operator|.
name|removeFromToManyOneWayDb
argument_list|(
name|t42
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|t3
operator|.
name|getToManyOneWayDb
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SQLSelect
argument_list|<
name|Integer
argument_list|>
name|fksQuery
init|=
name|SQLSelect
operator|.
name|scalarQuery
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"oneway-rels"
argument_list|,
literal|"SELECT TABLE3_ID FROM oneway_table4"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|fks
init|=
name|context
operator|.
name|select
argument_list|(
name|fksQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fks
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fks
operator|.
name|contains
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

