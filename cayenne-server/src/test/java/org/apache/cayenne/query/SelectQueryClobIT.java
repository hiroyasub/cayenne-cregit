begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Cayenne
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|lob
operator|.
name|ClobTestEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|UnitDbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|LOB_PROJECT
argument_list|)
specifier|public
class|class
name|SelectQueryClobIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|ObjectContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|UnitDbAdapter
name|accessStackAdapter
decl_stmt|;
specifier|private
name|void
name|createClobDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|tClobTest
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"CLOB_TEST"
argument_list|)
decl_stmt|;
name|tClobTest
operator|.
name|setColumns
argument_list|(
literal|"CLOB_TEST_ID"
argument_list|,
literal|"CLOB_COL"
argument_list|)
expr_stmt|;
name|tClobTest
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
name|tClobTest
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"clob1"
argument_list|)
expr_stmt|;
name|tClobTest
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"clob2"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test how "like ignore case" works when using uppercase parameter.      */
annotation|@
name|Test
specifier|public
name|void
name|testSelectLikeIgnoreCaseClob
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|accessStackAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|createClobDataSet
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ClobTestEntity
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|ClobTestEntity
operator|.
name|CLOB_COL
operator|.
name|likeIgnoreCase
argument_list|(
literal|"clob%"
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectFetchLimit_Offset_DistinctClob
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|accessStackAdapter
operator|.
name|supportsLobs
argument_list|()
condition|)
block|{
name|createClobDataSet
argument_list|()
expr_stmt|;
comment|// see CAY-1539... CLOB column causes suppression of DISTINCT in
comment|// SQL, and hence the offset processing is done in memory
name|List
argument_list|<
name|ClobTestEntity
argument_list|>
name|objects
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ClobTestEntity
operator|.
name|class
argument_list|)
operator|.
name|orderBy
argument_list|(
literal|"db:"
operator|+
name|ClobTestEntity
operator|.
name|CLOB_TEST_ID_PK_COLUMN
argument_list|,
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
operator|.
name|limit
argument_list|(
literal|1
argument_list|)
operator|.
name|offset
argument_list|(
literal|1
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Cayenne
operator|.
name|intPKForObject
argument_list|(
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectEqualsClob
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|accessStackAdapter
operator|.
name|supportsLobComparisons
argument_list|()
condition|)
block|{
name|createClobDataSet
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ClobTestEntity
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|ClobTestEntity
operator|.
name|CLOB_COL
operator|.
name|eq
argument_list|(
literal|"clob1"
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectNotEqualsClob
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|accessStackAdapter
operator|.
name|supportsLobComparisons
argument_list|()
condition|)
block|{
name|createClobDataSet
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|ClobTestEntity
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|ClobTestEntity
operator|.
name|CLOB_COL
operator|.
name|ne
argument_list|(
literal|"clob1"
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

