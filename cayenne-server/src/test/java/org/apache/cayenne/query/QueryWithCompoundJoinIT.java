begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|compound
operator|.
name|CompoundFkTestEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|compound
operator|.
name|CompoundPkTestEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Test join on compound primary key  * @see<a href="https://issues.apache.org/jira/browse/CAY-2137">CAY-2137</a>  * @since 4.0  */
end_comment

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|COMPOUND_PROJECT
argument_list|)
specifier|public
class|class
name|QueryWithCompoundJoinIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ServerRuntime
name|runtime
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
specifier|private
name|TableHelper
name|tCompoundPk
decl_stmt|;
specifier|private
name|TableHelper
name|tCompoundFk
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|tCompoundPk
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"COMPOUND_PK_TEST"
argument_list|)
expr_stmt|;
name|tCompoundPk
operator|.
name|setColumns
argument_list|(
literal|"KEY1"
argument_list|,
literal|"KEY2"
argument_list|,
literal|"NAME"
argument_list|)
expr_stmt|;
name|tCompoundFk
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"COMPOUND_FK_TEST"
argument_list|)
expr_stmt|;
name|tCompoundFk
operator|.
name|setColumns
argument_list|(
literal|"F_KEY1"
argument_list|,
literal|"F_KEY2"
argument_list|,
literal|"NAME"
argument_list|,
literal|"PKEY"
argument_list|)
expr_stmt|;
name|createDataSet
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|tCompoundPk
operator|.
name|insert
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|tCompoundPk
operator|.
name|insert
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"cde"
argument_list|)
expr_stmt|;
name|tCompoundFk
operator|.
name|insert
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"test"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tCompoundFk
operator|.
name|insert
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"nottest"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEJBQLCompoundJoin
parameter_list|()
throws|throws
name|Exception
block|{
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select f from CompoundFkTestEntity f inner join f.toCompoundPk p where p.name like 'a%'"
argument_list|)
decl_stmt|;
name|List
name|res
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|CompoundFkTestEntity
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
operator|(
operator|(
name|CompoundFkTestEntity
operator|)
name|res
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testObjectSelectCompoundJoin
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|CompoundFkTestEntity
argument_list|>
name|res
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|CompoundFkTestEntity
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|CompoundFkTestEntity
operator|.
name|TO_COMPOUND_PK
operator|.
name|dot
argument_list|(
name|CompoundPkTestEntity
operator|.
name|NAME
argument_list|)
operator|.
name|like
argument_list|(
literal|"a%"
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

