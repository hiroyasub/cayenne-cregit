begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|BaseProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|NumericProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|PropertyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|primitive
operator|.
name|PrimitivesTestEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|UnitDbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|PRIMITIVE_PROJECT
argument_list|)
specifier|public
class|class
name|ObjectSelect_PrimitiveColumnsIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|UnitDbAdapter
name|unitDbAdapter
decl_stmt|;
specifier|private
name|TableHelper
name|tPrimitives
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createTestRecords
parameter_list|()
throws|throws
name|Exception
block|{
name|tPrimitives
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"PRIMITIVES_TEST"
argument_list|)
expr_stmt|;
name|tPrimitives
operator|.
name|setColumns
argument_list|(
literal|"ID"
argument_list|,
literal|"BOOLEAN_COLUMN"
argument_list|,
literal|"INT_COLUMN"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|tPrimitives
operator|.
name|insert
argument_list|(
name|i
argument_list|,
operator|(
name|i
operator|%
literal|2
operator|==
literal|0
operator|)
argument_list|,
name|i
operator|*
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|test_SelectIntegerColumn
parameter_list|()
block|{
name|int
name|intColumn2
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|PrimitivesTestEntity
operator|.
name|class
argument_list|)
operator|.
name|column
argument_list|(
name|PrimitivesTestEntity
operator|.
name|INT_COLUMN
argument_list|)
operator|.
name|orderBy
argument_list|(
name|PrimitivesTestEntity
operator|.
name|INT_COLUMN
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|intColumn2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test_SelectIntegerList
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|intColumns
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|PrimitivesTestEntity
operator|.
name|class
argument_list|)
operator|.
name|column
argument_list|(
name|PrimitivesTestEntity
operator|.
name|INT_COLUMN
argument_list|)
operator|.
name|orderBy
argument_list|(
name|PrimitivesTestEntity
operator|.
name|INT_COLUMN
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|intColumns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
operator|(
name|int
operator|)
name|intColumns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test_SelectIntegerExpColumn
parameter_list|()
block|{
name|NumericProperty
argument_list|<
name|Integer
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createNumeric
argument_list|(
literal|"intColumn"
argument_list|,
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"(obj:intColumn + obj:intColumn)"
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|intColumn2
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|PrimitivesTestEntity
operator|.
name|class
argument_list|)
operator|.
name|column
argument_list|(
name|property
argument_list|)
operator|.
name|orderBy
argument_list|(
name|PrimitivesTestEntity
operator|.
name|INT_COLUMN
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|intColumn2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test_SelectBooleanColumn
parameter_list|()
block|{
name|boolean
name|boolColumn
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|PrimitivesTestEntity
operator|.
name|class
argument_list|)
operator|.
name|column
argument_list|(
name|PrimitivesTestEntity
operator|.
name|BOOLEAN_COLUMN
argument_list|)
operator|.
name|orderBy
argument_list|(
name|PrimitivesTestEntity
operator|.
name|INT_COLUMN
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|boolColumn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test_SelectBooleanList
parameter_list|()
block|{
name|List
argument_list|<
name|Boolean
argument_list|>
name|intColumns
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|PrimitivesTestEntity
operator|.
name|class
argument_list|)
operator|.
name|column
argument_list|(
name|PrimitivesTestEntity
operator|.
name|BOOLEAN_COLUMN
argument_list|)
operator|.
name|orderBy
argument_list|(
name|PrimitivesTestEntity
operator|.
name|INT_COLUMN
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|intColumns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|intColumns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test_SelectBooleanExpColumn
parameter_list|()
block|{
if|if
condition|(
operator|!
name|unitDbAdapter
operator|.
name|supportsSelectBooleanExpression
argument_list|()
condition|)
block|{
return|return;
block|}
name|BaseProperty
argument_list|<
name|Boolean
argument_list|>
name|property
init|=
name|PropertyFactory
operator|.
name|createBase
argument_list|(
literal|"boolColumn"
argument_list|,
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"(obj:intColumn< 10)"
argument_list|)
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|boolColumn
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|PrimitivesTestEntity
operator|.
name|class
argument_list|)
operator|.
name|column
argument_list|(
name|property
argument_list|)
operator|.
name|orderBy
argument_list|(
name|PrimitivesTestEntity
operator|.
name|INT_COLUMN
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|boolColumn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test_SelectColumnsList
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|columns
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|PrimitivesTestEntity
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|PrimitivesTestEntity
operator|.
name|INT_COLUMN
argument_list|,
name|PrimitivesTestEntity
operator|.
name|BOOLEAN_COLUMN
argument_list|)
operator|.
name|orderBy
argument_list|(
name|PrimitivesTestEntity
operator|.
name|INT_COLUMN
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
index|[]
name|result
init|=
block|{
literal|10
block|,
literal|false
block|}
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|result
argument_list|,
name|columns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test_SelectColumnsExpList
parameter_list|()
block|{
if|if
condition|(
operator|!
name|unitDbAdapter
operator|.
name|supportsSelectBooleanExpression
argument_list|()
condition|)
block|{
return|return;
block|}
name|NumericProperty
argument_list|<
name|Integer
argument_list|>
name|intProperty
init|=
name|PropertyFactory
operator|.
name|createNumeric
argument_list|(
literal|"intColumn"
argument_list|,
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"(obj:intColumn + 1)"
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|BaseProperty
argument_list|<
name|Boolean
argument_list|>
name|boolProperty
init|=
name|PropertyFactory
operator|.
name|createBase
argument_list|(
literal|"boolColumn"
argument_list|,
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"(obj:intColumn = 10)"
argument_list|)
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|columns
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|PrimitivesTestEntity
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|intProperty
argument_list|,
name|boolProperty
argument_list|)
operator|.
name|orderBy
argument_list|(
name|PrimitivesTestEntity
operator|.
name|INT_COLUMN
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
index|[]
name|result
init|=
block|{
literal|11
block|,
literal|true
block|}
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|result
argument_list|,
name|columns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSum
parameter_list|()
block|{
name|int
name|sum
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|PrimitivesTestEntity
operator|.
name|class
argument_list|)
operator|.
name|sum
argument_list|(
name|PrimitivesTestEntity
operator|.
name|INT_COLUMN
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2100
argument_list|,
name|sum
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAvg
parameter_list|()
block|{
name|int
name|avg
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|PrimitivesTestEntity
operator|.
name|class
argument_list|)
operator|.
name|avg
argument_list|(
name|PrimitivesTestEntity
operator|.
name|INT_COLUMN
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|105.0
argument_list|,
name|avg
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderByCount
parameter_list|()
throws|throws
name|Exception
block|{
name|tPrimitives
operator|.
name|insert
argument_list|(
literal|21
argument_list|,
literal|true
argument_list|,
literal|210
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|res
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|PrimitivesTestEntity
operator|.
name|class
argument_list|,
name|PrimitivesTestEntity
operator|.
name|BOOLEAN_COLUMN
argument_list|,
name|PrimitivesTestEntity
operator|.
name|INT_COLUMN
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|orderBy
argument_list|(
name|PrimitivesTestEntity
operator|.
name|INT_COLUMN
operator|.
name|count
argument_list|()
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|1
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11L
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|1
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

