begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistenceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultBatchIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|EntityProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|NumericProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|PropertyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|StringProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Gallery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|PaintingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|PostgresUnitDbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|UnitDbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|ColumnSelectIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ServerRuntime
name|runtime
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|UnitDbAdapter
name|unitDbAdapter
decl_stmt|;
comment|// Format: d/m/YY
specifier|private
specifier|static
specifier|final
name|DateFormat
name|dateFormat
init|=
name|DateFormat
operator|.
name|getDateInstance
argument_list|(
name|DateFormat
operator|.
name|SHORT
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
specifier|private
name|TableHelper
name|tArtist
decl_stmt|,
name|tPaintings
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createArtistsDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|tArtist
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"ARTIST"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|setColumns
argument_list|(
literal|"ARTIST_ID"
argument_list|,
literal|"ARTIST_NAME"
argument_list|,
literal|"DATE_OF_BIRTH"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|setColumnTypes
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|Types
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|java
operator|.
name|sql
operator|.
name|Date
index|[]
name|dates
init|=
operator|new
name|java
operator|.
name|sql
operator|.
name|Date
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|dates
index|[
name|i
operator|-
literal|1
index|]
operator|=
operator|new
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|(
name|dateFormat
operator|.
name|parse
argument_list|(
literal|"1/"
operator|+
name|i
operator|+
literal|"/17"
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|tArtist
operator|.
name|insert
argument_list|(
name|i
argument_list|,
literal|"artist"
operator|+
name|i
argument_list|,
name|dates
index|[
name|i
operator|%
literal|5
index|]
argument_list|)
expr_stmt|;
block|}
name|TableHelper
name|tGallery
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"GALLERY"
argument_list|)
decl_stmt|;
name|tGallery
operator|.
name|setColumns
argument_list|(
literal|"GALLERY_ID"
argument_list|,
literal|"GALLERY_NAME"
argument_list|)
expr_stmt|;
name|tGallery
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"tate modern"
argument_list|)
expr_stmt|;
name|tPaintings
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"PAINTING"
argument_list|)
expr_stmt|;
name|tPaintings
operator|.
name|setColumns
argument_list|(
literal|"PAINTING_ID"
argument_list|,
literal|"PAINTING_TITLE"
argument_list|,
literal|"ARTIST_ID"
argument_list|,
literal|"GALLERY_ID"
argument_list|,
literal|"ESTIMATED_PRICE"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|tPaintings
operator|.
name|insert
argument_list|(
name|i
argument_list|,
literal|"painting"
operator|+
name|i
argument_list|,
name|i
operator|%
literal|5
operator|+
literal|1
argument_list|,
literal|1
argument_list|,
literal|22
operator|-
name|i
argument_list|)
expr_stmt|;
block|}
name|tPaintings
operator|.
name|insert
argument_list|(
literal|21
argument_list|,
literal|"painting21"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectGroupBy
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
index|[]
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|,
name|PropertyFactory
operator|.
name|COUNT
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dateFormat
operator|.
name|parse
argument_list|(
literal|"1/1/17"
argument_list|)
argument_list|,
name|result
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|result
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectSimpleHaving
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
index|[]
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|,
name|PropertyFactory
operator|.
name|COUNT
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|having
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH
operator|.
name|eq
argument_list|(
name|dateFormat
operator|.
name|parse
argument_list|(
literal|"1/2/17"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dateFormat
operator|.
name|parse
argument_list|(
literal|"1/2/17"
argument_list|)
argument_list|,
name|result
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|result
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|Exception
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testHavingOnNonGroupByColumn
parameter_list|()
block|{
name|StringProperty
argument_list|<
name|String
argument_list|>
name|nameSubstr
init|=
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|Object
index|[]
name|q
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|nameSubstr
argument_list|,
name|PropertyFactory
operator|.
name|COUNT
argument_list|)
operator|.
name|having
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|like
argument_list|(
literal|"artist%"
argument_list|)
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"artist"
argument_list|,
name|q
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20L
argument_list|,
name|q
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectRelationshipCount
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
index|[]
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dateFormat
operator|.
name|parse
argument_list|(
literal|"1/1/17"
argument_list|)
argument_list|,
name|result
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|result
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectHavingWithExpressionAlias
parameter_list|()
block|{
name|Object
index|[]
name|q
init|=
literal|null
decl_stmt|;
try|try
block|{
name|q
operator|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
operator|.
name|alias
argument_list|(
literal|"name_substr"
argument_list|)
argument_list|,
name|PropertyFactory
operator|.
name|COUNT
argument_list|)
operator|.
name|having
argument_list|(
name|PropertyFactory
operator|.
name|COUNT
operator|.
name|gt
argument_list|(
literal|10L
argument_list|)
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsExpressionInHaving
argument_list|()
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
block|}
name|assertEquals
argument_list|(
literal|"artist"
argument_list|,
name|q
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20L
argument_list|,
name|q
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"Need to figure out a better way to handle alias / no alias case for expression in having"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testSelectHavingWithExpressionNoAlias
parameter_list|()
block|{
name|Object
index|[]
name|q
init|=
literal|null
decl_stmt|;
try|try
block|{
name|q
operator|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|,
name|PropertyFactory
operator|.
name|COUNT
argument_list|)
operator|.
name|having
argument_list|(
name|PropertyFactory
operator|.
name|COUNT
operator|.
name|gt
argument_list|(
literal|10L
argument_list|)
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsExpressionInHaving
argument_list|()
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
block|}
name|assertEquals
argument_list|(
literal|"artist"
argument_list|,
name|q
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20L
argument_list|,
name|q
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectWhereAndHaving
parameter_list|()
block|{
name|Object
index|[]
name|q
init|=
literal|null
decl_stmt|;
try|try
block|{
name|q
operator|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
operator|.
name|alias
argument_list|(
literal|"name_substr"
argument_list|)
argument_list|,
name|PropertyFactory
operator|.
name|COUNT
argument_list|)
operator|.
name|where
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|eq
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|having
argument_list|(
name|PropertyFactory
operator|.
name|COUNT
operator|.
name|gt
argument_list|(
literal|10L
argument_list|)
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsExpressionInHaving
argument_list|()
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
block|}
name|assertEquals
argument_list|(
literal|"artist"
argument_list|,
name|q
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20L
argument_list|,
name|q
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHavingWithoutAggregate
parameter_list|()
block|{
name|Object
name|date
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
argument_list|)
operator|.
name|having
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|like
argument_list|(
literal|"a%"
argument_list|)
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|date
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test will fail as ARTIST_NAME wouldn't be in GROUP BY,      * but potentially we can detect this case (e.g. add all fields in HAVING clause to GROUP BY).      * This just doesn't seem right as in this case WHERE a better choice.      *      * Current workaround for this is the method above, i.e. just adding field used      * in a HAVING qualifier into select.      */
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testHavingWithoutSelect
parameter_list|()
block|{
name|Object
name|date
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|)
operator|.
name|having
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|like
argument_list|(
literal|"a%"
argument_list|)
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|date
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test using field in HAVING clause without using it in SELECT      * i.e. something like this:      *      SELECT a.name FROM artist a JOIN painting p ON (..) HAVING COUNT(p.id)> 4      */
annotation|@
name|Test
specifier|public
name|void
name|testSelectRelationshipCountHavingWithoutFieldSelect
parameter_list|()
block|{
name|Object
index|[]
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|)
operator|.
name|having
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|count
argument_list|()
operator|.
name|gt
argument_list|(
literal|4L
argument_list|)
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsExpressionInHaving
argument_list|()
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
block|}
name|assertEquals
argument_list|(
literal|"artist2"
argument_list|,
name|result
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectRelationshipCountHaving
parameter_list|()
block|{
name|NumericProperty
argument_list|<
name|Long
argument_list|>
name|paintingCount
init|=
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|count
argument_list|()
decl_stmt|;
name|Object
index|[]
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|paintingCount
argument_list|)
operator|.
name|having
argument_list|(
name|paintingCount
operator|.
name|gt
argument_list|(
literal|4L
argument_list|)
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsExpressionInHaving
argument_list|()
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
block|}
name|assertEquals
argument_list|(
literal|"artist2"
argument_list|,
name|result
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|result
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectWithQuoting
parameter_list|()
block|{
if|if
condition|(
name|unitDbAdapter
operator|instanceof
name|PostgresUnitDbAdapter
condition|)
block|{
comment|// we need to convert somehow all names to lowercase on postgres, so skip it for now
return|return;
block|}
name|NumericProperty
argument_list|<
name|Long
argument_list|>
name|paintingCount
init|=
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|count
argument_list|()
decl_stmt|;
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDataMap
argument_list|(
literal|"testmap"
argument_list|)
operator|.
name|setQuotingSQLIdentifiers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
index|[]
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|,
name|paintingCount
argument_list|)
operator|.
name|having
argument_list|(
name|paintingCount
operator|.
name|gt
argument_list|(
literal|4L
argument_list|)
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|unitDbAdapter
operator|.
name|supportsExpressionInHaving
argument_list|()
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
block|}
finally|finally
block|{
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDataMap
argument_list|(
literal|"testmap"
argument_list|)
operator|.
name|setQuotingSQLIdentifiers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"artist2"
argument_list|,
name|result
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|result
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectGroupByWithQuoting
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|unitDbAdapter
operator|instanceof
name|PostgresUnitDbAdapter
condition|)
block|{
comment|// we need to convert somehow all names to lowercase on postgres, so skip it for now
return|return;
block|}
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDataMap
argument_list|(
literal|"testmap"
argument_list|)
operator|.
name|setQuotingSQLIdentifiers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|Object
index|[]
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|,
name|PropertyFactory
operator|.
name|COUNT
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dateFormat
operator|.
name|parse
argument_list|(
literal|"1/1/17"
argument_list|)
argument_list|,
name|result
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|result
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDataMap
argument_list|(
literal|"testmap"
argument_list|)
operator|.
name|setQuotingSQLIdentifiers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAgregateOnRelation
parameter_list|()
block|{
name|BigDecimal
name|min
init|=
operator|new
name|BigDecimal
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|BigDecimal
name|max
init|=
operator|new
name|BigDecimal
argument_list|(
literal|30
argument_list|)
decl_stmt|;
name|BigDecimal
name|avg
init|=
operator|new
name|BigDecimal
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|1290L
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|BigDecimal
name|sum
init|=
operator|new
name|BigDecimal
argument_list|(
literal|258
argument_list|)
decl_stmt|;
name|NumericProperty
argument_list|<
name|BigDecimal
argument_list|>
name|estimatedPrice
init|=
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|ESTIMATED_PRICE
argument_list|)
decl_stmt|;
name|Object
index|[]
name|minMaxAvgPrice
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|estimatedPrice
operator|.
name|gte
argument_list|(
name|min
argument_list|)
argument_list|)
operator|.
name|min
argument_list|(
name|estimatedPrice
argument_list|)
operator|.
name|max
argument_list|(
name|estimatedPrice
argument_list|)
operator|.
name|avg
argument_list|(
name|estimatedPrice
argument_list|)
operator|.
name|sum
argument_list|(
name|estimatedPrice
argument_list|)
operator|.
name|count
argument_list|()
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|min
operator|.
name|compareTo
argument_list|(
operator|(
name|BigDecimal
operator|)
name|minMaxAvgPrice
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|max
operator|.
name|compareTo
argument_list|(
operator|(
name|BigDecimal
operator|)
name|minMaxAvgPrice
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|avg
operator|.
name|compareTo
argument_list|(
operator|(
name|BigDecimal
operator|)
name|minMaxAvgPrice
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|sum
operator|.
name|compareTo
argument_list|(
operator|(
name|BigDecimal
operator|)
name|minMaxAvgPrice
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20L
argument_list|,
name|minMaxAvgPrice
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryCount
parameter_list|()
block|{
name|long
name|count
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|PropertyFactory
operator|.
name|COUNT
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|long
name|count2
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|count
argument_list|()
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|count2
argument_list|)
expr_stmt|;
name|long
name|count3
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|count3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueryCountWithProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|tArtist
operator|.
name|insert
argument_list|(
literal|21
argument_list|,
literal|"artist_21"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|22
argument_list|,
literal|"artist_21"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|long
name|count
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|PropertyFactory
operator|.
name|COUNT
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|22
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// COUNT(attribute) should return count of non null values of attribute
name|long
name|count2
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|DATE_OF_BIRTH
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|count2
argument_list|)
expr_stmt|;
name|long
name|count3
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|count
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|count2
argument_list|,
name|count3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectFirst_MultiColumns
parameter_list|()
block|{
name|Object
index|[]
name|a
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|)
operator|.
name|columns
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|)
operator|.
name|columns
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|alias
argument_list|(
literal|"newName"
argument_list|)
argument_list|)
operator|.
name|where
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|like
argument_list|(
literal|"artist%"
argument_list|)
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Artist
operator|.
name|ARTIST_ID_PK_PROPERTY
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist1"
argument_list|,
name|a
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist1"
argument_list|,
name|a
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectFirst_SingleValueInColumns
parameter_list|()
block|{
name|Object
index|[]
name|a
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|)
operator|.
name|where
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|like
argument_list|(
literal|"artist%"
argument_list|)
argument_list|)
operator|.
name|orderBy
argument_list|(
name|Artist
operator|.
name|ARTIST_ID_PK_PROPERTY
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist1"
argument_list|,
name|a
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectFirst_SubstringName
parameter_list|()
block|{
name|StringProperty
argument_list|<
name|String
argument_list|>
name|substrName
init|=
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|substring
argument_list|(
literal|5
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Object
index|[]
name|a
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|substrName
argument_list|)
operator|.
name|where
argument_list|(
name|substrName
operator|.
name|eq
argument_list|(
literal|"st3"
argument_list|)
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist3"
argument_list|,
name|a
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"st3"
argument_list|,
name|a
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectFirst_RelColumns
parameter_list|()
block|{
comment|// set shorter than painting_array.paintingTitle alias as some DBs doesn't support dot in alias
name|StringProperty
argument_list|<
name|String
argument_list|>
name|paintingTitle
init|=
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
operator|.
name|alias
argument_list|(
literal|"paintingTitle"
argument_list|)
decl_stmt|;
name|Object
index|[]
name|a
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|paintingTitle
argument_list|)
operator|.
name|orderBy
argument_list|(
name|paintingTitle
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"painting1"
argument_list|,
name|a
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectFirst_RelColumn
parameter_list|()
block|{
comment|// set shorter than painting_array.paintingTitle alias as some DBs doesn't support dot in alias
name|StringProperty
argument_list|<
name|String
argument_list|>
name|paintingTitle
init|=
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
operator|.
name|alias
argument_list|(
literal|"paintingTitle"
argument_list|)
decl_stmt|;
name|String
name|a
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|column
argument_list|(
name|paintingTitle
argument_list|)
operator|.
name|orderBy
argument_list|(
name|paintingTitle
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"painting1"
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectFirst_RelColumnWithFunction
parameter_list|()
block|{
name|StringProperty
argument_list|<
name|String
argument_list|>
name|altTitle
init|=
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
operator|.
name|substring
argument_list|(
literal|7
argument_list|,
literal|3
argument_list|)
operator|.
name|concat
argument_list|(
literal|" "
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
argument_list|)
operator|.
name|alias
argument_list|(
literal|"altTitle"
argument_list|)
decl_stmt|;
name|String
name|a
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|column
argument_list|(
name|altTitle
argument_list|)
operator|.
name|where
argument_list|(
name|altTitle
operator|.
name|like
argument_list|(
literal|"ng1%"
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|like
argument_list|(
literal|"%ist1"
argument_list|)
argument_list|)
comment|//				.orderBy(altTitle.asc()) // unsupported for now
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ng1 artist1"
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAliasOrder
parameter_list|()
block|{
comment|// test that all table aliases are correct
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|outer
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
argument_list|,
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|TO_GALLERY
argument_list|)
operator|.
name|dot
argument_list|(
name|Gallery
operator|.
name|GALLERY_NAME
argument_list|)
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|21
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|next
range|:
name|result
control|)
block|{
name|long
name|count
init|=
operator|(
name|Long
operator|)
name|next
index|[
literal|0
index|]
decl_stmt|;
name|Artist
name|artist
init|=
operator|(
name|Artist
operator|)
name|next
index|[
literal|1
index|]
decl_stmt|;
name|String
name|paintingTitle
init|=
operator|(
name|String
operator|)
name|next
index|[
literal|2
index|]
decl_stmt|;
name|Artist
name|artist2
init|=
operator|(
name|Artist
operator|)
name|next
index|[
literal|3
index|]
decl_stmt|;
name|String
name|galleryName
init|=
operator|(
name|String
operator|)
name|next
index|[
literal|4
index|]
decl_stmt|;
name|String
name|artistName
init|=
operator|(
name|String
operator|)
name|next
index|[
literal|5
index|]
decl_stmt|;
name|Artist
name|artist3
init|=
operator|(
name|Artist
operator|)
name|next
index|[
literal|6
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|paintingTitle
operator|.
name|startsWith
argument_list|(
literal|"painting"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tate modern"
argument_list|,
name|galleryName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|artist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|artist2
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|artist3
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artistName
argument_list|,
name|artist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|==
literal|4L
operator|||
name|count
operator|==
literal|5L
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      *  Test iterated select      */
annotation|@
name|Test
specifier|public
name|void
name|testIterationSingleColumn
parameter_list|()
block|{
name|ColumnSelect
argument_list|<
name|String
argument_list|>
name|columnSelect
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|column
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|count
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
name|columnSelect
operator|.
name|iterate
argument_list|(
name|context
argument_list|,
name|object
lambda|->
block|{
name|count
index|[
literal|0
index|]
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
name|object
operator|.
name|startsWith
argument_list|(
literal|"artist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|count
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBatchIterationSingleColumn
parameter_list|()
block|{
name|ColumnSelect
argument_list|<
name|String
argument_list|>
name|columnSelect
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|column
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|)
decl_stmt|;
try|try
init|(
name|ResultBatchIterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|columnSelect
operator|.
name|batchIterator
argument_list|(
name|context
argument_list|,
literal|10
argument_list|)
init|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|next
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|next
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|next
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"artist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIterationMultiColumns
parameter_list|()
block|{
name|ColumnSelect
argument_list|<
name|Object
index|[]
argument_list|>
name|columnSelect
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|count
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
name|columnSelect
operator|.
name|iterate
argument_list|(
name|context
argument_list|,
name|object
lambda|->
block|{
name|count
index|[
literal|0
index|]
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
name|object
index|[
literal|0
index|]
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|object
index|[
literal|1
index|]
operator|instanceof
name|Date
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|count
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBatchIterationMultiColumns
parameter_list|()
block|{
name|ColumnSelect
argument_list|<
name|Object
index|[]
argument_list|>
name|columnSelect
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|)
decl_stmt|;
try|try
init|(
name|ResultBatchIterator
argument_list|<
name|Object
index|[]
argument_list|>
name|it
init|=
name|columnSelect
operator|.
name|batchIterator
argument_list|(
name|context
argument_list|,
literal|10
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|next
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|next
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|next
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|0
index|]
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|next
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|1
index|]
operator|instanceof
name|java
operator|.
name|util
operator|.
name|Date
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      *  Test select with page size      */
annotation|@
name|Test
specifier|public
name|void
name|testPageSizeOneScalar
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|a
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|column
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|pageSize
argument_list|(
literal|10
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|a
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|next
range|:
name|a
control|)
block|{
name|assertNotNull
argument_list|(
literal|""
operator|+
name|idx
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPageSizeOneScalarAsArray
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|a
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|pageSize
argument_list|(
literal|10
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|a
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|next
range|:
name|a
control|)
block|{
name|assertNotNull
argument_list|(
literal|""
operator|+
name|idx
argument_list|,
name|next
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|next
index|[
literal|0
index|]
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPageSizeScalars
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|a
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|trim
argument_list|()
argument_list|,
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|pageSize
argument_list|(
literal|10
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|a
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|next
range|:
name|a
control|)
block|{
name|assertNotNull
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|""
operator|+
name|idx
argument_list|,
name|next
index|[
literal|0
index|]
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|""
operator|+
name|idx
argument_list|,
name|next
index|[
literal|1
index|]
operator|instanceof
name|java
operator|.
name|util
operator|.
name|Date
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|""
operator|+
name|idx
argument_list|,
name|next
index|[
literal|2
index|]
operator|instanceof
name|Long
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPageSizeOneObject
parameter_list|()
block|{
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|artistFull
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|a
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|column
argument_list|(
name|artistFull
argument_list|)
operator|.
name|pageSize
argument_list|(
literal|10
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|a
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Artist
name|next
range|:
name|a
control|)
block|{
name|assertNotNull
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPageSizeOneObjectAsArray
parameter_list|()
block|{
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|artistFull
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|a
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|artistFull
argument_list|)
operator|.
name|pageSize
argument_list|(
literal|10
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|a
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|next
range|:
name|a
control|)
block|{
name|assertNotNull
argument_list|(
name|next
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|next
index|[
literal|0
index|]
operator|instanceof
name|Artist
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPageSizeObjectAndScalars
parameter_list|()
block|{
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|artistFull
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|a
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|artistFull
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|pageSize
argument_list|(
literal|10
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|a
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|next
range|:
name|a
control|)
block|{
name|assertNotNull
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|idx
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|next
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|idx
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
name|next
index|[
literal|1
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|idx
argument_list|,
name|Long
operator|.
name|class
argument_list|,
name|next
index|[
literal|2
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPageSizeObjects
parameter_list|()
block|{
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|artistFull
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|a
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|artistFull
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|flat
argument_list|()
argument_list|)
operator|.
name|pageSize
argument_list|(
literal|10
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|21
argument_list|,
name|a
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|next
range|:
name|a
control|)
block|{
name|assertNotNull
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|idx
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|next
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|idx
argument_list|,
name|Artist
operator|.
name|class
argument_list|,
name|next
index|[
literal|1
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
index|[
literal|2
index|]
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|""
operator|+
name|idx
argument_list|,
name|Painting
operator|.
name|class
argument_list|,
name|next
index|[
literal|2
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
block|}
comment|/*      *  Test prefetch      */
annotation|@
name|Test
specifier|public
name|void
name|testObjectColumnWithJointPrefetch
parameter_list|()
block|{
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|artistFull
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|artistFull
argument_list|,
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|joint
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|checkPrefetchResults
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testObjectColumnWithDisjointPrefetch
parameter_list|()
block|{
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|artistFull
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|artistFull
argument_list|,
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|disjoint
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|checkPrefetchResults
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testObjectColumnWithDisjointByIdPrefetch
parameter_list|()
block|{
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|artistFull
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|artistFull
argument_list|,
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|disjointById
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|checkPrefetchResults
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkPrefetchResults
parameter_list|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|21
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|next
range|:
name|result
control|)
block|{
name|assertThat
argument_list|(
name|next
index|[
literal|0
index|]
argument_list|,
name|instanceOf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|next
index|[
literal|1
index|]
argument_list|,
name|instanceOf
argument_list|(
name|java
operator|.
name|util
operator|.
name|Date
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|next
index|[
literal|2
index|]
argument_list|,
name|instanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|artist
init|=
operator|(
name|Artist
operator|)
name|next
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|artist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|paintingsArr
init|=
name|artist
operator|.
name|readPropertyDirectly
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|paintingsArr
operator|instanceof
name|Fault
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|List
operator|)
name|paintingsArr
operator|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggregateColumnWithJointPrefetch
parameter_list|()
block|{
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|artistFull
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|artistFull
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|joint
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|checkAggregatePrefetchResults
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggregateColumnWithDisjointPrefetch
parameter_list|()
block|{
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|artistFull
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|artistFull
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|disjoint
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|checkAggregatePrefetchResults
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggregateColumnWithDisjointByIdPrefetch
parameter_list|()
block|{
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|artistFull
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|artistFull
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|disjointById
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|checkAggregatePrefetchResults
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkAggregatePrefetchResults
parameter_list|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|next
range|:
name|result
control|)
block|{
name|assertTrue
argument_list|(
name|next
index|[
literal|0
index|]
operator|instanceof
name|Artist
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|next
index|[
literal|1
index|]
operator|instanceof
name|Long
argument_list|)
expr_stmt|;
name|Artist
name|artist
init|=
operator|(
name|Artist
operator|)
name|next
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|artist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|paintingsArr
init|=
name|artist
operator|.
name|readPropertyDirectly
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|paintingsArr
operator|instanceof
name|Fault
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|List
operator|)
name|paintingsArr
operator|)
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|long
operator|)
name|next
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testObjectSelectWithJointPrefetch
parameter_list|()
block|{
name|List
argument_list|<
name|Artist
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|column
argument_list|(
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|joint
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Artist
name|artist
range|:
name|result
control|)
block|{
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|artist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|paintingsArr
init|=
name|artist
operator|.
name|readPropertyDirectly
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|paintingsArr
operator|instanceof
name|Fault
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testObjectWithDisjointPrefetch
parameter_list|()
block|{
name|List
argument_list|<
name|Artist
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|column
argument_list|(
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|disjoint
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Artist
name|artist
range|:
name|result
control|)
block|{
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|artist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|paintingsArr
init|=
name|artist
operator|.
name|readPropertyDirectly
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|paintingsArr
operator|instanceof
name|Fault
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testObjectWithDisjointByIdPrefetch
parameter_list|()
block|{
name|List
argument_list|<
name|Artist
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|column
argument_list|(
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|disjointById
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Artist
name|artist
range|:
name|result
control|)
block|{
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
name|artist
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|paintingsArr
init|=
name|artist
operator|.
name|readPropertyDirectly
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|paintingsArr
operator|instanceof
name|Fault
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      *  Test Persistent object select      */
annotation|@
name|Test
specifier|public
name|void
name|testObjectColumn
parameter_list|()
block|{
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|artistProperty
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|artistProperty
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|count
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|next
range|:
name|result
control|)
block|{
name|assertTrue
argument_list|(
name|next
index|[
literal|0
index|]
operator|instanceof
name|Artist
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|next
index|[
literal|1
index|]
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|next
index|[
literal|2
index|]
operator|instanceof
name|Long
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
operator|(
operator|(
name|Artist
operator|)
name|next
index|[
literal|0
index|]
operator|)
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testObjectColumnToOne
parameter_list|()
block|{
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|artistFull
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Painting
operator|.
name|TO_ARTIST
operator|.
name|getExpression
argument_list|()
argument_list|,
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|EntityProperty
argument_list|<
name|Gallery
argument_list|>
name|galleryFull
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Painting
operator|.
name|TO_GALLERY
operator|.
name|getExpression
argument_list|()
argument_list|,
name|Gallery
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|,
name|artistFull
argument_list|,
name|galleryFull
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|21
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|next
range|:
name|result
control|)
block|{
name|assertTrue
argument_list|(
name|next
index|[
literal|0
index|]
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|next
index|[
literal|1
index|]
operator|instanceof
name|Artist
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|next
index|[
literal|2
index|]
operator|instanceof
name|Gallery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
operator|(
operator|(
name|Artist
operator|)
name|next
index|[
literal|1
index|]
operator|)
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testObjectColumnToOneAsObjPath
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|,
name|Painting
operator|.
name|TO_ARTIST
argument_list|,
name|Painting
operator|.
name|TO_GALLERY
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|21
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|next
range|:
name|result
control|)
block|{
name|assertTrue
argument_list|(
name|next
index|[
literal|0
index|]
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|next
index|[
literal|1
index|]
operator|instanceof
name|Artist
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|next
index|[
literal|2
index|]
operator|instanceof
name|Gallery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
operator|(
operator|(
name|Artist
operator|)
name|next
index|[
literal|1
index|]
operator|)
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testObjectColumnToMany
parameter_list|()
block|{
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|artistProperty
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|columns
argument_list|(
name|artistProperty
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|flat
argument_list|()
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|TO_GALLERY
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|21
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|next
range|:
name|result
control|)
block|{
name|assertTrue
argument_list|(
name|next
index|[
literal|0
index|]
operator|instanceof
name|Artist
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
operator|(
operator|(
name|Artist
operator|)
name|next
index|[
literal|0
index|]
operator|)
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
index|[
literal|1
index|]
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|next
index|[
literal|1
index|]
operator|instanceof
name|Painting
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
operator|(
operator|(
name|Painting
operator|)
operator|(
name|next
index|[
literal|1
index|]
operator|)
operator|)
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|next
index|[
literal|2
index|]
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|next
index|[
literal|2
index|]
operator|instanceof
name|Gallery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|,
operator|(
operator|(
name|Gallery
operator|)
operator|(
name|next
index|[
literal|2
index|]
operator|)
operator|)
operator|.
name|getPersistenceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CayenneRuntimeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDirectRelationshipSelect
parameter_list|()
block|{
comment|// We should fail here as actual result will be just distinct paintings' ids.
name|List
argument_list|<
name|List
argument_list|<
name|Painting
argument_list|>
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|column
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|21
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelfPropertyInOrderBy
parameter_list|()
block|{
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|artistProperty
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|artists
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|column
argument_list|(
name|artistProperty
argument_list|)
operator|.
name|orderBy
argument_list|(
name|artistProperty
operator|.
name|desc
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|artists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist20"
argument_list|,
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist1"
argument_list|,
name|artists
operator|.
name|get
argument_list|(
literal|19
argument_list|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelfPropertyInWhere
parameter_list|()
block|{
name|Artist
name|artist
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|artistProperty
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Artist
name|selectedArtist
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|column
argument_list|(
name|artistProperty
argument_list|)
operator|.
name|where
argument_list|(
name|artistProperty
operator|.
name|eq
argument_list|(
name|artist
argument_list|)
argument_list|)
operator|.
name|orderBy
argument_list|(
name|artistProperty
operator|.
name|asc
argument_list|()
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|selectedArtist
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artist
operator|.
name|getArtistName
argument_list|()
argument_list|,
name|selectedArtist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testObjPropertyInWhere
parameter_list|()
block|{
name|Artist
name|artist
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|eq
argument_list|(
literal|"artist1"
argument_list|)
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|EntityProperty
argument_list|<
name|Painting
argument_list|>
name|paintingProperty
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
operator|.
name|column
argument_list|(
name|paintingProperty
argument_list|)
operator|.
name|where
argument_list|(
name|Painting
operator|.
name|TO_ARTIST
operator|.
name|eq
argument_list|(
name|artist
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test distinct() / suppressDistinct() methods      */
annotation|@
name|Test
specifier|public
name|void
name|testExplicitDistinct
parameter_list|()
throws|throws
name|Exception
block|{
name|tArtist
operator|.
name|insert
argument_list|(
literal|21
argument_list|,
literal|"artist1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|21
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|result2
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
argument_list|)
operator|.
name|suppressDistinct
argument_list|()
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
argument_list|,
name|result2
argument_list|)
expr_stmt|;
name|result
operator|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
argument_list|)
operator|.
name|distinct
argument_list|()
operator|.
name|select
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuppressDistinct
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create non unique artist name / painting name pair
name|tArtist
operator|.
name|insert
argument_list|(
literal|21
argument_list|,
literal|"artist1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tPaintings
operator|.
name|insert
argument_list|(
literal|22
argument_list|,
literal|"painting10"
argument_list|,
literal|21
argument_list|,
literal|1
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|21
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result2
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
argument_list|)
operator|.
name|distinct
argument_list|()
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertArrayEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|result2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
argument_list|)
operator|.
name|suppressDistinct
argument_list|()
operator|.
name|select
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|22
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test selection from nested context      */
annotation|@
name|Test
specifier|public
name|void
name|testNestedContextScalarResult
parameter_list|()
block|{
name|ObjectContext
name|childContext
init|=
name|runtime
operator|.
name|newContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
argument_list|)
operator|.
name|select
argument_list|(
name|childContext
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|assertNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedContextObjectResult
parameter_list|()
block|{
name|ObjectContext
name|childContext
init|=
name|runtime
operator|.
name|newContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|artistProperty
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|artists
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|artistProperty
argument_list|)
operator|.
name|select
argument_list|(
name|childContext
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|artists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Artist
name|artist
range|:
name|artists
control|)
block|{
name|assertNotNull
argument_list|(
name|artist
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedContextScalarArrayResult
parameter_list|()
block|{
name|ObjectContext
name|childContext
init|=
name|runtime
operator|.
name|newContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|data
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|Artist
operator|.
name|DATE_OF_BIRTH
argument_list|)
operator|.
name|select
argument_list|(
name|childContext
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|next
range|:
name|data
control|)
block|{
name|assertTrue
argument_list|(
name|next
index|[
literal|0
index|]
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|next
index|[
literal|1
index|]
operator|instanceof
name|Date
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedContextMixedResult
parameter_list|()
block|{
name|ObjectContext
name|childContext
init|=
name|runtime
operator|.
name|newContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|EntityProperty
argument_list|<
name|Artist
argument_list|>
name|artistProperty
init|=
name|PropertyFactory
operator|.
name|createSelf
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|data
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|ARTIST_NAME
argument_list|,
name|artistProperty
argument_list|)
operator|.
name|select
argument_list|(
name|childContext
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|next
range|:
name|data
control|)
block|{
name|assertTrue
argument_list|(
name|next
index|[
literal|0
index|]
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|next
index|[
literal|1
index|]
operator|instanceof
name|Artist
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testByteArraySelect
parameter_list|()
throws|throws
name|SQLException
block|{
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"PAINTING_INFO"
argument_list|)
operator|.
name|setColumns
argument_list|(
literal|"IMAGE_BLOB"
argument_list|,
literal|"PAINTING_ID"
argument_list|)
operator|.
name|setColumnTypes
argument_list|(
name|Types
operator|.
name|LONGVARBINARY
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
operator|.
name|insert
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|2
block|,
operator|(
name|byte
operator|)
literal|3
block|,
operator|(
name|byte
operator|)
literal|4
block|,
operator|(
name|byte
operator|)
literal|5
block|}
argument_list|,
literal|1
argument_list|)
operator|.
name|insert
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|5
block|,
operator|(
name|byte
operator|)
literal|4
block|,
operator|(
name|byte
operator|)
literal|3
block|,
operator|(
name|byte
operator|)
literal|2
block|}
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|blobs
init|=
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|PaintingInfo
operator|.
name|class
argument_list|,
name|PaintingInfo
operator|.
name|IMAGE_BLOB
argument_list|)
operator|.
name|orderBy
argument_list|(
literal|"db:"
operator|+
name|PaintingInfo
operator|.
name|PAINTING_ID_PK_COLUMN
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|blobs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|2
block|,
operator|(
name|byte
operator|)
literal|3
block|,
operator|(
name|byte
operator|)
literal|4
block|,
operator|(
name|byte
operator|)
literal|5
block|}
argument_list|,
name|blobs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|5
block|,
operator|(
name|byte
operator|)
literal|4
block|,
operator|(
name|byte
operator|)
literal|3
block|,
operator|(
name|byte
operator|)
literal|2
block|}
argument_list|,
name|blobs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCollectionProperty
parameter_list|()
block|{
name|Painting
name|painting
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Artist
name|artist
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|where
argument_list|(
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|contains
argument_list|(
name|painting
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|Artist
operator|.
name|DATE_OF_BIRTH
operator|.
name|year
argument_list|()
operator|.
name|gt
argument_list|(
literal|1950
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|like
argument_list|(
literal|"artist%"
argument_list|)
argument_list|)
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|artist
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|artist
operator|.
name|getArtistName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"artist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

