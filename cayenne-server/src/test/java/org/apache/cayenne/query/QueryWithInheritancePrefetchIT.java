begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inheritance_with_enum
operator|.
name|Dependent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inheritance_with_enum
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inheritance_with_enum
operator|.
name|Sub
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|inheritance_with_enum
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|DataChannelInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  *  * This one is about https://issues.apache.org/jira/browse/CAY-2405  *  * @since 4.1  */
end_comment

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|INHERITANCE_WITH_ENUM_PROJECT
argument_list|)
specifier|public
class|class
name|QueryWithInheritancePrefetchIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|ServerRuntime
name|runtime
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DataChannelInterceptor
name|queryInterceptor
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createTestData
parameter_list|()
throws|throws
name|Exception
block|{
name|TableHelper
name|tRoot
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"iwe_root"
argument_list|)
decl_stmt|;
name|tRoot
operator|.
name|setColumns
argument_list|(
literal|"id"
argument_list|,
literal|"type"
argument_list|,
literal|"name"
argument_list|,
literal|"enum"
argument_list|)
expr_stmt|;
name|tRoot
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|"root1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tRoot
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"enum1"
argument_list|,
name|Type
operator|.
name|type1
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|tRoot
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|"enum2"
argument_list|,
name|Type
operator|.
name|type2
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|TableHelper
name|tDependent
init|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"iwe_dependent"
argument_list|)
decl_stmt|;
name|tDependent
operator|.
name|setColumns
argument_list|(
literal|"id"
argument_list|,
literal|"root_id"
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|tDependent
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|tDependent
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|tDependent
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|"test3"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Validate that direct select of objects works      */
annotation|@
name|Test
specifier|public
name|void
name|directQuery
parameter_list|()
block|{
name|List
argument_list|<
name|Root
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Root
operator|.
name|class
argument_list|)
operator|.
name|orderBy
argument_list|(
literal|"db:"
operator|+
name|Root
operator|.
name|ID_PK_COLUMN
argument_list|)
operator|.
name|select
argument_list|(
name|runtime
operator|.
name|newContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Sub
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|Sub
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|instanceof
name|Sub
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|type1
argument_list|,
operator|(
operator|(
name|Sub
operator|)
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getEnum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|type2
argument_list|,
operator|(
operator|(
name|Sub
operator|)
name|result
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|getEnum
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryWithJointPrefetch
parameter_list|()
block|{
name|List
argument_list|<
name|Dependent
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Dependent
operator|.
name|class
argument_list|)
operator|.
name|orderBy
argument_list|(
literal|"db:"
operator|+
name|Dependent
operator|.
name|ID_PK_COLUMN
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Dependent
operator|.
name|ROOT
operator|.
name|joint
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|runtime
operator|.
name|newContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertPrefetchResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryWithDisjointPrefetch
parameter_list|()
block|{
name|List
argument_list|<
name|Dependent
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Dependent
operator|.
name|class
argument_list|)
operator|.
name|orderBy
argument_list|(
literal|"db:"
operator|+
name|Dependent
operator|.
name|ID_PK_COLUMN
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Dependent
operator|.
name|ROOT
operator|.
name|disjoint
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|runtime
operator|.
name|newContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertPrefetchResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryWithDisjointByIdPrefetch
parameter_list|()
block|{
name|List
argument_list|<
name|Dependent
argument_list|>
name|result
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Dependent
operator|.
name|class
argument_list|)
operator|.
name|orderBy
argument_list|(
literal|"db:"
operator|+
name|Dependent
operator|.
name|ID_PK_COLUMN
argument_list|)
operator|.
name|prefetch
argument_list|(
name|Dependent
operator|.
name|ROOT
operator|.
name|disjointById
argument_list|()
argument_list|)
operator|.
name|select
argument_list|(
name|runtime
operator|.
name|newContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertPrefetchResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertPrefetchResult
parameter_list|(
specifier|final
name|List
argument_list|<
name|Dependent
argument_list|>
name|result
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|queryInterceptor
operator|.
name|runWithQueriesBlocked
argument_list|(
parameter_list|()
lambda|->
block|{
name|assertNotNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRoot
argument_list|()
operator|instanceof
name|Sub
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getRoot
argument_list|()
operator|instanceof
name|Sub
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getRoot
argument_list|()
operator|instanceof
name|Sub
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|type1
argument_list|,
operator|(
operator|(
name|Sub
operator|)
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getRoot
argument_list|()
operator|)
operator|.
name|getEnum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|type2
argument_list|,
operator|(
operator|(
name|Sub
operator|)
name|result
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getRoot
argument_list|()
operator|)
operator|.
name|getEnum
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

