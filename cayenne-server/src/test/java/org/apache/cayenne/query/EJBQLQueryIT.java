begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|EmptyConfigurationNodeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLCompiledExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EJBQLQueryDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|LifecycleEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|LifecycleCallbackRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|DataChannelInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|UnitTestClosure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|EJBQLQueryIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ServerRuntime
name|runtime
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|DataChannelInterceptor
name|queryInterceptor
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
specifier|private
name|TableHelper
name|tArtist
decl_stmt|;
specifier|private
name|TableHelper
name|tPainting
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|tArtist
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"ARTIST"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|setColumns
argument_list|(
literal|"ARTIST_ID"
argument_list|,
literal|"ARTIST_NAME"
argument_list|)
expr_stmt|;
name|tPainting
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"PAINTING"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|setColumns
argument_list|(
literal|"PAINTING_ID"
argument_list|,
literal|"ARTIST_ID"
argument_list|,
literal|"PAINTING_TITLE"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createArtistsDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|tArtist
operator|.
name|insert
argument_list|(
literal|33001
argument_list|,
literal|"a0"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|33002
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|33003
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|33004
argument_list|,
literal|"a3"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|33005
argument_list|,
literal|"a4"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createPaintingsDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|tArtist
operator|.
name|insert
argument_list|(
literal|33001
argument_list|,
literal|"a0"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|33002
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|33001
argument_list|,
literal|33001
argument_list|,
literal|"title0"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|33002
argument_list|,
literal|33002
argument_list|,
literal|"title1"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|33003
argument_list|,
literal|33002
argument_list|,
literal|"%%?_title%%_"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParameters
parameter_list|()
block|{
name|String
name|ejbql
init|=
literal|"select a FROM Artist a WHERE a.artistName = ?1 OR a.artistName = :name"
decl_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
name|ejbql
argument_list|)
decl_stmt|;
name|query
operator|.
name|setParameter
argument_list|(
literal|1
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setParameter
argument_list|(
literal|"name"
argument_list|,
literal|"Y"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
name|query
operator|.
name|getNamedParameters
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Object
argument_list|>
name|parameters1
init|=
name|query
operator|.
name|getPositionalParameters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parameters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parameters1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"X"
argument_list|,
name|parameters1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Y"
argument_list|,
name|parameters
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCacheParameters
parameter_list|()
block|{
name|String
name|ejbql1
init|=
literal|"select a FROM Artist a WHERE a.artistName = ?1 OR a.artistName = :name"
decl_stmt|;
name|EJBQLQuery
name|q1
init|=
operator|new
name|EJBQLQuery
argument_list|(
name|ejbql1
argument_list|)
decl_stmt|;
name|q1
operator|.
name|setParameter
argument_list|(
literal|1
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
name|q1
operator|.
name|setParameter
argument_list|(
literal|"name"
argument_list|,
literal|"Y"
argument_list|)
expr_stmt|;
name|q1
operator|.
name|setFetchOffset
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|q1
operator|.
name|setFetchLimit
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|q1
operator|.
name|setCacheStrategy
argument_list|(
name|QueryCacheStrategy
operator|.
name|LOCAL_CACHE
argument_list|)
expr_stmt|;
name|String
name|ejbql2
init|=
literal|"select a FROM Artist a WHERE a.artistName = ?1 OR a.artistName = :name"
decl_stmt|;
name|EJBQLQuery
name|q2
init|=
operator|new
name|EJBQLQuery
argument_list|(
name|ejbql2
argument_list|)
decl_stmt|;
name|q2
operator|.
name|setParameter
argument_list|(
literal|1
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
name|q2
operator|.
name|setParameter
argument_list|(
literal|"name"
argument_list|,
literal|"Y"
argument_list|)
expr_stmt|;
name|q2
operator|.
name|setFetchOffset
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|q2
operator|.
name|setFetchLimit
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|q2
operator|.
name|setCacheStrategy
argument_list|(
name|QueryCacheStrategy
operator|.
name|LOCAL_CACHE
argument_list|)
expr_stmt|;
name|EntityResolver
name|resolver
init|=
name|runtime
operator|.
name|getDataDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|q1
operator|.
name|getMetaData
argument_list|(
name|resolver
argument_list|)
operator|.
name|getCacheKey
argument_list|()
argument_list|,
name|q2
operator|.
name|getMetaData
argument_list|(
name|resolver
argument_list|)
operator|.
name|getCacheKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCacheStrategy
parameter_list|()
throws|throws
name|Exception
block|{
comment|// insertValue();
name|createArtistsDataSet
argument_list|()
expr_stmt|;
specifier|final
name|String
name|ejbql
init|=
literal|"select a FROM Artist a"
decl_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
name|ejbql
argument_list|)
decl_stmt|;
name|query
operator|.
name|setCacheStrategy
argument_list|(
name|QueryCacheStrategy
operator|.
name|LOCAL_CACHE
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Artist
argument_list|>
name|artist1
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|queryInterceptor
operator|.
name|runWithQueriesBlocked
argument_list|(
operator|new
name|UnitTestClosure
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|List
argument_list|<
name|Artist
argument_list|>
name|artist2
decl_stmt|;
name|EJBQLQuery
name|query1
init|=
operator|new
name|EJBQLQuery
argument_list|(
name|ejbql
argument_list|)
decl_stmt|;
name|query1
operator|.
name|setCacheStrategy
argument_list|(
name|QueryCacheStrategy
operator|.
name|LOCAL_CACHE
argument_list|)
expr_stmt|;
name|artist2
operator|=
name|context
operator|.
name|performQuery
argument_list|(
name|query1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|artist1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getArtistName
argument_list|()
argument_list|,
name|artist2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDataRows
parameter_list|()
throws|throws
name|Exception
block|{
comment|// insertValue();
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|String
name|ejbql
init|=
literal|"select a FROM Artist a"
decl_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
name|ejbql
argument_list|)
decl_stmt|;
name|query
operator|.
name|setFetchingDataRows
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|artists
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|DataRow
name|row
init|=
operator|(
name|DataRow
operator|)
name|artists
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|artistName
init|=
operator|(
name|String
operator|)
name|row
operator|.
name|get
argument_list|(
literal|"ARTIST_NAME"
argument_list|)
decl_stmt|;
name|Artist
name|artist
init|=
operator|(
name|Artist
operator|)
name|context
operator|.
name|objectFromDataRow
argument_list|(
literal|"Artist"
argument_list|,
name|row
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|artistName
argument_list|,
name|artist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetExpression
parameter_list|()
block|{
name|String
name|ejbql
init|=
literal|"select a FROM Artist a"
decl_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
name|ejbql
argument_list|)
decl_stmt|;
name|EJBQLCompiledExpression
name|parsed
init|=
name|query
operator|.
name|getExpression
argument_list|(
name|runtime
operator|.
name|getDataDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parsed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ejbql
argument_list|,
name|parsed
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>If an expression has an 'entity variable' used in the SELECT clause then there should be a      * corresponding definition for the 'entity variable' in the FROM clause.  This did, at some      * point throw an NPE.</p>      */
annotation|@
name|Test
specifier|public
name|void
name|testMissingEntityBeanVariable
parameter_list|()
block|{
name|String
name|ejbql
init|=
literal|"SELECT b FROM Artist a"
decl_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
name|ejbql
argument_list|)
decl_stmt|;
try|try
block|{
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected an instance of "
operator|+
name|EJBQLException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" to have been thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EJBQLException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"the entity variable 'b' does not refer to any entity in the FROM clause"
argument_list|,
name|e
operator|.
name|getUnlabeledMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|fail
argument_list|(
literal|"expected an instance of "
operator|+
name|EJBQLException
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" to have been thrown."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUniqueKeyEntity
parameter_list|()
block|{
comment|// insertValue();
name|EntityResolver
name|resolver
init|=
name|runtime
operator|.
name|getDataDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
name|String
name|ejbql
init|=
literal|"select a FROM Artist a"
decl_stmt|;
name|EJBQLQuery
name|q1
init|=
operator|new
name|EJBQLQuery
argument_list|(
name|ejbql
argument_list|)
decl_stmt|;
name|q1
operator|.
name|setCacheStrategy
argument_list|(
name|QueryCacheStrategy
operator|.
name|LOCAL_CACHE
argument_list|)
expr_stmt|;
name|EJBQLQuery
name|q2
init|=
operator|new
name|EJBQLQuery
argument_list|(
name|ejbql
argument_list|)
decl_stmt|;
name|q2
operator|.
name|setCacheStrategy
argument_list|(
name|QueryCacheStrategy
operator|.
name|LOCAL_CACHE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q1
operator|.
name|getMetaData
argument_list|(
name|resolver
argument_list|)
operator|.
name|getCacheKey
argument_list|()
argument_list|,
name|q2
operator|.
name|getMetaData
argument_list|(
name|resolver
argument_list|)
operator|.
name|getCacheKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMetadata
parameter_list|()
block|{
name|EntityResolver
name|resolver
init|=
name|runtime
operator|.
name|getDataDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
name|String
name|ejbql
init|=
literal|"select a FROM Artist a"
decl_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
name|ejbql
argument_list|)
decl_stmt|;
name|QueryMetadata
name|md
init|=
name|query
operator|.
name|getMetaData
argument_list|(
name|resolver
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getClassDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|resolver
operator|.
name|getClassDescriptor
argument_list|(
literal|"Artist"
argument_list|)
argument_list|,
name|md
operator|.
name|getClassDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|md
operator|.
name|getObjEntity
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|resolver
operator|.
name|getObjEntity
argument_list|(
literal|"Artist"
argument_list|)
argument_list|,
name|md
operator|.
name|getObjEntity
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|md
operator|.
name|isFetchingDataRows
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|md
operator|.
name|isRefreshingObjects
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueryCacheStrategy
operator|.
name|NO_CACHE
argument_list|,
name|md
operator|.
name|getCacheStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectRelationship
parameter_list|()
throws|throws
name|Exception
block|{
comment|// insertPaintValue();
name|createPaintingsDataSet
argument_list|()
expr_stmt|;
name|String
name|ejbql
init|=
literal|"SELECT p.toArtist FROM Painting p"
decl_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
name|ejbql
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|result
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|ejbql2
init|=
literal|"SELECT p.toArtist, p FROM Painting p"
decl_stmt|;
name|EJBQLQuery
name|query2
init|=
operator|new
name|EJBQLQuery
argument_list|(
name|ejbql2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|result2
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|Object
index|[]
operator|)
name|result2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
operator|(
operator|(
name|Object
index|[]
operator|)
name|result2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Painting
operator|.
name|class
argument_list|,
operator|(
operator|(
name|Object
index|[]
operator|)
name|result2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
index|[
literal|1
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|ejbql3
init|=
literal|"SELECT p.toArtist, p.paintingTitle FROM Painting p"
decl_stmt|;
name|EJBQLQuery
name|query3
init|=
operator|new
name|EJBQLQuery
argument_list|(
name|ejbql3
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|result3
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query3
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result3
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|Object
index|[]
operator|)
name|result3
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
operator|(
operator|(
name|Object
index|[]
operator|)
name|result3
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
operator|(
operator|(
name|Object
index|[]
operator|)
name|result3
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
index|[
literal|1
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncodeAsXML
parameter_list|()
block|{
name|String
name|ejbql
init|=
literal|"select a FROM Artist a"
decl_stmt|;
name|String
name|name
init|=
literal|"Test"
decl_stmt|;
name|StringWriter
name|w
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|XMLEncoder
name|e
init|=
operator|new
name|XMLEncoder
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|w
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|separator
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|String
name|s
init|=
literal|"<query name=\""
operator|+
name|name
operator|+
literal|"\" type=\"EJBQLQuery\">"
operator|+
name|separator
operator|+
literal|"<ejbql><![CDATA["
operator|+
name|ejbql
operator|+
literal|"]]></ejbql>"
operator|+
name|separator
operator|+
literal|"</query>"
operator|+
name|separator
decl_stmt|;
name|EJBQLQueryDescriptor
name|descriptor
init|=
operator|new
name|EJBQLQueryDescriptor
argument_list|()
decl_stmt|;
name|descriptor
operator|.
name|setEjbql
argument_list|(
name|ejbql
argument_list|)
expr_stmt|;
name|descriptor
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|descriptor
operator|.
name|encodeAsXML
argument_list|(
name|e
argument_list|,
operator|new
name|EmptyConfigurationNodeVisitor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|w
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInWithMultipleStringPositionalParameters_withBrackets
parameter_list|()
throws|throws
name|Exception
block|{
name|createPaintingsDataSet
argument_list|()
expr_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select p from Painting p where p.paintingTitle in (?1,?2,?3)"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setParameter
argument_list|(
literal|1
argument_list|,
literal|"title0"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setParameter
argument_list|(
literal|2
argument_list|,
literal|"title1"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setParameter
argument_list|(
literal|3
argument_list|,
literal|"title2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|paintings
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|paintings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInWithSingleStringPositionalParameter_withoutBrackets
parameter_list|()
throws|throws
name|Exception
block|{
name|createPaintingsDataSet
argument_list|()
expr_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select p from Painting p where p.paintingTitle in ?1"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setParameter
argument_list|(
literal|1
argument_list|,
literal|"title0"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|paintings
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|paintings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInWithSingleCollectionNamedParameter_withoutBrackets
parameter_list|()
throws|throws
name|Exception
block|{
name|createPaintingsDataSet
argument_list|()
expr_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select p from Painting p where p.toArtist in :artists"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setParameter
argument_list|(
literal|"artists"
argument_list|,
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|paintings
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|paintings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInWithSingleCollectionPositionalParameter_withoutBrackets
parameter_list|()
throws|throws
name|Exception
block|{
name|createPaintingsDataSet
argument_list|()
expr_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select p from Painting p where p.toArtist in ?1"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setParameter
argument_list|(
literal|1
argument_list|,
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|paintings
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|paintings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInWithSingleCollectionNamedParameter_withBrackets
parameter_list|()
throws|throws
name|Exception
block|{
name|createPaintingsDataSet
argument_list|()
expr_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select p from Painting p where p.toArtist in (:artists)"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setParameter
argument_list|(
literal|"artists"
argument_list|,
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|paintings
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|paintings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInWithSingleCollectionPositionalParameter_withBrackets
parameter_list|()
throws|throws
name|Exception
block|{
name|createPaintingsDataSet
argument_list|()
expr_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select p from Painting p where p.toArtist in (?1)"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setParameter
argument_list|(
literal|1
argument_list|,
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|paintings
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|paintings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullParameter
parameter_list|()
block|{
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select p from Painting p WHERE p.toArtist=:x"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setParameter
argument_list|(
literal|"x"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullNotEqualsParameter
parameter_list|()
block|{
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select p from Painting p WHERE p.toArtist<>:x"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setParameter
argument_list|(
literal|"x"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullPositionalParameter
parameter_list|()
block|{
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select p from Painting p WHERE p.toArtist=?1"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setParameter
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullAndNotNullParameter
parameter_list|()
block|{
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select p from Painting p WHERE p.toArtist=:x OR p.toArtist.artistName=:b"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setParameter
argument_list|(
literal|"x"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|query
operator|.
name|setParameter
argument_list|(
literal|"b"
argument_list|,
literal|"Y"
argument_list|)
expr_stmt|;
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLikeWithExplicitEscape
parameter_list|()
throws|throws
name|Exception
block|{
name|createPaintingsDataSet
argument_list|()
expr_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"SELECT p FROM Painting p WHERE p.paintingTitle LIKE '|%|%?|_title|%|%|_' ESCAPE '|'"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|paintings
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|paintings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"%%?_title%%_"
argument_list|,
name|paintings
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPaintingTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJoinToJoined
parameter_list|()
block|{
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select g from Gallery g inner join g.paintingArray p where p.toArtist.artistName like '%a%'"
argument_list|)
decl_stmt|;
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJoinAndCount
parameter_list|()
block|{
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select count(p) from Painting p where p.toGallery.galleryName LIKE '%a%' AND ("
operator|+
literal|"p.paintingTitle like '%a%' or "
operator|+
literal|"p.toArtist.artistName like '%a%'"
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
comment|// SELECT COUNT(p) from Product p where p.vsCatalog.id = 1 and
comment|// (
comment|// p.displayName like '%rimadyl%'
comment|// or p.manufacturer.name like '%rimadyl%'
comment|// or p.description like '%rimadyl%'
comment|// or p.longdescription like '%rimadyl%'
comment|// or p.longdescription2 like '%rimadyl%'
comment|// or p.manufacturerPartNumber like '%rimadyl%'
comment|// or p.partNumber like '%rimadyl%'
comment|// )
annotation|@
name|Test
specifier|public
name|void
name|testRelationshipWhereClause
parameter_list|()
throws|throws
name|Exception
block|{
name|Artist
name|a
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a
operator|.
name|setArtistName
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|Painting
name|p
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPaintingTitle
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|p
operator|.
name|setToArtist
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select p from Painting p where p.toArtist=:a"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setParameter
argument_list|(
literal|"a"
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|paintings
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|paintings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|p
argument_list|,
name|paintings
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRelationshipWhereClause2
parameter_list|()
throws|throws
name|Exception
block|{
name|Expression
name|exp
init|=
name|Painting
operator|.
name|TO_GALLERY
operator|.
name|isNull
argument_list|()
decl_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select p.toArtist from Painting p where "
operator|+
name|exp
operator|.
name|toEJBQL
argument_list|(
literal|"p"
argument_list|)
argument_list|)
decl_stmt|;
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrBrackets
parameter_list|()
throws|throws
name|Exception
block|{
name|Artist
name|a
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a
operator|.
name|setArtistName
argument_list|(
literal|"testOrBrackets"
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// this query is equivalent to (false and (false or true)) and
comment|// should always return 0 rows
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select a from Artist a "
operator|+
literal|"where a.artistName<> a.artistName and "
operator|+
literal|"(a.artistName<> a.artistName or a.artistName = a.artistName)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// on the other hand, the following is equivalent to (false and false) or true)
comment|// and
comment|// should return>0 rows
name|query
operator|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select a from Artist a "
operator|+
literal|"where a.artistName<> a.artistName and "
operator|+
literal|"a.artistName<> a.artistName or a.artistName = a.artistName"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// checking brackets around not
name|query
operator|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select a from Artist a "
operator|+
literal|"where not(a.artistName<> a.artistName and "
operator|+
literal|"a.artistName<> a.artistName or a.artistName = a.artistName)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// not is first to process
name|query
operator|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select a from Artist a "
operator|+
literal|"where not a.artistName<> a.artistName or "
operator|+
literal|"a.artistName = a.artistName"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderBy
parameter_list|()
throws|throws
name|Exception
block|{
name|tPainting
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|null
argument_list|,
literal|"title0"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|null
argument_list|,
literal|"title1"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|,
literal|"title2"
argument_list|)
expr_stmt|;
name|EJBQLQuery
name|asc
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select p from Painting p order by p.paintingTitle"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|paintingsAsc
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|asc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|paintingsAsc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"title0"
argument_list|,
name|paintingsAsc
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPaintingTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"title1"
argument_list|,
name|paintingsAsc
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPaintingTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"title2"
argument_list|,
name|paintingsAsc
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getPaintingTitle
argument_list|()
argument_list|)
expr_stmt|;
name|EJBQLQuery
name|desc
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select p from Painting p order by p.paintingTitle desc"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|paintingsDesc
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|desc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|paintingsDesc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"title2"
argument_list|,
name|paintingsDesc
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPaintingTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"title1"
argument_list|,
name|paintingsDesc
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getPaintingTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"title0"
argument_list|,
name|paintingsDesc
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getPaintingTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderBy_Aggregates
parameter_list|()
throws|throws
name|Exception
block|{
name|tArtist
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"a0"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|"title0"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"title1"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"title2"
argument_list|)
expr_stmt|;
name|EJBQLQuery
name|asc
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select a, count(p) from Artist a INNER JOIN a.paintingArray p GROUP BY a order by count(p)"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|artistAsc
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|asc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|artistAsc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a1"
argument_list|,
operator|(
operator|(
name|Artist
operator|)
name|artistAsc
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|0
index|]
operator|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a0"
argument_list|,
operator|(
operator|(
name|Artist
operator|)
name|artistAsc
operator|.
name|get
argument_list|(
literal|1
argument_list|)
index|[
literal|0
index|]
operator|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|EJBQLQuery
name|desc
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select a, count(p) from Artist a INNER JOIN a.paintingArray p GROUP BY a order by count(p) DESC"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|artistDesc
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|desc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|artistDesc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a0"
argument_list|,
operator|(
operator|(
name|Artist
operator|)
name|artistDesc
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|0
index|]
operator|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a1"
argument_list|,
operator|(
operator|(
name|Artist
operator|)
name|artistDesc
operator|.
name|get
argument_list|(
literal|1
argument_list|)
index|[
literal|0
index|]
operator|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOuterJoinCountByIdentifier
parameter_list|()
throws|throws
name|Exception
block|{
name|tArtist
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"a0"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|"title0"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"title1"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"title2"
argument_list|)
expr_stmt|;
name|EJBQLQuery
name|asc
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select a, count(p) from Artist a LEFT JOIN a.paintingArray p "
operator|+
literal|"GROUP BY a order by count(p) DESC"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|artistAsc
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|asc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|artistAsc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a0"
argument_list|,
operator|(
operator|(
name|Artist
operator|)
name|artistAsc
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|0
index|]
operator|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a1"
argument_list|,
operator|(
operator|(
name|Artist
operator|)
name|artistAsc
operator|.
name|get
argument_list|(
literal|1
argument_list|)
index|[
literal|0
index|]
operator|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a2"
argument_list|,
operator|(
operator|(
name|Artist
operator|)
name|artistAsc
operator|.
name|get
argument_list|(
literal|2
argument_list|)
index|[
literal|0
index|]
operator|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|artistAsc
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|artistAsc
operator|.
name|get
argument_list|(
literal|1
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|artistAsc
operator|.
name|get
argument_list|(
literal|2
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOuterJoinCountAll
parameter_list|()
throws|throws
name|Exception
block|{
name|tArtist
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"a0"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|"title0"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"title1"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"title2"
argument_list|)
expr_stmt|;
name|EJBQLQuery
name|asc
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"SELECT a, count(1) FROM Artist a LEFT JOIN a.paintingArray p "
operator|+
literal|"GROUP BY a ORDER BY count(1) DESC, a.artistName"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|artistAsc
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|asc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|artistAsc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a0"
argument_list|,
operator|(
operator|(
name|Artist
operator|)
name|artistAsc
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|0
index|]
operator|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a1"
argument_list|,
operator|(
operator|(
name|Artist
operator|)
name|artistAsc
operator|.
name|get
argument_list|(
literal|1
argument_list|)
index|[
literal|0
index|]
operator|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a2"
argument_list|,
operator|(
operator|(
name|Artist
operator|)
name|artistAsc
operator|.
name|get
argument_list|(
literal|2
argument_list|)
index|[
literal|0
index|]
operator|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|artistAsc
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|artistAsc
operator|.
name|get
argument_list|(
literal|1
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|artistAsc
operator|.
name|get
argument_list|(
literal|2
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// here is a difference with other cases
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOuterJoinCountByPath
parameter_list|()
throws|throws
name|Exception
block|{
name|tArtist
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"a0"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|"title0"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"title1"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"title2"
argument_list|)
expr_stmt|;
name|EJBQLQuery
name|asc
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select a, count(a.paintingArray+) from Artist a "
operator|+
literal|"GROUP BY a order by count(a.paintingArray+) DESC"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|artistAsc
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|asc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|artistAsc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a0"
argument_list|,
operator|(
operator|(
name|Artist
operator|)
name|artistAsc
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|0
index|]
operator|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a1"
argument_list|,
operator|(
operator|(
name|Artist
operator|)
name|artistAsc
operator|.
name|get
argument_list|(
literal|1
argument_list|)
index|[
literal|0
index|]
operator|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a2"
argument_list|,
operator|(
operator|(
name|Artist
operator|)
name|artistAsc
operator|.
name|get
argument_list|(
literal|2
argument_list|)
index|[
literal|0
index|]
operator|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|artistAsc
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|artistAsc
operator|.
name|get
argument_list|(
literal|1
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|artistAsc
operator|.
name|get
argument_list|(
literal|2
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullObjects
parameter_list|()
throws|throws
name|Exception
block|{
name|tArtist
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"a3"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"title1"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"title2"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|"title3"
argument_list|)
expr_stmt|;
name|EJBQLQuery
name|queryFullProduct
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select a, p from Artist a, Painting p"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result1
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|queryFullProduct
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|result1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|next
range|:
name|result1
control|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|next
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|next
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|next
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|EJBQLQuery
name|queryToOneRel
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select p.toGallery+, p.toArtist+, p from Painting p"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result2
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|queryToOneRel
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|next
range|:
name|result2
control|)
block|{
name|assertNull
argument_list|(
name|next
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Gallery
name|assertTrue
argument_list|(
name|next
index|[
literal|1
index|]
operator|instanceof
name|Artist
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|next
index|[
literal|2
index|]
operator|instanceof
name|Painting
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullObjectsCallback
parameter_list|()
throws|throws
name|Exception
block|{
name|tArtist
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"a3"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"title1"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"title2"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|"title3"
argument_list|)
expr_stmt|;
comment|// set callback to be called
name|LifecycleCallbackRegistry
name|registry
init|=
name|runtime
operator|.
name|getDataDomain
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getCallbackRegistry
argument_list|()
decl_stmt|;
name|registry
operator|.
name|addCallback
argument_list|(
name|LifecycleEvent
operator|.
name|POST_LOAD
argument_list|,
name|Painting
operator|.
name|class
argument_list|,
literal|"postAddCallback"
argument_list|)
expr_stmt|;
comment|// select Paintings, where one of it will be null
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"select a.paintingArray+ from Artist a order by a.artistName"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Painting
argument_list|>
name|result1
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result1
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
name|result1
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isPostAdded
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderByDbPath
parameter_list|()
throws|throws
name|Exception
block|{
name|tArtist
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"a3"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"SELECT a FROM Artist a ORDER BY db:a.ARTIST_ID DESC"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|result
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a1"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a2"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a3"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectFromNestedContext
parameter_list|()
throws|throws
name|Exception
block|{
name|tArtist
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"a1"
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|"title1"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|"title2"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|"title3"
argument_list|)
expr_stmt|;
name|ObjectContext
name|nested
init|=
name|runtime
operator|.
name|newContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|EJBQLQuery
name|query
init|=
operator|new
name|EJBQLQuery
argument_list|(
literal|"SELECT a, COUNT(a.paintingArray) FROM Artist a GROUP BY a"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|result
init|=
name|nested
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|next
range|:
name|result
control|)
block|{
name|assertTrue
argument_list|(
name|next
index|[
literal|0
index|]
operator|instanceof
name|Artist
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|next
index|[
literal|1
index|]
operator|instanceof
name|Number
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

