begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Cayenne
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultBatchIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultIteratorCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Artist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|ArtistExhibit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Exhibit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Gallery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|testdo
operator|.
name|testmap
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|UnitDbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|CayenneProjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|ServerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|unit
operator|.
name|di
operator|.
name|server
operator|.
name|UseServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|Deprecated
annotation|@
name|UseServerRuntime
argument_list|(
name|CayenneProjects
operator|.
name|TESTMAP_PROJECT
argument_list|)
specifier|public
class|class
name|SelectQueryIT
extends|extends
name|ServerCase
block|{
annotation|@
name|Inject
specifier|private
name|ObjectContext
name|context
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DBHelper
name|dbHelper
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|UnitDbAdapter
name|accessStackAdapter
decl_stmt|;
specifier|private
name|TableHelper
name|tArtist
decl_stmt|;
specifier|private
name|TableHelper
name|tPainting
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|this
operator|.
name|tArtist
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"ARTIST"
argument_list|)
operator|.
name|setColumns
argument_list|(
literal|"ARTIST_ID"
argument_list|,
literal|"ARTIST_NAME"
argument_list|,
literal|"DATE_OF_BIRTH"
argument_list|)
operator|.
name|setColumnTypes
argument_list|(
name|Types
operator|.
name|BIGINT
argument_list|,
name|Types
operator|.
name|CHAR
argument_list|,
name|Types
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|tPainting
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"PAINTING"
argument_list|)
operator|.
name|setColumns
argument_list|(
literal|"PAINTING_ID"
argument_list|,
literal|"ARTIST_ID"
argument_list|,
literal|"PAINTING_TITLE"
argument_list|)
operator|.
name|setColumnTypes
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createArtistsDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|dateBase
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|tArtist
operator|.
name|insert
argument_list|(
name|i
argument_list|,
literal|"artist"
operator|+
name|i
argument_list|,
operator|new
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|(
name|dateBase
operator|+
literal|10000
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|createArtistsWildcardDataSet
parameter_list|()
throws|throws
name|Exception
block|{
name|tArtist
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"_X"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"Y_"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelect_QualfierOnToMany
parameter_list|()
throws|throws
name|Exception
block|{
name|tArtist
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"A1"
argument_list|,
operator|new
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
literal|"P1"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|,
literal|"P2"
argument_list|)
expr_stmt|;
name|tPainting
operator|.
name|insert
argument_list|(
literal|6
argument_list|,
literal|null
argument_list|,
literal|"P3"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|objects
init|=
name|SelectQuery
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|Artist
operator|.
name|PAINTING_ARRAY
operator|.
name|dot
argument_list|(
name|Painting
operator|.
name|PAINTING_TITLE
argument_list|)
operator|.
name|like
argument_list|(
literal|"P%"
argument_list|)
argument_list|)
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
comment|// make sure no duplicate objects are returned when matching on a
comment|// to-many relationship
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFetchLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|setFetchLimit
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|objects
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFetchOffset
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|long
name|totalRows
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|addOrdering
argument_list|(
literal|"db:"
operator|+
name|Artist
operator|.
name|ARTIST_ID_PK_COLUMN
argument_list|,
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFetchOffset
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|results
init|=
name|context
operator|.
name|select
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|totalRows
operator|-
literal|5
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist6"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDbEntityRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|DbEntity
name|artistDbEntity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getDbEntity
argument_list|(
literal|"ARTIST"
argument_list|)
decl_stmt|;
name|SelectQuery
argument_list|<
name|DataRow
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|artistDbEntity
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DataRow
argument_list|>
name|results
init|=
name|context
operator|.
name|select
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|DataRow
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFetchLimitWithOffset
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|addOrdering
argument_list|(
literal|"db:"
operator|+
name|Artist
operator|.
name|ARTIST_ID_PK_COLUMN
argument_list|,
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFetchOffset
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFetchLimit
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|results
init|=
name|context
operator|.
name|select
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist16"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFetchOffsetWithQualifier
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"db:ARTIST_ID> 3"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFetchOffset
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|objects
init|=
name|query
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|objects
operator|.
name|size
argument_list|()
decl_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|sizeQ
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|sizeQ
operator|.
name|setQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"db:ARTIST_ID> 3"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|objects1
init|=
name|sizeQ
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|int
name|sizeAll
init|=
name|objects1
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|sizeAll
operator|-
literal|5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFetchLimitWithQualifier
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"db:ARTIST_ID> 3"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFetchLimit
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|objects
init|=
name|query
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectAllObjectsRootEntityName
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
literal|"Artist"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectAllObjectsRootClass
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectAllObjectsRootObjEntity
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|ObjEntity
name|artistEntity
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getObjEntity
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|artistEntity
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectLikeExactMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist1"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectNotLikeSingleWildcardMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|notLikeExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist11%"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|19
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectNotLikeIgnoreCaseSingleWildcardMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|notLikeIgnoreCaseExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"aRtIsT11%"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|19
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * SQL Server failure: 	 * http://stackoverflow.com/questions/14962419/is-the-like-operator-case-sensitive-with-ms-sql-server 	 */
annotation|@
name|Test
specifier|public
name|void
name|testSelectLikeCaseSensitive
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|accessStackAdapter
operator|.
name|supportsCaseSensitiveLike
argument_list|()
condition|)
block|{
return|return;
block|}
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"aRtIsT%"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectLikeSingle_WildcardMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist11%"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectLikeSingle_WildcardMatchAndEscape
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|accessStackAdapter
operator|.
name|supportsEscapeInLike
argument_list|()
condition|)
block|{
return|return;
block|}
name|createArtistsWildcardDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|andQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"=_%"
argument_list|,
literal|'='
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectLike_WildcardMatchAndEscape_AndOtherCriteria
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|accessStackAdapter
operator|.
name|supportsEscapeInLike
argument_list|()
condition|)
block|{
return|return;
block|}
name|createArtistsWildcardDataSet
argument_list|()
expr_stmt|;
comment|// CAY-1978 - combining LIKE..ESCAPE with another clause generated bad
comment|// syntax
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|andQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"=_%"
argument_list|,
literal|'='
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|andQualifier
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|eq
argument_list|(
literal|"_X"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectLike_WildcardMatchIgnoreCaseAndEscape_AndOtherCriteria
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|accessStackAdapter
operator|.
name|supportsEscapeInLike
argument_list|()
condition|)
block|{
return|return;
block|}
name|createArtistsWildcardDataSet
argument_list|()
expr_stmt|;
comment|// CAY-1978 - combining LIKE..ESCAPE with another clause generated bad SQL
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|andQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|likeIgnoreCaseExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"=_%"
argument_list|,
literal|'='
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|andQualifier
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|eq
argument_list|(
literal|"_X"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectLike_WildcardMatchAndEscapeMulti_AndOtherCriteria
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|accessStackAdapter
operator|.
name|supportsEscapeInLike
argument_list|()
condition|)
block|{
return|return;
block|}
name|tArtist
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"_X_"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tArtist
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"_X"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|andQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"#_%#_"
argument_list|,
literal|'#'
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|andQualifier
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|eq
argument_list|(
literal|"_X_"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectLikeMultiple_WildcardMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist1%"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Test how "like ignore case" works when using uppercase parameter. 	 */
annotation|@
name|Test
specifier|public
name|void
name|testSelectLikeIgnoreCaseObjects1
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|likeIgnoreCaseExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"ARTIST%"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Test how "like ignore case" works when using lowercase parameter. */
annotation|@
name|Test
specifier|public
name|void
name|testSelectLikeIgnoreCaseObjects2
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|likeIgnoreCaseExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist%"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectIn
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"artistName in ('artist1', 'artist2')"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectParameterizedIn
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"artistName in $list"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|query
operator|=
name|query
operator|.
name|queryWithParameters
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"list"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"artist1"
block|,
literal|"artist2"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectParameterizedEmptyIn
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"artistName in $list"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|query
operator|=
name|query
operator|.
name|queryWithParameters
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"list"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectParameterizedEmptyNotIn
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
literal|"artistName not in $list"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|query
operator|=
name|query
operator|.
name|queryWithParameters
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"list"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectEmptyIn
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
literal|"artistName"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectEmptyNotIn
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|notInExp
argument_list|(
literal|"artistName"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectBooleanTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|expTrue
argument_list|()
decl_stmt|;
name|qual
operator|=
name|qual
operator|.
name|andExp
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist1"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectBooleanNotTrueOr
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|expTrue
argument_list|()
decl_stmt|;
name|qual
operator|=
name|qual
operator|.
name|notExp
argument_list|()
expr_stmt|;
name|qual
operator|=
name|qual
operator|.
name|orExp
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist1"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectBooleanFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|expFalse
argument_list|()
decl_stmt|;
name|qual
operator|=
name|qual
operator|.
name|andExp
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist1"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectBooleanFalseOr
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|expFalse
argument_list|()
decl_stmt|;
name|qual
operator|=
name|qual
operator|.
name|orExp
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist1"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelect
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|objects
init|=
name|query
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectOne
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|Expression
name|qual
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist1"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|qual
argument_list|)
expr_stmt|;
name|Artist
name|artist
init|=
name|query
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"artist1"
argument_list|,
name|artist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|addOrdering
argument_list|(
operator|new
name|Ordering
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|artist
init|=
name|query
operator|.
name|selectFirst
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|artist
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist1"
argument_list|,
name|artist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelectFirstByContext
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|addOrdering
argument_list|(
operator|new
name|Ordering
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|artist
init|=
name|context
operator|.
name|selectFirst
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|artist
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"artist1"
argument_list|,
name|artist
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIterate
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|q1
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|count
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
name|q1
operator|.
name|iterate
argument_list|(
name|context
argument_list|,
operator|new
name|ResultIteratorCallback
argument_list|<
name|Artist
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|next
parameter_list|(
name|Artist
name|object
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|object
operator|.
name|getArtistName
argument_list|()
argument_list|)
expr_stmt|;
name|count
index|[
literal|0
index|]
operator|++
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|count
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIterator
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|q1
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
init|(
name|ResultIterator
argument_list|<
name|Artist
argument_list|>
name|it
init|=
name|q1
operator|.
name|iterator
argument_list|(
name|context
argument_list|)
init|;
init|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Artist
name|a
range|:
name|it
control|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBatchIterator
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|q1
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
init|(
name|ResultBatchIterator
argument_list|<
name|Artist
argument_list|>
name|it
init|=
name|q1
operator|.
name|batchIterator
argument_list|(
name|context
argument_list|,
literal|5
argument_list|)
init|;
init|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Artist
argument_list|>
name|artistList
range|:
name|it
control|)
block|{
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|artistList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Tests that all queries specified in prefetch are executed in a more 	 * complex prefetch scenario. 	 */
annotation|@
name|Test
specifier|public
name|void
name|testRouteWithPrefetches
parameter_list|()
block|{
name|EntityResolver
name|resolver
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
name|MockQueryRouter
name|router
init|=
operator|new
name|MockQueryRouter
argument_list|()
decl_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|q
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|q
operator|.
name|route
argument_list|(
name|router
argument_list|,
name|resolver
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|router
operator|.
name|getQueryCount
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|addPrefetch
argument_list|(
literal|"paintingArray"
argument_list|)
expr_stmt|;
name|router
operator|.
name|reset
argument_list|()
expr_stmt|;
name|q
operator|.
name|route
argument_list|(
name|router
argument_list|,
name|resolver
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|router
operator|.
name|getQueryCount
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|addPrefetch
argument_list|(
literal|"paintingArray.toGallery"
argument_list|)
expr_stmt|;
name|router
operator|.
name|reset
argument_list|()
expr_stmt|;
name|q
operator|.
name|route
argument_list|(
name|router
argument_list|,
name|resolver
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|router
operator|.
name|getQueryCount
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|addPrefetch
argument_list|(
literal|"artistExhibitArray.toExhibit"
argument_list|)
expr_stmt|;
name|router
operator|.
name|reset
argument_list|()
expr_stmt|;
name|q
operator|.
name|route
argument_list|(
name|router
argument_list|,
name|resolver
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|router
operator|.
name|getQueryCount
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|removePrefetch
argument_list|(
literal|"paintingArray"
argument_list|)
expr_stmt|;
name|router
operator|.
name|reset
argument_list|()
expr_stmt|;
name|q
operator|.
name|route
argument_list|(
name|router
argument_list|,
name|resolver
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|router
operator|.
name|getQueryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Tests that all queries specified in prefetch are executed in a more 	 * complex prefetch scenario with no reverse obj relationships. 	 */
annotation|@
name|Test
specifier|public
name|void
name|testRouteQueryWithPrefetchesNoReverse
parameter_list|()
block|{
name|EntityResolver
name|resolver
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
name|ObjEntity
name|paintingEntity
init|=
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjEntity
name|galleryEntity
init|=
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|Gallery
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjEntity
name|artistExhibitEntity
init|=
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|ArtistExhibit
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjEntity
name|exhibitEntity
init|=
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|Exhibit
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjRelationship
name|paintingToArtistRel
init|=
name|paintingEntity
operator|.
name|getRelationship
argument_list|(
literal|"toArtist"
argument_list|)
decl_stmt|;
name|paintingEntity
operator|.
name|removeRelationship
argument_list|(
literal|"toArtist"
argument_list|)
expr_stmt|;
name|ObjRelationship
name|galleryToPaintingRel
init|=
name|galleryEntity
operator|.
name|getRelationship
argument_list|(
literal|"paintingArray"
argument_list|)
decl_stmt|;
name|galleryEntity
operator|.
name|removeRelationship
argument_list|(
literal|"paintingArray"
argument_list|)
expr_stmt|;
name|ObjRelationship
name|artistExhibitToArtistRel
init|=
name|artistExhibitEntity
operator|.
name|getRelationship
argument_list|(
literal|"toArtist"
argument_list|)
decl_stmt|;
name|artistExhibitEntity
operator|.
name|removeRelationship
argument_list|(
literal|"toArtist"
argument_list|)
expr_stmt|;
name|ObjRelationship
name|exhibitToArtistExhibitRel
init|=
name|exhibitEntity
operator|.
name|getRelationship
argument_list|(
literal|"artistExhibitArray"
argument_list|)
decl_stmt|;
name|exhibitEntity
operator|.
name|removeRelationship
argument_list|(
literal|"artistExhibitArray"
argument_list|)
expr_stmt|;
name|Expression
name|e
init|=
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"artistName"
argument_list|,
literal|"artist1"
argument_list|)
decl_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|q
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|q
operator|.
name|addPrefetch
argument_list|(
literal|"paintingArray"
argument_list|)
expr_stmt|;
name|q
operator|.
name|addPrefetch
argument_list|(
literal|"paintingArray.toGallery"
argument_list|)
expr_stmt|;
name|q
operator|.
name|addPrefetch
argument_list|(
literal|"artistExhibitArray.toExhibit"
argument_list|)
expr_stmt|;
try|try
block|{
name|MockQueryRouter
name|router
init|=
operator|new
name|MockQueryRouter
argument_list|()
decl_stmt|;
name|q
operator|.
name|route
argument_list|(
name|router
argument_list|,
name|resolver
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|router
operator|.
name|getQueryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|paintingEntity
operator|.
name|addRelationship
argument_list|(
name|paintingToArtistRel
argument_list|)
expr_stmt|;
name|galleryEntity
operator|.
name|addRelationship
argument_list|(
name|galleryToPaintingRel
argument_list|)
expr_stmt|;
name|artistExhibitEntity
operator|.
name|addRelationship
argument_list|(
name|artistExhibitToArtistRel
argument_list|)
expr_stmt|;
name|exhibitEntity
operator|.
name|addRelationship
argument_list|(
name|exhibitToArtistExhibitRel
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Test prefetching with qualifier on the root query being the path to the 	 * prefetch. 	 */
annotation|@
name|Test
specifier|public
name|void
name|testRouteQueryWithPrefetchesPrefetchExpressionPath
parameter_list|()
block|{
comment|// find the painting not matching the artist (this is the case where
comment|// such prefetch
comment|// at least makes sense)
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|noMatchExp
argument_list|(
literal|"toArtist"
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
decl_stmt|;
name|SelectQuery
argument_list|<
name|Painting
argument_list|>
name|q
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Painting
operator|.
name|class
argument_list|,
name|exp
argument_list|)
decl_stmt|;
name|q
operator|.
name|addPrefetch
argument_list|(
literal|"toArtist"
argument_list|)
expr_stmt|;
comment|// test how prefetches are resolved in this case - this was a stumbling
comment|// block for
comment|// a while
name|EntityResolver
name|resolver
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
name|MockQueryRouter
name|router
init|=
operator|new
name|MockQueryRouter
argument_list|()
decl_stmt|;
name|q
operator|.
name|route
argument_list|(
name|router
argument_list|,
name|resolver
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|router
operator|.
name|getQueryCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLeftJoinAndPrefetchToMany
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"paintingArray+.toGallery"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|query
operator|.
name|addPrefetch
argument_list|(
literal|"artistExhibitArray"
argument_list|)
expr_stmt|;
name|context
operator|.
name|select
argument_list|(
name|query
argument_list|)
expr_stmt|;
comment|// TODO: assertions?
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLeftJoinAndPrefetchToOne
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Painting
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Painting
operator|.
name|class
argument_list|,
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"toArtist+.artistName"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|query
operator|.
name|addPrefetch
argument_list|(
literal|"toGallery"
argument_list|)
expr_stmt|;
name|context
operator|.
name|select
argument_list|(
name|query
argument_list|)
expr_stmt|;
comment|// TODO: assertions?
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatchObject
parameter_list|()
block|{
name|Artist
name|a1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a1
operator|.
name|setArtistName
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|Artist
name|a2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a2
operator|.
name|setArtistName
argument_list|(
literal|"a2"
argument_list|)
expr_stmt|;
name|Artist
name|a3
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a3
operator|.
name|setArtistName
argument_list|(
literal|"a3"
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|a2
argument_list|)
argument_list|)
expr_stmt|;
name|Artist
name|result
init|=
name|query
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|a2
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatchObjects
parameter_list|()
block|{
name|Artist
name|a1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a1
operator|.
name|setArtistName
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|Artist
name|a2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a2
operator|.
name|setArtistName
argument_list|(
literal|"a2"
argument_list|)
expr_stmt|;
name|Artist
name|a3
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a3
operator|.
name|setArtistName
argument_list|(
literal|"a3"
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|matchAnyExp
argument_list|(
name|a1
argument_list|,
name|a3
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|addOrdering
argument_list|(
name|Artist
operator|.
name|ARTIST_NAME
operator|.
name|asc
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|list
init|=
name|query
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|a1
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|a3
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatchByRelatedObject
parameter_list|()
block|{
name|Artist
name|a1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a1
operator|.
name|setArtistName
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|Artist
name|a2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a2
operator|.
name|setArtistName
argument_list|(
literal|"a2"
argument_list|)
expr_stmt|;
name|Painting
name|p1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|p1
operator|.
name|setPaintingTitle
argument_list|(
literal|"p1"
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setToArtist
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|Painting
name|p2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|p2
operator|.
name|setPaintingTitle
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|setToArtist
argument_list|(
name|a2
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Painting
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"toArtist"
argument_list|,
name|a1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|p1
argument_list|,
name|query
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatchByRelatedObjectId
parameter_list|()
block|{
name|Artist
name|a1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a1
operator|.
name|setArtistName
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|Artist
name|a2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a2
operator|.
name|setArtistName
argument_list|(
literal|"a2"
argument_list|)
expr_stmt|;
name|Painting
name|p1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|p1
operator|.
name|setPaintingTitle
argument_list|(
literal|"p1"
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setToArtist
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|Painting
name|p2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|p2
operator|.
name|setPaintingTitle
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|setToArtist
argument_list|(
name|a2
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Painting
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"toArtist"
argument_list|,
name|a1
operator|.
name|getObjectId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|p1
argument_list|,
name|query
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatchByRelatedObjectIdValue
parameter_list|()
block|{
name|Artist
name|a1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a1
operator|.
name|setArtistName
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|Artist
name|a2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a2
operator|.
name|setArtistName
argument_list|(
literal|"a2"
argument_list|)
expr_stmt|;
name|Painting
name|p1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|p1
operator|.
name|setPaintingTitle
argument_list|(
literal|"p1"
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setToArtist
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|Painting
name|p2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|p2
operator|.
name|setPaintingTitle
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
name|p2
operator|.
name|setToArtist
argument_list|(
name|a2
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Painting
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Painting
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
literal|"toArtist"
argument_list|,
name|Cayenne
operator|.
name|longPKForObject
argument_list|(
name|a1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|p1
argument_list|,
name|query
operator|.
name|selectOne
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelect_WithOrdering
parameter_list|()
block|{
name|Artist
name|a1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a1
operator|.
name|setArtistName
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|Artist
name|a2
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a2
operator|.
name|setArtistName
argument_list|(
literal|"a2"
argument_list|)
expr_stmt|;
name|Artist
name|a3
init|=
name|context
operator|.
name|newObject
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|a3
operator|.
name|setArtistName
argument_list|(
literal|"a3"
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Ordering
argument_list|>
name|orderings
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Ordering
argument_list|(
literal|"artistName"
argument_list|,
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|orderings
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|list
init|=
name|context
operator|.
name|select
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|a1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|a2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|a3
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Tests INs with more than 1000 elements 	 */
annotation|@
name|Test
specifier|public
name|void
name|testSelectLongIn
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
comment|// not all adapters strip INs, so we just make sure query with such qualifier fires OK
name|Object
index|[]
name|names
init|=
operator|new
name|String
index|[
literal|2009
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|names
index|[
name|i
index|]
operator|=
literal|"artist"
operator|+
operator|(
name|i
operator|+
literal|2
operator|)
expr_stmt|;
block|}
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
literal|"artistName"
argument_list|,
name|names
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|artists
init|=
name|query
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|19
argument_list|,
name|artists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Tests NOT INs with more than 1000 elements 	 */
annotation|@
name|Test
specifier|public
name|void
name|testSelectLongNotIn
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Derby tries to compile SQL into Java bytecode and
comment|// fails with max code length limit ...
if|if
condition|(
operator|!
name|accessStackAdapter
operator|.
name|supportsLongIn
argument_list|()
condition|)
block|{
return|return;
block|}
name|createArtistsDataSet
argument_list|()
expr_stmt|;
comment|// not all adapters strip INs, so we just make sure query with such qualifier fires OK
name|Object
index|[]
name|names
init|=
operator|new
name|String
index|[
literal|1001
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|names
index|[
name|i
index|]
operator|=
literal|"artist"
operator|+
operator|(
name|i
operator|+
literal|2
operator|)
expr_stmt|;
block|}
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|,
name|ExpressionFactory
operator|.
name|notInExp
argument_list|(
literal|"artistName"
argument_list|,
name|names
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Artist
argument_list|>
name|artists
init|=
name|query
operator|.
name|select
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|artists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCacheOffsetAndLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|createArtistsDataSet
argument_list|()
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query1
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query1
operator|.
name|setCacheStrategy
argument_list|(
name|QueryCacheStrategy
operator|.
name|SHARED_CACHE
argument_list|)
expr_stmt|;
name|query1
operator|.
name|setFetchOffset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|query1
operator|.
name|setFetchLimit
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|context
operator|.
name|performQuery
argument_list|(
name|query1
argument_list|)
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query2
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query2
operator|.
name|setCacheStrategy
argument_list|(
name|QueryCacheStrategy
operator|.
name|SHARED_CACHE
argument_list|)
expr_stmt|;
name|query2
operator|.
name|setFetchOffset
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|query2
operator|.
name|setFetchLimit
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|context
operator|.
name|performQuery
argument_list|(
name|query2
argument_list|)
expr_stmt|;
name|SelectQuery
argument_list|<
name|Artist
argument_list|>
name|query3
init|=
operator|new
name|SelectQuery
argument_list|<>
argument_list|(
name|Artist
operator|.
name|class
argument_list|)
decl_stmt|;
name|query3
operator|.
name|setCacheStrategy
argument_list|(
name|QueryCacheStrategy
operator|.
name|SHARED_CACHE
argument_list|)
expr_stmt|;
name|query3
operator|.
name|setFetchOffset
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|query3
operator|.
name|setFetchLimit
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|context
operator|.
name|performQuery
argument_list|(
name|query3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|query1
operator|.
name|metaData
operator|.
name|getCacheKey
argument_list|()
operator|.
name|equals
argument_list|(
name|query2
operator|.
name|metaData
operator|.
name|cacheKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|query2
operator|.
name|metaData
operator|.
name|getCacheKey
argument_list|()
argument_list|,
name|query3
operator|.
name|metaData
operator|.
name|getCacheKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

