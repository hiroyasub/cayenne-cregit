begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|EhCacheQueryCache_WithConfigTest
block|{
specifier|protected
name|CacheManager
name|cacheManager
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|config
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"test-ehcache.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|cacheManager
operator|=
operator|new
name|CacheManager
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|cacheManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveGroup_WithFactory_WithCacheGroups
parameter_list|()
block|{
name|EhCacheQueryCache
name|cache
init|=
operator|new
name|EhCacheQueryCache
argument_list|(
name|cacheManager
argument_list|)
decl_stmt|;
name|ArrayList
index|[]
name|lists
init|=
operator|new
name|ArrayList
index|[]
block|{
operator|new
name|ArrayList
argument_list|<>
argument_list|()
block|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
block|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
block|}
decl_stmt|;
name|QueryCacheEntryFactory
name|factory
init|=
name|mock
argument_list|(
name|QueryCacheEntryFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|factory
operator|.
name|createObject
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|lists
index|[
literal|0
index|]
argument_list|,
name|lists
index|[
literal|1
index|]
argument_list|,
name|lists
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|QueryMetadata
name|md
init|=
name|mock
argument_list|(
name|QueryMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|md
operator|.
name|getCacheKey
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"k1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|md
operator|.
name|getCacheGroups
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"cg1"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lists
index|[
literal|0
index|]
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|md
argument_list|,
name|factory
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lists
index|[
literal|0
index|]
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|md
argument_list|,
name|factory
argument_list|)
argument_list|)
expr_stmt|;
name|Cache
name|c1
init|=
name|cache
operator|.
name|cacheManager
operator|.
name|getCache
argument_list|(
literal|"cg1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|201
argument_list|,
name|c1
operator|.
name|getCacheConfiguration
argument_list|()
operator|.
name|getTimeToLiveSeconds
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove non-existing
name|cache
operator|.
name|removeGroup
argument_list|(
literal|"cg0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lists
index|[
literal|0
index|]
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|md
argument_list|,
name|factory
argument_list|)
argument_list|)
expr_stmt|;
name|Cache
name|c2
init|=
name|cache
operator|.
name|cacheManager
operator|.
name|getCache
argument_list|(
literal|"cg1"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|201
argument_list|,
name|c2
operator|.
name|getCacheConfiguration
argument_list|()
operator|.
name|getTimeToLiveSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|removeGroup
argument_list|(
literal|"cg1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lists
index|[
literal|1
index|]
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|md
argument_list|,
name|factory
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure the cache still has all the configured settings after
comment|// 'removeGroup'
name|Cache
name|c3
init|=
name|cache
operator|.
name|cacheManager
operator|.
name|getCache
argument_list|(
literal|"cg1"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|c1
argument_list|,
name|c3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|201
argument_list|,
name|c3
operator|.
name|getCacheConfiguration
argument_list|()
operator|.
name|getTimeToLiveSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

