begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLCompiledExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|SQLResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|PrefetchTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_comment
comment|/**  * A compiled EJBQL expression.  *   * @since 3.0  */
end_comment

begin_class
class|class
name|CompiledExpression
implements|implements
name|EJBQLCompiledExpression
block|{
specifier|private
name|String
name|source
decl_stmt|;
specifier|private
name|String
name|rootId
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ClassDescriptor
argument_list|>
name|descriptorsById
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ObjRelationship
argument_list|>
name|incomingById
decl_stmt|;
specifier|private
name|EJBQLExpression
name|expression
decl_stmt|;
specifier|private
name|SQLResult
name|result
decl_stmt|;
specifier|private
name|PrefetchTreeNode
name|prefetchTree
decl_stmt|;
specifier|public
name|ClassDescriptor
name|getEntityDescriptor
parameter_list|(
name|String
name|idVariable
parameter_list|)
block|{
if|if
condition|(
name|idVariable
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|descriptorsById
operator|.
name|get
argument_list|(
name|Compiler
operator|.
name|normalizeIdPath
argument_list|(
name|idVariable
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|SQLResult
name|getResult
parameter_list|()
block|{
return|return
name|result
return|;
block|}
specifier|public
name|ClassDescriptor
name|getRootDescriptor
parameter_list|()
block|{
return|return
name|rootId
operator|!=
literal|null
condition|?
name|getEntityDescriptor
argument_list|(
name|rootId
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|DbRelationship
argument_list|>
name|getIncomingRelationships
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
name|ObjRelationship
name|relationship
init|=
name|incomingById
operator|.
name|get
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|relationship
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|relationship
operator|.
name|getDbRelationships
argument_list|()
return|;
block|}
specifier|public
name|EJBQLExpression
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
name|void
name|setExpression
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
name|void
name|setDescriptorsById
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ClassDescriptor
argument_list|>
name|descriptorsById
parameter_list|)
block|{
name|this
operator|.
name|descriptorsById
operator|=
name|descriptorsById
expr_stmt|;
block|}
name|void
name|setIncomingById
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ObjRelationship
argument_list|>
name|incomingById
parameter_list|)
block|{
name|this
operator|.
name|incomingById
operator|=
name|incomingById
expr_stmt|;
block|}
name|void
name|setSource
parameter_list|(
name|String
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
name|void
name|setRootId
parameter_list|(
name|String
name|rootId
parameter_list|)
block|{
name|this
operator|.
name|rootId
operator|=
name|rootId
expr_stmt|;
block|}
name|void
name|setResult
parameter_list|(
name|SQLResult
name|resultSetMapping
parameter_list|)
block|{
name|this
operator|.
name|result
operator|=
name|resultSetMapping
expr_stmt|;
block|}
specifier|public
name|PrefetchTreeNode
name|getPrefetchTree
parameter_list|()
block|{
return|return
name|prefetchTree
return|;
block|}
specifier|public
name|void
name|setPrefetchTree
parameter_list|(
name|PrefetchTreeNode
name|prefetchTree
parameter_list|)
block|{
name|this
operator|.
name|prefetchTree
operator|=
name|prefetchTree
expr_stmt|;
block|}
block|}
end_class

end_unit

