begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
package|;
end_package

begin_comment
comment|/**  * Creates {@link EJBQLParser} based on the system settings.  *   * @since 3.0  */
end_comment

begin_class
specifier|public
class|class
name|EJBQLParserFactory
block|{
comment|// this is the parser generated by JJTree/JavaCC
specifier|private
specifier|static
name|String
name|DEFAULT_PARSER_CLASS
init|=
literal|"org.apache.cayenne.ejbql.parser.EJBQL$EJBQLDefaultParser"
decl_stmt|;
specifier|private
specifier|static
name|Class
name|parserClass
decl_stmt|;
specifier|private
specifier|static
name|Class
name|getParserClass
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
name|parserClass
operator|==
literal|null
condition|)
block|{
comment|// for now support only the default parser. If needed it should be
comment|// easy to plug external parsers via a System property...
name|parserClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|DEFAULT_PARSER_CLASS
argument_list|,
literal|true
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|parserClass
return|;
block|}
specifier|public
specifier|static
name|EJBQLParser
name|getParser
parameter_list|()
throws|throws
name|EJBQLException
block|{
try|try
block|{
return|return
operator|(
name|EJBQLParser
operator|)
name|getParserClass
argument_list|()
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EJBQLException
argument_list|(
literal|"Error creating EJBQL parser"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

