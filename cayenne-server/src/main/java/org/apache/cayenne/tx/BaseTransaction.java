begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tx
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_comment
comment|/**  * A Cayenne transaction. Currently supports managing JDBC connections.  *  * @since 4.0  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BaseTransaction
implements|implements
name|Transaction
block|{
comment|/**      * A ThreadLocal that stores current thread transaction.      */
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Transaction
argument_list|>
name|CURRENT_TRANSACTION
init|=
operator|new
name|InheritableThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|STATUS_ACTIVE
init|=
literal|1
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|STATUS_COMMITTING
init|=
literal|2
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|STATUS_COMMITTED
init|=
literal|3
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|STATUS_ROLLEDBACK
init|=
literal|4
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|STATUS_ROLLING_BACK
init|=
literal|5
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|STATUS_NO_TRANSACTION
init|=
literal|6
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|STATUS_MARKED_ROLLEDBACK
init|=
literal|7
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Connection
argument_list|>
name|connections
decl_stmt|;
specifier|protected
name|Collection
argument_list|<
name|TransactionListener
argument_list|>
name|listeners
decl_stmt|;
specifier|protected
name|int
name|status
decl_stmt|;
specifier|protected
name|int
name|defaultIsolationLevel
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|TransactionDescriptor
name|descriptor
decl_stmt|;
specifier|static
name|String
name|decodeStatus
parameter_list|(
name|int
name|status
parameter_list|)
block|{
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|STATUS_ACTIVE
case|:
return|return
literal|"STATUS_ACTIVE"
return|;
case|case
name|STATUS_COMMITTING
case|:
return|return
literal|"STATUS_COMMITTING"
return|;
case|case
name|STATUS_COMMITTED
case|:
return|return
literal|"STATUS_COMMITTED"
return|;
case|case
name|STATUS_ROLLEDBACK
case|:
return|return
literal|"STATUS_ROLLEDBACK"
return|;
case|case
name|STATUS_ROLLING_BACK
case|:
return|return
literal|"STATUS_ROLLING_BACK"
return|;
case|case
name|STATUS_NO_TRANSACTION
case|:
return|return
literal|"STATUS_NO_TRANSACTION"
return|;
case|case
name|STATUS_MARKED_ROLLEDBACK
case|:
return|return
literal|"STATUS_MARKED_ROLLEDBACK"
return|;
default|default:
return|return
literal|"Unknown Status - "
operator|+
name|status
return|;
block|}
block|}
comment|/**      * Binds a Transaction to the current thread.      */
specifier|public
specifier|static
name|void
name|bindThreadTransaction
parameter_list|(
name|Transaction
name|transaction
parameter_list|)
block|{
name|CURRENT_TRANSACTION
operator|.
name|set
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a Transaction associated with the current thread, or null if      * there is no such Transaction.      */
specifier|public
specifier|static
name|Transaction
name|getThreadTransaction
parameter_list|()
block|{
return|return
name|CURRENT_TRANSACTION
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Creates new inactive transaction.      */
specifier|protected
name|BaseTransaction
parameter_list|(
name|TransactionDescriptor
name|descriptor
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|STATUS_NO_TRANSACTION
expr_stmt|;
name|this
operator|.
name|descriptor
operator|=
name|descriptor
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRollbackOnly
parameter_list|()
block|{
name|this
operator|.
name|status
operator|=
name|STATUS_MARKED_ROLLEDBACK
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRollbackOnly
parameter_list|()
block|{
return|return
name|status
operator|==
name|STATUS_MARKED_ROLLEDBACK
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|TransactionListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listeners
operator|==
literal|null
condition|)
block|{
name|listeners
operator|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Starts a Transaction. If Transaction is not started explicitly, it will      * be started when the first connection is added.      */
annotation|@
name|Override
specifier|public
name|void
name|begin
parameter_list|()
block|{
if|if
condition|(
name|status
operator|!=
name|BaseTransaction
operator|.
name|STATUS_NO_TRANSACTION
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Transaction must have 'STATUS_NO_TRANSACTION' to begin. "
operator|+
literal|"Current status: "
operator|+
name|BaseTransaction
operator|.
name|decodeStatus
argument_list|(
name|status
argument_list|)
argument_list|)
throw|;
block|}
name|status
operator|=
name|BaseTransaction
operator|.
name|STATUS_ACTIVE
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commit
parameter_list|()
block|{
if|if
condition|(
name|status
operator|==
name|BaseTransaction
operator|.
name|STATUS_NO_TRANSACTION
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|status
operator|!=
name|BaseTransaction
operator|.
name|STATUS_ACTIVE
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Transaction must have 'STATUS_ACTIVE' to be committed. "
operator|+
literal|"Current status: "
operator|+
name|BaseTransaction
operator|.
name|decodeStatus
argument_list|(
name|status
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|listeners
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TransactionListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|willCommit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
name|processCommit
argument_list|()
expr_stmt|;
name|status
operator|=
name|BaseTransaction
operator|.
name|STATUS_COMMITTED
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|processCommit
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|rollback
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|status
operator|==
name|BaseTransaction
operator|.
name|STATUS_NO_TRANSACTION
operator|||
name|status
operator|==
name|BaseTransaction
operator|.
name|STATUS_ROLLEDBACK
operator|||
name|status
operator|==
name|BaseTransaction
operator|.
name|STATUS_ROLLING_BACK
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|status
operator|!=
name|BaseTransaction
operator|.
name|STATUS_ACTIVE
operator|&&
name|status
operator|!=
name|BaseTransaction
operator|.
name|STATUS_MARKED_ROLLEDBACK
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Transaction must have 'STATUS_ACTIVE' or 'STATUS_MARKED_ROLLEDBACK' to be rolled back. "
operator|+
literal|"Current status: "
operator|+
name|BaseTransaction
operator|.
name|decodeStatus
argument_list|(
name|status
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|listeners
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TransactionListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|willRollback
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
name|processRollback
argument_list|()
expr_stmt|;
name|status
operator|=
name|BaseTransaction
operator|.
name|STATUS_ROLLEDBACK
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|void
name|processRollback
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Connection
argument_list|>
name|getConnections
parameter_list|()
block|{
return|return
name|connections
operator|!=
literal|null
condition|?
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|connections
argument_list|)
else|:
name|Collections
operator|.
expr|<
name|String
operator|,
name|Connection
operator|>
name|emptyMap
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Connection
name|getOrCreateConnection
parameter_list|(
name|String
name|connectionName
parameter_list|,
name|DataSource
name|dataSource
parameter_list|)
throws|throws
name|SQLException
block|{
name|Connection
name|c
init|=
name|getExistingConnection
argument_list|(
name|connectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
operator|||
name|c
operator|.
name|isClosed
argument_list|()
condition|)
block|{
if|if
condition|(
name|descriptor
operator|.
name|getCustomConnectionSupplier
argument_list|()
operator|!=
literal|null
condition|)
name|c
operator|=
name|descriptor
operator|.
name|getCustomConnectionSupplier
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
else|else
name|c
operator|=
name|dataSource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|addConnection
argument_list|(
name|connectionName
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
comment|// wrap transaction-attached connections in a decorator that prevents them from being closed by callers, as
comment|// transaction should take care of them on commit or rollback.
return|return
operator|new
name|TransactionConnectionDecorator
argument_list|(
name|c
argument_list|)
return|;
block|}
specifier|protected
name|Connection
name|getExistingConnection
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|connections
operator|!=
literal|null
operator|)
condition|?
name|connections
operator|.
name|get
argument_list|(
name|name
argument_list|)
else|:
literal|null
return|;
block|}
specifier|protected
name|Connection
name|addConnection
parameter_list|(
name|String
name|connectionName
parameter_list|,
name|Connection
name|connection
parameter_list|)
block|{
name|setIsolationLevelFrom
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|TransactionConnectionDecorator
name|wrapper
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|listeners
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TransactionListener
name|listener
range|:
name|listeners
control|)
block|{
name|connection
operator|=
name|listener
operator|.
name|decorateConnection
argument_list|(
name|this
argument_list|,
name|connection
argument_list|)
expr_stmt|;
block|}
name|wrapper
operator|=
operator|new
name|TransactionConnectionDecorator
argument_list|(
name|connection
argument_list|)
expr_stmt|;
for|for
control|(
name|TransactionListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|willAddConnection
argument_list|(
name|this
argument_list|,
name|connectionName
argument_list|,
name|wrapper
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|connections
operator|==
literal|null
condition|)
block|{
comment|// transaction is single-threaded, so using a non-concurrent map...
name|connections
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|wrapper
operator|==
literal|null
condition|)
name|wrapper
operator|=
operator|new
name|TransactionConnectionDecorator
argument_list|(
name|connection
argument_list|)
expr_stmt|;
if|if
condition|(
name|connections
operator|.
name|put
argument_list|(
name|connectionName
argument_list|,
name|wrapper
argument_list|)
operator|!=
name|wrapper
condition|)
block|{
name|connectionAdded
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
return|return
name|wrapper
return|;
block|}
specifier|private
name|void
name|setIsolationLevelFrom
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
if|if
condition|(
name|descriptor
operator|.
name|getIsolation
argument_list|()
operator|!=
name|TransactionDescriptor
operator|.
name|ISOLATION_DEFAULT
condition|)
block|{
try|try
block|{
name|defaultIsolationLevel
operator|=
name|connection
operator|.
name|getTransactionIsolation
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setTransactionIsolation
argument_list|(
name|descriptor
operator|.
name|getIsolation
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unable to set required isolation level: "
operator|+
name|descriptor
operator|.
name|getIsolation
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|void
name|connectionAdded
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
comment|// implicitly begin transaction
if|if
condition|(
name|status
operator|==
name|BaseTransaction
operator|.
name|STATUS_NO_TRANSACTION
condition|)
block|{
name|begin
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|!=
name|BaseTransaction
operator|.
name|STATUS_ACTIVE
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Transaction must have 'STATUS_ACTIVE' to add a connection. "
operator|+
literal|"Current status: "
operator|+
name|BaseTransaction
operator|.
name|decodeStatus
argument_list|(
name|status
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**      * Closes all connections associated with transaction.      */
specifier|protected
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|connections
operator|==
literal|null
operator|||
name|connections
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Connection
name|c
range|:
name|connections
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
comment|// make sure we unwrap TX connection before closing it, as the TX wrapper's "close" does nothing.
name|c
operator|.
name|unwrap
argument_list|(
name|Connection
operator|.
name|class
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
comment|// TODO: chain exceptions...
comment|// ignore for now
block|}
finally|finally
block|{
comment|// restore connection default isolation level ...
if|if
condition|(
name|defaultIsolationLevel
operator|!=
operator|-
literal|1
condition|)
block|{
try|try
block|{
name|c
operator|.
name|setTransactionIsolation
argument_list|(
name|defaultIsolationLevel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ignore
parameter_list|)
block|{
comment|// have no meaningful options here...
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

