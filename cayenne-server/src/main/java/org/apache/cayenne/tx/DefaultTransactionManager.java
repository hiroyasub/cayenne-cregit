begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tx
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|log
operator|.
name|JdbcEventLogger
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|DefaultTransactionManager
implements|implements
name|TransactionManager
block|{
specifier|private
name|TransactionFactory
name|txFactory
decl_stmt|;
specifier|private
name|JdbcEventLogger
name|jdbcEventLogger
decl_stmt|;
specifier|public
name|DefaultTransactionManager
parameter_list|(
annotation|@
name|Inject
name|TransactionFactory
name|txFactory
parameter_list|,
annotation|@
name|Inject
name|JdbcEventLogger
name|jdbcEventLogger
parameter_list|)
block|{
name|this
operator|.
name|txFactory
operator|=
name|txFactory
expr_stmt|;
name|this
operator|.
name|jdbcEventLogger
operator|=
name|jdbcEventLogger
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|performInTransaction
parameter_list|(
name|TransactionalOperation
argument_list|<
name|T
argument_list|>
name|op
parameter_list|)
block|{
return|return
name|performInTransaction
argument_list|(
name|op
argument_list|,
name|DoNothingTransactionListener
operator|.
name|getInstance
argument_list|()
argument_list|,
name|TransactionDescriptor
operator|.
name|defaultDescriptor
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|performInTransaction
parameter_list|(
name|TransactionalOperation
argument_list|<
name|T
argument_list|>
name|op
parameter_list|,
name|TransactionListener
name|callback
parameter_list|)
block|{
return|return
name|performInTransaction
argument_list|(
name|op
argument_list|,
name|callback
argument_list|,
name|TransactionDescriptor
operator|.
name|defaultDescriptor
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @since 4.1      */
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|performInTransaction
parameter_list|(
name|TransactionalOperation
argument_list|<
name|T
argument_list|>
name|op
parameter_list|,
name|TransactionDescriptor
name|descriptor
parameter_list|)
block|{
return|return
name|performInTransaction
argument_list|(
name|op
argument_list|,
name|DoNothingTransactionListener
operator|.
name|getInstance
argument_list|()
argument_list|,
name|descriptor
argument_list|)
return|;
block|}
comment|/**      * @since 4.1      */
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|performInTransaction
parameter_list|(
name|TransactionalOperation
argument_list|<
name|T
argument_list|>
name|op
parameter_list|,
name|TransactionListener
name|callback
parameter_list|,
name|TransactionDescriptor
name|descriptor
parameter_list|)
block|{
name|BaseTransactionHandler
name|handler
init|=
name|getHandler
argument_list|(
name|descriptor
argument_list|)
decl_stmt|;
return|return
name|handler
operator|.
name|handle
argument_list|(
name|op
argument_list|,
name|callback
argument_list|,
name|descriptor
argument_list|)
return|;
block|}
specifier|protected
name|BaseTransactionHandler
name|getHandler
parameter_list|(
name|TransactionDescriptor
name|descriptor
parameter_list|)
block|{
switch|switch
condition|(
name|descriptor
operator|.
name|getPropagation
argument_list|()
condition|)
block|{
comment|// MANDATORY requires transaction to exists
case|case
name|MANDATORY
case|:
return|return
operator|new
name|MandatoryTransactionHandler
argument_list|(
name|txFactory
argument_list|,
name|jdbcEventLogger
argument_list|)
return|;
comment|// NESTED can join existing or create new
case|case
name|NESTED
case|:
return|return
operator|new
name|NestedTransactionHandler
argument_list|(
name|txFactory
argument_list|,
name|jdbcEventLogger
argument_list|)
return|;
comment|// REQUIRES_NEW should always create new transaction
case|case
name|REQUIRES_NEW
case|:
return|return
operator|new
name|RequiresNewTransactionHandler
argument_list|(
name|txFactory
argument_list|,
name|jdbcEventLogger
argument_list|)
return|;
block|}
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unsupported transaction propagation: "
operator|+
name|descriptor
operator|.
name|getPropagation
argument_list|()
argument_list|)
throw|;
block|}
specifier|private
specifier|static
class|class
name|NestedTransactionHandler
extends|extends
name|BaseTransactionHandler
block|{
specifier|private
name|NestedTransactionHandler
parameter_list|(
name|TransactionFactory
name|txFactory
parameter_list|,
name|JdbcEventLogger
name|jdbcEventLogger
parameter_list|)
block|{
name|super
argument_list|(
name|txFactory
argument_list|,
name|jdbcEventLogger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|handle
parameter_list|(
name|TransactionalOperation
argument_list|<
name|T
argument_list|>
name|op
parameter_list|,
name|TransactionListener
name|callback
parameter_list|,
name|TransactionDescriptor
name|descriptor
parameter_list|)
block|{
name|Transaction
name|currentTx
init|=
name|BaseTransaction
operator|.
name|getThreadTransaction
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTx
operator|!=
literal|null
condition|)
block|{
return|return
name|performInTransaction
argument_list|(
name|currentTx
argument_list|,
name|op
argument_list|,
name|callback
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|performInNewTransaction
argument_list|(
name|op
argument_list|,
name|callback
argument_list|,
name|descriptor
argument_list|)
return|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|MandatoryTransactionHandler
extends|extends
name|BaseTransactionHandler
block|{
specifier|private
name|MandatoryTransactionHandler
parameter_list|(
name|TransactionFactory
name|txFactory
parameter_list|,
name|JdbcEventLogger
name|jdbcEventLogger
parameter_list|)
block|{
name|super
argument_list|(
name|txFactory
argument_list|,
name|jdbcEventLogger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|handle
parameter_list|(
name|TransactionalOperation
argument_list|<
name|T
argument_list|>
name|op
parameter_list|,
name|TransactionListener
name|callback
parameter_list|,
name|TransactionDescriptor
name|descriptor
parameter_list|)
block|{
name|Transaction
name|currentTx
init|=
name|BaseTransaction
operator|.
name|getThreadTransaction
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTx
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Transaction operation should join to existing transaction but none found."
argument_list|)
throw|;
block|}
return|return
name|performInTransaction
argument_list|(
name|currentTx
argument_list|,
name|op
argument_list|,
name|callback
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|RequiresNewTransactionHandler
extends|extends
name|BaseTransactionHandler
block|{
specifier|private
name|RequiresNewTransactionHandler
parameter_list|(
name|TransactionFactory
name|txFactory
parameter_list|,
name|JdbcEventLogger
name|jdbcEventLogger
parameter_list|)
block|{
name|super
argument_list|(
name|txFactory
argument_list|,
name|jdbcEventLogger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|handle
parameter_list|(
name|TransactionalOperation
argument_list|<
name|T
argument_list|>
name|op
parameter_list|,
name|TransactionListener
name|callback
parameter_list|,
name|TransactionDescriptor
name|descriptor
parameter_list|)
block|{
name|Transaction
name|currentTx
init|=
name|BaseTransaction
operator|.
name|getThreadTransaction
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|performInNewTransaction
argument_list|(
name|op
argument_list|,
name|callback
argument_list|,
name|descriptor
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|currentTx
operator|!=
literal|null
condition|)
block|{
comment|// restore old transaction, if where set
name|BaseTransaction
operator|.
name|bindThreadTransaction
argument_list|(
name|currentTx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
specifier|static
specifier|abstract
class|class
name|BaseTransactionHandler
block|{
specifier|private
name|TransactionFactory
name|txFactory
decl_stmt|;
specifier|private
name|JdbcEventLogger
name|jdbcEventLogger
decl_stmt|;
specifier|private
name|BaseTransactionHandler
parameter_list|(
name|TransactionFactory
name|txFactory
parameter_list|,
name|JdbcEventLogger
name|jdbcEventLogger
parameter_list|)
block|{
name|this
operator|.
name|txFactory
operator|=
name|txFactory
expr_stmt|;
name|this
operator|.
name|jdbcEventLogger
operator|=
name|jdbcEventLogger
expr_stmt|;
block|}
specifier|protected
specifier|abstract
parameter_list|<
name|T
parameter_list|>
name|T
name|handle
parameter_list|(
name|TransactionalOperation
argument_list|<
name|T
argument_list|>
name|op
parameter_list|,
name|TransactionListener
name|callback
parameter_list|,
name|TransactionDescriptor
name|descriptor
parameter_list|)
function_decl|;
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|performInNewTransaction
parameter_list|(
name|TransactionalOperation
argument_list|<
name|T
argument_list|>
name|op
parameter_list|,
name|TransactionListener
name|callback
parameter_list|,
name|TransactionDescriptor
name|descriptor
parameter_list|)
block|{
name|Transaction
name|tx
init|=
name|txFactory
operator|.
name|createTransaction
argument_list|(
name|descriptor
argument_list|)
decl_stmt|;
name|BaseTransaction
operator|.
name|bindThreadTransaction
argument_list|(
name|tx
argument_list|)
expr_stmt|;
try|try
block|{
name|T
name|result
init|=
name|performInTransaction
argument_list|(
name|tx
argument_list|,
name|op
argument_list|,
name|callback
argument_list|)
decl_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|ex
parameter_list|)
block|{
name|tx
operator|.
name|setRollbackOnly
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|tx
operator|.
name|setRollbackOnly
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|BaseTransaction
operator|.
name|bindThreadTransaction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx
operator|.
name|isRollbackOnly
argument_list|()
condition|)
block|{
try|try
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// although we don't expect an exception here, print the
comment|// stack, as there have been some Cayenne bugs already
comment|// (CAY-557) that were masked by this 'catch' clause.
name|jdbcEventLogger
operator|.
name|logQueryError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|performInTransaction
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|TransactionalOperation
argument_list|<
name|T
argument_list|>
name|op
parameter_list|,
name|TransactionListener
name|callback
parameter_list|)
block|{
name|tx
operator|.
name|addListener
argument_list|(
name|callback
argument_list|)
expr_stmt|;
return|return
name|op
operator|.
name|perform
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

