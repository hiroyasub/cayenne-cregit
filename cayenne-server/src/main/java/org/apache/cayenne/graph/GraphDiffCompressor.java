begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A utility class that removes redundant and mutually exclusive graph changes from the  * graph diff.  *   * @since 3.0  */
end_comment

begin_class
specifier|public
class|class
name|GraphDiffCompressor
block|{
specifier|public
name|GraphDiff
name|compress
parameter_list|(
name|GraphDiff
name|diff
parameter_list|)
block|{
if|if
condition|(
name|diff
operator|.
name|isNoop
argument_list|()
condition|)
block|{
return|return
name|diff
return|;
block|}
name|CompressAction
name|action
init|=
operator|new
name|CompressAction
argument_list|()
decl_stmt|;
name|diff
operator|.
name|apply
argument_list|(
name|action
argument_list|)
expr_stmt|;
return|return
name|action
operator|.
name|getCompressedDiff
argument_list|()
return|;
block|}
specifier|final
class|class
name|CompressAction
implements|implements
name|GraphChangeHandler
block|{
specifier|private
name|List
argument_list|<
name|GraphDiff
argument_list|>
name|compressed
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Object
argument_list|,
name|List
argument_list|<
name|NodeDiff
argument_list|>
argument_list|>
name|diffsByNode
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Object
argument_list|>
name|deletedNodes
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Object
argument_list|>
name|createdNodes
decl_stmt|;
name|GraphDiff
name|getCompressedDiff
parameter_list|()
block|{
comment|// remove deleted nodes...
if|if
condition|(
name|deletedNodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|nodeId
range|:
name|deletedNodes
control|)
block|{
name|Iterator
argument_list|<
name|GraphDiff
argument_list|>
name|it
init|=
name|compressed
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// if the node was inserted in the same transaction and later deleted,
comment|// remove all its ops. Otherwise preserve arc ops (since delete rules
comment|// depend on them), and delete operation itself.
comment|// TODO: andrus 2008/02/04 - this doesn't take into account a
comment|// possibility that a deleted node was re-inserted... Although I don't
comment|// see how this could possibly happen with the present Cayenne API.
if|if
condition|(
name|createdNodes
operator|!=
literal|null
operator|&&
name|createdNodes
operator|.
name|contains
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeDiff
name|diff
init|=
operator|(
name|NodeDiff
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeId
operator|.
name|equals
argument_list|(
name|diff
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeDiff
name|diff
init|=
operator|(
name|NodeDiff
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeId
operator|.
name|equals
argument_list|(
name|diff
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|diff
operator|instanceof
name|NodePropertyChangeOperation
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
operator|new
name|CompoundDiff
argument_list|(
name|compressed
argument_list|)
return|;
block|}
specifier|public
name|void
name|arcCreated
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|Object
name|targetNodeId
parameter_list|,
name|Object
name|arcId
parameter_list|)
block|{
if|if
condition|(
name|targetNodeId
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|NodeDiff
argument_list|>
name|diffs
init|=
name|diffsByNode
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|diffs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|diffs
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|NodeDiff
name|diff
init|=
name|diffs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|instanceof
name|ArcDeleteOperation
condition|)
block|{
name|ArcDeleteOperation
name|arcDiff
init|=
operator|(
name|ArcDeleteOperation
operator|)
name|diff
decl_stmt|;
if|if
condition|(
name|arcId
operator|.
name|equals
argument_list|(
name|arcDiff
operator|.
name|getArcId
argument_list|()
argument_list|)
operator|&&
name|targetNodeId
operator|.
name|equals
argument_list|(
name|arcDiff
operator|.
name|targetNodeId
argument_list|)
condition|)
block|{
name|diffs
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|compressed
operator|.
name|remove
argument_list|(
name|arcDiff
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
block|}
name|registerDiff
argument_list|(
operator|new
name|ArcCreateOperation
argument_list|(
name|nodeId
argument_list|,
name|targetNodeId
argument_list|,
name|arcId
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|arcDeleted
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|Object
name|targetNodeId
parameter_list|,
name|Object
name|arcId
parameter_list|)
block|{
if|if
condition|(
name|targetNodeId
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|NodeDiff
argument_list|>
name|diffs
init|=
name|diffsByNode
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|diffs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|diffs
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|NodeDiff
name|diff
init|=
name|diffs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|instanceof
name|ArcCreateOperation
condition|)
block|{
name|ArcCreateOperation
name|arcDiff
init|=
operator|(
name|ArcCreateOperation
operator|)
name|diff
decl_stmt|;
if|if
condition|(
name|arcId
operator|.
name|equals
argument_list|(
name|arcDiff
operator|.
name|getArcId
argument_list|()
argument_list|)
operator|&&
name|targetNodeId
operator|.
name|equals
argument_list|(
name|arcDiff
operator|.
name|targetNodeId
argument_list|)
condition|)
block|{
name|diffs
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|compressed
operator|.
name|remove
argument_list|(
name|arcDiff
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
block|}
name|registerDiff
argument_list|(
operator|new
name|ArcDeleteOperation
argument_list|(
name|nodeId
argument_list|,
name|targetNodeId
argument_list|,
name|arcId
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|nodeCreated
parameter_list|(
name|Object
name|nodeId
parameter_list|)
block|{
name|registerDiff
argument_list|(
operator|new
name|NodeCreateOperation
argument_list|(
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|createdNodes
operator|==
literal|null
condition|)
block|{
name|createdNodes
operator|=
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|createdNodes
operator|.
name|add
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|nodeIdChanged
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|Object
name|newId
parameter_list|)
block|{
name|registerDiff
argument_list|(
operator|new
name|NodeIdChangeOperation
argument_list|(
name|nodeId
argument_list|,
name|newId
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|nodeRemoved
parameter_list|(
name|Object
name|nodeId
parameter_list|)
block|{
name|registerDiff
argument_list|(
operator|new
name|NodeDeleteOperation
argument_list|(
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|deletedNodes
operator|==
literal|null
condition|)
block|{
name|deletedNodes
operator|=
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|deletedNodes
operator|.
name|add
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|nodePropertyChanged
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|String
name|property
parameter_list|,
name|Object
name|oldValue
parameter_list|,
name|Object
name|newValue
parameter_list|)
block|{
name|List
argument_list|<
name|NodeDiff
argument_list|>
name|diffs
init|=
name|diffsByNode
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|diffs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|diffs
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|NodeDiff
name|diff
init|=
name|diffs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|instanceof
name|NodePropertyChangeOperation
condition|)
block|{
name|NodePropertyChangeOperation
name|propertyDiff
init|=
operator|(
name|NodePropertyChangeOperation
operator|)
name|diff
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|equals
argument_list|(
name|propertyDiff
operator|.
name|getProperty
argument_list|()
argument_list|)
condition|)
block|{
name|propertyDiff
operator|.
name|setNewValue
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
name|registerDiff
argument_list|(
operator|new
name|NodePropertyChangeOperation
argument_list|(
name|nodeId
argument_list|,
name|property
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|registerDiff
parameter_list|(
name|NodeDiff
name|diff
parameter_list|)
block|{
name|compressed
operator|.
name|add
argument_list|(
name|diff
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeDiff
argument_list|>
name|diffs
init|=
name|diffsByNode
operator|.
name|get
argument_list|(
name|diff
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|diffs
operator|==
literal|null
condition|)
block|{
name|diffs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|diffsByNode
operator|.
name|put
argument_list|(
name|diff
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|diffs
argument_list|)
expr_stmt|;
block|}
name|diffs
operator|.
name|add
argument_list|(
name|diff
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

