begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Optimized mutable single-entry map.  *<p>  * This implementation is compatible with general {@link Map} contract, including {@link Map#equals(Object)},  * {@link Map#hashCode()} and {@link java.util.AbstractMap#toString()} implementations.  *<p>  * This Map can store only one key that is defined at creation time and can't be changed.  * This map will throw {@link IllegalArgumentException} on any put operation with the wrong key  * and return {@code null} on get.  *<p>  * This map will be effectively empty after putting null value.  *  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|SingleEntryMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|,
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|3848347748971431847L
decl_stmt|;
specifier|private
specifier|final
name|K
name|key
decl_stmt|;
specifier|private
name|V
name|value
decl_stmt|;
comment|/**      * Create empty map      *      * @param key that can be stored in this map, can't be null      */
specifier|public
name|SingleEntryMap
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|this
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create map with single key-value entry      *      * @param key that can be stored in this map, can't be null      * @param value to store, if null map will be empty.      */
specifier|public
name|SingleEntryMap
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
name|this
operator|.
name|value
operator|==
literal|null
condition|?
name|emptySet
argument_list|()
else|:
name|singleton
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|this
operator|.
name|value
operator|!=
literal|null
operator|&&
name|this
operator|.
name|key
operator|.
name|equals
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|this
operator|.
name|value
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|this
operator|.
name|value
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|this
operator|.
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|this
operator|.
name|key
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|?
name|this
operator|.
name|value
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|key
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|setValue
argument_list|(
name|value
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This map supports only key '"
operator|+
name|this
operator|.
name|key
operator|+
literal|"'"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|this
operator|.
name|key
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|?
name|setValue
argument_list|(
literal|null
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|map
operator|.
name|forEach
argument_list|(
name|this
operator|::
name|put
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
name|value
operator|==
literal|null
condition|?
name|emptySet
argument_list|()
else|:
name|singleton
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
return|return
name|value
operator|==
literal|null
condition|?
name|emptySet
argument_list|()
else|:
name|singleton
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|V
name|oldValue
init|=
name|this
operator|.
name|value
decl_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
return|return
name|oldValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Map
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
return|return
name|m
operator|.
name|size
argument_list|()
operator|==
name|size
argument_list|()
operator|&&
operator|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|equals
argument_list|(
name|m
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
operator|==
literal|null
condition|?
literal|0
else|:
name|key
operator|.
name|hashCode
argument_list|()
operator|^
name|value
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|value
operator|==
literal|null
condition|?
literal|"{}"
else|:
literal|"{"
operator|+
name|key
operator|+
literal|"="
operator|+
name|value
operator|+
literal|"}"
return|;
block|}
comment|/* below is a set of methods with default implementation in Map interface */
annotation|@
name|Override
specifier|public
name|void
name|forEach
parameter_list|(
name|BiConsumer
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|>
name|action
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|action
operator|.
name|accept
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|V
name|getOrDefault
parameter_list|(
name|Object
name|key
parameter_list|,
name|V
name|defaultValue
parameter_list|)
block|{
return|return
name|this
operator|.
name|key
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|&&
name|value
operator|!=
literal|null
condition|?
name|value
else|:
name|defaultValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|putIfAbsent
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|key
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|value
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|this
operator|.
name|value
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This map supports only key '"
operator|+
name|this
operator|.
name|key
operator|+
literal|"'"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|computeIfAbsent
parameter_list|(
name|K
name|key
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|mappingFunction
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|key
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|mappingFunction
operator|.
name|apply
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This map supports only key '"
operator|+
name|this
operator|.
name|key
operator|+
literal|"'"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|computeIfPresent
parameter_list|(
name|K
name|key
parameter_list|,
name|BiFunction
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|remappingFunction
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|this
operator|.
name|key
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|value
operator|=
name|remappingFunction
operator|.
name|apply
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|compute
parameter_list|(
name|K
name|key
parameter_list|,
name|BiFunction
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
super|super
name|V
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|remappingFunction
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|key
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|value
operator|=
name|remappingFunction
operator|.
name|apply
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This map supports only key '"
operator|+
name|this
operator|.
name|key
operator|+
literal|"'"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|merge
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|newValue
parameter_list|,
name|BiFunction
argument_list|<
name|?
super|super
name|V
argument_list|,
name|?
super|super
name|V
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|remappingFunction
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|key
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|value
operator|=
name|value
operator|==
literal|null
condition|?
name|newValue
else|:
name|remappingFunction
operator|.
name|apply
argument_list|(
name|value
argument_list|,
name|newValue
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This map supports only key '"
operator|+
name|this
operator|.
name|key
operator|+
literal|"'"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|replace
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|key
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|&&
name|this
operator|.
name|value
operator|!=
literal|null
condition|)
block|{
name|V
name|oldValue
init|=
name|this
operator|.
name|value
decl_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
return|return
name|oldValue
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|replace
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|oldValue
parameter_list|,
name|V
name|newValue
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|key
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|&&
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|oldValue
argument_list|)
condition|)
block|{
name|value
operator|=
name|newValue
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|key
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|&&
name|this
operator|.
name|value
operator|!=
literal|null
operator|&&
name|this
operator|.
name|value
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|this
operator|.
name|value
operator|=
literal|null
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

