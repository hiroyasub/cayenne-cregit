begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|QueryResultItem
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Generic implementation of QueryResult using List as QueryResultItem storage.  *  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|GenericQueryResult
parameter_list|<
name|T
parameter_list|>
implements|implements
name|QueryResult
argument_list|<
name|T
argument_list|>
block|{
specifier|protected
name|Class
argument_list|<
name|T
argument_list|>
name|resultClass
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|QueryResultItem
argument_list|>
name|resultItems
decl_stmt|;
specifier|public
name|GenericQueryResult
parameter_list|(
name|List
argument_list|<
name|QueryResultItem
argument_list|>
name|resultItems
parameter_list|)
block|{
name|this
operator|.
name|resultItems
operator|=
name|resultItems
expr_stmt|;
block|}
specifier|public
name|GenericQueryResult
parameter_list|(
name|List
argument_list|<
name|QueryResultItem
argument_list|>
name|resultItems
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|resultClass
parameter_list|)
block|{
name|this
argument_list|(
name|resultItems
argument_list|)
expr_stmt|;
name|this
operator|.
name|resultClass
operator|=
name|resultClass
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|resultItems
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isList
parameter_list|()
block|{
for|for
control|(
name|QueryResultItem
name|item
range|:
name|resultItems
control|)
block|{
if|if
condition|(
name|item
operator|.
name|isSelectResult
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|firstList
parameter_list|()
block|{
for|for
control|(
name|QueryResultItem
name|item
range|:
name|resultItems
control|)
block|{
if|if
condition|(
name|item
operator|.
name|isSelectResult
argument_list|()
condition|)
block|{
return|return
name|item
operator|.
name|getSelectResult
argument_list|()
return|;
block|}
block|}
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Result is not a select result."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
index|[]
name|firstBatchUpdateCount
parameter_list|()
block|{
for|for
control|(
name|QueryResultItem
name|item
range|:
name|resultItems
control|)
block|{
if|if
condition|(
operator|!
name|item
operator|.
name|isSelectResult
argument_list|()
condition|)
block|{
return|return
name|item
operator|.
name|getBatchUpdateCounts
argument_list|()
return|;
block|}
block|}
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Result is not a batch update count."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|firstUpdateCount
parameter_list|()
block|{
for|for
control|(
name|QueryResultItem
name|item
range|:
name|resultItems
control|)
block|{
if|if
condition|(
operator|!
name|item
operator|.
name|isSelectResult
argument_list|()
condition|)
block|{
return|return
name|item
operator|.
name|getUpdateCount
argument_list|()
return|;
block|}
block|}
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Result is not an update count."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|QueryResultItem
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|resultItems
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
end_class

end_unit

