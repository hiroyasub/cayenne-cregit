begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|log
operator|.
name|CommonsJdbcEventLogger
operator|.
name|TRIM_VALUES_THRESHOLD
import|;
end_import

begin_comment
comment|/**  * helper class to generate pseudo-GUID sequences.  *  */
end_comment

begin_class
specifier|public
class|class
name|IDUtil
block|{
specifier|private
specifier|static
specifier|final
name|int
name|BITMASK_0
init|=
literal|0xff
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BITMASK_1
init|=
literal|0xff
operator|<<
literal|8
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BITMASK_2
init|=
literal|0xff
operator|<<
literal|16
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BITMASK_3
init|=
literal|0xff
operator|<<
literal|24
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BITMASK_4
init|=
literal|0xff
operator|<<
literal|32
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BITMASK_5
init|=
literal|0xff
operator|<<
literal|40
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BITMASK_6
init|=
literal|0xff
operator|<<
literal|48
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BITMASK_7
init|=
literal|0xff
operator|<<
literal|56
decl_stmt|;
comment|// this id sequence needs to be long enough to feel
comment|// the gap within the same timestamp millisecond
specifier|private
specifier|static
specifier|volatile
name|int
name|currentId
decl_stmt|;
specifier|private
specifier|static
name|MessageDigest
name|md
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|ipAddress
decl_stmt|;
static|static
block|{
try|try
block|{
name|md
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't initialize MessageDigest."
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|ipAddress
operator|=
name|java
operator|.
name|net
operator|.
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getAddress
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
comment|// use loopback interface
name|ipAddress
operator|=
operator|new
name|byte
index|[]
block|{
literal|127
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|}
expr_stmt|;
block|}
block|}
comment|/**      * Prints a byte value to a StringBuffer as a double digit hex value.      *      * @since 1.2 Since 3.0 signature has changed to take Appendable argument.      */
specifier|public
specifier|static
name|void
name|appendFormattedByte
parameter_list|(
name|Appendable
name|buffer
parameter_list|,
name|byte
name|byteValue
parameter_list|)
block|{
specifier|final
name|String
name|digits
init|=
literal|"0123456789ABCDEF"
decl_stmt|;
try|try
block|{
name|buffer
operator|.
name|append
argument_list|(
name|digits
operator|.
name|charAt
argument_list|(
operator|(
name|byteValue
operator|>>>
literal|4
operator|)
operator|&
literal|0xF
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|digits
operator|.
name|charAt
argument_list|(
name|byteValue
operator|&
literal|0xF
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error appending data to buffer"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|appendFormattedBytes
parameter_list|(
name|Appendable
name|buffer
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
block|{
try|try
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"< "
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|bytes
operator|.
name|length
decl_stmt|;
name|boolean
name|trimming
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|len
operator|>
name|TRIM_VALUES_THRESHOLD
condition|)
block|{
name|len
operator|=
name|TRIM_VALUES_THRESHOLD
expr_stmt|;
name|trimming
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|appendFormattedByte
argument_list|(
name|buffer
argument_list|,
name|bytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trimming
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"..."
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error appending data to buffer"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * @param length the length of returned byte[]      * @return A pseudo-unique byte array of the specified length. Length must be at least      *         16 bytes, or an exception is thrown.      * @since 1.0.2      */
specifier|public
specifier|synchronized
specifier|static
name|byte
index|[]
name|pseudoUniqueByteSequence
parameter_list|(
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|<
literal|16
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't generate unique byte sequence shorter than 16 bytes: "
operator|+
name|length
argument_list|)
throw|;
block|}
if|if
condition|(
name|length
operator|==
literal|16
condition|)
block|{
return|return
name|pseudoUniqueByteSequence16
argument_list|()
return|;
block|}
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|length
operator|-
literal|16
condition|;
name|i
operator|+=
literal|16
control|)
block|{
name|byte
index|[]
name|nextSequence
init|=
name|pseudoUniqueByteSequence16
argument_list|()
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nextSequence
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|,
name|i
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
comment|// leftovers?
name|int
name|leftoverLen
init|=
name|length
operator|%
literal|16
decl_stmt|;
if|if
condition|(
name|leftoverLen
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|nextSequence
init|=
name|pseudoUniqueByteSequence16
argument_list|()
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nextSequence
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|,
name|length
operator|-
name|leftoverLen
argument_list|,
name|leftoverLen
argument_list|)
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
specifier|public
specifier|synchronized
specifier|static
name|byte
index|[]
name|pseudoUniqueSecureByteSequence
parameter_list|(
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|<
literal|16
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't generate unique byte sequence shorter than 16 bytes: "
operator|+
name|length
argument_list|)
throw|;
block|}
if|if
condition|(
name|length
operator|==
literal|16
condition|)
block|{
return|return
name|pseudoUniqueSecureByteSequence16
argument_list|()
return|;
block|}
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|length
operator|-
literal|16
condition|;
name|i
operator|+=
literal|16
control|)
block|{
name|byte
index|[]
name|nextSequence
init|=
name|pseudoUniqueSecureByteSequence16
argument_list|()
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nextSequence
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|,
name|i
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
comment|// leftovers?
name|int
name|leftoverLen
init|=
name|length
operator|%
literal|16
decl_stmt|;
if|if
condition|(
name|leftoverLen
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|nextSequence
init|=
name|pseudoUniqueSecureByteSequence16
argument_list|()
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nextSequence
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|,
name|length
operator|-
name|leftoverLen
argument_list|,
name|leftoverLen
argument_list|)
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|pseudoUniqueByteSequence8
parameter_list|()
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
comment|// bytes 0..2 - incrementing #
comment|// bytes 3..5 - timestamp high bytes
comment|// bytes 6..7 - IP address
name|int
name|nextInt
init|=
name|nextInt
argument_list|()
decl_stmt|;
name|bytes
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|nextInt
operator|&
operator|(
literal|0xff
operator|<<
literal|16
operator|)
operator|)
operator|>>>
literal|16
operator|)
expr_stmt|;
name|bytes
index|[
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|nextInt
operator|&
operator|(
literal|0xff
operator|<<
literal|8
operator|)
operator|)
operator|>>>
literal|8
operator|)
expr_stmt|;
name|bytes
index|[
literal|2
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
name|nextInt
operator|&
literal|0xff
operator|)
expr_stmt|;
comment|// append 3 high bytes of timestamp
name|long
name|t
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|bytes
index|[
literal|3
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|t
operator|&
name|BITMASK_2
operator|)
operator|>>>
literal|16
operator|)
expr_stmt|;
name|bytes
index|[
literal|4
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|t
operator|&
name|BITMASK_1
operator|)
operator|>>>
literal|8
operator|)
expr_stmt|;
name|bytes
index|[
literal|5
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
name|t
operator|&
name|BITMASK_0
operator|)
expr_stmt|;
comment|// append 2 last bytes of IP address
name|System
operator|.
name|arraycopy
argument_list|(
name|ipAddress
argument_list|,
literal|2
argument_list|,
name|bytes
argument_list|,
literal|6
argument_list|,
literal|2
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
block|}
comment|/**      * @return A pseudo unique 16-byte array.      */
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|pseudoUniqueByteSequence16
parameter_list|()
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
comment|// bytes 0..3 - incrementing #
comment|// bytes 4..11 - timestamp
comment|// bytes 12..15 - IP address
name|int
name|nextInt
init|=
name|nextInt
argument_list|()
decl_stmt|;
name|bytes
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|nextInt
operator|&
name|BITMASK_3
operator|)
operator|>>>
literal|24
operator|)
expr_stmt|;
name|bytes
index|[
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|nextInt
operator|&
name|BITMASK_2
operator|)
operator|>>>
literal|16
operator|)
expr_stmt|;
name|bytes
index|[
literal|2
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|nextInt
operator|&
name|BITMASK_1
operator|)
operator|>>>
literal|8
operator|)
expr_stmt|;
name|bytes
index|[
literal|3
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
name|nextInt
operator|&
name|BITMASK_0
operator|)
expr_stmt|;
name|long
name|t
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|bytes
index|[
literal|4
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|t
operator|&
name|BITMASK_7
operator|)
operator|>>>
literal|56
operator|)
expr_stmt|;
name|bytes
index|[
literal|5
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|t
operator|&
name|BITMASK_6
operator|)
operator|>>>
literal|48
operator|)
expr_stmt|;
name|bytes
index|[
literal|6
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|t
operator|&
name|BITMASK_5
operator|)
operator|>>>
literal|40
operator|)
expr_stmt|;
name|bytes
index|[
literal|7
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|t
operator|&
name|BITMASK_4
operator|)
operator|>>>
literal|32
operator|)
expr_stmt|;
name|bytes
index|[
literal|8
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|t
operator|&
name|BITMASK_3
operator|)
operator|>>>
literal|24
operator|)
expr_stmt|;
name|bytes
index|[
literal|9
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|t
operator|&
name|BITMASK_2
operator|)
operator|>>>
literal|16
operator|)
expr_stmt|;
name|bytes
index|[
literal|10
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|t
operator|&
name|BITMASK_1
operator|)
operator|>>>
literal|8
operator|)
expr_stmt|;
name|bytes
index|[
literal|11
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
name|t
operator|&
name|BITMASK_0
operator|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|ipAddress
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|,
literal|12
argument_list|,
literal|4
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
block|}
comment|/**      * @return A pseudo unique digested 16-byte array.      */
specifier|public
specifier|static
name|byte
index|[]
name|pseudoUniqueSecureByteSequence16
parameter_list|()
block|{
name|byte
index|[]
name|bytes
init|=
name|pseudoUniqueByteSequence16
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|md
init|)
block|{
return|return
name|md
operator|.
name|digest
argument_list|(
name|bytes
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|int
name|nextInt
parameter_list|()
block|{
if|if
condition|(
name|currentId
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|currentId
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|currentId
operator|++
return|;
block|}
specifier|private
name|IDUtil
parameter_list|()
block|{
block|}
block|}
end_class

end_unit

