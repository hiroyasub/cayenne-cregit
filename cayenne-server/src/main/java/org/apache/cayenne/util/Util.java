begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Member
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Cayenne
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistenceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|AdhocObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|spi
operator|.
name|DefaultAdhocObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|spi
operator|.
name|DefaultClassLoaderManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ArcProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|AttributeProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ToManyProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ToOneProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_comment
comment|/**  * Contains various unorganized static utility methods used across Cayenne.  */
end_comment

begin_class
specifier|public
class|class
name|Util
block|{
annotation|@
name|Deprecated
specifier|private
specifier|static
name|DefaultAdhocObjectFactory
name|objectFactory
decl_stmt|;
static|static
block|{
name|objectFactory
operator|=
operator|new
name|DefaultAdhocObjectFactory
argument_list|(
literal|null
argument_list|,
operator|new
name|DefaultClassLoaderManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Converts URL to file. Throws {@link IllegalArgumentException} if the URL      * is not a "file://" URL.      */
specifier|public
specifier|static
name|File
name|toFile
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
comment|// must convert spaces to %20, or URL->URI conversion may fail
name|String
name|urlString
init|=
name|url
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
name|URI
name|uri
decl_stmt|;
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|urlString
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"%20"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"URL "
operator|+
name|urlString
operator|+
literal|" can't be converted to URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|File
argument_list|(
name|uri
argument_list|)
return|;
block|}
comment|/**      * Reads file contents, returning it as a String, using System default line      * separator.      */
specifier|public
specifier|static
name|String
name|stringFromFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|stringFromFile
argument_list|(
name|file
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Reads file contents, returning it as a String, joining lines with      * provided separator.      */
specifier|public
specifier|static
name|String
name|stringFromFile
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|joinWith
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
name|joinWith
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * @param strings      *            The list of strings to join.      * @param separator      *            The separator between the strings.      * @return A single string of all the input strings separated by the      *         separator.      */
specifier|public
specifier|static
name|String
name|join
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|strings
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
if|if
condition|(
name|strings
operator|==
literal|null
operator|||
name|strings
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|separator
operator|==
literal|null
condition|)
name|separator
operator|=
literal|""
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|strings
control|)
block|{
if|if
condition|(
name|builder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|builder
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Replaces all backslashes "\" with forward slashes "/". Convenience method      * to convert path Strings to URI format.      */
specifier|public
specifier|static
name|String
name|substBackslashes
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
name|RegexUtil
operator|.
name|substBackslashes
argument_list|(
name|string
argument_list|)
return|;
block|}
comment|/**      * Looks up and returns the root cause of an exception. If none is found,      * returns supplied Throwable object unchanged. If root is found,      * recursively "unwraps" it, and returns the result to the user.      */
specifier|public
specifier|static
name|Throwable
name|unwindException
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
if|if
condition|(
name|th
operator|instanceof
name|SAXException
condition|)
block|{
name|SAXException
name|sax
init|=
operator|(
name|SAXException
operator|)
name|th
decl_stmt|;
if|if
condition|(
name|sax
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|unwindException
argument_list|(
name|sax
operator|.
name|getException
argument_list|()
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|th
operator|instanceof
name|SQLException
condition|)
block|{
name|SQLException
name|sql
init|=
operator|(
name|SQLException
operator|)
name|th
decl_stmt|;
if|if
condition|(
name|sql
operator|.
name|getNextException
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|unwindException
argument_list|(
name|sql
operator|.
name|getNextException
argument_list|()
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|th
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|unwindException
argument_list|(
name|th
operator|.
name|getCause
argument_list|()
argument_list|)
return|;
block|}
return|return
name|th
return|;
block|}
comment|/**      * Compares two objects similar to "Object.equals(Object)". Unlike      * Object.equals(..), this method doesn't throw an exception if any of the      * two objects is null.      */
specifier|public
specifier|static
name|boolean
name|nullSafeEquals
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
literal|null
condition|)
block|{
return|return
name|o2
operator|==
literal|null
return|;
block|}
comment|// Arrays must be handled differently since equals() only does
comment|// an "==" for an array and ignores equivalence. If an array, use
comment|// the Jakarta Commons Language component EqualsBuilder to determine
comment|// the types contained in the array and do individual comparisons.
if|if
condition|(
name|o1
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|EqualsBuilder
name|builder
init|=
operator|new
name|EqualsBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|isEquals
argument_list|()
return|;
block|}
else|else
block|{
comment|// It is NOT an array, so use regular equals()
return|return
name|o1
operator|.
name|equals
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
comment|/**      * Compares two objects similar to "Comparable.compareTo(Object)". Unlike      * Comparable.compareTo(..), this method doesn't throw an exception if any      * of the two objects is null.      *       * @since 1.1      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|int
name|nullSafeCompare
parameter_list|(
name|boolean
name|nullsFirst
parameter_list|,
name|Comparable
argument_list|<
name|T
argument_list|>
name|o1
parameter_list|,
name|T
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
literal|null
operator|&&
name|o2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
if|else if
condition|(
name|o1
operator|==
literal|null
condition|)
block|{
return|return
name|nullsFirst
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
if|else if
condition|(
name|o2
operator|==
literal|null
condition|)
block|{
return|return
name|nullsFirst
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns true, if the String is null or an empty string.      */
specifier|public
specifier|static
name|boolean
name|isEmptyString
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
name|string
operator|==
literal|null
operator|||
name|string
operator|.
name|length
argument_list|()
operator|==
literal|0
return|;
block|}
comment|/**      * Creates Serializable object copy using serialization/deserialization.      */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Serializable
parameter_list|>
name|T
name|cloneViaSerialization
parameter_list|(
name|T
name|object
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
return|return
name|buf
return|;
block|}
block|}
decl_stmt|;
name|ObjectOutputStream
name|out
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|ObjectInputStream
name|in
init|=
operator|new
name|ObjectInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|T
name|copy
init|=
operator|(
name|T
operator|)
name|in
operator|.
name|readObject
argument_list|()
decl_stmt|;
comment|// no need to close the stream - we created it and now will be throwing
comment|// away...
comment|// in.close();
return|return
name|copy
return|;
block|}
comment|/**      * Creates an XMLReader with default feature set. Note that all Cayenne      * internal XML parsers should probably use XMLReader obtained via this      * method for consistency sake, and can customize feature sets as needed.      */
specifier|public
specifier|static
name|XMLReader
name|createXmlReader
parameter_list|()
throws|throws
name|SAXException
throws|,
name|ParserConfigurationException
block|{
name|SAXParserFactory
name|spf
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// Create a JAXP SAXParser
name|SAXParser
name|saxParser
init|=
name|spf
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
comment|// Get the encapsulated SAX XMLReader
name|XMLReader
name|reader
init|=
name|saxParser
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
comment|// set default features
name|reader
operator|.
name|setFeature
argument_list|(
literal|"http://xml.org/sax/features/namespaces"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|reader
return|;
block|}
comment|/**      * Returns package name for the Java class as a path separated with forward      * slash ("/"). Method is used to lookup resources that are located in      * package subdirectories. For example, a String "a/b/c" will be returned      * for class name "a.b.c.ClassName".      */
specifier|public
specifier|static
name|String
name|getPackagePath
parameter_list|(
name|String
name|className
parameter_list|)
block|{
return|return
name|RegexUtil
operator|.
name|getPackagePath
argument_list|(
name|className
argument_list|)
return|;
block|}
comment|/**      * Returns an unqualified class name for the fully qualified name.      *       * @since 3.0      */
specifier|public
specifier|static
name|String
name|stripPackageName
parameter_list|(
name|String
name|className
parameter_list|)
block|{
if|if
condition|(
name|className
operator|==
literal|null
operator|||
name|className
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
name|className
return|;
name|int
name|lastDot
init|=
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|-
literal|1
operator|==
name|lastDot
operator|)
operator|||
operator|(
operator|(
name|className
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
operator|==
name|lastDot
operator|)
condition|)
return|return
name|className
return|;
return|return
name|className
operator|.
name|substring
argument_list|(
name|lastDot
operator|+
literal|1
argument_list|)
return|;
block|}
comment|/**      * Creates a mutable map out of two arrays with keys and values.      *       * @since 1.2      */
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|toMap
parameter_list|(
name|K
index|[]
name|keys
parameter_list|,
name|V
index|[]
name|values
parameter_list|)
block|{
name|int
name|keysSize
init|=
operator|(
name|keys
operator|!=
literal|null
operator|)
condition|?
name|keys
operator|.
name|length
else|:
literal|0
decl_stmt|;
name|int
name|valuesSize
init|=
operator|(
name|values
operator|!=
literal|null
operator|)
condition|?
name|values
operator|.
name|length
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|keysSize
operator|==
literal|0
operator|&&
name|valuesSize
operator|==
literal|0
condition|)
block|{
comment|// return mutable map
return|return
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
return|;
block|}
if|if
condition|(
name|keysSize
operator|!=
name|valuesSize
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The number of keys doesn't match the number of values."
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keysSize
condition|;
name|i
operator|++
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
comment|/**      * Extracts extension from the file name. Dot is not included in the      * returned string.      */
specifier|public
specifier|static
name|String
name|extractFileExtension
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|int
name|dotInd
init|=
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
comment|// if dot is in the first position,
comment|// we are dealing with a hidden file rather than an extension
return|return
operator|(
name|dotInd
operator|>
literal|0
operator|&&
name|dotInd
operator|<
name|fileName
operator|.
name|length
argument_list|()
operator|)
condition|?
name|fileName
operator|.
name|substring
argument_list|(
name|dotInd
operator|+
literal|1
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * Strips extension from the file name.      */
specifier|public
specifier|static
name|String
name|stripFileExtension
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|int
name|dotInd
init|=
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
comment|// if dot is in the first position,
comment|// we are dealing with a hidden file rather than an extension
return|return
operator|(
name|dotInd
operator|>
literal|0
operator|)
condition|?
name|fileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotInd
argument_list|)
else|:
name|fileName
return|;
block|}
comment|/**      * Strips "\n", "\r\n", "\r" from the argument string, replacing them with a      * provided character.      *       * @since 3.1      */
specifier|public
specifier|static
name|String
name|stripLineBreaks
parameter_list|(
name|String
name|string
parameter_list|,
name|char
name|replaceWith
parameter_list|)
block|{
if|if
condition|(
name|string
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|len
init|=
name|string
operator|.
name|length
argument_list|()
decl_stmt|;
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
name|len
index|]
decl_stmt|;
name|boolean
name|matched
init|=
literal|false
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
name|char
name|c
init|=
name|string
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// skip \n, \r, \r\n
if|if
condition|(
name|c
operator|==
literal|'\n'
operator|||
name|c
operator|==
literal|'\r'
condition|)
block|{
name|matched
operator|=
literal|true
expr_stmt|;
comment|// do lookahead
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|len
operator|&&
name|string
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
name|buffer
index|[
name|j
index|]
operator|=
name|replaceWith
expr_stmt|;
block|}
else|else
block|{
name|buffer
index|[
name|j
index|]
operator|=
name|c
expr_stmt|;
block|}
block|}
return|return
name|matched
condition|?
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|j
argument_list|)
else|:
name|string
return|;
block|}
comment|/**      * Encodes a string so that it can be used as an attribute value in an XML      * document. Will do conversion of the greater/less signs, quotes and      * ampersands.      */
specifier|public
specifier|static
name|String
name|encodeXmlAttribute
parameter_list|(
name|String
name|string
parameter_list|)
block|{
if|if
condition|(
name|string
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|len
init|=
name|string
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
name|string
return|;
block|}
name|StringBuilder
name|encoded
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|string
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'<'
condition|)
name|encoded
operator|.
name|append
argument_list|(
literal|"&lt;"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|c
operator|==
literal|'\"'
condition|)
name|encoded
operator|.
name|append
argument_list|(
literal|"&quot;"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|c
operator|==
literal|'>'
condition|)
name|encoded
operator|.
name|append
argument_list|(
literal|"&gt;"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|c
operator|==
literal|'\''
condition|)
name|encoded
operator|.
name|append
argument_list|(
literal|"&apos;"
argument_list|)
expr_stmt|;
if|else if
condition|(
name|c
operator|==
literal|'&'
condition|)
name|encoded
operator|.
name|append
argument_list|(
literal|"&amp;"
argument_list|)
expr_stmt|;
else|else
name|encoded
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|encoded
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Trims long strings substituting middle part with "...".      *       * @param str      *            String to trim.      * @param maxLength      *            maximum allowable length. Must be at least 5, or an      *            IllegalArgumentException is thrown.      * @return String      */
specifier|public
specifier|static
name|String
name|prettyTrim
parameter_list|(
name|String
name|str
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
if|if
condition|(
name|maxLength
operator|<
literal|5
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Algorithm for 'prettyTrim' works only with length>= 5. "
operator|+
literal|"Supplied length is "
operator|+
name|maxLength
argument_list|)
throw|;
block|}
if|if
condition|(
name|str
operator|==
literal|null
operator|||
name|str
operator|.
name|length
argument_list|()
operator|<=
name|maxLength
condition|)
block|{
return|return
name|str
return|;
block|}
comment|// find a section to cut off
name|int
name|len
init|=
name|maxLength
operator|-
literal|3
decl_stmt|;
name|int
name|startLen
init|=
name|len
operator|/
literal|2
decl_stmt|;
name|int
name|endLen
init|=
name|len
operator|-
name|startLen
decl_stmt|;
return|return
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|startLen
argument_list|)
operator|+
literal|"..."
operator|+
name|str
operator|.
name|substring
argument_list|(
name|str
operator|.
name|length
argument_list|()
operator|-
name|endLen
argument_list|)
return|;
block|}
comment|/**      * Returns a sorted iterator from an unsorted one. Use this method as a last      * resort, since it is much less efficient then just sorting a collection      * that backs the original iterator.      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Iterator
argument_list|<
name|T
argument_list|>
name|sortedIterator
parameter_list|(
name|Iterator
argument_list|<
name|T
argument_list|>
name|it
parameter_list|,
name|Comparator
argument_list|<
name|T
argument_list|>
name|comparator
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
return|return
name|list
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * Builds a hashCode of Collection.      */
specifier|public
specifier|static
name|int
name|hashCode
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|HashCodeBuilder
name|builder
init|=
operator|new
name|HashCodeBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|c
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toHashCode
argument_list|()
return|;
block|}
comment|/**      * @since 1.2      */
specifier|public
specifier|static
name|Pattern
name|sqlPatternToPattern
parameter_list|(
name|String
name|pattern
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
name|String
name|preprocessed
init|=
name|RegexUtil
operator|.
name|sqlPatternToRegex
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|int
name|flag
init|=
operator|(
name|ignoreCase
operator|)
condition|?
name|Pattern
operator|.
name|CASE_INSENSITIVE
else|:
literal|0
decl_stmt|;
return|return
name|Pattern
operator|.
name|compile
argument_list|(
name|preprocessed
argument_list|,
name|flag
argument_list|)
return|;
block|}
comment|/**      * Returns true if a Member is accessible via reflection under normal Java      * access controls.      *       * @since 1.2      */
specifier|public
specifier|static
name|boolean
name|isAccessible
parameter_list|(
name|Member
name|member
parameter_list|)
block|{
return|return
name|Modifier
operator|.
name|isPublic
argument_list|(
name|member
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
name|Modifier
operator|.
name|isPublic
argument_list|(
name|member
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getModifiers
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Creates a Java class, handling regular class names as well as      * single-dimensional arrays and primitive types.      *       * @since 1.2      * @deprecated since 3.2 this method based on statically defined class      *             loading algorithm is not going to work in environments like      *             OSGi. {@link AdhocObjectFactory} should be used as it can      *             provide the environment-specific class loading policy.      */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getJavaClass
parameter_list|(
name|String
name|className
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
return|return
name|objectFactory
operator|.
name|getJavaClass
argument_list|(
name|className
argument_list|)
return|;
block|}
specifier|static
name|void
name|setReverse
parameter_list|(
specifier|final
name|Persistent
name|sourceObject
parameter_list|,
name|String
name|propertyName
parameter_list|,
specifier|final
name|Persistent
name|targetObject
parameter_list|)
block|{
name|ArcProperty
name|property
init|=
operator|(
name|ArcProperty
operator|)
name|Cayenne
operator|.
name|getClassDescriptor
argument_list|(
name|sourceObject
argument_list|)
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
name|ArcProperty
name|reverseArc
init|=
name|property
operator|.
name|getComplimentaryReverseArc
argument_list|()
decl_stmt|;
if|if
condition|(
name|reverseArc
operator|!=
literal|null
condition|)
block|{
name|reverseArc
operator|.
name|visit
argument_list|(
operator|new
name|PropertyVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|visitToMany
parameter_list|(
name|ToManyProperty
name|property
parameter_list|)
block|{
name|property
operator|.
name|addTargetDirectly
argument_list|(
name|targetObject
argument_list|,
name|sourceObject
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitToOne
parameter_list|(
name|ToOneProperty
name|property
parameter_list|)
block|{
name|property
operator|.
name|setTarget
argument_list|(
name|targetObject
argument_list|,
name|sourceObject
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitAttribute
parameter_list|(
name|AttributeProperty
name|property
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sourceObject
operator|.
name|getObjectContext
argument_list|()
operator|.
name|getGraphManager
argument_list|()
operator|.
name|arcCreated
argument_list|(
name|targetObject
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|sourceObject
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|reverseArc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|markAsDirty
argument_list|(
name|targetObject
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|unsetReverse
parameter_list|(
specifier|final
name|Persistent
name|sourceObject
parameter_list|,
name|String
name|propertyName
parameter_list|,
specifier|final
name|Persistent
name|targetObject
parameter_list|)
block|{
name|ArcProperty
name|property
init|=
operator|(
name|ArcProperty
operator|)
name|Cayenne
operator|.
name|getClassDescriptor
argument_list|(
name|sourceObject
argument_list|)
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
name|ArcProperty
name|reverseArc
init|=
name|property
operator|.
name|getComplimentaryReverseArc
argument_list|()
decl_stmt|;
if|if
condition|(
name|reverseArc
operator|!=
literal|null
condition|)
block|{
name|reverseArc
operator|.
name|visit
argument_list|(
operator|new
name|PropertyVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|visitToMany
parameter_list|(
name|ToManyProperty
name|property
parameter_list|)
block|{
name|property
operator|.
name|removeTargetDirectly
argument_list|(
name|targetObject
argument_list|,
name|sourceObject
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitToOne
parameter_list|(
name|ToOneProperty
name|property
parameter_list|)
block|{
name|property
operator|.
name|setTarget
argument_list|(
name|targetObject
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitAttribute
parameter_list|(
name|AttributeProperty
name|property
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sourceObject
operator|.
name|getObjectContext
argument_list|()
operator|.
name|getGraphManager
argument_list|()
operator|.
name|arcDeleted
argument_list|(
name|targetObject
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|sourceObject
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|reverseArc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|markAsDirty
argument_list|(
name|targetObject
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Changes object state to MODIFIED if needed, returning true if the change      * has occurred, false if not.      */
specifier|static
name|boolean
name|markAsDirty
parameter_list|(
name|Persistent
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|.
name|getPersistenceState
argument_list|()
operator|==
name|PersistenceState
operator|.
name|COMMITTED
condition|)
block|{
name|object
operator|.
name|setPersistenceState
argument_list|(
name|PersistenceState
operator|.
name|MODIFIED
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

