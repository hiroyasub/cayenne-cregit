begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ArrayUtil
block|{
specifier|public
specifier|static
name|int
index|[]
index|[]
name|sliceArray
parameter_list|(
name|int
index|[]
name|array
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|length
init|=
name|array
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|length
operator|<=
name|batchSize
condition|)
block|{
return|return
operator|new
name|int
index|[]
index|[]
block|{
name|array
block|}
return|;
block|}
name|int
name|batches
init|=
name|length
operator|/
name|batchSize
decl_stmt|;
if|if
condition|(
name|length
operator|%
name|batchSize
operator|>
literal|0
condition|)
block|{
name|batches
operator|++
expr_stmt|;
block|}
name|int
index|[]
index|[]
name|result
init|=
operator|new
name|int
index|[
name|batches
index|]
index|[]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batches
condition|;
name|i
operator|++
control|)
block|{
name|int
name|nextSize
init|=
name|i
operator|<
name|batches
operator|-
literal|1
condition|?
name|batchSize
else|:
name|length
operator|-
name|offset
decl_stmt|;
name|result
index|[
name|i
index|]
operator|=
operator|new
name|int
index|[
name|nextSize
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
name|offset
argument_list|,
name|result
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|nextSize
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|nextSize
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|long
index|[]
index|[]
name|sliceArray
parameter_list|(
name|long
index|[]
name|array
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|length
init|=
name|array
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|length
operator|<=
name|batchSize
condition|)
block|{
return|return
operator|new
name|long
index|[]
index|[]
block|{
name|array
block|}
return|;
block|}
name|int
name|batches
init|=
name|length
operator|/
name|batchSize
decl_stmt|;
if|if
condition|(
name|length
operator|%
name|batchSize
operator|>
literal|0
condition|)
block|{
name|batches
operator|++
expr_stmt|;
block|}
name|long
index|[]
index|[]
name|result
init|=
operator|new
name|long
index|[
name|batches
index|]
index|[]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batches
condition|;
name|i
operator|++
control|)
block|{
name|int
name|nextSize
init|=
name|i
operator|<
name|batches
operator|-
literal|1
condition|?
name|batchSize
else|:
name|length
operator|-
name|offset
decl_stmt|;
name|result
index|[
name|i
index|]
operator|=
operator|new
name|long
index|[
name|nextSize
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
name|offset
argument_list|,
name|result
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|nextSize
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|nextSize
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|float
index|[]
index|[]
name|sliceArray
parameter_list|(
name|float
index|[]
name|array
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|length
init|=
name|array
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|length
operator|<=
name|batchSize
condition|)
block|{
return|return
operator|new
name|float
index|[]
index|[]
block|{
name|array
block|}
return|;
block|}
name|int
name|batches
init|=
name|length
operator|/
name|batchSize
decl_stmt|;
if|if
condition|(
name|length
operator|%
name|batchSize
operator|>
literal|0
condition|)
block|{
name|batches
operator|++
expr_stmt|;
block|}
name|float
index|[]
index|[]
name|result
init|=
operator|new
name|float
index|[
name|batches
index|]
index|[]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batches
condition|;
name|i
operator|++
control|)
block|{
name|int
name|nextSize
init|=
name|i
operator|<
name|batches
operator|-
literal|1
condition|?
name|batchSize
else|:
name|length
operator|-
name|offset
decl_stmt|;
name|result
index|[
name|i
index|]
operator|=
operator|new
name|float
index|[
name|nextSize
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
name|offset
argument_list|,
name|result
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|nextSize
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|nextSize
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|double
index|[]
index|[]
name|sliceArray
parameter_list|(
name|double
index|[]
name|array
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|length
init|=
name|array
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|length
operator|<=
name|batchSize
condition|)
block|{
return|return
operator|new
name|double
index|[]
index|[]
block|{
name|array
block|}
return|;
block|}
name|int
name|batches
init|=
name|length
operator|/
name|batchSize
decl_stmt|;
if|if
condition|(
name|length
operator|%
name|batchSize
operator|>
literal|0
condition|)
block|{
name|batches
operator|++
expr_stmt|;
block|}
name|double
index|[]
index|[]
name|result
init|=
operator|new
name|double
index|[
name|batches
index|]
index|[]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batches
condition|;
name|i
operator|++
control|)
block|{
name|int
name|nextSize
init|=
name|i
operator|<
name|batches
operator|-
literal|1
condition|?
name|batchSize
else|:
name|length
operator|-
name|offset
decl_stmt|;
name|result
index|[
name|i
index|]
operator|=
operator|new
name|double
index|[
name|nextSize
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
name|offset
argument_list|,
name|result
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|nextSize
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|nextSize
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|short
index|[]
index|[]
name|sliceArray
parameter_list|(
name|short
index|[]
name|array
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|length
init|=
name|array
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|length
operator|<=
name|batchSize
condition|)
block|{
return|return
operator|new
name|short
index|[]
index|[]
block|{
name|array
block|}
return|;
block|}
name|int
name|batches
init|=
name|length
operator|/
name|batchSize
decl_stmt|;
if|if
condition|(
name|length
operator|%
name|batchSize
operator|>
literal|0
condition|)
block|{
name|batches
operator|++
expr_stmt|;
block|}
name|short
index|[]
index|[]
name|result
init|=
operator|new
name|short
index|[
name|batches
index|]
index|[]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batches
condition|;
name|i
operator|++
control|)
block|{
name|int
name|nextSize
init|=
name|i
operator|<
name|batches
operator|-
literal|1
condition|?
name|batchSize
else|:
name|length
operator|-
name|offset
decl_stmt|;
name|result
index|[
name|i
index|]
operator|=
operator|new
name|short
index|[
name|nextSize
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
name|offset
argument_list|,
name|result
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|nextSize
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|nextSize
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|char
index|[]
index|[]
name|sliceArray
parameter_list|(
name|char
index|[]
name|array
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|length
init|=
name|array
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|length
operator|<=
name|batchSize
condition|)
block|{
return|return
operator|new
name|char
index|[]
index|[]
block|{
name|array
block|}
return|;
block|}
name|int
name|batches
init|=
name|length
operator|/
name|batchSize
decl_stmt|;
if|if
condition|(
name|length
operator|%
name|batchSize
operator|>
literal|0
condition|)
block|{
name|batches
operator|++
expr_stmt|;
block|}
name|char
index|[]
index|[]
name|result
init|=
operator|new
name|char
index|[
name|batches
index|]
index|[]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batches
condition|;
name|i
operator|++
control|)
block|{
name|int
name|nextSize
init|=
name|i
operator|<
name|batches
operator|-
literal|1
condition|?
name|batchSize
else|:
name|length
operator|-
name|offset
decl_stmt|;
name|result
index|[
name|i
index|]
operator|=
operator|new
name|char
index|[
name|nextSize
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
name|offset
argument_list|,
name|result
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|nextSize
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|nextSize
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|boolean
index|[]
index|[]
name|sliceArray
parameter_list|(
name|boolean
index|[]
name|array
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|length
init|=
name|array
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|length
operator|<=
name|batchSize
condition|)
block|{
return|return
operator|new
name|boolean
index|[]
index|[]
block|{
name|array
block|}
return|;
block|}
name|int
name|batches
init|=
name|length
operator|/
name|batchSize
decl_stmt|;
if|if
condition|(
name|length
operator|%
name|batchSize
operator|>
literal|0
condition|)
block|{
name|batches
operator|++
expr_stmt|;
block|}
name|boolean
index|[]
index|[]
name|result
init|=
operator|new
name|boolean
index|[
name|batches
index|]
index|[]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batches
condition|;
name|i
operator|++
control|)
block|{
name|int
name|nextSize
init|=
name|i
operator|<
name|batches
operator|-
literal|1
condition|?
name|batchSize
else|:
name|length
operator|-
name|offset
decl_stmt|;
name|result
index|[
name|i
index|]
operator|=
operator|new
name|boolean
index|[
name|nextSize
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
name|offset
argument_list|,
name|result
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|nextSize
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|nextSize
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|sliceArray
parameter_list|(
name|byte
index|[]
name|array
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|length
init|=
name|array
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|length
operator|<=
name|batchSize
condition|)
block|{
return|return
operator|new
name|byte
index|[]
index|[]
block|{
name|array
block|}
return|;
block|}
name|int
name|batches
init|=
name|length
operator|/
name|batchSize
decl_stmt|;
if|if
condition|(
name|length
operator|%
name|batchSize
operator|>
literal|0
condition|)
block|{
name|batches
operator|++
expr_stmt|;
block|}
name|byte
index|[]
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|batches
index|]
index|[]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batches
condition|;
name|i
operator|++
control|)
block|{
name|int
name|nextSize
init|=
name|i
operator|<
name|batches
operator|-
literal|1
condition|?
name|batchSize
else|:
name|length
operator|-
name|offset
decl_stmt|;
name|result
index|[
name|i
index|]
operator|=
operator|new
name|byte
index|[
name|nextSize
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
name|offset
argument_list|,
name|result
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|nextSize
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|nextSize
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|Object
index|[]
index|[]
name|sliceArray
parameter_list|(
name|Object
index|[]
name|array
parameter_list|,
name|int
name|batchSize
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|length
init|=
name|array
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|length
operator|<=
name|batchSize
condition|)
block|{
return|return
operator|new
name|Object
index|[]
index|[]
block|{
name|array
block|}
return|;
block|}
name|int
name|batches
init|=
name|length
operator|/
name|batchSize
decl_stmt|;
if|if
condition|(
name|length
operator|%
name|batchSize
operator|>
literal|0
condition|)
block|{
name|batches
operator|++
expr_stmt|;
block|}
name|Object
index|[]
index|[]
name|result
init|=
operator|new
name|Object
index|[
name|batches
index|]
index|[]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batches
condition|;
name|i
operator|++
control|)
block|{
name|int
name|nextSize
init|=
name|i
operator|<
name|batches
operator|-
literal|1
condition|?
name|batchSize
else|:
name|length
operator|-
name|offset
decl_stmt|;
name|result
index|[
name|i
index|]
operator|=
operator|new
name|Object
index|[
name|nextSize
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
name|offset
argument_list|,
name|result
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
name|nextSize
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|nextSize
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

