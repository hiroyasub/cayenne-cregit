begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * Assists in implementing {@link Object#equals(Object)} methods. The code is based on  * EqualsBuilder from commons-lang 2.1.  *   * @since 3.0  */
end_comment

begin_class
specifier|public
class|class
name|EqualsBuilder
block|{
comment|/**      * If the fields tested are equals. The default value is<code>true</code>.      */
specifier|private
name|boolean
name|isEquals
init|=
literal|true
decl_stmt|;
comment|/**      *<p>      * Adds the result of<code>super.equals()</code> to this builder.      *</p>      *       * @param superEquals the result of calling<code>super.equals()</code>      * @return EqualsBuilder - used to chain calls.      * @since 2.0      */
specifier|public
name|EqualsBuilder
name|appendSuper
parameter_list|(
name|boolean
name|superEquals
parameter_list|)
block|{
if|if
condition|(
name|isEquals
operator|==
literal|false
condition|)
block|{
return|return
name|this
return|;
block|}
name|isEquals
operator|=
name|superEquals
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// -------------------------------------------------------------------------
comment|/**      *<p>      * Test if two<code>Object</code>s are equal using their<code>equals</code>      * method.      *</p>      *       * @param lhs the left hand object      * @param rhs the right hand object      * @return EqualsBuilder - used to chain calls.      */
specifier|public
name|EqualsBuilder
name|append
parameter_list|(
name|Object
name|lhs
parameter_list|,
name|Object
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|isEquals
operator|==
literal|false
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|==
name|rhs
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|==
literal|null
operator|||
name|rhs
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setEquals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|lhsClass
init|=
name|lhs
operator|.
name|getClass
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lhsClass
operator|.
name|isArray
argument_list|()
condition|)
block|{
comment|// The simple case, not an array, just test the element
name|isEquals
operator|=
name|lhs
operator|.
name|equals
argument_list|(
name|rhs
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lhs
operator|.
name|getClass
argument_list|()
operator|!=
name|rhs
operator|.
name|getClass
argument_list|()
condition|)
block|{
comment|// Here when we compare different dimensions, for example: a boolean[][] to a
comment|// boolean[]
name|this
operator|.
name|setEquals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// 'Switch' on type of array, to dispatch to the correct handler
comment|// This handles multi dimensional arrays of the same depth
if|else if
condition|(
name|lhs
operator|instanceof
name|long
index|[]
condition|)
block|{
name|append
argument_list|(
operator|(
name|long
index|[]
operator|)
name|lhs
argument_list|,
operator|(
name|long
index|[]
operator|)
name|rhs
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lhs
operator|instanceof
name|int
index|[]
condition|)
block|{
name|append
argument_list|(
operator|(
name|int
index|[]
operator|)
name|lhs
argument_list|,
operator|(
name|int
index|[]
operator|)
name|rhs
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lhs
operator|instanceof
name|short
index|[]
condition|)
block|{
name|append
argument_list|(
operator|(
name|short
index|[]
operator|)
name|lhs
argument_list|,
operator|(
name|short
index|[]
operator|)
name|rhs
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lhs
operator|instanceof
name|char
index|[]
condition|)
block|{
name|append
argument_list|(
operator|(
name|char
index|[]
operator|)
name|lhs
argument_list|,
operator|(
name|char
index|[]
operator|)
name|rhs
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lhs
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|append
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|lhs
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|rhs
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lhs
operator|instanceof
name|double
index|[]
condition|)
block|{
name|append
argument_list|(
operator|(
name|double
index|[]
operator|)
name|lhs
argument_list|,
operator|(
name|double
index|[]
operator|)
name|rhs
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lhs
operator|instanceof
name|float
index|[]
condition|)
block|{
name|append
argument_list|(
operator|(
name|float
index|[]
operator|)
name|lhs
argument_list|,
operator|(
name|float
index|[]
operator|)
name|rhs
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lhs
operator|instanceof
name|boolean
index|[]
condition|)
block|{
name|append
argument_list|(
operator|(
name|boolean
index|[]
operator|)
name|lhs
argument_list|,
operator|(
name|boolean
index|[]
operator|)
name|rhs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Not an array of primitives
name|append
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|lhs
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|rhs
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Test if two<code>long</code> s are equal.      *</p>      *       * @param lhs the left hand<code>long</code>      * @param rhs the right hand<code>long</code>      * @return EqualsBuilder - used to chain calls.      */
specifier|public
name|EqualsBuilder
name|append
parameter_list|(
name|long
name|lhs
parameter_list|,
name|long
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|isEquals
operator|==
literal|false
condition|)
block|{
return|return
name|this
return|;
block|}
name|isEquals
operator|=
operator|(
name|lhs
operator|==
name|rhs
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Test if two<code>int</code>s are equal.      *</p>      *       * @param lhs the left hand<code>int</code>      * @param rhs the right hand<code>int</code>      * @return EqualsBuilder - used to chain calls.      */
specifier|public
name|EqualsBuilder
name|append
parameter_list|(
name|int
name|lhs
parameter_list|,
name|int
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|isEquals
operator|==
literal|false
condition|)
block|{
return|return
name|this
return|;
block|}
name|isEquals
operator|=
operator|(
name|lhs
operator|==
name|rhs
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Test if two<code>short</code>s are equal.      *</p>      *       * @param lhs the left hand<code>short</code>      * @param rhs the right hand<code>short</code>      * @return EqualsBuilder - used to chain calls.      */
specifier|public
name|EqualsBuilder
name|append
parameter_list|(
name|short
name|lhs
parameter_list|,
name|short
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|isEquals
operator|==
literal|false
condition|)
block|{
return|return
name|this
return|;
block|}
name|isEquals
operator|=
operator|(
name|lhs
operator|==
name|rhs
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Test if two<code>char</code>s are equal.      *</p>      *       * @param lhs the left hand<code>char</code>      * @param rhs the right hand<code>char</code>      * @return EqualsBuilder - used to chain calls.      */
specifier|public
name|EqualsBuilder
name|append
parameter_list|(
name|char
name|lhs
parameter_list|,
name|char
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|isEquals
operator|==
literal|false
condition|)
block|{
return|return
name|this
return|;
block|}
name|isEquals
operator|=
operator|(
name|lhs
operator|==
name|rhs
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Test if two<code>byte</code>s are equal.      *</p>      *       * @param lhs the left hand<code>byte</code>      * @param rhs the right hand<code>byte</code>      * @return EqualsBuilder - used to chain calls.      */
specifier|public
name|EqualsBuilder
name|append
parameter_list|(
name|byte
name|lhs
parameter_list|,
name|byte
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|isEquals
operator|==
literal|false
condition|)
block|{
return|return
name|this
return|;
block|}
name|isEquals
operator|=
operator|(
name|lhs
operator|==
name|rhs
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Test if two<code>double</code>s are equal by testing that the pattern of bits      * returned by<code>doubleToLong</code> are equal.      *</p>      *<p>      * This handles NaNs, Infinities, and<code>-0.0</code>.      *</p>      *<p>      * It is compatible with the hash code generated by<code>HashCodeBuilder</code>.      *</p>      *       * @param lhs the left hand<code>double</code>      * @param rhs the right hand<code>double</code>      * @return EqualsBuilder - used to chain calls.      */
specifier|public
name|EqualsBuilder
name|append
parameter_list|(
name|double
name|lhs
parameter_list|,
name|double
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|isEquals
operator|==
literal|false
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
name|append
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|lhs
argument_list|)
argument_list|,
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|rhs
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<p>      * Test if two<code>float</code>s are equal byt testing that the pattern of bits      * returned by doubleToLong are equal.      *</p>      *<p>      * This handles NaNs, Infinities, and<code>-0.0</code>.      *</p>      *<p>      * It is compatible with the hash code generated by<code>HashCodeBuilder</code>.      *</p>      *       * @param lhs the left hand<code>float</code>      * @param rhs the right hand<code>float</code>      * @return EqualsBuilder - used to chain calls.      */
specifier|public
name|EqualsBuilder
name|append
parameter_list|(
name|float
name|lhs
parameter_list|,
name|float
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|isEquals
operator|==
literal|false
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
name|append
argument_list|(
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|lhs
argument_list|)
argument_list|,
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|rhs
argument_list|)
argument_list|)
return|;
block|}
comment|/**      *<p>      * Test if two<code>booleans</code>s are equal.      *</p>      *       * @param lhs the left hand<code>boolean</code>      * @param rhs the right hand<code>boolean</code>      * @return EqualsBuilder - used to chain calls.      */
specifier|public
name|EqualsBuilder
name|append
parameter_list|(
name|boolean
name|lhs
parameter_list|,
name|boolean
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|isEquals
operator|==
literal|false
condition|)
block|{
return|return
name|this
return|;
block|}
name|isEquals
operator|=
operator|(
name|lhs
operator|==
name|rhs
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Performs a deep comparison of two<code>Object</code> arrays.      *</p>      *<p>      * This also will be called for the top level of multi-dimensional, ragged, and      * multi-typed arrays.      *</p>      *       * @param lhs the left hand<code>Object[]</code>      * @param rhs the right hand<code>Object[]</code>      * @return EqualsBuilder - used to chain calls.      */
specifier|public
name|EqualsBuilder
name|append
parameter_list|(
name|Object
index|[]
name|lhs
parameter_list|,
name|Object
index|[]
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|isEquals
operator|==
literal|false
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|==
name|rhs
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|==
literal|null
operator|||
name|rhs
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setEquals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|.
name|length
operator|!=
name|rhs
operator|.
name|length
condition|)
block|{
name|this
operator|.
name|setEquals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lhs
operator|.
name|length
operator|&&
name|isEquals
condition|;
operator|++
name|i
control|)
block|{
name|append
argument_list|(
name|lhs
index|[
name|i
index|]
argument_list|,
name|rhs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Deep comparison of array of<code>long</code>. Length and all values are      * compared.      *</p>      *<p>      * The method {@link #append(long, long)} is used.      *</p>      *       * @param lhs the left hand<code>long[]</code>      * @param rhs the right hand<code>long[]</code>      * @return EqualsBuilder - used to chain calls.      */
specifier|public
name|EqualsBuilder
name|append
parameter_list|(
name|long
index|[]
name|lhs
parameter_list|,
name|long
index|[]
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|isEquals
operator|==
literal|false
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|==
name|rhs
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|==
literal|null
operator|||
name|rhs
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setEquals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|.
name|length
operator|!=
name|rhs
operator|.
name|length
condition|)
block|{
name|this
operator|.
name|setEquals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lhs
operator|.
name|length
operator|&&
name|isEquals
condition|;
operator|++
name|i
control|)
block|{
name|append
argument_list|(
name|lhs
index|[
name|i
index|]
argument_list|,
name|rhs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Deep comparison of array of<code>int</code>. Length and all values are      * compared.      *</p>      *<p>      * The method {@link #append(int, int)} is used.      *</p>      *       * @param lhs the left hand<code>int[]</code>      * @param rhs the right hand<code>int[]</code>      * @return EqualsBuilder - used to chain calls.      */
specifier|public
name|EqualsBuilder
name|append
parameter_list|(
name|int
index|[]
name|lhs
parameter_list|,
name|int
index|[]
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|isEquals
operator|==
literal|false
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|==
name|rhs
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|==
literal|null
operator|||
name|rhs
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setEquals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|.
name|length
operator|!=
name|rhs
operator|.
name|length
condition|)
block|{
name|this
operator|.
name|setEquals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lhs
operator|.
name|length
operator|&&
name|isEquals
condition|;
operator|++
name|i
control|)
block|{
name|append
argument_list|(
name|lhs
index|[
name|i
index|]
argument_list|,
name|rhs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Deep comparison of array of<code>short</code>. Length and all values are      * compared.      *</p>      *<p>      * The method {@link #append(short, short)} is used.      *</p>      *       * @param lhs the left hand<code>short[]</code>      * @param rhs the right hand<code>short[]</code>      * @return EqualsBuilder - used to chain calls.      */
specifier|public
name|EqualsBuilder
name|append
parameter_list|(
name|short
index|[]
name|lhs
parameter_list|,
name|short
index|[]
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|isEquals
operator|==
literal|false
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|==
name|rhs
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|==
literal|null
operator|||
name|rhs
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setEquals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|.
name|length
operator|!=
name|rhs
operator|.
name|length
condition|)
block|{
name|this
operator|.
name|setEquals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lhs
operator|.
name|length
operator|&&
name|isEquals
condition|;
operator|++
name|i
control|)
block|{
name|append
argument_list|(
name|lhs
index|[
name|i
index|]
argument_list|,
name|rhs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Deep comparison of array of<code>char</code>. Length and all values are      * compared.      *</p>      *<p>      * The method {@link #append(char, char)} is used.      *</p>      *       * @param lhs the left hand<code>char[]</code>      * @param rhs the right hand<code>char[]</code>      * @return EqualsBuilder - used to chain calls.      */
specifier|public
name|EqualsBuilder
name|append
parameter_list|(
name|char
index|[]
name|lhs
parameter_list|,
name|char
index|[]
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|isEquals
operator|==
literal|false
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|==
name|rhs
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|==
literal|null
operator|||
name|rhs
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setEquals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|.
name|length
operator|!=
name|rhs
operator|.
name|length
condition|)
block|{
name|this
operator|.
name|setEquals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lhs
operator|.
name|length
operator|&&
name|isEquals
condition|;
operator|++
name|i
control|)
block|{
name|append
argument_list|(
name|lhs
index|[
name|i
index|]
argument_list|,
name|rhs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Deep comparison of array of<code>byte</code>. Length and all values are      * compared.      *</p>      *<p>      * The method {@link #append(byte, byte)} is used.      *</p>      *       * @param lhs the left hand<code>byte[]</code>      * @param rhs the right hand<code>byte[]</code>      * @return EqualsBuilder - used to chain calls.      */
specifier|public
name|EqualsBuilder
name|append
parameter_list|(
name|byte
index|[]
name|lhs
parameter_list|,
name|byte
index|[]
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|isEquals
operator|==
literal|false
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|==
name|rhs
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|==
literal|null
operator|||
name|rhs
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setEquals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|.
name|length
operator|!=
name|rhs
operator|.
name|length
condition|)
block|{
name|this
operator|.
name|setEquals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lhs
operator|.
name|length
operator|&&
name|isEquals
condition|;
operator|++
name|i
control|)
block|{
name|append
argument_list|(
name|lhs
index|[
name|i
index|]
argument_list|,
name|rhs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Deep comparison of array of<code>double</code>. Length and all values are      * compared.      *</p>      *<p>      * The method {@link #append(double, double)} is used.      *</p>      *       * @param lhs the left hand<code>double[]</code>      * @param rhs the right hand<code>double[]</code>      * @return EqualsBuilder - used to chain calls.      */
specifier|public
name|EqualsBuilder
name|append
parameter_list|(
name|double
index|[]
name|lhs
parameter_list|,
name|double
index|[]
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|isEquals
operator|==
literal|false
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|==
name|rhs
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|==
literal|null
operator|||
name|rhs
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setEquals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|.
name|length
operator|!=
name|rhs
operator|.
name|length
condition|)
block|{
name|this
operator|.
name|setEquals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lhs
operator|.
name|length
operator|&&
name|isEquals
condition|;
operator|++
name|i
control|)
block|{
name|append
argument_list|(
name|lhs
index|[
name|i
index|]
argument_list|,
name|rhs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Deep comparison of array of<code>float</code>. Length and all values are      * compared.      *</p>      *<p>      * The method {@link #append(float, float)} is used.      *</p>      *       * @param lhs the left hand<code>float[]</code>      * @param rhs the right hand<code>float[]</code>      * @return EqualsBuilder - used to chain calls.      */
specifier|public
name|EqualsBuilder
name|append
parameter_list|(
name|float
index|[]
name|lhs
parameter_list|,
name|float
index|[]
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|isEquals
operator|==
literal|false
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|==
name|rhs
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|==
literal|null
operator|||
name|rhs
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setEquals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|.
name|length
operator|!=
name|rhs
operator|.
name|length
condition|)
block|{
name|this
operator|.
name|setEquals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lhs
operator|.
name|length
operator|&&
name|isEquals
condition|;
operator|++
name|i
control|)
block|{
name|append
argument_list|(
name|lhs
index|[
name|i
index|]
argument_list|,
name|rhs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Deep comparison of array of<code>boolean</code>. Length and all values are      * compared.      *</p>      *<p>      * The method {@link #append(boolean, boolean)} is used.      *</p>      *       * @param lhs the left hand<code>boolean[]</code>      * @param rhs the right hand<code>boolean[]</code>      * @return EqualsBuilder - used to chain calls.      */
specifier|public
name|EqualsBuilder
name|append
parameter_list|(
name|boolean
index|[]
name|lhs
parameter_list|,
name|boolean
index|[]
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|isEquals
operator|==
literal|false
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|==
name|rhs
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|==
literal|null
operator|||
name|rhs
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setEquals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
name|lhs
operator|.
name|length
operator|!=
name|rhs
operator|.
name|length
condition|)
block|{
name|this
operator|.
name|setEquals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lhs
operator|.
name|length
operator|&&
name|isEquals
condition|;
operator|++
name|i
control|)
block|{
name|append
argument_list|(
name|lhs
index|[
name|i
index|]
argument_list|,
name|rhs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      *<p>      * Returns<code>true</code> if the fields that have been checked are all equal.      *</p>      *       * @return boolean      */
specifier|public
name|boolean
name|isEquals
parameter_list|()
block|{
return|return
name|this
operator|.
name|isEquals
return|;
block|}
comment|/**      * Sets the<code>isEquals</code> value.      *       * @param isEquals The value to set.      * @since 2.1      */
specifier|protected
name|void
name|setEquals
parameter_list|(
name|boolean
name|isEquals
parameter_list|)
block|{
name|this
operator|.
name|isEquals
operator|=
name|isEquals
expr_stmt|;
block|}
block|}
end_class

end_unit

