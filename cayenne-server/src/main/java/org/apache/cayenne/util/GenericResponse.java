begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|QueryResponse
import|;
end_import

begin_comment
comment|/**  * A simple serializable implementation of QueryResponse.  *   * @since 1.2  */
end_comment

begin_class
specifier|public
class|class
name|GenericResponse
implements|implements
name|QueryResponse
implements|,
name|Serializable
block|{
specifier|protected
name|List
name|results
decl_stmt|;
specifier|protected
specifier|transient
name|int
name|currentIndex
decl_stmt|;
comment|/**      * Creates an empty BaseResponse.      */
specifier|public
name|GenericResponse
parameter_list|()
block|{
name|results
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates a BaseResponse with a single result list.      */
specifier|public
name|GenericResponse
parameter_list|(
name|List
name|list
parameter_list|)
block|{
name|results
operator|=
operator|new
name|ArrayList
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addResultList
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a response that it a shallow copy of another response.      */
specifier|public
name|GenericResponse
parameter_list|(
name|QueryResponse
name|response
parameter_list|)
block|{
name|results
operator|=
operator|new
name|ArrayList
argument_list|(
name|response
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|response
operator|.
name|next
argument_list|()
condition|)
block|{
if|if
condition|(
name|response
operator|.
name|isList
argument_list|()
condition|)
block|{
name|addResultList
argument_list|(
name|response
operator|.
name|currentList
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addBatchUpdateCount
argument_list|(
name|response
operator|.
name|currentUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|List
name|firstList
parameter_list|()
block|{
for|for
control|(
name|reset
argument_list|()
init|;
name|next
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|isList
argument_list|()
condition|)
block|{
return|return
name|currentList
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|int
index|[]
name|firstUpdateCount
parameter_list|()
block|{
for|for
control|(
name|reset
argument_list|()
init|;
name|next
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|isList
argument_list|()
condition|)
block|{
return|return
name|currentUpdateCount
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|List
name|currentList
parameter_list|()
block|{
return|return
operator|(
name|List
operator|)
name|results
operator|.
name|get
argument_list|(
name|currentIndex
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
name|int
index|[]
name|currentUpdateCount
parameter_list|()
block|{
return|return
operator|(
name|int
index|[]
operator|)
name|results
operator|.
name|get
argument_list|(
name|currentIndex
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isList
parameter_list|()
block|{
return|return
name|results
operator|.
name|get
argument_list|(
name|currentIndex
operator|-
literal|1
argument_list|)
operator|instanceof
name|List
return|;
block|}
specifier|public
name|boolean
name|next
parameter_list|()
block|{
return|return
operator|++
name|currentIndex
operator|<=
name|results
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
comment|// use a zero-based index, not -1, as this will simplify serialization handling
name|currentIndex
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|results
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Clears any previously collected information.      */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addBatchUpdateCount
parameter_list|(
name|int
index|[]
name|resultCount
parameter_list|)
block|{
if|if
condition|(
name|resultCount
operator|!=
literal|null
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|resultCount
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addUpdateCount
parameter_list|(
name|int
name|resultCount
parameter_list|)
block|{
name|results
operator|.
name|add
argument_list|(
operator|new
name|int
index|[]
block|{
name|resultCount
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addResultList
parameter_list|(
name|List
name|list
parameter_list|)
block|{
name|this
operator|.
name|results
operator|.
name|add
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
comment|/**      * Replaces previously stored result with a new result.      */
specifier|public
name|void
name|replaceResult
parameter_list|(
name|Object
name|oldResult
parameter_list|,
name|Object
name|newResult
parameter_list|)
block|{
name|int
name|index
init|=
name|results
operator|.
name|indexOf
argument_list|(
name|oldResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|results
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|newResult
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

