begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|commons
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Decorates a collection of other collections to provide a single unified view.  *<p>  * Changes made to this collection will actually be made on the decorated collection.  * Add and remove operations require the use of a pluggable strategy. If no  * strategy is provided then add and remove are unsupported.  *  * @author Brian McCallister  * @author Stephen Colebourne  * @author Phil Steitz  *  * @since 4.1  *  * NOTE: this is a simplified and type-safe version of CompositeCollection found in commons-collections v3.2.1  */
end_comment

begin_class
specifier|public
class|class
name|CompositeCollection
parameter_list|<
name|E
parameter_list|>
implements|implements
name|Collection
argument_list|<
name|E
argument_list|>
block|{
comment|/** Collections in the composite */
specifier|protected
name|ArrayList
argument_list|<
name|Collection
argument_list|<
name|E
argument_list|>
argument_list|>
name|all
decl_stmt|;
comment|/**      * Create an empty CompositeCollection.      */
specifier|public
name|CompositeCollection
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|all
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|//-----------------------------------------------------------------------
comment|/**      * Gets the size of this composite collection.      *<p>      * This implementation calls<code>size()</code> on each collection.      *      * @return total number of elements in all contained containers      */
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Collection
argument_list|<
name|E
argument_list|>
name|collection
range|:
name|this
operator|.
name|all
control|)
block|{
name|size
operator|+=
name|collection
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
comment|/**      * Checks whether this composite collection is empty.      *<p>      * This implementation calls<code>isEmpty()</code> on each collection.      *      * @return true if all of the contained collections are empty      */
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
for|for
control|(
name|Collection
argument_list|<
name|E
argument_list|>
name|collection
range|:
name|this
operator|.
name|all
control|)
block|{
if|if
condition|(
operator|!
name|collection
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Checks whether this composite collection contains the object.      *<p>      * This implementation calls<code>contains()</code> on each collection.      *      * @param obj  the object to search for      * @return true if obj is contained in any of the contained collections      */
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
for|for
control|(
name|Collection
argument_list|<
name|E
argument_list|>
name|collection
range|:
name|this
operator|.
name|all
control|)
block|{
if|if
condition|(
operator|!
name|collection
operator|.
name|contains
argument_list|(
name|obj
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Gets an iterator over all the collections in this composite.      *<p>      * This implementation uses an<code>IteratorChain</code>.      *      * @return an<code>IteratorChain</code> instance which supports      *<code>remove()</code>. Iteration occurs over contained collections in      *  the order they were added, but this behavior should not be relied upon.      * @see IteratorChain      */
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|all
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyIterator
argument_list|()
return|;
block|}
name|IteratorChain
argument_list|<
name|E
argument_list|>
name|chain
init|=
operator|new
name|IteratorChain
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Collection
argument_list|<
name|E
argument_list|>
name|collection
range|:
name|this
operator|.
name|all
control|)
block|{
name|chain
operator|.
name|addIterator
argument_list|(
name|collection
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|chain
return|;
block|}
comment|/**      * Returns an array containing all of the elements in this composite.      *      * @return an object array of all the elements in the collection      */
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
specifier|final
name|Object
index|[]
name|result
init|=
operator|new
name|Object
index|[
name|this
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Collection
argument_list|<
name|E
argument_list|>
name|collection
range|:
name|this
operator|.
name|all
control|)
block|{
for|for
control|(
name|E
name|o
range|:
name|collection
control|)
block|{
name|result
index|[
name|i
operator|++
index|]
operator|=
name|o
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Returns an object array, populating the supplied array if possible.      * See<code>Collection</code> interface for full details.      *      * @param array  the array to use, populating if possible      * @return an array of all the elements in the collection      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|toArray
parameter_list|(
name|T
index|[]
name|array
parameter_list|)
block|{
name|int
name|size
init|=
name|this
operator|.
name|size
argument_list|()
decl_stmt|;
name|Object
index|[]
name|result
decl_stmt|;
if|if
condition|(
name|array
operator|.
name|length
operator|>=
name|size
condition|)
block|{
name|result
operator|=
name|array
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|T
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|array
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Collection
argument_list|<
name|E
argument_list|>
name|collection
range|:
name|this
operator|.
name|all
control|)
block|{
for|for
control|(
name|E
name|e
range|:
name|collection
control|)
block|{
name|result
index|[
name|offset
operator|++
index|]
operator|=
name|e
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|.
name|length
operator|>
name|size
condition|)
block|{
name|result
index|[
name|size
index|]
operator|=
literal|null
expr_stmt|;
block|}
return|return
operator|(
name|T
index|[]
operator|)
name|result
return|;
block|}
comment|/**      * Adds an object to the collection, throwing UnsupportedOperationException      * unless a CollectionMutator strategy is specified.      *      * @param obj  the object to add      * @return true if the collection was modified      * @throws UnsupportedOperationException if CollectionMutator hasn't been set      * @throws UnsupportedOperationException if add is unsupported      * @throws ClassCastException if the object cannot be added due to its type      * @throws NullPointerException if the object cannot be added because its null      * @throws IllegalArgumentException if the object cannot be added      */
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**      * Removes an object from the collection, throwing UnsupportedOperationException      * unless a CollectionMutator strategy is specified.      *      * @param obj  the object being removed      * @return true if the collection is changed      * @throws UnsupportedOperationException if removed is unsupported      * @throws ClassCastException if the object cannot be removed due to its type      * @throws NullPointerException if the object cannot be removed because its null      * @throws IllegalArgumentException if the object cannot be removed      */
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**      * Checks whether this composite contains all the elements in the specified collection.      *<p>      * This implementation calls<code>contains()</code> for each element in the      * specified collection.      *      * @param coll  the collection to check for      * @return true if all elements contained      */
annotation|@
name|Override
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|coll
parameter_list|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|coll
control|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Adds a collection of elements to this collection, throwing      * UnsupportedOperationException unless a CollectionMutator strategy is specified.      *      * @param coll  the collection to add      * @return true if the collection was modified      * @throws UnsupportedOperationException if CollectionMutator hasn't been set      * @throws UnsupportedOperationException if add is unsupported      * @throws ClassCastException if the object cannot be added due to its type      * @throws NullPointerException if the object cannot be added because its null      * @throws IllegalArgumentException if the object cannot be added      */
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|coll
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**      * Removes the elements in the specified collection from this composite collection.      *<p>      * This implementation calls<code>removeAll</code> on each collection.      *      * @param coll  the collection to remove      * @return true if the collection was modified      * @throws UnsupportedOperationException if removeAll is unsupported      */
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|coll
parameter_list|)
block|{
if|if
condition|(
name|coll
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Collection
argument_list|<
name|E
argument_list|>
name|collection
range|:
name|this
operator|.
name|all
control|)
block|{
name|changed
operator|=
operator|(
name|collection
operator|.
name|removeAll
argument_list|(
name|coll
argument_list|)
operator|||
name|changed
operator|)
expr_stmt|;
block|}
return|return
name|changed
return|;
block|}
comment|/**      * Retains all the elements in the specified collection in this composite collection,      * removing all others.      *<p>      * This implementation calls<code>retainAll()</code> on each collection.      *      * @param coll  the collection to remove      * @return true if the collection was modified      * @throws UnsupportedOperationException if retainAll is unsupported      */
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|?
argument_list|>
name|coll
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Collection
argument_list|<
name|E
argument_list|>
name|collection
range|:
name|this
operator|.
name|all
control|)
block|{
name|changed
operator|=
operator|(
name|collection
operator|.
name|retainAll
argument_list|(
name|coll
argument_list|)
operator|||
name|changed
operator|)
expr_stmt|;
block|}
return|return
name|changed
return|;
block|}
comment|/**      * Removes all of the elements from this collection .      *<p>      * This implementation calls<code>clear()</code> on each collection.      *      * @throws UnsupportedOperationException if clear is unsupported      */
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
for|for
control|(
name|Collection
argument_list|<
name|E
argument_list|>
name|collection
range|:
name|this
operator|.
name|all
control|)
block|{
name|collection
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|//-----------------------------------------------------------------------
comment|/**      * Add an additional collection to this composite.      *      * @param c  the collection to add      */
specifier|public
name|void
name|addComposited
parameter_list|(
name|Collection
argument_list|<
name|E
argument_list|>
name|c
parameter_list|)
block|{
name|all
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes a collection from the those being decorated in this composite.      *      * @param coll  collection to be removed      */
specifier|public
name|void
name|removeComposited
parameter_list|(
name|Collection
argument_list|<
name|E
argument_list|>
name|coll
parameter_list|)
block|{
name|all
operator|.
name|remove
argument_list|(
name|coll
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the collections being decorated.      *      * @return Unmodifiable collection of all collections in this composite.      */
specifier|public
name|Collection
argument_list|<
name|Collection
argument_list|<
name|E
argument_list|>
argument_list|>
name|getCollections
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|this
operator|.
name|all
argument_list|)
return|;
block|}
block|}
end_class

end_unit

