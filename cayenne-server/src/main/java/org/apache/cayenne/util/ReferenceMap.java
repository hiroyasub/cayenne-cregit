begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|ReferenceQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Map that transparently stores values as references and resolves them as needed.  * Though this implementation tries to follow general {@link Map} contract (including equals() and hashCode())  * it is not intended for general usage.  *<p>  * There is no HardReferenceMap as simple HashMap can be used for that.  *<p>  * This map doesn't guarantee that value will be there even right after put(), as GC can remove it at any time.  *<p>  * This implementation supports proper serialization.  *<p>  *  * @param<K> key type  * @param<V> value type  * @param<R> reference type that will be used to store values  *  * @see WeakValueMap implementation that uses WeakReference to store values  * @see SoftValueMap implementation that uses SoftReference to store values  *  * @since 4.1  */
end_comment

begin_class
specifier|abstract
class|class
name|ReferenceMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|,
name|R
extends|extends
name|Reference
parameter_list|<
name|V
parameter_list|>
parameter_list|>
extends|extends
name|AbstractMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|implements
name|Serializable
block|{
comment|/*      * Implementation notes:      *  - internally data stored in HashMap thus this class and all implementations are not thread safe;      *  - to track references that were cleared ReferenceQueue is used;      *  - this map is abstract, all that required for the concrete implementation is      *  to define newReference(Object) method;      *  - all accessors/modifiers should call checkReferenceQueue() to clear all stale data      */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|3365744592038165092L
decl_stmt|;
comment|/**      * This is a main data storage used for most operations      */
specifier|protected
specifier|transient
name|HashMap
argument_list|<
name|K
argument_list|,
name|R
argument_list|>
name|map
decl_stmt|;
specifier|protected
specifier|transient
name|ReferenceQueue
argument_list|<
name|V
argument_list|>
name|referenceQueue
decl_stmt|;
comment|/**      * This is a lazily created set of entries that is essentially a view to actual data      */
specifier|protected
specifier|transient
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
decl_stmt|;
specifier|public
name|ReferenceMap
parameter_list|()
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|referenceQueue
operator|=
operator|new
name|ReferenceQueue
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ReferenceMap
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|initialCapacity
argument_list|)
expr_stmt|;
name|referenceQueue
operator|=
operator|new
name|ReferenceQueue
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ReferenceMap
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|m
parameter_list|)
block|{
name|this
argument_list|(
name|m
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
name|checkReferenceQueue
argument_list|()
expr_stmt|;
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
name|checkReferenceQueue
argument_list|()
expr_stmt|;
return|return
name|map
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|checkReferenceQueue
argument_list|()
expr_stmt|;
return|return
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|checkReferenceQueue
argument_list|()
expr_stmt|;
for|for
control|(
name|R
name|ref
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
comment|// should not happen, we can't have nulls in internal map
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
name|V
name|v
init|=
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|checkReferenceQueue
argument_list|()
expr_stmt|;
name|R
name|ref
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|ref
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"ReferenceMap can't contain null values"
argument_list|)
throw|;
block|}
name|checkReferenceQueue
argument_list|()
expr_stmt|;
name|R
name|refValue
init|=
name|newReference
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|R
name|oldValue
init|=
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|refValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|oldValue
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|checkReferenceQueue
argument_list|()
expr_stmt|;
name|R
name|oldValue
init|=
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|oldValue
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|m
parameter_list|)
block|{
name|checkReferenceQueue
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
range|:
name|m
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"ReferenceMap can't contain null values"
argument_list|)
throw|;
block|}
name|R
name|value
init|=
name|newReference
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resetReferenceQueue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
name|checkReferenceQueue
argument_list|()
expr_stmt|;
comment|// should this check for cleared references? it can be invalid later anyway...
return|return
name|map
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
name|checkReferenceQueue
argument_list|()
expr_stmt|;
comment|// this can be optimized by creating view instead of new heavyweight collection
name|Collection
argument_list|<
name|R
argument_list|>
name|referenceValues
init|=
name|map
operator|.
name|values
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|V
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|referenceValues
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|R
name|v
range|:
name|referenceValues
control|)
block|{
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
name|V
name|value
init|=
name|v
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// check for null in case GC cleared some values after last queue check
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|values
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
name|checkReferenceQueue
argument_list|()
expr_stmt|;
comment|// lazily create entry set view
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|es
init|=
name|entrySet
decl_stmt|;
if|if
condition|(
name|es
operator|==
literal|null
condition|)
block|{
name|entrySet
operator|=
name|es
operator|=
operator|new
name|ReferenceEntrySet
argument_list|()
expr_stmt|;
block|}
return|return
name|es
return|;
block|}
comment|/**      * Cleanup all references collected by GC so far      */
specifier|protected
name|void
name|checkReferenceQueue
parameter_list|()
block|{
name|Collection
argument_list|<
name|Reference
argument_list|<
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|valuesToRemove
init|=
literal|null
decl_stmt|;
name|Reference
argument_list|<
name|?
extends|extends
name|V
argument_list|>
name|reference
decl_stmt|;
while|while
condition|(
operator|(
name|reference
operator|=
name|referenceQueue
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|valuesToRemove
operator|==
literal|null
condition|)
block|{
name|valuesToRemove
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|valuesToRemove
operator|.
name|add
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|valuesToRemove
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Collection
argument_list|<
name|K
argument_list|>
name|keysToRemove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|valuesToRemove
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|R
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|valuesToRemove
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|keysToRemove
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|K
name|keyToRemove
range|:
name|keysToRemove
control|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|keyToRemove
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|resetReferenceQueue
parameter_list|()
block|{
while|while
condition|(
name|referenceQueue
operator|.
name|poll
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// just purge this queue
block|}
block|}
comment|/**      * This method should be implemented by concrete implementations of this abstract class.      *      * @param value to be wrapped into reference      * @return new reference to the value      */
specifier|abstract
name|R
name|newReference
parameter_list|(
name|V
name|value
parameter_list|)
function_decl|;
specifier|private
name|void
name|writeObject
parameter_list|(
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|checkReferenceQueue
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|replacementMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|K
argument_list|,
name|R
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|V
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|replacementMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|writeObject
argument_list|(
name|replacementMap
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|replacement
init|=
operator|(
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|in
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|map
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|replacement
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|referenceQueue
operator|=
operator|new
name|ReferenceQueue
argument_list|<>
argument_list|()
expr_stmt|;
name|putAll
argument_list|(
name|replacement
argument_list|)
expr_stmt|;
block|}
comment|/**      * View over {@link #map} entry set      */
class|class
name|ReferenceEntrySet
extends|extends
name|AbstractSet
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|ReferenceEntryIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
block|}
comment|/**      * Iterator used by entrySet. Wrapper around {@link #map} iterator.      * It fetch ahead to be sure we have valid value, or otherwise we can return cleared reference.      */
class|class
name|ReferenceEntryIterator
implements|implements
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|R
argument_list|>
argument_list|>
name|internalIterator
decl_stmt|;
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
decl_stmt|;
name|ReferenceEntryIterator
parameter_list|()
block|{
name|internalIterator
operator|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|tryAdvance
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|result
init|=
name|next
decl_stmt|;
name|tryAdvance
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**          * Moves ahead internalIterator and tries to find first and store nonnull reference          */
specifier|private
name|void
name|tryAdvance
parameter_list|()
block|{
name|next
operator|=
literal|null
expr_stmt|;
while|while
condition|(
name|internalIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|K
argument_list|,
name|R
argument_list|>
name|nextRefEntry
init|=
name|internalIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextRefEntry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// should not happen, we can't have nulls in internal map
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
name|V
name|value
init|=
name|nextRefEntry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|next
operator|=
operator|new
name|ReferenceEntry
argument_list|(
name|nextRefEntry
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|/**      * View over {@link Map.Entry} that transparently resolves Reference      */
class|class
name|ReferenceEntry
extends|extends
name|SimpleEntry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|1795136249842496011L
decl_stmt|;
name|Entry
argument_list|<
name|K
argument_list|,
name|R
argument_list|>
name|refEntry
decl_stmt|;
specifier|public
name|ReferenceEntry
parameter_list|(
name|Entry
argument_list|<
name|K
argument_list|,
name|R
argument_list|>
name|refEntry
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|refEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|refEntry
operator|=
name|refEntry
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|R
name|newRef
init|=
name|newReference
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|R
name|oldRef
init|=
name|refEntry
operator|.
name|setValue
argument_list|(
name|newRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldRef
operator|!=
literal|null
condition|)
block|{
return|return
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

