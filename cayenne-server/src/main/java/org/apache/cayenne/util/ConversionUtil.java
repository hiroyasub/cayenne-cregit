begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionException
import|;
end_import

begin_comment
comment|/**  * A collection of static conversion utility methods.  *   * @since 1.1  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ConversionUtil
block|{
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|Object
name|object
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|object
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
name|String
operator|)
name|object
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
return|return
name|defaultValue
return|;
block|}
block|}
return|return
name|defaultValue
return|;
block|}
comment|/**      * @since 3.1      */
specifier|public
specifier|static
name|long
name|toLong
parameter_list|(
name|Object
name|object
parameter_list|,
name|long
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|object
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
operator|(
name|String
operator|)
name|object
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
return|return
name|defaultValue
return|;
block|}
block|}
return|return
name|defaultValue
return|;
block|}
comment|/**      * @since 4.0      */
specifier|public
specifier|static
name|double
name|toDouble
parameter_list|(
name|Object
name|object
parameter_list|,
name|double
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|object
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
operator|(
name|String
operator|)
name|object
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
return|return
name|defaultValue
return|;
block|}
block|}
return|return
name|defaultValue
return|;
block|}
specifier|public
specifier|static
name|boolean
name|toBoolean
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
operator|(
name|Boolean
operator|)
name|object
operator|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|object
operator|)
operator|.
name|intValue
argument_list|()
operator|!=
literal|0
return|;
block|}
return|return
name|object
operator|!=
literal|null
return|;
block|}
specifier|public
specifier|static
name|BigDecimal
name|toBigDecimal
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|BigDecimal
condition|)
block|{
return|return
operator|(
name|BigDecimal
operator|)
name|object
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|BigInteger
condition|)
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
operator|(
name|BigInteger
operator|)
name|object
argument_list|)
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|object
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|ExpressionException
argument_list|(
literal|"Can't convert to BigDecimal: "
operator|+
name|object
argument_list|)
throw|;
block|}
comment|/**      * Attempts to convert an object to Comparable instance.      */
specifier|public
specifier|static
name|Comparable
name|toComparable
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Comparable
condition|)
block|{
return|return
operator|(
name|Comparable
operator|)
name|object
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|StringBuilder
condition|)
block|{
return|return
name|object
operator|.
name|toString
argument_list|()
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|StringBuffer
condition|)
block|{
return|return
name|object
operator|.
name|toString
argument_list|()
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|char
index|[]
condition|)
block|{
return|return
operator|new
name|String
argument_list|(
operator|(
name|char
index|[]
operator|)
name|object
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Invalid Comparable class:"
operator|+
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Attempts to convert an object to Comparable instance.      */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|String
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|object
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|StringBuffer
condition|)
block|{
return|return
name|object
operator|.
name|toString
argument_list|()
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|char
index|[]
condition|)
block|{
return|return
operator|new
name|String
argument_list|(
operator|(
name|char
index|[]
operator|)
name|object
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Invalid class for String conversion:"
operator|+
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Attempts to convert an object to an uppercase string.      */
specifier|public
specifier|static
name|Object
name|toUpperCase
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
operator|(
name|object
operator|instanceof
name|String
operator|)
operator|||
operator|(
name|object
operator|instanceof
name|StringBuffer
operator|)
condition|)
block|{
return|return
name|object
operator|.
name|toString
argument_list|()
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|char
index|[]
condition|)
block|{
return|return
operator|new
name|String
argument_list|(
operator|(
name|char
index|[]
operator|)
name|object
argument_list|)
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|object
return|;
block|}
block|}
specifier|private
name|ConversionUtil
parameter_list|()
block|{
block|}
block|}
end_class

end_unit

