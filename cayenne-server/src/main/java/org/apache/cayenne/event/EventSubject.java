begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|event
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|WeakValueMap
import|;
end_import

begin_comment
comment|/**  * This class encapsulates the String that is used to identify the<em>subject</em> that  * a listener is interested in. Using plain Strings causes several severe problems:  *<ul>  *<li>it's easy to misspell a subject, leading to undesired behaviour at runtime that is  * hard to debug.</li>  *<li>in systems with many different subjects there is no safeguard for defining the  * same subject twice for different purposes. This is especially true in a distributed  * setting.  *</ul>  *   */
end_comment

begin_class
specifier|public
class|class
name|EventSubject
implements|implements
name|Serializable
block|{
comment|// a Map that will allow the values to be GC'ed
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|EventSubject
argument_list|>
name|_registeredSubjects
init|=
operator|new
name|WeakValueMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Subject identifier in the form "com.foo.bar/SubjectName"
specifier|private
name|String
name|_fullyQualifiedSubjectName
decl_stmt|;
comment|/**      * Returns an event subject identified by the given owner and subject name.      *       * @param subjectOwner the Class used for uniquely identifying this subject      * @param subjectName a String used as name, e.g. "MyEventTopic"      * @throws IllegalArgumentException if subjectOwner/subjectName are<code>null</code>      *             or subjectName is empty.      */
specifier|public
specifier|static
name|EventSubject
name|getSubject
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|subjectOwner
parameter_list|,
name|String
name|subjectName
parameter_list|)
block|{
if|if
condition|(
name|subjectOwner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Owner class must not be null."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|subjectName
operator|==
literal|null
operator|)
operator|||
operator|(
name|subjectName
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Subject name must not be null or empty."
argument_list|)
throw|;
block|}
name|String
name|fullSubjectName
init|=
name|subjectOwner
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|subjectName
decl_stmt|;
name|EventSubject
name|newSubject
init|=
name|_registeredSubjects
operator|.
name|get
argument_list|(
name|fullSubjectName
argument_list|)
decl_stmt|;
if|if
condition|(
name|newSubject
operator|==
literal|null
condition|)
block|{
name|newSubject
operator|=
operator|new
name|EventSubject
argument_list|(
name|fullSubjectName
argument_list|)
expr_stmt|;
name|_registeredSubjects
operator|.
name|put
argument_list|(
name|newSubject
operator|.
name|getSubjectName
argument_list|()
argument_list|,
name|newSubject
argument_list|)
expr_stmt|;
block|}
return|return
name|newSubject
return|;
block|}
comment|/**      * Private constructor to force use of #getSubject(Class, String)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|EventSubject
parameter_list|()
block|{
block|}
comment|/**      * Protected constructor for new subjects.      *       * @param fullSubjectName the name of the new subject to be created      */
specifier|protected
name|EventSubject
parameter_list|(
name|String
name|fullSubjectName
parameter_list|)
block|{
name|_fullyQualifiedSubjectName
operator|=
name|fullSubjectName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|EventSubject
condition|)
block|{
return|return
name|_fullyQualifiedSubjectName
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|EventSubject
operator|)
name|obj
operator|)
operator|.
name|getSubjectName
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|(
literal|17
argument_list|,
literal|3
argument_list|)
operator|.
name|append
argument_list|(
name|_fullyQualifiedSubjectName
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
specifier|public
name|String
name|getSubjectName
parameter_list|()
block|{
return|return
name|_fullyQualifiedSubjectName
return|;
block|}
comment|/**      * @return a String in the form<code>&lt;ClassName 0x123456&gt; SomeName</code>      * @see Object#toString()      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|64
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" 0x"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"> "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|_fullyQualifiedSubjectName
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

