begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_comment
comment|/**  * Simple mapper of Object[] to POJO class. This class relies on field order, so use with caution.  * @param<T> type of object to produce  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|PojoMapper
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Function
argument_list|<
name|Object
index|[]
argument_list|,
name|T
argument_list|>
block|{
specifier|private
specifier|static
name|MethodHandles
operator|.
name|Lookup
name|lookup
init|=
name|MethodHandles
operator|.
name|lookup
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
decl_stmt|;
specifier|private
specifier|final
name|MethodHandle
name|constructor
decl_stmt|;
specifier|private
specifier|final
name|MethodHandle
index|[]
name|setters
decl_stmt|;
specifier|public
name|PojoMapper
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
try|try
block|{
name|this
operator|.
name|constructor
operator|=
name|lookup
operator|.
name|unreflectConstructor
argument_list|(
name|type
operator|.
name|getConstructor
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|IllegalAccessException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"No default constructor found for class '%s'."
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|Field
index|[]
name|declaredFields
init|=
name|type
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
name|this
operator|.
name|setters
operator|=
operator|new
name|MethodHandle
index|[
name|declaredFields
operator|.
name|length
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|declaredFields
control|)
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|setters
index|[
name|i
operator|++
index|]
operator|=
name|lookup
operator|.
name|unreflectSetter
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Field '%s'.'%s' is inaccessible."
argument_list|,
name|e
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|T
name|newObject
parameter_list|()
block|{
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
name|object
init|=
operator|(
name|T
operator|)
name|constructor
operator|.
name|invoke
argument_list|()
decl_stmt|;
return|return
name|object
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unable to instantiate %s."
argument_list|,
name|ex
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|T
name|apply
parameter_list|(
name|Object
index|[]
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|length
operator|>
name|setters
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unable to create '%s'. Values length (%d)> fields count (%d)"
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|setters
operator|.
name|length
argument_list|)
throw|;
block|}
name|T
name|object
init|=
name|newObject
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|data
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|setters
index|[
name|i
index|]
operator|.
name|invoke
argument_list|(
name|object
argument_list|,
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unable to set field of %s."
argument_list|,
name|ex
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|object
return|;
block|}
block|}
end_class

end_unit

