begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyVisitor
import|;
end_import

begin_comment
comment|/**  * A superclass of DataObject properties that accesses object via DataObject methods.  *   * @since 3.0  */
end_comment

begin_class
specifier|abstract
class|class
name|DataObjectBaseProperty
implements|implements
name|Property
implements|,
name|Serializable
block|{
specifier|public
specifier|abstract
name|String
name|getName
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|void
name|injectValueHolder
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|PropertyException
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|visit
parameter_list|(
name|PropertyVisitor
name|visitor
parameter_list|)
function_decl|;
specifier|public
name|Object
name|readProperty
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|PropertyException
block|{
try|try
block|{
return|return
name|toDataObject
argument_list|(
name|object
argument_list|)
operator|.
name|readProperty
argument_list|(
name|getName
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|PropertyException
argument_list|(
literal|"Error reading DataObject property: "
operator|+
name|getName
argument_list|()
argument_list|,
name|this
argument_list|,
name|object
argument_list|,
name|th
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|writeProperty
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
name|oldValue
parameter_list|,
name|Object
name|newValue
parameter_list|)
throws|throws
name|PropertyException
block|{
try|try
block|{
name|toDataObject
argument_list|(
name|object
argument_list|)
operator|.
name|writeProperty
argument_list|(
name|getName
argument_list|()
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|PropertyException
argument_list|(
literal|"Error writing DataObject property: "
operator|+
name|getName
argument_list|()
argument_list|,
name|this
argument_list|,
name|object
argument_list|,
name|th
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|readPropertyDirectly
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|PropertyException
block|{
try|try
block|{
return|return
name|toDataObject
argument_list|(
name|object
argument_list|)
operator|.
name|readPropertyDirectly
argument_list|(
name|getName
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|PropertyException
argument_list|(
literal|"Error reading DataObject property: "
operator|+
name|getName
argument_list|()
argument_list|,
name|this
argument_list|,
name|object
argument_list|,
name|th
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|writePropertyDirectly
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
name|oldValue
parameter_list|,
name|Object
name|newValue
parameter_list|)
throws|throws
name|PropertyException
block|{
try|try
block|{
name|toDataObject
argument_list|(
name|object
argument_list|)
operator|.
name|writePropertyDirectly
argument_list|(
name|getName
argument_list|()
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|PropertyException
argument_list|(
literal|"Error writing DataObject property: "
operator|+
name|getName
argument_list|()
argument_list|,
name|this
argument_list|,
name|object
argument_list|,
name|th
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|final
name|DataObject
name|toDataObject
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|PropertyException
block|{
try|try
block|{
return|return
operator|(
name|DataObject
operator|)
name|object
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PropertyException
argument_list|(
literal|"Object is not a DataObject: '"
operator|+
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|this
argument_list|,
name|object
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

