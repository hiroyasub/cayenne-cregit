begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_comment
comment|/**  * Utility methods to quickly access object properties. This class supports  * simple and nested properties and also conversion of property values to match  * property type. No converter customization is provided yet, so only basic  * converters for Strings, Numbers and primitives are available.  *   * @since 1.2  */
end_comment

begin_class
specifier|public
class|class
name|PropertyUtils
block|{
specifier|private
specifier|static
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Accessor
argument_list|>
name|PATH_ACCESSORS
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ConcurrentMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Accessor
argument_list|>
argument_list|>
name|SEGMENT_ACCESSORS
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** 	 * Compiles an accessor that can be used for fast access for the nested 	 * property of the objects of a given class. 	 *  	 * @since 4.0 	 */
specifier|public
specifier|static
name|Accessor
name|accessor
parameter_list|(
name|String
name|nestedPropertyName
parameter_list|)
block|{
if|if
condition|(
name|nestedPropertyName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null property name."
argument_list|)
throw|;
block|}
if|if
condition|(
name|nestedPropertyName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Empty property name."
argument_list|)
throw|;
block|}
comment|// PathAccessor is simply a chain of path segment wrappers. The actual
comment|// accessor is resolved (with caching) during evaluation. Otherwise we
comment|// won't be able to handle subclasses of declared property types...
comment|// TODO: perhaps Java 7 MethodHandles are the answer to truly "compiled"
comment|// path accessor?
return|return
name|compilePathAccessor
argument_list|(
name|nestedPropertyName
argument_list|)
return|;
block|}
specifier|static
name|Accessor
name|compilePathAccessor
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|Accessor
name|accessor
init|=
name|PATH_ACCESSORS
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessor
operator|==
literal|null
condition|)
block|{
name|int
name|dot
init|=
name|path
operator|.
name|indexOf
argument_list|(
name|Entity
operator|.
name|PATH_SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|dot
operator|==
literal|0
operator|||
name|dot
operator|==
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid path: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|String
name|segment
init|=
name|dot
operator|<
literal|0
condition|?
name|path
else|:
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dot
argument_list|)
decl_stmt|;
name|Accessor
name|remainingAccessor
init|=
name|dot
operator|<
literal|0
condition|?
literal|null
else|:
name|compilePathAccessor
argument_list|(
name|path
operator|.
name|substring
argument_list|(
name|dot
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Accessor
name|newAccessor
init|=
operator|new
name|PathAccessor
argument_list|(
name|segment
argument_list|,
name|remainingAccessor
argument_list|)
decl_stmt|;
name|Accessor
name|existingAccessor
init|=
name|PATH_ACCESSORS
operator|.
name|putIfAbsent
argument_list|(
name|path
argument_list|,
name|newAccessor
argument_list|)
decl_stmt|;
name|accessor
operator|=
name|existingAccessor
operator|!=
literal|null
condition|?
name|existingAccessor
else|:
name|newAccessor
expr_stmt|;
block|}
return|return
name|accessor
return|;
block|}
specifier|static
name|Accessor
name|getOrCreateSegmentAccessor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|objectClass
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Accessor
argument_list|>
name|forType
init|=
name|SEGMENT_ACCESSORS
operator|.
name|get
argument_list|(
name|objectClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|forType
operator|==
literal|null
condition|)
block|{
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Accessor
argument_list|>
name|newPropAccessors
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Accessor
argument_list|>
argument_list|()
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Accessor
argument_list|>
name|existingPropAccessors
init|=
name|SEGMENT_ACCESSORS
operator|.
name|putIfAbsent
argument_list|(
name|objectClass
argument_list|,
name|newPropAccessors
argument_list|)
decl_stmt|;
name|forType
operator|=
name|existingPropAccessors
operator|!=
literal|null
condition|?
name|existingPropAccessors
else|:
name|newPropAccessors
expr_stmt|;
block|}
name|Accessor
name|a
init|=
name|forType
operator|.
name|get
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
name|Accessor
name|newA
init|=
name|createSegmentAccessor
argument_list|(
name|objectClass
argument_list|,
name|propertyName
argument_list|)
decl_stmt|;
name|Accessor
name|existingA
init|=
name|forType
operator|.
name|putIfAbsent
argument_list|(
name|propertyName
argument_list|,
name|newA
argument_list|)
decl_stmt|;
name|a
operator|=
name|existingA
operator|!=
literal|null
condition|?
name|existingA
else|:
name|newA
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
specifier|static
name|Accessor
name|createSegmentAccessor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|objectClass
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
if|if
condition|(
name|Map
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|objectClass
argument_list|)
condition|)
block|{
return|return
operator|new
name|MapAccessor
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|BeanAccessor
argument_list|(
name|objectClass
argument_list|,
name|propertyName
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
comment|/** 	 * Returns object property using JavaBean-compatible introspection with one 	 * addition - a property can be a dot-separated property name path. 	 */
specifier|public
specifier|static
name|Object
name|getProperty
parameter_list|(
name|Object
name|object
parameter_list|,
name|String
name|nestedPropertyName
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
return|return
name|accessor
argument_list|(
name|nestedPropertyName
argument_list|)
operator|.
name|getValue
argument_list|(
name|object
argument_list|)
return|;
block|}
comment|/** 	 * Sets object property using JavaBean-compatible introspection with one 	 * addition - a property can be a dot-separated property name path. Before 	 * setting a value attempts to convert it to a type compatible with the 	 * object property. Automatic conversion is supported between strings and 	 * basic types like numbers or primitives. 	 */
specifier|public
specifier|static
name|void
name|setProperty
parameter_list|(
name|Object
name|object
parameter_list|,
name|String
name|nestedPropertyName
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|CayenneRuntimeException
block|{
name|accessor
argument_list|(
name|nestedPropertyName
argument_list|)
operator|.
name|setValue
argument_list|(
name|object
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * "Normalizes" passed type, converting primitive types to their object 	 * counterparts. 	 */
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|normalizeType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|String
name|className
init|=
name|type
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"byte"
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
name|Byte
operator|.
name|class
return|;
block|}
if|else if
condition|(
literal|"int"
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
name|Integer
operator|.
name|class
return|;
block|}
if|else if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
name|Long
operator|.
name|class
return|;
block|}
if|else if
condition|(
literal|"short"
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
name|Short
operator|.
name|class
return|;
block|}
if|else if
condition|(
literal|"char"
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
name|Character
operator|.
name|class
return|;
block|}
if|else if
condition|(
literal|"double"
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
name|Double
operator|.
name|class
return|;
block|}
if|else if
condition|(
literal|"float"
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
name|Float
operator|.
name|class
return|;
block|}
if|else if
condition|(
literal|"boolean"
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|class
return|;
block|}
block|}
return|return
name|type
return|;
block|}
comment|/** 	 * Returns default value that should be used for nulls. For non-primitive 	 * types, null is returned. For primitive types a default such as zero or 	 * false is returned. 	 */
specifier|static
name|Object
name|defaultNullValueForType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|String
name|className
init|=
name|type
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"byte"
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
operator|(
name|byte
operator|)
literal|0
return|;
block|}
if|else if
condition|(
literal|"int"
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
if|else if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
literal|0L
return|;
block|}
if|else if
condition|(
literal|"short"
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
operator|(
name|short
operator|)
literal|0
return|;
block|}
if|else if
condition|(
literal|"char"
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
operator|(
name|char
operator|)
literal|0
return|;
block|}
if|else if
condition|(
literal|"double"
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
literal|0.0d
return|;
block|}
if|else if
condition|(
literal|"float"
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
literal|0.0f
return|;
block|}
if|else if
condition|(
literal|"boolean"
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|PropertyUtils
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|static
specifier|final
class|class
name|PathAccessor
implements|implements
name|Accessor
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|2056090443413498626L
decl_stmt|;
specifier|private
specifier|final
name|String
name|segmentName
decl_stmt|;
specifier|private
specifier|final
name|Accessor
name|nextAccessor
decl_stmt|;
specifier|public
name|PathAccessor
parameter_list|(
name|String
name|segmentName
parameter_list|,
name|Accessor
name|nextAccessor
parameter_list|)
block|{
comment|// trim outer join component
if|if
condition|(
name|segmentName
operator|.
name|endsWith
argument_list|(
name|Entity
operator|.
name|OUTER_JOIN_INDICATOR
argument_list|)
condition|)
block|{
name|this
operator|.
name|segmentName
operator|=
name|segmentName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|segmentName
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|segmentName
operator|=
name|segmentName
expr_stmt|;
block|}
name|this
operator|.
name|nextAccessor
operator|=
name|nextAccessor
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|segmentName
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getValue
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|PropertyException
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|value
init|=
name|getOrCreateSegmentAccessor
argument_list|(
name|object
operator|.
name|getClass
argument_list|()
argument_list|,
name|segmentName
argument_list|)
operator|.
name|getValue
argument_list|(
name|object
argument_list|)
decl_stmt|;
return|return
name|nextAccessor
operator|!=
literal|null
condition|?
name|nextAccessor
operator|.
name|getValue
argument_list|(
name|value
argument_list|)
else|:
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
name|newValue
parameter_list|)
throws|throws
name|PropertyException
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Accessor
name|segmentAccessor
init|=
name|getOrCreateSegmentAccessor
argument_list|(
name|object
operator|.
name|getClass
argument_list|()
argument_list|,
name|segmentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextAccessor
operator|!=
literal|null
condition|)
block|{
name|nextAccessor
operator|.
name|setValue
argument_list|(
name|segmentAccessor
operator|.
name|getValue
argument_list|(
name|object
argument_list|)
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|segmentAccessor
operator|.
name|setValue
argument_list|(
name|object
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

