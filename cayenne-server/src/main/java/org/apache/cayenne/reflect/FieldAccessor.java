begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * A PropertyAccessor that performs direct Field access.  *   * @since 1.2  */
end_comment

begin_class
specifier|public
class|class
name|FieldAccessor
implements|implements
name|Accessor
block|{
specifier|protected
name|String
name|propertyName
decl_stmt|;
specifier|protected
name|Field
name|field
decl_stmt|;
specifier|protected
name|Object
name|nullValue
decl_stmt|;
specifier|public
name|FieldAccessor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|objectClass
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|propertyType
parameter_list|)
block|{
comment|// sanity check
if|if
condition|(
name|objectClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null objectClass"
argument_list|)
throw|;
block|}
if|if
condition|(
name|propertyName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null propertyName"
argument_list|)
throw|;
block|}
name|this
operator|.
name|propertyName
operator|=
name|propertyName
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|prepareField
argument_list|(
name|objectClass
argument_list|,
name|propertyName
argument_list|,
name|propertyType
argument_list|)
expr_stmt|;
name|this
operator|.
name|nullValue
operator|=
name|PropertyUtils
operator|.
name|defaultNullValueForType
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|propertyName
return|;
block|}
specifier|public
name|Object
name|getValue
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|PropertyException
block|{
try|try
block|{
return|return
name|field
operator|.
name|get
argument_list|(
name|object
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|PropertyException
argument_list|(
literal|"Error reading field: "
operator|+
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|this
argument_list|,
name|object
argument_list|,
name|th
argument_list|)
throw|;
block|}
block|}
comment|/**      * @since 3.0      */
specifier|public
name|void
name|setValue
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
name|newValue
parameter_list|)
throws|throws
name|PropertyException
block|{
comment|// this will take care of primitives.
if|if
condition|(
name|newValue
operator|==
literal|null
condition|)
block|{
name|newValue
operator|=
name|this
operator|.
name|nullValue
expr_stmt|;
block|}
try|try
block|{
name|field
operator|.
name|set
argument_list|(
name|object
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|PropertyException
argument_list|(
literal|"Error writing field: "
operator|+
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|this
argument_list|,
name|object
argument_list|,
name|th
argument_list|)
throw|;
block|}
block|}
comment|/**      * Finds a field for the property, ensuring that direct access via reflection is      * possible.      */
specifier|protected
name|Field
name|prepareField
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|beanClass
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|propertyType
parameter_list|)
block|{
name|Field
name|field
decl_stmt|;
comment|// locate field
try|try
block|{
name|field
operator|=
name|lookupFieldInHierarchy
argument_list|(
name|beanClass
argument_list|,
name|propertyName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error accessing field '"
operator|+
name|propertyName
operator|+
literal|"' in class: "
operator|+
name|beanClass
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"No field '"
operator|+
name|propertyName
operator|+
literal|"' is defined in class: "
operator|+
name|beanClass
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// set accessability
if|if
condition|(
operator|!
name|Util
operator|.
name|isAccessible
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|propertyType
operator|!=
literal|null
condition|)
block|{
comment|// check that the field is of expected class...
if|if
condition|(
operator|!
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|propertyType
argument_list|)
condition|)
block|{
comment|// allow primitive to object conversions...
if|if
condition|(
operator|!
name|PropertyUtils
operator|.
name|normalizeType
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|isAssignableFrom
argument_list|(
name|PropertyUtils
operator|.
name|normalizeType
argument_list|(
name|propertyType
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Expected property type '%s', got '%s'. Property: '%s.%s'."
argument_list|,
name|propertyType
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|beanClass
operator|.
name|getName
argument_list|()
argument_list|,
name|propertyName
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|field
return|;
block|}
comment|/**      * Recursively looks for a named field in a class hierarchy.      */
specifier|protected
name|Field
name|lookupFieldInHierarchy
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|beanClass
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|SecurityException
throws|,
name|NoSuchFieldException
block|{
comment|// TODO: support property names following other common naming patterns, such as
comment|// "_propertyName"
try|try
block|{
return|return
name|beanClass
operator|.
name|getDeclaredField
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|superClass
init|=
name|beanClass
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superClass
operator|==
literal|null
operator|||
name|superClass
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
return|return
name|lookupFieldInHierarchy
argument_list|(
name|superClass
argument_list|,
name|fieldName
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

