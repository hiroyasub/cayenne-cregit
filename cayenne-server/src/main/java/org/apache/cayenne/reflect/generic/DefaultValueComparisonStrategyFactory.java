begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|generic
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|ValueObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|ValueObjectTypeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|DefaultValueComparisonStrategyFactory
implements|implements
name|ValueComparisonStrategyFactory
block|{
specifier|private
specifier|static
specifier|final
name|ValueComparisonStrategy
argument_list|<
name|Object
argument_list|>
name|DEFAULT_STRATEGY
init|=
operator|new
name|DefaultValueComparisonStrategy
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ValueObjectTypeRegistry
name|valueObjectTypeRegistry
decl_stmt|;
specifier|public
name|DefaultValueComparisonStrategyFactory
parameter_list|(
annotation|@
name|Inject
name|ValueObjectTypeRegistry
name|valueObjectTypeRegistry
parameter_list|)
block|{
name|this
operator|.
name|valueObjectTypeRegistry
operator|=
name|valueObjectTypeRegistry
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ValueComparisonStrategy
argument_list|<
name|Object
argument_list|>
name|getStrategy
parameter_list|(
name|ObjAttribute
name|attribute
parameter_list|)
block|{
name|ValueObjectType
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|valueObjectType
init|=
name|valueObjectTypeRegistry
operator|.
name|getValueType
argument_list|(
name|attribute
operator|.
name|getJavaClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueObjectType
operator|==
literal|null
condition|)
block|{
return|return
name|DEFAULT_STRATEGY
return|;
block|}
else|else
block|{
return|return
operator|new
name|ValueObjectTypeComparisonStrategy
argument_list|(
name|valueObjectType
argument_list|)
return|;
block|}
block|}
comment|// Using classes instead of lambdas to allow serialization
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|}
argument_list|)
specifier|static
class|class
name|ValueObjectTypeComparisonStrategy
implements|implements
name|ValueComparisonStrategy
argument_list|<
name|Object
argument_list|>
implements|,
name|Serializable
block|{
specifier|private
specifier|final
name|ValueObjectType
name|valueObjectType
decl_stmt|;
specifier|public
name|ValueObjectTypeComparisonStrategy
parameter_list|(
name|ValueObjectType
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|valueObjectType
parameter_list|)
block|{
name|this
operator|.
name|valueObjectType
operator|=
name|valueObjectType
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|value1
parameter_list|,
name|Object
name|value2
parameter_list|)
block|{
return|return
name|valueObjectType
operator|.
name|equals
argument_list|(
name|value1
argument_list|,
name|value2
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|DefaultValueComparisonStrategy
implements|implements
name|ValueComparisonStrategy
argument_list|<
name|Object
argument_list|>
implements|,
name|Serializable
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

