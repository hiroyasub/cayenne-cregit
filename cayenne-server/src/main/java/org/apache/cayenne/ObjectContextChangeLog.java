begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|ArcCreateOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|ArcDeleteOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|CompoundDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|NodeDiff
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectStreamException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Stores graph operations in the order they were performed, optionally allowing to set  * named markers.  *   * @since 1.2  */
end_comment

begin_class
class|class
name|ObjectContextChangeLog
block|{
name|List
argument_list|<
name|GraphDiff
argument_list|>
name|diffs
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|markers
decl_stmt|;
name|ObjectContextChangeLog
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
name|void
name|unregisterNode
parameter_list|(
name|Object
name|nodeId
parameter_list|)
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|diffs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|next
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|instanceof
name|NodeDiff
condition|)
block|{
if|if
condition|(
name|nodeId
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|NodeDiff
operator|)
name|next
operator|)
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|next
operator|instanceof
name|ArcCreateOperation
condition|)
block|{
if|if
condition|(
name|nodeId
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ArcCreateOperation
operator|)
name|next
operator|)
operator|.
name|getTargetNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|next
operator|instanceof
name|ArcDeleteOperation
condition|)
block|{
if|if
condition|(
name|nodeId
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ArcDeleteOperation
operator|)
name|next
operator|)
operator|.
name|getTargetNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|void
name|setMarker
parameter_list|(
name|String
name|markerTag
parameter_list|)
block|{
name|markers
operator|.
name|put
argument_list|(
name|markerTag
argument_list|,
name|diffs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|removeMarker
parameter_list|(
name|String
name|markerTag
parameter_list|)
block|{
name|markers
operator|.
name|remove
argument_list|(
name|markerTag
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a combined GraphDiff for all recorded operations.      */
name|GraphDiff
name|getDiffs
parameter_list|()
block|{
return|return
operator|new
name|CompoundDiff
argument_list|(
name|immutableList
argument_list|(
literal|0
argument_list|,
name|diffs
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|GraphDiff
name|getDiffsAfterMarker
parameter_list|(
name|String
name|markerTag
parameter_list|)
block|{
name|Integer
name|pos
init|=
name|markers
operator|.
name|get
argument_list|(
name|markerTag
argument_list|)
decl_stmt|;
name|int
name|marker
init|=
operator|(
name|pos
operator|==
literal|null
operator|)
condition|?
operator|-
literal|1
else|:
name|pos
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|marker
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No marked position for tag '"
operator|+
name|markerTag
operator|+
literal|"'"
argument_list|)
throw|;
block|}
return|return
operator|new
name|CompoundDiff
argument_list|(
name|immutableList
argument_list|(
name|marker
argument_list|,
name|diffs
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|boolean
name|hasMarker
parameter_list|(
name|String
name|markerTag
parameter_list|)
block|{
return|return
name|markers
operator|.
name|containsKey
argument_list|(
name|markerTag
argument_list|)
return|;
block|}
comment|/**      * "Forgets" all stored operations.      */
name|void
name|reset
parameter_list|()
block|{
comment|// must create a new list instead of clearing an existing one, as the original
comment|// list may have been exposed via events or "getDiffs", and trimming it is
comment|// undesirable.
name|this
operator|.
name|diffs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|markers
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|int
name|size
parameter_list|()
block|{
return|return
name|diffs
operator|.
name|size
argument_list|()
return|;
block|}
name|int
name|sizeAfterMarker
parameter_list|(
name|String
name|markerTag
parameter_list|)
block|{
name|Integer
name|pos
init|=
name|markers
operator|.
name|get
argument_list|(
name|markerTag
argument_list|)
decl_stmt|;
name|int
name|marker
init|=
operator|(
name|pos
operator|==
literal|null
operator|)
condition|?
operator|-
literal|1
else|:
name|pos
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|marker
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No marked position for tag '"
operator|+
name|markerTag
operator|+
literal|"'"
argument_list|)
throw|;
block|}
return|return
name|diffs
operator|.
name|size
argument_list|()
operator|-
name|marker
return|;
block|}
comment|/**      * Adds an operation to the list.      */
name|void
name|addOperation
parameter_list|(
name|GraphDiff
name|diff
parameter_list|)
block|{
name|diffs
operator|.
name|add
argument_list|(
name|diff
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a sublist of the diffs list that shouldn't change when OperationRecorder is      * cleared or new operations are added.      */
specifier|private
name|List
argument_list|<
name|GraphDiff
argument_list|>
name|immutableList
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
if|if
condition|(
name|toIndex
operator|-
name|fromIndex
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|// Assuming that internal diffs list can only grow and can never be trimmed,
comment|// return sublist will never change - something that callers are expecting
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
operator|new
name|SubList
argument_list|(
name|diffs
argument_list|,
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
argument_list|)
return|;
block|}
comment|// moded Sublist from JDK that doesn't check for co-modification, as the underlying
comment|// list is guaranteed to only grow and never shrink or be replaced.
specifier|static
class|class
name|SubList
extends|extends
name|AbstractList
argument_list|<
name|GraphDiff
argument_list|>
implements|implements
name|Serializable
block|{
specifier|private
name|List
argument_list|<
name|GraphDiff
argument_list|>
name|list
decl_stmt|;
specifier|private
name|int
name|offset
decl_stmt|;
specifier|private
name|int
name|size
decl_stmt|;
name|SubList
parameter_list|(
name|List
argument_list|<
name|GraphDiff
argument_list|>
name|list
parameter_list|,
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
if|if
condition|(
name|fromIndex
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"fromIndex = "
operator|+
name|fromIndex
argument_list|)
throw|;
block|}
if|if
condition|(
name|toIndex
operator|>
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"toIndex = "
operator|+
name|toIndex
argument_list|)
throw|;
block|}
if|if
condition|(
name|fromIndex
operator|>
name|toIndex
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"fromIndex("
operator|+
name|fromIndex
operator|+
literal|")> toIndex("
operator|+
name|toIndex
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
name|offset
operator|=
name|fromIndex
expr_stmt|;
name|size
operator|=
name|toIndex
operator|-
name|fromIndex
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|GraphDiff
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|rangeCheck
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|list
operator|.
name|get
argument_list|(
name|index
operator|+
name|offset
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
specifier|private
name|void
name|rangeCheck
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|size
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Index: "
operator|+
name|index
operator|+
literal|",Size: "
operator|+
name|size
argument_list|)
throw|;
block|}
block|}
comment|// serialization method...
specifier|private
name|Object
name|writeReplace
parameter_list|()
throws|throws
name|ObjectStreamException
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|list
operator|.
name|subList
argument_list|(
name|offset
argument_list|,
name|offset
operator|+
name|size
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

