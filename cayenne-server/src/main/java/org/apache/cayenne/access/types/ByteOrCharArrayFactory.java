begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|IDUtil
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|log
operator|.
name|CommonsJdbcEventLogger
operator|.
name|TRIM_VALUES_THRESHOLD
import|;
end_import

begin_comment
comment|/**  * A factory that dynamically creates ExtendedTypes for Character, Character[], Byte[] and  * char[] based on adapter configured types for String and byte[].  *   * @since 3.0  */
end_comment

begin_class
class|class
name|ByteOrCharArrayFactory
implements|implements
name|ExtendedTypeFactory
block|{
specifier|private
name|ExtendedTypeMap
name|map
decl_stmt|;
name|ByteOrCharArrayFactory
parameter_list|(
name|ExtendedTypeMap
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
block|}
specifier|public
name|ExtendedType
name|getType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|objectClass
parameter_list|)
block|{
if|if
condition|(
name|objectClass
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|elementType
init|=
name|objectClass
operator|.
name|getComponentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|elementType
argument_list|)
condition|)
block|{
comment|// can't use "getRegisteredType" as it causes infinite recursion
name|ExtendedType
argument_list|<
name|String
argument_list|>
name|stringType
init|=
name|map
operator|.
name|getExplictlyRegisteredType
argument_list|(
literal|"java.lang.String"
argument_list|)
decl_stmt|;
return|return
operator|new
name|CharacterArrayType
argument_list|(
name|stringType
argument_list|)
return|;
block|}
if|else if
condition|(
name|Character
operator|.
name|TYPE
operator|.
name|isAssignableFrom
argument_list|(
name|elementType
argument_list|)
condition|)
block|{
comment|// can't use "getRegisteredType" as it causes infinite recursion
name|ExtendedType
argument_list|<
name|String
argument_list|>
name|stringType
init|=
name|map
operator|.
name|getExplictlyRegisteredType
argument_list|(
literal|"java.lang.String"
argument_list|)
decl_stmt|;
return|return
operator|new
name|CharArrayType
argument_list|(
name|stringType
argument_list|)
return|;
block|}
if|else if
condition|(
name|Byte
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|elementType
argument_list|)
condition|)
block|{
comment|// can't use "getRegisteredType" as it causes infinite recursion
name|ExtendedType
argument_list|<
name|byte
index|[]
argument_list|>
name|bytesType
init|=
name|map
operator|.
name|getExplictlyRegisteredType
argument_list|(
literal|"byte[]"
argument_list|)
decl_stmt|;
return|return
operator|new
name|ByteWrapperArrayType
argument_list|(
name|bytesType
argument_list|)
return|;
block|}
block|}
if|else if
condition|(
name|Character
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|objectClass
argument_list|)
condition|)
block|{
comment|// can't use "getRegisteredType" as it causes infinite recursion
name|ExtendedType
argument_list|<
name|String
argument_list|>
name|stringType
init|=
name|map
operator|.
name|getExplictlyRegisteredType
argument_list|(
literal|"java.lang.String"
argument_list|)
decl_stmt|;
return|return
operator|new
name|CharacterType
argument_list|(
name|stringType
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|final
class|class
name|CharacterType
extends|extends
name|ExtendedTypeDecorator
argument_list|<
name|Character
argument_list|,
name|String
argument_list|>
block|{
name|CharacterType
parameter_list|(
name|ExtendedType
argument_list|<
name|String
argument_list|>
name|stringType
parameter_list|)
block|{
name|super
argument_list|(
name|stringType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
literal|"java.lang.Character"
return|;
block|}
annotation|@
name|Override
name|String
name|fromJavaObject
parameter_list|(
name|Character
name|object
parameter_list|)
block|{
return|return
name|object
operator|!=
literal|null
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|object
operator|.
name|charValue
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
name|Character
name|toJavaObject
parameter_list|(
name|String
name|string
parameter_list|)
block|{
if|if
condition|(
name|string
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|string
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|?
name|string
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
else|:
literal|null
return|;
block|}
block|}
specifier|final
class|class
name|CharArrayType
extends|extends
name|ExtendedTypeDecorator
argument_list|<
name|char
index|[]
argument_list|,
name|String
argument_list|>
block|{
name|CharArrayType
parameter_list|(
name|ExtendedType
argument_list|<
name|String
argument_list|>
name|stringType
parameter_list|)
block|{
name|super
argument_list|(
name|stringType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
literal|"char[]"
return|;
block|}
annotation|@
name|Override
name|String
name|fromJavaObject
parameter_list|(
name|char
index|[]
name|object
parameter_list|)
block|{
return|return
name|object
operator|!=
literal|null
condition|?
operator|new
name|String
argument_list|(
name|object
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
name|char
index|[]
name|toJavaObject
parameter_list|(
name|String
name|object
parameter_list|)
block|{
return|return
name|object
operator|!=
literal|null
condition|?
name|object
operator|.
name|toCharArray
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|char
index|[]
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|"\'null\'"
return|;
block|}
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"< "
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|Array
operator|.
name|getLength
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|boolean
name|trimming
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|len
operator|>
name|TRIM_VALUES_THRESHOLD
condition|)
block|{
name|len
operator|=
name|TRIM_VALUES_THRESHOLD
expr_stmt|;
name|trimming
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|Array
operator|.
name|get
argument_list|(
name|value
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trimming
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"..."
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|final
class|class
name|CharacterArrayType
extends|extends
name|ExtendedTypeDecorator
argument_list|<
name|Character
index|[]
argument_list|,
name|String
argument_list|>
block|{
name|CharacterArrayType
parameter_list|(
name|ExtendedType
argument_list|<
name|String
argument_list|>
name|stringType
parameter_list|)
block|{
name|super
argument_list|(
name|stringType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
literal|"java.lang.Character[]"
return|;
block|}
annotation|@
name|Override
name|String
name|fromJavaObject
parameter_list|(
name|Character
index|[]
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
name|object
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Character
name|aChar
range|:
name|object
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|aChar
operator|!=
literal|null
condition|?
name|aChar
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
name|Character
index|[]
name|toJavaObject
parameter_list|(
name|String
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Character
index|[]
name|chars
init|=
operator|new
name|Character
index|[
name|object
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|object
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|chars
index|[
name|i
index|]
operator|=
name|object
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|chars
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|Character
index|[]
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|"\'null\'"
return|;
block|}
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"< "
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|Array
operator|.
name|getLength
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|boolean
name|trimming
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|len
operator|>
name|TRIM_VALUES_THRESHOLD
condition|)
block|{
name|len
operator|=
name|TRIM_VALUES_THRESHOLD
expr_stmt|;
name|trimming
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|Array
operator|.
name|get
argument_list|(
name|value
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trimming
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"..."
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|final
class|class
name|ByteWrapperArrayType
extends|extends
name|ExtendedTypeDecorator
argument_list|<
name|Byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
block|{
name|ByteWrapperArrayType
parameter_list|(
name|ExtendedType
argument_list|<
name|byte
index|[]
argument_list|>
name|byteArrayType
parameter_list|)
block|{
name|super
argument_list|(
name|byteArrayType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
literal|"java.lang.Byte[]"
return|;
block|}
annotation|@
name|Override
name|byte
index|[]
name|fromJavaObject
parameter_list|(
name|Byte
index|[]
name|bytes
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|bytes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buffer
index|[
name|i
index|]
operator|=
name|bytes
index|[
name|i
index|]
operator|!=
literal|null
condition|?
name|bytes
index|[
name|i
index|]
else|:
literal|0
expr_stmt|;
block|}
return|return
name|buffer
return|;
block|}
annotation|@
name|Override
name|Byte
index|[]
name|toJavaObject
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Byte
index|[]
name|byteWrappers
init|=
operator|new
name|Byte
index|[
name|bytes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byteWrappers
index|[
name|i
index|]
operator|=
name|bytes
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|byteWrappers
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|Byte
index|[]
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|"\'null\'"
return|;
block|}
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"< "
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|value
operator|.
name|length
decl_stmt|;
name|boolean
name|trimming
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|len
operator|>
name|TRIM_VALUES_THRESHOLD
condition|)
block|{
name|len
operator|=
name|TRIM_VALUES_THRESHOLD
expr_stmt|;
name|trimming
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|IDUtil
operator|.
name|appendFormattedByte
argument_list|(
name|buffer
argument_list|,
name|value
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trimming
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"..."
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

