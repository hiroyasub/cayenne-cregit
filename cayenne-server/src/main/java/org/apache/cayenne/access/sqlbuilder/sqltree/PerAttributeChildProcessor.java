begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_comment
comment|/**  * @since 4.2  * @param<T> type of the node to process  */
end_comment

begin_class
specifier|public
class|class
name|PerAttributeChildProcessor
parameter_list|<
name|T
extends|extends
name|Node
parameter_list|>
implements|implements
name|ChildProcessor
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|DbAttribute
argument_list|,
name|ChildProcessor
argument_list|<
name|T
argument_list|>
argument_list|>
name|processorByAttribute
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Function
argument_list|<
name|T
argument_list|,
name|DbAttribute
argument_list|>
name|attributeMapper
decl_stmt|;
specifier|private
specifier|final
name|Function
argument_list|<
name|DbAttribute
argument_list|,
name|ChildProcessor
argument_list|<
name|T
argument_list|>
argument_list|>
name|processorFactory
decl_stmt|;
specifier|public
name|PerAttributeChildProcessor
parameter_list|(
name|Function
argument_list|<
name|T
argument_list|,
name|DbAttribute
argument_list|>
name|attributeMapper
parameter_list|,
name|Function
argument_list|<
name|DbAttribute
argument_list|,
name|ChildProcessor
argument_list|<
name|T
argument_list|>
argument_list|>
name|processorFactory
parameter_list|)
block|{
name|this
operator|.
name|processorFactory
operator|=
name|processorFactory
expr_stmt|;
name|this
operator|.
name|attributeMapper
operator|=
name|attributeMapper
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|Node
argument_list|>
name|process
parameter_list|(
name|Node
name|parent
parameter_list|,
name|T
name|child
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|DbAttribute
name|dbAttribute
init|=
name|attributeMapper
operator|.
name|apply
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbAttribute
operator|==
literal|null
condition|)
block|{
return|return
name|processorFactory
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
operator|.
name|process
argument_list|(
name|parent
argument_list|,
name|child
argument_list|,
name|index
argument_list|)
return|;
block|}
return|return
name|processorByAttribute
operator|.
name|computeIfAbsent
argument_list|(
name|dbAttribute
argument_list|,
name|processorFactory
argument_list|)
operator|.
name|process
argument_list|(
name|parent
argument_list|,
name|child
argument_list|,
name|index
argument_list|)
return|;
block|}
block|}
end_class

end_unit

