begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|OperationObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|ejbql
operator|.
name|EJBQLTranslationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|ejbql
operator|.
name|EJBQLTranslatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLBaseVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLCompiledExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLExpressionVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|EJBQLQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLActionVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SQLTemplate
import|;
end_import

begin_comment
comment|/**  * Parses an EJBQL statement, converting it to SQL. Executes the resulting SQL.  *   * @since 3.0  */
end_comment

begin_class
specifier|public
class|class
name|EJBQLAction
extends|extends
name|BaseSQLAction
block|{
specifier|protected
name|SQLActionVisitor
name|actionFactory
decl_stmt|;
specifier|protected
name|EJBQLQuery
name|query
decl_stmt|;
specifier|public
name|EJBQLAction
parameter_list|(
name|EJBQLQuery
name|query
parameter_list|,
name|SQLActionVisitor
name|actionFactory
parameter_list|,
name|DataNode
name|dataNode
parameter_list|)
block|{
name|super
argument_list|(
name|dataNode
argument_list|)
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|actionFactory
operator|=
name|actionFactory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|performAction
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|OperationObserver
name|observer
parameter_list|)
throws|throws
name|Exception
block|{
name|EJBQLCompiledExpression
name|compiledExpression
init|=
name|query
operator|.
name|getExpression
argument_list|(
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|EJBQLTranslatorFactory
name|translatorFactory
init|=
name|dataNode
operator|.
name|getAdapter
argument_list|()
operator|.
name|getEjbqlTranslatorFactory
argument_list|()
decl_stmt|;
specifier|final
name|EJBQLTranslationContext
name|context
init|=
operator|new
name|EJBQLTranslationContext
argument_list|(
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|,
name|query
argument_list|,
name|compiledExpression
argument_list|,
name|translatorFactory
argument_list|,
name|dataNode
operator|.
name|getAdapter
argument_list|()
operator|.
name|getQuotingStrategy
argument_list|()
argument_list|)
decl_stmt|;
name|compiledExpression
operator|.
name|getExpression
argument_list|()
operator|.
name|visit
argument_list|(
operator|new
name|EJBQLBaseVisitor
argument_list|(
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visitSelect
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|EJBQLExpressionVisitor
name|visitor
init|=
name|translatorFactory
operator|.
name|getSelectTranslator
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|expression
operator|.
name|visit
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visitDelete
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|EJBQLExpressionVisitor
name|visitor
init|=
name|translatorFactory
operator|.
name|getDeleteTranslator
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|expression
operator|.
name|visit
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visitUpdate
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|EJBQLExpressionVisitor
name|visitor
init|=
name|translatorFactory
operator|.
name|getUpdateTranslator
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|expression
operator|.
name|visit
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|SQLTemplate
name|sqlQuery
init|=
name|context
operator|.
name|getQuery
argument_list|()
decl_stmt|;
comment|// update with metadata
name|QueryMetadata
name|md
init|=
name|query
operator|.
name|getMetaData
argument_list|(
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|sqlQuery
operator|.
name|setFetchLimit
argument_list|(
name|md
operator|.
name|getFetchLimit
argument_list|()
argument_list|)
expr_stmt|;
name|sqlQuery
operator|.
name|setFetchOffset
argument_list|(
name|md
operator|.
name|getFetchOffset
argument_list|()
argument_list|)
expr_stmt|;
name|sqlQuery
operator|.
name|setResult
argument_list|(
name|compiledExpression
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|sqlQuery
operator|.
name|setPageSize
argument_list|(
name|md
operator|.
name|getPageSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|md
operator|.
name|getStatementFetchSize
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|sqlQuery
operator|.
name|setStatementFetchSize
argument_list|(
name|md
operator|.
name|getStatementFetchSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|queryTimeout
init|=
name|md
operator|.
name|getQueryTimeout
argument_list|()
decl_stmt|;
if|if
condition|(
name|queryTimeout
operator|!=
name|QueryMetadata
operator|.
name|QUERY_TIMEOUT_DEFAULT
condition|)
block|{
name|sqlQuery
operator|.
name|setQueryTimeout
argument_list|(
name|queryTimeout
argument_list|)
expr_stmt|;
block|}
name|actionFactory
operator|.
name|sqlAction
argument_list|(
name|sqlQuery
argument_list|)
operator|.
name|performAction
argument_list|(
name|connection
argument_list|,
name|observer
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

