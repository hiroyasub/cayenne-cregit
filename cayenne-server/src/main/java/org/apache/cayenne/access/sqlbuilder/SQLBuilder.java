begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|AliasedNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|ColumnNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|FunctionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|SimpleNodeTreeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|TextNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SQLBuilder
block|{
specifier|public
specifier|static
name|SelectBuilder
name|select
parameter_list|(
name|NodeBuilder
modifier|...
name|params
parameter_list|)
block|{
return|return
operator|new
name|SelectBuilder
argument_list|(
name|params
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|InsertBuilder
name|insert
parameter_list|(
name|String
name|table
parameter_list|)
block|{
return|return
operator|new
name|InsertBuilder
argument_list|(
name|table
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|InsertBuilder
name|insert
parameter_list|(
name|DbEntity
name|table
parameter_list|)
block|{
return|return
operator|new
name|InsertBuilder
argument_list|(
name|table
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|UpdateBuilder
name|update
parameter_list|(
name|String
name|table
parameter_list|)
block|{
return|return
operator|new
name|UpdateBuilder
argument_list|(
name|table
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|UpdateBuilder
name|update
parameter_list|(
name|DbEntity
name|table
parameter_list|)
block|{
return|return
operator|new
name|UpdateBuilder
argument_list|(
name|table
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|DeleteBuilder
name|delete
parameter_list|(
name|String
name|table
parameter_list|)
block|{
return|return
operator|new
name|DeleteBuilder
argument_list|(
name|table
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|DeleteBuilder
name|delete
parameter_list|(
name|DbEntity
name|table
parameter_list|)
block|{
return|return
operator|new
name|DeleteBuilder
argument_list|(
name|table
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TableNodeBuilder
name|table
parameter_list|(
name|String
name|table
parameter_list|)
block|{
return|return
operator|new
name|TableNodeBuilder
argument_list|(
name|table
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TableNodeBuilder
name|table
parameter_list|(
name|DbEntity
name|table
parameter_list|)
block|{
return|return
operator|new
name|TableNodeBuilder
argument_list|(
name|table
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ColumnNodeBuilder
name|column
parameter_list|(
name|String
name|column
parameter_list|)
block|{
return|return
operator|new
name|ColumnNodeBuilder
argument_list|(
literal|null
argument_list|,
name|column
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JoinNodeBuilder
name|join
parameter_list|(
name|NodeBuilder
name|table
parameter_list|)
block|{
return|return
operator|new
name|JoinNodeBuilder
argument_list|(
name|JoinType
operator|.
name|INNER
argument_list|,
name|table
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JoinNodeBuilder
name|leftJoin
parameter_list|(
name|NodeBuilder
name|table
parameter_list|)
block|{
return|return
operator|new
name|JoinNodeBuilder
argument_list|(
name|JoinType
operator|.
name|LEFT
argument_list|,
name|table
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JoinNodeBuilder
name|rightJoin
parameter_list|(
name|NodeBuilder
name|table
parameter_list|)
block|{
return|return
operator|new
name|JoinNodeBuilder
argument_list|(
name|JoinType
operator|.
name|RIGHT
argument_list|,
name|table
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JoinNodeBuilder
name|innerJoin
parameter_list|(
name|NodeBuilder
name|table
parameter_list|)
block|{
return|return
operator|new
name|JoinNodeBuilder
argument_list|(
name|JoinType
operator|.
name|INNER
argument_list|,
name|table
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JoinNodeBuilder
name|outerJoin
parameter_list|(
name|NodeBuilder
name|table
parameter_list|)
block|{
return|return
operator|new
name|JoinNodeBuilder
argument_list|(
name|JoinType
operator|.
name|OUTER
argument_list|,
name|table
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ExpressionNodeBuilder
name|exists
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
return|return
operator|new
name|ExpressionNodeBuilder
argument_list|(
operator|new
name|ExistsNodeBuilder
argument_list|(
name|builder
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ValueNodeBuilder
name|value
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
operator|new
name|ValueNodeBuilder
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ExpressionNodeBuilder
name|exp
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
return|return
operator|new
name|ExpressionNodeBuilder
argument_list|(
name|builder
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|NodeBuilder
name|node
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
return|return
parameter_list|()
lambda|->
name|node
return|;
block|}
specifier|public
specifier|static
name|NodeBuilder
name|aliased
parameter_list|(
name|NodeBuilder
name|nodeBuilder
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
return|return
operator|new
name|AliasedNodeBuilder
argument_list|(
name|nodeBuilder
argument_list|,
name|alias
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|NodeBuilder
name|aliased
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
if|if
condition|(
name|suppressAlias
argument_list|(
name|node
argument_list|)
condition|)
block|{
return|return
name|node
argument_list|(
name|node
argument_list|)
return|;
block|}
if|if
condition|(
name|node
operator|instanceof
name|FunctionNode
condition|)
block|{
operator|(
operator|(
name|FunctionNode
operator|)
name|node
operator|)
operator|.
name|setAlias
argument_list|(
name|alias
argument_list|)
expr_stmt|;
return|return
name|node
argument_list|(
name|node
argument_list|)
return|;
block|}
if|if
condition|(
name|node
operator|instanceof
name|ColumnNode
condition|)
block|{
operator|(
operator|(
name|ColumnNode
operator|)
name|node
operator|)
operator|.
name|setAlias
argument_list|(
name|alias
argument_list|)
expr_stmt|;
return|return
name|node
argument_list|(
name|node
argument_list|)
return|;
block|}
return|return
operator|new
name|AliasedNodeBuilder
argument_list|(
name|node
argument_list|(
name|node
argument_list|)
argument_list|,
name|alias
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|NodeBuilder
name|text
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
parameter_list|()
lambda|->
operator|new
name|TextNode
argument_list|(
name|text
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|NodeBuilder
name|all
parameter_list|()
block|{
return|return
name|text
argument_list|(
literal|" *"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ExpressionNodeBuilder
name|not
parameter_list|(
name|NodeBuilder
name|value
parameter_list|)
block|{
return|return
operator|new
name|ExpressionNodeBuilder
argument_list|(
name|value
argument_list|)
operator|.
name|not
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|FunctionNodeBuilder
name|count
parameter_list|(
name|NodeBuilder
name|value
parameter_list|)
block|{
return|return
name|function
argument_list|(
literal|"COUNT"
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|FunctionNodeBuilder
name|count
parameter_list|()
block|{
return|return
name|function
argument_list|(
literal|"COUNT"
argument_list|,
name|column
argument_list|(
literal|"*"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|FunctionNodeBuilder
name|avg
parameter_list|(
name|NodeBuilder
name|value
parameter_list|)
block|{
return|return
name|function
argument_list|(
literal|"AVG"
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|FunctionNodeBuilder
name|min
parameter_list|(
name|NodeBuilder
name|value
parameter_list|)
block|{
return|return
name|function
argument_list|(
literal|"MIN"
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|FunctionNodeBuilder
name|max
parameter_list|(
name|NodeBuilder
name|value
parameter_list|)
block|{
return|return
name|function
argument_list|(
literal|"MAX"
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|FunctionNodeBuilder
name|function
parameter_list|(
name|String
name|function
parameter_list|,
name|NodeBuilder
modifier|...
name|values
parameter_list|)
block|{
return|return
operator|new
name|FunctionNodeBuilder
argument_list|(
name|function
argument_list|,
name|values
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|OrderingNodeBuilder
name|order
parameter_list|(
name|NodeBuilder
name|expression
parameter_list|)
block|{
return|return
operator|new
name|OrderingNodeBuilder
argument_list|(
name|expression
argument_list|)
return|;
block|}
specifier|private
name|SQLBuilder
parameter_list|()
block|{
block|}
specifier|private
specifier|static
name|boolean
name|suppressAlias
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
return|return
operator|new
name|SuppressAliasChecker
argument_list|()
operator|.
name|shouldSuppressForNode
argument_list|(
name|node
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|SuppressAliasChecker
extends|extends
name|SimpleNodeTreeVisitor
block|{
specifier|private
name|boolean
name|suppressAlias
decl_stmt|;
specifier|public
name|boolean
name|shouldSuppressForNode
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|node
operator|.
name|visit
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|suppressAlias
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|onNodeStart
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|==
name|NodeType
operator|.
name|COLUMN
operator|&&
operator|(
operator|(
name|ColumnNode
operator|)
name|node
operator|)
operator|.
name|getAlias
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|suppressAlias
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|==
name|NodeType
operator|.
name|FUNCTION
operator|&&
operator|(
operator|(
name|FunctionNode
operator|)
name|node
operator|)
operator|.
name|getAlias
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|suppressAlias
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|node
operator|instanceof
name|AliasedNode
condition|)
block|{
name|suppressAlias
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

