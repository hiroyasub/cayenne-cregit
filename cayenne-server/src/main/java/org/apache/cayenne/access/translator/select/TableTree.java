begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|JoinType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
class|class
name|TableTree
block|{
comment|/**      * Tables mapped by db path it's spawned by.      * Can be following:      * - query root table      * - tables from flattened attributes (including all intermediate tables)      * - tables from attributes used in expressions (WHERE, HAVING, ORDER BY)      * - tables from prefetches      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TableTreeNode
argument_list|>
name|tableNodes
decl_stmt|;
specifier|private
specifier|final
name|TableTree
name|parentTree
decl_stmt|;
specifier|private
name|TableTreeNode
name|rootNode
decl_stmt|;
specifier|private
name|int
name|tableAliasSequence
decl_stmt|;
name|TableTree
parameter_list|(
name|DbEntity
name|root
parameter_list|,
name|TableTree
name|parentTree
parameter_list|)
block|{
name|this
operator|.
name|tableAliasSequence
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|parentTree
operator|=
name|parentTree
expr_stmt|;
name|this
operator|.
name|tableNodes
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|rootNode
operator|=
operator|new
name|TableTreeNode
argument_list|(
name|root
argument_list|,
name|nextTableAlias
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|addJoinTable
parameter_list|(
name|String
name|path
parameter_list|,
name|DbRelationship
name|relationship
parameter_list|,
name|JoinType
name|joinType
parameter_list|)
block|{
if|if
condition|(
name|tableNodes
operator|.
name|get
argument_list|(
name|path
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|TableTreeNode
name|node
init|=
operator|new
name|TableTreeNode
argument_list|(
name|path
argument_list|,
name|relationship
argument_list|,
name|nextTableAlias
argument_list|()
argument_list|,
name|joinType
argument_list|)
decl_stmt|;
name|tableNodes
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|String
name|aliasForPath
parameter_list|(
name|String
name|attributePath
parameter_list|)
block|{
if|if
condition|(
name|Util
operator|.
name|isEmptyString
argument_list|(
name|attributePath
argument_list|)
condition|)
block|{
return|return
name|rootNode
operator|.
name|getTableAlias
argument_list|()
return|;
block|}
name|TableTreeNode
name|node
init|=
name|tableNodes
operator|.
name|get
argument_list|(
name|attributePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"No table for attribute '%s' found"
argument_list|,
name|attributePath
argument_list|)
throw|;
block|}
return|return
name|node
operator|.
name|getTableAlias
argument_list|()
return|;
block|}
name|String
name|aliasForAttributePath
parameter_list|(
name|String
name|attributePath
parameter_list|)
block|{
name|int
name|lastSeparator
init|=
name|attributePath
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastSeparator
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|rootNode
operator|.
name|getTableAlias
argument_list|()
return|;
block|}
name|String
name|table
init|=
name|attributePath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastSeparator
argument_list|)
decl_stmt|;
return|return
name|aliasForPath
argument_list|(
name|table
argument_list|)
return|;
block|}
name|String
name|nextTableAlias
parameter_list|()
block|{
comment|// delegate actual generation to parent if any
if|if
condition|(
name|parentTree
operator|!=
literal|null
condition|)
block|{
return|return
name|parentTree
operator|.
name|nextTableAlias
argument_list|()
return|;
block|}
return|return
literal|'t'
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|tableAliasSequence
operator|++
argument_list|)
return|;
block|}
specifier|public
name|int
name|getNodeCount
parameter_list|()
block|{
return|return
name|tableNodes
operator|.
name|size
argument_list|()
operator|+
literal|1
return|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|TableNodeVisitor
name|visitor
parameter_list|)
block|{
name|visitor
operator|.
name|visit
argument_list|(
name|rootNode
argument_list|)
expr_stmt|;
for|for
control|(
name|TableTreeNode
name|node
range|:
name|tableNodes
operator|.
name|values
argument_list|()
control|)
block|{
name|visitor
operator|.
name|visit
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|FunctionalInterface
interface|interface
name|TableNodeVisitor
block|{
name|void
name|visit
parameter_list|(
name|TableTreeNode
name|node
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

