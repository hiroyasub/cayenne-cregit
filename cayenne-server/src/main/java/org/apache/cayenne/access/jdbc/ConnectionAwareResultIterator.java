begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultIterator
import|;
end_import

begin_comment
comment|/**  * A {@link ResultIterator} wrapper that handles closing a connection. Also  * internally counts processed rows, mostly for the benefit of subclasses.  * Subclasses are used in iterators that are returned to the end users and are  * not implicitly managed by Cayenne.  *   * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|ConnectionAwareResultIterator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|ResultIterator
argument_list|<
name|T
argument_list|>
block|{
specifier|private
name|ResultIterator
argument_list|<
name|T
argument_list|>
name|delegate
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
specifier|protected
name|int
name|rowCounter
decl_stmt|;
specifier|public
name|ConnectionAwareResultIterator
parameter_list|(
name|ResultIterator
argument_list|<
name|T
argument_list|>
name|delegate
parameter_list|,
name|Connection
name|connection
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|doClose
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doClose
parameter_list|()
block|{
name|StringBuilder
name|errors
init|=
literal|null
decl_stmt|;
try|try
block|{
name|delegate
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
if|if
condition|(
name|errors
operator|==
literal|null
condition|)
block|{
name|errors
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
name|errors
operator|.
name|append
argument_list|(
literal|"Error closing ResultSet: "
operator|+
name|e1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e2
parameter_list|)
block|{
if|if
condition|(
name|errors
operator|==
literal|null
condition|)
block|{
name|errors
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
name|errors
operator|.
name|append
argument_list|(
literal|"Error closing connection: "
operator|+
name|e2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|errors
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error closing ResultIterator: "
operator|+
name|errors
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|allRows
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|allRows
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNextRow
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|hasNextRow
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|nextRow
parameter_list|()
block|{
name|rowCounter
operator|++
expr_stmt|;
return|return
name|delegate
operator|.
name|nextRow
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|skipRow
parameter_list|()
block|{
name|delegate
operator|.
name|skipRow
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

