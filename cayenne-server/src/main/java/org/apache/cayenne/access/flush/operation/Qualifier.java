begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_comment
comment|/**  * Qualifier of DB row. It uses PK and optimistic lock qualifier if any.  *  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|Qualifier
block|{
specifier|protected
specifier|final
name|DbRowOp
name|row
decl_stmt|;
comment|// additional qualifier for optimistic lock
specifier|protected
name|Map
argument_list|<
name|DbAttribute
argument_list|,
name|Object
argument_list|>
name|additionalQualifier
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|nullNames
decl_stmt|;
specifier|protected
name|boolean
name|optimisticLock
decl_stmt|;
specifier|protected
name|Qualifier
parameter_list|(
name|DbRowOp
name|row
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSnapshot
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|idSnapshot
init|=
name|row
operator|.
name|getChangeId
argument_list|()
operator|.
name|getIdSnapshot
argument_list|()
decl_stmt|;
if|if
condition|(
name|additionalQualifier
operator|==
literal|null
operator|||
name|additionalQualifier
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|idSnapshot
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|qualifier
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|additionalQualifier
operator|.
name|size
argument_list|()
operator|+
name|idSnapshot
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|hasPK
init|=
operator|new
name|AtomicBoolean
argument_list|(
operator|!
name|idSnapshot
operator|.
name|isEmpty
argument_list|()
argument_list|)
decl_stmt|;
name|idSnapshot
operator|.
name|forEach
argument_list|(
parameter_list|(
name|attr
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|qualifier
operator|.
name|put
argument_list|(
name|attr
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hasPK
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasPK
operator|.
name|get
argument_list|()
operator|||
name|optimisticLock
condition|)
block|{
name|additionalQualifier
operator|.
name|forEach
argument_list|(
parameter_list|(
name|attr
parameter_list|,
name|value
parameter_list|)
lambda|->
name|qualifier
operator|.
name|put
argument_list|(
name|attr
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|qualifier
return|;
block|}
specifier|public
name|List
argument_list|<
name|DbAttribute
argument_list|>
name|getQualifierAttributes
parameter_list|()
block|{
name|List
argument_list|<
name|DbAttribute
argument_list|>
name|primaryKeys
init|=
name|row
operator|.
name|getEntity
argument_list|()
operator|.
name|getPrimaryKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|additionalQualifier
operator|==
literal|null
operator|||
name|additionalQualifier
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|primaryKeys
return|;
block|}
name|List
argument_list|<
name|DbAttribute
argument_list|>
name|attributes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|idSnapshot
init|=
name|row
operator|.
name|getChangeId
argument_list|()
operator|.
name|getIdSnapshot
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|hasPK
init|=
operator|new
name|AtomicBoolean
argument_list|(
operator|!
name|idSnapshot
operator|.
name|isEmpty
argument_list|()
argument_list|)
decl_stmt|;
name|primaryKeys
operator|.
name|forEach
argument_list|(
name|pk
lambda|->
block|{
if|if
condition|(
name|idSnapshot
operator|.
name|get
argument_list|(
name|pk
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|attributes
operator|.
name|add
argument_list|(
name|pk
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hasPK
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasPK
operator|.
name|get
argument_list|()
operator|||
name|optimisticLock
condition|)
block|{
name|attributes
operator|.
name|addAll
argument_list|(
name|additionalQualifier
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|attributes
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getNullQualifierNames
parameter_list|()
block|{
if|if
condition|(
name|nullNames
operator|==
literal|null
operator|||
name|nullNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|nullNames
return|;
block|}
specifier|public
name|void
name|addAdditionalQualifier
parameter_list|(
name|DbAttribute
name|dbAttribute
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|addAdditionalQualifier
argument_list|(
name|dbAttribute
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addAdditionalQualifier
parameter_list|(
name|DbAttribute
name|dbAttribute
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|optimisticLock
parameter_list|)
block|{
if|if
condition|(
name|additionalQualifier
operator|==
literal|null
condition|)
block|{
name|additionalQualifier
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|additionalQualifier
operator|.
name|put
argument_list|(
name|dbAttribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|nullNames
operator|==
literal|null
condition|)
block|{
name|nullNames
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|nullNames
operator|.
name|add
argument_list|(
name|dbAttribute
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|optimisticLock
condition|)
block|{
name|this
operator|.
name|optimisticLock
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isUsingOptimisticLocking
parameter_list|()
block|{
return|return
name|optimisticLock
return|;
block|}
specifier|public
name|boolean
name|isSameBatch
parameter_list|(
name|Qualifier
name|other
parameter_list|)
block|{
if|if
condition|(
name|additionalQualifier
operator|==
literal|null
condition|)
block|{
return|return
name|other
operator|.
name|additionalQualifier
operator|==
literal|null
return|;
block|}
if|if
condition|(
name|optimisticLock
operator|!=
name|other
operator|.
name|optimisticLock
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|other
operator|.
name|additionalQualifier
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|additionalQualifier
operator|.
name|keySet
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|additionalQualifier
operator|.
name|keySet
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|nullNames
argument_list|,
name|other
operator|.
name|nullNames
argument_list|)
return|;
block|}
block|}
end_class

end_unit

