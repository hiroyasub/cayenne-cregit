begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|PatternFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|TableFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_comment
comment|/**  * Load all attributes for schema and return it for each table  * */
end_comment

begin_class
specifier|public
class|class
name|DbAttributesPerSchemaLoader
extends|extends
name|DbAttributesBaseLoader
block|{
specifier|private
specifier|final
name|TableFilter
name|filter
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DbAttribute
argument_list|>
argument_list|>
name|attributes
decl_stmt|;
specifier|public
name|DbAttributesPerSchemaLoader
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|DatabaseMetaData
name|metaData
parameter_list|,
name|DbAdapter
name|adapter
parameter_list|,
name|TableFilter
name|filter
parameter_list|)
block|{
name|super
argument_list|(
name|catalog
argument_list|,
name|schema
argument_list|,
name|metaData
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DbAttribute
argument_list|>
argument_list|>
name|loadDbAttributes
parameter_list|()
throws|throws
name|SQLException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DbAttribute
argument_list|>
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|getMetaData
argument_list|()
operator|.
name|getColumns
argument_list|(
name|getCatalog
argument_list|()
argument_list|,
name|getSchema
argument_list|()
argument_list|,
literal|"%"
argument_list|,
literal|"%"
argument_list|)
init|;
init|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
if|if
condition|(
name|columns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ResultSetMetaData
name|rsMetaData
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|rsMetaData
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|columns
operator|.
name|add
argument_list|(
name|rsMetaData
operator|.
name|getColumnLabel
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// for a reason not quiet apparent to me, Oracle sometimes
comment|// returns duplicate record sets for the same table, messing up
comment|// table
comment|// names. E.g. for the system table "WK$_ATTR_MAPPING" columns
comment|// are
comment|// returned twice - as "WK$_ATTR_MAPPING" and
comment|// "WK$$_ATTR_MAPPING"... Go figure
name|String
name|tableName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_NAME"
argument_list|)
decl_stmt|;
name|String
name|columnName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
decl_stmt|;
name|PatternFilter
name|columnFilter
init|=
name|filter
operator|.
name|isIncludeTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|/* 				 * Here is possible optimization if filter will contain 				 * map<tableName, columnFilter> we can replace it after tables 				 * loading since already done pattern matching once and exactly 				 * know all tables that we want to process 				 */
if|if
condition|(
name|columnFilter
operator|==
literal|null
operator|||
operator|!
name|columnFilter
operator|.
name|isInclude
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Skip column '"
operator|+
name|tableName
operator|+
literal|"."
operator|+
name|columnName
operator|+
literal|"' (Path: "
operator|+
name|getCatalog
argument_list|()
operator|+
literal|"/"
operator|+
name|getSchema
argument_list|()
operator|+
literal|"; Filter: "
operator|+
name|columnFilter
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|List
argument_list|<
name|DbAttribute
argument_list|>
name|attrs
init|=
name|attributes
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|attrs
operator|==
literal|null
condition|)
block|{
name|attrs
operator|=
operator|new
name|LinkedList
argument_list|<
name|DbAttribute
argument_list|>
argument_list|()
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
block|}
name|attrs
operator|.
name|add
argument_list|(
name|loadDbAttribute
argument_list|(
name|columns
argument_list|,
name|rs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|attributes
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|DbAttribute
argument_list|>
name|loadDbAttributes
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DbAttribute
argument_list|>
argument_list|>
name|attributes
init|=
name|getAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|attributes
operator|!=
literal|null
condition|)
block|{
return|return
name|attributes
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
return|;
block|}
return|return
operator|new
name|LinkedList
argument_list|<
name|DbAttribute
argument_list|>
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|DbAttribute
argument_list|>
argument_list|>
name|getAttributes
parameter_list|()
block|{
if|if
condition|(
name|attributes
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|attributes
operator|=
name|loadDbAttributes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|attributes
return|;
block|}
block|}
end_class

end_unit

