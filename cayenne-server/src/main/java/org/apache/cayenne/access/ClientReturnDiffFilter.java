begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|ArcCreateOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|ArcDeleteOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|ArcId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|CompoundDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphChangeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|NodeCreateOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|NodeDeleteOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|NodeIdChangeOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|NodePropertyChangeOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Filters diffs before returning them to the client. Ensures that no server-only data  * leaks to the client and also that all diff objects returned to the client are public  * classes available on the client.  *   * @since 3.0  */
end_comment

begin_comment
comment|// TODO: andrus, 2008/03/01 - integrate with GraphDiffCompressor.
end_comment

begin_class
class|class
name|ClientReturnDiffFilter
implements|implements
name|GraphChangeHandler
block|{
specifier|private
name|List
argument_list|<
name|GraphDiff
argument_list|>
name|diffs
decl_stmt|;
specifier|private
name|EntityResolver
name|resolver
decl_stmt|;
name|ClientReturnDiffFilter
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
block|}
name|GraphDiff
name|filter
parameter_list|(
name|GraphDiff
name|in
parameter_list|)
block|{
name|diffs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|in
operator|.
name|apply
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
operator|new
name|CompoundDiff
argument_list|(
name|diffs
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|arcCreated
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|Object
name|targetNodeId
parameter_list|,
name|ArcId
name|arcId
parameter_list|)
block|{
if|if
condition|(
name|isClientArc
argument_list|(
name|nodeId
argument_list|,
name|targetNodeId
argument_list|,
name|arcId
argument_list|)
condition|)
block|{
name|diffs
operator|.
name|add
argument_list|(
operator|new
name|ArcCreateOperation
argument_list|(
name|nodeId
argument_list|,
name|targetNodeId
argument_list|,
name|arcId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|arcDeleted
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|Object
name|targetNodeId
parameter_list|,
name|ArcId
name|arcId
parameter_list|)
block|{
if|if
condition|(
name|isClientArc
argument_list|(
name|nodeId
argument_list|,
name|targetNodeId
argument_list|,
name|arcId
argument_list|)
condition|)
block|{
name|diffs
operator|.
name|add
argument_list|(
operator|new
name|ArcDeleteOperation
argument_list|(
name|nodeId
argument_list|,
name|targetNodeId
argument_list|,
name|arcId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeCreated
parameter_list|(
name|Object
name|nodeId
parameter_list|)
block|{
if|if
condition|(
name|isClientNode
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|diffs
operator|.
name|add
argument_list|(
operator|new
name|NodeCreateOperation
argument_list|(
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeIdChanged
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|Object
name|newId
parameter_list|)
block|{
if|if
condition|(
name|isClientNode
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|diffs
operator|.
name|add
argument_list|(
operator|new
name|NodeIdChangeOperation
argument_list|(
name|nodeId
argument_list|,
name|newId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodePropertyChanged
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|String
name|property
parameter_list|,
name|Object
name|oldValue
parameter_list|,
name|Object
name|newValue
parameter_list|)
block|{
if|if
condition|(
name|isClientNode
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|diffs
operator|.
name|add
argument_list|(
operator|new
name|NodePropertyChangeOperation
argument_list|(
name|nodeId
argument_list|,
name|property
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeRemoved
parameter_list|(
name|Object
name|nodeId
parameter_list|)
block|{
if|if
condition|(
name|isClientNode
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|diffs
operator|.
name|add
argument_list|(
operator|new
name|NodeDeleteOperation
argument_list|(
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isClientNode
parameter_list|(
name|Object
name|id
parameter_list|)
block|{
name|ObjectId
name|oid
init|=
operator|(
name|ObjectId
operator|)
name|id
decl_stmt|;
return|return
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|oid
operator|.
name|getEntityName
argument_list|()
argument_list|)
operator|.
name|isClientAllowed
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|isClientArc
parameter_list|(
name|Object
name|id
parameter_list|,
name|Object
name|targetId
parameter_list|,
name|Object
name|arcId
parameter_list|)
block|{
name|ObjectId
name|oid
init|=
operator|(
name|ObjectId
operator|)
name|id
decl_stmt|;
name|ObjEntity
name|entity
init|=
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|oid
operator|.
name|getEntityName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|entity
operator|.
name|isClientAllowed
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|entity
operator|.
name|getRelationship
argument_list|(
name|arcId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|isRuntime
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ObjectId
name|targetOid
init|=
operator|(
name|ObjectId
operator|)
name|targetId
decl_stmt|;
name|ObjEntity
name|targetEntity
init|=
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|targetOid
operator|.
name|getEntityName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|targetEntity
operator|.
name|isClientAllowed
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

