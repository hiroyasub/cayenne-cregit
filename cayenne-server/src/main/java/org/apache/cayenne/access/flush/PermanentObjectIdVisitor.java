begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
operator|.
name|DbRowOpVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
operator|.
name|InsertDbRowOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|PkGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTDbPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_comment
comment|/**  * Visitor that fills replacement map of {@link ObjectId}s of inserted objects.  *  * @since 4.2  */
end_comment

begin_class
class|class
name|PermanentObjectIdVisitor
implements|implements
name|DbRowOpVisitor
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|DataDomain
name|dataDomain
decl_stmt|;
specifier|private
specifier|final
name|EntityResolver
name|resolver
decl_stmt|;
specifier|private
name|ClassDescriptor
name|lastDescriptor
decl_stmt|;
specifier|private
name|ObjEntity
name|lastObjEntity
decl_stmt|;
specifier|private
name|DbEntity
name|lastDbEntity
decl_stmt|;
specifier|private
name|DataNode
name|lastNode
decl_stmt|;
specifier|private
name|String
name|lastEntityName
decl_stmt|;
name|PermanentObjectIdVisitor
parameter_list|(
name|DataDomain
name|dataDomain
parameter_list|)
block|{
name|this
operator|.
name|dataDomain
operator|=
name|dataDomain
expr_stmt|;
name|this
operator|.
name|resolver
operator|=
name|dataDomain
operator|.
name|getEntityResolver
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitInsert
parameter_list|(
name|InsertDbRowOp
name|dbRow
parameter_list|)
block|{
name|ObjectId
name|id
init|=
name|dbRow
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
operator|!
name|id
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|(
name|lastObjEntity
operator|==
literal|null
operator|&&
name|lastDbEntity
operator|==
literal|null
operator|)
operator|||
operator|!
name|id
operator|.
name|getEntityName
argument_list|()
operator|.
name|equals
argument_list|(
name|lastEntityName
argument_list|)
condition|)
block|{
name|lastEntityName
operator|=
name|id
operator|.
name|getEntityName
argument_list|()
expr_stmt|;
if|if
condition|(
name|lastEntityName
operator|.
name|startsWith
argument_list|(
name|ASTDbPath
operator|.
name|DB_PREFIX
argument_list|)
condition|)
block|{
name|lastDbEntity
operator|=
name|resolver
operator|.
name|getDbEntity
argument_list|(
name|lastEntityName
operator|.
name|substring
argument_list|(
name|ASTDbPath
operator|.
name|DB_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|lastObjEntity
operator|=
literal|null
expr_stmt|;
name|lastDescriptor
operator|=
literal|null
expr_stmt|;
name|lastNode
operator|=
name|dataDomain
operator|.
name|lookupDataNode
argument_list|(
name|lastDbEntity
operator|.
name|getDataMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lastObjEntity
operator|=
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|id
operator|.
name|getEntityName
argument_list|()
argument_list|)
expr_stmt|;
name|lastDbEntity
operator|=
name|lastObjEntity
operator|.
name|getDbEntity
argument_list|()
expr_stmt|;
name|lastDescriptor
operator|=
name|resolver
operator|.
name|getClassDescriptor
argument_list|(
name|lastObjEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|lastNode
operator|=
name|dataDomain
operator|.
name|lookupDataNode
argument_list|(
name|lastObjEntity
operator|.
name|getDataMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|createPermanentId
argument_list|(
name|dbRow
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|createPermanentId
parameter_list|(
name|InsertDbRowOp
name|dbRow
parameter_list|)
block|{
name|ObjectId
name|id
init|=
name|dbRow
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
name|boolean
name|supportsGeneratedKeys
init|=
name|lastNode
operator|.
name|getAdapter
argument_list|()
operator|.
name|supportsGeneratedKeys
argument_list|()
decl_stmt|;
name|PkGenerator
name|pkGenerator
init|=
name|lastNode
operator|.
name|getAdapter
argument_list|()
operator|.
name|getPkGenerator
argument_list|()
decl_stmt|;
comment|// modify replacement id directly...
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|idMap
init|=
name|id
operator|.
name|getReplacementIdMap
argument_list|()
decl_stmt|;
name|boolean
name|autoPkDone
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DbAttribute
name|dbAttr
range|:
name|lastDbEntity
operator|.
name|getPrimaryKeys
argument_list|()
control|)
block|{
name|String
name|dbAttrName
init|=
name|dbAttr
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|idMap
operator|.
name|containsKey
argument_list|(
name|dbAttrName
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// handle meaningful PK
if|if
condition|(
name|lastObjEntity
operator|!=
literal|null
condition|)
block|{
name|ObjAttribute
name|objAttr
init|=
name|lastObjEntity
operator|.
name|getAttributeForDbAttribute
argument_list|(
name|dbAttr
argument_list|)
decl_stmt|;
if|if
condition|(
name|objAttr
operator|!=
literal|null
condition|)
block|{
name|Object
name|value
init|=
name|lastDescriptor
operator|.
name|getProperty
argument_list|(
name|objAttr
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|readPropertyDirectly
argument_list|(
name|dbRow
operator|.
name|getObject
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// primitive 0 has to be treated as NULL, or otherwise we can't generate PK for POJO's
name|Class
argument_list|<
name|?
argument_list|>
name|javaClass
init|=
name|objAttr
operator|.
name|getJavaClass
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|javaClass
operator|.
name|isPrimitive
argument_list|()
operator|||
operator|!
operator|(
name|value
operator|instanceof
name|Number
operator|)
operator|||
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|idMap
operator|.
name|put
argument_list|(
name|dbAttrName
argument_list|,
name|value
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
block|}
comment|// skip db-generated
if|if
condition|(
name|supportsGeneratedKeys
operator|&&
name|dbAttr
operator|.
name|isGenerated
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// only a single key can be generated from DB... if this is done already in this loop, we must bail out.
if|if
condition|(
name|autoPkDone
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Primary Key autogeneration only works for a single attribute."
argument_list|)
throw|;
block|}
comment|// finally, use database generation mechanism
try|try
block|{
name|Object
name|pkValue
init|=
name|pkGenerator
operator|.
name|generatePk
argument_list|(
name|lastNode
argument_list|,
name|dbAttr
argument_list|)
decl_stmt|;
name|idMap
operator|.
name|put
argument_list|(
name|dbAttrName
argument_list|,
name|pkValue
argument_list|)
expr_stmt|;
name|autoPkDone
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error generating PK: %s"
argument_list|,
name|ex
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

