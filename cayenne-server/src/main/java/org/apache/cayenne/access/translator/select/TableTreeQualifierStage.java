begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTDbPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTPath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|SQLBuilder
operator|.
name|exp
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|SQLBuilder
operator|.
name|node
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
class|class
name|TableTreeQualifierStage
implements|implements
name|TranslationStage
block|{
annotation|@
name|Override
specifier|public
name|void
name|perform
parameter_list|(
name|TranslatorContext
name|context
parameter_list|)
block|{
name|context
operator|.
name|getTableTree
argument_list|()
operator|.
name|visit
argument_list|(
name|node
lambda|->
block|{
name|Expression
name|dbQualifier
init|=
name|node
operator|.
name|getEntity
argument_list|()
operator|.
name|getQualifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbQualifier
operator|!=
literal|null
condition|)
block|{
name|String
name|pathToRoot
init|=
name|node
operator|.
name|getAttributePath
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|dbQualifier
operator|=
name|dbQualifier
operator|.
name|transform
argument_list|(
name|input
lambda|->
block|{
if|if
condition|(
name|input
operator|instanceof
name|ASTPath
condition|)
block|{
name|String
name|path
init|=
operator|(
operator|(
name|ASTPath
operator|)
name|input
operator|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pathToRoot
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|path
operator|=
name|pathToRoot
operator|+
literal|'.'
operator|+
name|path
expr_stmt|;
block|}
return|return
operator|new
name|ASTDbPath
argument_list|(
name|path
argument_list|)
return|;
block|}
return|return
name|input
return|;
block|}
argument_list|)
expr_stmt|;
name|Node
name|rootQualifier
init|=
name|context
operator|.
name|getQualifierNode
argument_list|()
decl_stmt|;
name|Node
name|translatedQualifier
init|=
name|context
operator|.
name|getQualifierTranslator
argument_list|()
operator|.
name|translate
argument_list|(
name|dbQualifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootQualifier
operator|!=
literal|null
condition|)
block|{
name|NodeBuilder
name|expressionNodeBuilder
init|=
name|exp
argument_list|(
name|node
argument_list|(
name|rootQualifier
argument_list|)
argument_list|)
operator|.
name|and
argument_list|(
name|node
argument_list|(
name|translatedQualifier
argument_list|)
argument_list|)
decl_stmt|;
name|context
operator|.
name|setQualifierNode
argument_list|(
name|expressionNodeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|setQualifierNode
argument_list|(
name|translatedQualifier
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getQualifierNode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getSelectBuilder
argument_list|()
operator|.
name|where
argument_list|(
name|context
operator|.
name|getQualifierNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

