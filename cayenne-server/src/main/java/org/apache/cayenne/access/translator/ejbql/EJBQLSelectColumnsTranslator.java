begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|ejbql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLBaseVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Translator of the EJBQL select clause.  *   * @since 3.0  */
end_comment

begin_class
specifier|public
class|class
name|EJBQLSelectColumnsTranslator
extends|extends
name|EJBQLBaseVisitor
block|{
specifier|protected
name|EJBQLTranslationContext
name|context
decl_stmt|;
specifier|private
name|int
name|expressionsCount
decl_stmt|;
specifier|protected
name|EJBQLSelectColumnsTranslator
parameter_list|(
name|EJBQLTranslationContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visitSelectExpression
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expressionsCount
operator|++
operator|>
literal|0
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visitAggregate
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|expression
operator|.
name|visit
argument_list|(
name|context
operator|.
name|getTranslatorFactory
argument_list|()
operator|.
name|getAggregateColumnTranslator
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visitDbPath
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
name|EJBQLDbPathTranslator
name|pathTranslator
init|=
operator|new
name|EJBQLDbPathTranslator
argument_list|(
name|context
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|appendMultiColumnPath
parameter_list|(
name|EJBQLMultiColumnOperand
name|operand
parameter_list|)
block|{
throw|throw
operator|new
name|EJBQLException
argument_list|(
literal|"Can't use multi-column paths in column clause"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processTerminatingRelationship
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|xfields
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|isAppendingResultColumns
argument_list|()
condition|)
block|{
name|xfields
operator|=
name|context
operator|.
name|nextEntityResult
argument_list|()
operator|.
name|getFields
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
init|=
name|xfields
decl_stmt|;
name|DbEntity
name|table
init|=
operator|(
name|DbEntity
operator|)
name|relationship
operator|.
name|getTargetEntity
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
name|dbAttr
init|=
name|table
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|DbAttribute
argument_list|>
name|it
init|=
name|dbAttr
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbAttr
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|resolveJoin
argument_list|()
expr_stmt|;
block|}
name|String
name|alias
init|=
name|this
operator|.
name|lastAlias
operator|!=
literal|null
condition|?
name|lastAlias
else|:
name|context
operator|.
name|getTableAlias
argument_list|(
name|idPath
argument_list|,
name|context
operator|.
name|getQuotingStrategy
argument_list|()
operator|.
name|quotedFullyQualifiedName
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
operator|!
name|first
condition|?
literal|", "
else|:
literal|" "
argument_list|)
expr_stmt|;
name|DbAttribute
name|dbAttribute
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|appendColumn
argument_list|(
name|TypesMapping
operator|.
name|getJavaBySqlType
argument_list|(
name|dbAttribute
argument_list|)
argument_list|,
name|alias
argument_list|,
name|dbAttribute
argument_list|,
name|fields
operator|!=
literal|null
condition|?
name|fields
operator|.
name|get
argument_list|(
name|dbAttribute
operator|.
name|getName
argument_list|()
argument_list|)
else|:
literal|""
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processTerminatingAttribute
parameter_list|(
name|DbAttribute
name|attribute
parameter_list|)
block|{
name|String
name|alias
init|=
name|this
operator|.
name|lastAlias
operator|!=
literal|null
condition|?
name|lastAlias
else|:
name|context
operator|.
name|getTableAlias
argument_list|(
name|idPath
argument_list|,
name|context
operator|.
name|getQuotingStrategy
argument_list|()
operator|.
name|quotedFullyQualifiedName
argument_list|(
name|currentEntity
argument_list|)
argument_list|)
decl_stmt|;
name|appendColumn
argument_list|(
name|TypesMapping
operator|.
name|getJavaBySqlType
argument_list|(
name|attribute
argument_list|)
argument_list|,
name|alias
argument_list|,
name|attribute
argument_list|,
name|context
operator|.
name|isAppendingResultColumns
argument_list|()
condition|?
name|context
operator|.
name|nextColumnAlias
argument_list|()
else|:
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|expression
operator|.
name|visit
argument_list|(
name|pathTranslator
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visitPath
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|,
name|int
name|finishedChildIndex
parameter_list|)
block|{
name|EJBQLPathTranslator
name|pathTranslator
init|=
operator|new
name|EJBQLPathTranslator
argument_list|(
name|context
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|appendMultiColumnPath
parameter_list|(
name|EJBQLMultiColumnOperand
name|operand
parameter_list|)
block|{
throw|throw
operator|new
name|EJBQLException
argument_list|(
literal|"Can't use multi-column paths in column clause"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processTerminatingRelationship
parameter_list|(
name|ObjRelationship
name|relationship
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|xfields
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|isAppendingResultColumns
argument_list|()
condition|)
block|{
name|xfields
operator|=
name|context
operator|.
name|nextEntityResult
argument_list|()
operator|.
name|getFields
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
init|=
name|xfields
decl_stmt|;
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
name|dbAttr
init|=
operator|(
operator|(
name|ObjEntity
operator|)
name|relationship
operator|.
name|getTargetEntity
argument_list|()
operator|)
operator|.
name|getDbEntity
argument_list|()
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|DbRelationship
name|dbRelationship
init|=
name|relationship
operator|.
name|getDbRelationships
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DbEntity
name|table
init|=
operator|(
name|DbEntity
operator|)
name|dbRelationship
operator|.
name|getTargetEntity
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|DbAttribute
argument_list|>
name|it
init|=
name|dbAttr
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbAttr
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|resolveJoin
argument_list|()
expr_stmt|;
block|}
name|String
name|alias
init|=
name|this
operator|.
name|lastAlias
operator|!=
literal|null
condition|?
name|lastAlias
else|:
name|context
operator|.
name|getTableAlias
argument_list|(
name|idPath
argument_list|,
name|context
operator|.
name|getQuotingStrategy
argument_list|()
operator|.
name|quotedFullyQualifiedName
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
operator|!
name|first
condition|?
literal|", "
else|:
literal|" "
argument_list|)
expr_stmt|;
name|DbAttribute
name|dbAttribute
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|appendColumn
argument_list|(
name|TypesMapping
operator|.
name|getJavaBySqlType
argument_list|(
name|dbAttribute
argument_list|)
argument_list|,
name|alias
argument_list|,
name|dbAttribute
argument_list|,
name|fields
operator|!=
literal|null
condition|?
name|fields
operator|.
name|get
argument_list|(
name|dbAttribute
operator|.
name|getName
argument_list|()
argument_list|)
else|:
literal|""
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processTerminatingAttribute
parameter_list|(
name|ObjAttribute
name|attribute
parameter_list|)
block|{
name|DbEntity
name|table
init|=
name|currentEntity
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
name|String
name|alias
init|=
name|this
operator|.
name|lastAlias
operator|!=
literal|null
condition|?
name|lastAlias
else|:
name|context
operator|.
name|getTableAlias
argument_list|(
name|idPath
argument_list|,
name|context
operator|.
name|getQuotingStrategy
argument_list|()
operator|.
name|quotedFullyQualifiedName
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|attribute
operator|.
name|isFlattened
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|dbPathIterator
init|=
name|attribute
operator|.
name|getDbPathIterator
argument_list|()
decl_stmt|;
name|EJBQLTableId
name|lhsId
init|=
operator|new
name|EJBQLTableId
argument_list|(
name|idPath
argument_list|)
decl_stmt|;
while|while
condition|(
name|dbPathIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|pathPart
init|=
name|dbPathIterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// DbRelationships not processed, because they will be
comment|// processed
comment|// later when appending table
if|if
condition|(
name|pathPart
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"ObjAttribute has no component: %s"
argument_list|,
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
if|else if
condition|(
name|pathPart
operator|instanceof
name|DbAttribute
condition|)
block|{
name|DbAttribute
name|dbAttribute
init|=
operator|(
name|DbAttribute
operator|)
name|pathPart
decl_stmt|;
name|appendColumn
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
argument_list|,
name|context
operator|.
name|getTableAlias
argument_list|(
name|lhsId
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|context
operator|.
name|getQuotingStrategy
argument_list|()
operator|.
name|quotedFullyQualifiedName
argument_list|(
operator|(
name|DbEntity
operator|)
name|dbAttribute
operator|.
name|getEntity
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|dbAttribute
argument_list|,
name|context
operator|.
name|isAppendingResultColumns
argument_list|()
condition|?
name|context
operator|.
name|nextColumnAlias
argument_list|()
else|:
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|DbAttribute
name|dbAttribute
init|=
name|attribute
operator|.
name|getDbAttribute
argument_list|()
decl_stmt|;
name|appendColumn
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
argument_list|,
name|alias
argument_list|,
name|dbAttribute
argument_list|,
name|context
operator|.
name|isAppendingResultColumns
argument_list|()
condition|?
name|context
operator|.
name|nextColumnAlias
argument_list|()
else|:
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|expression
operator|.
name|visit
argument_list|(
name|pathTranslator
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visitIdentifier
parameter_list|(
name|EJBQLExpression
name|expression
parameter_list|)
block|{
name|expression
operator|.
name|visit
argument_list|(
name|context
operator|.
name|getTranslatorFactory
argument_list|()
operator|.
name|getIdentifierColumnsTranslator
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|appendColumn
parameter_list|(
name|String
name|javaType
parameter_list|,
name|String
name|alias
parameter_list|,
name|DbAttribute
name|dbAttribute
parameter_list|,
name|String
name|columnAlias
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|isAppendingResultColumns
argument_list|()
condition|)
block|{
name|context
operator|.
name|append
argument_list|(
literal|" #result('"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|append
argument_list|(
name|alias
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|context
operator|.
name|getQuotingStrategy
argument_list|()
operator|.
name|quotedName
argument_list|(
name|dbAttribute
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|isAppendingResultColumns
argument_list|()
condition|)
block|{
comment|// String columnAlias = context.nextColumnAlias();
comment|// TODO: andrus 6/27/2007 - the last parameter is an unofficial
comment|// "jdbcType"
comment|// pending CAY-813 implementation, switch to #column directive
name|context
operator|.
name|append
argument_list|(
literal|"' '"
argument_list|)
operator|.
name|append
argument_list|(
name|javaType
argument_list|)
operator|.
name|append
argument_list|(
literal|"' '"
argument_list|)
operator|.
name|append
argument_list|(
name|columnAlias
argument_list|)
operator|.
name|append
argument_list|(
literal|"' '"
argument_list|)
operator|.
name|append
argument_list|(
name|columnAlias
argument_list|)
operator|.
name|append
argument_list|(
literal|"' "
operator|+
name|dbAttribute
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

