begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_comment
comment|/**  * BiFunction that merges two {@link DbRowOp} changing same object.  *  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|DbRowOpMerger
implements|implements
name|DbRowOpVisitor
argument_list|<
name|DbRowOp
argument_list|>
implements|,
name|BiFunction
argument_list|<
name|DbRowOp
argument_list|,
name|DbRowOp
argument_list|,
name|DbRowOp
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|DbRowOpMerger
name|INSTANCE
init|=
operator|new
name|DbRowOpMerger
argument_list|()
decl_stmt|;
specifier|private
name|DbRowOp
name|dbRow
decl_stmt|;
specifier|public
name|DbRowOpMerger
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|DbRowOp
name|apply
parameter_list|(
name|DbRowOp
name|oldValue
parameter_list|,
name|DbRowOp
name|newValue
parameter_list|)
block|{
name|this
operator|.
name|dbRow
operator|=
name|oldValue
expr_stmt|;
return|return
name|newValue
operator|.
name|accept
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DbRowOp
name|visitInsert
parameter_list|(
name|InsertDbRowOp
name|other
parameter_list|)
block|{
if|if
condition|(
name|dbRow
operator|instanceof
name|DeleteDbRowOp
condition|)
block|{
return|return
operator|new
name|DeleteInsertDbRowOp
argument_list|(
operator|(
name|DeleteDbRowOp
operator|)
name|dbRow
argument_list|,
name|other
argument_list|)
return|;
block|}
return|return
name|mergeValues
argument_list|(
operator|(
name|DbRowOpWithValues
operator|)
name|dbRow
argument_list|,
name|other
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DbRowOp
name|visitUpdate
parameter_list|(
name|UpdateDbRowOp
name|other
parameter_list|)
block|{
comment|// delete beats update ...
if|if
condition|(
name|dbRow
operator|instanceof
name|DeleteDbRowOp
condition|)
block|{
return|return
name|dbRow
return|;
block|}
return|return
name|mergeValues
argument_list|(
operator|(
name|DbRowOpWithValues
operator|)
name|dbRow
argument_list|,
name|other
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DbRowOp
name|visitDelete
parameter_list|(
name|DeleteDbRowOp
name|other
parameter_list|)
block|{
if|if
condition|(
name|dbRow
operator|.
name|getChangeId
argument_list|()
operator|==
name|other
operator|.
name|getChangeId
argument_list|()
condition|)
block|{
return|return
name|other
return|;
block|}
comment|// clash of Insert/Delete with equal ObjectId
if|if
condition|(
name|dbRow
operator|instanceof
name|InsertDbRowOp
condition|)
block|{
return|return
operator|new
name|DeleteInsertDbRowOp
argument_list|(
name|other
argument_list|,
operator|(
name|InsertDbRowOp
operator|)
name|dbRow
argument_list|)
return|;
block|}
return|return
name|other
return|;
block|}
specifier|private
name|DbRowOp
name|mergeValues
parameter_list|(
name|DbRowOpWithValues
name|left
parameter_list|,
name|DbRowOpWithValues
name|right
parameter_list|)
block|{
if|if
condition|(
name|right
operator|.
name|getChangeId
argument_list|()
operator|==
name|right
operator|.
name|getObject
argument_list|()
operator|.
name|getObjectId
argument_list|()
condition|)
block|{
name|right
operator|.
name|getValues
argument_list|()
operator|.
name|merge
argument_list|(
name|left
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|right
return|;
block|}
else|else
block|{
name|left
operator|.
name|getValues
argument_list|()
operator|.
name|merge
argument_list|(
name|right
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|left
return|;
block|}
block|}
block|}
end_class

end_unit

