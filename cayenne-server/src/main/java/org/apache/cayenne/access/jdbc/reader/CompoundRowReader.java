begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_comment
comment|/**  * A row reader for complex result sets resolved as object arrays.  *   * @since 3.0  */
end_comment

begin_class
class|class
name|CompoundRowReader
implements|implements
name|RowReader
argument_list|<
name|Object
index|[]
argument_list|>
block|{
specifier|private
name|RowReader
argument_list|<
name|?
argument_list|>
index|[]
name|readers
decl_stmt|;
name|CompoundRowReader
parameter_list|(
name|int
name|width
parameter_list|)
block|{
name|this
operator|.
name|readers
operator|=
operator|new
name|RowReader
index|[
name|width
index|]
expr_stmt|;
block|}
name|void
name|addRowReader
parameter_list|(
name|int
name|pos
parameter_list|,
name|RowReader
argument_list|<
name|?
argument_list|>
name|reader
parameter_list|)
block|{
name|this
operator|.
name|readers
index|[
name|pos
index|]
operator|=
name|reader
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|readRow
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
block|{
name|int
name|width
init|=
name|readers
operator|.
name|length
decl_stmt|;
name|Object
index|[]
name|row
init|=
operator|new
name|Object
index|[
name|width
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|width
condition|;
name|i
operator|++
control|)
block|{
name|row
index|[
name|i
index|]
operator|=
name|readers
index|[
name|i
index|]
operator|.
name|readRow
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
block|}
return|return
name|row
return|;
block|}
block|}
end_class

end_unit

