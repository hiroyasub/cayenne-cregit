begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
class|class
name|DistinctStage
implements|implements
name|TranslationStage
block|{
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|UNSUPPORTED_DISTINCT_TYPES
init|=
block|{
name|Types
operator|.
name|BLOB
block|,
name|Types
operator|.
name|CLOB
block|,
name|Types
operator|.
name|NCLOB
block|,
name|Types
operator|.
name|LONGVARCHAR
block|,
name|Types
operator|.
name|LONGNVARCHAR
block|,
name|Types
operator|.
name|LONGVARBINARY
block|}
decl_stmt|;
specifier|static
name|boolean
name|isUnsupportedForDistinct
parameter_list|(
name|int
name|type
parameter_list|)
block|{
for|for
control|(
name|int
name|unsupportedDistinctType
range|:
name|UNSUPPORTED_DISTINCT_TYPES
control|)
block|{
if|if
condition|(
name|unsupportedDistinctType
operator|==
name|type
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|perform
parameter_list|(
name|TranslatorContext
name|context
parameter_list|)
block|{
comment|// explicit suppressing of distinct
if|if
condition|(
name|context
operator|.
name|getMetadata
argument_list|()
operator|.
name|isSuppressingDistinct
argument_list|()
condition|)
block|{
name|context
operator|.
name|setDistinctSuppression
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// query forcing distinct or query have joins (qualifier or prefetch)
if|if
condition|(
operator|!
name|context
operator|.
name|getQuery
argument_list|()
operator|.
name|isDistinct
argument_list|()
operator|&&
operator|!
name|hasToManyJoin
argument_list|(
name|context
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// unsuitable jdbc type for distinct clause
for|for
control|(
name|ResultNodeDescriptor
name|node
range|:
name|context
operator|.
name|getResultNodeList
argument_list|()
control|)
block|{
comment|// TODO: make it per adapter rather than one-for-all
if|if
condition|(
name|isUnsupportedForDistinct
argument_list|(
name|node
operator|.
name|getJdbcType
argument_list|()
argument_list|)
condition|)
block|{
name|context
operator|.
name|setDistinctSuppression
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|context
operator|.
name|getSelectBuilder
argument_list|()
operator|.
name|distinct
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|hasToManyJoin
parameter_list|(
name|TranslatorContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|getTableTree
argument_list|()
operator|.
name|getNodeCount
argument_list|()
operator|<=
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|AtomicBoolean
name|atomicBoolean
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|context
operator|.
name|getTableTree
argument_list|()
operator|.
name|visit
argument_list|(
name|node
lambda|->
block|{
if|if
condition|(
name|node
operator|.
name|getRelationship
argument_list|()
operator|!=
literal|null
operator|&&
name|node
operator|.
name|getRelationship
argument_list|()
operator|.
name|isToMany
argument_list|()
condition|)
block|{
name|atomicBoolean
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|atomicBoolean
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

end_unit

