begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|dbsync
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @since 3.0  */
end_comment

begin_class
class|class
name|SchemaAnalyzer
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapTableInDB
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|tableNoInDB
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|nameSchemaMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|schemaNameMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|,
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
argument_list|>
name|entityTables
decl_stmt|;
specifier|private
name|String
name|errorMessage
decl_stmt|;
name|SchemaAnalyzer
parameter_list|()
block|{
name|errorMessage
operator|=
literal|null
expr_stmt|;
name|mapTableInDB
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|tableNoInDB
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|nameSchemaMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|schemaNameMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|entityTables
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTableNoInDB
parameter_list|()
block|{
return|return
name|tableNoInDB
return|;
block|}
specifier|public
name|void
name|compareColumns
parameter_list|(
name|DatabaseMetaData
name|md
parameter_list|)
throws|throws
name|SQLException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
range|:
name|mapTableInDB
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|schema
init|=
name|map
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|map
operator|.
name|getKey
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|md
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
name|schema
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
init|;
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|schemaName
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|schemaName
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
name|atribute
init|=
name|entityTables
operator|.
name|get
argument_list|(
name|schemaName
argument_list|)
decl_stmt|;
if|if
condition|(
name|atribute
operator|==
literal|null
condition|)
block|{
name|schemaName
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|schemaName
operator|.
name|put
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|atribute
operator|=
name|entityTables
operator|.
name|get
argument_list|(
name|schemaName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|atribute
operator|!=
literal|null
operator|&&
name|rs
operator|.
name|getFetchSize
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|int
name|countColumn
init|=
literal|0
decl_stmt|;
name|int
name|isInEntity
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|countColumn
operator|++
expr_stmt|;
name|String
name|columnName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
decl_stmt|;
for|for
control|(
name|DbAttribute
name|attr
range|:
name|atribute
control|)
block|{
if|if
condition|(
name|attr
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
name|isInEntity
operator|++
expr_stmt|;
continue|continue;
block|}
block|}
block|}
if|if
condition|(
name|countColumn
operator|!=
name|atribute
operator|.
name|size
argument_list|()
condition|)
block|{
name|errorMessage
operator|=
literal|"different number of columns in table "
operator|+
name|name
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|countColumn
operator|!=
name|isInEntity
operator|&&
name|errorMessage
operator|==
literal|null
condition|)
block|{
name|errorMessage
operator|=
literal|"no columns in table "
operator|+
name|name
operator|+
literal|" or does not match the type of column"
expr_stmt|;
continue|continue;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|boolean
name|compareTables
parameter_list|(
name|DatabaseMetaData
name|md
parameter_list|,
name|Collection
argument_list|<
name|DbEntity
argument_list|>
name|entities
parameter_list|)
block|{
name|boolean
name|isIncluded
init|=
literal|true
decl_stmt|;
for|for
control|(
name|DbEntity
name|ent
range|:
name|entities
control|)
block|{
name|String
name|name
init|=
name|ent
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|schema
init|=
name|ent
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
name|atributes
init|=
name|ent
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|schemaNameMap
operator|.
name|get
argument_list|(
name|schema
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|names
init|=
name|schemaNameMap
operator|.
name|get
argument_list|(
name|schema
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|mapTableInDB
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tableNoInDB
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|isIncluded
operator|=
literal|false
expr_stmt|;
name|errorMessage
operator|=
literal|"no schema "
operator|+
name|schema
operator|+
literal|" in db"
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
if|if
condition|(
name|nameSchemaMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
operator|||
operator|!
name|ent
operator|.
name|getDataMap
argument_list|()
operator|.
name|isQuotingSQLIdentifiers
argument_list|()
operator|&&
operator|(
name|nameSchemaMap
operator|.
name|get
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|!=
literal|null
operator|||
name|nameSchemaMap
operator|.
name|get
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|)
operator|!=
literal|null
operator|)
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|sc
init|=
name|nameSchemaMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sc
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|nameSchemaMap
operator|.
name|get
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|sc
operator|=
name|nameSchemaMap
operator|.
name|get
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sc
operator|=
name|nameSchemaMap
operator|.
name|get
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sc
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|mapTableInDB
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|sc
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errorMessage
operator|=
literal|" enter the schema. Table found in the schemas: "
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|sc
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|names
init|=
literal|""
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|names
operator|+=
name|it
operator|.
name|next
argument_list|()
operator|+
literal|", "
expr_stmt|;
block|}
name|errorMessage
operator|=
name|errorMessage
operator|+
name|names
expr_stmt|;
block|}
block|}
else|else
block|{
name|tableNoInDB
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|schemaName
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|schemaName
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|entityTables
operator|.
name|put
argument_list|(
name|schemaName
argument_list|,
name|atributes
argument_list|)
expr_stmt|;
block|}
return|return
name|isIncluded
return|;
block|}
specifier|public
name|void
name|analyzeSchemas
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|schemas
parameter_list|,
name|DatabaseMetaData
name|md
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|schemas
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|schemas
operator|.
name|add
argument_list|(
literal|"%"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|schema
range|:
name|schemas
control|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|tableInSchema
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultSet
name|tables
init|=
name|md
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
name|schema
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
init|;
init|)
block|{
while|while
condition|(
name|tables
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|tables
operator|.
name|getString
argument_list|(
literal|"TABLE_NAME"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|startsWith
argument_list|(
literal|"BIN$"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|tableInSchema
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|nameSchemaMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|sc
init|=
name|nameSchemaMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iSc
init|=
name|sc
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|inSchema
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|iSc
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|iSc
operator|.
name|next
argument_list|()
operator|.
name|equals
argument_list|(
name|schema
argument_list|)
condition|)
block|{
name|inSchema
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|inSchema
condition|)
block|{
name|sc
operator|.
name|add
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|nameSchemaMap
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|nameSchemaMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|sc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|sc
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|sc
operator|.
name|add
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|nameSchemaMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|sc
argument_list|)
expr_stmt|;
block|}
block|}
name|schemaNameMap
operator|.
name|put
argument_list|(
name|schema
argument_list|,
name|tableInSchema
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getErrorMessage
parameter_list|()
block|{
return|return
name|errorMessage
return|;
block|}
block|}
end_class

end_unit

