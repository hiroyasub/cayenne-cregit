begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|FilterFactory
operator|.
name|NULL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|FilterFactory
operator|.
name|TRUE
import|;
end_import

begin_comment
comment|/**  * @since 3.2.  * @Immutable  */
end_comment

begin_class
specifier|public
class|class
name|ListFilter
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Filter
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|Collection
argument_list|<
name|Filter
argument_list|<
name|T
argument_list|>
argument_list|>
name|filters
decl_stmt|;
specifier|public
name|ListFilter
parameter_list|(
name|Collection
argument_list|<
name|Filter
argument_list|<
name|T
argument_list|>
argument_list|>
name|filters
parameter_list|)
block|{
name|this
operator|.
name|filters
operator|=
name|filters
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInclude
parameter_list|(
name|T
name|obj
parameter_list|)
block|{
for|for
control|(
name|Filter
argument_list|<
name|T
argument_list|>
name|filter
range|:
name|filters
control|)
block|{
if|if
condition|(
operator|!
name|filter
operator|.
name|isInclude
argument_list|(
name|obj
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Filter
argument_list|<
name|T
argument_list|>
name|join
parameter_list|(
name|Filter
argument_list|<
name|T
argument_list|>
name|filter
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|Filter
argument_list|<
name|T
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|Filter
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|(
name|filters
argument_list|)
decl_stmt|;
if|if
condition|(
name|TRUE
operator|.
name|equals
argument_list|(
name|filter
argument_list|)
operator|||
name|NULL
operator|.
name|equals
argument_list|(
name|filter
argument_list|)
condition|)
block|{
comment|// Do nothing.
block|}
if|else if
condition|(
name|filter
operator|instanceof
name|ListFilter
condition|)
block|{
name|list
operator|.
name|addAll
argument_list|(
operator|(
operator|(
name|ListFilter
argument_list|<
name|T
argument_list|>
operator|)
name|filter
operator|)
operator|.
name|filters
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ListFilter
argument_list|<
name|T
argument_list|>
argument_list|(
name|list
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Filter
argument_list|<
name|T
argument_list|>
name|create
parameter_list|(
name|Filter
argument_list|<
name|T
argument_list|>
name|filter1
parameter_list|,
name|Filter
argument_list|<
name|T
argument_list|>
name|filter2
parameter_list|)
block|{
if|if
condition|(
name|filter1
operator|==
literal|null
operator|||
name|TRUE
operator|.
name|equals
argument_list|(
name|filter1
argument_list|)
operator|||
name|NULL
operator|.
name|equals
argument_list|(
name|filter1
argument_list|)
condition|)
block|{
return|return
name|filter2
return|;
block|}
if|if
condition|(
name|filter2
operator|==
literal|null
operator|||
name|TRUE
operator|.
name|equals
argument_list|(
name|filter2
argument_list|)
operator|||
name|NULL
operator|.
name|equals
argument_list|(
name|filter2
argument_list|)
condition|)
block|{
return|return
name|filter1
return|;
block|}
if|if
condition|(
name|filter1
operator|instanceof
name|ListFilter
condition|)
block|{
return|return
name|filter1
operator|.
name|join
argument_list|(
name|filter2
argument_list|)
return|;
block|}
if|if
condition|(
name|filter2
operator|instanceof
name|ListFilter
condition|)
block|{
return|return
name|filter2
operator|.
name|join
argument_list|(
name|filter1
argument_list|)
return|;
block|}
if|if
condition|(
name|filter1
operator|.
name|equals
argument_list|(
name|filter2
argument_list|)
condition|)
block|{
return|return
name|filter1
return|;
block|}
return|return
operator|new
name|ListFilter
argument_list|<
name|T
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|filter1
argument_list|,
name|filter2
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|filters
argument_list|,
literal|"& "
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Filter
operator|&&
name|filters
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|o
operator|.
name|equals
argument_list|(
name|filters
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
name|ListFilter
name|that
init|=
operator|(
name|ListFilter
operator|)
name|o
decl_stmt|;
return|return
name|filters
operator|!=
literal|null
condition|?
name|filters
operator|.
name|equals
argument_list|(
name|that
operator|.
name|filters
argument_list|)
else|:
name|that
operator|.
name|filters
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|filters
operator|!=
literal|null
condition|?
name|filters
operator|.
name|hashCode
argument_list|()
else|:
literal|0
return|;
block|}
block|}
end_class

end_unit

