begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannelListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistenceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|ObjectStore
operator|.
name|SnapshotEventDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|event
operator|.
name|SnapshotEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|ArcId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphChangeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|AttributeProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ToManyProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ToOneProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * A listener of GraphEvents sent by the DataChannel that merges changes to the DataContext.  *   * @since 1.2  */
end_comment

begin_comment
comment|// TODO: andrus, 11/25/2006 - this logic is the same as the logic in DataRowUtils used to
end_comment

begin_comment
comment|// merge snapshot changes. Any way to reconclie the two? (in fact DataRowUtils is more
end_comment

begin_comment
comment|// comprehensive)
end_comment

begin_class
class|class
name|DataContextMergeHandler
implements|implements
name|GraphChangeHandler
implements|,
name|DataChannelListener
block|{
specifier|private
name|boolean
name|active
decl_stmt|;
specifier|private
name|DataContext
name|context
decl_stmt|;
name|DataContextMergeHandler
parameter_list|(
name|DataContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|active
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
name|void
name|setActive
parameter_list|(
name|boolean
name|active
parameter_list|)
block|{
name|this
operator|.
name|active
operator|=
name|active
expr_stmt|;
block|}
comment|/**      * Returns true if this object is active and an event came from our channel, but did      * not originate in it.      */
specifier|private
name|boolean
name|shouldProcessEvent
parameter_list|(
name|GraphEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|active
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// this effectively filters out all events that are not coming from peers or
comment|// grandparents...
return|return
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|context
operator|.
name|getChannel
argument_list|()
operator|&&
name|e
operator|.
name|getPostedBy
argument_list|()
operator|!=
name|context
operator|&&
name|e
operator|.
name|getPostedBy
argument_list|()
operator|!=
name|context
operator|.
name|getChannel
argument_list|()
return|;
comment|// the first condition (e.getSource() == context.getChannel()) is actually always
comment|// 'true' because of how the listener is registered. Still keep it here as an
comment|// extra safegurad
block|}
specifier|private
name|PropertyDescriptor
name|propertyForId
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|ClassDescriptor
name|descriptor
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getClassDescriptor
argument_list|(
operator|(
operator|(
name|ObjectId
operator|)
name|nodeId
operator|)
operator|.
name|getEntityName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|descriptor
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
comment|// *** GraphEventListener methods
annotation|@
name|Override
specifier|public
name|void
name|graphChanged
parameter_list|(
name|GraphEvent
name|event
parameter_list|)
block|{
comment|// parent received external change
if|if
condition|(
name|shouldProcessEvent
argument_list|(
name|event
argument_list|)
condition|)
block|{
comment|// temp kludge - see TODO in ObjectStore.snapshotsChanged(..)
name|GraphDiff
name|diff
init|=
name|event
operator|.
name|getDiff
argument_list|()
decl_stmt|;
if|if
condition|(
name|diff
operator|instanceof
name|SnapshotEventDecorator
condition|)
block|{
name|SnapshotEvent
name|decoratedEvent
init|=
operator|(
operator|(
name|SnapshotEventDecorator
operator|)
name|diff
operator|)
operator|.
name|getEvent
argument_list|()
decl_stmt|;
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|processSnapshotEvent
argument_list|(
name|decoratedEvent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|context
operator|.
name|getObjectStore
argument_list|()
init|)
block|{
name|diff
operator|.
name|apply
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|// repost channel change event for our own children
name|context
operator|.
name|fireDataChannelChanged
argument_list|(
name|event
operator|.
name|getPostedBy
argument_list|()
argument_list|,
name|event
operator|.
name|getDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|graphFlushed
parameter_list|(
name|GraphEvent
name|event
parameter_list|)
block|{
comment|// peer is committed
if|if
condition|(
name|shouldProcessEvent
argument_list|(
name|event
argument_list|)
condition|)
block|{
comment|// per CAY-1737 event dispatches from parent context to children are
comment|// non-blocking, this causes issues like CAY-1749. so we must
comment|// synchronize ObjectStore updates here.
comment|// TODO: we can get here if a peer context is committed (ok) or
comment|// if our context was committed (not ok, since parent changes are
comment|// already applied in the commit thread) .. figure out an alt
comment|// filtering mechanism to avoid the duplicate object processing
synchronized|synchronized
init|(
name|context
operator|.
name|getObjectStore
argument_list|()
init|)
block|{
name|event
operator|.
name|getDiff
argument_list|()
operator|.
name|apply
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|// repost as change event for our own children
name|context
operator|.
name|fireDataChannelChanged
argument_list|(
name|event
operator|.
name|getPostedBy
argument_list|()
argument_list|,
name|event
operator|.
name|getDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|graphRolledback
parameter_list|(
name|GraphEvent
name|event
parameter_list|)
block|{
comment|// TODO: andrus, 3/26/2006 - enable this once all ObjectStore diffs implement
comment|// working undo operation
comment|// if(shouldProcessEvent(e)) {
comment|// event.getDiff().undo(this);
comment|// }
block|}
comment|// *** GraphChangeHandler methods
annotation|@
name|Override
specifier|public
name|void
name|nodeIdChanged
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|Object
name|newId
parameter_list|)
block|{
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|processIdChange
argument_list|(
name|nodeId
argument_list|,
name|newId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeCreated
parameter_list|(
name|Object
name|nodeId
parameter_list|)
block|{
comment|// noop
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeRemoved
parameter_list|(
name|Object
name|nodeId
parameter_list|)
block|{
name|ObjectStore
name|os
init|=
name|context
operator|.
name|getObjectStore
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|os
init|)
block|{
name|os
operator|.
name|processDeletedID
argument_list|(
operator|(
name|ObjectId
operator|)
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodePropertyChanged
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|String
name|property
parameter_list|,
name|Object
name|oldValue
parameter_list|,
name|Object
name|newValue
parameter_list|)
block|{
name|Persistent
name|object
init|=
operator|(
name|Persistent
operator|)
name|context
operator|.
name|getGraphManager
argument_list|()
operator|.
name|getNode
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|!=
literal|null
operator|&&
name|object
operator|.
name|getPersistenceState
argument_list|()
operator|!=
name|PersistenceState
operator|.
name|HOLLOW
condition|)
block|{
comment|// do not override local changes....
name|PropertyDescriptor
name|p
init|=
name|propertyForId
argument_list|(
name|nodeId
argument_list|,
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|p
operator|.
name|readPropertyDirectly
argument_list|(
name|object
argument_list|)
argument_list|,
name|oldValue
argument_list|)
condition|)
block|{
name|p
operator|.
name|writePropertyDirectly
argument_list|(
name|object
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|arcCreated
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|Object
name|targetNodeId
parameter_list|,
name|ArcId
name|arcId
parameter_list|)
block|{
name|arcChanged
argument_list|(
name|nodeId
argument_list|,
name|targetNodeId
argument_list|,
name|arcId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|arcDeleted
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|Object
name|targetNodeId
parameter_list|,
name|ArcId
name|arcId
parameter_list|)
block|{
name|arcChanged
argument_list|(
name|nodeId
argument_list|,
name|targetNodeId
argument_list|,
name|arcId
argument_list|)
expr_stmt|;
block|}
comment|// works the same for add and remove as long as we don't get too smart per TODO below.
specifier|private
name|void
name|arcChanged
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|Object
name|targetNodeId
parameter_list|,
name|Object
name|arcId
parameter_list|)
block|{
specifier|final
name|Persistent
name|source
init|=
operator|(
name|Persistent
operator|)
name|context
operator|.
name|getGraphManager
argument_list|()
operator|.
name|getNode
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
operator|&&
name|source
operator|.
name|getPersistenceState
argument_list|()
operator|!=
name|PersistenceState
operator|.
name|HOLLOW
condition|)
block|{
specifier|final
name|int
name|state
init|=
name|source
operator|.
name|getPersistenceState
argument_list|()
decl_stmt|;
name|PropertyDescriptor
name|p
init|=
name|propertyForId
argument_list|(
name|nodeId
argument_list|,
name|arcId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|visit
argument_list|(
operator|new
name|PropertyVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|visitAttribute
parameter_list|(
name|AttributeProperty
name|property
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitToMany
parameter_list|(
name|ToManyProperty
name|property
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
name|PersistenceState
operator|.
name|COMMITTED
condition|)
block|{
name|property
operator|.
name|invalidate
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|visitToOne
parameter_list|(
name|ToOneProperty
name|property
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
name|PersistenceState
operator|.
name|COMMITTED
condition|)
block|{
name|property
operator|.
name|invalidate
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
comment|// TODO: andrus, 11/25/2006 - handle replacement of clean properties
comment|// of dirty objects. See DataRowUtils for details.
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

