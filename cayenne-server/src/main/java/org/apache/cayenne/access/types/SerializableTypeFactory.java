begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * ExtendedTypeFactory for handling serializable objects. Returned ExtendedType  * is simply an object serialization wrapper on top of byte[] ExtendedType.  *   * @since 3.0  */
end_comment

begin_class
class|class
name|SerializableTypeFactory
implements|implements
name|ExtendedTypeFactory
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SerializableTypeFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ExtendedTypeMap
name|map
decl_stmt|;
name|SerializableTypeFactory
parameter_list|(
name|ExtendedTypeMap
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
block|}
specifier|public
name|ExtendedType
name|getType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|objectClass
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Haven't found suitable ExtendedType for class '"
operator|+
name|objectClass
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"'. Most likely you need to define a custom ExtendedType."
argument_list|)
expr_stmt|;
if|if
condition|(
name|Serializable
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|objectClass
argument_list|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"SerializableType will be used for type conversion."
argument_list|)
expr_stmt|;
comment|// using a binary stream delegate instead of byte[] may actually
comment|// speed up
comment|// things in some dbs, but at least byte[] type works consistently
comment|// across
comment|// adapters...
comment|// note - can't use "getRegisteredType" as it causes infinite
comment|// recursion
name|ExtendedType
argument_list|<
name|byte
index|[]
argument_list|>
name|bytesType
init|=
name|map
operator|.
name|getExplictlyRegisteredType
argument_list|(
literal|"byte[]"
argument_list|)
decl_stmt|;
return|return
operator|new
name|SerializableType
argument_list|(
name|objectClass
argument_list|,
name|bytesType
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 * A serialization wrapper on top of byte[] ExtendedType 	 */
specifier|final
class|class
name|SerializableType
extends|extends
name|ExtendedTypeDecorator
argument_list|<
name|Object
argument_list|,
name|byte
index|[]
argument_list|>
block|{
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|javaClass
decl_stmt|;
name|SerializableType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|javaClass
parameter_list|,
name|ExtendedType
argument_list|<
name|byte
index|[]
argument_list|>
name|bytesType
parameter_list|)
block|{
name|super
argument_list|(
name|bytesType
argument_list|)
expr_stmt|;
name|this
operator|.
name|javaClass
operator|=
name|javaClass
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|javaClass
operator|.
name|getCanonicalName
argument_list|()
return|;
block|}
annotation|@
name|Override
name|byte
index|[]
name|fromJavaObject
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
block|{
comment|// avoid unneeded array copy...
annotation|@
name|Override
specifier|public
specifier|synchronized
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
return|return
name|buf
return|;
block|}
block|}
decl_stmt|;
try|try
init|(
name|ObjectOutputStream
name|out
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|bytes
argument_list|)
init|;
init|)
block|{
name|out
operator|.
name|writeObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error serializing object"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|bytes
operator|.
name|toByteArray
argument_list|()
return|;
block|}
annotation|@
name|Override
name|Object
name|toJavaObject
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
try|try
block|{
return|return
name|bytes
operator|!=
literal|null
operator|&&
name|bytes
operator|.
name|length
operator|>
literal|0
condition|?
operator|new
name|ObjectInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
operator|.
name|readObject
argument_list|()
else|:
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error deserializing object"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

