begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
operator|.
name|ExtendedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityInheritanceTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_comment
comment|/**  * Deals with DataRow type conversion in inheritance situations.  *   * @since 1.2  */
end_comment

begin_class
class|class
name|DataRowPostProcessor
block|{
specifier|private
name|EntityInheritanceTree
name|inheritanceTree
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|ColumnOverride
argument_list|>
argument_list|>
name|columnOverrides
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|ColumnOverride
argument_list|>
name|defaultOverrides
decl_stmt|;
name|DataRowPostProcessor
parameter_list|(
name|ClassDescriptor
name|classDescriptor
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|ColumnOverride
argument_list|>
argument_list|>
name|columnOverrides
parameter_list|)
block|{
if|if
condition|(
name|classDescriptor
operator|!=
literal|null
operator|&&
name|classDescriptor
operator|.
name|hasSubclasses
argument_list|()
condition|)
block|{
name|this
operator|.
name|inheritanceTree
operator|=
name|classDescriptor
operator|.
name|getEntityInheritanceTree
argument_list|()
expr_stmt|;
name|this
operator|.
name|columnOverrides
operator|=
name|columnOverrides
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|columnOverrides
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No inheritance - there must be only one override set"
argument_list|)
throw|;
block|}
name|defaultOverrides
operator|=
name|columnOverrides
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|postprocessRow
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|DataRow
name|row
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|ColumnOverride
argument_list|>
name|overrides
init|=
name|getOverrides
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|overrides
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|ColumnOverride
name|override
range|:
name|overrides
control|)
block|{
name|Object
name|newValue
init|=
name|override
operator|.
name|converter
operator|.
name|materializeObject
argument_list|(
name|resultSet
argument_list|,
name|override
operator|.
name|index
argument_list|,
name|override
operator|.
name|jdbcType
argument_list|)
decl_stmt|;
name|row
operator|.
name|put
argument_list|(
name|override
operator|.
name|key
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|final
name|Collection
argument_list|<
name|ColumnOverride
argument_list|>
name|getOverrides
parameter_list|(
name|DataRow
name|row
parameter_list|)
block|{
if|if
condition|(
name|defaultOverrides
operator|!=
literal|null
condition|)
block|{
return|return
name|defaultOverrides
return|;
block|}
else|else
block|{
name|ObjEntity
name|entity
init|=
name|inheritanceTree
operator|.
name|entityMatchingRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
return|return
name|entity
operator|!=
literal|null
condition|?
name|columnOverrides
operator|.
name|get
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
block|}
specifier|static
specifier|final
class|class
name|ColumnOverride
block|{
name|int
name|index
decl_stmt|;
name|int
name|jdbcType
decl_stmt|;
name|String
name|key
decl_stmt|;
name|ExtendedType
name|converter
decl_stmt|;
name|ColumnOverride
parameter_list|(
name|int
name|index
parameter_list|,
name|String
name|key
parameter_list|,
name|ExtendedType
name|converter
parameter_list|,
name|int
name|jdbcType
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|converter
operator|=
name|converter
expr_stmt|;
name|this
operator|.
name|jdbcType
operator|=
name|jdbcType
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

