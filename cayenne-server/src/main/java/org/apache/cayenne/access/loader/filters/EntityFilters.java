begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|EqualsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|FilterFactory
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isBlank
import|;
end_import

begin_comment
comment|/**  * @since 3.2.  */
end_comment

begin_class
specifier|public
class|class
name|EntityFilters
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Filter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|DbPath
name|dbPath
decl_stmt|;
specifier|private
specifier|final
name|Filter
argument_list|<
name|String
argument_list|>
name|tableFilters
decl_stmt|;
specifier|private
specifier|final
name|Filter
argument_list|<
name|String
argument_list|>
name|columnFilters
decl_stmt|;
specifier|private
specifier|final
name|Filter
argument_list|<
name|String
argument_list|>
name|proceduresFilters
decl_stmt|;
specifier|public
name|EntityFilters
parameter_list|(
name|DbPath
name|dbPath
parameter_list|)
block|{
name|this
argument_list|(
name|dbPath
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EntityFilters
parameter_list|(
name|DbPath
name|dbPath
parameter_list|,
name|Filter
argument_list|<
name|String
argument_list|>
name|tableFilters
parameter_list|,
name|Filter
argument_list|<
name|String
argument_list|>
name|columnFilters
parameter_list|,
name|Filter
argument_list|<
name|String
argument_list|>
name|proceduresFilters
parameter_list|)
block|{
name|this
operator|.
name|dbPath
operator|=
name|dbPath
expr_stmt|;
name|this
operator|.
name|tableFilters
operator|=
name|set
argument_list|(
name|tableFilters
argument_list|)
expr_stmt|;
name|this
operator|.
name|columnFilters
operator|=
name|set
argument_list|(
name|columnFilters
argument_list|)
expr_stmt|;
name|this
operator|.
name|proceduresFilters
operator|=
name|set
argument_list|(
name|proceduresFilters
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
operator|(
name|tableFilters
operator|==
literal|null
operator|||
name|NULL
operator|.
name|equals
argument_list|(
name|tableFilters
argument_list|)
operator|)
operator|&&
operator|(
name|columnFilters
operator|==
literal|null
operator|||
name|NULL
operator|.
name|equals
argument_list|(
name|columnFilters
argument_list|)
operator|)
operator|&&
operator|(
name|proceduresFilters
operator|==
literal|null
operator|||
name|NULL
operator|.
name|equals
argument_list|(
name|proceduresFilters
argument_list|)
operator|)
return|;
block|}
specifier|public
name|DbPath
name|getDbPath
parameter_list|()
block|{
return|return
name|dbPath
return|;
block|}
specifier|private
name|Filter
argument_list|<
name|String
argument_list|>
name|set
parameter_list|(
name|Filter
argument_list|<
name|String
argument_list|>
name|tableFilters
parameter_list|)
block|{
return|return
name|tableFilters
operator|==
literal|null
condition|?
name|NULL
else|:
name|tableFilters
return|;
block|}
specifier|public
name|Filter
argument_list|<
name|DbEntity
argument_list|>
name|tableFilter
parameter_list|()
block|{
return|return
operator|new
name|DbEntityFilter
argument_list|(
name|dbPath
argument_list|,
name|tableFilters
argument_list|)
return|;
block|}
specifier|public
name|Filter
argument_list|<
name|DbAttribute
argument_list|>
name|columnFilter
parameter_list|()
block|{
return|return
operator|new
name|DbAttributeFilter
argument_list|(
name|dbPath
argument_list|,
name|columnFilters
argument_list|)
return|;
block|}
specifier|public
name|Filter
argument_list|<
name|Procedure
argument_list|>
name|procedureFilter
parameter_list|()
block|{
return|return
operator|new
name|ProcedureFilter
argument_list|(
name|dbPath
argument_list|,
name|proceduresFilters
argument_list|)
return|;
block|}
specifier|public
name|EntityFilters
name|join
parameter_list|(
name|EntityFilters
name|filter
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
return|return
name|this
return|;
block|}
name|DbPath
name|path
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|dbPath
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|filter
operator|.
name|dbPath
expr_stmt|;
block|}
if|else if
condition|(
name|filter
operator|.
name|dbPath
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|this
operator|.
name|dbPath
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|this
operator|.
name|dbPath
operator|.
name|merge
argument_list|(
name|filter
operator|.
name|dbPath
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|EntityFilters
argument_list|(
name|path
argument_list|,
name|this
operator|.
name|tableFilters
operator|.
name|join
argument_list|(
name|filter
operator|.
name|tableFilters
argument_list|)
argument_list|,
name|this
operator|.
name|columnFilters
operator|.
name|join
argument_list|(
name|filter
operator|.
name|columnFilters
argument_list|)
argument_list|,
name|this
operator|.
name|proceduresFilters
operator|.
name|join
argument_list|(
name|filter
operator|.
name|proceduresFilters
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|res
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|res
operator|.
name|append
argument_list|(
name|dbPath
argument_list|)
operator|.
name|append
argument_list|(
literal|":\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableFilters
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|"    Table: "
argument_list|)
operator|.
name|append
argument_list|(
name|tableFilters
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|columnFilters
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|"    Column: "
argument_list|)
operator|.
name|append
argument_list|(
name|columnFilters
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proceduresFilters
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|"    Procedures: "
argument_list|)
operator|.
name|append
argument_list|(
name|proceduresFilters
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|EntityFilters
name|rhs
init|=
operator|(
name|EntityFilters
operator|)
name|obj
decl_stmt|;
return|return
operator|new
name|EqualsBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|this
operator|.
name|dbPath
argument_list|,
name|rhs
operator|.
name|dbPath
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableFilters
argument_list|,
name|rhs
operator|.
name|tableFilters
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|columnFilters
argument_list|,
name|rhs
operator|.
name|columnFilters
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|proceduresFilters
argument_list|,
name|rhs
operator|.
name|proceduresFilters
argument_list|)
operator|.
name|isEquals
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|new
name|HashCodeBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|dbPath
argument_list|)
operator|.
name|append
argument_list|(
name|tableFilters
argument_list|)
operator|.
name|append
argument_list|(
name|columnFilters
argument_list|)
operator|.
name|append
argument_list|(
name|proceduresFilters
argument_list|)
operator|.
name|toHashCode
argument_list|()
return|;
block|}
comment|/**      * @param<T>      */
specifier|private
specifier|abstract
specifier|static
class|class
name|EntityFilter
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Filter
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|DbPath
name|dbPath
decl_stmt|;
specifier|private
specifier|final
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
decl_stmt|;
specifier|protected
name|EntityFilter
parameter_list|(
name|DbPath
name|dbPath
parameter_list|,
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
name|this
operator|.
name|dbPath
operator|=
name|dbPath
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
name|DbPath
name|getDbPath
parameter_list|()
block|{
return|return
name|dbPath
return|;
block|}
name|Filter
argument_list|<
name|String
argument_list|>
name|getFilter
parameter_list|()
block|{
return|return
name|filter
return|;
block|}
annotation|@
name|Override
specifier|public
name|EntityFilter
argument_list|<
name|T
argument_list|>
name|join
parameter_list|(
name|Filter
argument_list|<
name|T
argument_list|>
name|filter
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|filter
operator|instanceof
name|EntityFilter
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected filter join '"
operator|+
name|this
operator|+
literal|"' and '"
operator|+
name|filter
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|EntityFilter
argument_list|<
name|T
argument_list|>
name|entityFilter
init|=
operator|(
name|EntityFilter
argument_list|<
name|T
argument_list|>
operator|)
name|filter
decl_stmt|;
name|DbPath
name|dbPath
decl_stmt|;
if|if
condition|(
name|entityFilter
operator|.
name|dbPath
operator|.
name|isCover
argument_list|(
name|this
operator|.
name|dbPath
argument_list|)
condition|)
block|{
name|dbPath
operator|=
name|entityFilter
operator|.
name|dbPath
expr_stmt|;
block|}
if|else if
condition|(
name|this
operator|.
name|dbPath
operator|.
name|isCover
argument_list|(
name|entityFilter
operator|.
name|dbPath
argument_list|)
condition|)
block|{
name|dbPath
operator|=
name|this
operator|.
name|dbPath
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Attempt to merge filter with incompatible tuples: '"
operator|+
name|entityFilter
operator|.
name|dbPath
operator|+
literal|"'"
argument_list|)
throw|;
block|}
return|return
name|create
argument_list|(
name|dbPath
argument_list|,
name|this
operator|.
name|filter
operator|.
name|join
argument_list|(
name|entityFilter
operator|.
name|filter
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" ("
operator|+
name|dbPath
operator|+
literal|" -> "
operator|+
name|filter
operator|+
literal|")"
return|;
block|}
specifier|public
specifier|abstract
name|EntityFilter
argument_list|<
name|T
argument_list|>
name|create
parameter_list|(
name|DbPath
name|dbPath
parameter_list|,
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|Filter
condition|)
block|{
comment|// TODO
return|return
name|filter
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|filter
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|EntityFilter
operator|)
name|o
operator|)
operator|.
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|filter
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|DbEntityFilter
extends|extends
name|EntityFilter
argument_list|<
name|DbEntity
argument_list|>
block|{
specifier|public
name|DbEntityFilter
parameter_list|(
name|DbPath
name|dbPath
parameter_list|,
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
name|super
argument_list|(
name|dbPath
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInclude
parameter_list|(
name|DbEntity
name|obj
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
operator|&&
name|this
operator|.
name|getDbPath
argument_list|()
operator|.
name|isCover
argument_list|(
name|obj
operator|.
name|getCatalog
argument_list|()
argument_list|,
name|obj
operator|.
name|getSchema
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Attempt to apply inconvenient filter '"
operator|+
name|this
operator|+
literal|"' for dbEntity '"
operator|+
name|obj
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|getFilter
argument_list|()
operator|.
name|isInclude
argument_list|(
name|obj
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|EntityFilter
argument_list|<
name|DbEntity
argument_list|>
name|create
parameter_list|(
name|DbPath
name|dbPath
parameter_list|,
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
return|return
operator|new
name|DbEntityFilter
argument_list|(
name|dbPath
argument_list|,
name|filter
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|DbAttributeFilter
extends|extends
name|EntityFilter
argument_list|<
name|DbAttribute
argument_list|>
block|{
specifier|public
name|DbAttributeFilter
parameter_list|(
name|DbPath
name|dbPath
parameter_list|,
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
name|super
argument_list|(
name|dbPath
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInclude
parameter_list|(
name|DbAttribute
name|obj
parameter_list|)
block|{
name|DbEntity
name|entity
init|=
name|obj
operator|.
name|getEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
operator|&&
name|this
operator|.
name|getDbPath
argument_list|()
operator|.
name|isCover
argument_list|(
name|entity
operator|.
name|getCatalog
argument_list|()
argument_list|,
name|entity
operator|.
name|getSchema
argument_list|()
argument_list|,
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Attempt to apply inconvenient filter '"
operator|+
name|this
operator|+
literal|"' for attribute '"
operator|+
name|obj
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|getFilter
argument_list|()
operator|.
name|isInclude
argument_list|(
name|obj
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|EntityFilter
argument_list|<
name|DbAttribute
argument_list|>
name|create
parameter_list|(
name|DbPath
name|dbPath
parameter_list|,
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
return|return
operator|new
name|DbAttributeFilter
argument_list|(
name|dbPath
argument_list|,
name|filter
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ProcedureFilter
extends|extends
name|EntityFilter
argument_list|<
name|Procedure
argument_list|>
block|{
specifier|public
name|ProcedureFilter
parameter_list|(
name|DbPath
name|dbPath
parameter_list|,
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
name|super
argument_list|(
name|dbPath
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInclude
parameter_list|(
name|Procedure
name|obj
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
operator|&&
name|this
operator|.
name|getDbPath
argument_list|()
operator|.
name|isCover
argument_list|(
name|obj
operator|.
name|getCatalog
argument_list|()
argument_list|,
name|obj
operator|.
name|getSchema
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Attempt to apply inconvenient filter '"
operator|+
name|this
operator|+
literal|"' for procedure '"
operator|+
name|obj
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|getFilter
argument_list|()
operator|.
name|isInclude
argument_list|(
name|obj
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|EntityFilter
argument_list|<
name|Procedure
argument_list|>
name|create
parameter_list|(
name|DbPath
name|dbPath
parameter_list|,
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
return|return
operator|new
name|ProcedureFilter
argument_list|(
name|dbPath
argument_list|,
name|filter
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Builder
block|{
specifier|private
name|String
name|catalog
decl_stmt|;
specifier|private
name|String
name|schema
decl_stmt|;
specifier|private
name|Filter
argument_list|<
name|String
argument_list|>
name|tableFilters
init|=
name|TRUE
decl_stmt|;
specifier|private
name|Filter
argument_list|<
name|String
argument_list|>
name|columnFilters
init|=
name|TRUE
decl_stmt|;
specifier|private
name|Filter
argument_list|<
name|String
argument_list|>
name|proceduresFilters
init|=
name|NULL
decl_stmt|;
specifier|public
name|Builder
parameter_list|()
block|{
block|}
specifier|public
name|Builder
name|catalog
parameter_list|(
name|String
name|catalog
parameter_list|)
block|{
name|this
operator|.
name|catalog
operator|=
name|catalog
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|schema
parameter_list|(
name|String
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|catalog
parameter_list|()
block|{
return|return
name|catalog
return|;
block|}
specifier|public
name|String
name|schema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
specifier|public
name|Builder
name|includeTables
parameter_list|(
name|String
name|tableFilters
parameter_list|)
block|{
if|if
condition|(
name|isBlank
argument_list|(
name|tableFilters
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
name|this
operator|.
name|tableFilters
operator|=
name|includeFilter
argument_list|(
name|tableFilters
argument_list|,
name|this
operator|.
name|tableFilters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|includeColumns
parameter_list|(
name|String
name|columnFilters
parameter_list|)
block|{
if|if
condition|(
name|isBlank
argument_list|(
name|columnFilters
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
name|this
operator|.
name|columnFilters
operator|=
name|includeFilter
argument_list|(
name|columnFilters
argument_list|,
name|this
operator|.
name|columnFilters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|includeProcedures
parameter_list|(
name|String
name|proceduresFilters
parameter_list|)
block|{
if|if
condition|(
name|isBlank
argument_list|(
name|proceduresFilters
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
name|this
operator|.
name|proceduresFilters
operator|=
name|includeFilter
argument_list|(
name|proceduresFilters
argument_list|,
name|this
operator|.
name|proceduresFilters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|Filter
argument_list|<
name|String
argument_list|>
name|includeFilter
parameter_list|(
name|String
name|tableFilters
parameter_list|,
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
for|for
control|(
name|String
name|pattern
range|:
name|tableFilters
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|filter
operator|=
name|filter
operator|.
name|join
argument_list|(
name|include
argument_list|(
name|transform
argument_list|(
name|pattern
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|filter
return|;
block|}
specifier|public
name|Builder
name|excludeTables
parameter_list|(
name|String
name|tableFilters
parameter_list|)
block|{
if|if
condition|(
name|isBlank
argument_list|(
name|tableFilters
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
name|this
operator|.
name|tableFilters
operator|=
name|excludeFilter
argument_list|(
name|tableFilters
argument_list|,
name|this
operator|.
name|tableFilters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|excludeColumns
parameter_list|(
name|String
name|columnFilters
parameter_list|)
block|{
if|if
condition|(
name|isBlank
argument_list|(
name|columnFilters
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
name|this
operator|.
name|columnFilters
operator|=
name|excludeFilter
argument_list|(
name|columnFilters
argument_list|,
name|this
operator|.
name|columnFilters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|excludeProcedures
parameter_list|(
name|String
name|proceduresFilters
parameter_list|)
block|{
if|if
condition|(
name|isBlank
argument_list|(
name|proceduresFilters
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
name|this
operator|.
name|proceduresFilters
operator|=
name|excludeFilter
argument_list|(
name|proceduresFilters
argument_list|,
name|this
operator|.
name|proceduresFilters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|Filter
argument_list|<
name|String
argument_list|>
name|excludeFilter
parameter_list|(
name|String
name|tableFilters
parameter_list|,
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
for|for
control|(
name|String
name|pattern
range|:
name|tableFilters
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|filter
operator|=
name|filter
operator|.
name|join
argument_list|(
name|exclude
argument_list|(
name|transform
argument_list|(
name|pattern
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|filter
return|;
block|}
specifier|private
specifier|static
name|String
name|transform
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
return|return
literal|"^"
operator|+
name|pattern
operator|.
name|replaceAll
argument_list|(
literal|"[*?]"
argument_list|,
literal|".$0"
argument_list|)
operator|+
literal|"$"
return|;
block|}
specifier|public
name|Filter
argument_list|<
name|String
argument_list|>
name|tableFilters
parameter_list|()
block|{
return|return
name|tableFilters
return|;
block|}
specifier|public
name|Filter
argument_list|<
name|String
argument_list|>
name|columnFilters
parameter_list|()
block|{
return|return
name|columnFilters
return|;
block|}
specifier|public
name|Filter
argument_list|<
name|String
argument_list|>
name|proceduresFilters
parameter_list|()
block|{
return|return
name|proceduresFilters
return|;
block|}
specifier|public
name|void
name|setTableFilters
parameter_list|(
name|Filter
argument_list|<
name|String
argument_list|>
name|tableFilters
parameter_list|)
block|{
name|this
operator|.
name|tableFilters
operator|=
name|tableFilters
expr_stmt|;
block|}
specifier|public
name|void
name|setColumnFilters
parameter_list|(
name|Filter
argument_list|<
name|String
argument_list|>
name|columnFilters
parameter_list|)
block|{
name|this
operator|.
name|columnFilters
operator|=
name|columnFilters
expr_stmt|;
block|}
specifier|public
name|void
name|setProceduresFilters
parameter_list|(
name|Filter
argument_list|<
name|String
argument_list|>
name|proceduresFilters
parameter_list|)
block|{
name|this
operator|.
name|proceduresFilters
operator|=
name|proceduresFilters
expr_stmt|;
block|}
specifier|public
name|EntityFilters
name|build
parameter_list|()
block|{
return|return
operator|new
name|EntityFilters
argument_list|(
operator|new
name|DbPath
argument_list|(
name|catalog
argument_list|,
name|schema
argument_list|)
argument_list|,
name|tableFilters
argument_list|,
name|columnFilters
argument_list|,
name|proceduresFilters
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

