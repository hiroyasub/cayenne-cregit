begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|CallableStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|value
operator|.
name|Json
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|JsonType
implements|implements
name|ExtendedType
argument_list|<
name|Json
argument_list|>
block|{
specifier|private
specifier|final
name|CharType
name|delegate
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|useRealType
decl_stmt|;
specifier|public
name|JsonType
parameter_list|(
name|CharType
name|delegate
parameter_list|,
name|boolean
name|useRealType
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|useRealType
operator|=
name|useRealType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|Json
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setJdbcObject
parameter_list|(
name|PreparedStatement
name|statement
parameter_list|,
name|Json
name|json
parameter_list|,
name|int
name|pos
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|scale
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|value
init|=
name|json
operator|!=
literal|null
condition|?
name|json
operator|.
name|getRawJson
argument_list|()
else|:
literal|null
decl_stmt|;
name|delegate
operator|.
name|setJdbcObject
argument_list|(
name|statement
argument_list|,
name|value
argument_list|,
name|pos
argument_list|,
name|useRealType
condition|?
name|type
else|:
name|Types
operator|.
name|OTHER
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Json
name|materializeObject
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|value
init|=
name|delegate
operator|.
name|materializeObject
argument_list|(
name|rs
argument_list|,
name|index
argument_list|,
name|useRealType
condition|?
name|type
else|:
name|Types
operator|.
name|OTHER
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
condition|?
operator|new
name|Json
argument_list|(
name|value
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Json
name|materializeObject
parameter_list|(
name|CallableStatement
name|rs
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|value
init|=
name|delegate
operator|.
name|materializeObject
argument_list|(
name|rs
argument_list|,
name|index
argument_list|,
name|useRealType
condition|?
name|type
else|:
name|Types
operator|.
name|OTHER
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
condition|?
operator|new
name|Json
argument_list|(
name|value
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|Json
name|value
parameter_list|)
block|{
return|return
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|getRawJson
argument_list|()
else|:
literal|null
return|;
block|}
block|}
end_class

end_unit

