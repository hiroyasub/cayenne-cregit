begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
package|;
end_package

begin_comment
comment|/**  * Special case op, that describes delete/insert sequence of different objects  * that have same ObjectId (known example: meaningful PK set to same value as used before).  *  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|DeleteInsertDbRowOp
extends|extends
name|BaseDbRowOp
block|{
specifier|private
specifier|final
name|DeleteDbRowOp
name|delete
decl_stmt|;
specifier|private
specifier|final
name|InsertDbRowOp
name|insert
decl_stmt|;
specifier|public
name|DeleteInsertDbRowOp
parameter_list|(
name|DeleteDbRowOp
name|delete
parameter_list|,
name|InsertDbRowOp
name|insert
parameter_list|)
block|{
name|super
argument_list|(
name|delete
operator|.
name|getObject
argument_list|()
argument_list|,
name|delete
operator|.
name|getEntity
argument_list|()
argument_list|,
name|delete
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|delete
operator|=
name|delete
expr_stmt|;
name|this
operator|.
name|insert
operator|=
name|insert
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|accept
parameter_list|(
name|DbRowOpVisitor
argument_list|<
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
name|visitor
operator|.
name|visitDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
return|return
name|visitor
operator|.
name|visitInsert
argument_list|(
name|insert
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSameBatch
parameter_list|(
name|DbRowOp
name|rowOp
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

