begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/** * @since 4.0. */
end_comment

begin_class
specifier|public
class|class
name|DbPath
implements|implements
name|Comparable
argument_list|<
name|DbPath
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|DbPath
name|EMPTY
init|=
operator|new
name|DbPath
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SEPARATOR
init|=
literal|"/"
decl_stmt|;
specifier|public
specifier|final
name|String
name|catalog
decl_stmt|;
specifier|public
specifier|final
name|String
name|schema
decl_stmt|;
specifier|public
specifier|final
name|String
name|tablePattern
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|public
name|DbPath
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DbPath
parameter_list|(
name|String
name|catalog
parameter_list|)
block|{
name|this
argument_list|(
name|catalog
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DbPath
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|)
block|{
name|this
argument_list|(
name|catalog
argument_list|,
name|schema
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DbPath
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|tablePattern
parameter_list|)
block|{
name|this
operator|.
name|catalog
operator|=
name|prepareValue
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|prepareValue
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|this
operator|.
name|tablePattern
operator|=
name|prepareValue
argument_list|(
name|tablePattern
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|join
argument_list|(
name|this
operator|.
name|catalog
argument_list|,
name|this
operator|.
name|schema
argument_list|,
name|this
operator|.
name|tablePattern
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|join
parameter_list|(
name|String
name|first
parameter_list|,
name|String
name|second
parameter_list|)
block|{
if|if
condition|(
name|second
operator|==
literal|null
operator|||
name|second
operator|.
name|equals
argument_list|(
literal|"%"
argument_list|)
condition|)
block|{
return|return
name|first
return|;
block|}
else|else
block|{
return|return
name|escapeNull
argument_list|(
name|first
argument_list|)
operator|+
name|SEPARATOR
operator|+
name|second
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|join
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
block|{
name|String
name|join
init|=
name|join
argument_list|(
name|catalog
argument_list|,
name|join
argument_list|(
name|schema
argument_list|,
name|table
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|escapeNull
argument_list|(
name|join
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|escapeNull
parameter_list|(
name|String
name|join
parameter_list|)
block|{
return|return
name|join
operator|==
literal|null
condition|?
literal|"%"
else|:
name|join
return|;
block|}
specifier|private
name|String
name|prepareValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|==
literal|null
condition|?
literal|null
else|:
name|value
operator|.
name|trim
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|DbPath
name|dbPath
init|=
operator|(
name|DbPath
operator|)
name|o
decl_stmt|;
return|return
name|path
operator|.
name|equals
argument_list|(
name|dbPath
operator|.
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|path
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|path
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|DbPath
name|o
parameter_list|)
block|{
return|return
name|path
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|path
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isCover
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|)
block|{
return|return
name|isCover
argument_list|(
name|catalog
argument_list|,
name|schema
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isCover
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|catalog
operator|==
literal|null
operator|&&
name|catalog
operator|==
literal|null
condition|)
block|{
return|return
name|schemaCover
argument_list|(
name|schema
argument_list|,
name|table
argument_list|)
return|;
block|}
if|else if
condition|(
name|this
operator|.
name|catalog
operator|==
literal|null
condition|)
block|{
return|return
name|schemaCover
argument_list|(
name|schema
argument_list|,
name|table
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|catalog
operator|.
name|equalsIgnoreCase
argument_list|(
name|catalog
argument_list|)
operator|&&
name|schemaCover
argument_list|(
name|schema
argument_list|,
name|table
argument_list|)
return|;
block|}
block|}
specifier|private
name|boolean
name|schemaCover
parameter_list|(
name|String
name|schema
parameter_list|,
name|String
name|table
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|schema
operator|==
literal|null
operator|&&
name|schema
operator|==
literal|null
condition|)
block|{
return|return
name|tableCover
argument_list|(
name|table
argument_list|)
return|;
block|}
if|else if
condition|(
name|this
operator|.
name|schema
operator|==
literal|null
condition|)
block|{
return|return
name|tableCover
argument_list|(
name|table
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|schema
operator|.
name|equalsIgnoreCase
argument_list|(
name|schema
argument_list|)
operator|&&
name|tableCover
argument_list|(
name|table
argument_list|)
return|;
block|}
block|}
specifier|private
name|boolean
name|tableCover
parameter_list|(
name|String
name|table
parameter_list|)
block|{
return|return
name|this
operator|.
name|tablePattern
operator|==
literal|null
operator|||
name|table
operator|!=
literal|null
operator|&&
name|Pattern
operator|.
name|compile
argument_list|(
name|this
operator|.
name|tablePattern
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|table
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isCover
parameter_list|(
name|DbPath
name|dbPath
parameter_list|)
block|{
if|if
condition|(
name|dbPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"dbPath can't be null"
argument_list|)
throw|;
block|}
return|return
name|isCover
argument_list|(
name|dbPath
operator|.
name|catalog
argument_list|,
name|dbPath
operator|.
name|schema
argument_list|,
name|dbPath
operator|.
name|tablePattern
argument_list|)
return|;
block|}
specifier|public
name|DbPath
name|merge
parameter_list|(
name|DbPath
name|path
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|isCover
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
if|else if
condition|(
name|path
operator|.
name|isCover
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
name|path
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|DbPath
name|build
parameter_list|(
name|DbEntity
name|entity
parameter_list|)
block|{
return|return
operator|new
name|DbPath
argument_list|(
name|entity
operator|.
name|getCatalog
argument_list|()
argument_list|,
name|entity
operator|.
name|getSchema
argument_list|()
argument_list|,
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

