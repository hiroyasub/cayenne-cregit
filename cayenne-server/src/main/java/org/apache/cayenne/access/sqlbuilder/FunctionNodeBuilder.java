begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|FunctionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|Node
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|FunctionNodeBuilder
implements|implements
name|ExpressionTrait
block|{
specifier|private
specifier|final
name|String
name|functionName
decl_stmt|;
specifier|private
specifier|final
name|NodeBuilder
index|[]
name|args
decl_stmt|;
specifier|private
name|String
name|alias
decl_stmt|;
name|FunctionNodeBuilder
parameter_list|(
name|String
name|functionName
parameter_list|,
name|NodeBuilder
modifier|...
name|args
parameter_list|)
block|{
name|this
operator|.
name|functionName
operator|=
name|functionName
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
specifier|public
name|FunctionNodeBuilder
name|as
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|build
parameter_list|()
block|{
name|Node
name|functionNode
init|=
operator|new
name|FunctionNode
argument_list|(
name|functionName
argument_list|,
name|alias
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeBuilder
name|arg
range|:
name|args
control|)
block|{
name|functionNode
operator|.
name|addChild
argument_list|(
name|arg
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|functionNode
return|;
block|}
block|}
end_class

end_unit

