begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistenceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|CompoundDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|log
operator|.
name|JdbcEventLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|BatchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tx
operator|.
name|BaseTransaction
import|;
end_import

begin_comment
comment|/**  * A stateful commit handler used by DataContext to perform commit operation.  * DataContextCommitAction resolves primary key dependencies, referential integrity  * dependencies (including multi-reflexive entities), generates primary keys, creates  * batches for massive data modifications, assigns operations to data nodes.  *   * @since 1.2  */
end_comment

begin_class
class|class
name|DataDomainFlushAction
block|{
specifier|private
specifier|final
name|DataDomain
name|domain
decl_stmt|;
specifier|private
name|DataContext
name|context
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Object
argument_list|,
name|ObjectDiff
argument_list|>
name|changesByObjectId
decl_stmt|;
specifier|private
name|CompoundDiff
name|resultDiff
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|ObjectId
argument_list|>
name|resultDeletedIds
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ObjectId
argument_list|,
name|DataRow
argument_list|>
name|resultModifiedSnapshots
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|ObjectId
argument_list|>
name|resultIndirectlyModifiedIds
decl_stmt|;
specifier|private
name|DataDomainInsertBucket
name|insertBucket
decl_stmt|;
specifier|private
name|DataDomainUpdateBucket
name|updateBucket
decl_stmt|;
specifier|private
name|DataDomainDeleteBucket
name|deleteBucket
decl_stmt|;
specifier|private
name|DataDomainFlattenedBucket
name|flattenedBucket
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Query
argument_list|>
name|queries
decl_stmt|;
specifier|private
name|JdbcEventLogger
name|logger
decl_stmt|;
name|DataDomainFlushAction
parameter_list|(
name|DataDomain
name|domain
parameter_list|)
block|{
name|this
operator|.
name|domain
operator|=
name|domain
expr_stmt|;
block|}
name|DataDomain
name|getDomain
parameter_list|()
block|{
return|return
name|domain
return|;
block|}
name|DataContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
name|Collection
argument_list|<
name|ObjectId
argument_list|>
name|getResultDeletedIds
parameter_list|()
block|{
return|return
name|resultDeletedIds
return|;
block|}
name|CompoundDiff
name|getResultDiff
parameter_list|()
block|{
return|return
name|resultDiff
return|;
block|}
name|Collection
argument_list|<
name|ObjectId
argument_list|>
name|getResultIndirectlyModifiedIds
parameter_list|()
block|{
return|return
name|resultIndirectlyModifiedIds
return|;
block|}
name|Map
argument_list|<
name|ObjectId
argument_list|,
name|DataRow
argument_list|>
name|getResultModifiedSnapshots
parameter_list|()
block|{
return|return
name|resultModifiedSnapshots
return|;
block|}
specifier|public
name|void
name|setJdbcEventLogger
parameter_list|(
name|JdbcEventLogger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
specifier|public
name|JdbcEventLogger
name|getJdbcEventLogger
parameter_list|()
block|{
return|return
name|this
operator|.
name|logger
return|;
block|}
name|ObjectDiff
name|objectDiff
parameter_list|(
name|Object
name|objectId
parameter_list|)
block|{
return|return
name|changesByObjectId
operator|.
name|get
argument_list|(
name|objectId
argument_list|)
return|;
block|}
name|void
name|addFlattenedInsert
parameter_list|(
name|DbEntity
name|flattenedEntity
parameter_list|,
name|FlattenedArcKey
name|flattenedInsertInfo
parameter_list|)
block|{
name|flattenedBucket
operator|.
name|addFlattenedInsert
argument_list|(
name|flattenedEntity
argument_list|,
name|flattenedInsertInfo
argument_list|)
expr_stmt|;
block|}
name|void
name|addFlattenedDelete
parameter_list|(
name|DbEntity
name|flattenedEntity
parameter_list|,
name|FlattenedArcKey
name|flattenedDeleteInfo
parameter_list|)
block|{
name|flattenedBucket
operator|.
name|addFlattenedDelete
argument_list|(
name|flattenedEntity
argument_list|,
name|flattenedDeleteInfo
argument_list|)
expr_stmt|;
block|}
name|GraphDiff
name|flush
parameter_list|(
name|DataContext
name|context
parameter_list|,
name|GraphDiff
name|changes
parameter_list|)
block|{
if|if
condition|(
name|changes
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|CompoundDiff
argument_list|()
return|;
block|}
comment|// TODO: Andrus, 3/13/2006 - support categorizing an arbitrary diff
if|if
condition|(
operator|!
operator|(
name|changes
operator|instanceof
name|ObjectStoreGraphDiff
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected 'ObjectStoreGraphDiff', got: "
operator|+
name|changes
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
comment|// ObjectStoreGraphDiff contains changes already categorized by objectId...
name|this
operator|.
name|changesByObjectId
operator|=
operator|(
operator|(
name|ObjectStoreGraphDiff
operator|)
name|changes
operator|)
operator|.
name|getChangesByObjectId
argument_list|()
expr_stmt|;
name|this
operator|.
name|insertBucket
operator|=
operator|new
name|DataDomainInsertBucket
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|deleteBucket
operator|=
operator|new
name|DataDomainDeleteBucket
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|updateBucket
operator|=
operator|new
name|DataDomainUpdateBucket
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|flattenedBucket
operator|=
operator|new
name|DataDomainFlattenedBucket
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|queries
operator|=
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|resultIndirectlyModifiedIds
operator|=
operator|new
name|HashSet
argument_list|<
name|ObjectId
argument_list|>
argument_list|()
expr_stmt|;
name|preprocess
argument_list|(
name|context
argument_list|,
name|changes
argument_list|)
expr_stmt|;
if|if
condition|(
name|queries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|CompoundDiff
argument_list|()
return|;
block|}
name|this
operator|.
name|resultDiff
operator|=
operator|new
name|CompoundDiff
argument_list|()
expr_stmt|;
name|this
operator|.
name|resultDeletedIds
operator|=
operator|new
name|ArrayList
argument_list|<
name|ObjectId
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|resultModifiedSnapshots
operator|=
operator|new
name|HashMap
argument_list|<
name|ObjectId
argument_list|,
name|DataRow
argument_list|>
argument_list|()
expr_stmt|;
name|runQueries
argument_list|()
expr_stmt|;
name|postprocess
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|resultDiff
return|;
block|}
specifier|private
name|void
name|preprocess
parameter_list|(
name|DataContext
name|context
parameter_list|,
name|GraphDiff
name|changes
parameter_list|)
block|{
comment|// categorize dirty objects by state
name|ObjectStore
name|objectStore
init|=
name|context
operator|.
name|getObjectStore
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|changesByObjectId
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ObjectId
name|id
init|=
operator|(
name|ObjectId
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Persistent
name|object
init|=
operator|(
name|Persistent
operator|)
name|objectStore
operator|.
name|getNode
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|ClassDescriptor
name|descriptor
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getClassDescriptor
argument_list|(
name|id
operator|.
name|getEntityName
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|object
operator|.
name|getPersistenceState
argument_list|()
condition|)
block|{
case|case
name|PersistenceState
operator|.
name|NEW
case|:
name|insertBucket
operator|.
name|addDirtyObject
argument_list|(
name|object
argument_list|,
name|descriptor
argument_list|)
expr_stmt|;
break|break;
case|case
name|PersistenceState
operator|.
name|MODIFIED
case|:
name|updateBucket
operator|.
name|addDirtyObject
argument_list|(
name|object
argument_list|,
name|descriptor
argument_list|)
expr_stmt|;
break|break;
case|case
name|PersistenceState
operator|.
name|DELETED
case|:
name|deleteBucket
operator|.
name|addDirtyObject
argument_list|(
name|object
argument_list|,
name|descriptor
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
operator|new
name|DataDomainIndirectDiffBuilder
argument_list|(
name|this
argument_list|)
operator|.
name|processIndirectChanges
argument_list|(
name|changes
argument_list|)
expr_stmt|;
name|insertBucket
operator|.
name|appendQueries
argument_list|(
name|queries
argument_list|)
expr_stmt|;
name|flattenedBucket
operator|.
name|appendInserts
argument_list|(
name|queries
argument_list|)
expr_stmt|;
name|updateBucket
operator|.
name|appendQueries
argument_list|(
name|queries
argument_list|)
expr_stmt|;
name|flattenedBucket
operator|.
name|appendDeletes
argument_list|(
name|queries
argument_list|)
expr_stmt|;
name|deleteBucket
operator|.
name|appendQueries
argument_list|(
name|queries
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runQueries
parameter_list|()
block|{
name|DataDomainFlushObserver
name|observer
init|=
operator|new
name|DataDomainFlushObserver
argument_list|(
name|domain
operator|.
name|getJdbcEventLogger
argument_list|()
argument_list|)
decl_stmt|;
comment|// split query list by spanned nodes and run each single node range individually.
comment|// Since connections are reused per node within an open transaction, there should
comment|// not be much overhead in accessing the same node multiple times (may happen due
comment|// to imperfect sorting)
try|try
block|{
name|DataNode
name|lastNode
init|=
literal|null
decl_stmt|;
name|DbEntity
name|lastEntity
init|=
literal|null
decl_stmt|;
name|int
name|rangeStart
init|=
literal|0
decl_stmt|;
name|int
name|len
init|=
name|queries
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|BatchQuery
name|query
init|=
operator|(
name|BatchQuery
operator|)
name|queries
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|getDbEntity
argument_list|()
operator|!=
name|lastEntity
condition|)
block|{
name|lastEntity
operator|=
name|query
operator|.
name|getDbEntity
argument_list|()
expr_stmt|;
name|DataNode
name|node
init|=
name|domain
operator|.
name|lookupDataNode
argument_list|(
name|lastEntity
operator|.
name|getDataMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
name|lastNode
condition|)
block|{
if|if
condition|(
name|i
operator|-
name|rangeStart
operator|>
literal|0
condition|)
block|{
name|lastNode
operator|.
name|performQueries
argument_list|(
name|queries
operator|.
name|subList
argument_list|(
name|rangeStart
argument_list|,
name|i
argument_list|)
argument_list|,
name|observer
argument_list|)
expr_stmt|;
block|}
name|rangeStart
operator|=
name|i
expr_stmt|;
name|lastNode
operator|=
name|node
expr_stmt|;
block|}
block|}
block|}
comment|// process last segment of the query list...
name|lastNode
operator|.
name|performQueries
argument_list|(
name|queries
operator|.
name|subList
argument_list|(
name|rangeStart
argument_list|,
name|len
argument_list|)
argument_list|,
name|observer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|BaseTransaction
operator|.
name|getThreadTransaction
argument_list|()
operator|.
name|setRollbackOnly
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Transaction was rolledback."
argument_list|,
name|th
argument_list|)
throw|;
block|}
block|}
comment|/*      * Sends notification of changes to the DataRowStore, returns GraphDiff with replaced      * ObjectIds.      */
specifier|private
name|void
name|postprocess
parameter_list|(
name|DataContext
name|context
parameter_list|)
block|{
name|deleteBucket
operator|.
name|postprocess
argument_list|()
expr_stmt|;
name|updateBucket
operator|.
name|postprocess
argument_list|()
expr_stmt|;
name|insertBucket
operator|.
name|postprocess
argument_list|()
expr_stmt|;
comment|// notify cache...
if|if
condition|(
operator|!
name|resultDeletedIds
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|resultModifiedSnapshots
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|resultIndirectlyModifiedIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|processSnapshotChanges
argument_list|(
name|context
operator|.
name|getObjectStore
argument_list|()
argument_list|,
name|resultModifiedSnapshots
argument_list|,
name|resultDeletedIds
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
name|resultIndirectlyModifiedIds
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getObjectStore
argument_list|()
operator|.
name|postprocessAfterCommit
argument_list|(
name|resultDiff
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

