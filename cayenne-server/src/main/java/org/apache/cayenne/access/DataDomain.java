begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannelQueryFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannelQueryFilterChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannelSyncFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannelSyncFilterChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|DataDomainFlushAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|DataDomainFlushActionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|cache
operator|.
name|QueryCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|AdhocObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|BeforeScopeEnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|event
operator|.
name|EventManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|CompoundDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|log
operator|.
name|JdbcEventLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntitySorter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tx
operator|.
name|BaseTransaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tx
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tx
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|ToStringBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_comment
comment|/**  * DataDomain performs query routing functions in Cayenne. DataDomain creates  * single data source abstraction hiding multiple physical data sources from the  * user. When a child DataContext sends a query to the DataDomain, it is  * transparently routed to an appropriate DataNode.  */
end_comment

begin_class
specifier|public
class|class
name|DataDomain
implements|implements
name|QueryEngine
implements|,
name|DataChannel
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SHARED_CACHE_ENABLED_PROPERTY
init|=
literal|"cayenne.DataDomain.sharedCache"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|SHARED_CACHE_ENABLED_DEFAULT
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|VALIDATING_OBJECTS_ON_COMMIT_PROPERTY
init|=
literal|"cayenne.DataDomain.validatingObjectsOnCommit"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|VALIDATING_OBJECTS_ON_COMMIT_DEFAULT
init|=
literal|true
decl_stmt|;
comment|/** 	 * @since 3.1 	 */
annotation|@
name|Inject
specifier|protected
name|JdbcEventLogger
name|jdbcEventLogger
decl_stmt|;
comment|/** 	 * @since 4.0 	 */
annotation|@
name|Inject
specifier|protected
name|TransactionManager
name|transactionManager
decl_stmt|;
comment|/**      * @since 4.0      */
specifier|protected
name|DataRowStoreFactory
name|dataRowStoreFactory
decl_stmt|;
comment|/** 	 * @since 3.1 	 */
specifier|protected
name|int
name|maxIdQualifierSize
decl_stmt|;
comment|/** 	 * @since 4.1 	 */
specifier|protected
name|List
argument_list|<
name|DataChannelQueryFilter
argument_list|>
name|queryFilters
decl_stmt|;
comment|/** 	 * @since 4.1 	 */
specifier|protected
name|List
argument_list|<
name|DataChannelSyncFilter
argument_list|>
name|syncFilters
decl_stmt|;
comment|/** 	 * @since 4.2 	 */
annotation|@
name|Inject
specifier|protected
name|DataDomainFlushActionFactory
name|flushActionFactory
decl_stmt|;
comment|/** 	 * @since 4.2 	 */
annotation|@
name|Inject
specifier|protected
name|AdhocObjectFactory
name|objectFactory
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|DataNode
argument_list|>
name|nodes
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|DataNode
argument_list|>
name|nodesByDataMapName
decl_stmt|;
specifier|protected
name|DataNode
name|defaultNode
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
decl_stmt|;
specifier|protected
name|EntityResolver
name|entityResolver
decl_stmt|;
specifier|protected
name|DataRowStore
name|sharedSnapshotCache
decl_stmt|;
specifier|protected
name|String
name|name
decl_stmt|;
specifier|protected
name|QueryCache
name|queryCache
decl_stmt|;
comment|// these are initialized from properties...
specifier|protected
name|boolean
name|sharedCacheEnabled
decl_stmt|;
specifier|protected
name|boolean
name|validatingObjectsOnCommit
decl_stmt|;
comment|/** 	 * @since 1.2 	 */
specifier|protected
name|EventManager
name|eventManager
decl_stmt|;
comment|/** 	 * @since 1.2 	 */
specifier|protected
name|EntitySorter
name|entitySorter
decl_stmt|;
specifier|protected
name|boolean
name|stopped
decl_stmt|;
comment|/** 	 * Creates a DataDomain and assigns it a name. 	 */
specifier|public
name|DataDomain
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|init
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|resetProperties
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Creates new DataDomain. 	 * 	 * @param name 	 *            DataDomain name. Domain can be located using its name in the 	 *            Configuration object. 	 * @param properties 	 *            A Map containing domain configuration properties. 	 * @deprecated since 4.0 unused 	 */
annotation|@
name|Deprecated
specifier|public
name|DataDomain
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|init
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|initWithProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|queryFilters
operator|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|syncFilters
operator|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodesByDataMapName
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodes
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
comment|// properties are read-only, so no need for concurrent map, or any
comment|// specific map
comment|// for that matter
name|this
operator|.
name|properties
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Checks that Domain is not stopped. Throws DomainStoppedException 	 * otherwise. 	 * 	 * @since 3.0 	 */
specifier|protected
name|void
name|checkStopped
parameter_list|()
throws|throws
name|DomainStoppedException
block|{
if|if
condition|(
name|stopped
condition|)
block|{
throw|throw
operator|new
name|DomainStoppedException
argument_list|(
literal|"Domain "
operator|+
name|name
operator|+
literal|" was shutdown and can no longer be used to access the database"
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * @since 3.1 	 */
specifier|public
name|EntitySorter
name|getEntitySorter
parameter_list|()
block|{
return|return
name|entitySorter
return|;
block|}
comment|/** 	 * @since 3.1 	 */
specifier|public
name|void
name|setEntitySorter
parameter_list|(
name|EntitySorter
name|entitySorter
parameter_list|)
block|{
name|this
operator|.
name|entitySorter
operator|=
name|entitySorter
expr_stmt|;
block|}
comment|/** 	 * @since 1.1 	 */
specifier|protected
name|void
name|resetProperties
parameter_list|()
block|{
name|properties
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
name|sharedCacheEnabled
operator|=
name|SHARED_CACHE_ENABLED_DEFAULT
expr_stmt|;
name|validatingObjectsOnCommit
operator|=
name|VALIDATING_OBJECTS_ON_COMMIT_DEFAULT
expr_stmt|;
block|}
comment|/** 	 * Reinitializes domain state with a new set of properties. 	 * 	 * @since 1.1 	 * @deprecated since 4.0 properties are processed by the DI provider. 	 */
annotation|@
name|Deprecated
specifier|public
name|void
name|initWithProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
comment|// clone properties to ensure that it is read-only internally
name|properties
operator|=
name|properties
operator|!=
literal|null
condition|?
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|properties
argument_list|)
else|:
name|Collections
operator|.
expr|<
name|String
operator|,
name|String
operator|>
name|emptyMap
argument_list|()
expr_stmt|;
name|String
name|sharedCacheEnabled
init|=
name|properties
operator|.
name|get
argument_list|(
name|SHARED_CACHE_ENABLED_PROPERTY
argument_list|)
decl_stmt|;
name|String
name|validatingObjectsOnCommit
init|=
name|properties
operator|.
name|get
argument_list|(
name|VALIDATING_OBJECTS_ON_COMMIT_PROPERTY
argument_list|)
decl_stmt|;
comment|// init ivars from properties
name|this
operator|.
name|sharedCacheEnabled
operator|=
operator|(
name|sharedCacheEnabled
operator|!=
literal|null
operator|)
condition|?
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|sharedCacheEnabled
argument_list|)
else|:
name|SHARED_CACHE_ENABLED_DEFAULT
expr_stmt|;
name|this
operator|.
name|validatingObjectsOnCommit
operator|=
operator|(
name|validatingObjectsOnCommit
operator|!=
literal|null
operator|)
condition|?
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|validatingObjectsOnCommit
argument_list|)
else|:
name|VALIDATING_OBJECTS_ON_COMMIT_DEFAULT
expr_stmt|;
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
comment|/** 	 * Returns EventManager used by this DataDomain. 	 * 	 * @since 1.2 	 */
specifier|public
name|EventManager
name|getEventManager
parameter_list|()
block|{
return|return
name|eventManager
return|;
block|}
comment|/** 	 * Sets EventManager used by this DataDomain. 	 * 	 * @since 1.2 	 */
specifier|public
name|void
name|setEventManager
parameter_list|(
name|EventManager
name|eventManager
parameter_list|)
block|{
name|this
operator|.
name|eventManager
operator|=
name|eventManager
expr_stmt|;
if|if
condition|(
name|sharedSnapshotCache
operator|!=
literal|null
condition|)
block|{
name|sharedSnapshotCache
operator|.
name|setEventManager
argument_list|(
name|eventManager
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Returns "name" property value. 	 */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/** 	 * Sets "name" property to a new value. 	 */
specifier|public
specifier|synchronized
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
if|if
condition|(
name|sharedSnapshotCache
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|sharedSnapshotCache
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Returns<code>true</code> if DataContexts produced by this DataDomain are 	 * using shared DataRowStore. Returns<code>false</code> if each DataContext 	 * would work with its own DataRowStore. Note that this setting can be 	 * overwritten per DataContext. 	 */
specifier|public
name|boolean
name|isSharedCacheEnabled
parameter_list|()
block|{
return|return
name|sharedCacheEnabled
return|;
block|}
specifier|public
name|void
name|setSharedCacheEnabled
parameter_list|(
name|boolean
name|sharedCacheEnabled
parameter_list|)
block|{
name|this
operator|.
name|sharedCacheEnabled
operator|=
name|sharedCacheEnabled
expr_stmt|;
block|}
comment|/** 	 * Returns whether child DataContexts default behavior is to perform object 	 * validation before commit is executed. 	 * 	 * @since 1.1 	 */
specifier|public
name|boolean
name|isValidatingObjectsOnCommit
parameter_list|()
block|{
return|return
name|validatingObjectsOnCommit
return|;
block|}
comment|/** 	 * Sets the property defining whether child DataContexts should perform 	 * object validation before commit is executed. 	 * 	 * @since 1.1 	 */
specifier|public
name|void
name|setValidatingObjectsOnCommit
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|this
operator|.
name|validatingObjectsOnCommit
operator|=
name|flag
expr_stmt|;
block|}
comment|/** 	 * @since 1.1 	 * @return a Map of properties for this DataDomain. 	 */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
comment|/** 	 * Returns snapshots cache for this DataDomain, lazily initializing it on 	 * the first call if 'sharedCacheEnabled' flag is true. 	 */
specifier|public
name|DataRowStore
name|getSharedSnapshotCache
parameter_list|()
block|{
if|if
condition|(
name|sharedSnapshotCache
operator|==
literal|null
operator|&&
name|sharedCacheEnabled
condition|)
block|{
name|this
operator|.
name|sharedSnapshotCache
operator|=
name|nonNullSharedSnapshotCache
argument_list|()
expr_stmt|;
block|}
return|return
name|sharedSnapshotCache
return|;
block|}
comment|/** 	 * Returns a guaranteed non-null shared snapshot cache regardless of the 	 * 'sharedCacheEnabled' flag setting. 	 */
specifier|synchronized
name|DataRowStore
name|nonNullSharedSnapshotCache
parameter_list|()
block|{
if|if
condition|(
name|sharedSnapshotCache
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|sharedSnapshotCache
operator|=
name|dataRowStoreFactory
operator|.
name|createDataRowStore
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|sharedSnapshotCache
return|;
block|}
comment|/** 	 * Shuts down the previous cache instance, sets cache to the new 	 * DataSowStore instance and updates two properties of the new DataSowStore: 	 * name and eventManager. 	 */
specifier|public
specifier|synchronized
name|void
name|setSharedSnapshotCache
parameter_list|(
name|DataRowStore
name|snapshotCache
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|sharedSnapshotCache
operator|!=
name|snapshotCache
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|sharedSnapshotCache
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|sharedSnapshotCache
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|sharedSnapshotCache
operator|=
name|snapshotCache
expr_stmt|;
if|if
condition|(
name|snapshotCache
operator|!=
literal|null
condition|)
block|{
name|snapshotCache
operator|.
name|setEventManager
argument_list|(
name|getEventManager
argument_list|()
argument_list|)
expr_stmt|;
name|snapshotCache
operator|.
name|setName
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|addDataMap
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
name|getEntityResolver
argument_list|()
operator|.
name|addDataMap
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
name|refreshEntitySorter
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * @since 3.1 	 */
specifier|public
name|DataMap
name|getDataMap
parameter_list|(
name|String
name|mapName
parameter_list|)
block|{
return|return
name|getEntityResolver
argument_list|()
operator|.
name|getDataMap
argument_list|(
name|mapName
argument_list|)
return|;
block|}
comment|/** 	 * Removes named DataMap from this DataDomain and any underlying DataNodes 	 * that include it. 	 * 	 * @since 3.1 	 */
specifier|public
name|void
name|removeDataMap
parameter_list|(
name|String
name|mapName
parameter_list|)
block|{
name|DataMap
name|map
init|=
name|getDataMap
argument_list|(
name|mapName
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// remove from data nodes
for|for
control|(
name|DataNode
name|node
range|:
name|nodes
operator|.
name|values
argument_list|()
control|)
block|{
name|node
operator|.
name|removeDataMap
argument_list|(
name|mapName
argument_list|)
expr_stmt|;
block|}
name|nodesByDataMapName
operator|.
name|remove
argument_list|(
name|mapName
argument_list|)
expr_stmt|;
comment|// remove from EntityResolver
name|getEntityResolver
argument_list|()
operator|.
name|removeDataMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|refreshEntitySorter
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Removes a DataNode from DataDomain. Any maps previously associated with 	 * this node within domain will still be kept around, however they wan't be 	 * mapped to any node. 	 */
specifier|public
name|void
name|removeDataNode
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
name|DataNode
name|removed
init|=
name|nodes
operator|.
name|remove
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|removed
operator|!=
literal|null
condition|)
block|{
name|removed
operator|.
name|setEntityResolver
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|nodesByDataMapName
operator|.
name|values
argument_list|()
operator|.
name|removeIf
argument_list|(
name|dataNode
lambda|->
name|dataNode
operator|==
name|removed
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Returns a collection of registered DataMaps. 	 */
specifier|public
name|Collection
argument_list|<
name|DataMap
argument_list|>
name|getDataMaps
parameter_list|()
block|{
return|return
name|getEntityResolver
argument_list|()
operator|.
name|getDataMaps
argument_list|()
return|;
block|}
comment|/** 	 * Returns an unmodifiable collection of DataNodes associated with this 	 * domain. 	 */
specifier|public
name|Collection
argument_list|<
name|DataNode
argument_list|>
name|getDataNodes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|nodes
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * Adds new DataNode. 	 */
specifier|public
name|void
name|addNode
parameter_list|(
name|DataNode
name|node
parameter_list|)
block|{
comment|// add node to name->node map
name|nodes
operator|.
name|put
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|node
operator|.
name|setEntityResolver
argument_list|(
name|getEntityResolver
argument_list|()
argument_list|)
expr_stmt|;
comment|// add node to "ent name->node" map
for|for
control|(
name|DataMap
name|map
range|:
name|node
operator|.
name|getDataMaps
argument_list|()
control|)
block|{
name|addDataMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|nodesByDataMapName
operator|.
name|put
argument_list|(
name|map
operator|.
name|getName
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Returns registered DataNode whose name matches<code>name</code> 	 * parameter. 	 * 	 * @since 3.1 	 */
specifier|public
name|DataNode
name|getDataNode
parameter_list|(
name|String
name|nodeName
parameter_list|)
block|{
return|return
name|nodes
operator|.
name|get
argument_list|(
name|nodeName
argument_list|)
return|;
block|}
comment|/** 	 * Returns a DataNode that should handle queries for all entities in a 	 * DataMap. 	 * 	 * @since 1.1 	 */
specifier|public
name|DataNode
name|lookupDataNode
parameter_list|(
name|DataMap
name|map
parameter_list|)
block|{
name|DataNode
name|node
init|=
name|nodesByDataMapName
operator|.
name|get
argument_list|(
name|map
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
comment|// see if one of the node states has changed, and the map is now
comment|// linked...
for|for
control|(
name|DataNode
name|n
range|:
name|getDataNodes
argument_list|()
control|)
block|{
for|for
control|(
name|DataMap
name|m
range|:
name|n
operator|.
name|getDataMaps
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|==
name|map
condition|)
block|{
name|nodesByDataMapName
operator|.
name|put
argument_list|(
name|map
operator|.
name|getName
argument_list|()
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|node
operator|=
name|n
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|defaultNode
operator|!=
literal|null
condition|)
block|{
name|nodesByDataMapName
operator|.
name|put
argument_list|(
name|map
operator|.
name|getName
argument_list|()
argument_list|,
name|defaultNode
argument_list|)
expr_stmt|;
name|node
operator|=
name|defaultNode
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"No DataNode configured for DataMap '%s'"
operator|+
literal|" and no default DataNode set"
argument_list|,
name|map
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|node
return|;
block|}
comment|/** 	 * Sets EntityResolver. If not set explicitly, DataDomain creates a default 	 * EntityResolver internally on demand. 	 * 	 * @since 1.1 	 */
specifier|public
name|void
name|setEntityResolver
parameter_list|(
name|EntityResolver
name|entityResolver
parameter_list|)
block|{
name|this
operator|.
name|entityResolver
operator|=
name|entityResolver
expr_stmt|;
block|}
comment|// creates default entity resolver if there is none set yet
specifier|private
specifier|synchronized
name|void
name|createEntityResolver
parameter_list|()
block|{
if|if
condition|(
name|entityResolver
operator|==
literal|null
condition|)
block|{
comment|// entity resolver will be self-indexing as we add all our maps
comment|// to it as they are added to the DataDomain
name|entityResolver
operator|=
operator|new
name|EntityResolver
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * Shutdowns all owned data nodes and marks this domain as stopped. 	 */
annotation|@
name|BeforeScopeEnd
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
operator|!
name|stopped
condition|)
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|sharedSnapshotCache
operator|!=
literal|null
condition|)
block|{
name|sharedSnapshotCache
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Routes queries to appropriate DataNodes for execution. 	 */
specifier|public
name|void
name|performQueries
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|?
extends|extends
name|Query
argument_list|>
name|queries
parameter_list|,
specifier|final
name|OperationObserver
name|callback
parameter_list|)
block|{
name|transactionManager
operator|.
name|performInTransaction
argument_list|(
parameter_list|()
lambda|->
block|{
operator|new
name|DataDomainLegacyQueryAction
argument_list|(
name|DataDomain
operator|.
name|this
argument_list|,
operator|new
name|QueryChain
argument_list|(
name|queries
argument_list|)
argument_list|,
name|callback
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|// ****** DataChannel methods:
comment|/** 	 * Runs query returning generic QueryResponse. 	 * 	 * @since 1.2 	 */
annotation|@
name|Override
specifier|public
name|QueryResponse
name|onQuery
parameter_list|(
specifier|final
name|ObjectContext
name|originatingContext
parameter_list|,
specifier|final
name|Query
name|query
parameter_list|)
block|{
name|checkStopped
argument_list|()
expr_stmt|;
return|return
operator|new
name|DataDomainQueryFilterChain
argument_list|()
operator|.
name|onQuery
argument_list|(
name|originatingContext
argument_list|,
name|query
argument_list|)
return|;
block|}
name|QueryResponse
name|onQueryNoFilters
parameter_list|(
specifier|final
name|ObjectContext
name|originatingContext
parameter_list|,
specifier|final
name|Query
name|query
parameter_list|)
block|{
comment|// transaction note:
comment|// we don't wrap this code in transaction to reduce transaction scope to
comment|// just the DB operation for better performance ... query action will
comment|// start a transaction itself when and if needed
return|return
operator|new
name|DataDomainQueryAction
argument_list|(
name|originatingContext
argument_list|,
name|DataDomain
operator|.
name|this
argument_list|,
name|query
argument_list|)
operator|.
name|execute
argument_list|()
return|;
block|}
comment|/** 	 * Returns an EntityResolver that stores mapping information for this 	 * domain. 	 */
annotation|@
name|Override
specifier|public
name|EntityResolver
name|getEntityResolver
parameter_list|()
block|{
if|if
condition|(
name|entityResolver
operator|==
literal|null
condition|)
block|{
name|createEntityResolver
argument_list|()
expr_stmt|;
block|}
return|return
name|entityResolver
return|;
block|}
comment|/** 	 * Only handles commit-type synchronization, ignoring any other type. 	 * 	 * @since 1.2 	 */
annotation|@
name|Override
specifier|public
name|GraphDiff
name|onSync
parameter_list|(
specifier|final
name|ObjectContext
name|originatingContext
parameter_list|,
specifier|final
name|GraphDiff
name|changes
parameter_list|,
name|int
name|syncType
parameter_list|)
block|{
name|checkStopped
argument_list|()
expr_stmt|;
return|return
operator|new
name|DataDomainSyncFilterChain
argument_list|()
operator|.
name|onSync
argument_list|(
name|originatingContext
argument_list|,
name|changes
argument_list|,
name|syncType
argument_list|)
return|;
block|}
name|GraphDiff
name|onSyncNoFilters
parameter_list|(
specifier|final
name|ObjectContext
name|originatingContext
parameter_list|,
specifier|final
name|GraphDiff
name|changes
parameter_list|,
name|int
name|syncType
parameter_list|)
block|{
name|GraphDiff
name|result
decl_stmt|;
switch|switch
condition|(
name|syncType
condition|)
block|{
case|case
name|DataChannel
operator|.
name|ROLLBACK_CASCADE_SYNC
case|:
name|result
operator|=
name|onSyncRollback
argument_list|(
name|originatingContext
argument_list|)
expr_stmt|;
break|break;
comment|// "cascade" and "no_cascade" are the same from the DataDomain perspective
case|case
name|DataChannel
operator|.
name|FLUSH_NOCASCADE_SYNC
case|:
case|case
name|DataChannel
operator|.
name|FLUSH_CASCADE_SYNC
case|:
name|result
operator|=
name|onSyncFlush
argument_list|(
name|originatingContext
argument_list|,
name|changes
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Invalid synchronization type: %d"
argument_list|,
name|syncType
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
name|GraphDiff
name|onSyncRollback
parameter_list|(
name|ObjectContext
name|originatingContext
parameter_list|)
block|{
comment|// if there is a transaction in progress, roll it back
name|Transaction
name|transaction
init|=
name|BaseTransaction
operator|.
name|getThreadTransaction
argument_list|()
decl_stmt|;
if|if
condition|(
name|transaction
operator|!=
literal|null
condition|)
block|{
name|transaction
operator|.
name|setRollbackOnly
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|CompoundDiff
argument_list|()
return|;
block|}
name|GraphDiff
name|onSyncFlush
parameter_list|(
name|ObjectContext
name|originatingContext
parameter_list|,
name|GraphDiff
name|childChanges
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|originatingContext
operator|instanceof
name|DataContext
operator|)
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"No support for committing ObjectContexts that are not DataContexts yet. "
operator|+
literal|"Unsupported context: %s"
argument_list|,
name|originatingContext
argument_list|)
throw|;
block|}
name|DataDomainFlushAction
name|action
init|=
name|flushActionFactory
operator|.
name|createFlushAction
argument_list|(
name|this
argument_list|)
decl_stmt|;
return|return
name|action
operator|.
name|flush
argument_list|(
operator|(
name|DataContext
operator|)
name|originatingContext
argument_list|,
name|childChanges
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|ToStringBuilder
argument_list|(
name|this
argument_list|)
operator|.
name|append
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 * Returns shared {@link QueryCache} used by this DataDomain. 	 * 	 * @since 3.0 	 */
specifier|public
name|QueryCache
name|getQueryCache
parameter_list|()
block|{
return|return
name|queryCache
return|;
block|}
specifier|public
name|void
name|setQueryCache
parameter_list|(
name|QueryCache
name|queryCache
parameter_list|)
block|{
name|this
operator|.
name|queryCache
operator|=
name|queryCache
expr_stmt|;
block|}
comment|/** 	 * @since 4.0 	 */
specifier|public
name|DataRowStoreFactory
name|getDataRowStoreFactory
parameter_list|()
block|{
return|return
name|dataRowStoreFactory
return|;
block|}
comment|/** 	 * @since 4.0 	 */
specifier|public
name|void
name|setDataRowStoreFactory
parameter_list|(
name|DataRowStoreFactory
name|dataRowStoreFactory
parameter_list|)
block|{
name|this
operator|.
name|dataRowStoreFactory
operator|=
name|dataRowStoreFactory
expr_stmt|;
block|}
comment|/** 	 * @since 3.1 	 */
name|JdbcEventLogger
name|getJdbcEventLogger
parameter_list|()
block|{
return|return
name|jdbcEventLogger
return|;
block|}
name|void
name|refreshEntitySorter
parameter_list|()
block|{
if|if
condition|(
name|entitySorter
operator|!=
literal|null
condition|)
block|{
name|entitySorter
operator|.
name|setEntityResolver
argument_list|(
name|getEntityResolver
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Returns an unmodifiable list of query filters registered with this DataDomain. 	 *<p> 	 * Filter ordering note: filters are applied in reverse order of their 	 * occurrence in the filter list. I.e. the last filter in the list called 	 * first in the chain. 	 * 	 * @since 4.1 	 */
specifier|public
name|List
argument_list|<
name|DataChannelQueryFilter
argument_list|>
name|getQueryFilters
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|queryFilters
argument_list|)
return|;
block|}
comment|/** 	 * Returns an unmodifiable list of sync filters registered with this DataDomain. 	 *<p> 	 * Filter ordering note: filters are applied in reverse order of their 	 * occurrence in the filter list. I.e. the last filter in the list called 	 * first in the chain. 	 * 	 * @since 4.1 	 */
specifier|public
name|List
argument_list|<
name|DataChannelSyncFilter
argument_list|>
name|getSyncFilters
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|syncFilters
argument_list|)
return|;
block|}
comment|/** 	 * Adds a new query filter. 	 * Also registers passed filter as an event listener, if any of its methods have event annotations. 	 * 	 * @since 4.1 	 */
specifier|public
name|void
name|addQueryFilter
parameter_list|(
name|DataChannelQueryFilter
name|filter
parameter_list|)
block|{
comment|// skip double listener registration, if filter already in sync filters list
if|if
condition|(
operator|!
name|syncFilters
operator|.
name|contains
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|addListener
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
name|queryFilters
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Adds a new sync filter. 	 * Also registers passed filter as an event listener, if any of its methods have event annotations. 	 * 	 * @since 4.1 	 */
specifier|public
name|void
name|addSyncFilter
parameter_list|(
name|DataChannelSyncFilter
name|filter
parameter_list|)
block|{
comment|// skip double listener registration, if filter already in query filters list
if|if
condition|(
operator|!
name|queryFilters
operator|.
name|contains
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|addListener
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
name|syncFilters
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Removes a query filter from the filter chain. 	 * 	 * @since 4.1 	 */
specifier|public
name|void
name|removeQueryFilter
parameter_list|(
name|DataChannelQueryFilter
name|filter
parameter_list|)
block|{
name|queryFilters
operator|.
name|remove
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Removes a sync filter from the filter chain. 	 * 	 * @since 4.1 	 */
specifier|public
name|void
name|removeSyncFilter
parameter_list|(
name|DataChannelSyncFilter
name|filter
parameter_list|)
block|{
name|syncFilters
operator|.
name|remove
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Adds a listener, mapping its methods to events based on annotations. This 	 * is a shortcut for 	 * 'getEntityResolver().getCallbackRegistry().addListener(listener)'. 	 * 	 * @since 4.0 	 */
specifier|public
name|void
name|addListener
parameter_list|(
name|Object
name|listener
parameter_list|)
block|{
name|getEntityResolver
argument_list|()
operator|.
name|getCallbackRegistry
argument_list|()
operator|.
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|final
class|class
name|DataDomainQueryFilterChain
implements|implements
name|DataChannelQueryFilterChain
block|{
specifier|private
name|int
name|idx
decl_stmt|;
name|DataDomainQueryFilterChain
parameter_list|()
block|{
name|idx
operator|=
name|queryFilters
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|QueryResponse
name|onQuery
parameter_list|(
name|ObjectContext
name|originatingContext
parameter_list|,
name|Query
name|query
parameter_list|)
block|{
return|return
operator|--
name|idx
operator|>=
literal|0
condition|?
name|queryFilters
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|onQuery
argument_list|(
name|originatingContext
argument_list|,
name|query
argument_list|,
name|this
argument_list|)
else|:
name|onQueryNoFilters
argument_list|(
name|originatingContext
argument_list|,
name|query
argument_list|)
return|;
block|}
block|}
specifier|final
class|class
name|DataDomainSyncFilterChain
implements|implements
name|DataChannelSyncFilterChain
block|{
specifier|private
name|int
name|idx
decl_stmt|;
name|DataDomainSyncFilterChain
parameter_list|()
block|{
name|idx
operator|=
name|syncFilters
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|GraphDiff
name|onSync
parameter_list|(
name|ObjectContext
name|originatingContext
parameter_list|,
specifier|final
name|GraphDiff
name|changes
parameter_list|,
name|int
name|syncType
parameter_list|)
block|{
return|return
operator|--
name|idx
operator|>=
literal|0
condition|?
name|syncFilters
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|onSync
argument_list|(
name|originatingContext
argument_list|,
name|changes
argument_list|,
name|syncType
argument_list|,
name|this
argument_list|)
else|:
name|onSyncNoFilters
argument_list|(
name|originatingContext
argument_list|,
name|changes
argument_list|,
name|syncType
argument_list|)
return|;
block|}
block|}
comment|/** 	 * An optional DataNode that is used for DataMaps that are not linked to a 	 * DataNode explicitly. 	 * 	 * @since 3.1 	 */
specifier|public
name|DataNode
name|getDefaultNode
parameter_list|()
block|{
return|return
name|defaultNode
return|;
block|}
comment|/** 	 * @since 3.1 	 */
specifier|public
name|void
name|setDefaultNode
parameter_list|(
name|DataNode
name|defaultNode
parameter_list|)
block|{
name|this
operator|.
name|defaultNode
operator|=
name|defaultNode
expr_stmt|;
block|}
comment|/** 	 * Returns a maximum number of object IDs to match in a single query for 	 * queries that select objects based on collection of ObjectIds. This 	 * affects queries generated by Cayenne when processing paginated queries 	 * and DISJOINT_BY_ID prefetches and is intended to address database 	 * limitations on the size of SQL statements as well as to cap memory use in 	 * Cayenne when generating such queries. The default is 10000. It can be 	 * changed either by calling {@link #setMaxIdQualifierSize(int)} or changing 	 * the value for property 	 * {@link Constants#SERVER_MAX_ID_QUALIFIER_SIZE_PROPERTY}. 	 * 	 * @since 3.1 	 */
specifier|public
name|int
name|getMaxIdQualifierSize
parameter_list|()
block|{
return|return
name|maxIdQualifierSize
return|;
block|}
comment|/** 	 * @since 3.1 	 */
specifier|public
name|void
name|setMaxIdQualifierSize
parameter_list|(
name|int
name|maxIdQualifierSize
parameter_list|)
block|{
name|this
operator|.
name|maxIdQualifierSize
operator|=
name|maxIdQualifierSize
expr_stmt|;
block|}
name|TransactionManager
name|getTransactionManager
parameter_list|()
block|{
return|return
name|transactionManager
return|;
block|}
name|AdhocObjectFactory
name|getObjectFactory
parameter_list|()
block|{
return|return
name|objectFactory
return|;
block|}
block|}
end_class

end_unit

