begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|ColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|DbAttributeBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|FluentSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_comment
comment|/**  * Default translator of select queries ({@link SelectQuery} or {@link FluentSelect}).  *  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|DefaultSelectTranslator
implements|implements
name|SelectTranslator
block|{
specifier|private
specifier|static
specifier|final
name|TranslationStage
index|[]
name|TRANSLATION_STAGES
init|=
block|{
operator|new
name|ColumnExtractorStage
argument_list|()
block|,
operator|new
name|PrefetchNodeStage
argument_list|()
block|,
operator|new
name|OrderingStage
argument_list|()
block|,
operator|new
name|QualifierTranslationStage
argument_list|()
block|,
operator|new
name|HavingTranslationStage
argument_list|()
block|,
operator|new
name|GroupByStage
argument_list|()
block|,
operator|new
name|DistinctStage
argument_list|()
block|,
operator|new
name|LimitOffsetStage
argument_list|()
block|,
operator|new
name|ColumnDescriptorStage
argument_list|()
block|,
operator|new
name|TableTreeQualifierStage
argument_list|()
block|,
operator|new
name|TableTreeStage
argument_list|()
block|,
operator|new
name|SQLResultStage
argument_list|()
block|,
operator|new
name|SQLGenerationStage
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|final
name|TranslatorContext
name|context
decl_stmt|;
comment|/**      * Constructor for the subquery case      */
name|DefaultSelectTranslator
parameter_list|(
name|TranslatableQueryWrapper
name|query
parameter_list|,
name|TranslatorContext
name|parentContext
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|query
argument_list|,
literal|"Query is null"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|parentContext
argument_list|,
literal|"Parent context is null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
operator|new
name|TranslatorContext
argument_list|(
name|query
argument_list|,
name|parentContext
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|parentContext
operator|.
name|getResolver
argument_list|()
argument_list|,
name|parentContext
argument_list|)
expr_stmt|;
comment|// skip SQL translation stage for nested translators, it should be performed by root context only
name|this
operator|.
name|context
operator|.
name|setSkipSQLGeneration
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor for the root query case      */
name|DefaultSelectTranslator
parameter_list|(
name|TranslatableQueryWrapper
name|query
parameter_list|,
name|DbAdapter
name|adapter
parameter_list|,
name|EntityResolver
name|entityResolver
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|query
argument_list|,
literal|"Query is null"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|adapter
argument_list|,
literal|"DbAdapter is null"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entityResolver
argument_list|,
literal|"EntityResolver is null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
operator|new
name|TranslatorContext
argument_list|(
name|query
argument_list|,
name|adapter
argument_list|,
name|entityResolver
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * @deprecated since 4.2 as {@link SelectQuery} is deprecated.      */
annotation|@
name|Deprecated
specifier|public
name|DefaultSelectTranslator
parameter_list|(
name|SelectQuery
argument_list|<
name|?
argument_list|>
name|query
parameter_list|,
name|DbAdapter
name|adapter
parameter_list|,
name|EntityResolver
name|entityResolver
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|SelectQueryWrapper
argument_list|(
name|query
argument_list|)
argument_list|,
name|adapter
argument_list|,
name|entityResolver
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DefaultSelectTranslator
parameter_list|(
name|FluentSelect
argument_list|<
name|?
argument_list|>
name|query
parameter_list|,
name|DbAdapter
name|adapter
parameter_list|,
name|EntityResolver
name|entityResolver
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|FluentSelectWrapper
argument_list|(
name|query
argument_list|)
argument_list|,
name|adapter
argument_list|,
name|entityResolver
argument_list|)
expr_stmt|;
block|}
name|TranslatorContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
name|void
name|translate
parameter_list|()
block|{
for|for
control|(
name|TranslationStage
name|stage
range|:
name|TRANSLATION_STAGES
control|)
block|{
name|stage
operator|.
name|perform
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSql
parameter_list|()
block|{
name|translate
argument_list|()
expr_stmt|;
return|return
name|context
operator|.
name|getFinalSQL
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DbAttributeBinding
index|[]
name|getBindings
parameter_list|()
block|{
return|return
name|context
operator|.
name|getBindings
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|DbAttributeBinding
index|[
literal|0
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|ObjAttribute
argument_list|,
name|ColumnDescriptor
argument_list|>
name|getAttributeOverrides
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ColumnDescriptor
index|[]
name|getResultColumns
parameter_list|()
block|{
return|return
name|context
operator|.
name|getColumnDescriptors
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ColumnDescriptor
index|[
literal|0
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSuppressingDistinct
parameter_list|()
block|{
return|return
name|context
operator|.
name|isDistinctSuppression
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasJoins
parameter_list|()
block|{
return|return
name|context
operator|.
name|getTableCount
argument_list|()
operator|>
literal|1
return|;
block|}
block|}
end_class

end_unit

