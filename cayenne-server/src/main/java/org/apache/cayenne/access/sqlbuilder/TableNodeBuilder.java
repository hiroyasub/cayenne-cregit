begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|TableNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|TableNodeBuilder
implements|implements
name|NodeBuilder
block|{
specifier|private
specifier|final
name|String
name|tableName
decl_stmt|;
specifier|private
specifier|final
name|DbEntity
name|dbEntity
decl_stmt|;
specifier|private
name|String
name|alias
decl_stmt|;
name|TableNodeBuilder
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|dbEntity
operator|=
literal|null
expr_stmt|;
block|}
name|TableNodeBuilder
parameter_list|(
name|DbEntity
name|dbEntity
parameter_list|)
block|{
name|this
operator|.
name|dbEntity
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|dbEntity
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TableNodeBuilder
name|as
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ColumnNodeBuilder
name|column
parameter_list|(
name|String
name|column
parameter_list|)
block|{
return|return
operator|new
name|ColumnNodeBuilder
argument_list|(
name|tableName
argument_list|,
name|column
argument_list|)
return|;
block|}
specifier|public
name|ColumnNodeBuilder
name|column
parameter_list|(
name|DbAttribute
name|attribute
parameter_list|)
block|{
return|return
operator|new
name|ColumnNodeBuilder
argument_list|(
name|tableName
argument_list|,
name|attribute
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAlias
parameter_list|()
block|{
return|return
name|alias
return|;
block|}
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|build
parameter_list|()
block|{
if|if
condition|(
name|dbEntity
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|TableNode
argument_list|(
name|dbEntity
argument_list|,
name|alias
argument_list|)
return|;
block|}
return|return
operator|new
name|TableNode
argument_list|(
name|tableName
argument_list|,
name|alias
argument_list|)
return|;
block|}
block|}
end_class

end_unit

