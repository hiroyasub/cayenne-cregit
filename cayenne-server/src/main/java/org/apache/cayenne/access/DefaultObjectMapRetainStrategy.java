begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|RuntimeProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|map
operator|.
name|AbstractReferenceMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|map
operator|.
name|ReferenceMap
import|;
end_import

begin_comment
comment|/**  * Default implementation of {@link ObjectMapRetainStrategy}.  *   * @since 3.1  */
end_comment

begin_class
specifier|public
class|class
name|DefaultObjectMapRetainStrategy
implements|implements
name|ObjectMapRetainStrategy
block|{
specifier|private
specifier|static
specifier|final
name|String
name|WEAK_RETAIN_STRATEGY
init|=
literal|"weak"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SOFT_RETAIN_STRATEGY
init|=
literal|"soft"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HARD_RETAIN_STRATEGY
init|=
literal|"hard"
decl_stmt|;
specifier|protected
name|RuntimeProperties
name|runtimeProperties
decl_stmt|;
specifier|public
name|DefaultObjectMapRetainStrategy
parameter_list|(
annotation|@
name|Inject
name|RuntimeProperties
name|runtimeProperties
parameter_list|)
block|{
name|this
operator|.
name|runtimeProperties
operator|=
name|runtimeProperties
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Map
argument_list|<
name|Object
argument_list|,
name|Persistent
argument_list|>
name|createObjectMap
parameter_list|()
block|{
name|String
name|strategy
init|=
name|runtimeProperties
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|SERVER_OBJECT_RETAIN_STRATEGY_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|strategy
operator|==
literal|null
operator|||
name|WEAK_RETAIN_STRATEGY
operator|.
name|equals
argument_list|(
name|strategy
argument_list|)
condition|)
block|{
return|return
operator|new
name|ReferenceMap
argument_list|(
name|AbstractReferenceMap
operator|.
name|HARD
argument_list|,
name|AbstractReferenceMap
operator|.
name|WEAK
argument_list|)
return|;
block|}
if|else if
condition|(
name|SOFT_RETAIN_STRATEGY
operator|.
name|equals
argument_list|(
name|strategy
argument_list|)
condition|)
block|{
return|return
operator|new
name|ReferenceMap
argument_list|(
name|AbstractReferenceMap
operator|.
name|HARD
argument_list|,
name|AbstractReferenceMap
operator|.
name|SOFT
argument_list|)
return|;
block|}
if|else if
condition|(
name|HARD_RETAIN_STRATEGY
operator|.
name|equals
argument_list|(
name|strategy
argument_list|)
condition|)
block|{
return|return
operator|new
name|ReferenceMap
argument_list|(
name|AbstractReferenceMap
operator|.
name|HARD
argument_list|,
name|AbstractReferenceMap
operator|.
name|HARD
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unsupported retain strategy %s"
argument_list|,
name|strategy
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

