begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|ObjectDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|ObjectStoreGraphDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|OperationObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
operator|.
name|DbRowOpMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
operator|.
name|DbRowOpSorter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
operator|.
name|DbRowOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
operator|.
name|DbRowOpVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
operator|.
name|UpdateDbRowOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|CompoundDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|log
operator|.
name|JdbcEventLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_comment
comment|/**  * Default implementation of {@link DataDomainFlushAction}.  *  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|DefaultDataDomainFlushAction
implements|implements
name|DataDomainFlushAction
block|{
specifier|protected
specifier|final
name|DataDomain
name|dataDomain
decl_stmt|;
specifier|protected
specifier|final
name|DbRowOpSorter
name|dbRowOpSorter
decl_stmt|;
specifier|protected
specifier|final
name|JdbcEventLogger
name|jdbcEventLogger
decl_stmt|;
specifier|protected
specifier|final
name|OperationObserver
name|observer
decl_stmt|;
specifier|protected
name|DefaultDataDomainFlushAction
parameter_list|(
name|DataDomain
name|dataDomain
parameter_list|,
name|DbRowOpSorter
name|dbRowOpSorter
parameter_list|,
name|JdbcEventLogger
name|jdbcEventLogger
parameter_list|)
block|{
name|this
operator|.
name|dataDomain
operator|=
name|dataDomain
expr_stmt|;
name|this
operator|.
name|dbRowOpSorter
operator|=
name|dbRowOpSorter
expr_stmt|;
name|this
operator|.
name|jdbcEventLogger
operator|=
name|jdbcEventLogger
expr_stmt|;
name|this
operator|.
name|observer
operator|=
operator|new
name|FlushObserver
argument_list|(
name|jdbcEventLogger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|GraphDiff
name|flush
parameter_list|(
name|DataContext
name|context
parameter_list|,
name|GraphDiff
name|changes
parameter_list|)
block|{
name|CompoundDiff
name|afterCommitDiff
init|=
operator|new
name|CompoundDiff
argument_list|()
decl_stmt|;
if|if
condition|(
name|changes
operator|==
literal|null
condition|)
block|{
return|return
name|afterCommitDiff
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|changes
operator|instanceof
name|ObjectStoreGraphDiff
operator|)
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Instance of ObjectStoreGraphDiff expected, got %s"
argument_list|,
name|changes
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|ObjectStore
name|objectStore
init|=
name|context
operator|.
name|getObjectStore
argument_list|()
decl_stmt|;
name|ObjectStoreGraphDiff
name|objectStoreGraphDiff
init|=
operator|(
name|ObjectStoreGraphDiff
operator|)
name|changes
decl_stmt|;
name|List
argument_list|<
name|DbRowOp
argument_list|>
name|dbRowOps
init|=
name|createDbRowOps
argument_list|(
name|objectStore
argument_list|,
name|objectStoreGraphDiff
argument_list|)
decl_stmt|;
name|updateObjectIds
argument_list|(
name|dbRowOps
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DbRowOp
argument_list|>
name|deduplicatedOps
init|=
name|mergeSameObjectIds
argument_list|(
name|dbRowOps
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DbRowOp
argument_list|>
name|filteredOps
init|=
name|filterOps
argument_list|(
name|deduplicatedOps
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DbRowOp
argument_list|>
name|sortedOps
init|=
name|sort
argument_list|(
name|filteredOps
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Query
argument_list|>
name|queries
init|=
name|createQueries
argument_list|(
name|sortedOps
argument_list|)
decl_stmt|;
name|executeQueries
argument_list|(
name|queries
argument_list|)
expr_stmt|;
name|createReplacementIds
argument_list|(
name|objectStore
argument_list|,
name|afterCommitDiff
argument_list|,
name|sortedOps
argument_list|)
expr_stmt|;
name|postprocess
argument_list|(
name|context
argument_list|,
name|objectStoreGraphDiff
argument_list|,
name|afterCommitDiff
argument_list|,
name|sortedOps
argument_list|)
expr_stmt|;
return|return
name|afterCommitDiff
return|;
block|}
comment|/**      * Create ops based on incoming graph changes      * @param objectStore originating object store      * @param changes object graph diff      * @return collection of {@link DbRowOp}      */
specifier|protected
name|List
argument_list|<
name|DbRowOp
argument_list|>
name|createDbRowOps
parameter_list|(
name|ObjectStore
name|objectStore
parameter_list|,
name|ObjectStoreGraphDiff
name|changes
parameter_list|)
block|{
name|EntityResolver
name|resolver
init|=
name|dataDomain
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|ObjectDiff
argument_list|>
name|changesByObjectId
init|=
name|changes
operator|.
name|getChangesByObjectId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DbRowOp
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|changesByObjectId
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ArcTarget
argument_list|>
name|processedArcs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|DbRowOpFactory
name|factory
init|=
operator|new
name|DbRowOpFactory
argument_list|(
name|resolver
argument_list|,
name|objectStore
argument_list|,
name|processedArcs
argument_list|)
decl_stmt|;
comment|// ops.addAll() method is slower in this case as it will allocate new array for all values
comment|//noinspection UseBulkOperation
name|changesByObjectId
operator|.
name|forEach
argument_list|(
parameter_list|(
name|obj
parameter_list|,
name|diff
parameter_list|)
lambda|->
name|factory
operator|.
name|createRows
argument_list|(
name|diff
argument_list|)
operator|.
name|forEach
argument_list|(
name|ops
operator|::
name|add
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ops
return|;
block|}
comment|/**      * Fill in replacement IDs' data for given operations      * @param dbRowOps collection of {@link DbRowOp}      */
specifier|protected
name|void
name|updateObjectIds
parameter_list|(
name|Collection
argument_list|<
name|DbRowOp
argument_list|>
name|dbRowOps
parameter_list|)
block|{
name|DbRowOpVisitor
argument_list|<
name|Void
argument_list|>
name|permIdVisitor
init|=
operator|new
name|PermanentObjectIdVisitor
argument_list|(
name|dataDomain
argument_list|)
decl_stmt|;
name|dbRowOps
operator|.
name|forEach
argument_list|(
name|row
lambda|->
name|row
operator|.
name|accept
argument_list|(
name|permIdVisitor
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param dbRowOps collection of {@link DbRowOp}      * @return collection of ops with merged duplicates      */
specifier|protected
name|List
argument_list|<
name|DbRowOp
argument_list|>
name|mergeSameObjectIds
parameter_list|(
name|List
argument_list|<
name|DbRowOp
argument_list|>
name|dbRowOps
parameter_list|)
block|{
name|Map
argument_list|<
name|ObjectId
argument_list|,
name|DbRowOp
argument_list|>
name|index
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|dbRowOps
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// new EffectiveOpId()
name|dbRowOps
operator|.
name|forEach
argument_list|(
name|row
lambda|->
name|index
operator|.
name|merge
argument_list|(
name|row
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|row
argument_list|,
name|DbRowOpMerger
operator|.
name|INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
comment|// reuse list
name|dbRowOps
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dbRowOps
operator|.
name|addAll
argument_list|(
name|index
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|dbRowOps
return|;
block|}
specifier|protected
name|List
argument_list|<
name|DbRowOp
argument_list|>
name|filterOps
parameter_list|(
name|List
argument_list|<
name|DbRowOp
argument_list|>
name|dbRowOps
parameter_list|)
block|{
comment|// clear phantom update (this can be from insert/delete of arc with transient object)
name|dbRowOps
operator|.
name|forEach
argument_list|(
name|row
lambda|->
name|row
operator|.
name|accept
argument_list|(
name|PhantomDbRowOpCleaner
operator|.
name|INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|dbRowOps
return|;
block|}
comment|/**      * Sort all operations      * @param dbRowOps collection of {@link DbRowOp}      * @return sorted collection of operations      * @see DbRowOpSorter interface and it's default implementation      */
specifier|protected
name|List
argument_list|<
name|DbRowOp
argument_list|>
name|sort
parameter_list|(
name|List
argument_list|<
name|DbRowOp
argument_list|>
name|dbRowOps
parameter_list|)
block|{
return|return
name|dbRowOpSorter
operator|.
name|sort
argument_list|(
name|dbRowOps
argument_list|)
return|;
block|}
comment|/**      *      * @param dbRowOps collection of {@link DbRowOp}      * @return collection of {@link Query} to perform      */
specifier|protected
name|List
argument_list|<
name|?
extends|extends
name|Query
argument_list|>
name|createQueries
parameter_list|(
name|List
argument_list|<
name|DbRowOp
argument_list|>
name|dbRowOps
parameter_list|)
block|{
name|QueryCreatorVisitor
name|queryCreator
init|=
operator|new
name|QueryCreatorVisitor
argument_list|(
name|dbRowOps
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|dbRowOps
operator|.
name|forEach
argument_list|(
name|row
lambda|->
name|row
operator|.
name|accept
argument_list|(
name|queryCreator
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|queryCreator
operator|.
name|getQueryList
argument_list|()
return|;
block|}
comment|/**      * Execute queries, grouping them by nodes      * @param queries to execute      */
specifier|protected
name|void
name|executeQueries
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Query
argument_list|>
name|queries
parameter_list|)
block|{
name|EntityResolver
name|entityResolver
init|=
name|dataDomain
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
name|queries
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|query
lambda|->
name|dataDomain
operator|.
name|lookupDataNode
argument_list|(
name|query
operator|.
name|getMetaData
argument_list|(
name|entityResolver
argument_list|)
operator|.
name|getDataMap
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
parameter_list|(
name|node
parameter_list|,
name|nodeQueries
parameter_list|)
lambda|->
name|node
operator|.
name|performQueries
argument_list|(
name|nodeQueries
argument_list|,
name|observer
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set final {@link ObjectId} for persistent objects      *      * @param store object store      * @param afterCommitDiff result graph diff      * @param dbRowOps collection of {@link DbRowOp}      */
specifier|protected
name|void
name|createReplacementIds
parameter_list|(
name|ObjectStore
name|store
parameter_list|,
name|CompoundDiff
name|afterCommitDiff
parameter_list|,
name|List
argument_list|<
name|DbRowOp
argument_list|>
name|dbRowOps
parameter_list|)
block|{
name|ReplacementIdVisitor
name|visitor
init|=
operator|new
name|ReplacementIdVisitor
argument_list|(
name|store
argument_list|,
name|dataDomain
operator|.
name|getEntityResolver
argument_list|()
argument_list|,
name|afterCommitDiff
argument_list|)
decl_stmt|;
name|dbRowOps
operator|.
name|forEach
argument_list|(
name|row
lambda|->
name|row
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Notify {@link ObjectStore} and it's data row cache about actual changes we performed.      *      * @param context originating context      * @param changes incoming diff      * @param afterCommitDiff resulting diff      * @param dbRowOps collection of {@link DbRowOp}      */
specifier|protected
name|void
name|postprocess
parameter_list|(
name|DataContext
name|context
parameter_list|,
name|ObjectStoreGraphDiff
name|changes
parameter_list|,
name|CompoundDiff
name|afterCommitDiff
parameter_list|,
name|List
argument_list|<
name|DbRowOp
argument_list|>
name|dbRowOps
parameter_list|)
block|{
name|ObjectStore
name|objectStore
init|=
name|context
operator|.
name|getObjectStore
argument_list|()
decl_stmt|;
name|PostprocessVisitor
name|postprocessor
init|=
operator|new
name|PostprocessVisitor
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|dbRowOps
operator|.
name|forEach
argument_list|(
name|row
lambda|->
name|row
operator|.
name|accept
argument_list|(
name|postprocessor
argument_list|)
argument_list|)
expr_stmt|;
name|DataDomainIndirectDiffBuilder
name|indirectDiffBuilder
init|=
operator|new
name|DataDomainIndirectDiffBuilder
argument_list|(
name|context
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
decl_stmt|;
name|indirectDiffBuilder
operator|.
name|processChanges
argument_list|(
name|changes
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|getDataRowCache
argument_list|()
operator|.
name|processSnapshotChanges
argument_list|(
name|objectStore
argument_list|,
name|postprocessor
operator|.
name|getUpdatedSnapshots
argument_list|()
argument_list|,
name|postprocessor
operator|.
name|getDeletedIds
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|indirectDiffBuilder
operator|.
name|getIndirectModifications
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|postprocessAfterCommit
argument_list|(
name|afterCommitDiff
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
class|class
name|PhantomDbRowOpCleaner
implements|implements
name|DbRowOpVisitor
argument_list|<
name|Void
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|DbRowOpVisitor
argument_list|<
name|Void
argument_list|>
name|INSTANCE
init|=
operator|new
name|PhantomDbRowOpCleaner
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Void
name|visitUpdate
parameter_list|(
name|UpdateDbRowOp
name|dbRow
parameter_list|)
block|{
comment|//
if|if
condition|(
name|dbRow
operator|.
name|getChangeId
argument_list|()
operator|.
name|isTemporary
argument_list|()
operator|&&
operator|!
name|dbRow
operator|.
name|getChangeId
argument_list|()
operator|.
name|isReplacementIdAttached
argument_list|()
condition|)
block|{
name|dbRow
operator|.
name|getValues
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

