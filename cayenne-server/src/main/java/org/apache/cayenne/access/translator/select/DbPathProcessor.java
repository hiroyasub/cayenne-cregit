begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|JoinType
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
class|class
name|DbPathProcessor
extends|extends
name|PathProcessor
argument_list|<
name|DbEntity
argument_list|>
block|{
specifier|private
name|boolean
name|flattenedPath
decl_stmt|;
name|DbPathProcessor
parameter_list|(
name|TranslatorContext
name|context
parameter_list|,
name|DbEntity
name|entity
parameter_list|,
name|String
name|parentPath
parameter_list|,
name|boolean
name|flattenedPath
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|entity
argument_list|)
expr_stmt|;
name|this
operator|.
name|flattenedPath
operator|=
name|flattenedPath
expr_stmt|;
if|if
condition|(
name|parentPath
operator|!=
literal|null
condition|)
block|{
name|currentDbPath
operator|.
name|append
argument_list|(
name|parentPath
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOuterJoin
parameter_list|()
block|{
return|return
name|super
operator|.
name|isOuterJoin
argument_list|()
operator|||
name|flattenedPath
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processNormalAttribute
parameter_list|(
name|String
name|next
parameter_list|)
block|{
name|DbAttribute
name|dbAttribute
init|=
name|entity
operator|.
name|getAttribute
argument_list|(
name|next
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbAttribute
operator|!=
literal|null
condition|)
block|{
name|processAttribute
argument_list|(
name|dbAttribute
argument_list|)
expr_stmt|;
return|return;
block|}
name|DbRelationship
name|relationship
init|=
name|entity
operator|.
name|getRelationship
argument_list|(
name|next
argument_list|)
decl_stmt|;
if|if
condition|(
name|relationship
operator|!=
literal|null
condition|)
block|{
name|entity
operator|=
name|relationship
operator|.
name|getTargetEntity
argument_list|()
expr_stmt|;
name|processRelationship
argument_list|(
name|relationship
argument_list|)
expr_stmt|;
return|return;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to resolve path: "
operator|+
name|currentDbPath
operator|.
name|toString
argument_list|()
operator|+
literal|"."
operator|+
name|next
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processAliasedAttribute
parameter_list|(
name|String
name|next
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
name|DbRelationship
name|relationship
init|=
name|entity
operator|.
name|getRelationship
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|relationship
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Non-relationship aliased path part: "
operator|+
name|alias
argument_list|)
throw|;
block|}
name|entity
operator|=
name|relationship
operator|.
name|getTargetEntity
argument_list|()
expr_stmt|;
name|processRelationship
argument_list|(
name|relationship
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processAttribute
parameter_list|(
name|DbAttribute
name|attribute
parameter_list|)
block|{
name|addAttribute
argument_list|(
name|currentDbPath
operator|.
name|toString
argument_list|()
argument_list|,
name|attribute
argument_list|)
expr_stmt|;
name|appendCurrentPath
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processRelationship
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|)
block|{
if|if
condition|(
name|lastComponent
condition|)
block|{
comment|// if this is a last relationship in the path, it needs special handling
name|processRelTermination
argument_list|(
name|relationship
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|appendCurrentPath
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getTableTree
argument_list|()
operator|.
name|addJoinTable
argument_list|(
name|currentDbPath
operator|.
name|toString
argument_list|()
argument_list|,
name|relationship
argument_list|,
name|isOuterJoin
argument_list|()
condition|?
name|JoinType
operator|.
name|LEFT_OUTER
else|:
name|JoinType
operator|.
name|INNER
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|relationship
operator|.
name|isToMany
argument_list|()
condition|)
block|{
name|String
name|path
init|=
name|currentDbPath
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|DbAttribute
name|attribute
range|:
name|relationship
operator|.
name|getTargetEntity
argument_list|()
operator|.
name|getPrimaryKeys
argument_list|()
control|)
block|{
name|addAttribute
argument_list|(
name|path
argument_list|,
name|attribute
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|processRelTermination
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|)
block|{
name|this
operator|.
name|relationship
operator|=
name|relationship
expr_stmt|;
name|String
name|path
init|=
name|currentDbPath
operator|.
name|toString
argument_list|()
decl_stmt|;
name|appendCurrentPath
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|relationship
operator|.
name|isToMany
argument_list|()
operator|||
operator|!
name|relationship
operator|.
name|isToPK
argument_list|()
condition|)
block|{
comment|// match on target PK
name|context
operator|.
name|getTableTree
argument_list|()
operator|.
name|addJoinTable
argument_list|(
name|currentDbPath
operator|.
name|toString
argument_list|()
argument_list|,
name|relationship
argument_list|,
name|isOuterJoin
argument_list|()
condition|?
name|JoinType
operator|.
name|LEFT_OUTER
else|:
name|JoinType
operator|.
name|INNER
argument_list|)
expr_stmt|;
name|path
operator|=
name|currentDbPath
operator|.
name|toString
argument_list|()
expr_stmt|;
for|for
control|(
name|DbAttribute
name|attribute
range|:
name|relationship
operator|.
name|getTargetEntity
argument_list|()
operator|.
name|getPrimaryKeys
argument_list|()
control|)
block|{
name|addAttribute
argument_list|(
name|path
argument_list|,
name|attribute
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|DbJoin
name|join
range|:
name|relationship
operator|.
name|getJoins
argument_list|()
control|)
block|{
name|addAttribute
argument_list|(
name|path
argument_list|,
name|join
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

