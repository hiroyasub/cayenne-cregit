begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * @since 3.2.  */
end_comment

begin_class
specifier|public
class|class
name|FilterFactory
block|{
specifier|public
specifier|static
name|Filter
argument_list|<
name|String
argument_list|>
name|TRUE
init|=
operator|new
name|Filter
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isInclude
parameter_list|(
name|String
name|obj
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Filter
argument_list|<
name|String
argument_list|>
name|join
parameter_list|(
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
return|return
name|filter
operator|==
literal|null
operator|||
name|NULL
operator|.
name|equals
argument_list|(
name|filter
argument_list|)
condition|?
name|this
else|:
name|filter
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|this
operator|==
name|o
operator|||
name|o
operator|!=
literal|null
operator|&&
name|getClass
argument_list|()
operator|==
name|o
operator|.
name|getClass
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"true"
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|Filter
argument_list|<
name|String
argument_list|>
name|NULL
init|=
operator|new
name|Filter
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isInclude
parameter_list|(
name|String
name|obj
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Filter
argument_list|<
name|String
argument_list|>
name|join
parameter_list|(
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
return|return
name|filter
operator|==
literal|null
condition|?
name|this
else|:
name|filter
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|this
operator|==
name|o
operator|||
name|o
operator|!=
literal|null
operator|&&
name|getClass
argument_list|()
operator|==
name|o
operator|.
name|getClass
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"null"
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|Filter
argument_list|<
name|String
argument_list|>
name|include
parameter_list|(
name|String
name|tablePattern
parameter_list|)
block|{
return|return
operator|new
name|IncludeFilter
argument_list|(
name|pattern
argument_list|(
name|tablePattern
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Filter
argument_list|<
name|String
argument_list|>
name|exclude
parameter_list|(
name|String
name|tablePattern
parameter_list|)
block|{
return|return
operator|new
name|ExcludeFilter
argument_list|(
name|pattern
argument_list|(
name|tablePattern
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Filter
argument_list|<
name|String
argument_list|>
name|list
parameter_list|(
name|Filter
argument_list|<
name|String
argument_list|>
modifier|...
name|filters
parameter_list|)
block|{
name|Filter
argument_list|<
name|String
argument_list|>
name|res
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|Filter
argument_list|<
name|String
argument_list|>
name|filter
range|:
name|filters
control|)
block|{
name|res
operator|=
name|res
operator|.
name|join
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
specifier|public
specifier|static
name|Pattern
name|pattern
parameter_list|(
name|String
name|tablePattern
parameter_list|)
block|{
return|return
name|Pattern
operator|.
name|compile
argument_list|(
name|tablePattern
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
return|;
block|}
block|}
end_class

end_unit

