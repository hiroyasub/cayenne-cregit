begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|CallableStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|ValueObjectTypeFactory
implements|implements
name|ExtendedTypeFactory
block|{
name|ValueObjectTypeRegistry
name|valueObjectTypeRegistry
decl_stmt|;
specifier|private
name|ExtendedTypeMap
name|map
decl_stmt|;
specifier|public
name|ValueObjectTypeFactory
parameter_list|(
name|ExtendedTypeMap
name|map
parameter_list|,
name|ValueObjectTypeRegistry
name|valueObjectTypeRegistry
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|valueObjectTypeRegistry
operator|=
name|valueObjectTypeRegistry
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|ExtendedType
argument_list|<
name|?
extends|extends
name|ValueObjectType
argument_list|>
name|getType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|objectClass
parameter_list|)
block|{
name|ValueObjectType
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|valueObjectType
init|=
name|valueObjectTypeRegistry
operator|.
name|getValueType
argument_list|(
name|objectClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueObjectType
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ExtendedType
argument_list|<
name|?
argument_list|>
name|decorator
init|=
name|map
operator|.
name|getExplictlyRegisteredType
argument_list|(
name|valueObjectType
operator|.
name|getTargetType
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExtendedTypeConverter
argument_list|(
name|decorator
argument_list|,
name|valueObjectType
argument_list|)
return|;
block|}
specifier|static
class|class
name|ExtendedTypeConverter
parameter_list|<
name|T
parameter_list|,
name|E
parameter_list|>
implements|implements
name|ExtendedType
argument_list|<
name|T
argument_list|>
block|{
name|ExtendedType
argument_list|<
name|E
argument_list|>
name|extendedType
decl_stmt|;
name|ValueObjectType
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
name|valueObjectType
decl_stmt|;
name|ExtendedTypeConverter
parameter_list|(
name|ExtendedType
argument_list|<
name|E
argument_list|>
name|extendedType
parameter_list|,
name|ValueObjectType
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
name|valueObjectType
parameter_list|)
block|{
name|this
operator|.
name|extendedType
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|extendedType
argument_list|)
expr_stmt|;
name|this
operator|.
name|valueObjectType
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|valueObjectType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|valueObjectType
operator|.
name|getValueType
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|protected
name|T
name|toJavaObject
parameter_list|(
name|E
name|materializedValue
parameter_list|)
block|{
if|if
condition|(
name|materializedValue
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|valueObjectType
operator|.
name|toJavaObject
argument_list|(
name|materializedValue
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|materializeObject
parameter_list|(
name|CallableStatement
name|rs
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|toJavaObject
argument_list|(
name|extendedType
operator|.
name|materializeObject
argument_list|(
name|rs
argument_list|,
name|index
argument_list|,
name|type
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|materializeObject
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|toJavaObject
argument_list|(
name|extendedType
operator|.
name|materializeObject
argument_list|(
name|rs
argument_list|,
name|index
argument_list|,
name|type
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setJdbcObject
parameter_list|(
name|PreparedStatement
name|statement
parameter_list|,
name|T
name|value
parameter_list|,
name|int
name|pos
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|precision
parameter_list|)
throws|throws
name|Exception
block|{
name|E
name|dbValue
init|=
name|value
operator|==
literal|null
condition|?
literal|null
else|:
name|valueObjectType
operator|.
name|fromJavaObject
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|extendedType
operator|.
name|setJdbcObject
argument_list|(
name|statement
argument_list|,
name|dbValue
argument_list|,
name|pos
argument_list|,
name|type
argument_list|,
name|precision
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|T
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|"NULL"
return|;
block|}
return|return
name|valueObjectType
operator|.
name|toCacheKey
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

