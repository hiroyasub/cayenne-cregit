begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomainSyncBucket
operator|.
name|PropagatedValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTDbPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|ArcId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphChangeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * Processes object diffs, generating DB diffs. Can be used for both UPDATE and  * INSERT.  *   * @since 1.2  * @deprecated since 4.2 as part of deprecated {@link LegacyDataDomainFlushAction}  */
end_comment

begin_class
annotation|@
name|Deprecated
class|class
name|DataDomainDBDiffBuilder
implements|implements
name|GraphChangeHandler
block|{
specifier|private
name|ObjEntity
name|objEntity
decl_stmt|;
specifier|private
name|DbEntity
name|dbEntity
decl_stmt|;
comment|// diff snapshot expressed in terms of object properties.
specifier|private
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|currentPropertyDiff
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|currentArcDiff
decl_stmt|;
specifier|private
name|Object
name|currentId
decl_stmt|;
comment|/**      * Resets the builder to process a new combination of objEntity/dbEntity.      */
name|void
name|reset
parameter_list|(
name|DbEntityClassDescriptor
name|descriptor
parameter_list|)
block|{
name|this
operator|.
name|objEntity
operator|=
name|descriptor
operator|.
name|getEntity
argument_list|()
expr_stmt|;
name|this
operator|.
name|dbEntity
operator|=
name|descriptor
operator|.
name|getDbEntity
argument_list|()
expr_stmt|;
block|}
comment|/**      * Resets the builder to process a new object for the previously set      * combination of objEntity/dbEntity.      */
specifier|private
name|void
name|reset
parameter_list|()
block|{
name|currentPropertyDiff
operator|=
literal|null
expr_stmt|;
name|currentArcDiff
operator|=
literal|null
expr_stmt|;
name|currentId
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Processes GraphDiffs of a single object, converting them to DB diff.      */
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|buildDBDiff
parameter_list|(
name|GraphDiff
name|singleObjectDiff
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|singleObjectDiff
operator|.
name|apply
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentPropertyDiff
operator|==
literal|null
operator|&&
name|currentArcDiff
operator|==
literal|null
operator|&&
name|currentId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|dbDiff
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|appendSimpleProperties
argument_list|(
name|dbDiff
argument_list|)
expr_stmt|;
name|appendForeignKeys
argument_list|(
name|dbDiff
argument_list|)
expr_stmt|;
name|appendPrimaryKeys
argument_list|(
name|dbDiff
argument_list|)
expr_stmt|;
return|return
name|dbDiff
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|dbDiff
return|;
block|}
specifier|private
name|void
name|appendSimpleProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|dbDiff
parameter_list|)
block|{
comment|// populate changed columns
if|if
condition|(
name|currentPropertyDiff
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|currentPropertyDiff
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ObjAttribute
name|attribute
init|=
name|objEntity
operator|.
name|getAttribute
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// In case of a flattened attribute, ensure that it belongs to this bucket...
name|DbAttribute
name|dbAttribute
init|=
name|attribute
operator|.
name|getDbAttribute
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbAttribute
operator|.
name|getEntity
argument_list|()
operator|==
name|dbEntity
condition|)
block|{
name|dbDiff
operator|.
name|put
argument_list|(
name|dbAttribute
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|appendForeignKeys
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|dbDiff
parameter_list|)
block|{
comment|// populate changed FKs
if|if
condition|(
name|currentArcDiff
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|currentArcDiff
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|DbRelationship
name|dbRelation
decl_stmt|;
name|String
name|arcIdString
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ObjRelationship
name|relation
init|=
name|objEntity
operator|.
name|getRelationship
argument_list|(
name|arcIdString
argument_list|)
decl_stmt|;
if|if
condition|(
name|relation
operator|==
literal|null
condition|)
block|{
name|dbRelation
operator|=
name|dbEntity
operator|.
name|getRelationship
argument_list|(
name|arcIdString
operator|.
name|substring
argument_list|(
name|ASTDbPath
operator|.
name|DB_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dbRelation
operator|=
name|relation
operator|.
name|getDbRelationships
argument_list|()
operator|.
name|get
argument_list|(
name|relation
operator|.
name|getDbRelationships
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// In case of a vertical inheritance, ensure that it belongs to this bucket...
if|if
condition|(
name|dbRelation
operator|.
name|getSourceEntity
argument_list|()
operator|==
name|dbEntity
condition|)
block|{
name|ObjectId
name|targetId
init|=
operator|(
name|ObjectId
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|DbJoin
name|join
range|:
name|dbRelation
operator|.
name|getJoins
argument_list|()
control|)
block|{
name|Object
name|value
init|=
operator|(
name|targetId
operator|!=
literal|null
operator|)
condition|?
operator|new
name|PropagatedValueFactory
argument_list|(
name|targetId
argument_list|,
name|join
operator|.
name|getTargetName
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|dbDiff
operator|.
name|put
argument_list|(
name|join
operator|.
name|getSourceName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|appendPrimaryKeys
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|dbDiff
parameter_list|)
block|{
comment|// populate changed PKs; note that we might end up overriding some
comment|// values taken
comment|// from the object (e.g. zero PK's).
if|if
condition|(
name|currentId
operator|!=
literal|null
condition|)
block|{
name|dbDiff
operator|.
name|putAll
argument_list|(
operator|(
operator|(
name|ObjectId
operator|)
name|currentId
operator|)
operator|.
name|getIdSnapshot
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ==================================================
comment|// GraphChangeHandler methods.
comment|// ==================================================
annotation|@
name|Override
specifier|public
name|void
name|nodePropertyChanged
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|String
name|property
parameter_list|,
name|Object
name|oldValue
parameter_list|,
name|Object
name|newValue
parameter_list|)
block|{
comment|// note - no checking for phantom mod... assuming there is no phantom
comment|// diffs
if|if
condition|(
name|currentPropertyDiff
operator|==
literal|null
condition|)
block|{
name|currentPropertyDiff
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|currentPropertyDiff
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|arcCreated
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|Object
name|targetNodeId
parameter_list|,
name|ArcId
name|arcId
parameter_list|)
block|{
name|String
name|arcIdString
init|=
name|arcId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ObjRelationship
name|relationship
init|=
name|objEntity
operator|.
name|getRelationship
argument_list|(
name|arcIdString
argument_list|)
decl_stmt|;
if|if
condition|(
name|relationship
operator|==
literal|null
condition|)
block|{
comment|// phantom FK
if|if
condition|(
name|arcIdString
operator|.
name|startsWith
argument_list|(
name|ASTDbPath
operator|.
name|DB_PREFIX
argument_list|)
condition|)
block|{
name|String
name|relName
init|=
name|arcIdString
operator|.
name|substring
argument_list|(
name|ASTDbPath
operator|.
name|DB_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|DbRelationship
name|dbRelationship
init|=
name|dbEntity
operator|.
name|getRelationship
argument_list|(
name|relName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dbRelationship
operator|.
name|isSourceIndependentFromTargetChange
argument_list|()
condition|)
block|{
name|doArcCreated
argument_list|(
name|targetNodeId
argument_list|,
name|arcId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad arcId: "
operator|+
name|arcId
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|relationship
operator|.
name|isToMany
argument_list|()
operator|&&
name|relationship
operator|.
name|isToPK
argument_list|()
condition|)
block|{
name|doArcCreated
argument_list|(
name|targetNodeId
argument_list|,
name|arcId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doArcCreated
parameter_list|(
name|Object
name|targetNodeId
parameter_list|,
name|ArcId
name|arcId
parameter_list|)
block|{
if|if
condition|(
name|currentArcDiff
operator|==
literal|null
condition|)
block|{
name|currentArcDiff
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|currentArcDiff
operator|.
name|put
argument_list|(
name|arcId
argument_list|,
name|targetNodeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|arcDeleted
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|Object
name|targetNodeId
parameter_list|,
name|ArcId
name|arcId
parameter_list|)
block|{
name|String
name|arcIdString
init|=
name|arcId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ObjRelationship
name|relationship
init|=
name|objEntity
operator|.
name|getRelationship
argument_list|(
name|arcIdString
argument_list|)
decl_stmt|;
if|if
condition|(
name|relationship
operator|==
literal|null
condition|)
block|{
comment|// phantom FK
if|if
condition|(
name|arcIdString
operator|.
name|startsWith
argument_list|(
name|ASTDbPath
operator|.
name|DB_PREFIX
argument_list|)
condition|)
block|{
name|DbRelationship
name|dbRelationship
init|=
name|dbEntity
operator|.
name|getRelationship
argument_list|(
name|arcIdString
operator|.
name|substring
argument_list|(
name|ASTDbPath
operator|.
name|DB_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dbRelationship
operator|.
name|isSourceIndependentFromTargetChange
argument_list|()
condition|)
block|{
name|doArcDeleted
argument_list|(
name|targetNodeId
argument_list|,
name|arcId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad arcId: "
operator|+
name|arcId
argument_list|)
throw|;
block|}
block|}
if|else if
condition|(
operator|!
name|relationship
operator|.
name|isSourceIndependentFromTargetChange
argument_list|()
condition|)
block|{
name|doArcDeleted
argument_list|(
name|targetNodeId
argument_list|,
name|arcId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doArcDeleted
parameter_list|(
name|Object
name|targetNodeId
parameter_list|,
name|ArcId
name|arcId
parameter_list|)
block|{
if|if
condition|(
name|currentArcDiff
operator|==
literal|null
condition|)
block|{
name|currentArcDiff
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|currentArcDiff
operator|.
name|put
argument_list|(
name|arcId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// skip deletion record if a substitute arc was created prior to
comment|// deleting the old arc...
name|Object
name|existingTargetId
init|=
name|currentArcDiff
operator|.
name|get
argument_list|(
name|arcId
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingTargetId
operator|==
literal|null
operator|||
name|targetNodeId
operator|.
name|equals
argument_list|(
name|existingTargetId
argument_list|)
condition|)
block|{
name|currentArcDiff
operator|.
name|put
argument_list|(
name|arcId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeCreated
parameter_list|(
name|Object
name|nodeId
parameter_list|)
block|{
comment|// need to append PK columns
name|this
operator|.
name|currentId
operator|=
name|nodeId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeRemoved
parameter_list|(
name|Object
name|nodeId
parameter_list|)
block|{
comment|// noop
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeIdChanged
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|Object
name|newId
parameter_list|)
block|{
comment|// noop
block|}
block|}
end_class

end_unit

