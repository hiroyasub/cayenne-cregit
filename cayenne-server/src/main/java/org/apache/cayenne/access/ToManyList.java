begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistenceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|PersistentObjectList
import|;
end_import

begin_comment
comment|/**  * A list that holds objects for to-many relationships. All operations, except for  * resolving the list from DB, are not synchronized. The safest way to implement custom  * synchronization is to synchronize on parent ObjectStore.  */
end_comment

begin_class
specifier|public
class|class
name|ToManyList
parameter_list|<
name|E
parameter_list|>
extends|extends
name|PersistentObjectList
argument_list|<
name|E
argument_list|>
implements|implements
name|Serializable
block|{
comment|/**      * Creates ToManyList.      *       * @since 1.1      */
specifier|public
name|ToManyList
parameter_list|(
name|Persistent
name|source
parameter_list|,
name|String
name|relationship
parameter_list|)
block|{
name|super
argument_list|(
name|source
argument_list|,
name|relationship
argument_list|)
expr_stmt|;
comment|// if source is new, set object list right away
if|if
condition|(
name|isTransientParent
argument_list|()
condition|)
block|{
name|objectList
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
block|}
comment|// ====================================================
comment|// Standard List Methods.
comment|// ====================================================
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|15
operator|+
name|resolvedObjectList
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|// ====================================================
comment|// Tracking list modifications, and resolving it
comment|// on demand
comment|// ====================================================
annotation|@
name|Override
specifier|protected
name|boolean
name|shouldAddToRemovedFromUnresolvedList
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
comment|// No point in adding a new or transient object -- these will never be fetched
comment|// from the database.
if|if
condition|(
name|object
operator|instanceof
name|Persistent
condition|)
block|{
name|Persistent
name|dataObject
init|=
operator|(
name|Persistent
operator|)
name|object
decl_stmt|;
if|if
condition|(
operator|(
name|dataObject
operator|.
name|getPersistenceState
argument_list|()
operator|==
name|PersistenceState
operator|.
name|TRANSIENT
operator|)
operator|||
operator|(
name|dataObject
operator|.
name|getPersistenceState
argument_list|()
operator|==
name|PersistenceState
operator|.
name|NEW
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"@"
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|postprocessAdd
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|collection
parameter_list|)
block|{
comment|// no need for this operation for DataObjects...
block|}
annotation|@
name|Override
specifier|protected
name|void
name|postprocessRemove
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|collection
parameter_list|)
block|{
comment|// no need for this operation for DataObjects...
block|}
annotation|@
name|Override
specifier|protected
name|void
name|postprocessAdd
parameter_list|(
name|E
name|addedObject
parameter_list|)
block|{
comment|// no need for this operation for DataObjects...
block|}
annotation|@
name|Override
specifier|protected
name|void
name|postprocessRemove
parameter_list|(
name|E
name|removedObject
parameter_list|)
block|{
comment|// no need for this operation for DataObjects...
block|}
annotation|@
name|Override
specifier|protected
name|void
name|updateReverse
parameter_list|(
name|List
argument_list|<
name|E
argument_list|>
name|resolved
parameter_list|)
block|{
comment|// no need for this operation for DataObjects...
block|}
block|}
end_class

end_unit

