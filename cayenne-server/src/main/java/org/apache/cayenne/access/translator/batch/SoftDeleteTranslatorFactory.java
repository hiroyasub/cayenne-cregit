begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|batch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|batch
operator|.
name|BatchTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|DeleteBatchQuery
import|;
end_import

begin_comment
comment|/**  * Implementation of {link #BatchTranslator}, which uses 'soft' delete  * (runs UPDATE and sets 'deleted' field to true instead-of running SQL DELETE)  *   * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|SoftDeleteTranslatorFactory
extends|extends
name|DefaultBatchTranslatorFactory
block|{
comment|/**      * Default name of 'deleted' field      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DELETED_FIELD_NAME
init|=
literal|"DELETED"
decl_stmt|;
comment|/**      * Name of 'deleted' field      */
specifier|private
name|String
name|deletedFieldName
decl_stmt|;
specifier|public
name|SoftDeleteTranslatorFactory
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_DELETED_FIELD_NAME
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SoftDeleteTranslatorFactory
parameter_list|(
name|String
name|deletedFieldName
parameter_list|)
block|{
name|this
operator|.
name|deletedFieldName
operator|=
name|deletedFieldName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|BatchTranslator
name|deleteTranslator
parameter_list|(
name|DeleteBatchQuery
name|query
parameter_list|,
name|DbAdapter
name|adapter
parameter_list|,
name|String
name|trimFunction
parameter_list|)
block|{
name|DbAttribute
name|attr
init|=
name|query
operator|.
name|getDbEntity
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|deletedFieldName
argument_list|)
decl_stmt|;
name|boolean
name|needsSoftDelete
init|=
name|attr
operator|!=
literal|null
operator|&&
name|attr
operator|.
name|getType
argument_list|()
operator|==
name|Types
operator|.
name|BOOLEAN
decl_stmt|;
return|return
name|needsSoftDelete
condition|?
operator|new
name|SoftDeleteBatchTranslator
argument_list|(
name|query
argument_list|,
name|adapter
argument_list|,
name|trimFunction
argument_list|,
name|deletedFieldName
argument_list|)
else|:
name|super
operator|.
name|deleteTranslator
argument_list|(
name|query
argument_list|,
name|adapter
argument_list|,
name|trimFunction
argument_list|)
return|;
block|}
comment|/**      * @return name of 'deleted' field      */
specifier|public
name|String
name|getDeletedFieldName
parameter_list|()
block|{
return|return
name|deletedFieldName
return|;
block|}
block|}
end_class

end_unit

