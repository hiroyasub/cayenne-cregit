begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|CallableStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_comment
comment|/**  * An ExtendedType that handles an enum class. If Enum is mapped to a character column,  * its name is used as persistent value; if it is mapped to a numeric column, its ordinal  * (i.e. a position in enum class) is used.  *<p>  *<i>Requires Java 1.5 or newer</i>  *</p>  *   * @since 1.2  */
end_comment

begin_class
specifier|public
class|class
name|EnumType
parameter_list|<
name|T
extends|extends
name|Enum
parameter_list|<
name|T
parameter_list|>
parameter_list|>
implements|implements
name|ExtendedType
block|{
specifier|protected
name|Class
argument_list|<
name|T
argument_list|>
name|enumClass
decl_stmt|;
specifier|protected
name|Object
index|[]
name|values
decl_stmt|;
specifier|public
name|EnumType
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|enumClass
parameter_list|)
block|{
if|if
condition|(
name|enumClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null enum class"
argument_list|)
throw|;
block|}
name|this
operator|.
name|enumClass
operator|=
name|enumClass
expr_stmt|;
try|try
block|{
name|Method
name|m
init|=
name|enumClass
operator|.
name|getMethod
argument_list|(
literal|"values"
argument_list|)
decl_stmt|;
name|this
operator|.
name|values
operator|=
operator|(
name|Object
index|[]
operator|)
name|m
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Class "
operator|+
name|enumClass
operator|.
name|getName
argument_list|()
operator|+
literal|" is not an Enum"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|enumClass
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setJdbcObject
parameter_list|(
name|PreparedStatement
name|statement
parameter_list|,
name|Object
name|value
parameter_list|,
name|int
name|pos
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|precision
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|value
operator|instanceof
name|Enum
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|Enum
argument_list|<
name|?
argument_list|>
name|e
init|=
operator|(
name|Enum
argument_list|<
name|?
argument_list|>
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|TypesMapping
operator|.
name|isNumeric
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|statement
operator|.
name|setInt
argument_list|(
name|pos
argument_list|,
name|e
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|statement
operator|.
name|setString
argument_list|(
name|pos
argument_list|,
name|e
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|statement
operator|.
name|setNull
argument_list|(
name|pos
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|materializeObject
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|TypesMapping
operator|.
name|isNumeric
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|int
name|i
init|=
name|rs
operator|.
name|getInt
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
operator|(
name|rs
operator|.
name|wasNull
argument_list|()
operator|||
name|index
operator|<
literal|0
operator|)
condition|?
literal|null
else|:
name|values
index|[
name|i
index|]
return|;
block|}
else|else
block|{
name|String
name|string
init|=
name|rs
operator|.
name|getString
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|string
operator|!=
literal|null
condition|?
name|Enum
operator|.
name|valueOf
argument_list|(
name|enumClass
argument_list|,
name|string
argument_list|)
else|:
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|materializeObject
parameter_list|(
name|CallableStatement
name|rs
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|TypesMapping
operator|.
name|isNumeric
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|int
name|i
init|=
name|rs
operator|.
name|getInt
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
operator|(
name|rs
operator|.
name|wasNull
argument_list|()
operator|||
name|index
operator|<
literal|0
operator|)
condition|?
literal|null
else|:
name|values
index|[
name|i
index|]
return|;
block|}
else|else
block|{
name|String
name|string
init|=
name|rs
operator|.
name|getString
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|string
operator|!=
literal|null
condition|?
name|Enum
operator|.
name|valueOf
argument_list|(
name|enumClass
argument_list|,
name|string
argument_list|)
else|:
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

