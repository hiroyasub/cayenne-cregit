begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTDbPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|BaseProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|JoinType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
class|class
name|CustomColumnSetExtractor
implements|implements
name|ColumnExtractor
block|{
specifier|private
specifier|final
name|TranslatorContext
name|context
decl_stmt|;
specifier|private
specifier|final
name|Collection
argument_list|<
name|BaseProperty
argument_list|<
name|?
argument_list|>
argument_list|>
name|columns
decl_stmt|;
name|CustomColumnSetExtractor
parameter_list|(
name|TranslatorContext
name|context
parameter_list|,
name|Collection
argument_list|<
name|BaseProperty
argument_list|<
name|?
argument_list|>
argument_list|>
name|columns
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|extract
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
for|for
control|(
name|BaseProperty
argument_list|<
name|?
argument_list|>
name|property
range|:
name|columns
control|)
block|{
if|if
condition|(
name|isFullObjectProp
argument_list|(
name|property
argument_list|)
condition|)
block|{
name|extractFullObject
argument_list|(
name|prefix
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|extractSimpleProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|extractSimpleProperty
parameter_list|(
name|BaseProperty
argument_list|<
name|?
argument_list|>
name|property
parameter_list|)
block|{
name|Node
name|sqlNode
init|=
name|context
operator|.
name|getQualifierTranslator
argument_list|()
operator|.
name|translate
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|context
operator|.
name|addResultNode
argument_list|(
name|sqlNode
argument_list|,
literal|true
argument_list|,
name|property
argument_list|,
name|property
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|property
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
name|property
operator|.
name|getExpression
argument_list|()
operator|.
name|expName
argument_list|()
else|:
name|property
operator|.
name|getName
argument_list|()
decl_stmt|;
name|context
operator|.
name|getSqlResult
argument_list|()
operator|.
name|addColumnResult
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isFullObjectProp
parameter_list|(
name|BaseProperty
argument_list|<
name|?
argument_list|>
name|property
parameter_list|)
block|{
name|int
name|expressionType
init|=
name|property
operator|.
name|getExpression
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// forbid direct selection of toMany relationships columns
if|if
condition|(
name|property
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|expressionType
operator|==
name|Expression
operator|.
name|OBJ_PATH
operator|||
name|expressionType
operator|==
name|Expression
operator|.
name|DB_PATH
operator|)
operator|&&
operator|(
name|Collection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|property
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
name|Map
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|property
operator|.
name|getType
argument_list|()
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't directly select toMany relationship columns. "
operator|+
literal|"Either select it with aggregate functions like count() or with flat() function to select full related objects."
argument_list|)
throw|;
block|}
comment|// evaluate ObjPath with Persistent type as toOne relations and use it as full object
return|return
name|expressionType
operator|==
name|Expression
operator|.
name|FULL_OBJECT
operator|||
operator|(
name|property
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|expressionType
operator|==
name|Expression
operator|.
name|OBJ_PATH
operator|&&
name|Persistent
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|property
operator|.
name|getType
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|private
name|void
name|extractFullObject
parameter_list|(
name|String
name|prefix
parameter_list|,
name|BaseProperty
argument_list|<
name|?
argument_list|>
name|property
parameter_list|)
block|{
name|prefix
operator|=
name|calculatePrefix
argument_list|(
name|prefix
argument_list|,
name|property
argument_list|)
expr_stmt|;
name|ensureJoin
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|ObjEntity
name|entity
init|=
name|context
operator|.
name|getResolver
argument_list|()
operator|.
name|getObjEntity
argument_list|(
name|property
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|ColumnExtractor
name|extractor
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getMetadata
argument_list|()
operator|.
name|getPageSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|extractor
operator|=
operator|new
name|IdColumnExtractor
argument_list|(
name|context
argument_list|,
name|entity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ClassDescriptor
name|descriptor
init|=
name|context
operator|.
name|getResolver
argument_list|()
operator|.
name|getClassDescriptor
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|extractor
operator|=
operator|new
name|DescriptorColumnExtractor
argument_list|(
name|context
argument_list|,
name|descriptor
argument_list|)
expr_stmt|;
block|}
name|int
name|index
init|=
name|context
operator|.
name|getResultNodeList
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// extract required columns of entity
name|extractor
operator|.
name|extract
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
comment|// Reset data row key as ObjectResolver expects it to match attribute name.
comment|// Maybe we should change resolver, as it seems cleaner to have path from root as prefix in data row key.
for|for
control|(
name|int
name|i
init|=
name|index
init|;
name|i
operator|<
name|context
operator|.
name|getResultNodeList
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|context
operator|.
name|getResultNodeList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|setDataRowKey
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Extracts prefix for this extractor from property.      * This will be just a db path for this property, if any exists.      */
specifier|private
name|String
name|calculatePrefix
parameter_list|(
name|String
name|prefix
parameter_list|,
name|BaseProperty
argument_list|<
name|?
argument_list|>
name|property
parameter_list|)
block|{
name|Expression
name|exp
init|=
name|property
operator|.
name|getExpression
argument_list|()
decl_stmt|;
name|int
name|expressionType
init|=
name|exp
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|expressionType
operator|==
name|Expression
operator|.
name|FULL_OBJECT
operator|&&
name|exp
operator|.
name|getOperandCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Object
name|op
init|=
name|exp
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|instanceof
name|Expression
condition|)
block|{
name|exp
operator|=
operator|(
name|Expression
operator|)
name|op
expr_stmt|;
block|}
block|}
return|return
name|dbPathOrDefault
argument_list|(
name|exp
argument_list|,
name|prefix
argument_list|)
return|;
block|}
specifier|private
name|String
name|dbPathOrDefault
parameter_list|(
name|Expression
name|pathExp
parameter_list|,
name|String
name|defaultPrefix
parameter_list|)
block|{
comment|// normalize to db path first
if|if
condition|(
name|pathExp
operator|.
name|getType
argument_list|()
operator|==
name|Expression
operator|.
name|OBJ_PATH
condition|)
block|{
name|pathExp
operator|=
name|context
operator|.
name|getMetadata
argument_list|()
operator|.
name|getObjEntity
argument_list|()
operator|.
name|translateToDbPath
argument_list|(
name|pathExp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pathExp
operator|.
name|getType
argument_list|()
operator|!=
name|Expression
operator|.
name|DB_PATH
condition|)
block|{
return|return
name|defaultPrefix
return|;
block|}
return|return
operator|(
operator|(
name|ASTDbPath
operator|)
name|pathExp
operator|)
operator|.
name|getPath
argument_list|()
return|;
block|}
specifier|private
name|void
name|ensureJoin
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
comment|// ensure all joins for given property
if|if
condition|(
operator|!
name|Util
operator|.
name|isEmptyString
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|PathTranslationResult
name|result
init|=
name|context
operator|.
name|getPathTranslator
argument_list|()
operator|.
name|translatePath
argument_list|(
name|context
operator|.
name|getMetadata
argument_list|()
operator|.
name|getDbEntity
argument_list|()
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|result
operator|.
name|getDbRelationship
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|relationship
lambda|->
name|context
operator|.
name|getTableTree
argument_list|()
operator|.
name|addJoinTable
argument_list|(
name|result
operator|.
name|getFinalPath
argument_list|()
argument_list|,
name|relationship
argument_list|,
name|JoinType
operator|.
name|LEFT_OUTER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

