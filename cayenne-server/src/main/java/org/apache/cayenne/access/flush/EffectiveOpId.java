begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_comment
comment|/**  * Helper value-object class that used to compare operations by "effective" id (i.e. by id snapshot,  * that will include replacement id if any).  *  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|EffectiveOpId
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MAX_NESTED_SUPPLIER_LEVEL
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|final
name|String
name|entityName
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|snapshot
decl_stmt|;
specifier|private
specifier|final
name|ObjectId
name|id
decl_stmt|;
specifier|public
name|EffectiveOpId
parameter_list|(
name|ObjectId
name|id
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
name|id
operator|.
name|getEntityName
argument_list|()
argument_list|,
name|id
operator|.
name|getIdSnapshot
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EffectiveOpId
parameter_list|(
name|String
name|entityName
parameter_list|,
name|ObjectId
name|id
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
name|entityName
argument_list|,
name|id
operator|.
name|getIdSnapshot
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EffectiveOpId
parameter_list|(
name|String
name|entityName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|idSnapshot
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|entityName
argument_list|,
name|idSnapshot
argument_list|)
expr_stmt|;
block|}
specifier|private
name|EffectiveOpId
parameter_list|(
name|ObjectId
name|id
parameter_list|,
name|String
name|entityName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|idSnapshot
parameter_list|)
block|{
name|this
operator|.
name|entityName
operator|=
name|entityName
expr_stmt|;
if|if
condition|(
name|idSnapshot
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|!
operator|(
name|idSnapshot
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|instanceof
name|Supplier
operator|)
condition|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|idSnapshot
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|snapshot
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|idSnapshot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|idSnapshot
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
name|Object
name|initial
init|=
name|value
decl_stmt|;
name|int
name|safeguard
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|value
operator|instanceof
name|Supplier
operator|&&
name|safeguard
operator|<
name|MAX_NESTED_SUPPLIER_LEVEL
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|Supplier
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|safeguard
operator|++
expr_stmt|;
block|}
comment|// simple guard from recursive Suppliers
if|if
condition|(
name|safeguard
operator|==
name|MAX_NESTED_SUPPLIER_LEVEL
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Possible recursive supplier chain for PK value: key '%s'"
argument_list|,
name|key
argument_list|)
throw|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|snapshot
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|snapshot
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|initial
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|EffectiveOpId
name|that
init|=
operator|(
name|EffectiveOpId
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|id
operator|==
name|that
operator|.
name|id
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|snapshot
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|entityName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|entityName
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|snapshot
operator|.
name|equals
argument_list|(
name|that
operator|.
name|snapshot
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|entityName
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|snapshot
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

