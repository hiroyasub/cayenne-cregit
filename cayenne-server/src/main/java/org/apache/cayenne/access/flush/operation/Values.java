begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_comment
comment|/**  * Collection of values that should be inserted or updated in DB.  *  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|Values
block|{
specifier|protected
specifier|final
name|DbRowOp
name|row
decl_stmt|;
specifier|protected
specifier|final
name|boolean
name|includeId
decl_stmt|;
comment|// new values to store to DB
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|snapshot
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|DbAttribute
argument_list|>
name|updatedAttributes
decl_stmt|;
comment|// generated flattened Ids for this insert
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|ObjectId
argument_list|>
name|flattenedIds
decl_stmt|;
specifier|public
name|Values
parameter_list|(
name|DbRowOp
name|row
parameter_list|,
name|boolean
name|includeId
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|includeId
operator|=
name|includeId
expr_stmt|;
block|}
specifier|public
name|void
name|addValue
parameter_list|(
name|DbAttribute
name|attribute
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|snapshot
operator|==
literal|null
condition|)
block|{
name|snapshot
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|updatedAttributes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|snapshot
operator|.
name|put
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|updatedAttributes
operator|.
name|contains
argument_list|(
name|attribute
argument_list|)
condition|)
block|{
name|updatedAttributes
operator|.
name|add
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|merge
parameter_list|(
name|Values
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|snapshot
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|snapshot
operator|=
name|other
operator|.
name|snapshot
expr_stmt|;
name|this
operator|.
name|updatedAttributes
operator|=
name|other
operator|.
name|updatedAttributes
expr_stmt|;
block|}
if|else if
condition|(
name|other
operator|.
name|snapshot
operator|!=
literal|null
condition|)
block|{
name|other
operator|.
name|snapshot
operator|.
name|forEach
argument_list|(
name|snapshot
operator|::
name|putIfAbsent
argument_list|)
expr_stmt|;
name|other
operator|.
name|updatedAttributes
operator|.
name|forEach
argument_list|(
name|attr
lambda|->
block|{
if|if
condition|(
operator|!
name|updatedAttributes
operator|.
name|contains
argument_list|(
name|attr
argument_list|)
condition|)
block|{
name|updatedAttributes
operator|.
name|add
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|flattenedIds
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|flattenedIds
operator|==
literal|null
condition|)
block|{
name|flattenedIds
operator|=
name|other
operator|.
name|getFlattenedIds
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|other
operator|.
name|flattenedIds
operator|.
name|forEach
argument_list|(
parameter_list|(
name|path
parameter_list|,
name|id
parameter_list|)
lambda|->
name|flattenedIds
operator|.
name|compute
argument_list|(
name|path
argument_list|,
parameter_list|(
name|p
parameter_list|,
name|existing
parameter_list|)
lambda|->
block|{
block_content|if(id.getEntityName(
argument_list|)
operator|.
name|equals
argument_list|(
name|row
operator|.
name|getChangeId
argument_list|()
operator|.
name|getEntityName
argument_list|()
argument_list|)
operator|||
operator|(
name|existing
operator|!=
literal|null
operator|&&
name|existing
operator|.
name|getEntityName
argument_list|()
operator|.
name|equals
argument_list|(
name|row
operator|.
name|getChangeId
argument_list|()
operator|.
name|getEntityName
argument_list|()
argument_list|)
operator|)
block_content|)
block|{
return|return
name|row
operator|.
name|getChangeId
argument_list|()
return|;
block|}
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
return|return
name|existing
return|;
block|}
return|return
name|id
return|;
block|}
block_content|)
block|)
class|;
end_class

begin_function
unit|}         }     }      public
name|void
name|addFlattenedId
parameter_list|(
name|String
name|path
parameter_list|,
name|ObjectId
name|id
parameter_list|)
block|{
if|if
condition|(
name|flattenedIds
operator|==
literal|null
condition|)
block|{
name|flattenedIds
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|flattenedIds
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSnapshot
parameter_list|()
block|{
if|if
condition|(
operator|!
name|includeId
condition|)
block|{
if|if
condition|(
name|snapshot
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
return|return
name|snapshot
return|;
block|}
else|else
block|{
if|if
condition|(
name|snapshot
operator|==
literal|null
condition|)
block|{
name|snapshot
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|snapshot
operator|.
name|putAll
argument_list|(
name|row
operator|.
name|getChangeId
argument_list|()
operator|.
name|getIdSnapshot
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|snapshot
return|;
block|}
name|snapshot
operator|.
name|putAll
argument_list|(
name|row
operator|.
name|getChangeId
argument_list|()
operator|.
name|getIdSnapshot
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|snapshot
return|;
block|}
block|}
end_function

begin_function
specifier|public
name|List
argument_list|<
name|DbAttribute
argument_list|>
name|getUpdatedAttributes
parameter_list|()
block|{
if|if
condition|(
name|updatedAttributes
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|updatedAttributes
return|;
block|}
end_function

begin_function
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ObjectId
argument_list|>
name|getFlattenedIds
parameter_list|()
block|{
if|if
condition|(
name|flattenedIds
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
return|return
name|flattenedIds
return|;
block|}
end_function

begin_function
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
if|if
condition|(
name|includeId
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|snapshot
operator|==
literal|null
operator|||
name|snapshot
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|clear
parameter_list|()
block|{
if|if
condition|(
name|snapshot
operator|!=
literal|null
condition|)
block|{
name|snapshot
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|updatedAttributes
operator|!=
literal|null
condition|)
block|{
name|updatedAttributes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|flattenedIds
operator|!=
literal|null
condition|)
block|{
name|flattenedIds
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
name|boolean
name|isSameBatch
parameter_list|(
name|Values
name|other
parameter_list|)
block|{
if|if
condition|(
name|snapshot
operator|==
literal|null
condition|)
block|{
return|return
name|other
operator|.
name|snapshot
operator|==
literal|null
return|;
block|}
if|if
condition|(
name|other
operator|.
name|snapshot
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|snapshot
operator|.
name|keySet
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|snapshot
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

