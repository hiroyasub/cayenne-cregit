begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
operator|.
name|DbRowOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
operator|.
name|DbRowOpVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
operator|.
name|DeleteDbRowOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
operator|.
name|InsertDbRowOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
operator|.
name|UpdateDbRowOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|BatchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|DeleteBatchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|InsertBatchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|UpdateBatchQuery
import|;
end_import

begin_comment
comment|/**  * Visitor that creates batch queries.  * It relies on correct sorting of {@link DbRowOp} to just linearly scan of rows and put them in batches.  *  * @since 4.2  */
end_comment

begin_comment
comment|// TODO: pass DbRowOp as argument directly to batch...
end_comment

begin_class
class|class
name|QueryCreatorVisitor
implements|implements
name|DbRowOpVisitor
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|BatchQuery
argument_list|>
name|queryList
decl_stmt|;
specifier|private
specifier|final
name|int
name|batchSize
decl_stmt|;
specifier|private
name|DbRowOp
name|lastRow
init|=
literal|null
decl_stmt|;
specifier|private
name|BatchQuery
name|lastBatch
init|=
literal|null
decl_stmt|;
name|QueryCreatorVisitor
parameter_list|(
name|int
name|size
parameter_list|)
block|{
comment|// these sizes are pretty much random ...
name|this
operator|.
name|queryList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Math
operator|.
name|min
argument_list|(
literal|4
argument_list|,
name|size
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|batchSize
operator|=
name|Math
operator|.
name|min
argument_list|(
literal|2
argument_list|,
name|size
operator|/
literal|3
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|BatchQuery
argument_list|>
name|getQueryList
parameter_list|()
block|{
return|return
name|queryList
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitInsert
parameter_list|(
name|InsertDbRowOp
name|dbRow
parameter_list|)
block|{
name|InsertBatchQuery
name|query
decl_stmt|;
if|if
condition|(
name|lastRow
operator|==
literal|null
operator|||
operator|!
name|lastRow
operator|.
name|isSameBatch
argument_list|(
name|dbRow
argument_list|)
condition|)
block|{
name|query
operator|=
operator|new
name|InsertBatchQuery
argument_list|(
name|dbRow
operator|.
name|getEntity
argument_list|()
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|queryList
operator|.
name|add
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|lastBatch
operator|=
name|query
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
operator|(
name|InsertBatchQuery
operator|)
name|lastBatch
expr_stmt|;
block|}
name|query
operator|.
name|add
argument_list|(
name|dbRow
operator|.
name|getValues
argument_list|()
operator|.
name|getSnapshot
argument_list|()
argument_list|,
name|dbRow
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|lastRow
operator|=
name|dbRow
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitUpdate
parameter_list|(
name|UpdateDbRowOp
name|dbRow
parameter_list|)
block|{
comment|// skip empty update..
if|if
condition|(
name|dbRow
operator|.
name|getValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|UpdateBatchQuery
name|query
decl_stmt|;
if|if
condition|(
name|lastRow
operator|==
literal|null
operator|||
operator|!
name|lastRow
operator|.
name|isSameBatch
argument_list|(
name|dbRow
argument_list|)
condition|)
block|{
name|query
operator|=
operator|new
name|UpdateBatchQuery
argument_list|(
name|dbRow
operator|.
name|getEntity
argument_list|()
argument_list|,
name|dbRow
operator|.
name|getQualifier
argument_list|()
operator|.
name|getQualifierAttributes
argument_list|()
argument_list|,
name|dbRow
operator|.
name|getValues
argument_list|()
operator|.
name|getUpdatedAttributes
argument_list|()
argument_list|,
name|dbRow
operator|.
name|getQualifier
argument_list|()
operator|.
name|getNullQualifierNames
argument_list|()
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUsingOptimisticLocking
argument_list|(
name|dbRow
operator|.
name|getQualifier
argument_list|()
operator|.
name|isUsingOptimisticLocking
argument_list|()
argument_list|)
expr_stmt|;
name|queryList
operator|.
name|add
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|lastBatch
operator|=
name|query
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
operator|(
name|UpdateBatchQuery
operator|)
name|lastBatch
expr_stmt|;
block|}
name|query
operator|.
name|add
argument_list|(
name|dbRow
operator|.
name|getQualifier
argument_list|()
operator|.
name|getSnapshot
argument_list|()
argument_list|,
name|dbRow
operator|.
name|getValues
argument_list|()
operator|.
name|getSnapshot
argument_list|()
argument_list|,
name|dbRow
operator|.
name|getChangeId
argument_list|()
argument_list|)
expr_stmt|;
name|lastRow
operator|=
name|dbRow
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|visitDelete
parameter_list|(
name|DeleteDbRowOp
name|dbRow
parameter_list|)
block|{
name|DeleteBatchQuery
name|query
decl_stmt|;
if|if
condition|(
name|lastRow
operator|==
literal|null
operator|||
operator|!
name|lastRow
operator|.
name|isSameBatch
argument_list|(
name|dbRow
argument_list|)
condition|)
block|{
name|query
operator|=
operator|new
name|DeleteBatchQuery
argument_list|(
name|dbRow
operator|.
name|getEntity
argument_list|()
argument_list|,
name|dbRow
operator|.
name|getQualifier
argument_list|()
operator|.
name|getQualifierAttributes
argument_list|()
argument_list|,
name|dbRow
operator|.
name|getQualifier
argument_list|()
operator|.
name|getNullQualifierNames
argument_list|()
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUsingOptimisticLocking
argument_list|(
name|dbRow
operator|.
name|getQualifier
argument_list|()
operator|.
name|isUsingOptimisticLocking
argument_list|()
argument_list|)
expr_stmt|;
name|queryList
operator|.
name|add
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|lastBatch
operator|=
name|query
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
operator|(
name|DeleteBatchQuery
operator|)
name|lastBatch
expr_stmt|;
block|}
name|query
operator|.
name|add
argument_list|(
name|dbRow
operator|.
name|getQualifier
argument_list|()
operator|.
name|getSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|lastRow
operator|=
name|dbRow
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

