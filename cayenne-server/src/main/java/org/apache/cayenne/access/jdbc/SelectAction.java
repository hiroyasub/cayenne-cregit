begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|OperationObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|reader
operator|.
name|RowReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|DbAttributeBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
operator|.
name|SelectTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|log
operator|.
name|JdbcEventLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|PrefetchProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|PrefetchTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Select
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A SQLAction that handles SelectQuery execution.  *   * @since 1.2  */
end_comment

begin_class
specifier|public
class|class
name|SelectAction
extends|extends
name|BaseSQLAction
block|{
specifier|private
specifier|static
name|void
name|bind
parameter_list|(
name|DbAdapter
name|adapter
parameter_list|,
name|PreparedStatement
name|statement
parameter_list|,
name|DbAttributeBinding
index|[]
name|bindings
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|DbAttributeBinding
name|b
range|:
name|bindings
control|)
block|{
if|if
condition|(
name|b
operator|.
name|isExcluded
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// null DbAttributes are a result of inferior qualifier
comment|// processing (qualifier can't map parameters to DbAttributes
comment|// and therefore only supports standard java types now) hence, a
comment|// special moronic case here:
if|if
condition|(
name|b
operator|.
name|getAttribute
argument_list|()
operator|==
literal|null
condition|)
block|{
name|statement
operator|.
name|setObject
argument_list|(
name|b
operator|.
name|getStatementPosition
argument_list|()
argument_list|,
name|b
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|adapter
operator|.
name|bindParameter
argument_list|(
name|statement
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|Select
argument_list|<
name|?
argument_list|>
name|query
decl_stmt|;
specifier|protected
name|QueryMetadata
name|queryMetadata
decl_stmt|;
comment|/** 	 * @since 4.0 	 */
specifier|public
name|SelectAction
parameter_list|(
name|Select
argument_list|<
name|?
argument_list|>
name|query
parameter_list|,
name|DataNode
name|dataNode
parameter_list|)
block|{
name|super
argument_list|(
name|dataNode
argument_list|)
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|queryMetadata
operator|=
name|query
operator|.
name|getMetaData
argument_list|(
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|performAction
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|OperationObserver
name|observer
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|JdbcEventLogger
name|logger
init|=
name|dataNode
operator|.
name|getJdbcEventLogger
argument_list|()
decl_stmt|;
name|SelectTranslator
name|translator
init|=
name|dataNode
operator|.
name|selectTranslator
argument_list|(
name|query
argument_list|)
decl_stmt|;
specifier|final
name|String
name|sql
init|=
name|translator
operator|.
name|getSql
argument_list|()
decl_stmt|;
specifier|final
name|DbAttributeBinding
index|[]
name|bindings
init|=
name|translator
operator|.
name|getBindings
argument_list|()
decl_stmt|;
name|logger
operator|.
name|logQuery
argument_list|(
name|sql
argument_list|,
name|bindings
argument_list|)
expr_stmt|;
name|PreparedStatement
name|statement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|bind
argument_list|(
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|statement
argument_list|,
name|bindings
argument_list|)
expr_stmt|;
name|int
name|fetchSize
init|=
name|queryMetadata
operator|.
name|getStatementFetchSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|fetchSize
operator|!=
literal|0
condition|)
block|{
name|statement
operator|.
name|setFetchSize
argument_list|(
name|fetchSize
argument_list|)
expr_stmt|;
block|}
name|ResultSet
name|rs
decl_stmt|;
comment|// need to run in try-catch block to close statement properly if
comment|// exception happens
try|try
block|{
name|rs
operator|=
name|statement
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
name|RowDescriptor
name|descriptor
init|=
operator|new
name|RowDescriptorBuilder
argument_list|()
operator|.
name|setColumns
argument_list|(
name|translator
operator|.
name|getResultColumns
argument_list|()
argument_list|)
operator|.
name|getDescriptor
argument_list|(
name|dataNode
operator|.
name|getAdapter
argument_list|()
operator|.
name|getExtendedTypes
argument_list|()
argument_list|)
decl_stmt|;
name|RowReader
argument_list|<
name|?
argument_list|>
name|rowReader
init|=
name|dataNode
operator|.
name|rowReader
argument_list|(
name|descriptor
argument_list|,
name|queryMetadata
argument_list|,
name|translator
operator|.
name|getAttributeOverrides
argument_list|()
argument_list|)
decl_stmt|;
name|ResultIterator
argument_list|<
name|?
argument_list|>
name|it
init|=
operator|new
name|JDBCResultIterator
argument_list|<>
argument_list|(
name|statement
argument_list|,
name|rs
argument_list|,
name|rowReader
argument_list|)
decl_stmt|;
name|it
operator|=
name|forIteratedResult
argument_list|(
name|it
argument_list|,
name|observer
argument_list|,
name|connection
argument_list|,
name|t1
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|it
operator|=
name|forSuppressedDistinct
argument_list|(
name|it
argument_list|,
name|translator
argument_list|)
expr_stmt|;
name|it
operator|=
name|forFetchLimit
argument_list|(
name|it
argument_list|,
name|translator
argument_list|)
expr_stmt|;
comment|// TODO: Should do something about closing ResultSet and
comment|// PreparedStatement in this method, instead of relying on
comment|// DefaultResultIterator to do that later
if|if
condition|(
name|observer
operator|.
name|isIteratedResult
argument_list|()
condition|)
block|{
try|try
block|{
name|observer
operator|.
name|nextRows
argument_list|(
name|query
argument_list|,
name|it
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|it
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|?
argument_list|>
name|resultRows
decl_stmt|;
try|try
block|{
name|resultRows
operator|=
name|it
operator|.
name|allRows
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|it
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|dataNode
operator|.
name|getJdbcEventLogger
argument_list|()
operator|.
name|logSelectCount
argument_list|(
name|resultRows
operator|.
name|size
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t1
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|observer
operator|.
name|nextRows
argument_list|(
name|query
argument_list|,
name|resultRows
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|ResultIterator
argument_list|<
name|T
argument_list|>
name|forIteratedResult
parameter_list|(
name|ResultIterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|,
name|OperationObserver
name|observer
parameter_list|,
name|Connection
name|connection
parameter_list|,
specifier|final
name|long
name|queryStartedAt
parameter_list|,
specifier|final
name|String
name|sql
parameter_list|)
block|{
if|if
condition|(
operator|!
name|observer
operator|.
name|isIteratedResult
argument_list|()
condition|)
block|{
return|return
name|iterator
return|;
block|}
return|return
operator|new
name|ConnectionAwareResultIterator
argument_list|<
name|T
argument_list|>
argument_list|(
name|iterator
argument_list|,
name|connection
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doClose
parameter_list|()
block|{
name|dataNode
operator|.
name|getJdbcEventLogger
argument_list|()
operator|.
name|logSelectCount
argument_list|(
name|rowCounter
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|queryStartedAt
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|super
operator|.
name|doClose
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|ResultIterator
argument_list|<
name|T
argument_list|>
name|forFetchLimit
parameter_list|(
name|ResultIterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|,
name|SelectTranslator
name|translator
parameter_list|)
block|{
comment|// wrap iterator in a fetch limit checker ... there are a few cases when
comment|// in-memory fetch limit is a noop, however in a general case this is
comment|// needed, as the SQL result count does not directly correspond to the
comment|// number of objects returned from Cayenne.
name|int
name|fetchLimit
init|=
name|queryMetadata
operator|.
name|getFetchLimit
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|translator
operator|.
name|isSuppressingDistinct
argument_list|()
condition|?
name|queryMetadata
operator|.
name|getFetchOffset
argument_list|()
else|:
name|getInMemoryOffset
argument_list|(
name|queryMetadata
operator|.
name|getFetchOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fetchLimit
operator|>
literal|0
operator|||
name|offset
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|LimitResultIterator
argument_list|<>
argument_list|(
name|iterator
argument_list|,
name|offset
argument_list|,
name|fetchLimit
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|iterator
return|;
block|}
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|ResultIterator
argument_list|<
name|T
argument_list|>
name|forSuppressedDistinct
parameter_list|(
name|ResultIterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|,
name|SelectTranslator
name|translator
parameter_list|)
block|{
if|if
condition|(
operator|!
name|translator
operator|.
name|isSuppressingDistinct
argument_list|()
operator|||
name|queryMetadata
operator|.
name|isSuppressingDistinct
argument_list|()
condition|)
block|{
return|return
name|iterator
return|;
block|}
comment|// wrap result iterator if distinct has to be suppressed
comment|// a joint prefetch warrants full row compare
specifier|final
name|boolean
index|[]
name|compareFullRows
init|=
operator|new
name|boolean
index|[
literal|1
index|]
decl_stmt|;
name|compareFullRows
index|[
literal|0
index|]
operator|=
name|translator
operator|.
name|hasJoins
argument_list|()
expr_stmt|;
specifier|final
name|PrefetchTreeNode
name|rootPrefetch
init|=
name|queryMetadata
operator|.
name|getPrefetchTree
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|compareFullRows
index|[
literal|0
index|]
operator|&&
name|rootPrefetch
operator|!=
literal|null
condition|)
block|{
name|rootPrefetch
operator|.
name|traverse
argument_list|(
operator|new
name|PrefetchProcessor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|finishPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|startDisjointPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
comment|// continue to children only if we are at root
return|return
name|rootPrefetch
operator|==
name|node
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|startDisjointByIdPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
comment|// continue to children only if we are at root
return|return
name|rootPrefetch
operator|==
name|node
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|startUnknownPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
comment|// continue to children only if we are at root
return|return
name|rootPrefetch
operator|==
name|node
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|startJointPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|rootPrefetch
operator|!=
name|node
condition|)
block|{
name|compareFullRows
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|startPhantomPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|DistinctResultIterator
argument_list|<>
argument_list|(
name|iterator
argument_list|,
name|queryMetadata
operator|.
name|getDbEntity
argument_list|()
argument_list|,
name|compareFullRows
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

