begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|ObjectDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
operator|.
name|DbRowOpWithQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|AttributeProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ToManyProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ToOneProperty
import|;
end_import

begin_comment
comment|/**  * {@link PropertyVisitor} that builds optimistic lock qualifier for given db change.  *  * @since 4.2  */
end_comment

begin_class
class|class
name|OptimisticLockQualifierBuilder
implements|implements
name|PropertyVisitor
block|{
specifier|private
specifier|final
name|DbRowOpWithQualifier
name|dbRow
decl_stmt|;
specifier|private
specifier|final
name|ObjectDiff
name|diff
decl_stmt|;
name|OptimisticLockQualifierBuilder
parameter_list|(
name|DbRowOpWithQualifier
name|dbRow
parameter_list|,
name|ObjectDiff
name|diff
parameter_list|)
block|{
name|this
operator|.
name|dbRow
operator|=
name|dbRow
expr_stmt|;
name|this
operator|.
name|diff
operator|=
name|diff
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visitAttribute
parameter_list|(
name|AttributeProperty
name|property
parameter_list|)
block|{
name|ObjAttribute
name|attribute
init|=
name|property
operator|.
name|getAttribute
argument_list|()
decl_stmt|;
name|DbAttribute
name|dbAttribute
init|=
name|attribute
operator|.
name|getDbAttribute
argument_list|()
decl_stmt|;
if|if
condition|(
name|attribute
operator|.
name|isUsedForLocking
argument_list|()
operator|&&
name|dbAttribute
operator|.
name|getEntity
argument_list|()
operator|==
name|dbRow
operator|.
name|getEntity
argument_list|()
condition|)
block|{
name|dbRow
operator|.
name|getQualifier
argument_list|()
operator|.
name|addAdditionalQualifier
argument_list|(
name|dbAttribute
argument_list|,
name|diff
operator|.
name|getSnapshotValue
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// unimplemented case, see CAY-2560 for details.
comment|// we can't grab sub entity row here as no good accessor for this implemented.
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visitToOne
parameter_list|(
name|ToOneProperty
name|property
parameter_list|)
block|{
name|ObjRelationship
name|relationship
init|=
name|property
operator|.
name|getRelationship
argument_list|()
decl_stmt|;
if|if
condition|(
name|relationship
operator|.
name|isUsedForLocking
argument_list|()
condition|)
block|{
name|ObjectId
name|value
init|=
name|diff
operator|.
name|getArcSnapshotValue
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|DbRelationship
name|dbRelationship
init|=
name|relationship
operator|.
name|getDbRelationships
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|DbJoin
name|join
range|:
name|dbRelationship
operator|.
name|getJoins
argument_list|()
control|)
block|{
name|DbAttribute
name|source
init|=
name|join
operator|.
name|getSource
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|source
operator|.
name|isPrimaryKey
argument_list|()
condition|)
block|{
name|Object
name|valueObjectId
init|=
name|value
operator|!=
literal|null
condition|?
name|ObjectIdValueSupplier
operator|.
name|getFor
argument_list|(
name|value
argument_list|,
name|join
operator|.
name|getTargetName
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|dbRow
operator|.
name|getQualifier
argument_list|()
operator|.
name|addAdditionalQualifier
argument_list|(
name|source
argument_list|,
name|valueObjectId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|visitToMany
parameter_list|(
name|ToManyProperty
name|property
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

