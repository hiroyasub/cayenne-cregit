begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|ColumnNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|SimpleNodeTreeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTAggregateFunctionCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|BaseProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
class|class
name|ResultNodeDescriptor
block|{
specifier|private
specifier|final
name|Node
name|node
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|inDataRow
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isAggregate
decl_stmt|;
specifier|private
specifier|final
name|BaseProperty
argument_list|<
name|?
argument_list|>
name|property
decl_stmt|;
specifier|private
name|String
name|dataRowKey
decl_stmt|;
specifier|private
name|DbAttribute
name|dbAttribute
decl_stmt|;
specifier|private
name|String
name|javaType
decl_stmt|;
name|ResultNodeDescriptor
parameter_list|(
name|Node
name|node
parameter_list|,
name|boolean
name|inDataRow
parameter_list|,
name|BaseProperty
argument_list|<
name|?
argument_list|>
name|property
parameter_list|,
name|String
name|dataRowKey
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|inDataRow
operator|=
name|inDataRow
expr_stmt|;
name|this
operator|.
name|property
operator|=
name|property
expr_stmt|;
name|this
operator|.
name|dataRowKey
operator|=
name|dataRowKey
expr_stmt|;
name|this
operator|.
name|isAggregate
operator|=
name|property
operator|!=
literal|null
operator|&&
name|property
operator|.
name|getExpression
argument_list|()
operator|instanceof
name|ASTAggregateFunctionCall
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAggregate
parameter_list|()
block|{
return|return
name|isAggregate
return|;
block|}
specifier|public
name|boolean
name|isInDataRow
parameter_list|()
block|{
return|return
name|inDataRow
return|;
block|}
specifier|public
name|BaseProperty
argument_list|<
name|?
argument_list|>
name|getProperty
parameter_list|()
block|{
return|return
name|property
return|;
block|}
specifier|public
name|Node
name|getNode
parameter_list|()
block|{
return|return
name|node
return|;
block|}
specifier|public
name|String
name|getDataRowKey
parameter_list|()
block|{
if|if
condition|(
name|dataRowKey
operator|!=
literal|null
condition|)
block|{
return|return
name|dataRowKey
return|;
block|}
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
return|return
name|property
operator|.
name|getAlias
argument_list|()
return|;
block|}
if|if
condition|(
name|getDbAttribute
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getDbAttribute
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setDataRowKey
parameter_list|(
name|String
name|dataRowKey
parameter_list|)
block|{
name|this
operator|.
name|dataRowKey
operator|=
name|dataRowKey
expr_stmt|;
block|}
specifier|public
name|ResultNodeDescriptor
name|setJavaType
parameter_list|(
name|String
name|javaType
parameter_list|)
block|{
name|this
operator|.
name|javaType
operator|=
name|javaType
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ResultNodeDescriptor
name|setDbAttribute
parameter_list|(
name|DbAttribute
name|dbAttribute
parameter_list|)
block|{
name|this
operator|.
name|dbAttribute
operator|=
name|dbAttribute
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|getJavaType
parameter_list|()
block|{
if|if
condition|(
name|javaType
operator|!=
literal|null
condition|)
block|{
return|return
name|javaType
return|;
block|}
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
return|return
name|property
operator|.
name|getType
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
return|;
block|}
if|if
condition|(
name|getDbAttribute
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|TypesMapping
operator|.
name|getJavaBySqlType
argument_list|(
name|getDbAttribute
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|getJdbcType
parameter_list|()
block|{
if|if
condition|(
name|getDbAttribute
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getDbAttribute
argument_list|()
operator|.
name|getType
argument_list|()
return|;
block|}
if|if
condition|(
name|getProperty
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|TypesMapping
operator|.
name|getSqlTypeByJava
argument_list|(
name|getProperty
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
return|return
name|TypesMapping
operator|.
name|NOT_DEFINED
return|;
block|}
specifier|public
name|DbAttribute
name|getDbAttribute
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|dbAttribute
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|dbAttribute
return|;
block|}
name|DbAttribute
index|[]
name|dbAttribute
init|=
block|{
literal|null
block|}
decl_stmt|;
name|node
operator|.
name|visit
argument_list|(
operator|new
name|SimpleNodeTreeVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|onNodeStart
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|==
name|NodeType
operator|.
name|COLUMN
condition|)
block|{
name|dbAttribute
index|[
literal|0
index|]
operator|=
operator|(
operator|(
name|ColumnNode
operator|)
name|node
operator|)
operator|.
name|getAttribute
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|dbAttribute
operator|=
name|dbAttribute
index|[
literal|0
index|]
return|;
block|}
block|}
end_class

end_unit

