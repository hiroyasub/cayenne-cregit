begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/** * @since 4.0. */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|DbAttributesBaseLoader
implements|implements
name|DbAttributesLoader
block|{
specifier|private
specifier|final
name|String
name|catalog
decl_stmt|;
specifier|private
specifier|final
name|String
name|schema
decl_stmt|;
specifier|private
specifier|final
name|DatabaseMetaData
name|metaData
decl_stmt|;
specifier|private
specifier|final
name|DbAdapter
name|adapter
decl_stmt|;
specifier|public
name|DbAttributesBaseLoader
parameter_list|(
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|DatabaseMetaData
name|metaData
parameter_list|,
name|DbAdapter
name|adapter
parameter_list|)
block|{
name|this
operator|.
name|catalog
operator|=
name|catalog
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|metaData
operator|=
name|metaData
expr_stmt|;
name|this
operator|.
name|adapter
operator|=
name|adapter
expr_stmt|;
block|}
specifier|protected
name|DbAttribute
name|loadDbAttribute
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|columns
parameter_list|,
name|ResultSet
name|rs
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// gets attribute's (column's) information
name|int
name|columnType
init|=
name|rs
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
decl_stmt|;
comment|// ignore precision of non-decimal columns
name|int
name|decimalDigits
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|TypesMapping
operator|.
name|isDecimal
argument_list|(
name|columnType
argument_list|)
condition|)
block|{
name|decimalDigits
operator|=
name|rs
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|wasNull
argument_list|()
condition|)
block|{
name|decimalDigits
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
comment|// create attribute delegating this task to adapter
name|DbAttribute
name|attr
init|=
name|adapter
operator|.
name|buildAttribute
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
argument_list|,
name|columnType
argument_list|,
name|rs
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|,
name|decimalDigits
argument_list|,
name|rs
operator|.
name|getBoolean
argument_list|(
literal|"NULLABLE"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|columns
operator|.
name|contains
argument_list|(
literal|"IS_AUTOINCREMENT"
argument_list|)
condition|)
block|{
name|String
name|autoIncrement
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"IS_AUTOINCREMENT"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"YES"
operator|.
name|equals
argument_list|(
name|autoIncrement
argument_list|)
condition|)
block|{
name|attr
operator|.
name|setGenerated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|attr
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|loadDbAttributes
parameter_list|(
name|DbEntity
name|entity
parameter_list|)
block|{
for|for
control|(
name|DbAttribute
name|attr
range|:
name|loadDbAttributes
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
control|)
block|{
name|attr
operator|.
name|setEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
comment|// override existing attributes if it comes again
if|if
condition|(
name|entity
operator|.
name|getAttribute
argument_list|(
name|attr
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|entity
operator|.
name|removeAttribute
argument_list|(
name|attr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|entity
operator|.
name|addAttribute
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|List
argument_list|<
name|DbAttribute
argument_list|>
name|loadDbAttributes
parameter_list|(
name|String
name|tableName
parameter_list|)
function_decl|;
specifier|protected
name|String
name|getCatalog
parameter_list|()
block|{
return|return
name|catalog
return|;
block|}
specifier|protected
name|String
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
specifier|protected
name|DatabaseMetaData
name|getMetaData
parameter_list|()
block|{
return|return
name|metaData
return|;
block|}
block|}
end_class

end_unit

