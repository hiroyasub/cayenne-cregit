begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|ColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
class|class
name|ColumnDescriptorStage
implements|implements
name|TranslationStage
block|{
annotation|@
name|Override
specifier|public
name|void
name|perform
parameter_list|(
name|TranslatorContext
name|context
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ResultNodeDescriptor
name|resultNode
range|:
name|context
operator|.
name|getResultNodeList
argument_list|()
control|)
block|{
name|context
operator|.
name|getSelectBuilder
argument_list|()
operator|.
name|result
argument_list|(
name|resultNode
operator|::
name|getNode
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|resultNode
operator|.
name|isInDataRow
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|name
decl_stmt|;
name|DbAttribute
name|attribute
init|=
name|resultNode
operator|.
name|getDbAttribute
argument_list|()
decl_stmt|;
if|if
condition|(
name|attribute
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|attribute
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// generated name
name|name
operator|=
literal|"__c"
operator|+
name|i
operator|++
expr_stmt|;
block|}
name|ColumnDescriptor
name|descriptor
init|=
operator|new
name|ColumnDescriptor
argument_list|(
name|name
argument_list|,
name|resultNode
operator|.
name|getJdbcType
argument_list|()
argument_list|,
name|resultNode
operator|.
name|getJavaType
argument_list|()
argument_list|)
decl_stmt|;
name|descriptor
operator|.
name|setAttribute
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
name|descriptor
operator|.
name|setDataRowKey
argument_list|(
name|resultNode
operator|.
name|getDataRowKey
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getColumnDescriptors
argument_list|()
operator|.
name|add
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

