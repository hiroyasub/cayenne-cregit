begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|JoinType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
class|class
name|PathTranslator
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PathTranslationResult
argument_list|>
name|objResultCache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PathTranslationResult
argument_list|>
name|dbResultCache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|TranslatorContext
name|context
decl_stmt|;
name|PathTranslator
parameter_list|(
name|TranslatorContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
name|PathTranslationResult
name|translatePath
parameter_list|(
name|ObjEntity
name|entity
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|parentPath
parameter_list|)
block|{
return|return
name|objResultCache
operator|.
name|computeIfAbsent
argument_list|(
name|parentPath
operator|+
literal|'.'
operator|+
name|entity
operator|.
name|getName
argument_list|()
operator|+
literal|'.'
operator|+
name|path
argument_list|,
parameter_list|(
name|k
parameter_list|)
lambda|->
operator|new
name|ObjPathProcessor
argument_list|(
name|context
argument_list|,
name|entity
argument_list|,
name|parentPath
argument_list|)
operator|.
name|process
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
name|PathTranslationResult
name|translatePath
parameter_list|(
name|ObjEntity
name|entity
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
name|translatePath
argument_list|(
name|entity
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|PathTranslationResult
name|translatePath
parameter_list|(
name|DbEntity
name|entity
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|parentPath
parameter_list|,
name|boolean
name|flattenedPath
parameter_list|)
block|{
return|return
name|dbResultCache
operator|.
name|computeIfAbsent
argument_list|(
name|parentPath
operator|+
literal|'.'
operator|+
name|entity
operator|.
name|getName
argument_list|()
operator|+
literal|'.'
operator|+
name|path
argument_list|,
parameter_list|(
name|k
parameter_list|)
lambda|->
operator|new
name|DbPathProcessor
argument_list|(
name|context
argument_list|,
name|entity
argument_list|,
name|parentPath
argument_list|,
name|flattenedPath
argument_list|)
operator|.
name|process
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
name|PathTranslationResult
name|translatePath
parameter_list|(
name|DbEntity
name|entity
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|parentPath
parameter_list|)
block|{
return|return
name|translatePath
argument_list|(
name|entity
argument_list|,
name|path
argument_list|,
name|parentPath
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|PathTranslationResult
name|translatePath
parameter_list|(
name|DbEntity
name|entity
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
name|translatePath
argument_list|(
name|entity
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|PathTranslationResult
name|translateIdPath
parameter_list|(
name|ObjEntity
name|entity
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|int
name|lastSegmentPos
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|String
name|objPathPart
init|=
name|lastSegmentPos
operator|==
operator|-
literal|1
condition|?
literal|""
else|:
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastSegmentPos
argument_list|)
decl_stmt|;
name|String
name|pkName
init|=
name|lastSegmentPos
operator|==
operator|-
literal|1
condition|?
name|path
else|:
name|path
operator|.
name|substring
argument_list|(
name|lastSegmentPos
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|objPathPart
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// get PK directly from the query root
if|if
condition|(
name|pkName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't translate empty dbid path"
argument_list|)
throw|;
block|}
name|DbAttribute
name|pk
init|=
name|entity
operator|.
name|getDbEntity
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|pkName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pk
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't translate dbid path '%s', no such pk"
argument_list|,
name|path
argument_list|)
throw|;
block|}
return|return
operator|new
name|DbIdPathTranslationResult
argument_list|(
literal|""
argument_list|,
name|pk
argument_list|)
return|;
block|}
else|else
block|{
comment|// resolve object path part and get PK from the target entity
name|PathTranslationResult
name|dbIdResult
init|=
name|translatePath
argument_list|(
name|entity
argument_list|,
name|objPathPart
argument_list|)
decl_stmt|;
name|DbRelationship
name|relationship
init|=
name|dbIdResult
operator|.
name|getDbRelationship
argument_list|()
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't translate dbid path '%s', can't resolve relationship %s"
argument_list|,
name|path
argument_list|,
name|objPathPart
argument_list|)
argument_list|)
decl_stmt|;
comment|// manually join last segment as obj path translation would skip it
name|JoinType
name|joinType
init|=
name|objPathPart
operator|.
name|endsWith
argument_list|(
literal|"+"
argument_list|)
condition|?
name|JoinType
operator|.
name|LEFT_OUTER
else|:
name|JoinType
operator|.
name|INNER
decl_stmt|;
name|context
operator|.
name|getTableTree
argument_list|()
operator|.
name|addJoinTable
argument_list|(
name|dbIdResult
operator|.
name|getFinalPath
argument_list|()
argument_list|,
name|relationship
argument_list|,
name|joinType
argument_list|)
expr_stmt|;
name|DbAttribute
name|pk
init|=
name|relationship
operator|.
name|getTargetEntity
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|pkName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pk
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't translate dbid path '%s', no such pk"
argument_list|,
name|path
argument_list|)
throw|;
block|}
return|return
operator|new
name|DbIdPathTranslationResult
argument_list|(
name|dbIdResult
operator|.
name|getFinalPath
argument_list|()
argument_list|,
name|pk
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

