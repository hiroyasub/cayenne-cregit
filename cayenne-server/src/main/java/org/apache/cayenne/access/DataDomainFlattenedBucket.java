begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|BatchQueryRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|DeleteBatchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|InsertBatchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A sync bucket that holds flattened queries.  *   * @since 1.2  */
end_comment

begin_class
class|class
name|DataDomainFlattenedBucket
block|{
specifier|final
name|DataDomainFlushAction
name|parent
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|DbEntity
argument_list|,
name|List
argument_list|<
name|FlattenedArcKey
argument_list|>
argument_list|>
name|insertArcKeys
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|DbEntity
argument_list|,
name|DeleteBatchQuery
argument_list|>
name|flattenedDeleteQueries
decl_stmt|;
name|DataDomainFlattenedBucket
parameter_list|(
name|DataDomainFlushAction
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|insertArcKeys
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|flattenedDeleteQueries
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|insertArcKeys
operator|.
name|isEmpty
argument_list|()
operator|&&
name|flattenedDeleteQueries
operator|.
name|isEmpty
argument_list|()
return|;
block|}
name|void
name|addInsertArcKey
parameter_list|(
name|DbEntity
name|flattenedEntity
parameter_list|,
name|FlattenedArcKey
name|flattenedArcKey
parameter_list|)
block|{
name|List
argument_list|<
name|FlattenedArcKey
argument_list|>
name|arcKeys
init|=
name|insertArcKeys
operator|.
name|get
argument_list|(
name|flattenedEntity
argument_list|)
decl_stmt|;
if|if
condition|(
name|arcKeys
operator|==
literal|null
condition|)
block|{
name|arcKeys
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|insertArcKeys
operator|.
name|put
argument_list|(
name|flattenedEntity
argument_list|,
name|arcKeys
argument_list|)
expr_stmt|;
block|}
name|arcKeys
operator|.
name|add
argument_list|(
name|flattenedArcKey
argument_list|)
expr_stmt|;
block|}
name|void
name|addFlattenedDelete
parameter_list|(
name|DbEntity
name|flattenedEntity
parameter_list|,
name|FlattenedArcKey
name|flattenedDeleteInfo
parameter_list|)
block|{
name|DeleteBatchQuery
name|relationDeleteQuery
init|=
name|flattenedDeleteQueries
operator|.
name|get
argument_list|(
name|flattenedEntity
argument_list|)
decl_stmt|;
if|if
condition|(
name|relationDeleteQuery
operator|==
literal|null
condition|)
block|{
name|boolean
name|optimisticLocking
init|=
literal|false
decl_stmt|;
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
name|pk
init|=
name|flattenedEntity
operator|.
name|getPrimaryKeys
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DbAttribute
argument_list|>
name|pkList
init|=
name|pk
operator|instanceof
name|List
condition|?
operator|(
name|List
argument_list|<
name|DbAttribute
argument_list|>
operator|)
name|pk
else|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|pk
argument_list|)
decl_stmt|;
name|relationDeleteQuery
operator|=
operator|new
name|DeleteBatchQuery
argument_list|(
name|flattenedEntity
argument_list|,
name|pkList
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|relationDeleteQuery
operator|.
name|setUsingOptimisticLocking
argument_list|(
name|optimisticLocking
argument_list|)
expr_stmt|;
name|flattenedDeleteQueries
operator|.
name|put
argument_list|(
name|flattenedEntity
argument_list|,
name|relationDeleteQuery
argument_list|)
expr_stmt|;
block|}
name|DataNode
name|node
init|=
name|parent
operator|.
name|getDomain
argument_list|()
operator|.
name|lookupDataNode
argument_list|(
name|flattenedEntity
operator|.
name|getDataMap
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|flattenedSnapshots
init|=
name|flattenedDeleteInfo
operator|.
name|buildJoinSnapshotsForDelete
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|flattenedSnapshots
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|flattenedSnapshot
range|:
name|flattenedSnapshots
control|)
block|{
name|relationDeleteQuery
operator|.
name|add
argument_list|(
name|flattenedSnapshot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * responsible for adding the flattened Insert Queries. Its possible an insert query for the same DbEntity/ObjectId      * already has been added from the insert bucket queries if that Object also has an attribute. So we want to merge      * the data for each insert into a single insert.      */
name|void
name|appendInserts
parameter_list|(
name|Collection
argument_list|<
name|Query
argument_list|>
name|queries
parameter_list|)
block|{
comment|// TODO: see "O(N) lookups" TODO's below. The first is relatively benign, as N is the number of DbEntities in the
comment|// preceeding DataDomainInsertBucket processing. The second nested one is potentially much worse, as it may
comment|// result in a linear scan of thousands of objects. E.g. it will affect cases with vertical inheritance with
comment|// relationships in subclasses...
comment|// The fix to the above is to merge this code into DataDomainInsertBucket, so that we can combine regular and
comment|// flattened snapshots at the point of InsertBatchQuery creation.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|DbEntity
argument_list|,
name|List
argument_list|<
name|FlattenedArcKey
argument_list|>
argument_list|>
name|entry
range|:
name|insertArcKeys
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|DbEntity
name|dbEntity
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FlattenedArcKey
argument_list|>
name|flattenedArcKeys
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|DataNode
name|node
init|=
name|parent
operator|.
name|getDomain
argument_list|()
operator|.
name|lookupDataNode
argument_list|(
name|dbEntity
operator|.
name|getDataMap
argument_list|()
argument_list|)
decl_stmt|;
name|InsertBatchQuery
name|newQuery
init|=
operator|new
name|InsertBatchQuery
argument_list|(
name|dbEntity
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|boolean
name|newQueryAdded
init|=
literal|false
decl_stmt|;
comment|// Here can be options with multiple arcs:
comment|//  1. they can go as different columns in a single row
comment|//  2. they can go as different rows in one batch
comment|//  3. mix of both
for|for
control|(
name|FlattenedArcKey
name|flattenedArcKey
range|:
name|flattenedArcKeys
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|snapshot
init|=
name|flattenedArcKey
operator|.
name|buildJoinSnapshotForInsert
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|ObjectId
name|objectId
init|=
literal|null
decl_stmt|;
comment|// TODO: O(N) lookup
name|InsertBatchQuery
name|existingQuery
init|=
name|findInsertBatchQuery
argument_list|(
name|queries
argument_list|,
name|dbEntity
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingQuery
operator|!=
literal|null
condition|)
block|{
comment|// TODO: O(N) lookup
name|BatchQueryRow
name|existingRow
init|=
name|findRowForObjectId
argument_list|(
name|existingQuery
operator|.
name|getRows
argument_list|()
argument_list|,
name|flattenedArcKey
operator|.
name|id1
operator|.
name|getSourceId
argument_list|()
argument_list|)
decl_stmt|;
comment|// todo: do we need to worry about flattenedArcKey.id2 ?
if|if
condition|(
name|existingRow
operator|!=
literal|null
condition|)
block|{
name|objectId
operator|=
name|existingRow
operator|.
name|getObjectId
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|DbAttribute
argument_list|>
name|existingQueryDbAttributes
init|=
name|existingQuery
operator|.
name|getDbAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|existingQueryDbAttributes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|value
init|=
name|existingRow
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|snapshot
operator|.
name|put
argument_list|(
name|existingQueryDbAttributes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|newQuery
operator|.
name|add
argument_list|(
name|snapshot
argument_list|,
name|objectId
argument_list|)
expr_stmt|;
if|if
condition|(
name|existingQuery
operator|!=
literal|null
condition|)
block|{
comment|// replace inside arc loop, so next arc know about it
name|queries
operator|.
name|remove
argument_list|(
name|existingQuery
argument_list|)
expr_stmt|;
name|queries
operator|.
name|add
argument_list|(
name|newQuery
argument_list|)
expr_stmt|;
name|newQueryAdded
operator|=
literal|true
expr_stmt|;
comment|// start clean query for the next arc
name|newQuery
operator|=
operator|new
name|InsertBatchQuery
argument_list|(
name|dbEntity
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|newQueryAdded
condition|)
block|{
comment|// if not replaced existing query already
name|queries
operator|.
name|add
argument_list|(
name|newQuery
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|appendDeletes
parameter_list|(
name|Collection
argument_list|<
name|Query
argument_list|>
name|queries
parameter_list|)
block|{
if|if
condition|(
operator|!
name|flattenedDeleteQueries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|queries
operator|.
name|addAll
argument_list|(
name|flattenedDeleteQueries
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|InsertBatchQuery
name|findInsertBatchQuery
parameter_list|(
name|Collection
argument_list|<
name|Query
argument_list|>
name|queries
parameter_list|,
name|DbEntity
name|dbEntity
parameter_list|)
block|{
for|for
control|(
name|Query
name|query
range|:
name|queries
control|)
block|{
if|if
condition|(
name|query
operator|instanceof
name|InsertBatchQuery
condition|)
block|{
name|InsertBatchQuery
name|insertBatchQuery
init|=
operator|(
name|InsertBatchQuery
operator|)
name|query
decl_stmt|;
if|if
condition|(
name|insertBatchQuery
operator|.
name|getDbEntity
argument_list|()
operator|.
name|equals
argument_list|(
name|dbEntity
argument_list|)
condition|)
block|{
return|return
name|insertBatchQuery
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|BatchQueryRow
name|findRowForObjectId
parameter_list|(
name|List
argument_list|<
name|BatchQueryRow
argument_list|>
name|rows
parameter_list|,
name|ObjectId
name|objectId
parameter_list|)
block|{
for|for
control|(
name|BatchQueryRow
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
name|row
operator|.
name|getObjectId
argument_list|()
operator|.
name|equals
argument_list|(
name|objectId
argument_list|)
condition|)
block|{
return|return
name|row
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

