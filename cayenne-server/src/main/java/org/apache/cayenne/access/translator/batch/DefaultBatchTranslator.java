begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|batch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|QuotingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|BatchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|BatchQueryRow
import|;
end_import

begin_comment
comment|/**  * Superclass of batch query translators.  *   * @since 3.2  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|DefaultBatchTranslator
implements|implements
name|BatchTranslator
block|{
specifier|protected
name|BatchQuery
name|query
decl_stmt|;
specifier|protected
name|DbAdapter
name|adapter
decl_stmt|;
specifier|protected
name|String
name|trimFunction
decl_stmt|;
specifier|public
name|DefaultBatchTranslator
parameter_list|(
name|BatchQuery
name|query
parameter_list|,
name|DbAdapter
name|adapter
parameter_list|,
name|String
name|trimFunction
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|adapter
operator|=
name|adapter
expr_stmt|;
name|this
operator|.
name|trimFunction
operator|=
name|trimFunction
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTrimFunction
parameter_list|()
block|{
return|return
name|trimFunction
return|;
block|}
comment|/**      * Translates BatchQuery into an SQL string formatted to use in a      * PreparedStatement.      */
annotation|@
name|Override
specifier|public
specifier|abstract
name|String
name|createSqlString
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**      * Returns PreparedStatement bindings for a given row.      */
annotation|@
name|Override
specifier|public
specifier|abstract
name|List
argument_list|<
name|BatchParameterBinding
argument_list|>
name|createBindings
parameter_list|(
name|BatchQueryRow
name|row
parameter_list|)
function_decl|;
comment|/**      * Appends the name of the column to the query buffer. Subclasses use this      * method to append column names in the WHERE clause, i.e. for the columns      * that are not being updated.      */
specifier|protected
name|void
name|appendDbAttribute
parameter_list|(
name|StringBuilder
name|buf
parameter_list|,
name|DbAttribute
name|dbAttribute
parameter_list|)
block|{
comment|// TODO: (Andrus) is there a need for trimming binary types?
name|boolean
name|trim
init|=
name|dbAttribute
operator|.
name|getType
argument_list|()
operator|==
name|Types
operator|.
name|CHAR
operator|&&
name|trimFunction
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|trim
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|trimFunction
argument_list|)
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
block|}
name|QuotingStrategy
name|strategy
init|=
name|adapter
operator|.
name|getQuotingStrategy
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|strategy
operator|.
name|quotedName
argument_list|(
name|dbAttribute
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|trim
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

