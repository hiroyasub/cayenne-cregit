begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTDbPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTObjPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|SimpleNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
class|class
name|QualifierTranslationStage
implements|implements
name|TranslationStage
block|{
annotation|@
name|Override
specifier|public
name|void
name|perform
parameter_list|(
name|TranslatorContext
name|context
parameter_list|)
block|{
name|QualifierTranslator
name|translator
init|=
name|context
operator|.
name|getQualifierTranslator
argument_list|()
decl_stmt|;
name|Expression
name|expression
init|=
name|context
operator|.
name|getQuery
argument_list|()
operator|.
name|getQualifier
argument_list|()
decl_stmt|;
comment|// Attaching Obj entity's qualifier
name|ObjEntity
name|entity
init|=
name|context
operator|.
name|getMetadata
argument_list|()
operator|.
name|getObjEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|ClassDescriptor
name|descriptor
init|=
name|context
operator|.
name|getMetadata
argument_list|()
operator|.
name|getClassDescriptor
argument_list|()
decl_stmt|;
name|Expression
name|entityQualifier
init|=
name|descriptor
operator|.
name|getEntityInheritanceTree
argument_list|()
operator|.
name|qualifierForEntityAndSubclasses
argument_list|()
decl_stmt|;
if|if
condition|(
name|entityQualifier
operator|!=
literal|null
condition|)
block|{
name|expression
operator|=
name|expression
operator|==
literal|null
condition|?
name|entityQualifier
else|:
name|expression
operator|.
name|andExp
argument_list|(
name|entityQualifier
argument_list|)
expr_stmt|;
block|}
block|}
name|Node
name|qualifierNode
init|=
name|translator
operator|.
name|translate
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|context
operator|.
name|setQualifierNode
argument_list|(
name|qualifierNode
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

