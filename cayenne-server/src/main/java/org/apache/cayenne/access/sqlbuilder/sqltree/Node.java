begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|NodeTreeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|QuotingAppendable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|StringBuilderAppendable
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Node
block|{
specifier|protected
name|Node
name|parent
decl_stmt|;
specifier|protected
name|Node
index|[]
name|children
decl_stmt|;
specifier|protected
name|int
name|childrenCount
decl_stmt|;
specifier|protected
specifier|final
name|NodeType
name|type
decl_stmt|;
specifier|public
name|Node
parameter_list|(
name|NodeType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|Node
parameter_list|()
block|{
name|this
argument_list|(
name|NodeType
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Node
name|addChild
parameter_list|(
name|int
name|index
parameter_list|,
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|children
operator|.
name|length
operator|<=
name|childrenCount
condition|)
block|{
comment|// expand + copy with empty slot at index
name|Node
index|[]
name|newChildren
init|=
operator|new
name|Node
index|[
name|children
operator|.
name|length
operator|+
literal|4
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|children
argument_list|,
literal|0
argument_list|,
name|newChildren
argument_list|,
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|children
argument_list|,
name|index
argument_list|,
name|newChildren
argument_list|,
name|index
operator|+
literal|1
argument_list|,
operator|(
name|childrenCount
operator|-
name|index
operator|)
argument_list|)
expr_stmt|;
name|children
operator|=
name|newChildren
expr_stmt|;
block|}
else|else
block|{
comment|// move tail after index on one position
name|System
operator|.
name|arraycopy
argument_list|(
name|children
argument_list|,
name|index
argument_list|,
name|children
argument_list|,
name|index
operator|+
literal|1
argument_list|,
operator|(
name|childrenCount
operator|-
name|index
operator|)
argument_list|)
expr_stmt|;
block|}
name|children
index|[
name|index
index|]
operator|=
name|node
expr_stmt|;
name|childrenCount
operator|++
expr_stmt|;
name|node
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Node
name|addChild
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
name|children
operator|=
operator|new
name|Node
index|[
literal|4
index|]
expr_stmt|;
block|}
if|else if
condition|(
name|children
operator|.
name|length
operator|<=
name|childrenCount
condition|)
block|{
name|Node
index|[]
name|newChildren
init|=
operator|new
name|Node
index|[
name|children
operator|.
name|length
operator|+
literal|4
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|children
argument_list|,
literal|0
argument_list|,
name|newChildren
argument_list|,
literal|0
argument_list|,
name|children
operator|.
name|length
argument_list|)
expr_stmt|;
name|children
operator|=
name|newChildren
expr_stmt|;
block|}
name|children
index|[
name|childrenCount
operator|++
index|]
operator|=
name|node
expr_stmt|;
name|node
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Node
name|getChild
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
name|children
index|[
name|idx
index|]
return|;
block|}
specifier|public
name|int
name|getChildrenCount
parameter_list|()
block|{
return|return
name|childrenCount
return|;
block|}
specifier|public
name|void
name|replaceChild
parameter_list|(
name|int
name|idx
parameter_list|,
name|Node
name|node
parameter_list|)
block|{
name|children
index|[
name|idx
index|]
operator|.
name|setParent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|children
index|[
name|idx
index|]
operator|=
name|node
expr_stmt|;
name|node
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Node
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
specifier|public
name|void
name|setParent
parameter_list|(
name|Node
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|NodeTreeVisitor
name|visitor
parameter_list|)
block|{
if|if
condition|(
operator|!
name|visitor
operator|.
name|onNodeStart
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childrenCount
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|hasMore
init|=
name|i
operator|<
operator|(
name|childrenCount
operator|-
literal|1
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|visitor
operator|.
name|onChildNodeStart
argument_list|(
name|this
argument_list|,
name|children
index|[
name|i
index|]
argument_list|,
name|i
argument_list|,
name|hasMore
argument_list|)
condition|)
block|{
return|return;
block|}
name|children
index|[
name|i
index|]
operator|.
name|visit
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|onChildNodeEnd
argument_list|(
name|this
argument_list|,
name|children
index|[
name|i
index|]
argument_list|,
name|i
argument_list|,
name|hasMore
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|.
name|onNodeEnd
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return deep copy(i.e. with copies of all children) of this node      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
extends|extends
name|Node
parameter_list|>
name|T
name|deepCopy
parameter_list|()
block|{
name|Node
name|node
init|=
name|this
operator|.
name|copy
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|children
operator|=
operator|new
name|Node
index|[
name|childrenCount
index|]
expr_stmt|;
name|node
operator|.
name|childrenCount
operator|=
name|childrenCount
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childrenCount
condition|;
name|i
operator|++
control|)
block|{
name|node
operator|.
name|children
index|[
name|i
index|]
operator|=
name|children
index|[
name|i
index|]
operator|.
name|deepCopy
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|(
name|T
operator|)
name|node
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Node {"
operator|+
name|append
argument_list|(
operator|new
name|StringBuilderAppendable
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|"}"
return|;
block|}
specifier|public
name|NodeType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
specifier|abstract
name|Node
name|copy
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|QuotingAppendable
name|append
parameter_list|(
name|QuotingAppendable
name|buffer
parameter_list|)
function_decl|;
specifier|public
name|void
name|appendChildrenSeparator
parameter_list|(
name|QuotingAppendable
name|buffer
parameter_list|,
name|int
name|childInd
parameter_list|)
block|{
block|}
specifier|public
name|void
name|appendChildrenStart
parameter_list|(
name|QuotingAppendable
name|buffer
parameter_list|)
block|{
block|}
specifier|public
name|void
name|appendChildrenEnd
parameter_list|(
name|QuotingAppendable
name|buffer
parameter_list|)
block|{
block|}
block|}
end_class

end_unit

