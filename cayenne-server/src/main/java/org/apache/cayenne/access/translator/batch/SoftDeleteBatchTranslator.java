begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|batch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|ParameterBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|QuotingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|BatchQueryRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|DeleteBatchQuery
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link DeleteBatchTranslator}, which uses 'soft' delete  * (runs UPDATE and sets 'deleted' field to true instead-of running SQL DELETE)  */
end_comment

begin_class
specifier|public
class|class
name|SoftDeleteBatchTranslator
extends|extends
name|DeleteBatchTranslator
block|{
specifier|private
name|String
name|deletedFieldName
decl_stmt|;
specifier|public
name|SoftDeleteBatchTranslator
parameter_list|(
name|DeleteBatchQuery
name|query
parameter_list|,
name|DbAdapter
name|adapter
parameter_list|,
name|String
name|trimFunction
parameter_list|,
name|String
name|deletedFieldName
parameter_list|)
block|{
name|super
argument_list|(
name|query
argument_list|,
name|adapter
argument_list|,
name|trimFunction
argument_list|)
expr_stmt|;
name|this
operator|.
name|deletedFieldName
operator|=
name|deletedFieldName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|createSql
parameter_list|()
block|{
name|QuotingStrategy
name|strategy
init|=
name|adapter
operator|.
name|getQuotingStrategy
argument_list|()
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"UPDATE "
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|strategy
operator|.
name|quotedFullyQualifiedName
argument_list|(
name|query
operator|.
name|getDbEntity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" SET "
argument_list|)
operator|.
name|append
argument_list|(
name|strategy
operator|.
name|quotedIdentifier
argument_list|(
name|query
operator|.
name|getDbEntity
argument_list|()
argument_list|,
name|deletedFieldName
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" = ?"
argument_list|)
expr_stmt|;
name|applyQualifier
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ParameterBinding
index|[]
name|createBindings
parameter_list|()
block|{
name|ParameterBinding
index|[]
name|superBindings
init|=
name|super
operator|.
name|createBindings
argument_list|()
decl_stmt|;
name|int
name|slen
init|=
name|superBindings
operator|.
name|length
decl_stmt|;
name|ParameterBinding
index|[]
name|bindings
init|=
operator|new
name|ParameterBinding
index|[
name|slen
operator|+
literal|1
index|]
decl_stmt|;
name|DbAttribute
name|deleteAttribute
init|=
name|query
operator|.
name|getDbEntity
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|deletedFieldName
argument_list|)
decl_stmt|;
name|bindings
index|[
literal|0
index|]
operator|=
operator|new
name|ParameterBinding
argument_list|(
name|deleteAttribute
argument_list|)
expr_stmt|;
name|bindings
index|[
literal|0
index|]
operator|.
name|include
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|superBindings
argument_list|,
literal|0
argument_list|,
name|bindings
argument_list|,
literal|1
argument_list|,
name|slen
argument_list|)
expr_stmt|;
return|return
name|bindings
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ParameterBinding
index|[]
name|doUpdateBindings
parameter_list|(
name|BatchQueryRow
name|row
parameter_list|)
block|{
name|int
name|len
init|=
name|bindings
operator|.
name|length
decl_stmt|;
name|DeleteBatchQuery
name|deleteBatch
init|=
operator|(
name|DeleteBatchQuery
operator|)
name|query
decl_stmt|;
comment|// skip position 0... Otherwise follow super algorithm
for|for
control|(
name|int
name|i
init|=
literal|1
init|,
name|j
init|=
literal|2
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|ParameterBinding
name|b
init|=
name|bindings
index|[
name|i
index|]
decl_stmt|;
comment|// skip null attributes... they are translated as "IS NULL"
if|if
condition|(
name|deleteBatch
operator|.
name|isNull
argument_list|(
name|b
operator|.
name|getAttribute
argument_list|()
argument_list|)
condition|)
block|{
name|b
operator|.
name|exclude
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|include
argument_list|(
name|j
operator|++
argument_list|,
name|row
operator|.
name|getValue
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bindings
return|;
block|}
block|}
end_class

end_unit

