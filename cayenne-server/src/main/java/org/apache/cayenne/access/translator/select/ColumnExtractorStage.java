begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_comment
comment|/**  * Get result columns based on query, options are:<ol>  *<li> for column queries - defined set of columns  *<li> for paginated or nested queries - root pk columns  *<li> for queries with defined class descriptor - full column set including flattened  *<li> for everything else - all columns of the root db entity  *</ol>  *  * @since 4.2  */
end_comment

begin_class
class|class
name|ColumnExtractorStage
implements|implements
name|TranslationStage
block|{
annotation|@
name|Override
specifier|public
name|void
name|perform
parameter_list|(
name|TranslatorContext
name|context
parameter_list|)
block|{
name|ColumnExtractor
name|extractor
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getQuery
argument_list|()
operator|.
name|getColumns
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|context
operator|.
name|getQuery
argument_list|()
operator|.
name|getColumns
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|extractor
operator|=
operator|new
name|CustomColumnSetExtractor
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|getQuery
argument_list|()
operator|.
name|getColumns
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|context
operator|.
name|getParentContext
argument_list|()
operator|!=
literal|null
operator|||
name|context
operator|.
name|getMetadata
argument_list|()
operator|.
name|getPageSize
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|getMetadata
argument_list|()
operator|.
name|getObjEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extractor
operator|=
operator|new
name|IdColumnExtractor
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|getMetadata
argument_list|()
operator|.
name|getObjEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|extractor
operator|=
operator|new
name|IdColumnExtractor
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|getMetadata
argument_list|()
operator|.
name|getDbEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|context
operator|.
name|getMetadata
argument_list|()
operator|.
name|getClassDescriptor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|extractor
operator|=
operator|new
name|DescriptorColumnExtractor
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|getMetadata
argument_list|()
operator|.
name|getClassDescriptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|extractor
operator|=
operator|new
name|DbEntityColumnExtractor
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|extractor
operator|.
name|extract
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

