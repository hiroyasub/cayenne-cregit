begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|flush
operator|.
name|operation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Graph sorting, copy of DIGraph implementation from cayenne-di.  */
end_comment

begin_class
class|class
name|DbRowOpGraph
block|{
comment|/** 	 * {@link LinkedHashMap} is used for supporting insertion order. 	 */
specifier|private
specifier|final
name|Map
argument_list|<
name|DbRowOp
argument_list|,
name|List
argument_list|<
name|DbRowOp
argument_list|>
argument_list|>
name|neighbors
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|DbRowOpGraph
parameter_list|()
block|{
block|}
comment|/** 	 * Add a vertex to the graph. Nothing happens if vertex is already in graph. 	 */
name|void
name|add
parameter_list|(
name|DbRowOp
name|vertex
parameter_list|)
block|{
name|neighbors
operator|.
name|putIfAbsent
argument_list|(
name|vertex
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Add an edge to the graph; if either vertex does not exist, it's added. 	 * This implementation allows the creation of multi-edges and self-loops. 	 */
name|void
name|add
parameter_list|(
name|DbRowOp
name|from
parameter_list|,
name|DbRowOp
name|to
parameter_list|)
block|{
name|neighbors
operator|.
name|computeIfAbsent
argument_list|(
name|from
argument_list|,
name|k
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|to
argument_list|)
expr_stmt|;
name|this
operator|.
name|add
argument_list|(
name|to
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Return (as a Map) the in-degree of each vertex. 	 */
specifier|private
name|Map
argument_list|<
name|DbRowOp
argument_list|,
name|Integer
argument_list|>
name|inDegree
parameter_list|()
block|{
name|Map
argument_list|<
name|DbRowOp
argument_list|,
name|Integer
argument_list|>
name|result
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|neighbors
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|neighbors
operator|.
name|forEach
argument_list|(
parameter_list|(
name|from
parameter_list|,
name|neighbors
parameter_list|)
lambda|->
block|{
name|neighbors
operator|.
name|forEach
argument_list|(
name|to
lambda|->
name|result
operator|.
name|compute
argument_list|(
name|to
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|old
parameter_list|)
lambda|->
block|{
block_content|if(old == null
argument_list|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|old
operator|+
literal|1
return|;
block|}
argument_list|)
block_content|)
function|;
name|result
operator|.
name|putIfAbsent
argument_list|(
name|from
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|result
return|;
end_return

begin_comment
unit|}
comment|/** 	 * Return (as a List) the topological sort of the vertices. Throws an exception if cycles are detected. 	 */
end_comment

begin_constructor
unit|List
parameter_list|<
name|DbRowOp
parameter_list|>
name|topSort
parameter_list|()
block|{
name|Map
argument_list|<
name|DbRowOp
argument_list|,
name|Integer
argument_list|>
name|degree
init|=
name|inDegree
argument_list|()
decl_stmt|;
name|Deque
argument_list|<
name|DbRowOp
argument_list|>
name|zeroDegree
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|(
name|neighbors
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|DbRowOp
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|neighbors
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|degree
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v
operator|==
literal|0
condition|)
block|{
name|zeroDegree
operator|.
name|push
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|zeroDegree
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DbRowOp
name|v
init|=
name|zeroDegree
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|neighbors
operator|.
name|get
argument_list|(
name|v
argument_list|)
operator|.
name|forEach
argument_list|(
name|neighbor
lambda|->
name|degree
operator|.
name|computeIfPresent
argument_list|(
name|neighbor
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|oldValue
parameter_list|)
lambda|->
block|{
name|int
name|newValue
operator|=
operator|--
name|oldValue
argument_list|; 						if
operator|(
name|newValue
operator|==
literal|0
operator|)
block|{
name|zeroDegree
operator|.
name|addLast
argument_list|(
name|neighbor
argument_list|)
block|; 						}
return|return
name|newValue
return|;
block|}
block_content|)
end_constructor

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// Check that we have used the entire graph (if not, there was a cycle)
end_comment

begin_expr_stmt
unit|if
operator|(
name|result
operator|.
name|size
argument_list|()
operator|!=
name|neighbors
operator|.
name|size
argument_list|()
operator|)
block|{
name|Set
argument_list|<
name|DbRowOp
argument_list|>
name|remainingKeys
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|neighbors
operator|.
name|keySet
argument_list|()
argument_list|)
block|;
name|remainingKeys
operator|.
name|removeIf
argument_list|(
name|result
operator|::
name|contains
argument_list|)
block|;
throw|throw
argument_list|new
name|IllegalStateException
argument_list|(
literal|"Cycle detected in list for keys: "
operator|+
name|remainingKeys
argument_list|)
block|; 		}
name|Collections
operator|.
name|reverse
argument_list|(
name|result
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|result
return|;
end_return

unit|} }
end_unit

