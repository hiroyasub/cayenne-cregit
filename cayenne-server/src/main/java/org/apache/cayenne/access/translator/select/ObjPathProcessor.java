begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EmbeddedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|JoinType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
class|class
name|ObjPathProcessor
extends|extends
name|PathProcessor
argument_list|<
name|ObjEntity
argument_list|>
block|{
specifier|private
name|ObjAttribute
name|attribute
decl_stmt|;
specifier|private
name|EmbeddedAttribute
name|embeddedAttribute
decl_stmt|;
name|ObjPathProcessor
parameter_list|(
name|TranslatorContext
name|context
parameter_list|,
name|ObjEntity
name|entity
parameter_list|,
name|String
name|parentPath
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|entity
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentPath
operator|!=
literal|null
condition|)
block|{
name|currentDbPath
operator|.
name|append
argument_list|(
name|parentPath
argument_list|)
expr_stmt|;
block|}
block|}
name|ObjAttribute
name|getAttribute
parameter_list|()
block|{
return|return
name|attribute
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processNormalAttribute
parameter_list|(
name|String
name|next
parameter_list|)
block|{
name|attribute
operator|=
name|fetchAttribute
argument_list|(
name|next
argument_list|)
expr_stmt|;
if|if
condition|(
name|attribute
operator|!=
literal|null
condition|)
block|{
name|processAttribute
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
return|return;
block|}
name|ObjRelationship
name|relationship
init|=
name|entity
operator|.
name|getRelationship
argument_list|(
name|next
argument_list|)
decl_stmt|;
if|if
condition|(
name|relationship
operator|!=
literal|null
condition|)
block|{
name|processRelationship
argument_list|(
name|relationship
argument_list|)
expr_stmt|;
return|return;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to resolve path: "
operator|+
name|currentDbPath
operator|.
name|toString
argument_list|()
operator|+
literal|" (unknown '"
operator|+
name|next
operator|+
literal|"' component)"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processAliasedAttribute
parameter_list|(
name|String
name|next
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
name|ObjRelationship
name|relationship
init|=
name|entity
operator|.
name|getRelationship
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|relationship
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Non-relationship aliased path part: "
operator|+
name|alias
argument_list|)
throw|;
block|}
name|processRelationship
argument_list|(
name|relationship
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ObjAttribute
name|fetchAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|embeddedAttribute
operator|!=
literal|null
condition|)
block|{
name|ObjAttribute
name|attribute
init|=
name|embeddedAttribute
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|embeddedAttribute
operator|=
literal|null
expr_stmt|;
return|return
name|attribute
return|;
block|}
else|else
block|{
return|return
name|entity
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
specifier|protected
name|void
name|processAttribute
parameter_list|(
name|ObjAttribute
name|attribute
parameter_list|)
block|{
if|if
condition|(
name|attribute
operator|instanceof
name|EmbeddedAttribute
condition|)
block|{
name|embeddedAttribute
operator|=
operator|(
name|EmbeddedAttribute
operator|)
name|attribute
expr_stmt|;
return|return;
block|}
name|PathTranslationResult
name|result
init|=
name|context
operator|.
name|getPathTranslator
argument_list|()
operator|.
name|translatePath
argument_list|(
name|entity
operator|.
name|getDbEntity
argument_list|()
argument_list|,
name|attribute
operator|.
name|getDbAttributePath
argument_list|()
argument_list|,
name|currentDbPath
operator|.
name|toString
argument_list|()
argument_list|,
name|attribute
operator|.
name|isFlattened
argument_list|()
argument_list|)
decl_stmt|;
name|attributes
operator|.
name|addAll
argument_list|(
name|result
operator|.
name|getDbAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|attributePaths
operator|.
name|addAll
argument_list|(
name|result
operator|.
name|getAttributePaths
argument_list|()
argument_list|)
expr_stmt|;
name|relationship
operator|=
name|result
operator|.
name|getDbRelationship
argument_list|()
operator|.
name|orElse
argument_list|(
name|relationship
argument_list|)
expr_stmt|;
name|currentDbPath
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|currentDbPath
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|currentDbPath
operator|.
name|append
argument_list|(
name|result
operator|.
name|getFinalPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|processRelationship
parameter_list|(
name|ObjRelationship
name|relationship
parameter_list|)
block|{
if|if
condition|(
name|lastComponent
condition|)
block|{
comment|// if this is a last relationship in the path, it needs special handling
name|processRelTermination
argument_list|(
name|relationship
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entity
operator|=
name|relationship
operator|.
name|getTargetEntity
argument_list|()
expr_stmt|;
comment|// find and add joins ....
name|int
name|count
init|=
name|relationship
operator|.
name|getDbRelationships
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|DbRelationship
name|dbRel
init|=
name|relationship
operator|.
name|getDbRelationships
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|appendCurrentPath
argument_list|(
name|dbRel
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|leftJoin
init|=
name|isOuterJoin
argument_list|()
operator|||
name|count
operator|>
literal|1
decl_stmt|;
name|context
operator|.
name|getTableTree
argument_list|()
operator|.
name|addJoinTable
argument_list|(
name|currentDbPath
operator|.
name|toString
argument_list|()
argument_list|,
name|dbRel
argument_list|,
name|leftJoin
condition|?
name|JoinType
operator|.
name|LEFT_OUTER
else|:
name|JoinType
operator|.
name|INNER
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|processRelTermination
parameter_list|(
name|ObjRelationship
name|relationship
parameter_list|)
block|{
name|String
name|path
init|=
name|currentAlias
operator|!=
literal|null
condition|?
name|currentAlias
else|:
name|relationship
operator|.
name|getDbRelationshipPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|isOuterJoin
argument_list|()
condition|)
block|{
name|path
operator|+=
name|OUTER_JOIN_INDICATOR
expr_stmt|;
block|}
name|PathTranslationResult
name|result
init|=
name|context
operator|.
name|getPathTranslator
argument_list|()
operator|.
name|translatePath
argument_list|(
name|entity
operator|.
name|getDbEntity
argument_list|()
argument_list|,
name|path
argument_list|,
name|currentDbPath
operator|.
name|toString
argument_list|()
argument_list|,
name|relationship
operator|.
name|isFlattened
argument_list|()
argument_list|)
decl_stmt|;
name|attributes
operator|.
name|addAll
argument_list|(
name|result
operator|.
name|getDbAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|attributePaths
operator|.
name|addAll
argument_list|(
name|result
operator|.
name|getAttributePaths
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|relationship
operator|=
name|result
operator|.
name|getDbRelationship
argument_list|()
operator|.
name|orElse
argument_list|(
name|this
operator|.
name|relationship
argument_list|)
expr_stmt|;
name|currentDbPath
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|currentDbPath
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|currentDbPath
operator|.
name|append
argument_list|(
name|result
operator|.
name|getFinalPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

