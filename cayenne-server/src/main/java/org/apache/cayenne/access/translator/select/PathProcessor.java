begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Embeddable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|abstract
class|class
name|PathProcessor
parameter_list|<
name|T
extends|extends
name|Entity
parameter_list|>
implements|implements
name|PathTranslationResult
block|{
specifier|public
specifier|static
specifier|final
name|char
name|OUTER_JOIN_INDICATOR
init|=
literal|'+'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|SPLIT_PATH_INDICATOR
init|=
literal|'#'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DB_PATH_ALIAS_INDICATOR
init|=
literal|"^"
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pathSplitAliases
decl_stmt|;
specifier|protected
specifier|final
name|TranslatorContext
name|context
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|attributePaths
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|DbAttribute
argument_list|>
name|attributes
decl_stmt|;
specifier|protected
specifier|final
name|StringBuilder
name|currentDbPath
decl_stmt|;
specifier|protected
name|boolean
name|lastComponent
decl_stmt|;
specifier|private
name|boolean
name|isOuterJoin
decl_stmt|;
specifier|protected
name|T
name|entity
decl_stmt|;
specifier|protected
name|DbRelationship
name|relationship
decl_stmt|;
specifier|protected
name|String
name|currentAlias
decl_stmt|;
specifier|public
name|PathProcessor
parameter_list|(
name|TranslatorContext
name|context
parameter_list|,
name|T
name|entity
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|entity
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|this
operator|.
name|pathSplitAliases
operator|=
name|context
operator|.
name|getMetadata
argument_list|()
operator|.
name|getPathSplitAliases
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentDbPath
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|attributePaths
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PathTranslationResult
name|process
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|PathComponents
name|components
init|=
operator|new
name|PathComponents
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
index|[]
name|rawComponents
init|=
name|components
operator|.
name|getAll
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rawComponents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|next
init|=
name|rawComponents
index|[
name|i
index|]
decl_stmt|;
name|isOuterJoin
operator|=
literal|false
expr_stmt|;
name|lastComponent
operator|=
name|i
operator|==
name|rawComponents
operator|.
name|length
operator|-
literal|1
expr_stmt|;
name|String
name|alias
init|=
name|pathSplitAliases
operator|.
name|get
argument_list|(
name|next
argument_list|)
decl_stmt|;
if|if
condition|(
name|alias
operator|!=
literal|null
condition|)
block|{
name|currentAlias
operator|=
name|next
expr_stmt|;
name|processAliasedAttribute
argument_list|(
name|next
argument_list|,
name|alias
argument_list|)
expr_stmt|;
name|currentAlias
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|next
operator|.
name|isEmpty
argument_list|()
operator|&&
name|next
operator|.
name|charAt
argument_list|(
name|next
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
name|OUTER_JOIN_INDICATOR
condition|)
block|{
name|isOuterJoin
operator|=
literal|true
expr_stmt|;
name|next
operator|=
name|next
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|next
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|processNormalAttribute
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
specifier|protected
name|void
name|addAttribute
parameter_list|(
name|String
name|path
parameter_list|,
name|DbAttribute
name|attribute
parameter_list|)
block|{
name|attributePaths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|add
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
specifier|abstract
specifier|protected
name|void
name|processAliasedAttribute
parameter_list|(
name|String
name|next
parameter_list|,
name|String
name|alias
parameter_list|)
function_decl|;
specifier|abstract
specifier|protected
name|void
name|processNormalAttribute
parameter_list|(
name|String
name|next
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|DbAttribute
argument_list|>
name|getDbAttributes
parameter_list|()
block|{
return|return
name|attributes
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAttributePaths
parameter_list|()
block|{
return|return
name|attributePaths
return|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|DbRelationship
argument_list|>
name|getDbRelationship
parameter_list|()
block|{
if|if
condition|(
name|relationship
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|relationship
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|Embeddable
argument_list|>
name|getEmbeddable
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFinalPath
parameter_list|()
block|{
return|return
name|currentDbPath
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|void
name|appendCurrentPath
parameter_list|(
name|String
name|nextSegment
parameter_list|)
block|{
if|if
condition|(
name|currentDbPath
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|currentDbPath
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|currentDbPath
operator|.
name|append
argument_list|(
name|nextSegment
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentAlias
operator|!=
literal|null
condition|)
block|{
name|currentDbPath
operator|.
name|append
argument_list|(
name|SPLIT_PATH_INDICATOR
argument_list|)
operator|.
name|append
argument_list|(
name|currentAlias
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isOuterJoin
condition|)
block|{
name|currentDbPath
operator|.
name|append
argument_list|(
name|OUTER_JOIN_INDICATOR
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isOuterJoin
parameter_list|()
block|{
return|return
name|isOuterJoin
return|;
block|}
block|}
end_class

end_unit

