begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTDbPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|JoinType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|PrefetchSelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|PrefetchTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Select
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|SQLBuilder
operator|.
name|table
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
class|class
name|PrefetchNodeStage
implements|implements
name|TranslationStage
block|{
annotation|@
name|Override
specifier|public
name|void
name|perform
parameter_list|(
name|TranslatorContext
name|context
parameter_list|)
block|{
name|updatePrefetchNodes
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|processJoint
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|processPrefetchQuery
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updatePrefetchNodes
parameter_list|(
name|TranslatorContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|getMetadata
argument_list|()
operator|.
name|getPrefetchTree
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Set entity name, in case MixedConversionStrategy will be used to select objects from this query
comment|// Note: all prefetch nodes will point to query root, it is not a problem until select query can't
comment|// perform some sort of union or sub-queries.
for|for
control|(
name|PrefetchTreeNode
name|prefetch
range|:
name|context
operator|.
name|getMetadata
argument_list|()
operator|.
name|getPrefetchTree
argument_list|()
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|prefetch
operator|.
name|setEntityName
argument_list|(
name|context
operator|.
name|getMetadata
argument_list|()
operator|.
name|getObjEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processJoint
parameter_list|(
name|TranslatorContext
name|context
parameter_list|)
block|{
name|PrefetchTreeNode
name|prefetch
init|=
name|context
operator|.
name|getMetadata
argument_list|()
operator|.
name|getPrefetchTree
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefetch
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|ObjEntity
name|objEntity
init|=
name|context
operator|.
name|getMetadata
argument_list|()
operator|.
name|getObjEntity
argument_list|()
decl_stmt|;
for|for
control|(
name|PrefetchTreeNode
name|node
range|:
name|prefetch
operator|.
name|adjacentJointNodes
argument_list|()
control|)
block|{
name|Expression
name|prefetchExp
init|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|ASTDbPath
name|dbPrefetch
init|=
operator|(
name|ASTDbPath
operator|)
name|objEntity
operator|.
name|translateToDbPath
argument_list|(
name|prefetchExp
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dbPath
init|=
name|dbPrefetch
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|DbEntity
name|dbEntity
init|=
name|objEntity
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
name|PathComponents
name|components
init|=
operator|new
name|PathComponents
argument_list|(
name|dbPath
argument_list|)
decl_stmt|;
name|StringBuilder
name|fullPath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|components
operator|.
name|getAll
argument_list|()
control|)
block|{
name|DbRelationship
name|rel
init|=
name|dbEntity
operator|.
name|getRelationship
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|rel
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unable to resolve path %s for entity %s"
argument_list|,
name|dbPath
argument_list|,
name|objEntity
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|fullPath
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|fullPath
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getTableTree
argument_list|()
operator|.
name|addJoinTable
argument_list|(
literal|"p:"
operator|+
name|fullPath
operator|.
name|append
argument_list|(
name|c
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|rel
argument_list|,
name|JoinType
operator|.
name|LEFT_OUTER
argument_list|)
expr_stmt|;
name|dbEntity
operator|=
name|rel
operator|.
name|getTargetEntity
argument_list|()
expr_stmt|;
block|}
name|ObjRelationship
name|targetRel
init|=
operator|(
name|ObjRelationship
operator|)
name|prefetchExp
operator|.
name|evaluate
argument_list|(
name|objEntity
argument_list|)
decl_stmt|;
name|ClassDescriptor
name|prefetchClassDescriptor
init|=
name|context
operator|.
name|getResolver
argument_list|()
operator|.
name|getClassDescriptor
argument_list|(
name|targetRel
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
decl_stmt|;
name|DescriptorColumnExtractor
name|columnExtractor
init|=
operator|new
name|DescriptorColumnExtractor
argument_list|(
name|context
argument_list|,
name|prefetchClassDescriptor
argument_list|)
decl_stmt|;
name|columnExtractor
operator|.
name|extract
argument_list|(
literal|"p:"
operator|+
name|dbPath
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processPrefetchQuery
parameter_list|(
name|TranslatorContext
name|context
parameter_list|)
block|{
name|Select
argument_list|<
name|?
argument_list|>
name|select
init|=
name|context
operator|.
name|getQuery
argument_list|()
operator|.
name|unwrap
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|select
operator|instanceof
name|PrefetchSelectQuery
operator|)
condition|)
block|{
return|return;
block|}
name|PathTranslator
name|pathTranslator
init|=
name|context
operator|.
name|getPathTranslator
argument_list|()
decl_stmt|;
name|PrefetchSelectQuery
argument_list|<
name|?
argument_list|>
name|prefetchSelectQuery
init|=
operator|(
name|PrefetchSelectQuery
argument_list|<
name|?
argument_list|>
operator|)
name|select
decl_stmt|;
for|for
control|(
name|String
name|prefetchPath
range|:
name|prefetchSelectQuery
operator|.
name|getResultPaths
argument_list|()
control|)
block|{
name|ASTDbPath
name|pathExp
init|=
operator|(
name|ASTDbPath
operator|)
name|context
operator|.
name|getMetadata
argument_list|()
operator|.
name|getClassDescriptor
argument_list|()
operator|.
name|getEntity
argument_list|()
operator|.
name|translateToDbPath
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
name|prefetchPath
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|pathExp
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|PathTranslationResult
name|result
init|=
name|pathTranslator
operator|.
name|translatePath
argument_list|(
name|context
operator|.
name|getMetadata
argument_list|()
operator|.
name|getDbEntity
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|result
operator|.
name|getDbRelationship
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|r
lambda|->
block|{
name|DbEntity
name|targetEntity
init|=
name|r
operator|.
name|getTargetEntity
argument_list|()
decl_stmt|;
name|context
operator|.
name|getTableTree
argument_list|()
operator|.
name|addJoinTable
argument_list|(
name|path
argument_list|,
name|r
argument_list|,
name|JoinType
operator|.
name|INNER
argument_list|)
expr_stmt|;
for|for
control|(
name|DbAttribute
name|pk
range|:
name|targetEntity
operator|.
name|getPrimaryKeys
argument_list|()
control|)
block|{
comment|// note that we may select a source attribute, but label it as target for simplified snapshot processing
name|String
name|finalPath
init|=
name|path
operator|+
literal|'.'
operator|+
name|pk
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|alias
init|=
name|context
operator|.
name|getTableTree
argument_list|()
operator|.
name|aliasForPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Node
name|columnNode
init|=
name|table
argument_list|(
name|alias
argument_list|)
operator|.
name|column
argument_list|(
name|pk
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|context
operator|.
name|addResultNode
argument_list|(
name|columnNode
argument_list|,
name|finalPath
argument_list|)
operator|.
name|setDbAttribute
argument_list|(
name|pk
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

