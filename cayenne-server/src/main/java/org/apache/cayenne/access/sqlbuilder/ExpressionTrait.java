begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
package|;
end_package

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_interface
interface|interface
name|ExpressionTrait
extends|extends
name|NodeBuilder
block|{
specifier|default
name|ExpressionNodeBuilder
name|lt
parameter_list|(
name|NodeBuilder
name|operand
parameter_list|)
block|{
return|return
operator|new
name|ExpressionNodeBuilder
argument_list|(
name|this
argument_list|)
operator|.
name|lt
argument_list|(
name|operand
argument_list|)
return|;
block|}
specifier|default
name|ExpressionNodeBuilder
name|gt
parameter_list|(
name|NodeBuilder
name|operand
parameter_list|)
block|{
return|return
operator|new
name|ExpressionNodeBuilder
argument_list|(
name|this
argument_list|)
operator|.
name|gt
argument_list|(
name|operand
argument_list|)
return|;
block|}
specifier|default
name|ExpressionNodeBuilder
name|lte
parameter_list|(
name|NodeBuilder
name|operand
parameter_list|)
block|{
return|return
operator|new
name|ExpressionNodeBuilder
argument_list|(
name|this
argument_list|)
operator|.
name|lte
argument_list|(
name|operand
argument_list|)
return|;
block|}
specifier|default
name|ExpressionNodeBuilder
name|gte
parameter_list|(
name|NodeBuilder
name|operand
parameter_list|)
block|{
return|return
operator|new
name|ExpressionNodeBuilder
argument_list|(
name|this
argument_list|)
operator|.
name|gte
argument_list|(
name|operand
argument_list|)
return|;
block|}
specifier|default
name|ExpressionNodeBuilder
name|eq
parameter_list|(
name|NodeBuilder
name|nodeBuilder
parameter_list|)
block|{
return|return
operator|new
name|ExpressionNodeBuilder
argument_list|(
name|this
argument_list|)
operator|.
name|eq
argument_list|(
name|nodeBuilder
argument_list|)
return|;
block|}
specifier|default
name|ExpressionNodeBuilder
name|plus
parameter_list|(
name|NodeBuilder
name|nodeBuilder
parameter_list|)
block|{
return|return
operator|new
name|ExpressionNodeBuilder
argument_list|(
name|this
argument_list|)
operator|.
name|plus
argument_list|(
name|nodeBuilder
argument_list|)
return|;
block|}
specifier|default
name|ExpressionNodeBuilder
name|minus
parameter_list|(
name|NodeBuilder
name|nodeBuilder
parameter_list|)
block|{
return|return
operator|new
name|ExpressionNodeBuilder
argument_list|(
name|this
argument_list|)
operator|.
name|minus
argument_list|(
name|nodeBuilder
argument_list|)
return|;
block|}
specifier|default
name|ExpressionNodeBuilder
name|mul
parameter_list|(
name|NodeBuilder
name|nodeBuilder
parameter_list|)
block|{
return|return
operator|new
name|ExpressionNodeBuilder
argument_list|(
name|this
argument_list|)
operator|.
name|mul
argument_list|(
name|nodeBuilder
argument_list|)
return|;
block|}
specifier|default
name|ExpressionNodeBuilder
name|div
parameter_list|(
name|NodeBuilder
name|nodeBuilder
parameter_list|)
block|{
return|return
operator|new
name|ExpressionNodeBuilder
argument_list|(
name|this
argument_list|)
operator|.
name|div
argument_list|(
name|nodeBuilder
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

