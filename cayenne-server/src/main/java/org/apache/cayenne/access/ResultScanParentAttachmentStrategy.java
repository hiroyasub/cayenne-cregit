begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_comment
comment|/**  * Locates parents by checking for the child PK in the parent DataRow under FK.  */
end_comment

begin_class
class|class
name|ResultScanParentAttachmentStrategy
implements|implements
name|ParentAttachmentStrategy
block|{
specifier|private
name|PrefetchProcessorNode
name|parentNode
decl_stmt|;
specifier|private
name|DbJoin
index|[]
name|joins
decl_stmt|;
specifier|private
name|PrefetchProcessorNode
name|node
decl_stmt|;
comment|// TODO: the ivar below makes this strategy STATEFUL and non-reusable. If we need a
comment|// stateless version down the line, will need to move this to the
comment|// PrefetchProcessorNode.
specifier|private
name|Map
argument_list|<
name|Object
argument_list|,
name|List
argument_list|<
name|Persistent
argument_list|>
argument_list|>
name|partitionByChild
decl_stmt|;
name|ResultScanParentAttachmentStrategy
parameter_list|(
name|PrefetchProcessorNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ResultScanParentAttachmentStrategy works only for non-root nodes"
argument_list|)
throw|;
block|}
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|parentNode
operator|=
operator|(
name|PrefetchProcessorNode
operator|)
name|node
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|ObjRelationship
name|relationship
init|=
name|node
operator|.
name|getIncoming
argument_list|()
operator|.
name|getRelationship
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DbRelationship
argument_list|>
name|dbRelationships
init|=
name|relationship
operator|.
name|getDbRelationships
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbRelationships
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ResultScanParentAttachmentStrategy does not work for flattened relationships"
argument_list|)
throw|;
block|}
name|joins
operator|=
name|dbRelationships
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getJoins
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|DbJoin
index|[
name|dbRelationships
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getJoins
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|linkToParent
parameter_list|(
name|DataRow
name|row
parameter_list|,
name|Persistent
name|object
parameter_list|)
block|{
if|if
condition|(
name|partitionByChild
operator|==
literal|null
condition|)
block|{
name|indexParents
argument_list|()
expr_stmt|;
block|}
name|Object
name|key
decl_stmt|;
if|if
condition|(
name|joins
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|joins
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|joins
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|row
operator|.
name|get
argument_list|(
name|joins
index|[
name|j
index|]
operator|.
name|getTargetName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|key
operator|=
name|values
expr_stmt|;
block|}
else|else
block|{
name|key
operator|=
name|row
operator|.
name|get
argument_list|(
name|joins
index|[
literal|0
index|]
operator|.
name|getTargetName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Persistent
argument_list|>
name|parents
init|=
operator|(
name|List
argument_list|<
name|Persistent
argument_list|>
operator|)
name|partitionByChild
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|parents
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Persistent
name|parent
range|:
name|parents
control|)
block|{
name|node
operator|.
name|linkToParent
argument_list|(
name|object
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|indexParents
parameter_list|()
block|{
name|partitionByChild
operator|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|List
argument_list|<
name|Persistent
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Persistent
argument_list|>
name|objects
init|=
name|parentNode
operator|.
name|getObjects
argument_list|()
decl_stmt|;
comment|// this can be null if parent node returned no rows
if|if
condition|(
name|objects
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|DataRow
argument_list|>
name|rows
init|=
name|parentNode
operator|.
name|getDataRows
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|objects
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|DataRow
name|row
init|=
name|rows
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|key
decl_stmt|;
if|if
condition|(
name|joins
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|joins
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|joins
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|row
operator|.
name|get
argument_list|(
name|joins
index|[
name|j
index|]
operator|.
name|getSourceName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|key
operator|=
name|values
expr_stmt|;
block|}
else|else
block|{
name|key
operator|=
name|row
operator|.
name|get
argument_list|(
name|joins
index|[
literal|0
index|]
operator|.
name|getSourceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Persistent
argument_list|>
name|parents
init|=
name|partitionByChild
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|parents
operator|==
literal|null
condition|)
block|{
name|parents
operator|=
operator|new
name|ArrayList
argument_list|<
name|Persistent
argument_list|>
argument_list|()
expr_stmt|;
name|partitionByChild
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|parents
argument_list|)
expr_stmt|;
block|}
name|parents
operator|.
name|add
argument_list|(
name|objects
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

