begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|DbLoaderConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|DefaultDbLoaderDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|ManyToManyCandidateEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|CatalogFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|SchemaFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|loader
operator|.
name|filters
operator|.
name|TableFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationshipDetected
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DetectedDbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ProcedureParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|naming
operator|.
name|DefaultUniqueNameGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|naming
operator|.
name|ExportedKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|naming
operator|.
name|LegacyNameGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|naming
operator|.
name|NameCheckers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|naming
operator|.
name|ObjectNameGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|EntityMergeSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|EqualsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Utility class that does reverse engineering of the database. It can create  * DataMaps using database meta data obtained via JDBC driver.  */
end_comment

begin_class
specifier|public
class|class
name|DbLoader
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DbLoader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WILDCARD
init|=
literal|"%"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WILDCARD_PATTERN
init|=
literal|".*"
decl_stmt|;
specifier|private
specifier|final
name|Connection
name|connection
decl_stmt|;
specifier|private
specifier|final
name|DbAdapter
name|adapter
decl_stmt|;
specifier|private
specifier|final
name|DbLoaderDelegate
name|delegate
decl_stmt|;
specifier|private
name|boolean
name|creatingMeaningfulPK
decl_stmt|;
specifier|private
name|DatabaseMetaData
name|metaData
decl_stmt|;
comment|/**      * Strategy for choosing names for entities, attributes and relationships      */
specifier|private
name|ObjectNameGenerator
name|nameGenerator
decl_stmt|;
comment|/**      * Creates new DbLoader.      */
specifier|public
name|DbLoader
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|DbAdapter
name|adapter
parameter_list|,
name|DbLoaderDelegate
name|delegate
parameter_list|)
block|{
name|this
argument_list|(
name|connection
argument_list|,
name|adapter
argument_list|,
name|delegate
argument_list|,
operator|new
name|LegacyNameGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates new DbLoader with specified naming strategy.      *      * @since 3.0      */
specifier|public
name|DbLoader
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|DbAdapter
name|adapter
parameter_list|,
name|DbLoaderDelegate
name|delegate
parameter_list|,
name|ObjectNameGenerator
name|strategy
parameter_list|)
block|{
name|this
operator|.
name|adapter
operator|=
name|adapter
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
operator|==
literal|null
condition|?
operator|new
name|DefaultDbLoaderDelegate
argument_list|()
else|:
name|delegate
expr_stmt|;
name|setNameGenerator
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns DatabaseMetaData object associated with this DbLoader.      */
specifier|private
name|DatabaseMetaData
name|getMetaData
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|metaData
operator|==
literal|null
condition|)
block|{
name|metaData
operator|=
name|connection
operator|.
name|getMetaData
argument_list|()
expr_stmt|;
block|}
return|return
name|metaData
return|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|void
name|setCreatingMeaningfulPK
parameter_list|(
name|boolean
name|creatingMeaningfulPK
parameter_list|)
block|{
name|this
operator|.
name|creatingMeaningfulPK
operator|=
name|creatingMeaningfulPK
expr_stmt|;
block|}
comment|/**      * Returns true if the generator should map all primary key columns as      * ObjAttributes.      *      * @since 3.0      */
specifier|public
name|boolean
name|isCreatingMeaningfulPK
parameter_list|()
block|{
return|return
name|creatingMeaningfulPK
return|;
block|}
comment|/**      * Returns database connection used by this DbLoader.      *      * @since 3.0      */
specifier|public
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
comment|/**      * Returns DbAdapter associated with this DbLoader.      *      * @since 1.1      */
specifier|public
name|DbAdapter
name|getAdapter
parameter_list|()
block|{
return|return
name|adapter
return|;
block|}
comment|/**      * Retrieves catalogs for the database associated with this DbLoader.      *      * @return List with the catalog names, empty Array if none found.      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCatalogs
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|getStrings
argument_list|(
name|getMetaData
argument_list|()
operator|.
name|getCatalogs
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Retrieves the schemas for the database.      *      * @return List with the schema names, empty Array if none found.      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSchemas
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|getStrings
argument_list|(
name|getMetaData
argument_list|()
operator|.
name|getSchemas
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getStrings
parameter_list|(
name|ResultSet
name|rs
parameter_list|)
throws|throws
name|SQLException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|strings
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|strings
operator|.
name|add
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|strings
return|;
block|}
comment|/**      * Returns all the table types for the given database. Types may be such as      * Typical types are "TABLE",      * "VIEW", "SYSTEM TABLE", "GLOBAL TEMPORARY",      * "LOCAL TEMPORARY", "ALIAS", "SYNONYM"., etc.      *      * @return List of Strings, empty array if nothing found.      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTableTypes
parameter_list|()
throws|throws
name|SQLException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ResultSet
name|rs
init|=
name|getMetaData
argument_list|()
operator|.
name|getTableTypes
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|types
operator|.
name|add
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_TYPE"
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|types
return|;
block|}
comment|/**      * Returns all tables for given combination of the criteria. Tables returned      * as DbEntities without any attributes or relationships.      *      * @param config      * @param types  The types of table names to retrieve, null returns all types.      * @return      * @since 4.0      */
specifier|public
name|Map
argument_list|<
name|DbEntity
argument_list|,
name|PatternFilter
argument_list|>
name|getTables
parameter_list|(
name|DbLoaderConfiguration
name|config
parameter_list|,
name|String
index|[]
name|types
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|types
operator|==
literal|null
operator|||
name|types
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|types
operator|=
name|getDefaultTableTypes
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|DbEntity
argument_list|,
name|PatternFilter
argument_list|>
name|tables
init|=
operator|new
name|HashMap
argument_list|<
name|DbEntity
argument_list|,
name|PatternFilter
argument_list|>
argument_list|()
decl_stmt|;
name|FiltersConfig
name|filters
init|=
name|config
operator|.
name|getFiltersConfig
argument_list|()
decl_stmt|;
for|for
control|(
name|CatalogFilter
name|o
range|:
name|filters
operator|.
name|catalogs
control|)
block|{
for|for
control|(
name|SchemaFilter
name|schema
range|:
name|o
operator|.
name|schemas
control|)
block|{
name|tables
operator|.
name|putAll
argument_list|(
name|getDbEntities
argument_list|(
name|filters
argument_list|,
name|o
operator|.
name|name
argument_list|,
name|schema
operator|.
name|name
argument_list|,
name|types
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tables
return|;
block|}
specifier|private
name|Map
argument_list|<
name|DbEntity
argument_list|,
name|PatternFilter
argument_list|>
name|getDbEntities
parameter_list|(
name|FiltersConfig
name|filters
parameter_list|,
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|,
name|String
index|[]
name|types
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Read tables: catalog="
operator|+
name|catalog
operator|+
literal|", schema="
operator|+
name|schema
operator|+
literal|", types="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|types
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ResultSet
name|rs
init|=
name|getMetaData
argument_list|()
operator|.
name|getTables
argument_list|(
name|catalog
argument_list|,
name|schema
argument_list|,
name|WILDCARD
argument_list|,
name|types
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|DbEntity
argument_list|,
name|PatternFilter
argument_list|>
name|tables
init|=
operator|new
name|HashMap
argument_list|<
name|DbEntity
argument_list|,
name|PatternFilter
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
comment|// Oracle 9i and newer has a nifty recycle bin feature... but we don't
comment|// want dropped tables to be included here; in fact they may even result
comment|// in errors on reverse engineering as their names have special chars like
comment|// "/", etc. So skip them all together
name|String
name|name
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_NAME"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|DbEntity
name|table
init|=
operator|new
name|DetectedDbEntity
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|c
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_CAT"
argument_list|)
decl_stmt|;
name|table
operator|.
name|setCatalog
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_SCHEM"
argument_list|)
decl_stmt|;
name|table
operator|.
name|setSchema
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|PatternFilter
name|filter
init|=
name|filters
operator|.
name|tableFilter
argument_list|(
name|c
argument_list|,
name|s
argument_list|)
operator|.
name|isIncludeTable
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|tables
operator|.
name|put
argument_list|(
name|table
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|tables
return|;
block|}
comment|/**      * Loads dbEntities for the specified tables.      *      * @param map    DataMap to be populated with DbEntities.      * @param config      * @param tables The list of org.apache.cayenne.ashwood.dbutil.Table objects      *               for which DbEntities must be created.  @return false if loading must be immediately aborted.      */
specifier|public
name|List
argument_list|<
name|DbEntity
argument_list|>
name|loadDbEntities
parameter_list|(
name|DataMap
name|map
parameter_list|,
name|Map
argument_list|<
name|DbEntity
argument_list|,
name|PatternFilter
argument_list|>
name|tables
parameter_list|,
name|DbLoaderConfiguration
name|config
parameter_list|)
throws|throws
name|SQLException
block|{
comment|/** List of db entities to process. */
name|List
argument_list|<
name|DbEntity
argument_list|>
name|dbEntityList
init|=
operator|new
name|ArrayList
argument_list|<
name|DbEntity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|DbEntity
argument_list|,
name|PatternFilter
argument_list|>
name|entry
range|:
name|tables
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|DbEntity
name|dbEntity
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|PatternFilter
name|tableFilter
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Check if there already is a DbEntity under such name
comment|// if so, consult the delegate what to do
name|DbEntity
name|oldEnt
init|=
name|map
operator|.
name|getDbEntity
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldEnt
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|oldObjEnt
init|=
name|map
operator|.
name|getMappedEntities
argument_list|(
name|oldEnt
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldObjEnt
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ObjEntity
name|objEntity
range|:
name|oldObjEnt
control|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Delete ObjEntity: "
operator|+
name|objEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|removeObjEntity
argument_list|(
name|objEntity
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|objEntityRemoved
argument_list|(
name|objEntity
argument_list|)
expr_stmt|;
block|}
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Overwrite DbEntity: "
operator|+
name|oldEnt
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|removeDbEntity
argument_list|(
name|oldEnt
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|dbEntityRemoved
argument_list|(
name|oldEnt
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|addDbEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|delegate
operator|.
name|dbEntityAdded
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
comment|// delegate might have thrown this entity out... so check if it is still
comment|// around before continuing processing
if|if
condition|(
name|map
operator|.
name|getDbEntity
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
name|dbEntity
condition|)
block|{
name|dbEntityList
operator|.
name|add
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
block|}
block|}
name|loadDbAttributes
argument_list|(
name|config
operator|.
name|getFiltersConfig
argument_list|()
argument_list|,
name|tablesMap
operator|.
name|getKey
argument_list|()
argument_list|,
name|tablesMap
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|config
operator|.
name|isSkipPrimaryKeyLoading
argument_list|()
condition|)
block|{
name|getPrimaryKeyForTable
argument_list|(
name|tablesMap
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|dbEntityList
return|;
block|}
specifier|private
name|void
name|getPrimaryKeyForTable
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|DbEntity
argument_list|>
name|tables
parameter_list|)
throws|throws
name|SQLException
block|{
for|for
control|(
name|DbEntity
name|dbEntity
range|:
name|tables
operator|.
name|values
argument_list|()
control|)
block|{
name|ResultSet
name|rs
init|=
name|getMetaData
argument_list|()
operator|.
name|getPrimaryKeys
argument_list|(
name|dbEntity
operator|.
name|getCatalog
argument_list|()
argument_list|,
name|dbEntity
operator|.
name|getSchema
argument_list|()
argument_list|,
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|columnName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
decl_stmt|;
name|DbAttribute
name|attribute
init|=
name|dbEntity
operator|.
name|getAttribute
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|attribute
operator|!=
literal|null
condition|)
block|{
name|attribute
operator|.
name|setPrimaryKey
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// why an attribute might be null is not quiet clear
comment|// but there is a bug report 731406 indicating that it is possible
comment|// so just print the warning, and ignore
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Can't locate attribute for primary key: "
operator|+
name|columnName
argument_list|)
expr_stmt|;
block|}
name|String
name|pkName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"PK_NAME"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pkName
operator|!=
literal|null
operator|&&
name|dbEntity
operator|instanceof
name|DetectedDbEntity
condition|)
block|{
operator|(
operator|(
name|DetectedDbEntity
operator|)
name|dbEntity
operator|)
operator|.
name|setPrimaryKeyName
argument_list|(
name|pkName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|loadDbAttributes
parameter_list|(
name|DbEntity
name|dbEntity
parameter_list|,
name|PatternFilter
name|columnFilter
parameter_list|)
throws|throws
name|SQLException
block|{
name|ResultSet
name|rs
init|=
name|getMetaData
argument_list|()
operator|.
name|getColumns
argument_list|(
name|dbEntity
operator|.
name|getCatalog
argument_list|()
argument_list|,
name|dbEntity
operator|.
name|getSchema
argument_list|()
argument_list|,
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|,
literal|"%"
argument_list|)
decl_stmt|;
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
comment|// for a reason not quiet apparent to me, Oracle sometimes
comment|// returns duplicate record sets for the same table, messing up table
comment|// names. E.g. for the system table "WK$_ATTR_MAPPING" columns are
comment|// returned twice - as "WK$_ATTR_MAPPING" and "WK$$_ATTR_MAPPING"... Go figure
name|String
name|tableName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TABLE_NAME"
argument_list|)
decl_stmt|;
name|DbEntity
name|dbEntity
init|=
name|entities
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbEntity
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Skip column for '"
operator|+
name|tableName
operator|+
literal|"."
operator|+
name|rs
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|DbAttribute
name|attr
init|=
name|loadDbAttribute
argument_list|(
name|columns
argument_list|,
name|rs
argument_list|)
decl_stmt|;
name|attr
operator|.
name|setEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|columnFilter
operator|.
name|isInclude
argument_list|(
name|attr
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Importing: attribute '"
operator|+
name|attr
operator|.
name|getEntity
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|attr
operator|.
name|getName
argument_list|()
operator|+
literal|"' is skipped (Path: "
operator|+
name|dbEntity
operator|.
name|getCatalog
argument_list|()
operator|+
literal|"/"
operator|+
name|dbEntity
operator|.
name|getSchema
argument_list|()
operator|+
literal|"/"
operator|+
name|dbEntity
operator|.
name|getName
argument_list|()
operator|+
literal|"; Filter: "
operator|+
name|columnFilter
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
comment|// override existing attributes if it comes again
if|if
condition|(
name|dbEntity
operator|.
name|getAttribute
argument_list|(
name|attr
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|dbEntity
operator|.
name|removeAttribute
argument_list|(
name|attr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|DbAttribute
name|loadDbAttribute
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|columns
parameter_list|,
name|ResultSet
name|rs
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|columns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ResultSetMetaData
name|rsMetaData
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|rsMetaData
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|columns
operator|.
name|add
argument_list|(
name|rsMetaData
operator|.
name|getColumnLabel
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// gets attribute's (column's) information
name|int
name|columnType
init|=
name|rs
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
decl_stmt|;
comment|// ignore precision of non-decimal columns
name|int
name|decimalDigits
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|TypesMapping
operator|.
name|isDecimal
argument_list|(
name|columnType
argument_list|)
condition|)
block|{
name|decimalDigits
operator|=
name|rs
operator|.
name|getInt
argument_list|(
literal|"DECIMAL_DIGITS"
argument_list|)
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|wasNull
argument_list|()
condition|)
block|{
name|decimalDigits
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
comment|// create attribute delegating this task to adapter
name|DbAttribute
name|attr
init|=
name|adapter
operator|.
name|buildAttribute
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
argument_list|,
name|columnType
argument_list|,
name|rs
operator|.
name|getInt
argument_list|(
literal|"COLUMN_SIZE"
argument_list|)
argument_list|,
name|decimalDigits
argument_list|,
name|rs
operator|.
name|getBoolean
argument_list|(
literal|"NULLABLE"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|columns
operator|.
name|contains
argument_list|(
literal|"IS_AUTOINCREMENT"
argument_list|)
condition|)
block|{
name|String
name|autoIncrement
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"IS_AUTOINCREMENT"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"YES"
operator|.
name|equals
argument_list|(
name|autoIncrement
argument_list|)
condition|)
block|{
name|attr
operator|.
name|setGenerated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|attr
return|;
block|}
comment|/**      * Creates an ObjEntity for each DbEntity in the map.      */
specifier|public
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|loadObjEntities
parameter_list|(
name|DataMap
name|map
parameter_list|,
name|DbLoaderConfiguration
name|config
parameter_list|,
name|Collection
argument_list|<
name|DbEntity
argument_list|>
name|entities
parameter_list|)
block|{
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|loadedEntities
init|=
name|DbLoader
operator|.
name|loadObjEntities
argument_list|(
name|map
argument_list|,
name|config
argument_list|,
name|entities
argument_list|,
name|nameGenerator
argument_list|)
decl_stmt|;
name|createEntityMerger
argument_list|(
name|map
argument_list|)
operator|.
name|synchronizeWithDbEntities
argument_list|(
name|loadedEntities
argument_list|)
expr_stmt|;
return|return
name|loadedEntities
return|;
block|}
specifier|public
specifier|static
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|loadObjEntities
parameter_list|(
name|DataMap
name|map
parameter_list|,
name|DbLoaderConfiguration
name|config
parameter_list|,
name|Collection
argument_list|<
name|DbEntity
argument_list|>
name|entities
parameter_list|,
name|ObjectNameGenerator
name|nameGenerator
parameter_list|)
block|{
if|if
condition|(
name|entities
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|loadedEntities
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjEntity
argument_list|>
argument_list|(
name|entities
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// doLoad empty ObjEntities for all the tables
for|for
control|(
name|DbEntity
name|dbEntity
range|:
name|entities
control|)
block|{
comment|// check if there are existing entities
comment|// TODO: performance. This is an O(n^2) search and it shows on
comment|// YourKit profiles. Pre-cache mapped entities perhaps (?)
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|existing
init|=
name|map
operator|.
name|getMappedEntities
argument_list|(
name|dbEntity
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|existing
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|loadedEntities
operator|.
name|addAll
argument_list|(
name|existing
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|objEntityName
init|=
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|objEntity
argument_list|,
name|map
argument_list|,
name|nameGenerator
operator|.
name|createObjEntityName
argument_list|(
name|dbEntity
argument_list|)
argument_list|)
decl_stmt|;
name|ObjEntity
name|objEntity
init|=
operator|new
name|ObjEntity
argument_list|(
name|objEntityName
argument_list|)
decl_stmt|;
name|objEntity
operator|.
name|setDbEntity
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|objEntity
operator|.
name|setClassName
argument_list|(
name|config
operator|.
name|getGenericClassName
argument_list|()
operator|!=
literal|null
condition|?
name|config
operator|.
name|getGenericClassName
argument_list|()
else|:
name|map
operator|.
name|getNameWithDefaultPackage
argument_list|(
name|objEntity
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|addObjEntity
argument_list|(
name|objEntity
argument_list|)
expr_stmt|;
name|loadedEntities
operator|.
name|add
argument_list|(
name|objEntity
argument_list|)
expr_stmt|;
block|}
return|return
name|loadedEntities
return|;
block|}
comment|/**      * @since 4.0      */
specifier|protected
name|EntityMergeSupport
name|createEntityMerger
parameter_list|(
name|DataMap
name|map
parameter_list|)
block|{
return|return
operator|new
name|EntityMergeSupport
argument_list|(
name|map
argument_list|,
name|nameGenerator
argument_list|,
operator|!
name|creatingMeaningfulPK
argument_list|)
return|;
block|}
specifier|protected
name|void
name|loadDbRelationships
parameter_list|(
name|DbLoaderConfiguration
name|config
parameter_list|,
name|Map
argument_list|<
name|DbPath
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|DbEntity
argument_list|>
argument_list|>
name|tables
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|config
operator|.
name|isSkipRelationshipsLoading
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Get all the foreign keys referencing this table
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|DbPath
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|DbEntity
argument_list|>
argument_list|>
name|pathEntry
range|:
name|tables
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|ExportedKey
argument_list|>
argument_list|>
name|keys
init|=
name|loadExportedKeys
argument_list|(
name|config
argument_list|,
name|pathEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|pathEntry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|ExportedKey
argument_list|>
argument_list|>
name|entry
range|:
name|keys
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Process keys for: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|ExportedKey
argument_list|>
name|exportedKeys
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ExportedKey
name|key
init|=
name|exportedKeys
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
name|DbEntity
name|pkEntity
init|=
name|pathEntry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|key
operator|.
name|getPKTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pkEntity
operator|==
literal|null
condition|)
block|{
name|skipRelationLog
argument_list|(
name|key
argument_list|,
name|key
operator|.
name|getPKTableName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|DbEntity
name|fkEntity
init|=
name|pathEntry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|key
operator|.
name|getFKTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fkEntity
operator|==
literal|null
condition|)
block|{
name|skipRelationLog
argument_list|(
name|key
argument_list|,
name|key
operator|.
name|getFKTableName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
operator|new
name|EqualsBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|pkEntity
operator|.
name|getCatalog
argument_list|()
argument_list|,
name|key
operator|.
name|pkCatalog
argument_list|)
operator|.
name|append
argument_list|(
name|pkEntity
operator|.
name|getSchema
argument_list|()
argument_list|,
name|key
operator|.
name|pkSchema
argument_list|)
operator|.
name|append
argument_list|(
name|fkEntity
operator|.
name|getCatalog
argument_list|()
argument_list|,
name|key
operator|.
name|fkCatalog
argument_list|)
operator|.
name|append
argument_list|(
name|fkEntity
operator|.
name|getSchema
argument_list|()
argument_list|,
name|key
operator|.
name|fkSchema
argument_list|)
operator|.
name|isEquals
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Skip relation: '"
operator|+
name|key
operator|+
literal|"' because it related to objects from other catalog/schema"
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"     relation primary key: '"
operator|+
name|key
operator|.
name|pkCatalog
operator|+
literal|"."
operator|+
name|key
operator|.
name|pkSchema
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"       primary key entity: '"
operator|+
name|pkEntity
operator|.
name|getCatalog
argument_list|()
operator|+
literal|"."
operator|+
name|pkEntity
operator|.
name|getSchema
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"     relation foreign key: '"
operator|+
name|key
operator|.
name|fkCatalog
operator|+
literal|"."
operator|+
name|key
operator|.
name|fkSchema
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"       foreign key entity: '"
operator|+
name|fkEntity
operator|.
name|getCatalog
argument_list|()
operator|+
literal|"."
operator|+
name|fkEntity
operator|.
name|getSchema
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// forwardRelationship is a reference from table with primary key
name|DbRelationship
name|forwardRelationship
init|=
operator|new
name|DbRelationship
argument_list|(
name|generateName
argument_list|(
name|pkEntity
argument_list|,
name|key
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|forwardRelationship
operator|.
name|setSourceEntity
argument_list|(
name|pkEntity
argument_list|)
expr_stmt|;
name|forwardRelationship
operator|.
name|setTargetEntityName
argument_list|(
name|fkEntity
argument_list|)
expr_stmt|;
comment|// forwardRelationship is a reference from table with foreign key, it is what exactly we load from db
name|DbRelationshipDetected
name|reverseRelationship
init|=
operator|new
name|DbRelationshipDetected
argument_list|(
name|generateName
argument_list|(
name|fkEntity
argument_list|,
name|key
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|reverseRelationship
operator|.
name|setFkName
argument_list|(
name|key
operator|.
name|getFKName
argument_list|()
argument_list|)
expr_stmt|;
name|reverseRelationship
operator|.
name|setSourceEntity
argument_list|(
name|fkEntity
argument_list|)
expr_stmt|;
name|reverseRelationship
operator|.
name|setTargetEntityName
argument_list|(
name|pkEntity
argument_list|)
expr_stmt|;
name|reverseRelationship
operator|.
name|setToMany
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|createAndAppendJoins
argument_list|(
name|exportedKeys
argument_list|,
name|pkEntity
argument_list|,
name|fkEntity
argument_list|,
name|forwardRelationship
argument_list|,
name|reverseRelationship
argument_list|)
expr_stmt|;
name|boolean
name|toDependentPK
init|=
name|isToDependentPK
argument_list|(
name|forwardRelationship
argument_list|)
decl_stmt|;
name|forwardRelationship
operator|.
name|setToDependentPK
argument_list|(
name|toDependentPK
argument_list|)
expr_stmt|;
name|boolean
name|isOneToOne
init|=
name|toDependentPK
operator|&&
name|fkEntity
operator|.
name|getPrimaryKeys
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|forwardRelationship
operator|.
name|getJoins
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|forwardRelationship
operator|.
name|setToMany
argument_list|(
operator|!
name|isOneToOne
argument_list|)
expr_stmt|;
name|forwardRelationship
operator|.
name|setName
argument_list|(
name|generateName
argument_list|(
name|pkEntity
argument_list|,
name|key
argument_list|,
operator|!
name|isOneToOne
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|delegate
operator|.
name|dbRelationshipLoaded
argument_list|(
name|fkEntity
argument_list|,
name|reverseRelationship
argument_list|)
condition|)
block|{
name|fkEntity
operator|.
name|addRelationship
argument_list|(
name|reverseRelationship
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delegate
operator|.
name|dbRelationshipLoaded
argument_list|(
name|pkEntity
argument_list|,
name|forwardRelationship
argument_list|)
condition|)
block|{
name|pkEntity
operator|.
name|addRelationship
argument_list|(
name|forwardRelationship
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|isToDependentPK
parameter_list|(
name|DbRelationship
name|forwardRelationship
parameter_list|)
block|{
for|for
control|(
name|DbJoin
name|dbJoin
range|:
name|forwardRelationship
operator|.
name|getJoins
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|dbJoin
operator|.
name|getTarget
argument_list|()
operator|.
name|isPrimaryKey
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|createAndAppendJoins
parameter_list|(
name|Set
argument_list|<
name|ExportedKey
argument_list|>
name|exportedKeys
parameter_list|,
name|DbEntity
name|pkEntity
parameter_list|,
name|DbEntity
name|fkEntity
parameter_list|,
name|DbRelationship
name|forwardRelationship
parameter_list|,
name|DbRelationshipDetected
name|reverseRelationship
parameter_list|)
block|{
for|for
control|(
name|ExportedKey
name|exportedKey
range|:
name|exportedKeys
control|)
block|{
comment|// Create and append joins
name|String
name|pkName
init|=
name|exportedKey
operator|.
name|getPKColumnName
argument_list|()
decl_stmt|;
name|String
name|fkName
init|=
name|exportedKey
operator|.
name|getFKColumnName
argument_list|()
decl_stmt|;
comment|// skip invalid joins...
name|DbAttribute
name|pkAtt
init|=
name|pkEntity
operator|.
name|getAttribute
argument_list|(
name|pkName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pkAtt
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"no attribute for declared primary key: "
operator|+
name|pkName
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|DbAttribute
name|fkAtt
init|=
name|fkEntity
operator|.
name|getAttribute
argument_list|(
name|fkName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fkAtt
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"no attribute for declared foreign key: "
operator|+
name|fkName
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|forwardRelationship
operator|.
name|addJoin
argument_list|(
operator|new
name|DbJoin
argument_list|(
name|forwardRelationship
argument_list|,
name|pkName
argument_list|,
name|fkName
argument_list|)
argument_list|)
expr_stmt|;
name|reverseRelationship
operator|.
name|addJoin
argument_list|(
operator|new
name|DbJoin
argument_list|(
name|reverseRelationship
argument_list|,
name|fkName
argument_list|,
name|pkName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|ExportedKey
argument_list|>
argument_list|>
name|loadExportedKeys
parameter_list|(
name|DbLoaderConfiguration
name|config
parameter_list|,
name|DbPath
name|dbPath
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|DbEntity
argument_list|>
name|tables
parameter_list|)
throws|throws
name|SQLException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|ExportedKey
argument_list|>
argument_list|>
name|keys
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|ExportedKey
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DbEntity
name|dbEntity
range|:
name|tables
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|delegate
operator|.
name|dbRelationship
argument_list|(
name|dbEntity
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ResultSet
name|rs
decl_stmt|;
try|try
block|{
name|rs
operator|=
name|getMetaData
argument_list|()
operator|.
name|getExportedKeys
argument_list|(
name|dbPath
operator|.
name|catalog
argument_list|,
name|dbPath
operator|.
name|schema
argument_list|,
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|cay182Ex
parameter_list|)
block|{
comment|// Sybase-specific - the line above blows on VIEWS, see CAY-182.
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Error getting relationships for '"
operator|+
name|dbPath
operator|+
literal|"', ignoring. "
operator|+
name|cay182Ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|cay182Ex
argument_list|)
expr_stmt|;
return|return
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|ExportedKey
argument_list|>
argument_list|>
argument_list|()
return|;
block|}
try|try
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|ExportedKey
name|key
init|=
name|ExportedKey
operator|.
name|extractData
argument_list|(
name|rs
argument_list|)
decl_stmt|;
name|DbEntity
name|fkEntity
init|=
name|tables
operator|.
name|get
argument_list|(
name|key
operator|.
name|getFKTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fkEntity
operator|==
literal|null
condition|)
block|{
name|skipRelationLog
argument_list|(
name|key
argument_list|,
name|key
operator|.
name|getFKTableName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|DbPath
name|path
init|=
operator|new
name|DbPath
argument_list|(
name|fkEntity
operator|.
name|getCatalog
argument_list|()
argument_list|,
name|fkEntity
operator|.
name|getSchema
argument_list|()
argument_list|,
name|fkEntity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|config
operator|.
name|getFiltersConfig
argument_list|()
operator|.
name|filter
argument_list|(
name|path
argument_list|)
operator|.
name|tableFilter
argument_list|()
operator|.
name|isInclude
argument_list|(
name|fkEntity
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Set
argument_list|<
name|ExportedKey
argument_list|>
name|exportedKeys
init|=
name|keys
operator|.
name|get
argument_list|(
name|key
operator|.
name|getStrKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exportedKeys
operator|==
literal|null
condition|)
block|{
name|exportedKeys
operator|=
operator|new
name|TreeSet
argument_list|<
name|ExportedKey
argument_list|>
argument_list|()
expr_stmt|;
name|keys
operator|.
name|put
argument_list|(
name|key
operator|.
name|getStrKey
argument_list|()
argument_list|,
name|exportedKeys
argument_list|)
expr_stmt|;
block|}
name|exportedKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|keys
return|;
block|}
specifier|private
name|void
name|skipRelationLog
parameter_list|(
name|ExportedKey
name|key
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
comment|// if (LOGGER.isDebugEnabled()) {
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Skip relation: '"
operator|+
name|key
operator|+
literal|"' because table '"
operator|+
name|tableName
operator|+
literal|"' not found"
argument_list|)
expr_stmt|;
comment|// }
block|}
specifier|private
name|String
name|generateName
parameter_list|(
name|DbEntity
name|entity
parameter_list|,
name|ExportedKey
name|key
parameter_list|,
name|boolean
name|toMany
parameter_list|)
block|{
name|String
name|forwardPreferredName
init|=
name|nameGenerator
operator|.
name|createDbRelationshipName
argument_list|(
name|key
argument_list|,
name|toMany
argument_list|)
decl_stmt|;
return|return
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|dbRelationship
argument_list|,
name|entity
argument_list|,
name|forwardPreferredName
argument_list|)
return|;
block|}
comment|/**      * Detects correct relationship multiplicity and "to dep pk" flag. Only      * called on relationships from PK to FK, not the reverse ones.      */
specifier|protected
name|void
name|postProcessMasterDbRelationship
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|,
name|ExportedKey
name|key
parameter_list|)
block|{
block|}
comment|/**      * Flattens many-to-many relationships in the generated model.      */
specifier|public
specifier|static
name|void
name|flattenManyToManyRelationships
parameter_list|(
name|DataMap
name|map
parameter_list|,
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|loadedObjEntities
parameter_list|,
name|ObjectNameGenerator
name|objectNameGenerator
parameter_list|)
block|{
if|if
condition|(
name|loadedObjEntities
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|entitiesForDelete
init|=
operator|new
name|LinkedList
argument_list|<
name|ObjEntity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjEntity
name|curEntity
range|:
name|loadedObjEntities
control|)
block|{
name|ManyToManyCandidateEntity
name|entity
init|=
name|ManyToManyCandidateEntity
operator|.
name|build
argument_list|(
name|curEntity
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|entity
operator|.
name|optimizeRelationships
argument_list|(
name|objectNameGenerator
argument_list|)
expr_stmt|;
name|entitiesForDelete
operator|.
name|add
argument_list|(
name|curEntity
argument_list|)
expr_stmt|;
block|}
block|}
comment|// remove needed entities
for|for
control|(
name|ObjEntity
name|curDeleteEntity
range|:
name|entitiesForDelete
control|)
block|{
name|map
operator|.
name|removeObjEntity
argument_list|(
name|curDeleteEntity
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|loadedObjEntities
operator|.
name|removeAll
argument_list|(
name|entitiesForDelete
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|fireObjEntitiesAddedEvents
parameter_list|(
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|loadedObjEntities
parameter_list|)
block|{
for|for
control|(
name|ObjEntity
name|curEntity
range|:
name|loadedObjEntities
control|)
block|{
comment|// notify delegate
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
name|delegate
operator|.
name|objEntityAdded
argument_list|(
name|curEntity
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * By default we want to load Tables and Views for mo types      *      * @see DbLoader#getTableTypes()      * @since 4.0      */
specifier|public
name|String
index|[]
name|getDefaultTableTypes
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|viewType
init|=
name|adapter
operator|.
name|tableTypeForView
argument_list|()
decl_stmt|;
if|if
condition|(
name|viewType
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|viewType
argument_list|)
expr_stmt|;
block|}
name|String
name|tableType
init|=
name|adapter
operator|.
name|tableTypeForTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableType
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|tableType
argument_list|)
expr_stmt|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Performs database reverse engineering and generates DataMap that contains      * default mapping of the tables and views. By default will include regular      * tables and views.      *      * @since 1.0.7      * @deprecated since 4.0 use      */
annotation|@
name|Deprecated
specifier|public
name|DataMap
name|loadDataMapFromDB
parameter_list|(
name|String
name|schemaPattern
parameter_list|,
name|String
name|tablePattern
parameter_list|,
name|DataMap
name|dataMap
parameter_list|)
throws|throws
name|SQLException
block|{
name|DbLoaderConfiguration
name|configuration
init|=
operator|new
name|DbLoaderConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setFiltersConfig
argument_list|(
name|FiltersConfig
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|schemaPattern
argument_list|,
name|TableFilter
operator|.
name|include
argument_list|(
name|tablePattern
argument_list|)
argument_list|,
name|PatternFilter
operator|.
name|INCLUDE_NOTHING
argument_list|)
argument_list|)
expr_stmt|;
name|load
argument_list|(
name|dataMap
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
return|return
name|dataMap
return|;
block|}
comment|/**      * Performs database reverse engineering and generates DataMap object that      * contains default mapping of the tables and views. Allows to limit types      * of tables to read.      *      * @deprecated since 4.0 use      *             {@link #load(org.apache.cayenne.map.DataMap, DbLoaderConfiguration, String...)}      *             method that supports catalogs.      */
annotation|@
name|Deprecated
specifier|public
name|DataMap
name|loadDataMapFromDB
parameter_list|(
name|String
name|schemaPattern
parameter_list|,
name|String
name|tablePattern
parameter_list|,
name|String
index|[]
name|tableTypes
parameter_list|,
name|DataMap
name|dataMap
parameter_list|)
throws|throws
name|SQLException
block|{
name|dataMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|DbLoaderConfiguration
name|config
init|=
operator|new
name|DbLoaderConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setFiltersConfig
argument_list|(
name|FiltersConfig
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|schemaPattern
argument_list|,
name|TableFilter
operator|.
name|include
argument_list|(
name|tablePattern
argument_list|)
argument_list|,
name|PatternFilter
operator|.
name|INCLUDE_NOTHING
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|setTableTypes
argument_list|(
name|tableTypes
argument_list|)
expr_stmt|;
name|load
argument_list|(
name|dataMap
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
name|dataMap
return|;
block|}
comment|/**      * Performs database reverse engineering based on the specified config      * and fills the specified      * DataMap object with DB and object mapping info.      *      * @since 4.0      */
specifier|public
name|void
name|load
parameter_list|(
name|DataMap
name|dataMap
parameter_list|,
name|DbLoaderConfiguration
name|config
parameter_list|)
throws|throws
name|SQLException
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Schema loading..."
argument_list|)
expr_stmt|;
name|String
index|[]
name|tableTypes
init|=
name|config
operator|.
name|getTableTypes
argument_list|()
operator|==
literal|null
condition|?
name|this
operator|.
name|getDefaultTableTypes
argument_list|()
else|:
name|config
operator|.
name|getTableTypes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DbEntity
argument_list|>
name|entities
init|=
name|loadDbEntities
argument_list|(
name|dataMap
argument_list|,
name|getTables
argument_list|(
name|config
argument_list|,
name|tableTypes
argument_list|)
argument_list|,
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|entities
operator|!=
literal|null
condition|)
block|{
name|loadDbRelationships
argument_list|(
name|config
argument_list|,
name|tables
argument_list|)
expr_stmt|;
name|prepareObjLayer
argument_list|(
name|dataMap
argument_list|,
name|config
argument_list|,
name|entities
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|prepareObjLayer
parameter_list|(
name|DataMap
name|dataMap
parameter_list|,
name|DbLoaderConfiguration
name|config
parameter_list|,
name|Collection
argument_list|<
name|DbEntity
argument_list|>
name|entities
parameter_list|)
block|{
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|loadedObjEntities
init|=
name|loadObjEntities
argument_list|(
name|dataMap
argument_list|,
name|config
argument_list|,
name|entities
argument_list|)
decl_stmt|;
name|flattenManyToManyRelationships
argument_list|(
name|dataMap
argument_list|,
name|loadedObjEntities
argument_list|,
name|getNameGenerator
argument_list|()
argument_list|)
expr_stmt|;
name|fireObjEntitiesAddedEvents
argument_list|(
name|loadedObjEntities
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs database reverse engineering to match the specified catalog,      * schema, table name and table type patterns and fills the specified      * DataMap object with DB and object mapping info.      *      * @since 4.0      */
specifier|public
name|DataMap
name|load
parameter_list|(
name|DbLoaderConfiguration
name|config
parameter_list|)
throws|throws
name|SQLException
block|{
name|DataMap
name|dataMap
init|=
operator|new
name|DataMap
argument_list|()
decl_stmt|;
name|load
argument_list|(
name|dataMap
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|loadProcedures
argument_list|(
name|dataMap
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
name|dataMap
return|;
block|}
comment|/**      * Loads database stored procedures into the DataMap.      *<p>      *<i>As of 1.1 there is no boolean property or delegate method to make      * procedure loading optional or to implement custom merging logic, so      * currently this method is NOT CALLED from "loadDataMapFromDB" and should      * be invoked explicitly by the user.</i>      *</p>      *      * @since 1.1      * @deprecated since 4.0 use loadProcedures(DataMap, String, String, String) that supports "catalog" pattern.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|loadProceduresFromDB
parameter_list|(
name|String
name|schemaPattern
parameter_list|,
name|String
name|namePattern
parameter_list|,
name|DataMap
name|dataMap
parameter_list|)
throws|throws
name|SQLException
block|{
name|DbLoaderConfiguration
name|configuration
init|=
operator|new
name|DbLoaderConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setFiltersConfig
argument_list|(
name|FiltersConfig
operator|.
name|create
argument_list|(
literal|null
argument_list|,
name|schemaPattern
argument_list|,
name|TableFilter
operator|.
name|include
argument_list|(
literal|null
argument_list|)
argument_list|,
operator|new
name|PatternFilter
argument_list|()
operator|.
name|include
argument_list|(
name|namePattern
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|loadProcedures
argument_list|(
name|dataMap
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
comment|/**      * Loads database stored procedures into the DataMap.      *<p>      *<i>As of 1.1 there is no boolean property or delegate method to make      * procedure loading optional or to implement custom merging logic, so      * currently this method is NOT CALLED from "loadDataMapFromDB" and should      * be invoked explicitly by the user.</i>      *</p>      *      * @since 4.0      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Procedure
argument_list|>
name|loadProcedures
parameter_list|(
name|DataMap
name|dataMap
parameter_list|,
name|DbLoaderConfiguration
name|config
parameter_list|)
throws|throws
name|SQLException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Procedure
argument_list|>
name|procedures
init|=
name|loadProcedures
argument_list|(
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|procedures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|procedures
return|;
block|}
name|loadProceduresColumns
argument_list|(
name|config
argument_list|,
name|procedures
argument_list|)
expr_stmt|;
for|for
control|(
name|Procedure
name|procedure
range|:
name|procedures
operator|.
name|values
argument_list|()
control|)
block|{
name|dataMap
operator|.
name|addProcedure
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
block|}
return|return
name|procedures
return|;
block|}
specifier|private
name|void
name|loadProceduresColumns
parameter_list|(
name|DbLoaderConfiguration
name|config
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Procedure
argument_list|>
name|procedures
parameter_list|)
throws|throws
name|SQLException
block|{
for|for
control|(
name|DbPath
name|dbPath
range|:
name|config
operator|.
name|getFiltersConfig
argument_list|()
operator|.
name|pathsForQueries
argument_list|()
control|)
block|{
name|ResultSet
name|columnsRS
init|=
name|getMetaData
argument_list|()
operator|.
name|getProcedureColumns
argument_list|(
name|dbPath
operator|.
name|catalog
argument_list|,
name|dbPath
operator|.
name|schema
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|columnsRS
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|schema
init|=
name|columnsRS
operator|.
name|getString
argument_list|(
literal|"PROCEDURE_SCHEM"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|columnsRS
operator|.
name|getString
argument_list|(
literal|"PROCEDURE_NAME"
argument_list|)
decl_stmt|;
name|String
name|key
init|=
operator|(
name|schema
operator|==
literal|null
condition|?
literal|""
else|:
name|schema
operator|+
literal|'.'
operator|)
operator|+
name|name
decl_stmt|;
name|Procedure
name|procedure
init|=
name|procedures
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|procedure
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|ProcedureParameter
name|column
init|=
name|loadProcedureParams
argument_list|(
name|columnsRS
argument_list|,
name|key
argument_list|,
name|procedure
argument_list|)
decl_stmt|;
if|if
condition|(
name|column
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|procedure
operator|.
name|addCallParameter
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|columnsRS
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|ProcedureParameter
name|loadProcedureParams
parameter_list|(
name|ResultSet
name|columnsRS
parameter_list|,
name|String
name|key
parameter_list|,
name|Procedure
name|procedure
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|columnName
init|=
name|columnsRS
operator|.
name|getString
argument_list|(
literal|"COLUMN_NAME"
argument_list|)
decl_stmt|;
comment|// skip ResultSet columns, as they are not described in Cayenne procedures yet...
name|short
name|type
init|=
name|columnsRS
operator|.
name|getShort
argument_list|(
literal|"COLUMN_TYPE"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|DatabaseMetaData
operator|.
name|procedureColumnResult
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"skipping ResultSet column: "
operator|+
name|key
operator|+
literal|"."
operator|+
name|columnName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|columnName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|DatabaseMetaData
operator|.
name|procedureColumnReturn
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"null column name, assuming result column: "
operator|+
name|key
argument_list|)
expr_stmt|;
name|columnName
operator|=
literal|"_return_value"
expr_stmt|;
name|procedure
operator|.
name|setReturningValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"invalid null column name, skipping column : "
operator|+
name|key
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|int
name|columnType
init|=
name|columnsRS
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
decl_stmt|;
comment|// ignore precision of non-decimal columns
name|int
name|decimalDigits
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|TypesMapping
operator|.
name|isDecimal
argument_list|(
name|columnType
argument_list|)
condition|)
block|{
name|decimalDigits
operator|=
name|columnsRS
operator|.
name|getShort
argument_list|(
literal|"SCALE"
argument_list|)
expr_stmt|;
if|if
condition|(
name|columnsRS
operator|.
name|wasNull
argument_list|()
condition|)
block|{
name|decimalDigits
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
name|ProcedureParameter
name|column
init|=
operator|new
name|ProcedureParameter
argument_list|(
name|columnName
argument_list|)
decl_stmt|;
name|int
name|direction
init|=
name|getDirection
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|direction
operator|!=
operator|-
literal|1
condition|)
block|{
name|column
operator|.
name|setDirection
argument_list|(
name|direction
argument_list|)
expr_stmt|;
block|}
name|column
operator|.
name|setType
argument_list|(
name|columnType
argument_list|)
expr_stmt|;
name|column
operator|.
name|setMaxLength
argument_list|(
name|columnsRS
operator|.
name|getInt
argument_list|(
literal|"LENGTH"
argument_list|)
argument_list|)
expr_stmt|;
name|column
operator|.
name|setPrecision
argument_list|(
name|decimalDigits
argument_list|)
expr_stmt|;
name|column
operator|.
name|setProcedure
argument_list|(
name|procedure
argument_list|)
expr_stmt|;
return|return
name|column
return|;
block|}
specifier|private
specifier|static
name|int
name|getDirection
parameter_list|(
name|short
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DatabaseMetaData
operator|.
name|procedureColumnIn
case|:
return|return
name|ProcedureParameter
operator|.
name|IN_PARAMETER
return|;
case|case
name|DatabaseMetaData
operator|.
name|procedureColumnInOut
case|:
return|return
name|ProcedureParameter
operator|.
name|IN_OUT_PARAMETER
return|;
case|case
name|DatabaseMetaData
operator|.
name|procedureColumnOut
case|:
return|return
name|ProcedureParameter
operator|.
name|OUT_PARAMETER
return|;
default|default:
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Procedure
argument_list|>
name|loadProcedures
parameter_list|(
name|DbLoaderConfiguration
name|config
parameter_list|)
throws|throws
name|SQLException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Procedure
argument_list|>
name|procedures
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Procedure
argument_list|>
argument_list|()
decl_stmt|;
name|FiltersConfig
name|filters
init|=
name|config
operator|.
name|getFiltersConfig
argument_list|()
decl_stmt|;
for|for
control|(
name|CatalogFilter
name|catalogFilter
range|:
name|filters
operator|.
name|catalogs
control|)
block|{
for|for
control|(
name|SchemaFilter
name|schema
range|:
name|catalogFilter
operator|.
name|schemas
control|)
block|{
if|if
condition|(
name|filters
operator|.
name|proceduresFilter
argument_list|(
name|catalogFilter
operator|.
name|name
argument_list|,
name|schema
operator|.
name|name
argument_list|)
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|procedures
operator|.
name|putAll
argument_list|(
name|loadProcedures
argument_list|(
name|filters
argument_list|,
name|catalogFilter
operator|.
name|name
argument_list|,
name|schema
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|procedures
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Procedure
argument_list|>
name|loadProcedures
parameter_list|(
name|FiltersConfig
name|filters
parameter_list|,
name|String
name|catalog
parameter_list|,
name|String
name|schema
parameter_list|)
throws|throws
name|SQLException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Procedure
argument_list|>
name|procedures
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Procedure
argument_list|>
argument_list|()
decl_stmt|;
comment|// get procedures
name|ResultSet
name|rs
init|=
name|getMetaData
argument_list|()
operator|.
name|getProcedures
argument_list|(
name|catalog
argument_list|,
name|schema
argument_list|,
name|WILDCARD
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|"PROCEDURE_NAME"
argument_list|)
decl_stmt|;
name|Procedure
name|procedure
init|=
operator|new
name|Procedure
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|procedure
operator|.
name|setCatalog
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"PROCEDURE_CAT"
argument_list|)
argument_list|)
expr_stmt|;
name|procedure
operator|.
name|setSchema
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"PROCEDURE_SCHEM"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|filters
operator|.
name|proceduresFilter
argument_list|(
name|procedure
operator|.
name|getCatalog
argument_list|()
argument_list|,
name|procedure
operator|.
name|getSchema
argument_list|()
argument_list|)
operator|.
name|isInclude
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"skipping Cayenne PK procedure: "
operator|+
name|name
argument_list|)
expr_stmt|;
continue|continue;
block|}
switch|switch
condition|(
name|rs
operator|.
name|getShort
argument_list|(
literal|"PROCEDURE_TYPE"
argument_list|)
condition|)
block|{
case|case
name|DatabaseMetaData
operator|.
name|procedureNoResult
case|:
case|case
name|DatabaseMetaData
operator|.
name|procedureResultUnknown
case|:
name|procedure
operator|.
name|setReturningValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|DatabaseMetaData
operator|.
name|procedureReturnsResult
case|:
name|procedure
operator|.
name|setReturningValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
name|procedures
operator|.
name|put
argument_list|(
name|procedure
operator|.
name|getFullyQualifiedName
argument_list|()
argument_list|,
name|procedure
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|procedures
return|;
block|}
comment|/**      * Sets new naming strategy for reverse engineering      *      * @since 3.0      */
specifier|public
name|void
name|setNameGenerator
parameter_list|(
name|ObjectNameGenerator
name|strategy
parameter_list|)
block|{
if|if
condition|(
name|strategy
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Attempt to set null into NameGenerator. LegacyNameGenerator will be used."
argument_list|)
expr_stmt|;
name|this
operator|.
name|nameGenerator
operator|=
operator|new
name|LegacyNameGenerator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|nameGenerator
operator|=
name|strategy
expr_stmt|;
block|}
block|}
comment|/**      * @return naming strategy for reverse engineering      * @since 3.0      */
specifier|public
name|ObjectNameGenerator
name|getNameGenerator
parameter_list|()
block|{
return|return
name|nameGenerator
return|;
block|}
block|}
end_class

end_unit

