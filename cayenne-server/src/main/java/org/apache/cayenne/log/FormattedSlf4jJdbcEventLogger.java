begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|log
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|ParameterBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|RuntimeProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_comment
comment|/**  * A {@link Slf4jJdbcEventLogger} extension that provides pretty formatting of the logged SQL messages.  *   * @since 3.1  * @since 4.0 renamed from FormattedCommonsJdbcEventLogger to FormattedSlf4jJdbcEventLogger as part of migration to SLF4J  */
end_comment

begin_class
specifier|public
class|class
name|FormattedSlf4jJdbcEventLogger
extends|extends
name|Slf4jJdbcEventLogger
block|{
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|KEYWORDS
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|KEYWORDS
operator|.
name|put
argument_list|(
literal|" select "
argument_list|,
literal|"SELECT"
argument_list|)
expr_stmt|;
name|KEYWORDS
operator|.
name|put
argument_list|(
literal|" from "
argument_list|,
literal|"FROM"
argument_list|)
expr_stmt|;
name|KEYWORDS
operator|.
name|put
argument_list|(
literal|" where "
argument_list|,
literal|"WHERE"
argument_list|)
expr_stmt|;
name|KEYWORDS
operator|.
name|put
argument_list|(
literal|" order by "
argument_list|,
literal|"ORDER BY"
argument_list|)
expr_stmt|;
name|KEYWORDS
operator|.
name|put
argument_list|(
literal|" group by "
argument_list|,
literal|"GROUP BY"
argument_list|)
expr_stmt|;
name|KEYWORDS
operator|.
name|put
argument_list|(
literal|" update "
argument_list|,
literal|"UPDATE"
argument_list|)
expr_stmt|;
name|KEYWORDS
operator|.
name|put
argument_list|(
literal|" exec "
argument_list|,
literal|"EXEC"
argument_list|)
expr_stmt|;
name|KEYWORDS
operator|.
name|put
argument_list|(
literal|" set "
argument_list|,
literal|"SET"
argument_list|)
expr_stmt|;
name|KEYWORDS
operator|.
name|put
argument_list|(
literal|" insert "
argument_list|,
literal|"INSERT"
argument_list|)
expr_stmt|;
name|KEYWORDS
operator|.
name|put
argument_list|(
literal|" values "
argument_list|,
literal|"VALUES"
argument_list|)
expr_stmt|;
name|KEYWORDS
operator|.
name|put
argument_list|(
literal|" delete "
argument_list|,
literal|"DELETE"
argument_list|)
expr_stmt|;
name|KEYWORDS
operator|.
name|put
argument_list|(
literal|" declare "
argument_list|,
literal|"DECLARE"
argument_list|)
expr_stmt|;
name|KEYWORDS
operator|.
name|put
argument_list|(
literal|" case "
argument_list|,
literal|"CASE"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FormattedSlf4jJdbcEventLogger
parameter_list|(
annotation|@
name|Inject
name|RuntimeProperties
name|runtimeProperties
parameter_list|)
block|{
name|super
argument_list|(
name|runtimeProperties
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|formatQuery
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|scanResult
init|=
name|scanQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iter
init|=
name|scanResult
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|nextKeyIdx
init|=
operator|(
name|iter
operator|.
name|hasNext
argument_list|()
operator|)
condition|?
name|iter
operator|.
name|next
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|apixCount
init|=
literal|0
decl_stmt|;
name|int
name|bufferPos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|sql
operator|.
name|length
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
name|sql
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
operator|==
literal|'\''
condition|)
block|{
name|apixCount
operator|++
expr_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
operator|&&
name|sql
operator|.
name|charAt
argument_list|(
name|pos
operator|-
literal|1
argument_list|)
operator|==
literal|'\''
condition|)
block|{
name|apixCount
operator|=
name|apixCount
operator|-
literal|2
expr_stmt|;
block|}
block|}
if|if
condition|(
name|apixCount
operator|%
literal|2
operator|!=
literal|0
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|pos
operator|==
name|nextKeyIdx
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|sql
operator|.
name|substring
argument_list|(
name|bufferPos
argument_list|,
name|pos
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|String
name|shiftedKeyWrd
init|=
name|scanResult
operator|.
name|get
argument_list|(
name|nextKeyIdx
argument_list|)
decl_stmt|;
name|nextKeyIdx
operator|=
operator|(
name|iter
operator|.
name|hasNext
argument_list|()
operator|)
condition|?
name|iter
operator|.
name|next
argument_list|()
else|:
operator|-
literal|1
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|shiftedKeyWrd
argument_list|)
expr_stmt|;
name|pos
operator|=
name|pos
operator|+
name|shiftedKeyWrd
operator|.
name|length
argument_list|()
expr_stmt|;
name|bufferPos
operator|=
name|pos
operator|+
literal|1
expr_stmt|;
block|}
if|else if
condition|(
name|sql
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
operator|==
literal|','
operator|||
name|sql
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
operator|==
literal|')'
operator|||
name|sql
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
operator|==
literal|'('
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|sql
operator|.
name|substring
argument_list|(
name|bufferPos
argument_list|,
name|pos
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n\t"
argument_list|)
expr_stmt|;
name|bufferPos
operator|=
name|pos
operator|+
literal|1
expr_stmt|;
block|}
block|}
name|buffer
operator|.
name|append
argument_list|(
name|sql
operator|.
name|substring
argument_list|(
name|bufferPos
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
while|while
condition|(
name|result
operator|.
name|contains
argument_list|(
literal|"  "
argument_list|)
condition|)
block|{
name|result
operator|=
name|result
operator|.
name|replaceAll
argument_list|(
literal|"  "
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|scanQuery
parameter_list|(
name|String
name|sql
parameter_list|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|sql2Lower
init|=
name|sql
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|keyWrd
range|:
name|KEYWORDS
operator|.
name|keySet
argument_list|()
control|)
block|{
name|int
name|prevIdx
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|idx
init|=
name|sql2Lower
operator|.
name|indexOf
argument_list|(
name|keyWrd
argument_list|,
name|prevIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|idx
argument_list|,
name|KEYWORDS
operator|.
name|get
argument_list|(
name|keyWrd
argument_list|)
argument_list|)
expr_stmt|;
name|prevIdx
operator|=
name|idx
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|logQuery
parameter_list|(
name|String
name|sql
parameter_list|,
name|ParameterBinding
index|[]
name|bindings
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|()
condition|)
block|{
name|super
operator|.
name|logQuery
argument_list|(
name|formatQuery
argument_list|(
name|sql
argument_list|)
argument_list|,
name|bindings
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

