begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_comment
comment|/**  * An exception thrown during an attempt to delete an object that has a relationship to a  * non-null related object, that has a DENY delete rule.  *   * @since 1.2  */
end_comment

begin_class
specifier|public
class|class
name|DeleteDenyException
extends|extends
name|CayenneRuntimeException
block|{
specifier|protected
name|Persistent
name|object
decl_stmt|;
specifier|protected
name|String
name|relationship
decl_stmt|;
specifier|public
name|DeleteDenyException
parameter_list|()
block|{
block|}
specifier|public
name|DeleteDenyException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since 1.2      */
specifier|public
name|DeleteDenyException
parameter_list|(
name|Persistent
name|object
parameter_list|,
name|String
name|relationship
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
name|super
argument_list|(
name|reason
argument_list|)
expr_stmt|;
name|this
operator|.
name|object
operator|=
name|object
expr_stmt|;
name|this
operator|.
name|relationship
operator|=
name|relationship
expr_stmt|;
block|}
comment|/**      * @since 1.2      */
specifier|public
name|Persistent
name|getObject
parameter_list|()
block|{
return|return
name|object
return|;
block|}
comment|/**      * @since 1.2      */
specifier|public
name|String
name|getRelationship
parameter_list|()
block|{
return|return
name|relationship
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"Can't delete object"
argument_list|)
expr_stmt|;
if|if
condition|(
name|object
operator|!=
literal|null
operator|&&
name|object
operator|.
name|getObjectId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" with OID "
argument_list|)
operator|.
name|append
argument_list|(
name|object
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|relationship
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|". Reason: relationship '"
argument_list|)
operator|.
name|append
argument_list|(
name|relationship
argument_list|)
operator|.
name|append
argument_list|(
literal|"' has 'deny' delete rule"
argument_list|)
expr_stmt|;
block|}
name|String
name|message
init|=
name|super
operator|.
name|getUnlabeledMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|". Details: "
argument_list|)
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

