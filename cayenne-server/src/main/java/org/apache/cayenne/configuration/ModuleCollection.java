begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Binder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Module
import|;
end_import

begin_comment
comment|/**  * A module that decorates a collection of other modules. Used as a helper for  * multi-module runtimes initialization.  *   * @since 3.2  */
end_comment

begin_class
specifier|public
class|class
name|ModuleCollection
implements|implements
name|Module
block|{
specifier|private
name|Collection
argument_list|<
name|Module
argument_list|>
name|modules
decl_stmt|;
specifier|public
name|ModuleCollection
parameter_list|(
name|Module
modifier|...
name|modules
parameter_list|)
block|{
name|this
operator|.
name|modules
operator|=
operator|new
name|ArrayList
argument_list|<
name|Module
argument_list|>
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|modules
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ModuleCollection
name|add
parameter_list|(
name|Module
modifier|...
name|modules
parameter_list|)
block|{
if|if
condition|(
name|modules
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Module
name|m
range|:
name|modules
control|)
block|{
name|addModule
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
specifier|public
name|ModuleCollection
name|add
parameter_list|(
name|Collection
argument_list|<
name|Module
argument_list|>
name|modules
parameter_list|)
block|{
if|if
condition|(
name|modules
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Module
name|m
range|:
name|modules
control|)
block|{
name|addModule
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
specifier|private
name|void
name|addModule
parameter_list|(
name|Module
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|instanceof
name|ModuleCollection
condition|)
block|{
comment|// flatten
name|add
argument_list|(
operator|(
operator|(
name|ModuleCollection
operator|)
name|m
operator|)
operator|.
name|getModules
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|modules
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|Module
argument_list|>
name|getModules
parameter_list|()
block|{
return|return
name|modules
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
for|for
control|(
name|Module
name|m
range|:
name|modules
control|)
block|{
name|m
operator|.
name|configure
argument_list|(
name|binder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

