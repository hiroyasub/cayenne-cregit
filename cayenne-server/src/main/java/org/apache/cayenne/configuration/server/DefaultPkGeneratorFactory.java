begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|JdbcAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|JdbcPkGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|PkGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|log
operator|.
name|JdbcEventLogger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbVersion
operator|.
name|MS_SQL_2008
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbVersion
operator|.
name|MS_SQL_2012
import|;
end_import

begin_comment
comment|/**  * A factory of PkGenerators that also loads user-provided pkGenerator or guesses  * the pkGenerator from the database metadata.  */
end_comment

begin_class
specifier|public
class|class
name|DefaultPkGeneratorFactory
implements|implements
name|PkGeneratorFactory
block|{
annotation|@
name|Inject
specifier|protected
name|JdbcEventLogger
name|jdbcEventLogger
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|pkGenerators
decl_stmt|;
specifier|public
name|DefaultPkGeneratorFactory
parameter_list|(
annotation|@
name|Inject
argument_list|(
name|Constants
operator|.
name|SERVER_PK_GENERATORS_MAP
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|pkGenerators
parameter_list|)
block|{
name|this
operator|.
name|pkGenerators
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|pkGenerators
argument_list|,
parameter_list|()
lambda|->
literal|"Null pkGenerators list"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|PkGenerator
name|detectPkGenerator
parameter_list|(
name|DbVersion
operator|.
name|DbType
name|dbType
parameter_list|,
name|JdbcAdapter
name|adapter
parameter_list|,
name|DatabaseMetaData
name|md
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|int
name|majorVersion
init|=
name|md
operator|.
name|getDatabaseMajorVersion
argument_list|()
decl_stmt|;
specifier|final
name|int
name|minorVersion
init|=
name|md
operator|.
name|getDatabaseMinorVersion
argument_list|()
decl_stmt|;
name|Class
name|pkGeneratorClazz
init|=
literal|null
decl_stmt|;
name|DbVersion
name|currentDbVersion
init|=
operator|new
name|DbVersion
argument_list|(
name|dbType
argument_list|,
name|majorVersion
argument_list|,
name|minorVersion
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dbType
condition|)
block|{
case|case
name|MS_SQL
case|:
name|pkGeneratorClazz
operator|=
name|detectPkGenerator4MSSQL
argument_list|(
name|currentDbVersion
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jdbcEventLogger
operator|.
name|log
argument_list|(
literal|"Failed to detect PkGenerator, using generic generator"
argument_list|)
expr_stmt|;
name|pkGeneratorClazz
operator|=
name|defaultPkGenerator
argument_list|()
expr_stmt|;
block|}
name|jdbcEventLogger
operator|.
name|log
argument_list|(
literal|"DB - '"
operator|+
name|currentDbVersion
operator|+
literal|"'; PkGenerator - "
operator|+
name|pkGeneratorClazz
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|newInstancePk
argument_list|(
name|pkGeneratorClazz
argument_list|,
name|adapter
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Could not instantiate "
operator|+
name|currentDbVersion
argument_list|,
name|throwable
argument_list|)
throw|;
block|}
block|}
comment|/**      * @param pkGeneratorClazz {@link Class} for instantiation PkGenerator      * @param adapter          adapter for installation in PkGenerator      */
specifier|protected
name|PkGenerator
name|newInstancePk
parameter_list|(
name|Class
name|pkGeneratorClazz
parameter_list|,
name|JdbcAdapter
name|adapter
parameter_list|)
throws|throws
name|Throwable
block|{
name|Constructor
name|pkGeneratorConstructor
init|=
name|pkGeneratorClazz
operator|.
name|getDeclaredConstructor
argument_list|(
name|JdbcAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
name|pkGeneratorConstructor
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MethodHandle
name|createPkGenerator
init|=
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|unreflectConstructor
argument_list|(
name|pkGeneratorConstructor
argument_list|)
decl_stmt|;
return|return
operator|(
name|PkGenerator
operator|)
name|createPkGenerator
operator|.
name|invoke
argument_list|(
name|adapter
argument_list|)
return|;
block|}
specifier|protected
name|Class
name|defaultPkGenerator
parameter_list|()
block|{
return|return
name|JdbcPkGenerator
operator|.
name|class
return|;
block|}
comment|/**      * Choosing a specific generator, depending on the version of the database      *      * @param currentDbVersion version of the database for which you need to determine the PkGenerator      */
specifier|protected
name|Class
name|detectPkGenerator4MSSQL
parameter_list|(
name|DbVersion
name|currentDbVersion
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isCheckTypeGenerator
argument_list|(
name|currentDbVersion
argument_list|,
name|MS_SQL_2008
argument_list|,
name|MS_SQL_2012
argument_list|)
condition|)
block|{
return|return
name|defaultPkGenerator
argument_list|()
return|;
block|}
if|if
condition|(
name|currentDbVersion
operator|.
name|compareTo
argument_list|(
name|MS_SQL_2012
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|String
name|version
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|MS_SQL_2012
argument_list|)
decl_stmt|;
if|if
condition|(
name|pkGenerators
operator|.
name|containsKey
argument_list|(
name|version
argument_list|)
condition|)
block|{
return|return
name|pkGenerators
operator|.
name|get
argument_list|(
name|version
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|String
name|version
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|MS_SQL_2008
argument_list|)
decl_stmt|;
if|if
condition|(
name|pkGenerators
operator|.
name|containsKey
argument_list|(
name|version
argument_list|)
condition|)
block|{
return|return
name|pkGenerators
operator|.
name|get
argument_list|(
name|version
argument_list|)
return|;
block|}
block|}
name|jdbcEventLogger
operator|.
name|log
argument_list|(
literal|"Failed to detect PkGenerator, using generic generator"
argument_list|)
expr_stmt|;
return|return
name|defaultPkGenerator
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|isCheckTypeGenerator
parameter_list|(
name|DbVersion
name|currentDbVersion
parameter_list|,
name|DbVersion
modifier|...
name|dbVersions
parameter_list|)
block|{
for|for
control|(
name|DbVersion
name|item
range|:
name|dbVersions
control|)
block|{
if|if
condition|(
operator|!
name|item
operator|.
name|isTypeCheck
argument_list|(
name|currentDbVersion
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

