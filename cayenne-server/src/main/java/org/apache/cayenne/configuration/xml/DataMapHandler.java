begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|DataMapHandler
extends|extends
name|NamespaceAwareNestedTagHandler
block|{
comment|/* This constants must be in sync with dataMap.xsd schema */
specifier|private
specifier|static
specifier|final
name|String
name|DATA_MAP_TAG
init|=
literal|"data-map"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_TAG
init|=
literal|"property"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DB_ENTITY_TAG
init|=
literal|"db-entity"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OBJ_ENTITY_TAG
init|=
literal|"obj-entity"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DB_RELATIONSHIP_TAG
init|=
literal|"db-relationship"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OBJ_RELATIONSHIP_TAG
init|=
literal|"obj-relationship"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EMBEDDABLE_TAG
init|=
literal|"embeddable"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROCEDURE_TAG
init|=
literal|"procedure"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QUERY_TAG
init|=
literal|"query"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TRUE
init|=
literal|"true"
decl_stmt|;
specifier|private
name|DataMap
name|dataMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mapProperties
decl_stmt|;
specifier|public
name|DataMapHandler
parameter_list|(
name|NamespaceAwareNestedTagHandler
name|parentHandler
parameter_list|)
block|{
name|super
argument_list|(
name|parentHandler
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DataMapHandler
parameter_list|(
name|LoaderContext
name|loaderContext
parameter_list|)
block|{
name|super
argument_list|(
name|loaderContext
argument_list|)
expr_stmt|;
name|setTargetNamespace
argument_list|(
name|DataMap
operator|.
name|SCHEMA_XSD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|processElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
switch|switch
condition|(
name|localName
condition|)
block|{
case|case
name|PROPERTY_TAG
case|:
name|addProperty
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|DATA_MAP_TAG
case|:
name|this
operator|.
name|dataMap
operator|=
operator|new
name|DataMap
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ContentHandler
name|createChildTagHandler
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|namespaceURI
operator|.
name|equals
argument_list|(
name|targetNamespace
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|localName
condition|)
block|{
case|case
name|DB_ENTITY_TAG
case|:
return|return
operator|new
name|DbEntityHandler
argument_list|(
name|this
argument_list|,
name|dataMap
argument_list|)
return|;
case|case
name|OBJ_ENTITY_TAG
case|:
return|return
operator|new
name|ObjEntityHandler
argument_list|(
name|this
argument_list|,
name|dataMap
argument_list|)
return|;
case|case
name|DB_RELATIONSHIP_TAG
case|:
return|return
operator|new
name|DbRelationshipHandler
argument_list|(
name|this
argument_list|,
name|dataMap
argument_list|)
return|;
case|case
name|OBJ_RELATIONSHIP_TAG
case|:
return|return
operator|new
name|ObjRelationshipHandler
argument_list|(
name|this
argument_list|,
name|dataMap
argument_list|)
return|;
case|case
name|PROCEDURE_TAG
case|:
return|return
operator|new
name|ProcedureHandler
argument_list|(
name|this
argument_list|,
name|dataMap
argument_list|)
return|;
case|case
name|QUERY_TAG
case|:
return|return
operator|new
name|QueryDescriptorHandler
argument_list|(
name|this
argument_list|,
name|dataMap
argument_list|)
return|;
case|case
name|EMBEDDABLE_TAG
case|:
return|return
operator|new
name|EmbeddableHandler
argument_list|(
name|this
argument_list|,
name|dataMap
argument_list|)
return|;
block|}
block|}
return|return
name|super
operator|.
name|createChildTagHandler
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|,
name|attributes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|beforeScopeEnd
parameter_list|()
block|{
name|dataMap
operator|.
name|initWithProperties
argument_list|(
name|mapProperties
argument_list|)
expr_stmt|;
name|loaderContext
operator|.
name|dataMapLoaded
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addProperty
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|name
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|name
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"MapLoader::processStartDataMapProperty(), no property name."
argument_list|)
throw|;
block|}
name|String
name|value
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|value
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"MapLoader::processStartDataMapProperty(), no property value."
argument_list|)
throw|;
block|}
comment|// special meaning for<property name="name" .../>
if|if
condition|(
literal|"name"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|dataMap
operator|.
name|setName
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|mapProperties
operator|==
literal|null
condition|)
block|{
name|mapProperties
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|mapProperties
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DataMap
name|getDataMap
parameter_list|()
block|{
return|return
name|dataMap
return|;
block|}
block|}
end_class

end_unit

