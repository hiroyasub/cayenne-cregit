begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|datasource
operator|.
name|DataSourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|ListBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|spi
operator|.
name|ModuleLoader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A convenience class to assemble custom ServerRuntime. It allows to easily  * configure custom modules, multiple config locations, or quickly create a  * global DataSource.  *  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|ServerRuntimeBuilder
block|{
specifier|static
specifier|final
name|String
name|DEFAULT_NAME
init|=
literal|"cayenne"
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|String
argument_list|>
name|configs
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Module
argument_list|>
name|modules
decl_stmt|;
specifier|private
name|DataSourceFactory
name|dataSourceFactory
decl_stmt|;
specifier|private
name|String
name|jdbcUrl
decl_stmt|;
specifier|private
name|String
name|jdbcDriver
decl_stmt|;
specifier|private
name|String
name|jdbcUser
decl_stmt|;
specifier|private
name|String
name|jdbcPassword
decl_stmt|;
specifier|private
name|int
name|jdbcMinConnections
decl_stmt|;
specifier|private
name|int
name|jdbcMaxConnections
decl_stmt|;
specifier|private
name|long
name|maxQueueWaitTime
decl_stmt|;
specifier|private
name|String
name|validationQuery
decl_stmt|;
specifier|private
name|boolean
name|autoLoadModules
decl_stmt|;
comment|/**      * Creates a builder with a fixed name of the DataDomain of the resulting      * ServerRuntime. Specifying explicit name is often needed for consistency      * in runtimes merged from multiple configs, each having its own name.      */
specifier|protected
name|ServerRuntimeBuilder
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|configs
operator|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|modules
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|autoLoadModules
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Disables DI module auto-loading. By default auto-loading is enabled based on      * {@link org.apache.cayenne.di.spi.ModuleLoader} service provider inetrface. If you decide to disable auto-loading,      * make sure you provide all the modules that you need.      *      * @return this builder instance.      */
specifier|public
name|ServerRuntimeBuilder
name|disableModulesAutoLoading
parameter_list|()
block|{
name|this
operator|.
name|autoLoadModules
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a DataSource that will override any DataSources found in the      * mapping. If the mapping contains no DataNodes, and the DataSource is set      * with this method, the builder would create a single default DataNode.      *      * @see DataSourceBuilder      */
specifier|public
name|ServerRuntimeBuilder
name|dataSource
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
block|{
name|this
operator|.
name|dataSourceFactory
operator|=
operator|new
name|FixedDataSourceFactory
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets JNDI location for the default DataSource. If the mapping contains no      * DataNodes, and the DataSource is set with this method, the builder would      * create a single default DataNode.      */
annotation|@
name|Deprecated
specifier|public
name|ServerRuntimeBuilder
name|jndiDataSource
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|dataSourceFactory
operator|=
operator|new
name|FixedJNDIDataSourceFactory
argument_list|(
name|location
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a database URL for the default DataSource.      */
specifier|public
name|ServerRuntimeBuilder
name|url
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|this
operator|.
name|jdbcUrl
operator|=
name|url
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a driver Java class for the default DataSource.      */
specifier|public
name|ServerRuntimeBuilder
name|jdbcDriver
parameter_list|(
name|String
name|driver
parameter_list|)
block|{
comment|// TODO: guess the driver from URL
name|this
operator|.
name|jdbcDriver
operator|=
name|driver
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a validation query for the default DataSource.      *      * @param validationQuery a SQL string that returns some result. It will be used to      *                        validate connections in the pool.      */
specifier|public
name|ServerRuntimeBuilder
name|validationQuery
parameter_list|(
name|String
name|validationQuery
parameter_list|)
block|{
name|this
operator|.
name|validationQuery
operator|=
name|validationQuery
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ServerRuntimeBuilder
name|maxQueueWaitTime
parameter_list|(
name|long
name|maxQueueWaitTime
parameter_list|)
block|{
name|this
operator|.
name|maxQueueWaitTime
operator|=
name|maxQueueWaitTime
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a user name for the default DataSource.      */
specifier|public
name|ServerRuntimeBuilder
name|user
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|this
operator|.
name|jdbcUser
operator|=
name|user
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a password for the default DataSource.      */
specifier|public
name|ServerRuntimeBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|jdbcPassword
operator|=
name|password
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ServerRuntimeBuilder
name|minConnections
parameter_list|(
name|int
name|minConnections
parameter_list|)
block|{
name|this
operator|.
name|jdbcMinConnections
operator|=
name|minConnections
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ServerRuntimeBuilder
name|maxConnections
parameter_list|(
name|int
name|maxConnections
parameter_list|)
block|{
name|this
operator|.
name|jdbcMaxConnections
operator|=
name|maxConnections
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ServerRuntimeBuilder
name|addConfig
parameter_list|(
name|String
name|configurationLocation
parameter_list|)
block|{
name|configs
operator|.
name|add
argument_list|(
name|configurationLocation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ServerRuntimeBuilder
name|addConfigs
parameter_list|(
name|String
modifier|...
name|configurationLocations
parameter_list|)
block|{
if|if
condition|(
name|configurationLocations
operator|!=
literal|null
condition|)
block|{
name|configs
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|configurationLocations
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|ServerRuntimeBuilder
name|addConfigs
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|configurationLocations
parameter_list|)
block|{
name|configs
operator|.
name|addAll
argument_list|(
name|configurationLocations
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ServerRuntimeBuilder
name|addModule
parameter_list|(
name|Module
name|module
parameter_list|)
block|{
name|modules
operator|.
name|add
argument_list|(
name|module
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ServerRuntimeBuilder
name|addModules
parameter_list|(
name|Collection
argument_list|<
name|Module
argument_list|>
name|modules
parameter_list|)
block|{
name|this
operator|.
name|modules
operator|.
name|addAll
argument_list|(
name|modules
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ServerRuntime
name|build
parameter_list|()
block|{
name|Collection
argument_list|<
name|Module
argument_list|>
name|allModules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// first load default or auto-loaded modules...
name|allModules
operator|.
name|addAll
argument_list|(
name|autoLoadModules
condition|?
name|autoLoadedModules
argument_list|()
else|:
name|defaultModules
argument_list|()
argument_list|)
expr_stmt|;
comment|// custom modules override default and auto-loaded modules...
name|allModules
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|modules
argument_list|)
expr_stmt|;
comment|// builder modules override default, auto-loaded and custom modules...
name|allModules
operator|.
name|addAll
argument_list|(
name|builderModules
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|ServerRuntime
argument_list|(
name|allModules
argument_list|)
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|autoLoadedModules
parameter_list|()
block|{
return|return
operator|new
name|ModuleLoader
argument_list|()
operator|.
name|load
argument_list|(
name|CayenneServerModuleProvider
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|defaultModules
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|ServerModule
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|builderModules
parameter_list|()
block|{
name|Collection
argument_list|<
name|Module
argument_list|>
name|modules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|configs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|modules
operator|.
name|add
argument_list|(
name|binder
lambda|->
block|{
name|ListBuilder
argument_list|<
name|String
argument_list|>
name|locationsBinder
init|=
name|ServerModule
operator|.
name|contributeProjectLocations
argument_list|(
name|binder
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|configs
control|)
block|{
name|locationsBinder
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|String
name|nameOverride
init|=
name|name
decl_stmt|;
if|if
condition|(
name|nameOverride
operator|==
literal|null
condition|)
block|{
comment|// check if we need to force the default name ... we do when no configs or multiple configs are supplied.
if|if
condition|(
name|configs
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|nameOverride
operator|=
name|DEFAULT_NAME
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nameOverride
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|finalNameOverride
init|=
name|nameOverride
decl_stmt|;
name|modules
operator|.
name|add
argument_list|(
name|binder
lambda|->
name|ServerModule
operator|.
name|contributeProperties
argument_list|(
name|binder
argument_list|)
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVER_DOMAIN_NAME_PROPERTY
argument_list|,
name|finalNameOverride
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dataSourceFactory
operator|!=
literal|null
condition|)
block|{
name|modules
operator|.
name|add
argument_list|(
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|DataDomain
operator|.
name|class
argument_list|)
operator|.
name|toProvider
argument_list|(
name|SyntheticNodeDataDomainProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|DataSourceFactory
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|dataSourceFactory
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|// URL and driver are the minimal requirement for DelegatingDataSourceFactory to work
if|else if
condition|(
name|jdbcUrl
operator|!=
literal|null
operator|&&
name|jdbcDriver
operator|!=
literal|null
condition|)
block|{
name|modules
operator|.
name|add
argument_list|(
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|DataDomain
operator|.
name|class
argument_list|)
operator|.
name|toProvider
argument_list|(
name|SyntheticNodeDataDomainProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|MapBuilder
argument_list|<
name|String
argument_list|>
name|props
init|=
name|ServerModule
operator|.
name|contributeProperties
argument_list|(
name|binder
argument_list|)
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|JDBC_DRIVER_PROPERTY
argument_list|,
name|jdbcDriver
argument_list|)
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|JDBC_URL_PROPERTY
argument_list|,
name|jdbcUrl
argument_list|)
decl_stmt|;
if|if
condition|(
name|jdbcUser
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|JDBC_USERNAME_PROPERTY
argument_list|,
name|jdbcUser
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jdbcPassword
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|JDBC_PASSWORD_PROPERTY
argument_list|,
name|jdbcPassword
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jdbcMinConnections
operator|>
literal|0
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|JDBC_MIN_CONNECTIONS_PROPERTY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|jdbcMinConnections
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jdbcMaxConnections
operator|>
literal|0
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|JDBC_MAX_CONNECTIONS_PROPERTY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|jdbcMaxConnections
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxQueueWaitTime
operator|>
literal|0
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|JDBC_MAX_QUEUE_WAIT_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|maxQueueWaitTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|validationQuery
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|JDBC_VALIDATION_QUERY_PROPERTY
argument_list|,
name|validationQuery
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|modules
return|;
block|}
block|}
end_class

end_unit

