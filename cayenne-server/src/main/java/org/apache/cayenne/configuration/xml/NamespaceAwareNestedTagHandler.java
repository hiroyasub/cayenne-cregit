begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Base class for handlers that can delegate execution of unknown tags to  * handlers produced by factory.  *  * @since 4.1  */
end_comment

begin_class
specifier|abstract
specifier|public
class|class
name|NamespaceAwareNestedTagHandler
extends|extends
name|SAXNestedTagHandler
block|{
specifier|protected
name|String
name|targetNamespace
decl_stmt|;
specifier|protected
name|boolean
name|allowAllNamespaces
decl_stmt|;
specifier|private
name|StringBuilder
name|charactersBuffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|public
name|NamespaceAwareNestedTagHandler
parameter_list|(
name|LoaderContext
name|loaderContext
parameter_list|)
block|{
name|super
argument_list|(
name|loaderContext
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NamespaceAwareNestedTagHandler
parameter_list|(
name|SAXNestedTagHandler
name|parentHandler
parameter_list|,
name|String
name|targetNamespace
parameter_list|)
block|{
name|super
argument_list|(
name|parentHandler
argument_list|)
expr_stmt|;
name|this
operator|.
name|targetNamespace
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|targetNamespace
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NamespaceAwareNestedTagHandler
parameter_list|(
name|NamespaceAwareNestedTagHandler
name|parentHandler
parameter_list|)
block|{
name|this
argument_list|(
name|parentHandler
argument_list|,
name|parentHandler
operator|.
name|targetNamespace
argument_list|)
expr_stmt|;
block|}
specifier|abstract
specifier|protected
name|boolean
name|processElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
function_decl|;
specifier|protected
name|void
name|processCharData
parameter_list|(
name|String
name|localName
parameter_list|,
name|String
name|data
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
name|charactersBuffer
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|startElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|ContentHandler
name|childHandler
init|=
name|createChildTagHandler
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|boolean
name|validNamespace
init|=
name|allowAllNamespaces
operator|||
name|namespaceURI
operator|.
name|equals
argument_list|(
name|targetNamespace
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validNamespace
operator|||
operator|!
name|processElement
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|attributes
argument_list|)
condition|)
block|{
comment|// recursively pass element down into child handlers
name|childHandler
operator|.
name|startElement
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
comment|// push child handler to the stack...
name|loaderContext
operator|.
name|getXmlReader
argument_list|()
operator|.
name|setContentHandler
argument_list|(
name|childHandler
argument_list|)
expr_stmt|;
name|charactersBuffer
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|charactersBuffer
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
name|super
operator|.
name|endElement
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|)
expr_stmt|;
if|if
condition|(
name|namespaceURI
operator|.
name|equals
argument_list|(
name|targetNamespace
argument_list|)
operator|&&
name|parentHandler
operator|instanceof
name|NamespaceAwareNestedTagHandler
condition|)
block|{
operator|(
operator|(
name|NamespaceAwareNestedTagHandler
operator|)
name|parentHandler
operator|)
operator|.
name|processCharData
argument_list|(
name|localName
argument_list|,
name|charactersBuffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|ContentHandler
name|createChildTagHandler
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
block|{
comment|// try to pass unknown tags to someone else
return|return
name|loaderContext
operator|.
name|getFactory
argument_list|()
operator|.
name|createHandler
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTargetNamespace
parameter_list|(
name|String
name|targetNamespace
parameter_list|)
block|{
name|this
operator|.
name|targetNamespace
operator|=
name|targetNamespace
expr_stmt|;
block|}
specifier|public
name|void
name|setAllowAllNamespaces
parameter_list|(
name|boolean
name|allowAllNamespaces
parameter_list|)
block|{
name|this
operator|.
name|allowAllNamespaces
operator|=
name|allowAllNamespaces
expr_stmt|;
block|}
block|}
end_class

end_unit

