begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Locator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_comment
comment|/**  * A superclass of nested tag handlers for parsing of XML documents with SAX.  * This class is not namespace aware, i.e. tags like&lt;info:property/> and&lt;property/>  * will be treated as equal.  * Use {@link NamespaceAwareNestedTagHandler} if you need to process namespaces.  *  * @see NamespaceAwareNestedTagHandler  * @since 3.1  * @since 4.1 redesigned and moved from {@link org.apache.cayenne.configuration} package  */
end_comment

begin_class
specifier|public
class|class
name|SAXNestedTagHandler
extends|extends
name|DefaultHandler
block|{
specifier|private
specifier|final
specifier|static
name|Locator
name|NOOP_LOCATOR
init|=
operator|new
name|Locator
argument_list|()
block|{
specifier|public
name|int
name|getColumnNumber
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|int
name|getLineNumber
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|String
name|getPublicId
parameter_list|()
block|{
return|return
literal|"<unknown>"
return|;
block|}
specifier|public
name|String
name|getSystemId
parameter_list|()
block|{
return|return
literal|"<unknown>"
return|;
block|}
block|}
decl_stmt|;
specifier|protected
name|LoaderContext
name|loaderContext
decl_stmt|;
specifier|protected
name|ContentHandler
name|parentHandler
decl_stmt|;
specifier|protected
name|Locator
name|locator
decl_stmt|;
specifier|public
name|SAXNestedTagHandler
parameter_list|(
name|LoaderContext
name|loaderContext
parameter_list|)
block|{
name|this
operator|.
name|loaderContext
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|loaderContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|locator
operator|=
name|NOOP_LOCATOR
expr_stmt|;
block|}
specifier|public
name|SAXNestedTagHandler
parameter_list|(
name|SAXNestedTagHandler
name|parentHandler
parameter_list|)
block|{
name|this
operator|.
name|parentHandler
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|parentHandler
argument_list|)
expr_stmt|;
name|this
operator|.
name|loaderContext
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|parentHandler
operator|.
name|loaderContext
argument_list|)
expr_stmt|;
name|locator
operator|=
name|parentHandler
operator|.
name|locator
expr_stmt|;
if|if
condition|(
name|locator
operator|==
literal|null
condition|)
block|{
name|locator
operator|=
name|NOOP_LOCATOR
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|unexpectedTagMessage
parameter_list|(
name|String
name|tagFound
parameter_list|,
name|String
modifier|...
name|tagsExpected
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|tagsExpected
operator|!=
literal|null
condition|?
name|Arrays
operator|.
name|asList
argument_list|(
name|tagsExpected
argument_list|)
else|:
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"tag<%s> is unexpected at [%d,%d]. The following tags are allowed here: %s"
argument_list|,
name|tagFound
argument_list|,
name|locator
operator|.
name|getColumnNumber
argument_list|()
argument_list|,
name|locator
operator|.
name|getLineNumber
argument_list|()
argument_list|,
name|expected
argument_list|)
return|;
block|}
comment|/**      * Main method to process XML content.      * Should be override in subclasses, by default do nothing.      * Return value should be true if tag was fully processed and shouldn't be passed down to child handler.      *      * @param namespaceURI namespace for tag      * @param localName tag local name (i.e. w/o namespace prefix)      * @param attributes tag attributes      *      * @return true if tag was processed      *      * @throws SAXException can be thrown to abort parsing      *      * @see #createChildTagHandler(String, String, String, Attributes)      */
specifier|protected
name|boolean
name|processElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Callback method that is called before this handler pushed out of parsers stack.      * Can be used to flush some aggregate state.      */
specifier|protected
name|void
name|beforeScopeEnd
parameter_list|()
block|{
block|}
comment|/**      * This method should be used to create nested handlers to process children elements.      * This method should never return {@code null}.      *      * @param namespaceURI namespace for tag      * @param localName tag local name (i.e. w/o namespace prefix)      * @param qName tag full name (i.e. with namespace prefix)      * @param attributes tag attributes      * @return new handler to process child tag      */
specifier|protected
name|ContentHandler
name|createChildTagHandler
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
block|{
comment|// loose handling of unrecognized tags - just ignore them
return|return
operator|new
name|SAXNestedTagHandler
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|protected
name|void
name|stop
parameter_list|()
block|{
name|beforeScopeEnd
argument_list|()
expr_stmt|;
comment|// pop self from the handler stack
name|loaderContext
operator|.
name|getXmlReader
argument_list|()
operator|.
name|setContentHandler
argument_list|(
name|parentHandler
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method directly called by SAX parser, do not override it directly,      * use {@link #processElement(String, String, Attributes)} method instead to process content.      *      * @see #createChildTagHandler(String, String, String, Attributes)      */
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|ContentHandler
name|childHandler
init|=
name|createChildTagHandler
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|processElement
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|attributes
argument_list|)
condition|)
block|{
name|childHandler
operator|.
name|startElement
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
comment|// push child handler to the stack...
name|loaderContext
operator|.
name|getXmlReader
argument_list|()
operator|.
name|setContentHandler
argument_list|(
name|childHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocumentLocator
parameter_list|(
name|Locator
name|locator
parameter_list|)
block|{
name|this
operator|.
name|locator
operator|=
name|locator
expr_stmt|;
block|}
specifier|public
name|ContentHandler
name|getParentHandler
parameter_list|()
block|{
return|return
name|parentHandler
return|;
block|}
block|}
end_class

end_unit

