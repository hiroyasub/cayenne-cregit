begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|PasswordEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conn
operator|.
name|DataSourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
class|class
name|DataSourceChildrenHandler
extends|extends
name|NamespaceAwareNestedTagHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|XMLDataChannelDescriptorLoader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|DRIVER_TAG
init|=
literal|"driver"
decl_stmt|;
specifier|static
specifier|final
name|String
name|LOGIN_TAG
init|=
literal|"login"
decl_stmt|;
specifier|static
specifier|final
name|String
name|URL_TAG
init|=
literal|"url"
decl_stmt|;
specifier|static
specifier|final
name|String
name|CONNECTION_POOL_TAG
init|=
literal|"connectionPool"
decl_stmt|;
specifier|private
name|XMLDataChannelDescriptorLoader
name|xmlDataChannelDescriptorLoader
decl_stmt|;
specifier|private
name|DataSourceInfo
name|dataSourceDescriptor
decl_stmt|;
name|DataSourceChildrenHandler
parameter_list|(
name|XMLDataChannelDescriptorLoader
name|xmlDataChannelDescriptorLoader
parameter_list|,
name|DataNodeChildrenHandler
name|parentHandler
parameter_list|,
name|DataSourceInfo
name|dataSourceDescriptor
parameter_list|)
block|{
name|super
argument_list|(
name|parentHandler
argument_list|)
expr_stmt|;
name|this
operator|.
name|xmlDataChannelDescriptorLoader
operator|=
name|xmlDataChannelDescriptorLoader
expr_stmt|;
name|this
operator|.
name|dataSourceDescriptor
operator|=
name|dataSourceDescriptor
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|processElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
block|{
switch|switch
condition|(
name|localName
condition|)
block|{
case|case
name|DRIVER_TAG
case|:
name|dataSourceDescriptor
operator|.
name|setJdbcDriver
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|LOGIN_TAG
case|:
name|configureCredentials
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|URL_TAG
case|:
name|dataSourceDescriptor
operator|.
name|setDataSourceUrl
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|CONNECTION_POOL_TAG
case|:
name|configureConnectionPool
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
name|void
name|configureCredentials
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|String
name|encoderClass
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"encoderClass"
argument_list|)
decl_stmt|;
name|String
name|encoderKey
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"encoderKey"
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoderKey
operator|==
literal|null
condition|)
block|{
name|encoderKey
operator|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"encoderSalt"
argument_list|)
expr_stmt|;
block|}
name|String
name|password
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"password"
argument_list|)
decl_stmt|;
name|String
name|passwordLocation
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"passwordLocation"
argument_list|)
decl_stmt|;
name|String
name|passwordSource
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"passwordSource"
argument_list|)
decl_stmt|;
if|if
condition|(
name|passwordSource
operator|==
literal|null
condition|)
block|{
name|passwordSource
operator|=
name|DataSourceInfo
operator|.
name|PASSWORD_LOCATION_MODEL
expr_stmt|;
block|}
name|String
name|username
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"userName"
argument_list|)
decl_stmt|;
name|dataSourceDescriptor
operator|.
name|setPasswordEncoderClass
argument_list|(
name|encoderClass
argument_list|)
expr_stmt|;
name|dataSourceDescriptor
operator|.
name|setPasswordEncoderKey
argument_list|(
name|encoderKey
argument_list|)
expr_stmt|;
name|dataSourceDescriptor
operator|.
name|setPasswordLocation
argument_list|(
name|passwordLocation
argument_list|)
expr_stmt|;
name|dataSourceDescriptor
operator|.
name|setPasswordSource
argument_list|(
name|passwordSource
argument_list|)
expr_stmt|;
name|dataSourceDescriptor
operator|.
name|setUserName
argument_list|(
name|username
argument_list|)
expr_stmt|;
comment|// Replace {} in passwordSource with encoderSalt -- useful for EXECUTABLE& URL options
if|if
condition|(
name|encoderKey
operator|!=
literal|null
condition|)
block|{
name|passwordSource
operator|=
name|passwordSource
operator|.
name|replaceAll
argument_list|(
literal|"\\{}"
argument_list|,
name|encoderKey
argument_list|)
expr_stmt|;
block|}
name|String
name|encoderType
init|=
name|dataSourceDescriptor
operator|.
name|getPasswordEncoderClass
argument_list|()
decl_stmt|;
name|PasswordEncoding
name|passwordEncoder
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|encoderType
operator|!=
literal|null
condition|)
block|{
name|passwordEncoder
operator|=
name|xmlDataChannelDescriptorLoader
operator|.
name|objectFactory
operator|.
name|newInstance
argument_list|(
name|PasswordEncoding
operator|.
name|class
argument_list|,
name|encoderType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|passwordLocation
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|passwordLocation
condition|)
block|{
case|case
name|DataSourceInfo
operator|.
name|PASSWORD_LOCATION_CLASSPATH
case|:
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|classLoader
operator|.
name|getResource
argument_list|(
name|username
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|password
operator|=
name|XMLDataChannelDescriptorLoader
operator|.
name|passwordFromURL
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Could not find resource in CLASSPATH: "
operator|+
name|passwordSource
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DataSourceInfo
operator|.
name|PASSWORD_LOCATION_URL
case|:
try|try
block|{
name|password
operator|=
name|XMLDataChannelDescriptorLoader
operator|.
name|passwordFromURL
argument_list|(
operator|new
name|URL
argument_list|(
name|passwordSource
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|exception
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DataSourceInfo
operator|.
name|PASSWORD_LOCATION_EXECUTABLE
case|:
try|try
block|{
name|Process
name|process
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|passwordSource
argument_list|)
decl_stmt|;
name|password
operator|=
name|XMLDataChannelDescriptorLoader
operator|.
name|passwordFromInputStream
argument_list|(
name|process
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|process
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
name|exception
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|password
operator|!=
literal|null
operator|&&
name|passwordEncoder
operator|!=
literal|null
condition|)
block|{
name|dataSourceDescriptor
operator|.
name|setPassword
argument_list|(
name|passwordEncoder
operator|.
name|decodePassword
argument_list|(
name|password
argument_list|,
name|encoderKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|configureConnectionPool
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|String
name|min
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"min"
argument_list|)
decl_stmt|;
if|if
condition|(
name|min
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|dataSourceDescriptor
operator|.
name|setMinConnections
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|min
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfex
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Non-numeric 'min' attribute"
argument_list|,
name|nfex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Non-numeric 'min' attribute '%s'"
argument_list|,
name|nfex
argument_list|,
name|min
argument_list|)
throw|;
block|}
block|}
name|String
name|max
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"max"
argument_list|)
decl_stmt|;
if|if
condition|(
name|max
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|dataSourceDescriptor
operator|.
name|setMaxConnections
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|max
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfex
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Non-numeric 'max' attribute"
argument_list|,
name|nfex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Non-numeric 'max' attribute '%s'"
argument_list|,
name|nfex
argument_list|,
name|max
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

