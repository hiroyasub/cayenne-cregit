begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|QueryDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|QueryDescriptorLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
operator|.
name|isBlank
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|QueryDescriptorHandler
extends|extends
name|NamespaceAwareNestedTagHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|QUERY_DESCRIPTOR_TAG
init|=
literal|"query"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QUERY_SQL_TAG
init|=
literal|"sql"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QUERY_EJBQL_TAG
init|=
literal|"ejbql"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QUERY_QUALIFIER_TAG
init|=
literal|"qualifier"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QUERY_ORDERING_TAG
init|=
literal|"ordering"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QUERY_PREFETCH_TAG
init|=
literal|"prefetch"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_TAG
init|=
literal|"property"
decl_stmt|;
specifier|private
name|DataMap
name|map
decl_stmt|;
specifier|private
name|QueryDescriptorLoader
name|queryBuilder
decl_stmt|;
specifier|private
name|QueryDescriptor
name|descriptor
decl_stmt|;
specifier|private
name|boolean
name|changed
decl_stmt|;
specifier|private
name|String
name|sqlKey
decl_stmt|;
specifier|private
name|String
name|descending
decl_stmt|;
specifier|private
name|String
name|ignoreCase
decl_stmt|;
specifier|private
name|int
name|semantics
decl_stmt|;
specifier|public
name|QueryDescriptorHandler
parameter_list|(
name|NamespaceAwareNestedTagHandler
name|parentHandler
parameter_list|,
name|DataMap
name|map
parameter_list|)
block|{
name|super
argument_list|(
name|parentHandler
argument_list|)
expr_stmt|;
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|processElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
switch|switch
condition|(
name|localName
condition|)
block|{
case|case
name|QUERY_DESCRIPTOR_TAG
case|:
name|addQueryDescriptor
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|PROPERTY_TAG
case|:
name|addQueryDescriptorProperty
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QUERY_SQL_TAG
case|:
name|this
operator|.
name|sqlKey
operator|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"adapter-class"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QUERY_ORDERING_TAG
case|:
name|createQueryOrdering
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QUERY_EJBQL_TAG
case|:
case|case
name|QUERY_QUALIFIER_TAG
case|:
case|case
name|QUERY_PREFETCH_TAG
case|:
name|createPrefetchSemantics
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|processCharData
parameter_list|(
name|String
name|localName
parameter_list|,
name|String
name|data
parameter_list|)
block|{
switch|switch
condition|(
name|localName
condition|)
block|{
case|case
name|QUERY_SQL_TAG
case|:
name|queryBuilder
operator|.
name|addSql
argument_list|(
name|data
argument_list|,
name|sqlKey
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUERY_EJBQL_TAG
case|:
name|queryBuilder
operator|.
name|setEjbql
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUERY_QUALIFIER_TAG
case|:
name|createQualifier
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUERY_ORDERING_TAG
case|:
name|addQueryOrdering
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUERY_PREFETCH_TAG
case|:
name|addPrefetchWithSemantics
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|beforeScopeEnd
parameter_list|()
block|{
name|map
operator|.
name|addQueryDescriptor
argument_list|(
name|getQueryDescriptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addQueryDescriptor
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|name
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|name
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"QueryDescriptorHandler::addQueryDescriptor() - no query name."
argument_list|)
throw|;
block|}
name|queryBuilder
operator|=
operator|new
name|QueryDescriptorLoader
argument_list|()
expr_stmt|;
name|queryBuilder
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|String
name|type
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
comment|// Legacy format support (v7 and older)
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|queryBuilder
operator|.
name|setLegacyFactory
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"factory"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queryBuilder
operator|.
name|setQueryType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|String
name|rootName
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"root-name"
argument_list|)
decl_stmt|;
name|queryBuilder
operator|.
name|setRoot
argument_list|(
name|map
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"root"
argument_list|)
argument_list|,
name|rootName
argument_list|)
expr_stmt|;
comment|// TODO: Andrus, 2/13/2006 'result-type' is only used in ProcedureQuery
comment|// and is deprecated in 1.2
name|String
name|resultEntity
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"result-entity"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|isEmptyString
argument_list|(
name|resultEntity
argument_list|)
condition|)
block|{
name|queryBuilder
operator|.
name|setResultEntity
argument_list|(
name|resultEntity
argument_list|)
expr_stmt|;
block|}
name|changed
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|addQueryDescriptorProperty
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|name
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|name
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"QueryDescriptorHandler::addQueryDescriptorProperty() - no property name."
argument_list|)
throw|;
block|}
name|String
name|value
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|value
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"QueryDescriptorHandler::addQueryDescriptorProperty() - no property value."
argument_list|)
throw|;
block|}
name|queryBuilder
operator|.
name|addProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|createQualifier
parameter_list|(
name|String
name|qualifier
parameter_list|)
block|{
if|if
condition|(
name|isBlank
argument_list|(
name|qualifier
argument_list|)
condition|)
block|{
return|return;
block|}
name|queryBuilder
operator|.
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|createQueryOrdering
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|descending
operator|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"descending"
argument_list|)
expr_stmt|;
name|ignoreCase
operator|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"ignore-case"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addQueryOrdering
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|queryBuilder
operator|.
name|addOrdering
argument_list|(
name|path
argument_list|,
name|descending
argument_list|,
name|ignoreCase
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|createPrefetchSemantics
parameter_list|(
name|Attributes
name|attributes
parameter_list|)
block|{
name|semantics
operator|=
name|convertPrefetchType
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addPrefetchWithSemantics
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|queryBuilder
operator|.
name|addPrefetch
argument_list|(
name|path
argument_list|,
name|semantics
argument_list|)
expr_stmt|;
block|}
specifier|public
name|QueryDescriptor
name|getQueryDescriptor
parameter_list|()
block|{
if|if
condition|(
name|queryBuilder
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|descriptor
operator|==
literal|null
operator|||
name|changed
condition|)
block|{
name|descriptor
operator|=
name|queryBuilder
operator|.
name|buildQueryDescriptor
argument_list|()
expr_stmt|;
name|changed
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|descriptor
return|;
block|}
specifier|private
name|int
name|convertPrefetchType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
literal|"joint"
case|:
return|return
literal|1
return|;
case|case
literal|"disjoint"
case|:
return|return
literal|2
return|;
case|case
literal|"disjointById"
case|:
return|return
literal|3
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

