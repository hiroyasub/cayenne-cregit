begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|value
operator|.
name|json
package|;
end_package

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|final
class|class
name|JsonTokenizer
block|{
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|NULL_LOWER
init|=
block|{
literal|'n'
block|,
literal|'u'
block|,
literal|'l'
block|,
literal|'l'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|NULL_UPPER
init|=
block|{
literal|'N'
block|,
literal|'U'
block|,
literal|'L'
block|,
literal|'L'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|TRUE_LOWER
init|=
block|{
literal|'t'
block|,
literal|'r'
block|,
literal|'u'
block|,
literal|'e'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|TRUE_UPPER
init|=
block|{
literal|'T'
block|,
literal|'R'
block|,
literal|'U'
block|,
literal|'E'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|FALSE_LOWER
init|=
block|{
literal|'f'
block|,
literal|'a'
block|,
literal|'l'
block|,
literal|'s'
block|,
literal|'e'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|FALSE_UPPER
init|=
block|{
literal|'F'
block|,
literal|'A'
block|,
literal|'L'
block|,
literal|'S'
block|,
literal|'E'
block|}
decl_stmt|;
specifier|private
specifier|final
name|char
index|[]
name|data
decl_stmt|;
specifier|private
name|int
name|position
decl_stmt|;
specifier|private
name|State
index|[]
name|states
init|=
operator|new
name|State
index|[
literal|32
index|]
decl_stmt|;
specifier|private
name|int
name|currentState
decl_stmt|;
name|JsonTokenizer
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|data
operator|=
name|json
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
name|currentState
operator|=
literal|0
expr_stmt|;
name|states
index|[
name|currentState
index|]
operator|=
name|State
operator|.
name|NONE
expr_stmt|;
block|}
comment|/**      * read next value from the stream      * @return next Token for the value      */
name|JsonToken
name|nextToken
parameter_list|()
block|{
while|while
condition|(
name|position
operator|<
name|data
operator|.
name|length
condition|)
block|{
comment|// skip whitespace
name|skipWhitespace
argument_list|()
expr_stmt|;
name|JsonToken
name|token
init|=
name|nextValue
argument_list|()
decl_stmt|;
comment|// only string could be used as an object member name
if|if
condition|(
name|states
index|[
name|currentState
index|]
operator|==
name|State
operator|.
name|OBJECT_MEMBER_NAME
condition|)
block|{
if|if
condition|(
name|token
operator|.
name|type
operator|!=
name|TokenType
operator|.
name|OBJECT_END
operator|&&
name|token
operator|.
name|type
operator|!=
name|TokenType
operator|.
name|OBJECT_START
operator|&&
name|token
operator|.
name|type
operator|!=
name|TokenType
operator|.
name|STRING
condition|)
block|{
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Unexpected '"
operator|+
name|token
operator|.
name|toString
argument_list|()
operator|+
literal|"' at "
operator|+
name|position
argument_list|)
throw|;
block|}
if|else if
condition|(
name|states
index|[
name|currentState
index|]
operator|==
name|State
operator|.
name|OBJECT_MEMBER_NAME
operator|&&
name|token
operator|.
name|type
operator|==
name|TokenType
operator|.
name|STRING
condition|)
block|{
name|states
index|[
name|currentState
index|]
operator|=
name|State
operator|.
name|OBJECT_MEMBER_DELIMITER
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|token
operator|.
name|type
operator|!=
name|TokenType
operator|.
name|ARRAY_START
operator|&&
name|states
index|[
name|currentState
index|]
operator|==
name|State
operator|.
name|ARRAY_VALUE
condition|)
block|{
name|states
index|[
name|currentState
index|]
operator|=
name|State
operator|.
name|ARRAY_DELIMITER
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
if|if
condition|(
name|states
index|[
name|currentState
index|]
operator|!=
name|State
operator|.
name|NONE
condition|)
block|{
switch|switch
condition|(
name|states
index|[
name|currentState
index|]
condition|)
block|{
case|case
name|ARRAY_VALUE
case|:
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"']' expected"
argument_list|)
throw|;
case|case
name|ARRAY_DELIMITER
case|:
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Next array value expected, ',' found"
argument_list|)
throw|;
case|case
name|OBJECT_MEMBER_DELIMITER
case|:
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Next object member value expected, ',' found"
argument_list|)
throw|;
case|case
name|OBJECT_MEMBER_NAME
case|:
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Next object member name expected, ',' found"
argument_list|)
throw|;
case|case
name|OBJECT_MEMBER_VALUE
case|:
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"'}' expected"
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|JsonToken
argument_list|(
name|TokenType
operator|.
name|NONE
argument_list|,
name|position
argument_list|,
name|position
argument_list|)
return|;
block|}
specifier|private
name|void
name|pushState
parameter_list|(
name|State
name|state
parameter_list|)
block|{
comment|// grow states array if needed, don't use array list purely for the performance
name|currentState
operator|++
expr_stmt|;
if|if
condition|(
name|currentState
operator|>=
name|states
operator|.
name|length
condition|)
block|{
name|State
index|[]
name|newStates
init|=
operator|new
name|State
index|[
name|states
operator|.
name|length
operator|<<
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|states
argument_list|,
literal|0
argument_list|,
name|newStates
argument_list|,
literal|0
argument_list|,
name|states
operator|.
name|length
argument_list|)
expr_stmt|;
name|states
operator|=
name|newStates
expr_stmt|;
block|}
name|states
index|[
name|currentState
index|]
operator|=
name|state
expr_stmt|;
block|}
specifier|private
name|void
name|popState
parameter_list|()
block|{
name|currentState
operator|--
expr_stmt|;
block|}
specifier|private
name|void
name|skipWhitespace
parameter_list|()
block|{
name|int
name|length
init|=
name|data
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|position
operator|<
name|length
operator|&&
operator|(
name|data
index|[
name|position
index|]
operator|==
literal|' '
operator|||
name|data
index|[
name|position
index|]
operator|==
literal|'\t'
operator|||
name|data
index|[
name|position
index|]
operator|==
literal|'\r'
operator|||
name|data
index|[
name|position
index|]
operator|==
literal|'\n'
operator|||
name|data
index|[
name|position
index|]
operator|==
literal|'\f'
operator|)
condition|)
block|{
name|position
operator|++
expr_stmt|;
block|}
block|}
specifier|private
name|JsonToken
name|nextValue
parameter_list|()
block|{
if|if
condition|(
name|position
operator|>=
name|data
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Unexpected end of document"
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|data
index|[
name|position
index|]
condition|)
block|{
case|case
literal|'{'
case|:
return|return
name|startObject
argument_list|()
return|;
case|case
literal|'['
case|:
return|return
name|startArray
argument_list|()
return|;
case|case
literal|']'
case|:
return|return
name|arrayEnd
argument_list|()
return|;
case|case
literal|'}'
case|:
return|return
name|objectEnd
argument_list|()
return|;
case|case
literal|':'
case|:
if|if
condition|(
name|states
index|[
name|currentState
index|]
operator|!=
name|State
operator|.
name|OBJECT_MEMBER_DELIMITER
condition|)
block|{
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Unexpected ':' at "
operator|+
name|position
argument_list|)
throw|;
block|}
name|states
index|[
name|currentState
index|]
operator|=
name|State
operator|.
name|OBJECT_MEMBER_VALUE
expr_stmt|;
name|position
operator|++
expr_stmt|;
name|skipWhitespace
argument_list|()
expr_stmt|;
return|return
name|nextValue
argument_list|()
return|;
case|case
literal|','
case|:
if|if
condition|(
name|states
index|[
name|currentState
index|]
operator|==
name|State
operator|.
name|OBJECT_MEMBER_VALUE
condition|)
block|{
name|states
index|[
name|currentState
index|]
operator|=
name|State
operator|.
name|OBJECT_MEMBER_NAME
expr_stmt|;
block|}
if|else if
condition|(
name|states
index|[
name|currentState
index|]
operator|==
name|State
operator|.
name|ARRAY_DELIMITER
condition|)
block|{
name|states
index|[
name|currentState
index|]
operator|=
name|State
operator|.
name|ARRAY_VALUE
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Unexpected ',' at "
operator|+
name|position
argument_list|)
throw|;
block|}
name|position
operator|++
expr_stmt|;
name|skipWhitespace
argument_list|()
expr_stmt|;
return|return
name|nextValue
argument_list|()
return|;
case|case
literal|'\"'
case|:
return|return
name|stringValue
argument_list|()
return|;
case|case
literal|'n'
case|:
case|case
literal|'N'
case|:
return|return
name|nullValue
argument_list|()
return|;
case|case
literal|'t'
case|:
case|case
literal|'T'
case|:
return|return
name|trueValue
argument_list|()
return|;
case|case
literal|'f'
case|:
case|case
literal|'F'
case|:
return|return
name|falseValue
argument_list|()
return|;
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
case|case
literal|'-'
case|:
return|return
name|numericValue
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Unexpected symbol '"
operator|+
name|data
index|[
name|position
index|]
operator|+
literal|"' at "
operator|+
name|position
argument_list|)
throw|;
block|}
block|}
specifier|private
name|JsonToken
name|objectEnd
parameter_list|()
block|{
if|if
condition|(
name|states
index|[
name|currentState
index|]
operator|==
name|State
operator|.
name|OBJECT_MEMBER_VALUE
operator|||
name|states
index|[
name|currentState
index|]
operator|==
name|State
operator|.
name|OBJECT_MEMBER_NAME
condition|)
block|{
name|popState
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Unexpected '}' at "
operator|+
name|position
argument_list|)
throw|;
block|}
return|return
operator|new
name|JsonToken
argument_list|(
name|TokenType
operator|.
name|OBJECT_END
argument_list|,
name|position
argument_list|,
name|position
operator|++
argument_list|)
return|;
block|}
specifier|private
name|JsonToken
name|arrayEnd
parameter_list|()
block|{
if|if
condition|(
name|states
index|[
name|currentState
index|]
operator|==
name|State
operator|.
name|ARRAY_DELIMITER
operator|||
name|states
index|[
name|currentState
index|]
operator|==
name|State
operator|.
name|ARRAY_VALUE
condition|)
block|{
name|popState
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Unexpected ']' at "
operator|+
name|position
argument_list|)
throw|;
block|}
return|return
operator|new
name|JsonToken
argument_list|(
name|TokenType
operator|.
name|ARRAY_END
argument_list|,
name|position
argument_list|,
name|position
operator|++
argument_list|)
return|;
block|}
specifier|private
name|JsonToken
name|startObject
parameter_list|()
block|{
name|checkValueState
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|pushState
argument_list|(
name|State
operator|.
name|OBJECT_MEMBER_NAME
argument_list|)
expr_stmt|;
return|return
operator|new
name|JsonToken
argument_list|(
name|TokenType
operator|.
name|OBJECT_START
argument_list|,
name|position
argument_list|,
name|position
operator|++
argument_list|)
return|;
block|}
specifier|private
name|JsonToken
name|startArray
parameter_list|()
block|{
name|checkValueState
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|pushState
argument_list|(
name|State
operator|.
name|ARRAY_VALUE
argument_list|)
expr_stmt|;
return|return
operator|new
name|JsonToken
argument_list|(
name|TokenType
operator|.
name|ARRAY_START
argument_list|,
name|position
argument_list|,
name|position
operator|++
argument_list|)
return|;
block|}
specifier|private
name|JsonToken
name|numericValue
parameter_list|()
block|{
name|checkValueState
argument_list|(
name|data
index|[
name|position
index|]
argument_list|)
expr_stmt|;
comment|/*          * number          *     integer fraction exponent          *          * integer          *     digit          *     onenine digits          *     '-' digit          *     '-' onenine digits          *          * digits          *     digit          *     digit digits          *          * digit          *     '0'          *     onenine          *          * onenine          *          *          * fraction          *     ""          *     '.' digits          *          * exponent          *     ""          *     'E' sign digits          *     'e' sign digits          *          * sign          *     ""          *     '+'          *     '-'          */
name|int
name|startPosition
init|=
name|position
decl_stmt|;
name|NumberState
name|state
init|=
name|NumberState
operator|.
name|NONE
decl_stmt|;
while|while
condition|(
name|state
operator|!=
name|NumberState
operator|.
name|DONE
condition|)
block|{
switch|switch
condition|(
name|data
index|[
name|position
index|]
condition|)
block|{
case|case
literal|'0'
case|:
if|if
condition|(
name|state
operator|==
name|NumberState
operator|.
name|NONE
operator|||
name|state
operator|==
name|NumberState
operator|.
name|MINUS
condition|)
block|{
name|state
operator|=
name|NumberState
operator|.
name|ZERO
expr_stmt|;
block|}
if|else if
condition|(
name|state
operator|==
name|NumberState
operator|.
name|EXPONENT
condition|)
block|{
name|state
operator|=
name|NumberState
operator|.
name|EXP_SIGN
expr_stmt|;
block|}
if|else if
condition|(
name|state
operator|!=
name|NumberState
operator|.
name|DIGITS
operator|&&
name|state
operator|!=
name|NumberState
operator|.
name|FRACTION
operator|&&
name|state
operator|!=
name|NumberState
operator|.
name|EXP_SIGN
condition|)
block|{
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Wrong number format at position "
operator|+
name|position
argument_list|)
throw|;
block|}
break|break;
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
if|if
condition|(
name|state
operator|==
name|NumberState
operator|.
name|NONE
operator|||
name|state
operator|==
name|NumberState
operator|.
name|MINUS
condition|)
block|{
name|state
operator|=
name|NumberState
operator|.
name|DIGITS
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|==
name|NumberState
operator|.
name|EXPONENT
condition|)
block|{
name|state
operator|=
name|NumberState
operator|.
name|EXP_SIGN
expr_stmt|;
block|}
break|break;
case|case
literal|'-'
case|:
if|if
condition|(
name|state
operator|==
name|NumberState
operator|.
name|NONE
condition|)
block|{
name|state
operator|=
name|NumberState
operator|.
name|MINUS
expr_stmt|;
block|}
if|else if
condition|(
name|state
operator|==
name|NumberState
operator|.
name|EXPONENT
condition|)
block|{
name|state
operator|=
name|NumberState
operator|.
name|EXP_SIGN
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Wrong number format at position "
operator|+
name|position
argument_list|)
throw|;
block|}
break|break;
case|case
literal|'+'
case|:
if|if
condition|(
name|state
operator|!=
name|NumberState
operator|.
name|EXPONENT
condition|)
block|{
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Wrong number format at position "
operator|+
name|position
argument_list|)
throw|;
block|}
name|state
operator|=
name|NumberState
operator|.
name|EXP_SIGN
expr_stmt|;
break|break;
case|case
literal|'.'
case|:
if|if
condition|(
name|state
operator|!=
name|NumberState
operator|.
name|ZERO
operator|&&
name|state
operator|!=
name|NumberState
operator|.
name|DIGITS
condition|)
block|{
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Wrong number format at position "
operator|+
name|position
argument_list|)
throw|;
block|}
name|state
operator|=
name|NumberState
operator|.
name|FRACTION
expr_stmt|;
break|break;
case|case
literal|'e'
case|:
case|case
literal|'E'
case|:
if|if
condition|(
name|state
operator|!=
name|NumberState
operator|.
name|NONE
operator|&&
name|state
operator|!=
name|NumberState
operator|.
name|ZERO
operator|&&
name|state
operator|!=
name|NumberState
operator|.
name|DIGITS
operator|&&
name|state
operator|!=
name|NumberState
operator|.
name|FRACTION
condition|)
block|{
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Wrong number format at position "
operator|+
name|position
argument_list|)
throw|;
block|}
name|state
operator|=
name|NumberState
operator|.
name|EXPONENT
expr_stmt|;
break|break;
case|case
literal|'}'
case|:
case|case
literal|']'
case|:
case|case
literal|':'
case|:
case|case
literal|','
case|:
case|case
literal|' '
case|:
case|case
literal|'\t'
case|:
case|case
literal|'\f'
case|:
case|case
literal|'\r'
case|:
case|case
literal|'\n'
case|:
name|state
operator|=
name|NumberState
operator|.
name|DONE
expr_stmt|;
name|position
operator|--
expr_stmt|;
comment|// this char should be consumed by outer call
break|break;
default|default:
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Wrong number format at position "
operator|+
name|position
argument_list|)
throw|;
block|}
if|if
condition|(
name|position
operator|>=
name|data
operator|.
name|length
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|state
operator|==
name|NumberState
operator|.
name|DIGITS
operator|||
name|state
operator|==
name|NumberState
operator|.
name|ZERO
operator|||
name|state
operator|==
name|NumberState
operator|.
name|FRACTION
operator|||
name|state
operator|==
name|NumberState
operator|.
name|EXP_SIGN
condition|)
block|{
name|state
operator|=
name|NumberState
operator|.
name|DONE
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|!=
name|NumberState
operator|.
name|DONE
condition|)
block|{
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Wrong number format at position "
operator|+
name|position
argument_list|)
throw|;
block|}
block|}
name|position
operator|++
expr_stmt|;
block|}
return|return
operator|new
name|JsonToken
argument_list|(
name|TokenType
operator|.
name|NUMBER
argument_list|,
name|startPosition
argument_list|,
name|position
argument_list|)
return|;
block|}
specifier|private
name|JsonToken
name|nullValue
parameter_list|()
block|{
name|checkValueState
argument_list|(
literal|'n'
argument_list|)
expr_stmt|;
return|return
name|keyword
argument_list|(
name|TokenType
operator|.
name|NULL
argument_list|,
name|NULL_LOWER
argument_list|,
name|NULL_UPPER
argument_list|)
return|;
block|}
specifier|private
name|JsonToken
name|trueValue
parameter_list|()
block|{
name|checkValueState
argument_list|(
literal|'t'
argument_list|)
expr_stmt|;
return|return
name|keyword
argument_list|(
name|TokenType
operator|.
name|TRUE
argument_list|,
name|TRUE_LOWER
argument_list|,
name|TRUE_UPPER
argument_list|)
return|;
block|}
specifier|private
name|JsonToken
name|falseValue
parameter_list|()
block|{
name|checkValueState
argument_list|(
literal|'f'
argument_list|)
expr_stmt|;
return|return
name|keyword
argument_list|(
name|TokenType
operator|.
name|FALSE
argument_list|,
name|FALSE_LOWER
argument_list|,
name|FALSE_UPPER
argument_list|)
return|;
block|}
specifier|private
name|JsonToken
name|keyword
parameter_list|(
name|TokenType
name|type
parameter_list|,
name|char
index|[]
name|keywordLower
parameter_list|,
name|char
index|[]
name|keywordUpper
parameter_list|)
block|{
name|int
name|length
init|=
name|keywordLower
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|<
name|position
operator|+
name|length
condition|)
block|{
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"unknown value at position "
operator|+
name|position
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|data
index|[
name|position
operator|+
name|i
index|]
operator|!=
name|keywordLower
index|[
name|i
index|]
operator|&&
name|data
index|[
name|position
operator|+
name|i
index|]
operator|!=
name|keywordUpper
index|[
name|i
index|]
condition|)
block|{
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"unknown value at position "
operator|+
name|position
operator|+
literal|"("
operator|+
operator|new
name|String
argument_list|(
name|keywordLower
argument_list|)
operator|+
literal|" expected)"
argument_list|)
throw|;
block|}
block|}
name|position
operator|+=
name|length
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|>
name|position
operator|&&
name|isLiteral
argument_list|(
name|data
index|[
name|position
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"unknown value at position "
operator|+
name|position
argument_list|)
throw|;
block|}
return|return
operator|new
name|JsonToken
argument_list|(
name|type
argument_list|,
name|position
operator|-
name|length
argument_list|,
name|position
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkValueState
parameter_list|(
name|char
name|unexpected
parameter_list|)
block|{
name|State
name|state
init|=
name|states
index|[
name|currentState
index|]
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|ARRAY_DELIMITER
operator|||
name|state
operator|==
name|State
operator|.
name|OBJECT_MEMBER_NAME
operator|||
name|state
operator|==
name|State
operator|.
name|OBJECT_MEMBER_DELIMITER
condition|)
block|{
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Unexpected '"
operator|+
name|unexpected
operator|+
literal|"' at "
operator|+
name|position
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|isLiteral
parameter_list|(
name|char
name|c
parameter_list|)
block|{
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'}'
case|:
case|case
literal|']'
case|:
case|case
literal|','
case|:
case|case
literal|' '
case|:
case|case
literal|'\t'
case|:
case|case
literal|'\f'
case|:
case|case
literal|'\r'
case|:
case|case
literal|'\n'
case|:
return|return
literal|false
return|;
default|default:
return|return
literal|true
return|;
block|}
block|}
specifier|private
name|JsonToken
name|stringValue
parameter_list|()
block|{
name|int
name|startPosition
init|=
operator|++
name|position
decl_stmt|;
comment|// skip open quote
while|while
condition|(
name|position
operator|<
name|data
operator|.
name|length
condition|)
block|{
switch|switch
condition|(
name|data
index|[
name|position
index|]
condition|)
block|{
comment|// escape
case|case
literal|'\\'
case|:
comment|/*                      * escape                      *     '"'                      *     '\'                      *     '/'                      *     'b'                      *     'f'                      *     'n'                      *     'r'                      *     't'                      *     'u' hex hex hex hex                      */
switch|switch
condition|(
name|data
index|[
operator|++
name|position
index|]
condition|)
block|{
case|case
literal|'"'
case|:
case|case
literal|'\\'
case|:
case|case
literal|'/'
case|:
case|case
literal|'b'
case|:
case|case
literal|'f'
case|:
case|case
literal|'n'
case|:
case|case
literal|'r'
case|:
case|case
literal|'t'
case|:
name|position
operator|++
expr_stmt|;
continue|continue;
case|case
literal|'u'
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|char
name|next
init|=
name|data
index|[
name|position
operator|+
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|next
operator|<
literal|'0'
operator|||
name|next
operator|>
literal|'9'
operator|)
operator|&&
operator|(
name|next
operator|<
literal|'a'
operator|||
name|next
operator|>
literal|'f'
operator|)
operator|&&
operator|(
name|next
operator|<
literal|'A'
operator|||
name|next
operator|>
literal|'F'
operator|)
condition|)
block|{
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Unknown escape sequence "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|data
argument_list|,
name|position
operator|-
literal|1
argument_list|,
name|position
operator|+
literal|4
argument_list|)
operator|+
literal|" at position "
operator|+
name|position
argument_list|)
throw|;
block|}
block|}
name|position
operator|+=
literal|4
expr_stmt|;
continue|continue;
default|default:
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Unknown escape sequence "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|data
argument_list|,
name|position
operator|-
literal|1
argument_list|,
name|position
argument_list|)
operator|+
literal|" at position "
operator|+
name|position
argument_list|)
throw|;
block|}
case|case
literal|'"'
case|:
return|return
operator|new
name|JsonToken
argument_list|(
name|TokenType
operator|.
name|STRING
argument_list|,
name|startPosition
argument_list|,
name|position
operator|++
argument_list|)
return|;
block|}
name|position
operator|++
expr_stmt|;
block|}
throw|throw
operator|new
name|MalformedJsonException
argument_list|(
literal|"Unexpected end of string literal"
argument_list|)
throw|;
block|}
enum|enum
name|State
block|{
name|NONE
block|,
name|OBJECT_MEMBER_NAME
block|,
name|OBJECT_MEMBER_DELIMITER
block|,
name|OBJECT_MEMBER_VALUE
block|,
name|ARRAY_VALUE
block|,
name|ARRAY_DELIMITER
block|}
specifier|public
enum|enum
name|TokenType
block|{
name|NONE
block|,
name|ARRAY_START
block|,
name|ARRAY_END
block|,
name|OBJECT_START
block|,
name|OBJECT_END
block|,
name|STRING
block|,
name|NUMBER
block|,
name|TRUE
block|,
name|FALSE
block|,
name|NULL
block|}
enum|enum
name|NumberState
block|{
name|NONE
block|,
name|ZERO
block|,
name|DIGITS
block|,
name|MINUS
block|,
name|FRACTION
block|,
name|EXPONENT
block|,
name|EXP_SIGN
block|,
name|DONE
block|}
class|class
name|JsonToken
implements|implements
name|Comparable
argument_list|<
name|JsonToken
argument_list|>
block|{
specifier|final
name|TokenType
name|type
decl_stmt|;
specifier|final
name|int
name|from
decl_stmt|;
specifier|final
name|int
name|to
decl_stmt|;
name|JsonToken
parameter_list|(
name|TokenType
name|type
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
name|this
operator|.
name|to
operator|=
name|to
expr_stmt|;
block|}
specifier|public
name|TokenType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
name|char
index|[]
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
name|int
name|length
parameter_list|()
block|{
return|return
name|to
operator|-
name|from
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|JsonToken
name|token
init|=
operator|(
name|JsonToken
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|token
operator|.
name|type
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|length
argument_list|()
operator|!=
name|token
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
name|from
init|,
name|j
init|=
name|token
operator|.
name|from
init|;
name|i
operator|<
name|to
operator|&&
name|j
operator|<
name|token
operator|.
name|to
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
if|if
condition|(
name|data
index|[
name|i
index|]
operator|!=
name|token
operator|.
name|getData
argument_list|()
index|[
name|j
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|type
operator|.
name|hashCode
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|from
init|;
name|i
operator|<
name|to
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|data
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|JsonToken
name|o
parameter_list|)
block|{
if|if
condition|(
name|type
operator|!=
name|o
operator|.
name|type
condition|)
block|{
return|return
name|type
operator|.
name|ordinal
argument_list|()
operator|-
name|o
operator|.
name|type
operator|.
name|ordinal
argument_list|()
return|;
block|}
name|int
name|diff
init|=
name|length
argument_list|()
operator|-
name|o
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|0
condition|)
block|{
return|return
name|diff
return|;
block|}
for|for
control|(
name|int
name|i
init|=
name|from
init|,
name|j
init|=
name|o
operator|.
name|from
init|;
name|i
operator|<
name|to
operator|&&
name|j
operator|<
name|o
operator|.
name|to
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
name|diff
operator|=
name|data
index|[
name|i
index|]
operator|-
name|o
operator|.
name|getData
argument_list|()
index|[
name|j
index|]
expr_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|0
condition|)
block|{
return|return
name|diff
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|from
argument_list|,
name|length
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

