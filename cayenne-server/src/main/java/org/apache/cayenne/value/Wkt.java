begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|value
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A Cayenne-supported value object holding a WKT geometry String. By itself it does not provide a WKT parser or  * geometry functions. Its goal is to instruct Cayenne to read and write geometries as WKT Strings.  *  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|Wkt
block|{
specifier|private
specifier|final
name|String
name|wkt
decl_stmt|;
specifier|public
name|Wkt
parameter_list|(
name|String
name|wkt
parameter_list|)
block|{
name|this
operator|.
name|wkt
operator|=
name|wkt
expr_stmt|;
block|}
specifier|public
name|String
name|getWkt
parameter_list|()
block|{
return|return
name|wkt
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Wkt
name|wkt1
init|=
operator|(
name|Wkt
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|wkt
argument_list|,
name|wkt1
operator|.
name|wkt
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|wkt
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"WKT value: "
operator|+
name|wkt
return|;
block|}
block|}
end_class

end_unit

