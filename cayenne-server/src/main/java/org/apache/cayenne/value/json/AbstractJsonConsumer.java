begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|value
operator|.
name|json
package|;
end_package

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|abstract
class|class
name|AbstractJsonConsumer
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
specifier|final
name|JsonTokenizer
name|tokenizer
decl_stmt|;
specifier|private
name|State
index|[]
name|states
init|=
operator|new
name|State
index|[
literal|4
index|]
decl_stmt|;
specifier|private
name|int
name|currentState
init|=
literal|0
decl_stmt|;
name|AbstractJsonConsumer
parameter_list|(
name|String
name|json
parameter_list|)
block|{
name|states
index|[
name|currentState
index|]
operator|=
name|State
operator|.
name|NONE
expr_stmt|;
name|tokenizer
operator|=
operator|new
name|JsonTokenizer
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|onArrayStart
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|void
name|onArrayEnd
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|void
name|onObjectStart
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|void
name|onObjectEnd
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|void
name|onArrayValue
parameter_list|(
name|JsonTokenizer
operator|.
name|JsonToken
name|token
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|void
name|onObjectKey
parameter_list|(
name|JsonTokenizer
operator|.
name|JsonToken
name|token
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|void
name|onObjectValue
parameter_list|(
name|JsonTokenizer
operator|.
name|JsonToken
name|token
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|void
name|onValue
parameter_list|(
name|JsonTokenizer
operator|.
name|JsonToken
name|token
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|T
name|output
parameter_list|()
function_decl|;
name|T
name|process
parameter_list|()
block|{
name|JsonTokenizer
operator|.
name|JsonToken
name|token
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
operator|)
operator|.
name|getType
argument_list|()
operator|!=
name|JsonTokenizer
operator|.
name|TokenType
operator|.
name|NONE
condition|)
block|{
switch|switch
condition|(
name|token
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|ARRAY_START
case|:
name|onArrayStart
argument_list|()
expr_stmt|;
name|pushState
argument_list|(
name|State
operator|.
name|ARRAY
argument_list|)
expr_stmt|;
break|break;
case|case
name|OBJECT_START
case|:
name|onObjectStart
argument_list|()
expr_stmt|;
name|pushState
argument_list|(
name|State
operator|.
name|OBJECT_KEY
argument_list|)
expr_stmt|;
break|break;
case|case
name|ARRAY_END
case|:
name|popState
argument_list|()
expr_stmt|;
name|onArrayEnd
argument_list|()
expr_stmt|;
break|break;
case|case
name|OBJECT_END
case|:
name|popState
argument_list|()
expr_stmt|;
name|onObjectEnd
argument_list|()
expr_stmt|;
break|break;
default|default:
name|processValue
argument_list|(
name|token
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|output
argument_list|()
return|;
block|}
specifier|private
name|void
name|processValue
parameter_list|(
name|JsonTokenizer
operator|.
name|JsonToken
name|token
parameter_list|)
block|{
switch|switch
condition|(
name|states
index|[
name|currentState
index|]
condition|)
block|{
case|case
name|OBJECT_KEY
case|:
name|setState
argument_list|(
name|State
operator|.
name|OBJECT_VALUE
argument_list|)
expr_stmt|;
name|onObjectKey
argument_list|(
name|token
argument_list|)
expr_stmt|;
break|break;
case|case
name|OBJECT_VALUE
case|:
name|setState
argument_list|(
name|State
operator|.
name|OBJECT_KEY
argument_list|)
expr_stmt|;
name|onObjectValue
argument_list|(
name|token
argument_list|)
expr_stmt|;
break|break;
case|case
name|ARRAY
case|:
name|onArrayValue
argument_list|(
name|token
argument_list|)
expr_stmt|;
break|break;
default|default:
name|onValue
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|pushState
parameter_list|(
name|State
name|state
parameter_list|)
block|{
name|currentState
operator|++
expr_stmt|;
if|if
condition|(
name|currentState
operator|>=
name|states
operator|.
name|length
condition|)
block|{
name|State
index|[]
name|newStates
init|=
operator|new
name|State
index|[
name|states
operator|.
name|length
operator|<<
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|states
argument_list|,
literal|0
argument_list|,
name|newStates
argument_list|,
literal|0
argument_list|,
name|states
operator|.
name|length
argument_list|)
expr_stmt|;
name|states
operator|=
name|newStates
expr_stmt|;
block|}
name|states
index|[
name|currentState
index|]
operator|=
name|state
expr_stmt|;
block|}
specifier|protected
name|void
name|setState
parameter_list|(
name|State
name|state
parameter_list|)
block|{
name|states
index|[
name|currentState
index|]
operator|=
name|state
expr_stmt|;
block|}
specifier|protected
name|void
name|popState
parameter_list|()
block|{
name|states
index|[
name|currentState
operator|--
index|]
operator|=
literal|null
expr_stmt|;
block|}
specifier|protected
name|State
name|currentState
parameter_list|()
block|{
return|return
name|states
index|[
name|currentState
index|]
return|;
block|}
specifier|protected
enum|enum
name|State
block|{
name|NONE
block|,
name|ARRAY
block|,
name|OBJECT_KEY
block|,
name|OBJECT_VALUE
block|}
block|}
end_class

end_unit

