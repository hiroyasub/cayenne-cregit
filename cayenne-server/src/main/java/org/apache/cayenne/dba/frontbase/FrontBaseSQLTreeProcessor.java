begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|frontbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|QuotingAppendable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|FunctionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|OpExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|TextNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
operator|.
name|BaseSQLTreeProcessor
import|;
end_import

begin_comment
comment|/**  * @since 4.2  * @deprecated since 4.2  */
end_comment

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|FrontBaseSQLTreeProcessor
extends|extends
name|BaseSQLTreeProcessor
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onFunctionNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|FunctionNode
name|child
parameter_list|,
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|child
operator|.
name|getFunctionName
argument_list|()
condition|)
block|{
case|case
literal|"CONCAT"
case|:
name|replaceChild
argument_list|(
name|parent
argument_list|,
name|index
argument_list|,
operator|new
name|OpExpressionNode
argument_list|(
literal|"||"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"LOCATE"
case|:
comment|// POSITION (substr IN str)
name|replaceChild
argument_list|(
name|parent
argument_list|,
name|index
argument_list|,
operator|new
name|FunctionNode
argument_list|(
literal|"POSITION"
argument_list|,
name|child
operator|.
name|getAlias
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|appendChildrenSeparator
parameter_list|(
name|QuotingAppendable
name|buffer
parameter_list|,
name|int
name|childIdx
parameter_list|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" IN "
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"LENGTH"
case|:
name|replaceChild
argument_list|(
name|parent
argument_list|,
name|index
argument_list|,
operator|new
name|FunctionNode
argument_list|(
literal|"CHAR_LENGTH"
argument_list|,
name|child
operator|.
name|getAlias
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"SUBSTRING"
case|:
comment|// SUBSTRING (str FROM offset FOR length)
name|replaceChild
argument_list|(
name|parent
argument_list|,
name|index
argument_list|,
operator|new
name|FunctionNode
argument_list|(
literal|"SUBSTRING"
argument_list|,
name|child
operator|.
name|getAlias
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|appendChildrenSeparator
parameter_list|(
name|QuotingAppendable
name|buffer
parameter_list|,
name|int
name|childIdx
parameter_list|)
block|{
if|if
condition|(
name|childIdx
operator|==
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" FROM "
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|childIdx
operator|==
literal|1
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" FOR "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"YEAR"
case|:
case|case
literal|"MONTH"
case|:
case|case
literal|"DAY"
case|:
case|case
literal|"DAY_OF_MONTH"
case|:
case|case
literal|"HOUR"
case|:
case|case
literal|"MINUTE"
case|:
case|case
literal|"SECOND"
case|:
name|Node
name|functionReplacement
init|=
operator|new
name|ExtractFunctionNode
argument_list|(
name|child
operator|.
name|getAlias
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|functionName
init|=
name|child
operator|.
name|getFunctionName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"DAY_OF_MONTH"
operator|.
name|equals
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
name|functionName
operator|=
literal|"DAY"
expr_stmt|;
block|}
name|functionReplacement
operator|.
name|addChild
argument_list|(
operator|new
name|TextNode
argument_list|(
name|functionName
argument_list|)
argument_list|)
expr_stmt|;
name|replaceChild
argument_list|(
name|parent
argument_list|,
name|index
argument_list|,
name|functionReplacement
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"DAY_OF_WEEK"
case|:
case|case
literal|"DAY_OF_YEAR"
case|:
case|case
literal|"WEEK"
case|:
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Function %s() is unsupported in FrontBase."
argument_list|,
name|child
operator|.
name|getFunctionName
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ExtractFunctionNode
extends|extends
name|FunctionNode
block|{
specifier|public
name|ExtractFunctionNode
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|super
argument_list|(
literal|"EXTRACT"
argument_list|,
name|alias
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|appendChildrenSeparator
parameter_list|(
name|QuotingAppendable
name|buffer
parameter_list|,
name|int
name|childIdx
parameter_list|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" FROM "
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|copy
parameter_list|()
block|{
return|return
operator|new
name|ExtractFunctionNode
argument_list|(
name|getAlias
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

