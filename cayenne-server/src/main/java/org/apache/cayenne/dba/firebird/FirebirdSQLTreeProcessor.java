begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|firebird
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|ExpressionNodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|QuotingAppendable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|FunctionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|InNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|LimitOffsetNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|OpExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|TextNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|ValueNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
operator|.
name|BaseSQLTreeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|firebird
operator|.
name|sqltree
operator|.
name|FirebirdLimitNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|firebird
operator|.
name|sqltree
operator|.
name|FirebirdSubstringFunctionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|SQLBuilder
operator|.
name|exp
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|SQLBuilder
operator|.
name|node
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|FirebirdSQLTreeProcessor
extends|extends
name|BaseSQLTreeProcessor
block|{
specifier|private
specifier|static
specifier|final
name|int
name|FIREBIRD_IN_BATCH_SIZE
init|=
literal|1500
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|onValueNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|ValueNode
name|child
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|replaceChild
argument_list|(
name|parent
argument_list|,
name|index
argument_list|,
operator|new
name|ValueNode
argument_list|(
name|child
operator|.
name|getValue
argument_list|()
argument_list|,
name|child
operator|.
name|isArray
argument_list|()
argument_list|,
name|child
operator|.
name|getAttribute
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|appendStringValue
parameter_list|(
name|QuotingAppendable
name|buffer
parameter_list|,
name|CharSequence
name|value
parameter_list|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"CAST("
argument_list|)
expr_stmt|;
name|super
operator|.
name|appendStringValue
argument_list|(
name|buffer
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" AS VARCHAR("
argument_list|)
operator|.
name|append
argument_list|(
name|value
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"))"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onLimitOffsetNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|LimitOffsetNode
name|child
parameter_list|,
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|child
operator|.
name|getLimit
argument_list|()
operator|==
literal|0
operator|&&
name|child
operator|.
name|getOffset
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|int
name|from
init|=
name|child
operator|.
name|getOffset
argument_list|()
operator|+
literal|1
decl_stmt|;
name|int
name|to
init|=
name|child
operator|.
name|getLimit
argument_list|()
operator|==
literal|0
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|from
operator|+
name|child
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|replaceChild
argument_list|(
name|parent
argument_list|,
name|index
argument_list|,
operator|new
name|FirebirdLimitNode
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onInNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|InNode
name|child
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|Node
name|arg
init|=
name|child
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Node
name|childNode
init|=
name|child
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|childNode
operator|.
name|getType
argument_list|()
operator|!=
name|NodeType
operator|.
name|VALUE
condition|)
block|{
return|return;
block|}
name|ValueNode
name|valueNode
init|=
operator|(
name|ValueNode
operator|)
name|childNode
decl_stmt|;
name|Object
name|value
init|=
name|valueNode
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|Node
argument_list|>
name|newChildren
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// need to slice for batches of 1500 values
if|if
condition|(
name|value
operator|instanceof
name|Object
index|[]
condition|)
block|{
for|for
control|(
name|Object
index|[]
name|slice
range|:
name|ArrayUtil
operator|.
name|sliceArray
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|value
argument_list|,
name|FIREBIRD_IN_BATCH_SIZE
argument_list|)
control|)
block|{
name|newChildren
operator|.
name|add
argument_list|(
name|newSliceNode
argument_list|(
name|child
argument_list|,
name|arg
argument_list|,
name|valueNode
argument_list|,
name|slice
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|value
operator|instanceof
name|int
index|[]
condition|)
block|{
for|for
control|(
name|int
index|[]
name|slice
range|:
name|ArrayUtil
operator|.
name|sliceArray
argument_list|(
operator|(
name|int
index|[]
operator|)
name|value
argument_list|,
name|FIREBIRD_IN_BATCH_SIZE
argument_list|)
control|)
block|{
name|newChildren
operator|.
name|add
argument_list|(
name|newSliceNode
argument_list|(
name|child
argument_list|,
name|arg
argument_list|,
name|valueNode
argument_list|,
name|slice
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|value
operator|instanceof
name|long
index|[]
condition|)
block|{
for|for
control|(
name|long
index|[]
name|slice
range|:
name|ArrayUtil
operator|.
name|sliceArray
argument_list|(
operator|(
name|long
index|[]
operator|)
name|value
argument_list|,
name|FIREBIRD_IN_BATCH_SIZE
argument_list|)
control|)
block|{
name|newChildren
operator|.
name|add
argument_list|(
name|newSliceNode
argument_list|(
name|child
argument_list|,
name|arg
argument_list|,
name|valueNode
argument_list|,
name|slice
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|value
operator|instanceof
name|float
index|[]
condition|)
block|{
for|for
control|(
name|float
index|[]
name|slice
range|:
name|ArrayUtil
operator|.
name|sliceArray
argument_list|(
operator|(
name|float
index|[]
operator|)
name|value
argument_list|,
name|FIREBIRD_IN_BATCH_SIZE
argument_list|)
control|)
block|{
name|newChildren
operator|.
name|add
argument_list|(
name|newSliceNode
argument_list|(
name|child
argument_list|,
name|arg
argument_list|,
name|valueNode
argument_list|,
name|slice
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|value
operator|instanceof
name|double
index|[]
condition|)
block|{
for|for
control|(
name|double
index|[]
name|slice
range|:
name|ArrayUtil
operator|.
name|sliceArray
argument_list|(
operator|(
name|double
index|[]
operator|)
name|value
argument_list|,
name|FIREBIRD_IN_BATCH_SIZE
argument_list|)
control|)
block|{
name|newChildren
operator|.
name|add
argument_list|(
name|newSliceNode
argument_list|(
name|child
argument_list|,
name|arg
argument_list|,
name|valueNode
argument_list|,
name|slice
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|value
operator|instanceof
name|short
index|[]
condition|)
block|{
for|for
control|(
name|short
index|[]
name|slice
range|:
name|ArrayUtil
operator|.
name|sliceArray
argument_list|(
operator|(
name|short
index|[]
operator|)
name|value
argument_list|,
name|FIREBIRD_IN_BATCH_SIZE
argument_list|)
control|)
block|{
name|newChildren
operator|.
name|add
argument_list|(
name|newSliceNode
argument_list|(
name|child
argument_list|,
name|arg
argument_list|,
name|valueNode
argument_list|,
name|slice
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|value
operator|instanceof
name|char
index|[]
condition|)
block|{
for|for
control|(
name|char
index|[]
name|slice
range|:
name|ArrayUtil
operator|.
name|sliceArray
argument_list|(
operator|(
name|char
index|[]
operator|)
name|value
argument_list|,
name|FIREBIRD_IN_BATCH_SIZE
argument_list|)
control|)
block|{
name|newChildren
operator|.
name|add
argument_list|(
name|newSliceNode
argument_list|(
name|child
argument_list|,
name|arg
argument_list|,
name|valueNode
argument_list|,
name|slice
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|value
operator|instanceof
name|boolean
index|[]
condition|)
block|{
for|for
control|(
name|boolean
index|[]
name|slice
range|:
name|ArrayUtil
operator|.
name|sliceArray
argument_list|(
operator|(
name|boolean
index|[]
operator|)
name|value
argument_list|,
name|FIREBIRD_IN_BATCH_SIZE
argument_list|)
control|)
block|{
name|newChildren
operator|.
name|add
argument_list|(
name|newSliceNode
argument_list|(
name|child
argument_list|,
name|arg
argument_list|,
name|valueNode
argument_list|,
name|slice
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|value
operator|instanceof
name|byte
index|[]
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|slice
range|:
name|ArrayUtil
operator|.
name|sliceArray
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|value
argument_list|,
name|FIREBIRD_IN_BATCH_SIZE
argument_list|)
control|)
block|{
name|newChildren
operator|.
name|add
argument_list|(
name|newSliceNode
argument_list|(
name|child
argument_list|,
name|arg
argument_list|,
name|valueNode
argument_list|,
name|slice
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ExpressionNodeBuilder
name|exp
init|=
name|exp
argument_list|(
name|node
argument_list|(
name|newChildren
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|newChildren
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|exp
operator|=
name|exp
operator|.
name|or
argument_list|(
name|node
argument_list|(
name|newChildren
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parent
operator|.
name|replaceChild
argument_list|(
name|index
argument_list|,
name|exp
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|InNode
name|newSliceNode
parameter_list|(
name|InNode
name|child
parameter_list|,
name|Node
name|arg
parameter_list|,
name|ValueNode
name|valueNode
parameter_list|,
name|Object
name|slice
parameter_list|)
block|{
name|InNode
name|nextNode
init|=
operator|new
name|InNode
argument_list|(
name|child
operator|.
name|isNot
argument_list|()
argument_list|)
decl_stmt|;
name|nextNode
operator|.
name|addChild
argument_list|(
name|arg
operator|.
name|deepCopy
argument_list|()
argument_list|)
expr_stmt|;
name|nextNode
operator|.
name|addChild
argument_list|(
operator|new
name|ValueNode
argument_list|(
name|slice
argument_list|,
name|valueNode
operator|.
name|isArray
argument_list|()
argument_list|,
name|valueNode
operator|.
name|getAttribute
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|nextNode
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onFunctionNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|FunctionNode
name|child
parameter_list|,
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|child
operator|.
name|getFunctionName
argument_list|()
condition|)
block|{
case|case
literal|"LENGTH"
case|:
name|replaceChild
argument_list|(
name|parent
argument_list|,
name|index
argument_list|,
operator|new
name|FunctionNode
argument_list|(
literal|"CHAR_LENGTH"
argument_list|,
name|child
operator|.
name|getAlias
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"LOCATE"
case|:
name|replaceChild
argument_list|(
name|parent
argument_list|,
name|index
argument_list|,
operator|new
name|FunctionNode
argument_list|(
literal|"POSITION"
argument_list|,
name|child
operator|.
name|getAlias
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"CONCAT"
case|:
name|replaceChild
argument_list|(
name|parent
argument_list|,
name|index
argument_list|,
operator|new
name|OpExpressionNode
argument_list|(
literal|"||"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"SUBSTRING"
case|:
name|replaceChild
argument_list|(
name|parent
argument_list|,
name|index
argument_list|,
operator|new
name|FirebirdSubstringFunctionNode
argument_list|(
name|child
operator|.
name|getAlias
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"YEAR"
case|:
case|case
literal|"MONTH"
case|:
case|case
literal|"DAY"
case|:
case|case
literal|"DAY_OF_MONTH"
case|:
case|case
literal|"DAY_OF_WEEK"
case|:
case|case
literal|"DAY_OF_YEAR"
case|:
case|case
literal|"WEEK"
case|:
case|case
literal|"HOUR"
case|:
case|case
literal|"MINUTE"
case|:
case|case
literal|"SECOND"
case|:
name|Node
name|functionReplacement
init|=
operator|new
name|FunctionNode
argument_list|(
literal|"EXTRACT"
argument_list|,
name|child
operator|.
name|getAlias
argument_list|()
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|appendChildrenSeparator
parameter_list|(
name|QuotingAppendable
name|buffer
parameter_list|,
name|int
name|childIdx
parameter_list|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|String
name|partName
init|=
name|child
operator|.
name|getFunctionName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"DAY_OF_MONTH"
operator|.
name|equals
argument_list|(
name|partName
argument_list|)
condition|)
block|{
name|partName
operator|=
literal|"DAY"
expr_stmt|;
block|}
if|else if
condition|(
literal|"DAY_OF_WEEK"
operator|.
name|equals
argument_list|(
name|partName
argument_list|)
condition|)
block|{
name|partName
operator|=
literal|"WEEKDAY"
expr_stmt|;
block|}
if|else if
condition|(
literal|"DAY_OF_YEAR"
operator|.
name|equals
argument_list|(
name|partName
argument_list|)
condition|)
block|{
name|partName
operator|=
literal|"YEARDAY"
expr_stmt|;
block|}
name|functionReplacement
operator|.
name|addChild
argument_list|(
operator|new
name|TextNode
argument_list|(
name|partName
operator|+
literal|" FROM "
argument_list|)
argument_list|)
expr_stmt|;
name|replaceChild
argument_list|(
name|parent
argument_list|,
name|index
argument_list|,
name|functionReplacement
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_class

end_unit

