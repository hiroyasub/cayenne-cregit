begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|openbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|QuotingAppendable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|FunctionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|LikeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|LimitOffsetNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|ValueNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
operator|.
name|BaseSQLTreeProcessor
import|;
end_import

begin_comment
comment|/**  * @since 4.2  * @deprecated since 4.2  */
end_comment

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|OpenBaseSQLTreeProcessor
extends|extends
name|BaseSQLTreeProcessor
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onLikeNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|LikeNode
name|child
parameter_list|,
name|int
name|index
parameter_list|)
block|{
comment|// OpenBase is case-insensitive by default
if|if
condition|(
name|child
operator|.
name|isIgnoreCase
argument_list|()
condition|)
block|{
name|replaceChild
argument_list|(
name|parent
argument_list|,
name|index
argument_list|,
operator|new
name|LikeNode
argument_list|(
literal|false
argument_list|,
name|child
operator|.
name|isNot
argument_list|()
argument_list|,
name|child
operator|.
name|getEscape
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onValueNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|ValueNode
name|child
parameter_list|,
name|int
name|index
parameter_list|)
block|{
comment|// Special handling of string matching is needed:
comment|// Case-sensitive LIKE must be converted to [x][Y][z] format
if|if
condition|(
name|parent
operator|.
name|getType
argument_list|()
operator|==
name|NodeType
operator|.
name|LIKE
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|LikeNode
operator|)
name|parent
operator|)
operator|.
name|isIgnoreCase
argument_list|()
operator|&&
name|child
operator|.
name|getValue
argument_list|()
operator|instanceof
name|CharSequence
condition|)
block|{
name|replaceChild
argument_list|(
name|parent
argument_list|,
name|index
argument_list|,
operator|new
name|ValueNode
argument_list|(
name|caseSensitiveLikePattern
argument_list|(
operator|(
name|CharSequence
operator|)
name|child
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|child
operator|.
name|isArray
argument_list|()
argument_list|,
name|child
operator|.
name|getAttribute
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onLimitOffsetNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|LimitOffsetNode
name|child
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|replaceChild
argument_list|(
name|parent
argument_list|,
name|index
argument_list|,
operator|new
name|OpenBaseLimitNode
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onFunctionNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|FunctionNode
name|child
parameter_list|,
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|child
operator|.
name|getFunctionName
argument_list|()
condition|)
block|{
case|case
literal|"DAY_OF_WEEK"
case|:
case|case
literal|"DAY_OF_MONTH"
case|:
case|case
literal|"DAY_OF_YEAR"
case|:
name|replaceChild
argument_list|(
name|parent
argument_list|,
name|index
argument_list|,
operator|new
name|FunctionNode
argument_list|(
name|child
operator|.
name|getFunctionName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"_"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|child
operator|.
name|getAlias
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|private
name|String
name|caseSensitiveLikePattern
parameter_list|(
name|CharSequence
name|pattern
parameter_list|)
block|{
name|int
name|len
init|=
name|pattern
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
name|len
operator|*
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|pattern
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'%'
operator|||
name|c
operator|==
literal|'?'
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|c
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|OpenBaseLimitNode
extends|extends
name|Node
block|{
specifier|private
specifier|final
name|LimitOffsetNode
name|child
decl_stmt|;
specifier|public
name|OpenBaseLimitNode
parameter_list|(
name|LimitOffsetNode
name|child
parameter_list|)
block|{
name|this
operator|.
name|child
operator|=
name|child
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|QuotingAppendable
name|append
parameter_list|(
name|QuotingAppendable
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|child
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" RETURN RESULTS "
argument_list|)
operator|.
name|append
argument_list|(
name|child
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|copy
parameter_list|()
block|{
return|return
operator|new
name|OpenBaseLimitNode
argument_list|(
name|child
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

