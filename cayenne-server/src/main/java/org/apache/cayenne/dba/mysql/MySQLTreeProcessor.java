begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|mysql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|ChildProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|FunctionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|LikeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|LimitOffsetNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
operator|.
name|TypeAwareSQLTreeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|mysql
operator|.
name|sqltree
operator|.
name|ConvertNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|mysql
operator|.
name|sqltree
operator|.
name|MysqlLikeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|mysql
operator|.
name|sqltree
operator|.
name|MysqlLimitOffsetNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|types
operator|.
name|GeoJson
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|types
operator|.
name|Json
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|types
operator|.
name|Wkt
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|MySQLTreeProcessor
extends|extends
name|TypeAwareSQLTreeProcessor
block|{
specifier|private
specifier|static
specifier|final
name|MySQLTreeProcessor
name|INSTANCE
init|=
operator|new
name|MySQLTreeProcessor
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|MySQLTreeProcessor
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
specifier|private
name|MySQLTreeProcessor
parameter_list|()
block|{
name|registerProcessor
argument_list|(
name|NodeType
operator|.
name|LIKE
argument_list|,
operator|(
name|ChildProcessor
argument_list|<
name|LikeNode
argument_list|>
operator|)
name|this
operator|::
name|onLikeNode
argument_list|)
expr_stmt|;
name|registerProcessor
argument_list|(
name|NodeType
operator|.
name|LIMIT_OFFSET
argument_list|,
operator|(
name|ChildProcessor
argument_list|<
name|LimitOffsetNode
argument_list|>
operator|)
name|this
operator|::
name|onLimitOffsetNode
argument_list|)
expr_stmt|;
name|registerProcessor
argument_list|(
name|NodeType
operator|.
name|FUNCTION
argument_list|,
operator|(
name|ChildProcessor
argument_list|<
name|FunctionNode
argument_list|>
operator|)
name|this
operator|::
name|onFunctionNode
argument_list|)
expr_stmt|;
name|registerColumnProcessor
argument_list|(
name|Wkt
operator|.
name|class
argument_list|,
parameter_list|(
name|parent
parameter_list|,
name|child
parameter_list|,
name|i
parameter_list|)
lambda|->
name|Optional
operator|.
name|of
argument_list|(
name|wrapInFunction
argument_list|(
name|child
argument_list|,
literal|"ST_AsText"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|registerColumnProcessor
argument_list|(
name|GeoJson
operator|.
name|class
argument_list|,
parameter_list|(
name|parent
parameter_list|,
name|child
parameter_list|,
name|i
parameter_list|)
lambda|->
name|Optional
operator|.
name|of
argument_list|(
name|wrapInFunction
argument_list|(
name|child
argument_list|,
literal|"ST_AsGeoJSON"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|registerValueProcessor
argument_list|(
name|Wkt
operator|.
name|class
argument_list|,
parameter_list|(
name|parent
parameter_list|,
name|child
parameter_list|,
name|i
parameter_list|)
lambda|->
name|Optional
operator|.
name|of
argument_list|(
name|wrapInFunction
argument_list|(
name|child
argument_list|,
literal|"ST_GeomFromText"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|registerValueProcessor
argument_list|(
name|GeoJson
operator|.
name|class
argument_list|,
parameter_list|(
name|parent
parameter_list|,
name|child
parameter_list|,
name|i
parameter_list|)
lambda|->
name|Optional
operator|.
name|of
argument_list|(
name|wrapInFunction
argument_list|(
name|child
argument_list|,
literal|"ST_GeomFromGeoJSON"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|registerValueProcessor
argument_list|(
name|Json
operator|.
name|class
argument_list|,
parameter_list|(
name|parent
parameter_list|,
name|child
parameter_list|,
name|i
parameter_list|)
lambda|->
block|{
name|ConvertNode
name|node
init|=
operator|new
name|ConvertNode
argument_list|()
decl_stmt|;
name|node
operator|.
name|addChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|node
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Optional
argument_list|<
name|Node
argument_list|>
name|onLikeNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|LikeNode
name|child
parameter_list|,
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
operator|!
name|child
operator|.
name|isIgnoreCase
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|MysqlLikeNode
argument_list|(
name|child
operator|.
name|isNot
argument_list|()
argument_list|,
name|child
operator|.
name|getEscape
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
specifier|protected
name|Optional
argument_list|<
name|Node
argument_list|>
name|onLimitOffsetNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|LimitOffsetNode
name|child
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|MysqlLimitOffsetNode
argument_list|(
name|child
operator|.
name|getLimit
argument_list|()
argument_list|,
name|child
operator|.
name|getOffset
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|Optional
argument_list|<
name|Node
argument_list|>
name|onFunctionNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|FunctionNode
name|child
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|String
name|functionName
init|=
name|child
operator|.
name|getFunctionName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"DAY_OF_MONTH"
operator|.
name|equals
argument_list|(
name|functionName
argument_list|)
operator|||
literal|"DAY_OF_WEEK"
operator|.
name|equals
argument_list|(
name|functionName
argument_list|)
operator|||
literal|"DAY_OF_YEAR"
operator|.
name|equals
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|FunctionNode
argument_list|(
name|functionName
operator|.
name|replace
argument_list|(
literal|"_"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|child
operator|.
name|getAlias
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

