begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|mysql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|CallableStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|OperationObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|ProcedureAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|RowDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|trans
operator|.
name|ProcedureTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ProcedureQuery
import|;
end_import

begin_comment
comment|/**  * @since 3.0  */
end_comment

begin_class
class|class
name|MySQLProcedureAction
extends|extends
name|ProcedureAction
block|{
specifier|public
name|MySQLProcedureAction
parameter_list|(
name|ProcedureQuery
name|query
parameter_list|,
name|DataNode
name|dataNode
parameter_list|)
block|{
name|super
argument_list|(
name|query
argument_list|,
name|dataNode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|performAction
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|OperationObserver
name|observer
parameter_list|)
throws|throws
name|SQLException
throws|,
name|Exception
block|{
name|processedResultSets
operator|=
literal|0
expr_stmt|;
name|ProcedureTranslator
name|transl
init|=
name|createTranslator
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|CallableStatement
name|statement
init|=
operator|(
name|CallableStatement
operator|)
name|transl
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
comment|// this is one difference with super - we need to read the first result set
comment|// without calling 'getMoreResults' - which may actually be a good default
comment|// strategy?
name|boolean
name|firstResult
init|=
name|statement
operator|.
name|execute
argument_list|()
decl_stmt|;
comment|// read out parameters
name|readProcedureOutParameters
argument_list|(
name|statement
argument_list|,
name|observer
argument_list|)
expr_stmt|;
comment|// read first result
if|if
condition|(
name|firstResult
condition|)
block|{
name|processResultSet
argument_list|(
name|statement
argument_list|,
name|observer
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|processUpdate
argument_list|(
name|statement
argument_list|,
name|observer
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// read the rest of the query
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|statement
operator|.
name|getMoreResults
argument_list|()
condition|)
block|{
name|processResultSet
argument_list|(
name|statement
argument_list|,
name|observer
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|processUpdate
argument_list|(
name|statement
argument_list|,
name|observer
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
finally|finally
block|{
try|try
block|{
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
block|}
block|}
block|}
specifier|private
name|void
name|processResultSet
parameter_list|(
name|CallableStatement
name|statement
parameter_list|,
name|OperationObserver
name|observer
parameter_list|)
throws|throws
name|Exception
block|{
name|ResultSet
name|rs
init|=
name|statement
operator|.
name|getResultSet
argument_list|()
decl_stmt|;
try|try
block|{
name|RowDescriptor
name|descriptor
init|=
name|describeResultSet
argument_list|(
name|rs
argument_list|,
name|processedResultSets
operator|++
argument_list|)
decl_stmt|;
name|readResultSet
argument_list|(
name|rs
argument_list|,
name|descriptor
argument_list|,
name|query
argument_list|,
name|observer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
block|}
block|}
block|}
specifier|private
name|boolean
name|processUpdate
parameter_list|(
name|CallableStatement
name|statement
parameter_list|,
name|OperationObserver
name|observer
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|updateCount
init|=
name|statement
operator|.
name|getUpdateCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|updateCount
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|dataNode
operator|.
name|getJdbcEventLogger
argument_list|()
operator|.
name|logUpdateCount
argument_list|(
name|updateCount
argument_list|)
expr_stmt|;
name|observer
operator|.
name|nextCount
argument_list|(
name|query
argument_list|,
name|updateCount
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Creates a translator that adds parenthesis to no-param queries.      */
comment|// see CAY-750 for the problem description
annotation|@
name|Override
specifier|protected
name|ProcedureTranslator
name|createTranslator
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
name|ProcedureTranslator
name|translator
init|=
operator|new
name|MySQLProcedureTranslator
argument_list|()
decl_stmt|;
name|translator
operator|.
name|setAdapter
argument_list|(
name|dataNode
operator|.
name|getAdapter
argument_list|()
argument_list|)
expr_stmt|;
name|translator
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|translator
operator|.
name|setEntityResolver
argument_list|(
name|dataNode
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
expr_stmt|;
name|translator
operator|.
name|setConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|translator
operator|.
name|setJdbcEventLogger
argument_list|(
name|dataNode
operator|.
name|getJdbcEventLogger
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|translator
return|;
block|}
comment|// same as postgres translator - should we make this the default?
specifier|static
class|class
name|MySQLProcedureTranslator
extends|extends
name|ProcedureTranslator
block|{
annotation|@
name|Override
specifier|protected
name|String
name|createSqlString
parameter_list|()
block|{
name|String
name|sql
init|=
name|super
operator|.
name|createSqlString
argument_list|()
decl_stmt|;
comment|// add empty parameter parenthesis
if|if
condition|(
name|sql
operator|.
name|endsWith
argument_list|(
literal|"}"
argument_list|)
operator|&&
operator|!
name|sql
operator|.
name|endsWith
argument_list|(
literal|")}"
argument_list|)
condition|)
block|{
name|sql
operator|=
name|sql
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sql
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
literal|"()}"
expr_stmt|;
block|}
return|return
name|sql
return|;
block|}
block|}
block|}
end_class

end_unit

