begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|oracle
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Clob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|log
operator|.
name|JdbcEventLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|BatchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * @since 3.0  */
end_comment

begin_class
class|class
name|Oracle8LOBBatchAction
extends|extends
name|OracleLOBBatchAction
block|{
name|Oracle8LOBBatchAction
parameter_list|(
name|BatchQuery
name|query
parameter_list|,
name|DbAdapter
name|adapter
parameter_list|,
name|JdbcEventLogger
name|logger
parameter_list|)
block|{
name|super
argument_list|(
name|query
argument_list|,
name|adapter
argument_list|,
name|logger
argument_list|)
expr_stmt|;
block|}
comment|/**      * Override the Oracle writeBlob() method to be compatible with Oracle8 drivers.      */
annotation|@
name|Override
specifier|protected
name|void
name|writeBlob
parameter_list|(
name|Blob
name|blob
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
comment|// Fix for CAY-1307.  For Oracle8, get the method found by reflection in
comment|// OracleAdapter.  (Code taken from Cayenne 2.)
name|Method
name|getBinaryStreamMethod
init|=
name|Oracle8Adapter
operator|.
name|getOutputStreamFromBlobMethod
argument_list|()
decl_stmt|;
try|try
block|{
name|OutputStream
name|out
init|=
operator|(
name|OutputStream
operator|)
name|getBinaryStreamMethod
operator|.
name|invoke
argument_list|(
name|blob
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error processing BLOB."
argument_list|,
name|Util
operator|.
name|unwindException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**      * Override the Oracle writeClob() method to be compatible with Oracle8 drivers.      */
annotation|@
name|Override
specifier|protected
name|void
name|writeClob
parameter_list|(
name|Clob
name|clob
parameter_list|,
name|char
index|[]
name|value
parameter_list|)
block|{
name|Method
name|getWriterMethod
init|=
name|Oracle8Adapter
operator|.
name|getWriterFromClobMethod
argument_list|()
decl_stmt|;
try|try
block|{
name|Writer
name|out
init|=
operator|(
name|Writer
operator|)
name|getWriterMethod
operator|.
name|invoke
argument_list|(
name|clob
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error processing CLOB."
argument_list|,
name|Util
operator|.
name|unwindException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**      * Override the Oracle writeClob() method to be compatible with Oracle8 drivers.      */
annotation|@
name|Override
specifier|protected
name|void
name|writeClob
parameter_list|(
name|Clob
name|clob
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|Method
name|getWriterMethod
init|=
name|Oracle8Adapter
operator|.
name|getWriterFromClobMethod
argument_list|()
decl_stmt|;
try|try
block|{
name|Writer
name|out
init|=
operator|(
name|Writer
operator|)
name|getWriterMethod
operator|.
name|invoke
argument_list|(
name|clob
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error processing CLOB."
argument_list|,
name|Util
operator|.
name|unwindException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

