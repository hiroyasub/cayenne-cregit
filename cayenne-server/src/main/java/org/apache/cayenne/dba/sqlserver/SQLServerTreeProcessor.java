begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|sqlserver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|ColumnNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|EmptyNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|FunctionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|LimitOffsetNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|OpExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|TextNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|sqlbuilder
operator|.
name|sqltree
operator|.
name|TopNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
operator|.
name|BaseSQLTreeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|sqlserver
operator|.
name|sqltree
operator|.
name|SQLServerColumnNode
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|SQLServerTreeProcessor
extends|extends
name|BaseSQLTreeProcessor
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onLimitOffsetNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|LimitOffsetNode
name|child
parameter_list|,
name|int
name|index
parameter_list|)
block|{
comment|// SQLServer uses "SELECT DISTINCT TOP N" or "SELECT TOP N" instead of LIMIT
comment|// Offset will be calculated in-memory
name|replaceChild
argument_list|(
name|parent
argument_list|,
name|index
argument_list|,
operator|new
name|EmptyNode
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|limit
init|=
name|child
operator|.
name|getLimit
argument_list|()
operator|+
name|child
operator|.
name|getOffset
argument_list|()
decl_stmt|;
comment|// we have root actually as input for processor, but it's better to keep processor stateless
comment|// root shouldn't be far from limit's parent (likely it will be parent itself)
name|Node
name|root
init|=
name|getRoot
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|==
name|NodeType
operator|.
name|DISTINCT
condition|)
block|{
name|idx
operator|=
literal|1
expr_stmt|;
block|}
name|root
operator|.
name|addChild
argument_list|(
name|idx
argument_list|,
operator|new
name|TopNode
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Node
name|getRoot
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
while|while
condition|(
name|node
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|node
operator|=
name|node
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onColumnNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|ColumnNode
name|child
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|replaceChild
argument_list|(
name|parent
argument_list|,
name|index
argument_list|,
operator|new
name|SQLServerColumnNode
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onFunctionNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|FunctionNode
name|child
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|String
name|functionName
init|=
name|child
operator|.
name|getFunctionName
argument_list|()
decl_stmt|;
name|Node
name|replacement
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|functionName
condition|)
block|{
case|case
literal|"LENGTH"
case|:
name|replacement
operator|=
operator|new
name|FunctionNode
argument_list|(
literal|"LEN"
argument_list|,
name|child
operator|.
name|getAlias
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"LOCATE"
case|:
name|replacement
operator|=
operator|new
name|FunctionNode
argument_list|(
literal|"CHARINDEX"
argument_list|,
name|child
operator|.
name|getAlias
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"MOD"
case|:
name|replacement
operator|=
operator|new
name|OpExpressionNode
argument_list|(
literal|"%"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"TRIM"
case|:
name|Node
name|rtrim
init|=
operator|new
name|FunctionNode
argument_list|(
literal|"RTRIM"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|replacement
operator|=
operator|new
name|FunctionNode
argument_list|(
literal|"LTRIM"
argument_list|,
name|child
operator|.
name|getAlias
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|child
operator|.
name|getChildrenCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|rtrim
operator|.
name|addChild
argument_list|(
name|child
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|replacement
operator|.
name|addChild
argument_list|(
name|rtrim
argument_list|)
expr_stmt|;
name|parent
operator|.
name|replaceChild
argument_list|(
name|index
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
return|return;
case|case
literal|"CURRENT_DATE"
case|:
name|replacement
operator|=
operator|new
name|FunctionNode
argument_list|(
literal|"{fn CURDATE()}"
argument_list|,
name|child
operator|.
name|getAlias
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"CURRENT_TIME"
case|:
name|replacement
operator|=
operator|new
name|FunctionNode
argument_list|(
literal|"{fn CURTIME()}"
argument_list|,
name|child
operator|.
name|getAlias
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"CURRENT_TIMESTAMP"
case|:
name|replacement
operator|=
operator|new
name|FunctionNode
argument_list|(
literal|"CURRENT_TIMESTAMP"
argument_list|,
name|child
operator|.
name|getAlias
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"YEAR"
case|:
case|case
literal|"MONTH"
case|:
case|case
literal|"WEEK"
case|:
case|case
literal|"DAY_OF_YEAR"
case|:
case|case
literal|"DAY"
case|:
case|case
literal|"DAY_OF_MONTH"
case|:
case|case
literal|"DAY_OF_WEEK"
case|:
case|case
literal|"HOUR"
case|:
case|case
literal|"MINUTE"
case|:
case|case
literal|"SECOND"
case|:
name|replacement
operator|=
operator|new
name|FunctionNode
argument_list|(
literal|"DATEPART"
argument_list|,
name|child
operator|.
name|getAlias
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"DAY_OF_MONTH"
operator|.
name|equals
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
name|functionName
operator|=
literal|"DAY"
expr_stmt|;
block|}
if|else if
condition|(
literal|"DAY_OF_WEEK"
operator|.
name|equals
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
name|functionName
operator|=
literal|"WEEKDAY"
expr_stmt|;
block|}
if|else if
condition|(
literal|"DAY_OF_YEAR"
operator|.
name|equals
argument_list|(
name|functionName
argument_list|)
condition|)
block|{
name|functionName
operator|=
literal|"DAYOFYEAR"
expr_stmt|;
block|}
name|replacement
operator|.
name|addChild
argument_list|(
operator|new
name|TextNode
argument_list|(
name|functionName
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|replacement
operator|!=
literal|null
condition|)
block|{
name|replaceChild
argument_list|(
name|parent
argument_list|,
name|index
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

