begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|ARRAY
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|BIGINT
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|BINARY
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|BIT
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|BLOB
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|BOOLEAN
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|CHAR
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|CLOB
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|DATE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|DECIMAL
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|DOUBLE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|FLOAT
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|INTEGER
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|LONGNVARCHAR
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|LONGVARBINARY
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|LONGVARCHAR
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|NCHAR
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|NCLOB
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|NULL
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|NUMERIC
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|NVARCHAR
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|OTHER
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|REAL
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|SMALLINT
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|SQLXML
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|TIME
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|TIMESTAMP
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|TINYINT
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|VARBINARY
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|sql
operator|.
name|Types
operator|.
name|VARCHAR
import|;
end_import

begin_comment
comment|/**  * A utility class that handles mappings of JDBC data types to the database  * types and Java types. Also contains methods that provide information about  * JDBC types.  */
end_comment

begin_class
specifier|public
class|class
name|TypesMapping
block|{
comment|// Never use "-1" or any other normal integer, since there
comment|// is a big chance it is being reserved in java.sql.Types
specifier|public
specifier|static
specifier|final
name|int
name|NOT_DEFINED
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|// char constants for the sql data types
specifier|public
specifier|static
specifier|final
name|String
name|SQL_ARRAY
init|=
literal|"ARRAY"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_BIGINT
init|=
literal|"BIGINT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_BINARY
init|=
literal|"BINARY"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_BIT
init|=
literal|"BIT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_BLOB
init|=
literal|"BLOB"
decl_stmt|;
comment|/** 	 * @since 1.2 	 */
specifier|public
specifier|static
specifier|final
name|String
name|SQL_BOOLEAN
init|=
literal|"BOOLEAN"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_CLOB
init|=
literal|"CLOB"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_NCLOB
init|=
literal|"NCLOB"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_CHAR
init|=
literal|"CHAR"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_NCHAR
init|=
literal|"NCHAR"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_DATE
init|=
literal|"DATE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_DECIMAL
init|=
literal|"DECIMAL"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_DOUBLE
init|=
literal|"DOUBLE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_FLOAT
init|=
literal|"FLOAT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_INTEGER
init|=
literal|"INTEGER"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_LONGVARCHAR
init|=
literal|"LONGVARCHAR"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_LONGNVARCHAR
init|=
literal|"LONGNVARCHAR"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_LONGVARBINARY
init|=
literal|"LONGVARBINARY"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_NUMERIC
init|=
literal|"NUMERIC"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_REAL
init|=
literal|"REAL"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_SMALLINT
init|=
literal|"SMALLINT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_TINYINT
init|=
literal|"TINYINT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_TIME
init|=
literal|"TIME"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_TIMESTAMP
init|=
literal|"TIMESTAMP"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_VARBINARY
init|=
literal|"VARBINARY"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_VARCHAR
init|=
literal|"VARCHAR"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_NVARCHAR
init|=
literal|"NVARCHAR"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_SQLXML
init|=
literal|"SQLXML"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_OTHER
init|=
literal|"OTHER"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SQL_NULL
init|=
literal|"NULL"
decl_stmt|;
comment|// char constants for Java data types
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_LONG
init|=
literal|"java.lang.Long"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_BYTES
init|=
literal|"byte[]"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_BOOLEAN
init|=
literal|"java.lang.Boolean"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_STRING
init|=
literal|"java.lang.String"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_SQLDATE
init|=
literal|"java.sql.Date"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_UTILDATE
init|=
literal|"java.util.Date"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_BIGDECIMAL
init|=
literal|"java.math.BigDecimal"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_DOUBLE
init|=
literal|"java.lang.Double"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_FLOAT
init|=
literal|"java.lang.Float"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_INTEGER
init|=
literal|"java.lang.Integer"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_SHORT
init|=
literal|"java.lang.Short"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_BYTE
init|=
literal|"java.lang.Byte"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_TIME
init|=
literal|"java.sql.Time"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_TIMESTAMP
init|=
literal|"java.sql.Timestamp"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_BLOB
init|=
literal|"java.sql.Blob"
decl_stmt|;
comment|/** 	 * Keys: SQL string type names, Values: SQL int type definitions from 	 * java.sql.Types 	 */
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|SQL_STRING_TYPE
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** 	 * Keys: SQL int type definitions from java.sql.Types, Values: SQL string 	 * type names 	 */
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|SQL_ENUM_TYPE
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** 	 * Keys: SQL int type definitions from java.sql.Types, Values: java class 	 * names 	 */
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|SQL_ENUM_JAVA
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** 	 * Keys: java class names, Values: SQL int type definitions from 	 * java.sql.Types 	 */
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|JAVA_SQL_ENUM
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
comment|// SQL_STRING_TYPE.put(SQL_ARRAY, ARRAY);
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_BIGINT
argument_list|,
name|BIGINT
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_BINARY
argument_list|,
name|BINARY
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_BIT
argument_list|,
name|BIT
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_BLOB
argument_list|,
name|BLOB
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_BOOLEAN
argument_list|,
name|BOOLEAN
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_CLOB
argument_list|,
name|CLOB
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_NCLOB
argument_list|,
name|NCLOB
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_CHAR
argument_list|,
name|CHAR
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_NCHAR
argument_list|,
name|NCHAR
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_DATE
argument_list|,
name|DATE
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_DECIMAL
argument_list|,
name|DECIMAL
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_DOUBLE
argument_list|,
name|DOUBLE
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_FLOAT
argument_list|,
name|FLOAT
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_INTEGER
argument_list|,
name|INTEGER
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_LONGVARCHAR
argument_list|,
name|LONGVARCHAR
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_LONGNVARCHAR
argument_list|,
name|LONGNVARCHAR
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_LONGVARBINARY
argument_list|,
name|LONGVARBINARY
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_NUMERIC
argument_list|,
name|NUMERIC
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_REAL
argument_list|,
name|REAL
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_SMALLINT
argument_list|,
name|SMALLINT
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_TINYINT
argument_list|,
name|TINYINT
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_TIME
argument_list|,
name|TIME
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_TIMESTAMP
argument_list|,
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_VARBINARY
argument_list|,
name|VARBINARY
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_VARCHAR
argument_list|,
name|VARCHAR
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_NVARCHAR
argument_list|,
name|NVARCHAR
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_OTHER
argument_list|,
name|OTHER
argument_list|)
expr_stmt|;
name|SQL_STRING_TYPE
operator|.
name|put
argument_list|(
name|SQL_NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|ARRAY
argument_list|,
name|SQL_ARRAY
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|BIGINT
argument_list|,
name|SQL_BIGINT
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|BINARY
argument_list|,
name|SQL_BINARY
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|BIT
argument_list|,
name|SQL_BIT
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|BOOLEAN
argument_list|,
name|SQL_BOOLEAN
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|BLOB
argument_list|,
name|SQL_BLOB
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|CLOB
argument_list|,
name|SQL_CLOB
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|NCLOB
argument_list|,
name|SQL_NCLOB
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|CHAR
argument_list|,
name|SQL_CHAR
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|NCHAR
argument_list|,
name|SQL_NCHAR
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|DATE
argument_list|,
name|SQL_DATE
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|DECIMAL
argument_list|,
name|SQL_DECIMAL
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|DOUBLE
argument_list|,
name|SQL_DOUBLE
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|FLOAT
argument_list|,
name|SQL_FLOAT
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|INTEGER
argument_list|,
name|SQL_INTEGER
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|LONGVARCHAR
argument_list|,
name|SQL_LONGVARCHAR
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|LONGNVARCHAR
argument_list|,
name|SQL_LONGNVARCHAR
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|LONGVARBINARY
argument_list|,
name|SQL_LONGVARBINARY
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|NUMERIC
argument_list|,
name|SQL_NUMERIC
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|REAL
argument_list|,
name|SQL_REAL
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|SMALLINT
argument_list|,
name|SQL_SMALLINT
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|TINYINT
argument_list|,
name|SQL_TINYINT
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|TIME
argument_list|,
name|SQL_TIME
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|TIMESTAMP
argument_list|,
name|SQL_TIMESTAMP
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|VARBINARY
argument_list|,
name|SQL_VARBINARY
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|VARCHAR
argument_list|,
name|SQL_VARCHAR
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|NVARCHAR
argument_list|,
name|SQL_NVARCHAR
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|SQLXML
argument_list|,
name|SQL_SQLXML
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|OTHER
argument_list|,
name|SQL_OTHER
argument_list|)
expr_stmt|;
name|SQL_ENUM_TYPE
operator|.
name|put
argument_list|(
name|NULL
argument_list|,
name|SQL_NULL
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|BIGINT
argument_list|,
name|JAVA_LONG
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|BINARY
argument_list|,
name|JAVA_BYTES
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|BIT
argument_list|,
name|JAVA_BOOLEAN
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|BOOLEAN
argument_list|,
name|JAVA_BOOLEAN
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|BLOB
argument_list|,
name|JAVA_BYTES
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|CLOB
argument_list|,
name|JAVA_STRING
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|NCLOB
argument_list|,
name|JAVA_STRING
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|CHAR
argument_list|,
name|JAVA_STRING
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|NCHAR
argument_list|,
name|JAVA_STRING
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|DATE
argument_list|,
name|JAVA_UTILDATE
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|DECIMAL
argument_list|,
name|JAVA_BIGDECIMAL
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|DOUBLE
argument_list|,
name|JAVA_DOUBLE
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|FLOAT
argument_list|,
name|JAVA_FLOAT
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|INTEGER
argument_list|,
name|JAVA_INTEGER
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|LONGVARCHAR
argument_list|,
name|JAVA_STRING
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|LONGNVARCHAR
argument_list|,
name|JAVA_STRING
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|LONGVARBINARY
argument_list|,
name|JAVA_BYTES
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|NUMERIC
argument_list|,
name|JAVA_BIGDECIMAL
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|REAL
argument_list|,
name|JAVA_FLOAT
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|SMALLINT
argument_list|,
name|JAVA_SHORT
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|TINYINT
argument_list|,
name|JAVA_SHORT
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|TIME
argument_list|,
name|JAVA_UTILDATE
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|TIMESTAMP
argument_list|,
name|JAVA_UTILDATE
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|VARBINARY
argument_list|,
name|JAVA_BYTES
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|VARCHAR
argument_list|,
name|JAVA_STRING
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|NVARCHAR
argument_list|,
name|JAVA_STRING
argument_list|)
expr_stmt|;
name|SQL_ENUM_JAVA
operator|.
name|put
argument_list|(
name|SQLXML
argument_list|,
name|JAVA_STRING
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
name|JAVA_LONG
argument_list|,
name|BIGINT
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
name|JAVA_BYTES
argument_list|,
name|BINARY
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
name|JAVA_BOOLEAN
argument_list|,
name|BIT
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
name|JAVA_STRING
argument_list|,
name|VARCHAR
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
name|JAVA_SQLDATE
argument_list|,
name|DATE
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
name|JAVA_UTILDATE
argument_list|,
name|DATE
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
name|JAVA_TIMESTAMP
argument_list|,
name|TIMESTAMP
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
name|JAVA_BIGDECIMAL
argument_list|,
name|DECIMAL
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
name|JAVA_DOUBLE
argument_list|,
name|DOUBLE
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
name|JAVA_FLOAT
argument_list|,
name|FLOAT
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
name|JAVA_INTEGER
argument_list|,
name|INTEGER
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
name|JAVA_SHORT
argument_list|,
name|SMALLINT
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
name|JAVA_BYTE
argument_list|,
name|SMALLINT
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
name|JAVA_TIME
argument_list|,
name|TIME
argument_list|)
expr_stmt|;
comment|// add primitives
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
literal|"byte"
argument_list|,
name|TINYINT
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
name|INTEGER
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
literal|"short"
argument_list|,
name|SMALLINT
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
literal|"char"
argument_list|,
name|CHAR
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
literal|"double"
argument_list|,
name|DOUBLE
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
literal|"long"
argument_list|,
name|BIGINT
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
literal|"float"
argument_list|,
name|FLOAT
argument_list|)
expr_stmt|;
name|JAVA_SQL_ENUM
operator|.
name|put
argument_list|(
literal|"boolean"
argument_list|,
name|BIT
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @deprecated 	 *  	 *             Returns true if supplied type can have a length attribute as 	 *             a part of column definition. 	 */
specifier|public
specifier|static
name|boolean
name|supportsLength
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
name|JdbcAdapter
operator|.
name|supportsLength
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|// TODO: redo all isXyz as an internal enum over types, where each enum object knows whether it is this or that kind
comment|/** 	 * Returns true if supplied type is a character type. 	 * @since 4.0 	 * @param type JDBC type 	 * @return true if supplied type is a character type. 	 */
specifier|public
specifier|static
name|boolean
name|isCharacter
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
name|type
operator|==
name|Types
operator|.
name|CHAR
operator|||
name|type
operator|==
name|Types
operator|.
name|NCHAR
operator|||
name|type
operator|==
name|Types
operator|.
name|VARCHAR
operator|||
name|type
operator|==
name|Types
operator|.
name|NVARCHAR
operator|||
name|type
operator|==
name|Types
operator|.
name|CLOB
operator|||
name|type
operator|==
name|Types
operator|.
name|NCLOB
operator|||
name|type
operator|==
name|Types
operator|.
name|LONGVARCHAR
operator|||
name|type
operator|==
name|Types
operator|.
name|LONGNVARCHAR
return|;
block|}
comment|/** 	 * Returns true if supplied type is a binary type. 	 * @since 4.0 	 * @param type JDBC type 	 * @return true if supplied type is a binary type. 	 */
specifier|public
specifier|static
name|boolean
name|isBinary
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
name|type
operator|==
name|Types
operator|.
name|BINARY
operator|||
name|type
operator|==
name|Types
operator|.
name|BLOB
operator|||
name|type
operator|==
name|Types
operator|.
name|VARBINARY
operator|||
name|type
operator|==
name|Types
operator|.
name|LONGVARBINARY
return|;
block|}
comment|/** 	 * Returns true if supplied type is a numeric type. 	 */
specifier|public
specifier|static
name|boolean
name|isNumeric
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
name|type
operator|==
name|BIGINT
operator|||
name|type
operator|==
name|BIT
operator|||
name|type
operator|==
name|DECIMAL
operator|||
name|type
operator|==
name|DOUBLE
operator|||
name|type
operator|==
name|FLOAT
operator|||
name|type
operator|==
name|INTEGER
operator|||
name|type
operator|==
name|NUMERIC
operator|||
name|type
operator|==
name|REAL
operator|||
name|type
operator|==
name|SMALLINT
operator|||
name|type
operator|==
name|TINYINT
return|;
block|}
comment|/** 	 * Returns true if supplied type is a decimal type. 	 */
specifier|public
specifier|static
name|boolean
name|isDecimal
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
name|type
operator|==
name|DECIMAL
operator|||
name|type
operator|==
name|DOUBLE
operator|||
name|type
operator|==
name|FLOAT
operator|||
name|type
operator|==
name|REAL
operator|||
name|type
operator|==
name|NUMERIC
return|;
block|}
comment|/** 	 * Returns an array of string names of the default JDBC data types. 	 */
specifier|public
specifier|static
name|String
index|[]
name|getDatabaseTypes
parameter_list|()
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|types
init|=
name|SQL_STRING_TYPE
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|types
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/** 	 * Method implements an algorithm to pick a data type from a list of 	 * alternatives that most closely matches JDBC data type. 	 */
specifier|protected
specifier|static
name|String
name|pickDataType
parameter_list|(
name|int
name|jdbcType
parameter_list|,
name|TypeInfo
index|[]
name|alts
parameter_list|)
block|{
name|int
name|len
init|=
name|alts
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|len
operator|==
literal|1
condition|)
block|{
return|return
name|alts
index|[
literal|0
index|]
operator|.
name|name
return|;
block|}
comment|// now the fun starts.. try to guess the right type
name|String
name|jdbcName
init|=
name|getSqlNameByType
argument_list|(
name|jdbcType
argument_list|)
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
comment|// 1. exact match
for|for
control|(
name|TypeInfo
name|alt
range|:
name|alts
control|)
block|{
if|if
condition|(
name|jdbcName
operator|.
name|equalsIgnoreCase
argument_list|(
name|alt
operator|.
name|name
argument_list|)
condition|)
block|{
return|return
name|alt
operator|.
name|name
return|;
block|}
block|}
comment|// 2. filter those with biggest precision
name|long
name|maxPrec
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TypeInfo
name|alt
range|:
name|alts
control|)
block|{
if|if
condition|(
name|maxPrec
operator|<
name|alt
operator|.
name|precision
condition|)
block|{
name|maxPrec
operator|=
name|alt
operator|.
name|precision
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TypeInfo
name|alt
range|:
name|alts
control|)
block|{
if|if
condition|(
name|maxPrec
operator|==
name|alt
operator|.
name|precision
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|alt
argument_list|)
expr_stmt|;
block|}
block|}
comment|// work with smaller list now.....
name|int
name|slen
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|slen
operator|==
literal|1
condition|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
return|;
block|}
comment|// start/end match
for|for
control|(
name|TypeInfo
name|aList
range|:
name|list
control|)
block|{
name|String
name|uppercase
init|=
name|aList
operator|.
name|name
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|uppercase
operator|.
name|startsWith
argument_list|(
name|jdbcName
argument_list|)
operator|||
name|uppercase
operator|.
name|endsWith
argument_list|(
name|jdbcName
argument_list|)
condition|)
block|{
return|return
name|aList
operator|.
name|name
return|;
block|}
block|}
comment|// in the middle match
for|for
control|(
name|TypeInfo
name|aList
range|:
name|list
control|)
block|{
name|String
name|uppercase
init|=
name|aList
operator|.
name|name
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|uppercase
operator|.
name|contains
argument_list|(
name|jdbcName
argument_list|)
condition|)
block|{
return|return
name|aList
operator|.
name|name
return|;
block|}
block|}
comment|// out of ideas... return the first one
return|return
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
return|;
block|}
comment|/** 	 * Returns a JDBC int type for SQL typem name. 	 */
specifier|public
specifier|static
name|int
name|getSqlTypeByName
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
name|Integer
name|tmp
init|=
name|SQL_STRING_TYPE
operator|.
name|get
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
return|return
name|tmp
operator|==
literal|null
condition|?
name|NOT_DEFINED
else|:
name|tmp
return|;
block|}
comment|/** 	 * Returns a String representation of the SQL type from its JDBC code. 	 */
specifier|public
specifier|static
name|String
name|getSqlNameByType
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
name|SQL_ENUM_TYPE
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/** 	 * Returns default java.sql.Types type by the Java type name. 	 *  	 * @param className 	 *            Fully qualified Java Class name. 	 * @return The SQL type or NOT_DEFINED if no type found. 	 */
specifier|public
specifier|static
name|int
name|getSqlTypeByJava
parameter_list|(
name|String
name|className
parameter_list|)
block|{
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
return|return
name|NOT_DEFINED
return|;
block|}
name|Integer
name|type
init|=
name|JAVA_SQL_ENUM
operator|.
name|get
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|type
return|;
block|}
comment|// try to load a Java class - some nonstandard mappings may work
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
decl_stmt|;
try|try
block|{
name|aClass
operator|=
name|Util
operator|.
name|getJavaClass
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
return|return
name|NOT_DEFINED
return|;
block|}
return|return
name|getSqlTypeByJava
argument_list|(
name|aClass
argument_list|)
return|;
block|}
comment|/** 	 * Guesses a default JDBC type for the Java class. 	 *  	 * @since 1.1 	 */
specifier|public
specifier|static
name|int
name|getSqlTypeByJava
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|javaClass
parameter_list|)
block|{
if|if
condition|(
name|javaClass
operator|==
literal|null
condition|)
block|{
return|return
name|NOT_DEFINED
return|;
block|}
comment|// check standard mapping of class and superclasses
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
init|=
name|javaClass
decl_stmt|;
while|while
condition|(
name|aClass
operator|!=
literal|null
condition|)
block|{
name|String
name|name
decl_stmt|;
if|if
condition|(
name|aClass
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|name
operator|=
name|aClass
operator|.
name|getComponentType
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"[]"
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|aClass
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|Number
name|type
init|=
name|JAVA_SQL_ENUM
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|type
operator|.
name|intValue
argument_list|()
return|;
block|}
name|aClass
operator|=
name|aClass
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
comment|// check non-standard JDBC types that are still supported by JPA
if|if
condition|(
name|javaClass
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|elementType
init|=
name|javaClass
operator|.
name|getComponentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|elementType
argument_list|)
operator|||
name|Character
operator|.
name|TYPE
operator|.
name|isAssignableFrom
argument_list|(
name|elementType
argument_list|)
condition|)
block|{
return|return
name|VARCHAR
return|;
block|}
if|else if
condition|(
name|Byte
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|elementType
argument_list|)
operator|||
name|Byte
operator|.
name|TYPE
operator|.
name|isAssignableFrom
argument_list|(
name|elementType
argument_list|)
condition|)
block|{
return|return
name|VARBINARY
return|;
block|}
block|}
if|if
condition|(
name|Calendar
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|javaClass
argument_list|)
condition|)
block|{
return|return
name|TIMESTAMP
return|;
block|}
if|if
condition|(
name|BigInteger
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|javaClass
argument_list|)
condition|)
block|{
return|return
name|BIGINT
return|;
block|}
comment|// serializable check should be the last one when all other mapping
comment|// attempts
comment|// failed
if|if
condition|(
name|Serializable
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|javaClass
argument_list|)
condition|)
block|{
return|return
name|VARBINARY
return|;
block|}
return|return
name|NOT_DEFINED
return|;
block|}
comment|/** 	 * Get the corresponding Java type by its java.sql.Types counterpart. Note 	 * that this method should be used as a last resort, with explicit mapping 	 * provided by user used as a first choice, as it can only guess how to map 	 * certain types, such as NUMERIC, etc. 	 *  	 * @return Fully qualified Java type name or null if not found. 	 */
specifier|public
specifier|static
name|String
name|getJavaBySqlType
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
name|SQL_ENUM_JAVA
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getJavaBySqlType
parameter_list|(
name|DbAttribute
name|attribute
parameter_list|)
block|{
return|return
name|SQL_ENUM_JAVA
operator|.
name|get
argument_list|(
name|attribute
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|TypeInfo
argument_list|>
argument_list|>
name|databaseTypes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|TypesMapping
parameter_list|(
name|DatabaseMetaData
name|metaData
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// map database types to standard JDBC types
try|try
init|(
name|ResultSet
name|rs
init|=
name|metaData
operator|.
name|getTypeInfo
argument_list|()
init|)
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|TypeInfo
name|info
init|=
operator|new
name|TypeInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|name
operator|=
name|rs
operator|.
name|getString
argument_list|(
literal|"TYPE_NAME"
argument_list|)
expr_stmt|;
name|info
operator|.
name|jdbcType
operator|=
name|rs
operator|.
name|getInt
argument_list|(
literal|"DATA_TYPE"
argument_list|)
expr_stmt|;
name|info
operator|.
name|precision
operator|=
name|rs
operator|.
name|getLong
argument_list|(
literal|"PRECISION"
argument_list|)
expr_stmt|;
name|Integer
name|key
init|=
name|info
operator|.
name|jdbcType
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|infos
init|=
name|databaseTypes
operator|.
name|computeIfAbsent
argument_list|(
name|key
argument_list|,
name|k
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|infos
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
comment|// do some tricks to substitute for missing datatypes
comment|// 1. swap TIMESTAMP - DATE
name|swapTypes
argument_list|(
name|TIMESTAMP
argument_list|,
name|DATE
argument_list|)
expr_stmt|;
comment|// 2. Swap CLOB - LONGVARCHAR
name|swapTypes
argument_list|(
name|CLOB
argument_list|,
name|LONGVARCHAR
argument_list|)
expr_stmt|;
comment|// 3. Swap BLOB - LONGVARBINARY
name|swapTypes
argument_list|(
name|BLOB
argument_list|,
name|LONGVARBINARY
argument_list|)
expr_stmt|;
comment|// 4. Swap NCLOB - LONGNVARCHAR
name|swapTypes
argument_list|(
name|NCLOB
argument_list|,
name|LONGNVARCHAR
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|swapTypes
parameter_list|(
name|int
name|type1
parameter_list|,
name|int
name|type2
parameter_list|)
block|{
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|type1Info
init|=
name|databaseTypes
operator|.
name|get
argument_list|(
name|type1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|type2Info
init|=
name|databaseTypes
operator|.
name|get
argument_list|(
name|type2
argument_list|)
decl_stmt|;
if|if
condition|(
name|type1Info
operator|!=
literal|null
operator|&&
name|type2Info
operator|==
literal|null
condition|)
block|{
name|databaseTypes
operator|.
name|put
argument_list|(
name|type2
argument_list|,
name|type1Info
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type2Info
operator|!=
literal|null
operator|&&
name|type1Info
operator|==
literal|null
condition|)
block|{
name|databaseTypes
operator|.
name|put
argument_list|(
name|type1
argument_list|,
name|type2Info
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Stores (incomplete) information about database data type */
specifier|static
class|class
name|TypeInfo
block|{
name|String
name|name
decl_stmt|;
name|int
name|jdbcType
decl_stmt|;
name|long
name|precision
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[   TypeInfo: "
operator|+
name|name
operator|+
literal|"\n    JDBC Type: "
operator|+
name|TypesMapping
operator|.
name|getSqlNameByType
argument_list|(
name|jdbcType
argument_list|)
operator|+
literal|"\n    Precision: "
operator|+
name|precision
operator|+
literal|"\n]"
return|;
block|}
block|}
block|}
end_class

end_unit

