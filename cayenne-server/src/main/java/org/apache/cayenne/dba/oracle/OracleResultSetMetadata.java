begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|oracle
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_class
class|class
name|OracleResultSetMetadata
implements|implements
name|ResultSetMetaData
block|{
specifier|private
name|ResultSetMetaData
name|delegate
decl_stmt|;
name|OracleResultSetMetadata
parameter_list|(
name|ResultSetMetaData
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCatalogName
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getCatalogName
argument_list|(
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getColumnClassName
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|className
init|=
name|delegate
operator|.
name|getColumnClassName
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|BigDecimal
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
operator|&&
name|getColumnType
argument_list|(
name|column
argument_list|)
operator|==
name|Types
operator|.
name|INTEGER
condition|)
block|{
name|className
operator|=
name|Integer
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|className
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColumnCount
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getColumnCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColumnDisplaySize
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getColumnDisplaySize
argument_list|(
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getColumnLabel
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getColumnLabel
argument_list|(
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getColumnName
argument_list|(
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColumnType
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
name|int
name|type
init|=
name|delegate
operator|.
name|getColumnType
argument_list|(
name|column
argument_list|)
decl_stmt|;
comment|// this only detects INTEGER but not BIGINT...
if|if
condition|(
name|type
operator|==
name|Types
operator|.
name|NUMERIC
condition|)
block|{
name|int
name|precision
init|=
name|delegate
operator|.
name|getPrecision
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|precision
operator|==
literal|10
operator|||
name|precision
operator|==
literal|38
operator|)
operator|&&
name|delegate
operator|.
name|getScale
argument_list|(
name|column
argument_list|)
operator|==
literal|0
condition|)
block|{
name|type
operator|=
name|Types
operator|.
name|INTEGER
expr_stmt|;
block|}
block|}
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getColumnTypeName
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getColumnTypeName
argument_list|(
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPrecision
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getPrecision
argument_list|(
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getScale
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getScale
argument_list|(
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSchemaName
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getSchemaName
argument_list|(
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTableName
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|getTableName
argument_list|(
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAutoIncrement
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|isAutoIncrement
argument_list|(
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCaseSensitive
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|isCaseSensitive
argument_list|(
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCurrency
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|isCurrency
argument_list|(
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDefinitelyWritable
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|isDefinitelyWritable
argument_list|(
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|isNullable
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|isNullable
argument_list|(
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReadOnly
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|isReadOnly
argument_list|(
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSearchable
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|isSearchable
argument_list|(
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSigned
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|isSigned
argument_list|(
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWritable
parameter_list|(
name|int
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|delegate
operator|.
name|isWritable
argument_list|(
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWrapperFor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

