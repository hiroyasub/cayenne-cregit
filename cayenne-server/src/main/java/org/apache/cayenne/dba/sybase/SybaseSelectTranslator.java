begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|sybase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
operator|.
name|DefaultSelectTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_class
specifier|public
class|class
name|SybaseSelectTranslator
extends|extends
name|DefaultSelectTranslator
block|{
comment|/** 	 * @since 4.0 	 */
specifier|public
name|SybaseSelectTranslator
parameter_list|(
name|Query
name|query
parameter_list|,
name|DbAdapter
name|adapter
parameter_list|,
name|EntityResolver
name|entityResolver
parameter_list|)
block|{
name|super
argument_list|(
name|query
argument_list|,
name|adapter
argument_list|,
name|entityResolver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|appendLimitAndOffsetClauses
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|)
block|{
name|int
name|limit
init|=
name|queryMetadata
operator|.
name|getFetchLimit
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|queryMetadata
operator|.
name|getFetchOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|limit
operator|>
literal|0
condition|)
block|{
name|String
name|sql
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// If contains distinct insert top limit after
if|if
condition|(
name|sql
operator|.
name|startsWith
argument_list|(
literal|"SELECT DISTINCT "
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|replace
argument_list|(
literal|0
argument_list|,
literal|15
argument_list|,
literal|"SELECT DISTINCT TOP "
operator|+
operator|(
name|offset
operator|+
name|limit
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|replace
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|,
literal|"SELECT TOP "
operator|+
operator|(
name|offset
operator|+
name|limit
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

