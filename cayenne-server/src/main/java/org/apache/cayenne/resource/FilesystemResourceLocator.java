begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * A {@link ResourceLocator} that can locate resources in the filesystem. Instances of  * {@link FilesystemResourceLocator} are explicitly created by the user and then bound to  * a DI registry. E.g.:  *   *<pre>  * class MyModule implements Module {  *   *     public void configure(Binder binder) {  *        File dir1 = ...  *        File dir2 = ...  *        binder.bind(ResourceLocator.class).  *           toInstance(new FilesystemResourceLocator(dir1, dir2);  *     }  *</pre>  *   * @since 3.1  * @deprecated since 4.1. This can be implemented as a custom strategy outside Cayenne. There's no need for this object  * to be in Cayenne.  */
end_comment

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|FilesystemResourceLocator
implements|implements
name|ResourceLocator
block|{
specifier|protected
name|File
index|[]
name|roots
decl_stmt|;
comment|/**      * Creates a new {@link FilesystemResourceLocator}, using an array of base locations      * ("roots"). If a location is a file, its parent directory is used for resolving. If      * location is a directory, it is used as is. If no locations are specified, current      * application directory is used as a single base.      */
specifier|public
name|FilesystemResourceLocator
parameter_list|(
name|File
modifier|...
name|roots
parameter_list|)
block|{
name|init
argument_list|(
name|roots
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new {@link FilesystemResourceLocator}, using a collection of base      * locations. If a location is a file, its parent directory is used for resolving. If      * location is a directory, it is used as is. If no locations are specified, current      * application directory is used as a single base.      */
specifier|public
name|FilesystemResourceLocator
parameter_list|(
name|Collection
argument_list|<
name|File
argument_list|>
name|roots
parameter_list|)
block|{
if|if
condition|(
name|roots
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null roots"
argument_list|)
throw|;
block|}
name|init
argument_list|(
name|roots
operator|.
name|toArray
argument_list|(
operator|new
name|File
index|[
name|roots
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|File
index|[]
name|roots
parameter_list|)
block|{
if|if
condition|(
name|roots
operator|==
literal|null
operator|||
name|roots
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|roots
operator|=
operator|new
name|File
index|[]
block|{
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|)
block|}
expr_stmt|;
block|}
name|this
operator|.
name|roots
operator|=
operator|new
name|File
index|[
name|roots
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|roots
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|root
init|=
name|roots
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
condition|?
name|roots
index|[
name|i
index|]
else|:
name|roots
index|[
name|i
index|]
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Invalid root: %s"
argument_list|,
name|roots
index|[
name|i
index|]
argument_list|)
throw|;
block|}
name|this
operator|.
name|roots
index|[
name|i
index|]
operator|=
name|root
expr_stmt|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|Resource
argument_list|>
name|findResources
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Collection
argument_list|<
name|Resource
argument_list|>
name|resources
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|root
range|:
name|roots
control|)
block|{
name|File
name|resourceFile
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceFile
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|resources
operator|.
name|add
argument_list|(
operator|new
name|URLResource
argument_list|(
name|resourceFile
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't convert file to URL: %s"
argument_list|,
name|e
argument_list|,
name|resourceFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|resources
return|;
block|}
block|}
end_class

end_unit

