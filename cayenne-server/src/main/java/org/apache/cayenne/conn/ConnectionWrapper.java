begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|CallableStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Clob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|NClob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLClientInfoException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLWarning
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLXML
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Savepoint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Struct
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_comment
comment|/**  * ConnectionWrapper is a<code>java.sql.Connection</code> implementation that wraps  * another Connection, delegating method calls to this connection. It works in conjunction  * with PooledConnectionImpl, to generate pool events, provide limited automated  * reconnection functionality, etc.  *   */
end_comment

begin_class
specifier|public
class|class
name|ConnectionWrapper
implements|implements
name|Connection
block|{
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|PooledConnectionImpl
name|pooledConnection
decl_stmt|;
specifier|private
name|long
name|lastReconnected
decl_stmt|;
specifier|private
name|int
name|reconnectCount
decl_stmt|;
comment|/**      * Fixes Sybase problems with autocommit. Used idea from Jonas      * org.objectweb.jonas.jdbc_xa.ConnectionImpl (http://www.objectweb.org/jonas/).      *<p>      * If problem is not the one that can be fixed by this patch, original exception is      * rethrown. If exception occurs when fixing the problem, new exception is thrown.      *</p>      */
specifier|static
name|void
name|sybaseAutoCommitPatch
parameter_list|(
name|Connection
name|c
parameter_list|,
name|SQLException
name|e
parameter_list|,
name|boolean
name|autoCommit
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|s
init|=
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
literal|"set chained command not allowed"
argument_list|)
condition|)
block|{
name|c
operator|.
name|commit
argument_list|()
expr_stmt|;
name|c
operator|.
name|setAutoCommit
argument_list|(
name|autoCommit
argument_list|)
expr_stmt|;
comment|// Shouldn't fail now.
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * Creates new ConnectionWrapper      */
specifier|public
name|ConnectionWrapper
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|PooledConnectionImpl
name|pooledConnection
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|pooledConnection
operator|=
name|pooledConnection
expr_stmt|;
block|}
specifier|protected
name|void
name|reconnect
parameter_list|(
name|SQLException
name|exception
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// if there was a relatively recent reconnect, just rethrow an error
comment|// and retire itself. THIS WILL PREVENT RECONNECT LOOPS
if|if
condition|(
name|reconnectCount
operator|>
literal|0
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastReconnected
operator|<
literal|60000
condition|)
block|{
name|retire
argument_list|(
name|exception
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
name|pooledConnection
operator|.
name|reconnect
argument_list|()
expr_stmt|;
comment|// Pooled connection will wrap returned connection into
comment|// another ConnectionWrapper.... lets get the real connection
comment|// underneath...
name|Connection
name|connection
init|=
name|pooledConnection
operator|.
name|getConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|connection
operator|instanceof
name|ConnectionWrapper
condition|)
block|{
name|this
operator|.
name|connection
operator|=
operator|(
operator|(
name|ConnectionWrapper
operator|)
name|connection
operator|)
operator|.
name|connection
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
name|lastReconnected
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|reconnectCount
operator|++
expr_stmt|;
block|}
specifier|protected
name|void
name|retire
parameter_list|(
name|SQLException
name|exception
parameter_list|)
block|{
comment|// notify all the listeners....
name|pooledConnection
operator|.
name|connectionErrorNotification
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearWarnings
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
name|connection
operator|.
name|clearWarnings
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
name|retire
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
throw|throw
name|sqlEx
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
literal|null
operator|!=
name|pooledConnection
condition|)
block|{
name|pooledConnection
operator|.
name|returnConnectionToThePool
argument_list|()
expr_stmt|;
block|}
name|connection
operator|=
literal|null
expr_stmt|;
name|pooledConnection
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commit
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
name|retire
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
throw|throw
name|sqlEx
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Statement
name|createStatement
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createStatement
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
comment|// reconnect has code to prevent loops
name|reconnect
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
return|return
name|createStatement
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Statement
name|createStatement
parameter_list|(
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createStatement
argument_list|(
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
comment|// reconnect has code to prevent loops
name|reconnect
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
return|return
name|createStatement
argument_list|(
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getAutoCommit
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|getAutoCommit
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
name|retire
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
throw|throw
name|sqlEx
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCatalog
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|getCatalog
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
name|retire
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
throw|throw
name|sqlEx
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DatabaseMetaData
name|getMetaData
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|getMetaData
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
name|retire
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
throw|throw
name|sqlEx
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTransactionIsolation
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|getTransactionIsolation
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
name|retire
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
throw|throw
name|sqlEx
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SQLWarning
name|getWarnings
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|getWarnings
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
name|retire
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
throw|throw
name|sqlEx
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isClosed
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|connection
operator|.
name|isClosed
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
name|retire
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
throw|throw
name|sqlEx
throw|;
block|}
block|}
else|else
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|isReadOnly
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
name|retire
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
throw|throw
name|sqlEx
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|nativeSQL
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|nativeSQL
argument_list|(
name|sql
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
name|retire
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
throw|throw
name|sqlEx
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CallableStatement
name|prepareCall
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|prepareCall
argument_list|(
name|sql
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
comment|// reconnect has code to prevent loops
name|reconnect
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
return|return
name|prepareCall
argument_list|(
name|sql
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CallableStatement
name|prepareCall
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|prepareCall
argument_list|(
name|sql
argument_list|,
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
comment|// reconnect has code to prevent loops
name|reconnect
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
return|return
name|prepareCall
argument_list|(
name|sql
argument_list|,
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
comment|// reconnect has code to prevent loops
name|reconnect
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
return|return
name|prepareStatement
argument_list|(
name|sql
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|,
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
comment|// reconnect has code to prevent loops
name|reconnect
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
return|return
name|prepareStatement
argument_list|(
name|sql
argument_list|,
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollback
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
name|connection
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
name|retire
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
throw|throw
name|sqlEx
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAutoCommit
parameter_list|(
name|boolean
name|autoCommit
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|connection
operator|.
name|setAutoCommit
argument_list|(
name|autoCommit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
try|try
block|{
comment|// apply Sybase patch
name|sybaseAutoCommitPatch
argument_list|(
name|connection
argument_list|,
name|sqlEx
argument_list|,
name|autoCommit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|patchEx
parameter_list|)
block|{
name|retire
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
throw|throw
name|sqlEx
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCatalog
parameter_list|(
name|String
name|catalog
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|connection
operator|.
name|setCatalog
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
name|retire
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
throw|throw
name|sqlEx
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setReadOnly
parameter_list|(
name|boolean
name|readOnly
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|connection
operator|.
name|setReadOnly
argument_list|(
name|readOnly
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
name|retire
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
throw|throw
name|sqlEx
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTransactionIsolation
parameter_list|(
name|int
name|level
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|connection
operator|.
name|setTransactionIsolation
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
name|retire
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
throw|throw
name|sqlEx
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getTypeMap
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|getTypeMap
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
name|retire
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
throw|throw
name|sqlEx
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTypeMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|map
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
name|connection
operator|.
name|setTypeMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
name|retire
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
throw|throw
name|sqlEx
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setHoldability
parameter_list|(
name|int
name|holdability
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|UnsupportedOperationException
argument_list|(
literal|"Method setHoldability() not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getHoldability
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|UnsupportedOperationException
argument_list|(
literal|"Method getHoldability() not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Savepoint
name|setSavepoint
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|UnsupportedOperationException
argument_list|(
literal|"Method setSavepoint() not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Savepoint
name|setSavepoint
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|UnsupportedOperationException
argument_list|(
literal|"Method setSavepoint() not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollback
parameter_list|(
name|Savepoint
name|savepoint
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|UnsupportedOperationException
argument_list|(
literal|"Method rollback() not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|releaseSavepoint
parameter_list|(
name|Savepoint
name|savepoint
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|UnsupportedOperationException
argument_list|(
literal|"Method releaseSavepoint() not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Statement
name|createStatement
parameter_list|(
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|,
name|int
name|resultSetHoldability
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|UnsupportedOperationException
argument_list|(
literal|"Method createStatement() not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|,
name|int
name|resultSetHoldability
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|UnsupportedOperationException
argument_list|(
literal|"Method prepareStatement() not yet implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|CallableStatement
name|prepareCall
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|,
name|int
name|resultSetHoldability
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|prepareCall
argument_list|(
name|sql
argument_list|,
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|,
name|resultSetHoldability
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
comment|// reconnect has code to prevent loops
name|reconnect
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
return|return
name|prepareCall
argument_list|(
name|sql
argument_list|,
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|,
name|resultSetHoldability
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|autoGeneratedKeys
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|,
name|autoGeneratedKeys
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
comment|// reconnect has code to prevent loops
name|reconnect
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
return|return
name|prepareStatement
argument_list|(
name|sql
argument_list|,
name|autoGeneratedKeys
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
index|[]
name|columnIndexes
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|,
name|columnIndexes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
comment|// reconnect has code to prevent loops
name|reconnect
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
return|return
name|prepareStatement
argument_list|(
name|sql
argument_list|,
name|columnIndexes
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|,
name|columnNames
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
comment|// reconnect has code to prevent loops
name|reconnect
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
return|return
name|prepareStatement
argument_list|(
name|sql
argument_list|,
name|columnNames
argument_list|)
return|;
block|}
block|}
comment|/**      * @since 3.0      */
annotation|@
name|Override
specifier|public
name|Array
name|createArrayOf
parameter_list|(
name|String
name|typeName
parameter_list|,
name|Object
index|[]
name|elements
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createArrayOf
argument_list|(
name|typeName
argument_list|,
name|elements
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
comment|// reconnect has code to prevent loops
name|reconnect
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
return|return
name|createArrayOf
argument_list|(
name|typeName
argument_list|,
name|elements
argument_list|)
return|;
block|}
block|}
comment|/**      * @since 3.0      */
annotation|@
name|Override
specifier|public
name|Blob
name|createBlob
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createBlob
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
comment|// reconnect has code to prevent loops
name|reconnect
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
return|return
name|createBlob
argument_list|()
return|;
block|}
block|}
comment|/**      * @since 3.0      */
annotation|@
name|Override
specifier|public
name|Clob
name|createClob
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createClob
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
comment|// reconnect has code to prevent loops
name|reconnect
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
return|return
name|createClob
argument_list|()
return|;
block|}
block|}
comment|/**      * @since 3.0      */
annotation|@
name|Override
specifier|public
name|Struct
name|createStruct
parameter_list|(
name|String
name|typeName
parameter_list|,
name|Object
index|[]
name|attributes
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createStruct
argument_list|(
name|typeName
argument_list|,
name|attributes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
comment|// reconnect has code to prevent loops
name|reconnect
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
return|return
name|createStruct
argument_list|(
name|typeName
argument_list|,
name|attributes
argument_list|)
return|;
block|}
block|}
comment|/**      * @since 3.0      */
annotation|@
name|Override
specifier|public
name|Properties
name|getClientInfo
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|getClientInfo
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
comment|// reconnect has code to prevent loops
name|reconnect
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
return|return
name|getClientInfo
argument_list|()
return|;
block|}
block|}
comment|/**      * @since 3.0      */
annotation|@
name|Override
specifier|public
name|String
name|getClientInfo
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|getClientInfo
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
comment|// reconnect has code to prevent loops
name|reconnect
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
return|return
name|getClientInfo
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
comment|/**      * @since 3.0      */
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|int
name|timeout
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|isValid
argument_list|(
name|timeout
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
comment|// reconnect has code to prevent loops
name|reconnect
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
return|return
name|isValid
argument_list|(
name|timeout
argument_list|)
return|;
block|}
block|}
comment|/**      * @since 3.0      */
annotation|@
name|Override
specifier|public
name|boolean
name|isWrapperFor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO: we can implement that now.
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**      * @since 3.0      */
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
comment|// TODO: we can implement that now.
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**      * @since 3.0      */
annotation|@
name|Override
specifier|public
name|NClob
name|createNClob
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createNClob
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
comment|// reconnect has code to prevent loops
name|reconnect
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
return|return
name|createNClob
argument_list|()
return|;
block|}
block|}
comment|/**      * @since 3.0      */
annotation|@
name|Override
specifier|public
name|SQLXML
name|createSQLXML
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
return|return
name|connection
operator|.
name|createSQLXML
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|sqlEx
parameter_list|)
block|{
comment|// reconnect has code to prevent loops
name|reconnect
argument_list|(
name|sqlEx
argument_list|)
expr_stmt|;
return|return
name|createSQLXML
argument_list|()
return|;
block|}
block|}
comment|/**      * @since 3.0      */
comment|// JDBC 4 compatibility under Java 1.5
annotation|@
name|Override
specifier|public
name|void
name|setClientInfo
parameter_list|(
name|Properties
name|properties
parameter_list|)
throws|throws
name|SQLClientInfoException
block|{
comment|// TODO: we can implement that now.
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**      * @since 3.0      */
comment|// JDBC 4 compatibility under Java 1.5
annotation|@
name|Override
specifier|public
name|void
name|setClientInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|SQLClientInfoException
block|{
comment|// TODO: we can implement that now.
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**      * @since 3.1      *      * JDBC 4.1 compatibility under Java 1.5      */
specifier|public
name|void
name|setSchema
parameter_list|(
name|String
name|schema
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**      * @since 3.1      *      * JDBC 4.1 compatibility under Java 1.5      */
specifier|public
name|String
name|getSchema
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**      * @since 3.1      *      * JDBC 4.1 compatibility under Java 1.5      */
specifier|public
name|void
name|abort
parameter_list|(
name|Executor
name|executor
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**      * @since 3.1      *      * JDBC 4.1 compatibility under Java 1.5      */
specifier|public
name|void
name|setNetworkTimeout
parameter_list|(
name|Executor
name|executor
parameter_list|,
name|int
name|milliseconds
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**      * @since 3.1      *      * JDBC 4.1 compatibility under Java 1.5      */
specifier|public
name|int
name|getNetworkTimeout
parameter_list|()
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

