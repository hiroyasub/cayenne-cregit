begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLFeatureNotSupportedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|ConnectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|ConnectionEventListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|ConnectionPoolDataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|PooledConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|ScopeEventListener
import|;
end_import

begin_comment
comment|/**  * A {@link DataSource} with a pool of connections, that can automatically grow  * to the max size as more connections are requested.  *   * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|PoolingDataSource
implements|implements
name|ScopeEventListener
implements|,
name|DataSource
implements|,
name|ConnectionEventListener
block|{
comment|/** 	 * Defines a maximum time in milliseconds that a connection request could 	 * wait in the connection queue. After this period expires, an exception 	 * will be thrown in the calling method. 	 */
specifier|public
specifier|static
specifier|final
name|int
name|MAX_QUEUE_WAIT_DEFAULT
init|=
literal|20000
decl_stmt|;
comment|/** 	 * An exception indicating that a connection request waiting in the queue 	 * timed out and was unable to obtain a connection. 	 */
specifier|public
specifier|static
class|class
name|ConnectionUnavailableException
extends|extends
name|SQLException
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1063973806941023165L
decl_stmt|;
specifier|public
name|ConnectionUnavailableException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|ConnectionPoolDataSource
name|pooledConnectionFactory
decl_stmt|;
specifier|private
name|int
name|minConnections
decl_stmt|;
specifier|private
name|int
name|maxConnections
decl_stmt|;
specifier|private
name|long
name|maxQueueWaitTime
decl_stmt|;
specifier|private
name|String
name|validationQuery
decl_stmt|;
specifier|private
name|List
argument_list|<
name|PooledConnection
argument_list|>
name|unusedPool
decl_stmt|;
specifier|private
name|List
argument_list|<
name|PooledConnection
argument_list|>
name|usedPool
decl_stmt|;
specifier|private
name|boolean
name|shuttingDown
decl_stmt|;
comment|/** 	 * Creates new PoolManager with the specified policy for connection pooling 	 * and a ConnectionPoolDataSource object. 	 *  	 * @param poolDataSource 	 *            data source for pooled connections 	 * @param minCons 	 *            Non-negative integer that specifies a minimum number of open 	 *            connections to keep in the pool at all times 	 * @param maxCons 	 *            Non-negative integer that specifies maximum number of 	 *            simultaneously open connections 	 * @throws SQLException 	 *             if pool manager can not be created. 	 * @since 4.0 	 */
specifier|public
name|PoolingDataSource
parameter_list|(
name|ConnectionPoolDataSource
name|poolDataSource
parameter_list|,
name|PoolingDataSourceParameters
name|parameters
parameter_list|)
throws|throws
name|SQLException
block|{
name|this
operator|.
name|pooledConnectionFactory
operator|=
name|poolDataSource
expr_stmt|;
comment|// clone parameters to keep DataSource immutable
name|this
operator|.
name|minConnections
operator|=
name|parameters
operator|.
name|getMinConnections
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxConnections
operator|=
name|parameters
operator|.
name|getMaxConnections
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxQueueWaitTime
operator|=
name|parameters
operator|.
name|getMaxQueueWaitTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|validationQuery
operator|=
name|parameters
operator|.
name|getValidationQuery
argument_list|()
expr_stmt|;
comment|// init pool... use linked lists to use the queue in the FIFO manner
name|this
operator|.
name|usedPool
operator|=
operator|new
name|LinkedList
argument_list|<
name|PooledConnection
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|unusedPool
operator|=
operator|new
name|LinkedList
argument_list|<
name|PooledConnection
argument_list|>
argument_list|()
expr_stmt|;
name|growPool
argument_list|(
name|minConnections
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Creates and returns new PooledConnection object, adding itself as a 	 * listener for connection events. 	 */
specifier|protected
name|PooledConnection
name|newPooledConnection
parameter_list|()
throws|throws
name|SQLException
block|{
name|PooledConnection
name|connection
init|=
name|pooledConnectionFactory
operator|.
name|getPooledConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|addConnectionEventListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|connection
return|;
block|}
comment|/** 	 * Shuts down the pool, closing all open connections. This is an 	 * implementation of {@link ScopeEventListener}. 	 *  	 * @since 3.1 	 */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|beforeScopeEnd
parameter_list|()
block|{
try|try
block|{
comment|// using boolean variable instead of locking PoolManager instance
comment|// due to possible deadlock during shutdown when one of connections
comment|// locks its event listeners list trying to invoke locked
comment|// PoolManager's listener methods
name|shuttingDown
operator|=
literal|true
expr_stmt|;
name|ListIterator
argument_list|<
name|PooledConnection
argument_list|>
name|unusedIterator
init|=
name|unusedPool
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|unusedIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PooledConnection
name|con
init|=
name|unusedIterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// close connection
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// remove connection from the list
name|unusedIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|// clean used connections
name|ListIterator
argument_list|<
name|PooledConnection
argument_list|>
name|usedIterator
init|=
name|usedPool
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|usedIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PooledConnection
name|con
init|=
name|usedIterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// stop listening for connection events
name|con
operator|.
name|removeConnectionEventListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// close connection
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// remove connection from the list
name|usedIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error while shutting down"
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * @return true if at least one more connection can be added to the pool. 	 */
specifier|protected
specifier|synchronized
name|boolean
name|canGrowPool
parameter_list|()
block|{
return|return
name|getPoolSize
argument_list|()
operator|<
name|maxConnections
return|;
block|}
comment|/** 	 * Increases connection pool by the specified number of connections. 	 *  	 * @return the actual number of created connections. 	 * @throws SQLException 	 *             if an error happens when creating a new connection. 	 */
specifier|protected
specifier|synchronized
name|int
name|growPool
parameter_list|(
name|int
name|addConnections
parameter_list|)
throws|throws
name|SQLException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|startPoolSize
init|=
name|getPoolSize
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|addConnections
operator|&&
name|startPoolSize
operator|+
name|i
operator|<
name|maxConnections
condition|;
name|i
operator|++
control|)
block|{
name|PooledConnection
name|newConnection
init|=
name|newPooledConnection
argument_list|()
decl_stmt|;
name|unusedPool
operator|.
name|add
argument_list|(
name|newConnection
argument_list|)
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|shrinkPool
parameter_list|(
name|int
name|closeConnections
parameter_list|)
block|{
name|int
name|idleSize
init|=
name|unusedPool
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|closeConnections
operator|&&
name|i
operator|<
name|idleSize
condition|;
name|i
operator|++
control|)
block|{
name|PooledConnection
name|con
init|=
name|unusedPool
operator|.
name|remove
argument_list|(
name|i
argument_list|)
decl_stmt|;
try|try
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
specifier|public
name|String
name|getValidationQuery
parameter_list|()
block|{
return|return
name|validationQuery
return|;
block|}
comment|/** 	 * Returns maximum number of connections this pool can keep. This parameter 	 * when configured allows to limit the number of simultaneously open 	 * connections. 	 */
specifier|public
name|int
name|getMaxConnections
parameter_list|()
block|{
return|return
name|maxConnections
return|;
block|}
comment|/** 	 * Returns the absolute minimum number of connections allowed in this pool 	 * at any moment in time. 	 */
specifier|public
name|int
name|getMinConnections
parameter_list|()
block|{
return|return
name|minConnections
return|;
block|}
comment|/** 	 * Returns current number of connections. 	 */
specifier|public
specifier|synchronized
name|int
name|getPoolSize
parameter_list|()
block|{
return|return
name|usedPool
operator|.
name|size
argument_list|()
operator|+
name|unusedPool
operator|.
name|size
argument_list|()
return|;
block|}
comment|/** 	 * Returns the number of connections obtained via this DataSource that are 	 * currently in use by the DataSource clients. 	 */
specifier|public
specifier|synchronized
name|int
name|getCurrentlyInUse
parameter_list|()
block|{
return|return
name|usedPool
operator|.
name|size
argument_list|()
return|;
block|}
comment|/** 	 * Returns the number of connections maintained in the pool that are 	 * currently not used by any clients and are available immediately via 	 *<code>getConnection</code> method. 	 */
specifier|public
specifier|synchronized
name|int
name|getCurrentlyUnused
parameter_list|()
block|{
return|return
name|unusedPool
operator|.
name|size
argument_list|()
return|;
block|}
comment|/** 	 * Returns connection from the pool using internal values of user name and 	 * password. 	 */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|shuttingDown
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Pool manager is shutting down."
argument_list|)
throw|;
block|}
name|PooledConnection
name|pooledConnection
init|=
name|uncheckPooledConnection
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|uncheckAndValidateConnection
argument_list|(
name|pooledConnection
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
try|try
block|{
name|pooledConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ignored
parameter_list|)
block|{
block|}
comment|// do one reconnect attempt...
name|pooledConnection
operator|=
name|uncheckPooledConnection
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|uncheckAndValidateConnection
argument_list|(
name|pooledConnection
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|reconnectEx
parameter_list|)
block|{
try|try
block|{
name|pooledConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ignored
parameter_list|)
block|{
block|}
throw|throw
name|reconnectEx
throw|;
block|}
block|}
block|}
comment|/** 	 * Returns connection from the pool. 	 */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Connection
name|getConnection
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Connections for a specific user are not supported by the pooled DataSource"
argument_list|)
throw|;
block|}
specifier|private
name|Connection
name|uncheckConnection
parameter_list|(
name|PooledConnection
name|pooledConnection
parameter_list|)
throws|throws
name|SQLException
block|{
name|Connection
name|c
init|=
name|pooledConnection
operator|.
name|getConnection
argument_list|()
decl_stmt|;
comment|// only do that on successfully unchecked connection...
name|usedPool
operator|.
name|add
argument_list|(
name|pooledConnection
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
specifier|private
name|Connection
name|uncheckAndValidateConnection
parameter_list|(
name|PooledConnection
name|pooledConnection
parameter_list|)
throws|throws
name|SQLException
block|{
name|Connection
name|c
init|=
name|uncheckConnection
argument_list|(
name|pooledConnection
argument_list|)
decl_stmt|;
if|if
condition|(
name|validationQuery
operator|!=
literal|null
condition|)
block|{
name|Statement
name|statement
init|=
name|c
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|ResultSet
name|rs
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|validationQuery
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Connection validation failed, no result for query: "
operator|+
name|validationQuery
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|c
return|;
block|}
specifier|private
name|PooledConnection
name|uncheckPooledConnection
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// wait for returned connections or the maintenance thread
comment|// to bump the pool size...
if|if
condition|(
name|unusedPool
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// first try to open a new connection
if|if
condition|(
name|canGrowPool
argument_list|()
condition|)
block|{
return|return
name|newPooledConnection
argument_list|()
return|;
block|}
comment|// can't open no more... will have to wait for others to return a
comment|// connection
comment|// note that if we were woken up
comment|// before the full wait period expired, and no connections are
comment|// available yet, go back to sleep. Otherwise we don't give a
comment|// maintenance
comment|// thread a chance to increase pool size
name|long
name|waitTill
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|maxQueueWaitTime
decl_stmt|;
do|do
block|{
try|try
block|{
name|wait
argument_list|(
name|maxQueueWaitTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|iex
parameter_list|)
block|{
comment|// ignoring
block|}
block|}
do|while
condition|(
name|unusedPool
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
operator|(
name|maxQueueWaitTime
operator|==
literal|0
operator|||
name|waitTill
operator|>
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|)
condition|)
do|;
if|if
condition|(
name|unusedPool
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|ConnectionUnavailableException
argument_list|(
literal|"Can't obtain connection. Request timed out. Total used connections: "
operator|+
name|usedPool
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// get first connection... lets cycle them in FIFO manner
return|return
name|unusedPool
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLoginTimeout
parameter_list|()
throws|throws
name|java
operator|.
name|sql
operator|.
name|SQLException
block|{
return|return
name|pooledConnectionFactory
operator|.
name|getLoginTimeout
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLoginTimeout
parameter_list|(
name|int
name|seconds
parameter_list|)
throws|throws
name|java
operator|.
name|sql
operator|.
name|SQLException
block|{
name|pooledConnectionFactory
operator|.
name|setLoginTimeout
argument_list|(
name|seconds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PrintWriter
name|getLogWriter
parameter_list|()
throws|throws
name|java
operator|.
name|sql
operator|.
name|SQLException
block|{
return|return
name|pooledConnectionFactory
operator|.
name|getLogWriter
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLogWriter
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|sql
operator|.
name|SQLException
block|{
name|pooledConnectionFactory
operator|.
name|setLogWriter
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Returns closed connection to the pool. 	 */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|connectionClosed
parameter_list|(
name|ConnectionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|shuttingDown
condition|)
block|{
return|return;
block|}
comment|// return connection to the pool
name|PooledConnection
name|closedConn
init|=
operator|(
name|PooledConnection
operator|)
name|event
operator|.
name|getSource
argument_list|()
decl_stmt|;
comment|// remove this connection from the list of connections
comment|// managed by this pool...
name|int
name|usedInd
init|=
name|usedPool
operator|.
name|indexOf
argument_list|(
name|closedConn
argument_list|)
decl_stmt|;
if|if
condition|(
name|usedInd
operator|>=
literal|0
condition|)
block|{
name|usedPool
operator|.
name|remove
argument_list|(
name|usedInd
argument_list|)
expr_stmt|;
name|unusedPool
operator|.
name|add
argument_list|(
name|closedConn
argument_list|)
expr_stmt|;
comment|// notify threads waiting for connections
name|notifyAll
argument_list|()
expr_stmt|;
block|}
comment|// else ....
comment|// other possibility is that this is a bad connection, so just ignore
comment|// its closing
comment|// event,
comment|// since it was unregistered in "connectionErrorOccurred"
block|}
comment|/** 	 * Removes connection with an error from the pool. This method is called by 	 * PoolManager connections on connection errors to notify PoolManager that 	 * connection is in invalid state. 	 */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|connectionErrorOccurred
parameter_list|(
name|ConnectionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|shuttingDown
condition|)
block|{
return|return;
block|}
comment|// later on we should analyze the error to see if this
comment|// is fatal... right now just kill this PooledConnection
name|PooledConnection
name|errorSrc
init|=
operator|(
name|PooledConnection
operator|)
name|event
operator|.
name|getSource
argument_list|()
decl_stmt|;
comment|// remove this connection from the list of connections
comment|// managed by this pool...
name|int
name|usedInd
init|=
name|usedPool
operator|.
name|indexOf
argument_list|(
name|errorSrc
argument_list|)
decl_stmt|;
if|if
condition|(
name|usedInd
operator|>=
literal|0
condition|)
block|{
name|usedPool
operator|.
name|remove
argument_list|(
name|usedInd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|unusedInd
init|=
name|unusedPool
operator|.
name|indexOf
argument_list|(
name|errorSrc
argument_list|)
decl_stmt|;
if|if
condition|(
name|unusedInd
operator|>=
literal|0
condition|)
block|{
name|unusedPool
operator|.
name|remove
argument_list|(
name|unusedInd
argument_list|)
expr_stmt|;
block|}
block|}
comment|// do not close connection,
comment|// let the code that catches the exception handle it
comment|// ....
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWrapperFor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|PoolingDataSource
operator|.
name|class
operator|.
name|equals
argument_list|(
name|iface
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|PoolingDataSource
operator|.
name|class
operator|.
name|equals
argument_list|(
name|iface
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Not a wrapper for "
operator|+
name|iface
argument_list|)
throw|;
block|}
comment|// JDBC 4.1 compatibility under Java<= 1.6
specifier|public
name|Logger
name|getParentLogger
parameter_list|()
throws|throws
name|SQLFeatureNotSupportedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

