begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Result of procedure call.  *  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|ProcedureResult
parameter_list|<
name|T
parameter_list|>
block|{
specifier|protected
name|List
argument_list|<
name|QueryResult
argument_list|>
name|results
decl_stmt|;
specifier|protected
name|Class
argument_list|<
name|T
argument_list|>
name|resultClass
decl_stmt|;
specifier|public
name|ProcedureResult
parameter_list|(
name|List
argument_list|<
name|QueryResult
argument_list|>
name|results
parameter_list|)
block|{
name|this
operator|.
name|results
operator|=
name|results
expr_stmt|;
block|}
specifier|public
name|ProcedureResult
parameter_list|(
name|List
argument_list|<
name|QueryResult
argument_list|>
name|results
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|resultClass
parameter_list|)
block|{
name|this
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|this
operator|.
name|resultClass
operator|=
name|resultClass
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|QueryResult
argument_list|>
name|getResults
parameter_list|()
block|{
return|return
name|results
return|;
block|}
comment|/**      * Returns first list found in the procedure execution result.      */
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|getSelectResult
parameter_list|()
block|{
for|for
control|(
name|QueryResult
name|result
range|:
name|results
control|)
block|{
if|if
condition|(
name|result
operator|.
name|isSelectResult
argument_list|()
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|T
argument_list|>
operator|)
name|result
operator|.
name|getSelectResult
argument_list|()
return|;
block|}
block|}
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"This result is not a select result."
argument_list|)
throw|;
block|}
comment|/**      * Returns first batch update count found in the procedure execution result.      */
specifier|public
name|int
index|[]
name|getUpdateResult
parameter_list|()
block|{
for|for
control|(
name|QueryResult
name|result
range|:
name|results
control|)
block|{
if|if
condition|(
name|result
operator|.
name|isBatchUpdate
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|getBatchUpdateResult
argument_list|()
return|;
block|}
block|}
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"This result is not an update result."
argument_list|)
throw|;
block|}
comment|/**      * Returns procedure OUT parameter by its name defined in the mapping file.      */
specifier|public
name|Object
name|getParam
parameter_list|(
name|String
name|paramName
parameter_list|)
block|{
return|return
operator|(
operator|(
name|DataRow
operator|)
name|getSelectResult
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
name|paramName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

