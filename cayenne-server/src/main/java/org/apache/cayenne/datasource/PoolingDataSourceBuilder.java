begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|datasource
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_comment
comment|/**  * Turns unpooled DataSource to a connection pool. Normally you won't be  * creating this builder explicitly. Call  * {@link DataSourceBuilder#pool(int, int)} method instead.  *   * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|PoolingDataSourceBuilder
block|{
specifier|private
name|DataSourceBuilder
name|nonPoolingBuilder
decl_stmt|;
specifier|private
name|PoolingDataSourceParameters
name|poolParameters
decl_stmt|;
specifier|public
name|PoolingDataSourceBuilder
parameter_list|(
name|DataSourceBuilder
name|nonPoolingBuilder
parameter_list|)
block|{
name|this
operator|.
name|nonPoolingBuilder
operator|=
name|nonPoolingBuilder
expr_stmt|;
name|this
operator|.
name|poolParameters
operator|=
operator|new
name|PoolingDataSourceParameters
argument_list|()
expr_stmt|;
name|poolParameters
operator|.
name|setMinConnections
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|poolParameters
operator|.
name|setMaxConnections
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|poolParameters
operator|.
name|setMaxQueueWaitTime
argument_list|(
name|PoolingDataSource
operator|.
name|MAX_QUEUE_WAIT_DEFAULT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PoolingDataSourceBuilder
name|minConnections
parameter_list|(
name|int
name|minConnections
parameter_list|)
block|{
name|poolParameters
operator|.
name|setMinConnections
argument_list|(
name|minConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|PoolingDataSourceBuilder
name|maxConnections
parameter_list|(
name|int
name|maxConnections
parameter_list|)
block|{
name|poolParameters
operator|.
name|setMaxConnections
argument_list|(
name|maxConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|PoolingDataSourceBuilder
name|maxQueueWaitTime
parameter_list|(
name|long
name|maxQueueWaitTime
parameter_list|)
block|{
name|poolParameters
operator|.
name|setMaxQueueWaitTime
argument_list|(
name|maxQueueWaitTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|PoolingDataSourceBuilder
name|validationQuery
parameter_list|(
name|String
name|validationQuery
parameter_list|)
block|{
name|poolParameters
operator|.
name|setValidationQuery
argument_list|(
name|validationQuery
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|DataSource
name|build
parameter_list|()
block|{
comment|// sanity checks...
if|if
condition|(
name|poolParameters
operator|.
name|getMaxConnections
argument_list|()
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Maximum number of connections can not be negative ("
operator|+
name|poolParameters
operator|.
name|getMaxConnections
argument_list|()
operator|+
literal|")."
argument_list|)
throw|;
block|}
if|if
condition|(
name|poolParameters
operator|.
name|getMinConnections
argument_list|()
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Minimum number of connections can not be negative ("
operator|+
name|poolParameters
operator|.
name|getMinConnections
argument_list|()
operator|+
literal|")."
argument_list|)
throw|;
block|}
if|if
condition|(
name|poolParameters
operator|.
name|getMinConnections
argument_list|()
operator|>
name|poolParameters
operator|.
name|getMaxConnections
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Minimum number of connections can not be bigger then maximum."
argument_list|)
throw|;
block|}
name|DataSource
name|nonPooling
init|=
name|nonPoolingBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|buildManaged
argument_list|(
name|buildPooling
argument_list|(
name|nonPooling
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|PoolingDataSource
name|buildPooling
parameter_list|(
name|DataSource
name|nonPoolingDataSource
parameter_list|)
block|{
return|return
operator|new
name|PoolingDataSource
argument_list|(
name|nonPoolingDataSource
argument_list|,
name|poolParameters
argument_list|)
return|;
block|}
specifier|private
name|DataSource
name|buildManaged
parameter_list|(
name|PoolingDataSource
name|dataSource
parameter_list|)
block|{
return|return
operator|new
name|ManagedPoolingDataSource
argument_list|(
name|dataSource
argument_list|)
return|;
block|}
block|}
end_class

end_unit

