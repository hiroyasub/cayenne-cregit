begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|datasource
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Driver
import|;
end_import

begin_comment
comment|/**  * A builder class that allows to build a {@link DataSource} with optional  * pooling.  *   * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|DataSourceBuilder
block|{
specifier|private
name|String
name|userName
decl_stmt|;
specifier|private
name|String
name|password
decl_stmt|;
specifier|private
name|String
name|driverClassName
decl_stmt|;
specifier|private
name|Driver
name|driver
decl_stmt|;
specifier|private
name|String
name|url
decl_stmt|;
specifier|public
specifier|static
name|DataSourceBuilder
name|url
parameter_list|(
name|String
name|url
parameter_list|)
block|{
return|return
operator|new
name|DataSourceBuilder
argument_list|(
name|url
argument_list|)
return|;
block|}
specifier|private
name|DataSourceBuilder
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
specifier|public
name|DataSourceBuilder
name|userName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|DataSourceBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|DataSourceBuilder
name|driver
parameter_list|(
name|String
name|driver
parameter_list|)
block|{
comment|// TODO: guess the driver from URL
name|this
operator|.
name|driver
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|driverClassName
operator|=
name|driver
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|DataSourceBuilder
name|driver
parameter_list|(
name|Driver
name|driver
parameter_list|)
block|{
name|this
operator|.
name|driver
operator|=
name|driver
expr_stmt|;
name|this
operator|.
name|driverClassName
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** 	 * Turns produced DataSource into a pooled DataSource. 	 */
specifier|public
name|PoolingDataSourceBuilder
name|pool
parameter_list|(
name|int
name|minConnection
parameter_list|,
name|int
name|maxConnections
parameter_list|)
block|{
return|return
operator|new
name|PoolingDataSourceBuilder
argument_list|(
name|this
argument_list|)
operator|.
name|minConnections
argument_list|(
name|minConnection
argument_list|)
operator|.
name|maxConnections
argument_list|(
name|maxConnections
argument_list|)
return|;
block|}
comment|/** 	 * Builds a non-pooling DataSource. To create connection pool use 	 * {@link #pool(int, int)} method. 	 */
specifier|public
name|DataSource
name|build
parameter_list|()
block|{
name|Driver
name|driver
init|=
name|loadDriver
argument_list|()
decl_stmt|;
return|return
operator|new
name|DriverDataSource
argument_list|(
name|driver
argument_list|,
name|url
argument_list|,
name|userName
argument_list|,
name|password
argument_list|)
return|;
block|}
specifier|private
name|Driver
name|loadDriver
parameter_list|()
block|{
if|if
condition|(
name|driver
operator|!=
literal|null
condition|)
block|{
return|return
name|driver
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|driverClass
decl_stmt|;
try|try
block|{
comment|// note: implicitly using current class's ClassLoader ....
name|driverClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|driverClassName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can not load JDBC driver named '"
operator|+
name|driverClassName
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
return|return
operator|(
name|Driver
operator|)
name|driverClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error instantiating driver '"
operator|+
name|driverClassName
operator|+
literal|"': "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

