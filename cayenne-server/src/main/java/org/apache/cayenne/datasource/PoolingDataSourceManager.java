begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|datasource
package|;
end_package

begin_comment
comment|/**  * Manages the state of a {@link PoolingDataSource} instance, performing  * periodic expansion/contraction of pooled connections, and orchestrating  * shutdown.  *   * @since 4.0  */
end_comment

begin_class
class|class
name|PoolingDataSourceManager
extends|extends
name|Thread
block|{
specifier|private
specifier|volatile
name|boolean
name|shouldStop
decl_stmt|;
specifier|private
name|PoolingDataSource
name|dataSource
decl_stmt|;
name|PoolingDataSourceManager
parameter_list|(
name|PoolingDataSource
name|dataSource
parameter_list|)
block|{
name|setName
argument_list|(
literal|"PoolManagerCleanup-"
operator|+
name|dataSource
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataSource
operator|=
name|dataSource
expr_stmt|;
name|this
operator|.
name|shouldStop
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|shouldStop
operator|=
literal|true
expr_stmt|;
name|dataSource
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|interrupt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
comment|// don't do it too often
name|Thread
operator|.
name|sleep
argument_list|(
literal|600000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|iex
parameter_list|)
block|{
comment|// ignore...
block|}
if|if
condition|(
name|shouldStop
condition|)
block|{
break|break;
block|}
name|dataSource
operator|.
name|managePool
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

