begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Defines API of a batch iterator over the ResultIterator returned as a result of  * Select queries execution. Usually a ResultBatchIterator is supported by an open  * java.sql.ResultSet, therefore ResultBatchIterator must be explicitly closed when  * the user is done working with them.  *  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|ResultBatchIterator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Iterable
argument_list|<
name|T
argument_list|>
implements|,
name|Closeable
block|{
specifier|private
name|ResultIterator
name|delegate
decl_stmt|;
specifier|private
name|int
name|size
decl_stmt|;
specifier|public
name|ResultBatchIterator
parameter_list|(
name|ResultIterator
name|delegate
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
comment|/**      * Returns the next batch of result rows, depending on the query and batch size, may be a      * List of scalar values, DataRows, or Object[] arrays containing a mix of scalars and DataRows.      *      * @since 4.0      */
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|nextBatch
parameter_list|()
block|{
name|List
argument_list|<
name|T
argument_list|>
name|objects
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|size
condition|)
block|{
if|if
condition|(
name|delegate
operator|.
name|hasNextRow
argument_list|()
condition|)
block|{
name|objects
operator|.
name|add
argument_list|(
operator|(
name|T
operator|)
name|delegate
operator|.
name|nextRow
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|objects
return|;
block|}
empty_stmt|;
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|delegate
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getBatchSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
block|}
end_class

end_unit

