begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Represents a result of a validation execution. Contains a set of  * {@link ValidationFailure ValidationFailures}that occured in a given context. All  * failures are kept in the same order they were added.  *   * @since 1.1  */
end_comment

begin_class
specifier|public
class|class
name|ValidationResult
implements|implements
name|Serializable
block|{
specifier|private
name|List
argument_list|<
name|ValidationFailure
argument_list|>
name|failures
decl_stmt|;
specifier|public
name|ValidationResult
parameter_list|()
block|{
name|failures
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Add a failure to the validation result.      *       * @param failure failure to be added. It may not be null.      * @see ValidationFailure      */
specifier|public
name|void
name|addFailure
parameter_list|(
name|ValidationFailure
name|failure
parameter_list|)
block|{
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"failure cannot be null."
argument_list|)
throw|;
block|}
name|failures
operator|.
name|add
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns all failures added to this result, or empty list is result has no failures.      */
specifier|public
name|List
argument_list|<
name|ValidationFailure
argument_list|>
name|getFailures
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|failures
argument_list|)
return|;
block|}
comment|/**      * Returns all failures related to the<code>source</code> object, or an empty list      * if there are no such failures.      *       * @param source it may be null.      * @see ValidationFailure#getSource()      */
specifier|public
name|List
argument_list|<
name|ValidationFailure
argument_list|>
name|getFailures
parameter_list|(
name|Object
name|source
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|ValidationFailure
argument_list|>
name|matchingFailures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|ValidationFailure
name|failure
range|:
name|failures
control|)
block|{
if|if
condition|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|source
argument_list|,
name|failure
operator|.
name|getSource
argument_list|()
argument_list|)
condition|)
block|{
name|matchingFailures
operator|.
name|add
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|matchingFailures
return|;
block|}
comment|/**      * Returns true if at least one failure has been added to this result. False      * otherwise.      */
specifier|public
name|boolean
name|hasFailures
parameter_list|()
block|{
return|return
operator|!
name|failures
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * @param source it may be null.      * @return true if there is at least one failure for<code>source</code>. False      *         otherwise.      */
specifier|public
name|boolean
name|hasFailures
parameter_list|(
name|Object
name|source
parameter_list|)
block|{
for|for
control|(
name|ValidationFailure
name|failure
range|:
name|failures
control|)
block|{
if|if
condition|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|source
argument_list|,
name|failure
operator|.
name|getSource
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|failures
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|ret
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|separator
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
for|for
control|(
name|ValidationFailure
name|failure
range|:
name|failures
control|)
block|{
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|append
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

