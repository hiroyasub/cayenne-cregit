begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_comment
comment|/**  * @since 3.0  */
end_comment

begin_class
class|class
name|PathComponentIterator
implements|implements
name|Iterator
argument_list|<
name|PathComponent
argument_list|<
name|Attribute
argument_list|,
name|Relationship
argument_list|>
argument_list|>
block|{
specifier|private
specifier|final
name|StringTokenizer
name|toks
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aliasMap
decl_stmt|;
specifier|private
name|EmbeddedAttribute
name|embeddedAttribute
decl_stmt|;
specifier|private
name|Entity
name|currentEntity
decl_stmt|;
name|PathComponentIterator
parameter_list|(
name|Entity
name|root
parameter_list|,
name|String
name|path
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aliasMap
parameter_list|)
block|{
name|this
operator|.
name|currentEntity
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|aliasMap
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|aliasMap
argument_list|)
expr_stmt|;
name|this
operator|.
name|toks
operator|=
operator|new
name|StringTokenizer
argument_list|(
name|path
argument_list|,
name|Entity
operator|.
name|PATH_SEPARATOR
argument_list|)
expr_stmt|;
name|this
operator|.
name|embeddedAttribute
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|toks
operator|.
name|hasMoreTokens
argument_list|()
return|;
block|}
specifier|public
name|PathComponent
argument_list|<
name|Attribute
argument_list|,
name|Relationship
argument_list|>
name|next
parameter_list|()
block|{
name|String
name|pathComp
init|=
name|toks
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|JoinType
name|relationshipJoinType
init|=
name|JoinType
operator|.
name|INNER
decl_stmt|;
comment|// we only support LEFT JOINS for now...
if|if
condition|(
name|pathComp
operator|.
name|endsWith
argument_list|(
name|Entity
operator|.
name|OUTER_JOIN_INDICATOR
argument_list|)
condition|)
block|{
name|relationshipJoinType
operator|=
name|JoinType
operator|.
name|LEFT_OUTER
expr_stmt|;
name|pathComp
operator|=
name|pathComp
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pathComp
operator|.
name|length
argument_list|()
operator|-
name|Entity
operator|.
name|OUTER_JOIN_INDICATOR
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// see if this is an attribute
name|Attribute
name|attr
decl_stmt|;
if|if
condition|(
name|embeddedAttribute
operator|!=
literal|null
condition|)
block|{
name|attr
operator|=
name|embeddedAttribute
operator|.
name|getAttribute
argument_list|(
name|pathComp
argument_list|)
expr_stmt|;
name|embeddedAttribute
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|attr
operator|=
name|currentEntity
operator|.
name|getAttribute
argument_list|(
name|pathComp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attr
operator|!=
literal|null
condition|)
block|{
comment|// do a sanity check...
if|if
condition|(
name|attr
operator|instanceof
name|EmbeddedAttribute
condition|)
block|{
name|embeddedAttribute
operator|=
operator|(
name|EmbeddedAttribute
operator|)
name|attr
expr_stmt|;
block|}
if|else if
condition|(
name|toks
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ExpressionException
argument_list|(
literal|"Attribute must be the last component of the path: '"
operator|+
name|pathComp
operator|+
literal|"'."
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
throw|;
block|}
return|return
operator|new
name|AttributePathComponent
argument_list|<>
argument_list|(
name|attr
argument_list|)
return|;
block|}
name|Relationship
name|rel
init|=
name|currentEntity
operator|.
name|getRelationship
argument_list|(
name|pathComp
argument_list|)
decl_stmt|;
if|if
condition|(
name|rel
operator|!=
literal|null
condition|)
block|{
name|currentEntity
operator|=
name|rel
operator|.
name|getTargetEntity
argument_list|()
expr_stmt|;
return|return
operator|new
name|RelationshipPathComponent
argument_list|<>
argument_list|(
name|rel
argument_list|,
name|relationshipJoinType
argument_list|,
operator|!
name|hasNext
argument_list|()
argument_list|)
return|;
block|}
name|PathComponent
argument_list|<
name|Attribute
argument_list|,
name|Relationship
argument_list|>
name|aliasedPathComponent
init|=
name|getAliasedPathComponent
argument_list|(
name|pathComp
argument_list|)
decl_stmt|;
if|if
condition|(
name|aliasedPathComponent
operator|!=
literal|null
condition|)
block|{
return|return
name|aliasedPathComponent
return|;
block|}
throw|throw
name|invalidPathException
argument_list|(
literal|"Can't resolve path component"
argument_list|,
name|pathComp
argument_list|)
throw|;
block|}
specifier|private
name|PathComponent
argument_list|<
name|Attribute
argument_list|,
name|Relationship
argument_list|>
name|getAliasedPathComponent
parameter_list|(
name|String
name|pathComp
parameter_list|)
block|{
name|String
name|aliasedPath
init|=
name|aliasMap
operator|.
name|get
argument_list|(
name|pathComp
argument_list|)
decl_stmt|;
if|if
condition|(
name|aliasedPath
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// a few fairly arbitrary assumptions.... if we find that they restrict valid
comment|// and useful cases, we can change this behavior:
comment|//
comment|// 1. No nested aliases. Aliased path must contain only unaliased component names.
comment|// 2. Subpath must be relationship-only. Aliasing attributes doesn't seem
comment|// useful, so we don't handle this case for simplicity...
comment|// fully resolve subpath here... since we need to know the target entity of
comment|// the subpath, we have to fully traverse it, hence instead of lazy iterator
comment|// we might as well reuse obtained information in the AliasPathComponent
name|Iterator
argument_list|<
name|PathComponent
argument_list|<
name|Attribute
argument_list|,
name|Relationship
argument_list|>
argument_list|>
name|subpathIt
init|=
operator|new
name|PathComponentIterator
argument_list|(
name|currentEntity
argument_list|,
name|aliasedPath
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|PathComponent
argument_list|<
name|Attribute
argument_list|,
name|Relationship
argument_list|>
argument_list|>
name|parsedSubpath
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
while|while
condition|(
name|subpathIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PathComponent
argument_list|<
name|Attribute
argument_list|,
name|Relationship
argument_list|>
name|subpathComponent
init|=
name|subpathIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|Relationship
name|subpathRelationship
init|=
name|subpathComponent
operator|.
name|getRelationship
argument_list|()
decl_stmt|;
if|if
condition|(
name|subpathRelationship
operator|==
literal|null
condition|)
block|{
throw|throw
name|invalidPathException
argument_list|(
literal|"Expected a relationship in the aliased subpath. Alias ["
operator|+
name|pathComp
operator|+
literal|"]"
argument_list|,
name|subpathComponent
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|currentEntity
operator|=
name|subpathRelationship
operator|.
name|getTargetEntity
argument_list|()
expr_stmt|;
name|parsedSubpath
operator|.
name|add
argument_list|(
name|subpathComponent
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AliasPathComponent
argument_list|<>
argument_list|(
name|pathComp
argument_list|,
name|parsedSubpath
argument_list|,
operator|!
name|hasNext
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|ExpressionException
name|invalidPathException
parameter_list|(
name|String
name|message
parameter_list|,
name|String
name|pathComponent
parameter_list|)
block|{
name|String
name|buffer
init|=
name|message
operator|+
literal|": ["
operator|+
name|currentEntity
operator|.
name|getName
argument_list|()
operator|+
literal|'.'
operator|+
name|pathComponent
operator|+
literal|"]."
decl_stmt|;
return|return
operator|new
name|ExpressionException
argument_list|(
name|buffer
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"'remove' operation is not supported."
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

