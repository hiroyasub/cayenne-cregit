begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNodeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|CayenneMapEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLSerializable
import|;
end_import

begin_comment
comment|/**  * A descriptor for the Procedure parameter.  */
end_comment

begin_class
specifier|public
class|class
name|ProcedureParameter
implements|implements
name|ConfigurationNode
implements|,
name|CayenneMapEntry
implements|,
name|XMLSerializable
implements|,
name|Serializable
block|{
specifier|public
specifier|static
specifier|final
name|int
name|IN_OUT_PARAMETER
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|IN_PARAMETER
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|OUT_PARAMETER
init|=
literal|2
decl_stmt|;
specifier|protected
name|String
name|name
decl_stmt|;
specifier|protected
name|Procedure
name|procedure
decl_stmt|;
specifier|protected
name|int
name|direction
init|=
operator|-
literal|1
decl_stmt|;
comment|// The length of CHAR or VARCHAR or max num of digits for DECIMAL.
specifier|protected
name|int
name|maxLength
init|=
operator|-
literal|1
decl_stmt|;
comment|// The number of digits after period for DECIMAL.
specifier|protected
name|int
name|precision
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|int
name|type
init|=
name|TypesMapping
operator|.
name|NOT_DEFINED
decl_stmt|;
comment|/**      * Creates unnamed ProcedureParameter.      */
specifier|public
name|ProcedureParameter
parameter_list|()
block|{
block|}
specifier|public
name|ProcedureParameter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ProcedureParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|direction
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|setDirection
argument_list|(
name|direction
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|acceptVisitor
parameter_list|(
name|ConfigurationNodeVisitor
argument_list|<
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
return|return
name|visitor
operator|.
name|visitProcedureParameter
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|Object
name|getParent
parameter_list|()
block|{
return|return
name|getProcedure
argument_list|()
return|;
block|}
specifier|public
name|void
name|setParent
parameter_list|(
name|Object
name|parent
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|parent
operator|instanceof
name|Procedure
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected null or Procedure, got: "
operator|+
name|parent
argument_list|)
throw|;
block|}
name|setProcedure
argument_list|(
operator|(
name|Procedure
operator|)
name|parent
argument_list|)
expr_stmt|;
block|}
comment|/**      * Prints itself as XML to the provided PrintWriter.      *       * @since 1.1      */
annotation|@
name|Override
specifier|public
name|void
name|encodeAsXML
parameter_list|(
name|XMLEncoder
name|encoder
parameter_list|,
name|ConfigurationNodeVisitor
name|delegate
parameter_list|)
block|{
name|encoder
operator|.
name|start
argument_list|(
literal|"procedure-parameter"
argument_list|)
operator|.
name|attribute
argument_list|(
literal|"name"
argument_list|,
name|getName
argument_list|()
argument_list|)
operator|.
name|attribute
argument_list|(
literal|"type"
argument_list|,
name|TypesMapping
operator|.
name|getSqlNameByType
argument_list|(
name|getType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|attribute
argument_list|(
literal|"length"
argument_list|,
name|getMaxLength
argument_list|()
operator|>
literal|0
condition|?
name|getMaxLength
argument_list|()
else|:
literal|0
argument_list|)
operator|.
name|attribute
argument_list|(
literal|"precision"
argument_list|,
name|getPrecision
argument_list|()
operator|>
literal|0
condition|?
name|getPrecision
argument_list|()
else|:
literal|0
argument_list|)
expr_stmt|;
name|int
name|direction
init|=
name|getDirection
argument_list|()
decl_stmt|;
if|if
condition|(
name|direction
operator|==
name|ProcedureParameter
operator|.
name|IN_PARAMETER
condition|)
block|{
name|encoder
operator|.
name|attribute
argument_list|(
literal|"direction"
argument_list|,
literal|"in"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|direction
operator|==
name|ProcedureParameter
operator|.
name|IN_OUT_PARAMETER
condition|)
block|{
name|encoder
operator|.
name|attribute
argument_list|(
literal|"direction"
argument_list|,
literal|"in_out"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|direction
operator|==
name|ProcedureParameter
operator|.
name|OUT_PARAMETER
condition|)
block|{
name|encoder
operator|.
name|attribute
argument_list|(
literal|"direction"
argument_list|,
literal|"out"
argument_list|)
expr_stmt|;
block|}
name|delegate
operator|.
name|visitProcedureParameter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns the direction of this parameter. Possible values can be IN_PARAMETER,      * OUT_PARAMETER, IN_OUT_PARAMETER, VOID_PARAMETER.      */
specifier|public
name|int
name|getDirection
parameter_list|()
block|{
return|return
name|direction
return|;
block|}
specifier|public
name|int
name|getMaxLength
parameter_list|()
block|{
return|return
name|maxLength
return|;
block|}
specifier|public
name|int
name|getPrecision
parameter_list|()
block|{
return|return
name|precision
return|;
block|}
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * @return<code>true</code> if this is IN or INOUT parameter.      */
specifier|public
name|boolean
name|isInParameter
parameter_list|()
block|{
return|return
name|direction
operator|==
name|IN_PARAMETER
operator|||
name|direction
operator|==
name|IN_OUT_PARAMETER
return|;
block|}
comment|/**      * @return<code>true</code> if this is OUT or INOUT parameter.      */
specifier|public
name|boolean
name|isOutParam
parameter_list|()
block|{
return|return
name|direction
operator|==
name|OUT_PARAMETER
operator|||
name|direction
operator|==
name|IN_OUT_PARAMETER
return|;
block|}
comment|/**      * Sets the direction of this parameter. Acceptable values of direction are defined as      * int constants in ProcedureParam class. If an attempt is made to set an invalid      * attribute's direction, an IllegalArgumentException is thrown by this method.      */
specifier|public
name|void
name|setDirection
parameter_list|(
name|int
name|direction
parameter_list|)
block|{
if|if
condition|(
name|direction
operator|!=
name|IN_PARAMETER
operator|&&
name|direction
operator|!=
name|OUT_PARAMETER
operator|&&
name|direction
operator|!=
name|IN_OUT_PARAMETER
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown parameter type: "
operator|+
name|direction
argument_list|)
throw|;
block|}
name|this
operator|.
name|direction
operator|=
name|direction
expr_stmt|;
block|}
specifier|public
name|void
name|setMaxLength
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|maxLength
operator|=
name|i
expr_stmt|;
block|}
specifier|public
name|void
name|setPrecision
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|precision
operator|=
name|i
expr_stmt|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|type
operator|=
name|i
expr_stmt|;
block|}
comment|/**      * Returns the procedure that holds this parameter.      */
specifier|public
name|Procedure
name|getProcedure
parameter_list|()
block|{
return|return
name|procedure
return|;
block|}
comment|/**      * Sets the procedure that holds this parameter.      */
specifier|public
name|void
name|setProcedure
parameter_list|(
name|Procedure
name|procedure
parameter_list|)
block|{
name|this
operator|.
name|procedure
operator|=
name|procedure
expr_stmt|;
block|}
block|}
end_class

end_unit

