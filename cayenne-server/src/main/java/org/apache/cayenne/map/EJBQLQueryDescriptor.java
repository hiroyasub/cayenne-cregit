begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNodeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|EJBQLQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|EJBQLQueryDescriptor
extends|extends
name|QueryDescriptor
block|{
specifier|protected
name|String
name|ejbql
decl_stmt|;
specifier|public
name|EJBQLQueryDescriptor
parameter_list|()
block|{
name|super
argument_list|(
name|EJBQL_QUERY
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns EJBQL query string for this query.      */
specifier|public
name|String
name|getEjbql
parameter_list|()
block|{
return|return
name|ejbql
return|;
block|}
comment|/**      * Sets EJBQL query string for this query.      */
specifier|public
name|void
name|setEjbql
parameter_list|(
name|String
name|ejbql
parameter_list|)
block|{
name|this
operator|.
name|ejbql
operator|=
name|ejbql
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|EJBQLQuery
name|buildQuery
parameter_list|()
block|{
name|EJBQLQuery
name|ejbqlQuery
init|=
operator|new
name|EJBQLQuery
argument_list|(
name|this
operator|.
name|getEjbql
argument_list|()
argument_list|)
decl_stmt|;
name|ejbqlQuery
operator|.
name|setDataMap
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
name|ejbqlQuery
operator|.
name|initWithProperties
argument_list|(
name|this
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ejbqlQuery
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|encodeAsXML
parameter_list|(
name|XMLEncoder
name|encoder
parameter_list|,
name|ConfigurationNodeVisitor
name|delegate
parameter_list|)
block|{
name|encoder
operator|.
name|start
argument_list|(
literal|"query"
argument_list|)
operator|.
name|attribute
argument_list|(
literal|"name"
argument_list|,
name|getName
argument_list|()
argument_list|)
operator|.
name|attribute
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
comment|// print properties
name|encodeProperties
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
if|if
condition|(
name|ejbql
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|start
argument_list|(
literal|"ejbql"
argument_list|)
operator|.
name|cdata
argument_list|(
name|ejbql
argument_list|,
literal|true
argument_list|)
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
name|delegate
operator|.
name|visitQuery
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

