begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
operator|.
name|isBlank
import|;
end_import

begin_comment
comment|/**  * A builder that constructs Cayenne queries from abstract configuration information  * defined in cayenne-data-map*.dtd. This abstract builder supports values declared in the  * DTD, allowing subclasses to define their own Query creation logic.  *  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|QueryDescriptorLoader
block|{
specifier|protected
name|String
name|name
decl_stmt|;
specifier|protected
name|String
name|queryType
decl_stmt|;
specifier|protected
name|String
name|sql
decl_stmt|;
specifier|protected
name|String
name|ejbql
decl_stmt|;
specifier|protected
name|Expression
name|qualifier
decl_stmt|;
specifier|protected
name|DataMap
name|dataMap
decl_stmt|;
specifier|protected
name|String
name|rootType
decl_stmt|;
specifier|protected
name|String
name|rootName
decl_stmt|;
specifier|protected
name|String
name|resultEntity
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Ordering
argument_list|>
name|orderings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|prefetches
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|adapterSql
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Builds a Query object based on internal configuration information.      */
specifier|public
name|QueryDescriptor
name|buildQueryDescriptor
parameter_list|()
block|{
name|QueryDescriptor
name|descriptor
init|=
name|QueryDescriptor
operator|.
name|descriptor
argument_list|(
name|queryType
argument_list|)
decl_stmt|;
name|descriptor
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|descriptor
operator|.
name|setDataMap
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
name|descriptor
operator|.
name|setRoot
argument_list|(
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|descriptor
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|queryType
condition|)
block|{
case|case
name|QueryDescriptor
operator|.
name|SELECT_QUERY
case|:
operator|(
operator|(
name|SelectQueryDescriptor
operator|)
name|descriptor
operator|)
operator|.
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SelectQueryDescriptor
operator|)
name|descriptor
operator|)
operator|.
name|setOrderings
argument_list|(
name|orderings
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SelectQueryDescriptor
operator|)
name|descriptor
operator|)
operator|.
name|setPrefetches
argument_list|(
name|prefetches
argument_list|)
expr_stmt|;
break|break;
case|case
name|QueryDescriptor
operator|.
name|SQL_TEMPLATE
case|:
operator|(
operator|(
name|SQLTemplateDescriptor
operator|)
name|descriptor
operator|)
operator|.
name|setSql
argument_list|(
name|sql
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SQLTemplateDescriptor
operator|)
name|descriptor
operator|)
operator|.
name|setPrefetches
argument_list|(
name|prefetches
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SQLTemplateDescriptor
operator|)
name|descriptor
operator|)
operator|.
name|setAdapterSql
argument_list|(
name|adapterSql
argument_list|)
expr_stmt|;
break|break;
case|case
name|QueryDescriptor
operator|.
name|EJBQL_QUERY
case|:
operator|(
operator|(
name|EJBQLQueryDescriptor
operator|)
name|descriptor
operator|)
operator|.
name|setEjbql
argument_list|(
name|ejbql
argument_list|)
expr_stmt|;
break|break;
case|case
name|QueryDescriptor
operator|.
name|PROCEDURE_QUERY
case|:
operator|(
operator|(
name|ProcedureQueryDescriptor
operator|)
name|descriptor
operator|)
operator|.
name|setResultEntityName
argument_list|(
name|resultEntity
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// no additional properties
block|}
return|return
name|descriptor
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * It's better be handled by project upgrade handler and actually it is.      * But upgrade logic is faulty when project is several versions away      * and can't be changed without complete upgrade system rewrite      * @param factory old style query factory class      */
specifier|public
name|void
name|setLegacyFactory
parameter_list|(
name|String
name|factory
parameter_list|)
block|{
switch|switch
condition|(
name|factory
condition|)
block|{
case|case
literal|"org.apache.cayenne.map.SelectQueryBuilder"
case|:
name|queryType
operator|=
name|QueryDescriptor
operator|.
name|SELECT_QUERY
expr_stmt|;
break|break;
case|case
literal|"org.apache.cayenne.map.SQLTemplateBuilder"
case|:
name|queryType
operator|=
name|QueryDescriptor
operator|.
name|SQL_TEMPLATE
expr_stmt|;
break|break;
case|case
literal|"org.apache.cayenne.map.EjbqlBuilder"
case|:
name|queryType
operator|=
name|QueryDescriptor
operator|.
name|EJBQL_QUERY
expr_stmt|;
break|break;
case|case
literal|"org.apache.cayenne.map.ProcedureQueryBuilder"
case|:
name|queryType
operator|=
name|QueryDescriptor
operator|.
name|PROCEDURE_QUERY
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Unknown query factory: "
operator|+
name|factory
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setQueryType
parameter_list|(
name|String
name|queryType
parameter_list|)
block|{
name|this
operator|.
name|queryType
operator|=
name|queryType
expr_stmt|;
block|}
comment|/**      * Determines query root based on configuration info, falls back to a DataMap root if      * the data is invalid.      *      * @throws CayenneRuntimeException if a valid root can't be established.      */
specifier|protected
name|Object
name|getRoot
parameter_list|()
block|{
name|Object
name|root
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rootType
operator|==
literal|null
operator|||
name|QueryDescriptor
operator|.
name|DATA_MAP_ROOT
operator|.
name|equals
argument_list|(
name|rootType
argument_list|)
operator|||
name|rootName
operator|==
literal|null
condition|)
block|{
name|root
operator|=
name|dataMap
expr_stmt|;
block|}
if|else if
condition|(
name|QueryDescriptor
operator|.
name|OBJ_ENTITY_ROOT
operator|.
name|equals
argument_list|(
name|rootType
argument_list|)
condition|)
block|{
name|root
operator|=
name|dataMap
operator|.
name|getObjEntity
argument_list|(
name|rootName
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|QueryDescriptor
operator|.
name|DB_ENTITY_ROOT
operator|.
name|equals
argument_list|(
name|rootType
argument_list|)
condition|)
block|{
name|root
operator|=
name|dataMap
operator|.
name|getDbEntity
argument_list|(
name|rootName
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|QueryDescriptor
operator|.
name|PROCEDURE_ROOT
operator|.
name|equals
argument_list|(
name|rootType
argument_list|)
condition|)
block|{
name|root
operator|=
name|dataMap
operator|.
name|getProcedure
argument_list|(
name|rootName
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|QueryDescriptor
operator|.
name|JAVA_CLASS_ROOT
operator|.
name|equals
argument_list|(
name|rootType
argument_list|)
condition|)
block|{
comment|// setting root to ObjEntity, since creating a Class requires
comment|// the knowledge of the ClassLoader
name|root
operator|=
name|dataMap
operator|.
name|getObjEntityForJavaClass
argument_list|(
name|rootName
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|root
operator|!=
literal|null
operator|)
condition|?
name|root
else|:
name|dataMap
return|;
block|}
specifier|public
name|void
name|setResultEntity
parameter_list|(
name|String
name|resultEntity
parameter_list|)
block|{
name|this
operator|.
name|resultEntity
operator|=
name|resultEntity
expr_stmt|;
block|}
comment|/**      * Sets the information pertaining to the root of the query.      */
specifier|public
name|void
name|setRoot
parameter_list|(
name|DataMap
name|dataMap
parameter_list|,
name|String
name|rootType
parameter_list|,
name|String
name|rootName
parameter_list|)
block|{
name|this
operator|.
name|dataMap
operator|=
name|dataMap
expr_stmt|;
name|this
operator|.
name|rootType
operator|=
name|rootType
expr_stmt|;
name|this
operator|.
name|rootName
operator|=
name|rootName
expr_stmt|;
block|}
specifier|public
name|void
name|setEjbql
parameter_list|(
name|String
name|ejbql
parameter_list|)
block|{
name|this
operator|.
name|ejbql
operator|=
name|ejbql
expr_stmt|;
block|}
comment|/**      * Adds raw sql. If adapterClass parameter is not null, sets the SQL string to be      * adapter-specific. Otherwise it is used as a default SQL string.      */
specifier|public
name|void
name|addSql
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
name|adapterClass
parameter_list|)
block|{
if|if
condition|(
name|adapterClass
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|sql
operator|=
name|sql
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|adapterSql
operator|==
literal|null
condition|)
block|{
name|adapterSql
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|adapterSql
operator|.
name|put
argument_list|(
name|adapterClass
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setQualifier
parameter_list|(
name|String
name|qualifier
parameter_list|)
block|{
if|if
condition|(
name|qualifier
operator|==
literal|null
operator|||
name|isBlank
argument_list|(
name|qualifier
argument_list|)
condition|)
block|{
name|this
operator|.
name|qualifier
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|qualifier
operator|=
name|ExpressionFactory
operator|.
name|exp
argument_list|(
name|qualifier
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|properties
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addOrdering
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|descending
parameter_list|,
name|String
name|ignoreCase
parameter_list|)
block|{
if|if
condition|(
name|orderings
operator|==
literal|null
condition|)
block|{
name|orderings
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
name|isBlank
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|path
operator|=
literal|null
expr_stmt|;
block|}
name|boolean
name|isDescending
init|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|descending
argument_list|)
decl_stmt|;
name|boolean
name|isIgnoringCase
init|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ignoreCase
argument_list|)
decl_stmt|;
name|SortOrder
name|order
decl_stmt|;
if|if
condition|(
name|isDescending
condition|)
block|{
name|order
operator|=
name|isIgnoringCase
condition|?
name|SortOrder
operator|.
name|DESCENDING_INSENSITIVE
else|:
name|SortOrder
operator|.
name|DESCENDING
expr_stmt|;
block|}
else|else
block|{
name|order
operator|=
name|isIgnoringCase
condition|?
name|SortOrder
operator|.
name|ASCENDING_INSENSITIVE
else|:
name|SortOrder
operator|.
name|ASCENDING
expr_stmt|;
block|}
name|orderings
operator|.
name|add
argument_list|(
operator|new
name|Ordering
argument_list|(
name|path
argument_list|,
name|order
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addPrefetch
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
operator|||
operator|(
name|path
operator|!=
literal|null
operator|&&
name|isBlank
argument_list|(
name|path
argument_list|)
operator|)
condition|)
block|{
comment|// throw??
return|return;
block|}
if|if
condition|(
name|prefetches
operator|==
literal|null
condition|)
block|{
name|prefetches
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|prefetches
operator|.
name|add
argument_list|(
name|path
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

