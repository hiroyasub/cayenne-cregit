begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|/**  * A tree structure representing inheritance hierarchy of an ObjEntity and its  * subentities.  *   * @since 1.1  */
end_comment

begin_class
specifier|public
class|class
name|EntityInheritanceTree
block|{
specifier|protected
name|ObjEntity
name|entity
decl_stmt|;
specifier|protected
name|Collection
argument_list|<
name|EntityInheritanceTree
argument_list|>
name|subentities
decl_stmt|;
specifier|protected
name|Expression
name|normalizedQualifier
decl_stmt|;
specifier|public
name|EntityInheritanceTree
parameter_list|(
name|ObjEntity
name|entity
parameter_list|)
block|{
name|this
operator|.
name|entity
operator|=
name|entity
expr_stmt|;
block|}
comment|/**      * Returns a qualifier Expression that matches root entity of this tree and all its      * subentities.      */
specifier|public
name|Expression
name|qualifierForEntityAndSubclasses
parameter_list|()
block|{
name|Expression
name|qualifier
init|=
name|entity
operator|.
name|getDeclaredQualifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|qualifier
operator|==
literal|null
condition|)
block|{
comment|// match all
return|return
literal|null
return|;
block|}
if|if
condition|(
name|subentities
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|EntityInheritanceTree
name|child
range|:
name|subentities
control|)
block|{
name|Expression
name|childQualifier
init|=
name|child
operator|.
name|qualifierForEntityAndSubclasses
argument_list|()
decl_stmt|;
comment|// if any child qualifier is null, just return null, since no filtering is
comment|// possible
if|if
condition|(
name|childQualifier
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|qualifier
operator|=
name|qualifier
operator|.
name|orExp
argument_list|(
name|childQualifier
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|qualifier
return|;
block|}
comment|/**      * Returns the deepest possible entity in the inheritance hierarchy that can be used      * to create objects from a given DataRow.      */
specifier|public
name|ObjEntity
name|entityMatchingRow
parameter_list|(
name|DataRow
name|row
parameter_list|)
block|{
comment|// match depth first
if|if
condition|(
name|subentities
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|EntityInheritanceTree
name|child
range|:
name|subentities
control|)
block|{
name|ObjEntity
name|matched
init|=
name|child
operator|.
name|entityMatchingRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|matched
operator|!=
literal|null
condition|)
block|{
return|return
name|matched
return|;
block|}
block|}
block|}
name|Expression
name|qualifier
init|=
name|getDbQualifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|qualifier
operator|!=
literal|null
condition|)
block|{
return|return
name|qualifier
operator|.
name|match
argument_list|(
name|row
argument_list|)
condition|?
name|entity
else|:
literal|null
return|;
block|}
comment|// no qualifier ... matches all rows
return|return
name|entity
return|;
block|}
comment|/**      * Returns entity qualifier expressed as DB path qualifier or null if entity has no      * qualifier.      *       * @since 3.0      */
specifier|public
name|Expression
name|getDbQualifier
parameter_list|()
block|{
if|if
condition|(
name|entity
operator|.
name|getDeclaredQualifier
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|normalizedQualifier
operator|==
literal|null
condition|)
block|{
name|normalizedQualifier
operator|=
name|entity
operator|.
name|translateToDbPath
argument_list|(
name|entity
operator|.
name|getDeclaredQualifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|normalizedQualifier
return|;
block|}
specifier|public
name|void
name|addChildNode
parameter_list|(
name|EntityInheritanceTree
name|node
parameter_list|)
block|{
if|if
condition|(
name|subentities
operator|==
literal|null
condition|)
block|{
name|subentities
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|subentities
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getChildrenCount
parameter_list|()
block|{
return|return
operator|(
name|subentities
operator|!=
literal|null
operator|)
condition|?
name|subentities
operator|.
name|size
argument_list|()
else|:
literal|0
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|EntityInheritanceTree
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
operator|(
name|subentities
operator|!=
literal|null
operator|)
condition|?
name|subentities
else|:
name|Collections
operator|.
expr|<
name|EntityInheritanceTree
operator|>
name|emptyList
argument_list|()
return|;
block|}
specifier|public
name|ObjEntity
name|getEntity
parameter_list|()
block|{
return|return
name|entity
return|;
block|}
comment|/**      * Returns a collection containing this inheritance tree node entity and all its      * subentities.      *       * @since 3.0      */
specifier|public
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|allSubEntities
parameter_list|()
block|{
if|if
condition|(
name|subentities
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|entity
argument_list|)
return|;
block|}
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|c
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|appendSubentities
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
specifier|private
name|void
name|appendSubentities
parameter_list|(
name|Collection
argument_list|<
name|ObjEntity
argument_list|>
name|c
parameter_list|)
block|{
name|c
operator|.
name|add
argument_list|(
name|entity
argument_list|)
expr_stmt|;
if|if
condition|(
name|subentities
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|EntityInheritanceTree
name|subentity
range|:
name|subentities
control|)
block|{
name|subentity
operator|.
name|appendSubentities
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|ObjAttribute
argument_list|>
name|allAttributes
parameter_list|()
block|{
if|if
condition|(
name|subentities
operator|==
literal|null
condition|)
block|{
return|return
name|entity
operator|.
name|getAttributes
argument_list|()
return|;
block|}
name|Collection
argument_list|<
name|ObjAttribute
argument_list|>
name|c
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|appendDeclaredAttributes
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// add base attributes if any
name|ObjEntity
name|superEntity
init|=
name|entity
operator|.
name|getSuperEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|superEntity
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|addAll
argument_list|(
name|superEntity
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|ObjRelationship
argument_list|>
name|allRelationships
parameter_list|()
block|{
if|if
condition|(
name|subentities
operator|==
literal|null
condition|)
block|{
return|return
name|entity
operator|.
name|getRelationships
argument_list|()
return|;
block|}
name|Collection
argument_list|<
name|ObjRelationship
argument_list|>
name|c
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|appendDeclaredRelationships
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// add base relationships if any
name|ObjEntity
name|superEntity
init|=
name|entity
operator|.
name|getSuperEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|superEntity
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|addAll
argument_list|(
name|superEntity
operator|.
name|getRelationships
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
specifier|protected
name|void
name|appendDeclaredAttributes
parameter_list|(
name|Collection
argument_list|<
name|ObjAttribute
argument_list|>
name|c
parameter_list|)
block|{
name|c
operator|.
name|addAll
argument_list|(
name|entity
operator|.
name|getDeclaredAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|subentities
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|EntityInheritanceTree
name|child
range|:
name|subentities
control|)
block|{
name|child
operator|.
name|appendDeclaredAttributes
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|appendDeclaredRelationships
parameter_list|(
name|Collection
argument_list|<
name|ObjRelationship
argument_list|>
name|c
parameter_list|)
block|{
name|c
operator|.
name|addAll
argument_list|(
name|entity
operator|.
name|getDeclaredRelationships
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|subentities
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|EntityInheritanceTree
name|child
range|:
name|subentities
control|)
block|{
name|child
operator|.
name|appendDeclaredRelationships
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

