begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNodeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|AdhocObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EntityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|ObjEntityListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|CayenneMapEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|XMLEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * ObjEntity is a mapping descriptor for a DataObject Java class. It contains  * the information about the Java class itself, as well as its mapping to the  * DbEntity layer.  */
end_comment

begin_class
specifier|public
class|class
name|ObjEntity
extends|extends
name|Entity
implements|implements
name|ObjEntityListener
implements|,
name|ConfigurationNode
block|{
specifier|public
specifier|static
specifier|final
name|int
name|LOCK_TYPE_NONE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|LOCK_TYPE_OPTIMISTIC
init|=
literal|1
decl_stmt|;
comment|// do not import CayenneDataObject as it introduces unneeded client
comment|// dependency
specifier|static
specifier|final
name|String
name|CAYENNE_DATA_OBJECT_CLASS
init|=
literal|"org.apache.cayenne.CayenneDataObject"
decl_stmt|;
comment|/**      * A collection of default "generic" entity classes excluded from class      * generation.      *       * @since 1.2      */
specifier|protected
specifier|static
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|DEFAULT_GENERIC_CLASSES
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|CAYENNE_DATA_OBJECT_CLASS
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|superClassName
decl_stmt|;
specifier|protected
name|String
name|className
decl_stmt|;
specifier|protected
name|String
name|dbEntityName
decl_stmt|;
specifier|protected
name|String
name|superEntityName
decl_stmt|;
specifier|protected
name|Expression
name|qualifier
decl_stmt|;
specifier|protected
name|boolean
name|readOnly
decl_stmt|;
specifier|protected
name|int
name|lockType
decl_stmt|;
specifier|protected
name|boolean
name|_abstract
decl_stmt|;
specifier|protected
name|boolean
name|serverOnly
decl_stmt|;
specifier|protected
name|String
name|clientClassName
decl_stmt|;
specifier|protected
name|String
name|clientSuperClassName
decl_stmt|;
annotation|@
name|Deprecated
specifier|protected
name|List
argument_list|<
name|EntityListener
argument_list|>
name|entityListeners
decl_stmt|;
specifier|protected
name|CallbackMap
name|callbacks
decl_stmt|;
annotation|@
name|Deprecated
specifier|protected
name|boolean
name|excludingDefaultListeners
decl_stmt|;
annotation|@
name|Deprecated
specifier|protected
name|boolean
name|excludingSuperclassListeners
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributeOverrides
decl_stmt|;
specifier|public
name|ObjEntity
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ObjEntity
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|lockType
operator|=
name|LOCK_TYPE_NONE
expr_stmt|;
name|this
operator|.
name|callbacks
operator|=
operator|new
name|CallbackMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|entityListeners
operator|=
operator|new
name|ArrayList
argument_list|<
name|EntityListener
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|attributeOverrides
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * @since 3.1      */
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|acceptVisitor
parameter_list|(
name|ConfigurationNodeVisitor
argument_list|<
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
return|return
name|visitor
operator|.
name|visitObjEntity
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * Prints itself as XML to the provided XMLEncoder.      *       * @since 1.1      */
annotation|@
name|Override
specifier|public
name|void
name|encodeAsXML
parameter_list|(
name|XMLEncoder
name|encoder
parameter_list|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"<obj-entity name=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// additionally validate that superentity exists
if|if
condition|(
name|getSuperEntityName
argument_list|()
operator|!=
literal|null
operator|&&
name|getSuperEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"\" superEntityName=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|getSuperEntityName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAbstract
argument_list|()
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"\" abstract=\"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isServerOnly
argument_list|()
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"\" serverOnly=\"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getClassName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"\" className=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getClientClassName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"\" clientClassName=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|getClientClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isReadOnly
argument_list|()
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"\" readOnly=\"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDeclaredLockType
argument_list|()
operator|==
name|LOCK_TYPE_OPTIMISTIC
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"\" lock-type=\"optimistic"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDbEntityName
argument_list|()
operator|!=
literal|null
operator|&&
name|getDbEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// not writing DbEntity name if sub entity has same DbEntity
comment|// as super entity, see CAY-1477
if|if
condition|(
operator|!
operator|(
name|getSuperEntity
argument_list|()
operator|!=
literal|null
operator|&&
name|getSuperEntity
argument_list|()
operator|.
name|getDbEntity
argument_list|()
operator|==
name|getDbEntity
argument_list|()
operator|)
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"\" dbEntityName=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|Util
operator|.
name|encodeXmlAttribute
argument_list|(
name|getDbEntityName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getSuperEntityName
argument_list|()
operator|==
literal|null
operator|&&
name|getSuperClassName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"\" superClassName=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|getSuperClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getSuperEntityName
argument_list|()
operator|==
literal|null
operator|&&
name|getClientSuperClassName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"\" clientSuperClassName=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|getClientSuperClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// deprecated
if|if
condition|(
name|isExcludingSuperclassListeners
argument_list|()
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"\" exclude-superclass-listeners=\"true"
argument_list|)
expr_stmt|;
block|}
comment|// deprecated
if|if
condition|(
name|isExcludingDefaultListeners
argument_list|()
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"\" exclude-default-listeners=\"true"
argument_list|)
expr_stmt|;
block|}
name|encoder
operator|.
name|println
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|indent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|qualifier
operator|!=
literal|null
condition|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"<qualifier>"
argument_list|)
expr_stmt|;
name|qualifier
operator|.
name|encodeAsXML
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|println
argument_list|(
literal|"</qualifier>"
argument_list|)
expr_stmt|;
block|}
comment|// store attributes
name|encoder
operator|.
name|print
argument_list|(
name|getDeclaredAttributes
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|override
range|:
name|attributeOverrides
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|encoder
operator|.
name|print
argument_list|(
literal|"<attribute-override name=\""
operator|+
name|override
operator|.
name|getKey
argument_list|()
operator|+
literal|'\"'
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
literal|" db-attribute-path=\""
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
name|Util
operator|.
name|encodeXmlAttribute
argument_list|(
name|override
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|print
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|println
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
comment|// deprecated
comment|// write entity listeners
for|for
control|(
name|EntityListener
name|entityListener
range|:
name|entityListeners
control|)
block|{
name|entityListener
operator|.
name|encodeAsXML
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
block|}
comment|// write entity-level callbacks
name|getCallbackMap
argument_list|()
operator|.
name|encodeCallbacksAsXML
argument_list|(
name|encoder
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|indent
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|println
argument_list|(
literal|"</obj-entity>"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns an ObjEntity stripped of any server-side information, such as      * DbEntity mapping. "clientClassName" property of this entity is used to      * initialize "className" property of returned entity.      *       * @since 1.2      */
specifier|public
name|ObjEntity
name|getClientEntity
parameter_list|()
block|{
name|ClientObjEntity
name|entity
init|=
operator|new
name|ClientObjEntity
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|entity
operator|.
name|setClassName
argument_list|(
name|getClientClassName
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setSuperClassName
argument_list|(
name|getClientSuperClassName
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setSuperEntityName
argument_list|(
name|getSuperEntityName
argument_list|()
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setDeclaredQualifier
argument_list|(
name|getDeclaredQualifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: should we also copy lock type?
name|Collection
argument_list|<
name|ObjAttribute
argument_list|>
name|primaryKeys
init|=
name|getMutablePrimaryKeys
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ObjAttribute
argument_list|>
name|clientPK
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjAttribute
argument_list|>
argument_list|(
name|primaryKeys
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjAttribute
name|attribute
range|:
name|getDeclaredAttributes
argument_list|()
control|)
block|{
name|ObjAttribute
name|clientAttribute
init|=
name|attribute
operator|.
name|getClientAttribute
argument_list|()
decl_stmt|;
name|entity
operator|.
name|addAttribute
argument_list|(
name|clientAttribute
argument_list|)
expr_stmt|;
if|if
condition|(
name|primaryKeys
operator|.
name|remove
argument_list|(
name|attribute
argument_list|)
condition|)
block|{
name|clientPK
operator|.
name|add
argument_list|(
name|clientAttribute
argument_list|)
expr_stmt|;
block|}
block|}
comment|// after all meaningful pks got removed, here we only have synthetic pks
comment|// left...
for|for
control|(
name|ObjAttribute
name|attribute
range|:
name|primaryKeys
control|)
block|{
name|ObjAttribute
name|clientAttribute
init|=
name|attribute
operator|.
name|getClientAttribute
argument_list|()
decl_stmt|;
name|clientPK
operator|.
name|add
argument_list|(
name|clientAttribute
argument_list|)
expr_stmt|;
block|}
name|entity
operator|.
name|setPrimaryKeys
argument_list|(
name|clientPK
argument_list|)
expr_stmt|;
comment|// copy relationships; skip runtime generated relationships
for|for
control|(
name|ObjRelationship
name|relationship
range|:
name|getDeclaredRelationships
argument_list|()
control|)
block|{
if|if
condition|(
name|relationship
operator|.
name|isRuntime
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|ObjEntity
name|targetEntity
init|=
operator|(
name|ObjEntity
operator|)
name|relationship
operator|.
name|getTargetEntity
argument_list|()
decl_stmt|;
comment|// note that 'isClientAllowed' also checks parent DataMap client
comment|// policy
comment|// that can be handy in case of cross-map relationships
if|if
condition|(
name|targetEntity
operator|==
literal|null
operator|||
operator|!
name|targetEntity
operator|.
name|isClientAllowed
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|entity
operator|.
name|addRelationship
argument_list|(
name|relationship
operator|.
name|getClientRelationship
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: andrus 2/5/2007 - copy embeddables
comment|// TODO: andrus 2/5/2007 - copy callback methods
return|return
name|entity
return|;
block|}
comment|/**      * Returns a non-null class name. For generic entities with no class      * specified explicitly, default DataMap superclass is used, and if it is      * not set - CayenneDataObject is used.      *       * @since 4.0      */
specifier|public
name|String
name|getJavaClassName
parameter_list|()
block|{
name|String
name|name
init|=
name|getClassName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|&&
name|getDataMap
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|getDataMap
argument_list|()
operator|.
name|getDefaultSuperclass
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|CAYENNE_DATA_OBJECT_CLASS
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
comment|/**      * Returns Java class of persistent objects described by this entity. For      * generic entities with no class specified explicitly, default DataMap      * superclass is used, and if it is not set - CayenneDataObject is used.      * Casts any thrown exceptions into CayenneRuntimeException.      *       * @since 1.2      * @deprecated since 4.0 this method based on statically defined class      *             loading algorithm is not going to work in environments like      *             OSGi. {@link AdhocObjectFactory} should be used as it can      *             provide the environment-specific class loading policy.       */
annotation|@
name|Deprecated
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getJavaClass
parameter_list|()
block|{
name|String
name|name
init|=
name|getJavaClassName
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|Util
operator|.
name|getJavaClass
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Failed to doLoad class "
operator|+
name|name
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns an unmodifiable list of registered {@link EntityListener}      * objects. Note that since the order of listeners is significant a list,      * not just a generic Collection is returned.      *       * @since 3.0      * @deprecated since 4.0 unused, as listeners are no longer mapped in a      *             DataMap.      */
annotation|@
name|Deprecated
specifier|public
name|List
argument_list|<
name|EntityListener
argument_list|>
name|getEntityListeners
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|entityListeners
argument_list|)
return|;
block|}
comment|/**      * Adds a new EntityListener.      *       * @since 3.0      * @throws IllegalArgumentException      *             if a listener for the same class name is already registered.      * @deprecated since 4.0 unused, as listeners are no longer mapped in a      *             DataMap.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|addEntityListener
parameter_list|(
name|EntityListener
name|listener
parameter_list|)
block|{
for|for
control|(
name|EntityListener
name|next
range|:
name|entityListeners
control|)
block|{
if|if
condition|(
name|listener
operator|.
name|getClassName
argument_list|()
operator|.
name|equals
argument_list|(
name|next
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Duplicate listener for "
operator|+
name|next
operator|.
name|getClassName
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|entityListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes a listener matching class name.      *       * @since 3.0      * @deprecated since 4.0 unused, as listeners are no longer mapped in a      *             DataMap.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|removeEntityListener
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|Iterator
argument_list|<
name|EntityListener
argument_list|>
name|it
init|=
name|entityListeners
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|EntityListener
name|next
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|next
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/**      * @since 3.0      * @deprecated since 4.0 unused, as listeners are no longer mapped in a      *             DataMap.      */
annotation|@
name|Deprecated
specifier|public
name|EntityListener
name|getEntityListener
parameter_list|(
name|String
name|className
parameter_list|)
block|{
for|for
control|(
name|EntityListener
name|next
range|:
name|entityListeners
control|)
block|{
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|next
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|next
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns an object that stores callback methods of this entity.      *       * @since 3.0      */
specifier|public
name|CallbackMap
name|getCallbackMap
parameter_list|()
block|{
return|return
name|callbacks
return|;
block|}
comment|/**      * Returns the type of lock used by this ObjEntity. If this entity is not      * locked, this method would look in a super entity recursively, until it      * finds a lock somewhere in the inheritance hierarchy.      *       * @since 1.1      */
specifier|public
name|int
name|getLockType
parameter_list|()
block|{
comment|// if this entity has an explicit lock,
comment|// no need to lookup inheritance hierarchy
if|if
condition|(
name|lockType
operator|!=
name|LOCK_TYPE_NONE
condition|)
block|{
return|return
name|lockType
return|;
block|}
name|ObjEntity
name|superEntity
init|=
name|getSuperEntity
argument_list|()
decl_stmt|;
return|return
operator|(
name|superEntity
operator|!=
literal|null
operator|)
condition|?
name|superEntity
operator|.
name|getLockType
argument_list|()
else|:
name|lockType
return|;
block|}
comment|/**      * Returns the type of lock used by this ObjEntity, regardless of what      * locking type is used by super entities.      *       * @since 1.1      */
specifier|public
name|int
name|getDeclaredLockType
parameter_list|()
block|{
return|return
name|lockType
return|;
block|}
comment|/**      * Sets the type of lock used by this ObjEntity.      *       * @since 1.1      */
specifier|public
name|void
name|setDeclaredLockType
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|lockType
operator|=
name|i
expr_stmt|;
block|}
comment|/**      * Returns whether this entity is "generic", meaning it is not mapped to a      * unique Java class. Criterion for generic entities is that it either has      * no Java class mapped or its class is the same as DataMap's default      * superclass, or it is CayenneDataObject.      *       * @since 1.2      */
specifier|public
name|boolean
name|isGeneric
parameter_list|()
block|{
name|String
name|className
init|=
name|getClassName
argument_list|()
decl_stmt|;
return|return
name|className
operator|==
literal|null
operator|||
name|DEFAULT_GENERIC_CLASSES
operator|.
name|contains
argument_list|(
name|className
argument_list|)
operator|||
operator|(
name|getDataMap
argument_list|()
operator|!=
literal|null
operator|&&
name|className
operator|.
name|equals
argument_list|(
name|getDataMap
argument_list|()
operator|.
name|getDefaultSuperclass
argument_list|()
argument_list|)
operator|)
return|;
block|}
comment|/**      * Returns true if this entity is allowed to be used on the client. Checks      * that parent DataMap allows client entities and also that this entity is      * not explicitly disabled for the client use.      *       * @since 1.2      */
specifier|public
name|boolean
name|isClientAllowed
parameter_list|()
block|{
return|return
name|getDataMap
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|isServerOnly
argument_list|()
operator|&&
name|getDataMap
argument_list|()
operator|.
name|isClientSupported
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isAbstract
parameter_list|()
block|{
return|return
name|_abstract
return|;
block|}
comment|/**      * Sets whether this entity is abstract only.      */
specifier|public
name|void
name|setAbstract
parameter_list|(
name|boolean
name|isAbstract
parameter_list|)
block|{
name|this
operator|.
name|_abstract
operator|=
name|isAbstract
expr_stmt|;
block|}
comment|/**      * Returns true if this entity is not available on the client.      *       * @since 1.2      */
specifier|public
name|boolean
name|isServerOnly
parameter_list|()
block|{
return|return
name|serverOnly
return|;
block|}
comment|/**      * Sets whether this entity is available on the client.      *       * @since 1.2      */
specifier|public
name|void
name|setServerOnly
parameter_list|(
name|boolean
name|serverOnly
parameter_list|)
block|{
name|this
operator|.
name|serverOnly
operator|=
name|serverOnly
expr_stmt|;
block|}
comment|/**      * Returns a qualifier that imposes a restriction on what objects belong to      * this entity. Returned qualifier is the one declared in this entity, and      * does not include qualifiers declared in super entities.      *       * @since 1.1      */
specifier|public
name|Expression
name|getDeclaredQualifier
parameter_list|()
block|{
return|return
name|qualifier
return|;
block|}
comment|/**      * Returns an entity name for a parent entity in the inheritance hierarchy.      *       * @since 1.1      */
specifier|public
name|String
name|getSuperEntityName
parameter_list|()
block|{
return|return
name|superEntityName
return|;
block|}
comment|/**      * Sets a qualifier that imposes a limit on what objects belong to this      * entity.      *       * @since 1.1      */
specifier|public
name|void
name|setDeclaredQualifier
parameter_list|(
name|Expression
name|qualifier
parameter_list|)
block|{
name|this
operator|.
name|qualifier
operator|=
name|qualifier
expr_stmt|;
block|}
comment|/**      * Sets an entity name for a parent entity in the inheritance hierarchy.      *       * @since 1.1      */
specifier|public
name|void
name|setSuperEntityName
parameter_list|(
name|String
name|superEntityName
parameter_list|)
block|{
name|this
operator|.
name|superEntityName
operator|=
name|superEntityName
expr_stmt|;
block|}
comment|/**      * Returns the name of DataObject class described by this entity.      */
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|className
return|;
block|}
comment|/**      * Sets the name of the DataObject class described by this entity.      */
specifier|public
name|void
name|setClassName
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|this
operator|.
name|className
operator|=
name|className
expr_stmt|;
block|}
comment|/**      * Returns the name of ClientDataObject class described by this entity.      *       * @since 1.2      */
specifier|public
name|String
name|getClientClassName
parameter_list|()
block|{
return|return
name|clientClassName
return|;
block|}
comment|/**      * Sets the name of the ClientDataObject class described by this entity.      *       * @since 1.2      */
specifier|public
name|void
name|setClientClassName
parameter_list|(
name|String
name|clientClassName
parameter_list|)
block|{
name|this
operator|.
name|clientClassName
operator|=
name|clientClassName
expr_stmt|;
block|}
comment|/**      * Returns a fully-qualified name of the super class of the DataObject      * class. This value is used as a hint for class generation. If the entity      * inherits from another entity, a superclass is the class of that entity.      */
specifier|public
name|String
name|getSuperClassName
parameter_list|()
block|{
name|ObjEntity
name|superEntity
init|=
name|getSuperEntity
argument_list|()
decl_stmt|;
return|return
operator|(
name|superEntity
operator|!=
literal|null
operator|)
condition|?
name|superEntity
operator|.
name|getClassName
argument_list|()
else|:
name|superClassName
return|;
block|}
comment|/**      * Sets a fully-qualified name of the super class of the DataObject class.      * This value is used as a hint for class generation.      *<p>      *<i>An attempt to set superclass on an inherited entity has no effect,      * since a class of the super entity is always used as a superclass.</i>      *</p>      */
specifier|public
name|void
name|setSuperClassName
parameter_list|(
name|String
name|superClassName
parameter_list|)
block|{
name|this
operator|.
name|superClassName
operator|=
name|superClassName
expr_stmt|;
block|}
comment|/**      * Returns a fully-qualified name of the client-side super class of the      * DataObject class. This value is used as a hint for class generation. If      * the entity inherits from another entity, a superclass is the class of      * that entity.      *       * @since 1.2      */
specifier|public
name|String
name|getClientSuperClassName
parameter_list|()
block|{
name|ObjEntity
name|superEntity
init|=
name|getSuperEntity
argument_list|()
decl_stmt|;
return|return
operator|(
name|superEntity
operator|!=
literal|null
operator|)
condition|?
name|superEntity
operator|.
name|getClientClassName
argument_list|()
else|:
name|clientSuperClassName
return|;
block|}
comment|/**      * Sets a fully-qualified name of the client-side super class of the      * ClientDataObject class. This value is used as a hint for class      * generation.      *<p>      *<i>An attempt to set superclass on an inherited entity has no effect,      * since a class of the super entity is always used as a superclass.</i>      *</p>      *       * @since 1.2      */
specifier|public
name|void
name|setClientSuperClassName
parameter_list|(
name|String
name|clientSuperClassName
parameter_list|)
block|{
name|this
operator|.
name|clientSuperClassName
operator|=
name|clientSuperClassName
expr_stmt|;
block|}
comment|/**      * Returns a "super" entity in the entity inheritance hierarchy.      *       * @since 1.1      */
specifier|public
name|ObjEntity
name|getSuperEntity
parameter_list|()
block|{
return|return
operator|(
name|superEntityName
operator|!=
literal|null
operator|)
condition|?
name|getNonNullNamespace
argument_list|()
operator|.
name|getObjEntity
argument_list|(
name|superEntityName
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * Returns a DbEntity associated with this ObjEntity.      */
specifier|public
name|DbEntity
name|getDbEntity
parameter_list|()
block|{
comment|// since 1.2 - allow overriding DbEntity in the inheritance hierarchy...
if|if
condition|(
name|dbEntityName
operator|!=
literal|null
condition|)
block|{
return|return
name|getNonNullNamespace
argument_list|()
operator|.
name|getDbEntity
argument_list|(
name|dbEntityName
argument_list|)
return|;
block|}
name|ObjEntity
name|superEntity
init|=
name|getSuperEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|superEntity
operator|!=
literal|null
condition|)
block|{
return|return
name|superEntity
operator|.
name|getDbEntity
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Sets the DbEntity used by this ObjEntity.      *<p>      *<i>Setting DbEntity on an inherited entity has no effect, since a class      * of the super entity is always used as a superclass.</i>      *</p>      */
specifier|public
name|void
name|setDbEntity
parameter_list|(
name|DbEntity
name|dbEntity
parameter_list|)
block|{
name|this
operator|.
name|dbEntityName
operator|=
operator|(
name|dbEntity
operator|!=
literal|null
operator|)
condition|?
name|dbEntity
operator|.
name|getName
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
comment|/**      * Returns an unmodifiable collection of ObjAttributes representing the      * primary key of the table described by this DbEntity. Note that since PK      * is very often not an object property, the returned collection may contain      * "synthetic" ObjAttributes that are created on the fly and are not a part      * of ObjEntity and will not be a part of entity.getAttributes().      *       * @since 3.0      */
specifier|public
name|Collection
argument_list|<
name|ObjAttribute
argument_list|>
name|getPrimaryKeys
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|getMutablePrimaryKeys
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|ObjAttribute
argument_list|>
name|getMutablePrimaryKeys
parameter_list|()
block|{
if|if
condition|(
name|getDbEntity
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"No DbEntity for ObjEntity: "
operator|+
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
name|pkAttributes
init|=
name|getDbEntity
argument_list|()
operator|.
name|getPrimaryKeys
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ObjAttribute
argument_list|>
name|attributes
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjAttribute
argument_list|>
argument_list|(
name|pkAttributes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DbAttribute
name|pk
range|:
name|pkAttributes
control|)
block|{
name|ObjAttribute
name|attribute
init|=
name|getAttributeForDbAttribute
argument_list|(
name|pk
argument_list|)
decl_stmt|;
comment|// create synthetic attribute
if|if
condition|(
name|attribute
operator|==
literal|null
condition|)
block|{
name|attribute
operator|=
operator|new
name|SyntheticPKObjAttribute
argument_list|(
name|pk
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|setDbAttributePath
argument_list|(
name|pk
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|setType
argument_list|(
name|TypesMapping
operator|.
name|getJavaBySqlType
argument_list|(
name|pk
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|attributes
operator|.
name|add
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
return|return
name|attributes
return|;
block|}
comment|/**      * Returns a named attribute that is either declared in this ObjEntity or is      * inherited. In any case returned attribute 'getEntity' method will return      * this entity. Returns null if no matching attribute is found.      */
annotation|@
name|Override
specifier|public
name|ObjAttribute
name|getAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ObjAttribute
name|attribute
init|=
operator|(
name|ObjAttribute
operator|)
name|super
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|attribute
operator|!=
literal|null
condition|)
block|{
return|return
name|attribute
return|;
block|}
comment|// check embedded attribute
name|int
name|dot
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dot
operator|>
literal|0
operator|&&
name|dot
operator|<
name|name
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|ObjAttribute
name|embedded
init|=
name|getAttribute
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dot
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|embedded
operator|instanceof
name|EmbeddedAttribute
condition|)
block|{
return|return
operator|(
operator|(
name|EmbeddedAttribute
operator|)
name|embedded
operator|)
operator|.
name|getAttribute
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|dot
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|// check super attribute
name|ObjEntity
name|superEntity
init|=
name|getSuperEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|superEntity
operator|!=
literal|null
condition|)
block|{
name|ObjAttribute
name|superAttribute
init|=
name|superEntity
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|superAttribute
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// decorate returned attribute to make it appear as if it belongs to
comment|// this
comment|// entity
name|ObjAttribute
name|decoratedAttribute
init|=
operator|new
name|ObjAttribute
argument_list|(
name|superAttribute
argument_list|)
decl_stmt|;
name|decoratedAttribute
operator|.
name|setEntity
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|String
name|pathOverride
init|=
name|attributeOverrides
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathOverride
operator|!=
literal|null
condition|)
block|{
name|decoratedAttribute
operator|.
name|setDbAttributePath
argument_list|(
name|pathOverride
argument_list|)
expr_stmt|;
block|}
return|return
name|decoratedAttribute
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns a SortedMap of all attributes that either belong to this      * ObjEntity or inherited.      */
annotation|@
name|Override
specifier|public
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ObjAttribute
argument_list|>
name|getAttributeMap
parameter_list|()
block|{
if|if
condition|(
name|superEntityName
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ObjAttribute
argument_list|>
operator|)
name|super
operator|.
name|getAttributeMap
argument_list|()
return|;
block|}
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ObjAttribute
argument_list|>
name|attributeMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|ObjAttribute
argument_list|>
argument_list|()
decl_stmt|;
name|appendAttributes
argument_list|(
name|attributeMap
argument_list|)
expr_stmt|;
return|return
name|attributeMap
return|;
block|}
comment|/**      * Recursively appends all attributes in the entity inheritance hierarchy.      */
specifier|final
name|void
name|appendAttributes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ObjAttribute
argument_list|>
name|map
parameter_list|)
block|{
name|map
operator|.
name|putAll
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|ObjAttribute
argument_list|>
operator|)
name|super
operator|.
name|getAttributeMap
argument_list|()
argument_list|)
expr_stmt|;
name|ObjEntity
name|superEntity
init|=
name|getSuperEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|superEntity
operator|!=
literal|null
condition|)
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ObjAttribute
argument_list|>
name|attributeMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|ObjAttribute
argument_list|>
argument_list|()
decl_stmt|;
name|superEntity
operator|.
name|appendAttributes
argument_list|(
name|attributeMap
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|attributeName
range|:
name|attributeMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|overridedDbPath
init|=
name|attributeOverrides
operator|.
name|get
argument_list|(
name|attributeName
argument_list|)
decl_stmt|;
name|ObjAttribute
name|attribute
init|=
operator|new
name|ObjAttribute
argument_list|(
name|attributeMap
operator|.
name|get
argument_list|(
name|attributeName
argument_list|)
argument_list|)
decl_stmt|;
name|attribute
operator|.
name|setEntity
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|overridedDbPath
operator|!=
literal|null
condition|)
block|{
name|attribute
operator|.
name|setDbAttributePath
argument_list|(
name|overridedDbPath
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|attributeName
argument_list|,
name|attribute
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @since 3.0      */
specifier|public
name|void
name|addAttributeOverride
parameter_list|(
name|String
name|attributeName
parameter_list|,
name|String
name|dbPath
parameter_list|)
block|{
name|attributeOverrides
operator|.
name|put
argument_list|(
name|attributeName
argument_list|,
name|dbPath
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getDeclaredAttributeOverrides
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|attributeOverrides
argument_list|)
return|;
block|}
comment|/**      * Returns a Collection of all attributes that either belong to this      * ObjEntity or inherited.      */
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ObjAttribute
argument_list|>
name|getAttributes
parameter_list|()
block|{
if|if
condition|(
name|superEntityName
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|Collection
argument_list|<
name|ObjAttribute
argument_list|>
operator|)
name|super
operator|.
name|getAttributes
argument_list|()
return|;
block|}
return|return
name|getAttributeMap
argument_list|()
operator|.
name|values
argument_list|()
return|;
block|}
comment|/**      * Returns a Collection of all attributes that belong to this ObjEntity,      * excluding inherited attributes.      *       * @since 1.1      */
specifier|public
name|Collection
argument_list|<
name|ObjAttribute
argument_list|>
name|getDeclaredAttributes
parameter_list|()
block|{
return|return
operator|(
name|Collection
argument_list|<
name|ObjAttribute
argument_list|>
operator|)
name|super
operator|.
name|getAttributes
argument_list|()
return|;
block|}
comment|/**      * Returns a named Relationship that either belongs to this ObjEntity or is      * inherited. Returns null if no matching attribute is found.      */
annotation|@
name|Override
specifier|public
name|ObjRelationship
name|getRelationship
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ObjRelationship
name|relationship
init|=
operator|(
name|ObjRelationship
operator|)
name|super
operator|.
name|getRelationship
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|relationship
operator|!=
literal|null
condition|)
block|{
return|return
name|relationship
return|;
block|}
if|if
condition|(
name|superEntityName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ObjEntity
name|superEntity
init|=
name|getSuperEntity
argument_list|()
decl_stmt|;
return|return
operator|(
name|superEntity
operator|!=
literal|null
operator|)
condition|?
name|superEntity
operator|.
name|getRelationship
argument_list|(
name|name
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ObjRelationship
argument_list|>
name|getRelationshipMap
parameter_list|()
block|{
if|if
condition|(
name|superEntityName
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ObjRelationship
argument_list|>
operator|)
name|super
operator|.
name|getRelationshipMap
argument_list|()
return|;
block|}
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ObjRelationship
argument_list|>
name|relationshipMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|ObjRelationship
argument_list|>
argument_list|()
decl_stmt|;
name|appendRelationships
argument_list|(
name|relationshipMap
argument_list|)
expr_stmt|;
return|return
name|relationshipMap
return|;
block|}
comment|/**      * Recursively appends all relationships in the entity inheritance      * hierarchy.      */
specifier|final
name|void
name|appendRelationships
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ObjRelationship
argument_list|>
name|map
parameter_list|)
block|{
name|map
operator|.
name|putAll
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|ObjRelationship
argument_list|>
operator|)
name|super
operator|.
name|getRelationshipMap
argument_list|()
argument_list|)
expr_stmt|;
name|ObjEntity
name|superEntity
init|=
name|getSuperEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|superEntity
operator|!=
literal|null
condition|)
block|{
name|superEntity
operator|.
name|appendRelationships
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ObjRelationship
argument_list|>
name|getRelationships
parameter_list|()
block|{
if|if
condition|(
name|superEntityName
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|Collection
argument_list|<
name|ObjRelationship
argument_list|>
operator|)
name|super
operator|.
name|getRelationships
argument_list|()
return|;
block|}
return|return
name|getRelationshipMap
argument_list|()
operator|.
name|values
argument_list|()
return|;
block|}
comment|/**      * Returns a Collection of all relationships that belong to this ObjEntity,      * excluding inherited attributes.      *       * @since 1.1      */
specifier|public
name|Collection
argument_list|<
name|ObjRelationship
argument_list|>
name|getDeclaredRelationships
parameter_list|()
block|{
return|return
operator|(
name|Collection
argument_list|<
name|ObjRelationship
argument_list|>
operator|)
name|super
operator|.
name|getRelationships
argument_list|()
return|;
block|}
comment|/**      * Returns ObjAttribute of this entity that maps to<code>dbAttribute</code>      * parameter. Returns null if no such attribute is found.      */
specifier|public
name|ObjAttribute
name|getAttributeForDbAttribute
parameter_list|(
name|DbAttribute
name|dbAttribute
parameter_list|)
block|{
for|for
control|(
name|ObjAttribute
name|next
range|:
name|getAttributeMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|next
operator|instanceof
name|EmbeddedAttribute
condition|)
block|{
name|ObjAttribute
name|embeddedAttribute
init|=
operator|(
operator|(
name|EmbeddedAttribute
operator|)
name|next
operator|)
operator|.
name|getAttributeForDbPath
argument_list|(
name|dbAttribute
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|embeddedAttribute
operator|!=
literal|null
condition|)
block|{
return|return
name|embeddedAttribute
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|next
operator|.
name|getDbAttribute
argument_list|()
operator|==
name|dbAttribute
condition|)
block|{
return|return
name|next
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns the names of DbAtributes that comprise the primary key of the      * parent DbEntity.      *       * @since 3.0      */
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getPrimaryKeyNames
parameter_list|()
block|{
name|DbEntity
name|dbEntity
init|=
name|getDbEntity
argument_list|()
decl_stmt|;
comment|// abstract entities may have no DbEntity mapping
if|if
condition|(
name|dbEntity
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
name|pkAttributes
init|=
name|dbEntity
operator|.
name|getPrimaryKeys
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|pkAttributes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DbAttribute
name|pk
range|:
name|pkAttributes
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|pk
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|names
argument_list|)
return|;
block|}
comment|/**      * Returns ObjRelationship of this entity that maps to      *<code>dbRelationship</code> parameter. Returns null if no such      * relationship is found.      */
specifier|public
name|ObjRelationship
name|getRelationshipForDbRelationship
parameter_list|(
name|DbRelationship
name|dbRelationship
parameter_list|)
block|{
for|for
control|(
name|ObjRelationship
name|objRel
range|:
name|getRelationshipMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|List
argument_list|<
name|DbRelationship
argument_list|>
name|relList
init|=
name|objRel
operator|.
name|getDbRelationships
argument_list|()
decl_stmt|;
if|if
condition|(
name|relList
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|relList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
name|dbRelationship
condition|)
block|{
return|return
name|objRel
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Clears all the mapping between this obj entity and its current db entity.      * Clears mapping between entities, attributes and relationships.      */
specifier|public
name|void
name|clearDbMapping
parameter_list|()
block|{
if|if
condition|(
name|dbEntityName
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|ObjAttribute
name|attribute
range|:
name|getAttributeMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|DbAttribute
name|dbAttr
init|=
name|attribute
operator|.
name|getDbAttribute
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbAttr
operator|!=
literal|null
condition|)
block|{
name|attribute
operator|.
name|setDbAttributePath
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ObjRelationship
name|relationship
range|:
name|getRelationships
argument_list|()
control|)
block|{
name|relationship
operator|.
name|clearDbRelationships
argument_list|()
expr_stmt|;
block|}
name|dbEntityName
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Returns<code>true</code> if this ObjEntity represents a set of read-only      * objects.      *       * @return boolean      */
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
block|{
return|return
name|readOnly
return|;
block|}
specifier|public
name|void
name|setReadOnly
parameter_list|(
name|boolean
name|readOnly
parameter_list|)
block|{
name|this
operator|.
name|readOnly
operator|=
name|readOnly
expr_stmt|;
block|}
comment|/**      * Returns true if this entity directly or indirectly inherits from a given      * entity, false otherwise.      *       * @since 1.1      */
specifier|public
name|boolean
name|isSubentityOf
parameter_list|(
name|ObjEntity
name|entity
parameter_list|)
block|{
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|entity
operator|==
name|this
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ObjEntity
name|superEntity
init|=
name|getSuperEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|superEntity
operator|==
name|entity
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
operator|(
name|superEntity
operator|!=
literal|null
operator|)
condition|?
name|superEntity
operator|.
name|isSubentityOf
argument_list|(
name|entity
argument_list|)
else|:
literal|false
return|;
block|}
comment|/**      * @since 3.0      */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|PathComponent
argument_list|<
name|ObjAttribute
argument_list|,
name|ObjRelationship
argument_list|>
name|lastPathComponent
parameter_list|(
name|Expression
name|path
parameter_list|,
name|Map
name|aliasMap
parameter_list|)
block|{
return|return
name|super
operator|.
name|lastPathComponent
argument_list|(
name|path
argument_list|,
name|aliasMap
argument_list|)
return|;
block|}
comment|/**      * Returns an Iterable instance over expression path components based on      * this entity.      *       * @since 3.0      */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Iterable
argument_list|<
name|PathComponent
argument_list|<
name|ObjAttribute
argument_list|,
name|ObjRelationship
argument_list|>
argument_list|>
name|resolvePath
parameter_list|(
specifier|final
name|Expression
name|pathExp
parameter_list|,
specifier|final
name|Map
name|aliasMap
parameter_list|)
block|{
if|if
condition|(
name|pathExp
operator|.
name|getType
argument_list|()
operator|==
name|Expression
operator|.
name|OBJ_PATH
condition|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|PathComponent
argument_list|<
name|ObjAttribute
argument_list|,
name|ObjRelationship
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|PathComponentIterator
argument_list|(
name|ObjEntity
operator|.
name|this
argument_list|,
operator|(
name|String
operator|)
name|pathExp
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|,
name|aliasMap
argument_list|)
return|;
block|}
block|}
return|;
block|}
throw|throw
operator|new
name|ExpressionException
argument_list|(
literal|"Invalid expression type: '"
operator|+
name|pathExp
operator|.
name|expName
argument_list|()
operator|+
literal|"',  OBJ_PATH is expected."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|CayenneMapEntry
argument_list|>
name|resolvePathComponents
parameter_list|(
name|Expression
name|pathExp
parameter_list|)
throws|throws
name|ExpressionException
block|{
comment|// resolve DB_PATH if we can
if|if
condition|(
name|pathExp
operator|.
name|getType
argument_list|()
operator|==
name|Expression
operator|.
name|DB_PATH
condition|)
block|{
if|if
condition|(
name|getDbEntity
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ExpressionException
argument_list|(
literal|"Can't resolve DB_PATH '"
operator|+
name|pathExp
operator|+
literal|"', DbEntity is not set."
argument_list|)
throw|;
block|}
return|return
name|getDbEntity
argument_list|()
operator|.
name|resolvePathComponents
argument_list|(
name|pathExp
argument_list|)
return|;
block|}
if|if
condition|(
name|pathExp
operator|.
name|getType
argument_list|()
operator|==
name|Expression
operator|.
name|OBJ_PATH
condition|)
block|{
return|return
operator|new
name|PathIterator
argument_list|(
operator|(
name|String
operator|)
name|pathExp
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|ExpressionException
argument_list|(
literal|"Invalid expression type: '"
operator|+
name|pathExp
operator|.
name|expName
argument_list|()
operator|+
literal|"',  OBJ_PATH is expected."
argument_list|)
throw|;
block|}
comment|/**      * Transforms an Expression to an analogous expression in terms of the      * underlying DbEntity.      *       * @since 1.1      */
specifier|public
name|Expression
name|translateToDbPath
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|getDbEntity
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't translate expression to DB_PATH, no DbEntity for '"
operator|+
name|getName
argument_list|()
operator|+
literal|"'."
argument_list|)
throw|;
block|}
comment|// converts all OBJ_PATH expressions to DB_PATH expressions
comment|// and pass control to the DB entity
return|return
name|expression
operator|.
name|transform
argument_list|(
operator|new
name|DBPathConverter
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Transforms an Expression rooted in this entity to an analogous expression      * rooted in related entity.      *       * @since 1.1      */
annotation|@
name|Override
specifier|public
name|Expression
name|translateToRelatedEntity
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|String
name|relationshipPath
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|relationshipPath
operator|==
literal|null
condition|)
block|{
return|return
name|expression
return|;
block|}
if|if
condition|(
name|getDbEntity
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't transform expression, no DbEntity for '"
operator|+
name|getName
argument_list|()
operator|+
literal|"'."
argument_list|)
throw|;
block|}
comment|// converts all OBJ_PATH expressions to DB_PATH expressions
comment|// and pass control to the DB entity
name|DBPathConverter
name|transformer
init|=
operator|new
name|DBPathConverter
argument_list|()
decl_stmt|;
name|String
name|dbPath
init|=
name|transformer
operator|.
name|toDbPath
argument_list|(
name|createPathIterator
argument_list|(
name|relationshipPath
argument_list|)
argument_list|)
decl_stmt|;
name|Expression
name|dbClone
init|=
name|expression
operator|.
name|transform
argument_list|(
name|transformer
argument_list|)
decl_stmt|;
return|return
name|getDbEntity
argument_list|()
operator|.
name|translateToRelatedEntity
argument_list|(
name|dbClone
argument_list|,
name|dbPath
argument_list|)
return|;
block|}
specifier|private
name|PathComponentIterator
name|createPathIterator
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|new
name|PathComponentIterator
argument_list|(
name|ObjEntity
operator|.
name|this
argument_list|,
name|path
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
return|;
comment|// TODO:
comment|// do
comment|// we
comment|// need
comment|// aliases
comment|// here?
block|}
comment|/**      * @since 4.0      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getCallbackMethods
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CallbackDescriptor
name|descriptor
range|:
name|getCallbackMap
argument_list|()
operator|.
name|getCallbacks
argument_list|()
control|)
block|{
name|res
operator|.
name|addAll
argument_list|(
name|descriptor
operator|.
name|getCallbackMethods
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
specifier|final
class|class
name|DBPathConverter
implements|implements
name|Transformer
block|{
comment|// TODO: make it a public method - resolveDBPathComponents or
comment|// something...
comment|// seems generally useful
name|String
name|toDbPath
parameter_list|(
name|PathComponentIterator
name|objectPathComponents
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|objectPathComponents
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PathComponent
argument_list|<
name|Attribute
argument_list|,
name|Relationship
argument_list|>
name|component
init|=
name|objectPathComponents
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|dbSubpath
decl_stmt|;
if|if
condition|(
name|component
operator|.
name|getAttribute
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|dbSubpath
operator|=
operator|(
operator|(
name|ObjAttribute
operator|)
name|component
operator|.
name|getAttribute
argument_list|()
operator|)
operator|.
name|getDbPathIterator
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|component
operator|.
name|getRelationship
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|dbSubpath
operator|=
operator|(
operator|(
name|ObjRelationship
operator|)
name|component
operator|.
name|getRelationship
argument_list|()
operator|)
operator|.
name|getDbRelationships
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unknown path component: "
operator|+
name|component
argument_list|)
throw|;
block|}
while|while
condition|(
name|dbSubpath
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CayenneMapEntry
name|subComponent
init|=
operator|(
name|CayenneMapEntry
operator|)
name|dbSubpath
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|Entity
operator|.
name|PATH_SEPARATOR
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|subComponent
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// use OUTER join for all components of the path is Obj path is OUTER
if|if
condition|(
name|component
operator|.
name|getJoinType
argument_list|()
operator|==
name|JoinType
operator|.
name|LEFT_OUTER
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|OUTER_JOIN_INDICATOR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Object
name|transform
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|input
operator|instanceof
name|Expression
operator|)
condition|)
block|{
return|return
name|input
return|;
block|}
name|Expression
name|expression
init|=
operator|(
name|Expression
operator|)
name|input
decl_stmt|;
if|if
condition|(
name|expression
operator|.
name|getType
argument_list|()
operator|!=
name|Expression
operator|.
name|OBJ_PATH
condition|)
block|{
return|return
name|input
return|;
block|}
comment|// convert obj_path to db_path
name|String
name|converted
init|=
name|toDbPath
argument_list|(
name|createPathIterator
argument_list|(
operator|(
name|String
operator|)
name|expression
operator|.
name|getOperand
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Expression
name|exp
init|=
name|ExpressionFactory
operator|.
name|expressionOfType
argument_list|(
name|Expression
operator|.
name|DB_PATH
argument_list|)
decl_stmt|;
name|exp
operator|.
name|setOperand
argument_list|(
literal|0
argument_list|,
name|converted
argument_list|)
expr_stmt|;
return|return
name|exp
return|;
block|}
block|}
comment|/**      * Returns the name of the underlying DbEntity.      *       * @since 1.1      */
specifier|public
name|String
name|getDbEntityName
parameter_list|()
block|{
return|return
name|dbEntityName
return|;
block|}
comment|/**      * Sets the name of underlying DbEntity.      *       * @since 1.1      */
specifier|public
name|void
name|setDbEntityName
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|dbEntityName
operator|=
name|string
expr_stmt|;
block|}
comment|/**      * ObjEntity property changed. May be name, attribute or relationship added      * or removed, etc. Attribute and relationship property changes are handled      * in respective listeners.      *       * @since 1.2      */
specifier|public
name|void
name|objEntityChanged
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
name|e
operator|==
literal|null
operator|)
operator|||
operator|(
name|e
operator|.
name|getEntity
argument_list|()
operator|!=
name|this
operator|)
condition|)
block|{
comment|// not our concern
return|return;
block|}
comment|// handle entity name changes
if|if
condition|(
name|e
operator|.
name|getId
argument_list|()
operator|==
name|EntityEvent
operator|.
name|CHANGE
operator|&&
name|e
operator|.
name|isNameChange
argument_list|()
condition|)
block|{
name|String
name|oldName
init|=
name|e
operator|.
name|getOldName
argument_list|()
decl_stmt|;
name|String
name|newName
init|=
name|e
operator|.
name|getNewName
argument_list|()
decl_stmt|;
name|DataMap
name|map
init|=
name|getDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|ObjEntity
name|oe
init|=
operator|(
name|ObjEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjRelationship
name|relationship
range|:
name|oe
operator|.
name|getRelationships
argument_list|()
control|)
block|{
name|relationship
operator|=
name|relationship
operator|.
name|getReverseRelationship
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|relationship
operator|&&
name|relationship
operator|.
name|targetEntityName
operator|.
name|equals
argument_list|(
name|oldName
argument_list|)
condition|)
block|{
name|relationship
operator|.
name|targetEntityName
operator|=
name|newName
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/** New entity has been created/added. */
specifier|public
name|void
name|objEntityAdded
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
comment|// does nothing currently
block|}
comment|/** Entity has been removed. */
specifier|public
name|void
name|objEntityRemoved
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
comment|// does nothing currently
block|}
comment|/**      * Returns true if the default lifecycle listeners should not be notified of      * this entity lifecycle events.      *       * @since 3.0      * @deprecated since 4.0 unused, as listeners are no longer mapped in a      *             DataMap.      */
annotation|@
name|Deprecated
specifier|public
name|boolean
name|isExcludingDefaultListeners
parameter_list|()
block|{
return|return
name|excludingDefaultListeners
return|;
block|}
comment|/**      * @deprecated since 4.0 unused, as listeners are no longer mapped in a      *             DataMap.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|setExcludingDefaultListeners
parameter_list|(
name|boolean
name|excludingDefaultListeners
parameter_list|)
block|{
name|this
operator|.
name|excludingDefaultListeners
operator|=
name|excludingDefaultListeners
expr_stmt|;
block|}
comment|/**      * Returns true if the lifeycle listeners defined on the superclasses should      * not be notified of this entity lifecycle events.      *       * @since 3.0      * @deprecated since 4.0 unused, as listeners are no longer mapped in a      *             DataMap.      */
annotation|@
name|Deprecated
specifier|public
name|boolean
name|isExcludingSuperclassListeners
parameter_list|()
block|{
return|return
name|excludingSuperclassListeners
return|;
block|}
comment|/**      * @deprecated since 4.0 unused, as listeners are no longer mapped in a      *             DataMap.      */
annotation|@
name|Deprecated
specifier|public
name|void
name|setExcludingSuperclassListeners
parameter_list|(
name|boolean
name|excludingSuperclassListeners
parameter_list|)
block|{
name|this
operator|.
name|excludingSuperclassListeners
operator|=
name|excludingSuperclassListeners
expr_stmt|;
block|}
block|}
end_class

end_unit

