begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|velocity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|context
operator|.
name|InternalContextAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|exception
operator|.
name|MethodInvocationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|exception
operator|.
name|ParseErrorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|exception
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|Renderable
import|;
end_import

begin_comment
comment|/**  * A parameter value container that helps to may a single velocity variable to a  * sequence of positional parameters.  *   * @since 4.0  */
end_comment

begin_class
class|class
name|VelocityParamSequence
implements|implements
name|Renderable
block|{
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|parameters
decl_stmt|;
specifier|private
name|int
name|index
decl_stmt|;
name|VelocityParamSequence
parameter_list|()
block|{
name|this
operator|.
name|parameters
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|void
name|add
parameter_list|(
name|Object
name|parameter
parameter_list|)
block|{
name|parameters
operator|.
name|add
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
block|}
name|Object
name|next
parameter_list|()
block|{
return|return
name|parameters
operator|.
name|get
argument_list|(
name|index
operator|++
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|render
parameter_list|(
name|InternalContextAdapter
name|context
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
throws|,
name|MethodInvocationException
throws|,
name|ParseErrorException
throws|,
name|ResourceNotFoundException
block|{
comment|// rewind the list regardless of whether we produce any output
name|Object
name|next
init|=
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getAllowRendering
argument_list|()
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|next
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

