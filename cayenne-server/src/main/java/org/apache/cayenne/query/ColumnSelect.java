begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|BaseProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|ComparableProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|NumericProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|PropertyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_comment
comment|/**  *<p>A helper builder for queries selecting individual properties based on the root object.</p>  *<p>  *     It can be used to select properties of the object itself, properties of related entities  *     or some function calls (including aggregate functions).  *</p>  *<p>  * Usage examples:<pre>  * {@code  *      // select list of names:  *      List<String> names = ObjectSelect.columnQuery(Artist.class, Artist.ARTIST_NAME).select(context);  *  *      // select count:  *      long count = ObjectSelect.columnQuery(Artist.class, Property.COUNT).selectOne();  *  *      // select only required properties of an entity:  *      List<Object[]> data = ObjectSelect.columnQuery(Artist.class, Artist.ARTIST_NAME, Artist.DATE_OF_BIRTH)  *                                  .where(Artist.ARTIST_NAME.like("Picasso%))  *                                  .select(context);  * }  *</pre>  *</p>  *<p><b>Note: this class can't be instantiated directly. Use {@link ObjectSelect}.</b></p>  * @see ObjectSelect#columnQuery(Class, Property)  *  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|ColumnSelect
parameter_list|<
name|T
parameter_list|>
extends|extends
name|FluentSelect
argument_list|<
name|T
argument_list|,
name|ColumnSelect
argument_list|<
name|T
argument_list|>
argument_list|>
block|{
specifier|protected
name|Collection
argument_list|<
name|Property
argument_list|<
name|?
argument_list|>
argument_list|>
name|columns
decl_stmt|;
specifier|protected
name|boolean
name|singleColumn
init|=
literal|true
decl_stmt|;
specifier|protected
name|ColumnSelect
parameter_list|()
block|{
block|}
comment|/**      * Copy constructor to convert ObjectSelect to ColumnSelect      */
specifier|protected
name|ColumnSelect
parameter_list|(
name|ObjectSelect
argument_list|<
name|T
argument_list|>
name|select
parameter_list|)
block|{
name|this
operator|.
name|entityType
operator|=
name|select
operator|.
name|entityType
expr_stmt|;
name|this
operator|.
name|entityName
operator|=
name|select
operator|.
name|entityName
expr_stmt|;
name|this
operator|.
name|dbEntityName
operator|=
name|select
operator|.
name|dbEntityName
expr_stmt|;
name|this
operator|.
name|where
operator|=
name|select
operator|.
name|where
expr_stmt|;
name|this
operator|.
name|having
operator|=
name|select
operator|.
name|having
expr_stmt|;
name|this
operator|.
name|orderings
operator|=
name|select
operator|.
name|orderings
expr_stmt|;
name|this
operator|.
name|metaData
operator|.
name|copyFromInfo
argument_list|(
name|select
operator|.
name|metaData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ColumnSelectMetadata
name|createMetadata
parameter_list|()
block|{
return|return
operator|new
name|ColumnSelectMetadata
argument_list|()
return|;
block|}
comment|/**      *<p>Add properties to select.</p>      *<p>Can be any properties that can be resolved against root entity type      * (root entity properties, function call expressions, properties of relationships, etc).</p>      *<p>      *<pre>      * {@code      * List<Object[]> columns = ObjectSelect.columnQuery(Artist.class, Artist.ARTIST_NAME)      *                                    .columns(Artist.ARTIST_SALARY, Artist.DATE_OF_BIRTH)      *                                    .select(context);      * }      *</pre>      *      * @param properties array of properties to select      * @see ColumnSelect#column(Property)      * @see ColumnSelect#columns(Collection)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|ColumnSelect
argument_list|<
name|Object
index|[]
argument_list|>
name|columns
parameter_list|(
name|Property
argument_list|<
name|?
argument_list|>
modifier|...
name|properties
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"properties must contain at least one element"
argument_list|)
throw|;
block|}
if|if
condition|(
name|columns
operator|==
literal|null
condition|)
block|{
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|properties
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|addAll
argument_list|(
name|columns
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|singleColumn
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ColumnSelect
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|this
return|;
block|}
comment|/**      *<p>Add properties to select.</p>      *<p>Can be any properties that can be resolved against root entity type      * (root entity properties, function call expressions, properties of relationships, etc).</p>      *<p>      * @param properties collection of properties,<b>must</b> contain at least one element      * @see ColumnSelect#columns(Property[])      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|ColumnSelect
argument_list|<
name|Object
index|[]
argument_list|>
name|columns
parameter_list|(
name|Collection
argument_list|<
name|Property
argument_list|<
name|?
argument_list|>
argument_list|>
name|properties
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"properties is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"properties must contain at least one element"
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|properties
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|columns
operator|.
name|addAll
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|singleColumn
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ColumnSelect
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|this
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
parameter_list|<
name|E
parameter_list|>
name|ColumnSelect
argument_list|<
name|E
argument_list|>
name|column
parameter_list|(
name|Property
argument_list|<
name|E
argument_list|>
name|property
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|columns
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// if we don't clear then return type will be incorrect
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|property
argument_list|)
expr_stmt|;
return|return
operator|(
name|ColumnSelect
argument_list|<
name|E
argument_list|>
operator|)
name|this
return|;
block|}
comment|/**      *<p>Shortcut for {@link #columns(Property[])} columns}(Property.COUNT)</p>      */
specifier|public
name|ColumnSelect
argument_list|<
name|Object
index|[]
argument_list|>
name|count
parameter_list|()
block|{
return|return
name|columns
argument_list|(
name|PropertyFactory
operator|.
name|COUNT
argument_list|)
return|;
block|}
comment|/**      *<p>Select COUNT(property)</p>      *<p>Can return different result than COUNT(*) as it will count only non null values</p>      * @see ColumnSelect#count()      */
specifier|public
name|ColumnSelect
argument_list|<
name|Object
index|[]
argument_list|>
name|count
parameter_list|(
name|BaseProperty
argument_list|<
name|?
argument_list|>
name|property
parameter_list|)
block|{
return|return
name|columns
argument_list|(
name|property
operator|.
name|count
argument_list|()
argument_list|)
return|;
block|}
comment|/**      *<p>Select minimum value of property</p>      * @see ColumnSelect#columns(Property[])      */
specifier|public
name|ColumnSelect
argument_list|<
name|Object
index|[]
argument_list|>
name|min
parameter_list|(
name|ComparableProperty
argument_list|<
name|?
argument_list|>
name|property
parameter_list|)
block|{
return|return
name|columns
argument_list|(
name|property
operator|.
name|min
argument_list|()
argument_list|)
return|;
block|}
comment|/**      *<p>Select maximum value of property</p>      * @see ColumnSelect#columns(Property[])      */
specifier|public
name|ColumnSelect
argument_list|<
name|Object
index|[]
argument_list|>
name|max
parameter_list|(
name|ComparableProperty
argument_list|<
name|?
argument_list|>
name|property
parameter_list|)
block|{
return|return
name|columns
argument_list|(
name|property
operator|.
name|max
argument_list|()
argument_list|)
return|;
block|}
comment|/**      *<p>Select average value of property</p>      * @see ColumnSelect#columns(Property[])      */
specifier|public
name|ColumnSelect
argument_list|<
name|Object
index|[]
argument_list|>
name|avg
parameter_list|(
name|NumericProperty
argument_list|<
name|?
argument_list|>
name|property
parameter_list|)
block|{
return|return
name|columns
argument_list|(
name|property
operator|.
name|avg
argument_list|()
argument_list|)
return|;
block|}
comment|/**      *<p>Select sum of values</p>      * @see ColumnSelect#columns(Property[])      */
specifier|public
parameter_list|<
name|E
extends|extends
name|Number
parameter_list|>
name|ColumnSelect
argument_list|<
name|Object
index|[]
argument_list|>
name|sum
parameter_list|(
name|NumericProperty
argument_list|<
name|E
argument_list|>
name|property
parameter_list|)
block|{
return|return
name|columns
argument_list|(
name|property
operator|.
name|sum
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Appends a having qualifier expression of this query. An equivalent to      * {@link #and(Expression...)} that can be used a syntactic sugar.      *      * @return this object      */
specifier|public
name|ColumnSelect
argument_list|<
name|T
argument_list|>
name|having
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|havingExpressionIsActive
operator|=
literal|true
expr_stmt|;
return|return
name|and
argument_list|(
name|expression
argument_list|)
return|;
block|}
comment|/**      * Appends a having qualifier expression of this query, using provided expression      * String and an array of position parameters. This is an equivalent to      * calling "and".      *      * @return this object      */
specifier|public
name|ColumnSelect
argument_list|<
name|T
argument_list|>
name|having
parameter_list|(
name|String
name|expressionString
parameter_list|,
name|Object
modifier|...
name|parameters
parameter_list|)
block|{
name|havingExpressionIsActive
operator|=
literal|true
expr_stmt|;
return|return
name|and
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
name|expressionString
argument_list|,
name|parameters
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Explicitly request distinct in query.      */
specifier|public
name|ColumnSelect
argument_list|<
name|T
argument_list|>
name|distinct
parameter_list|()
block|{
name|getBaseMetaData
argument_list|()
operator|.
name|setSuppressingDistinct
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|distinct
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Explicitly suppress distinct in query.      */
specifier|public
name|ColumnSelect
argument_list|<
name|T
argument_list|>
name|suppressDistinct
parameter_list|()
block|{
name|getBaseMetaData
argument_list|()
operator|.
name|setSuppressingDistinct
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|distinct
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Property
argument_list|<
name|?
argument_list|>
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|columns
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|selectFirst
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|selectFirst
argument_list|(
name|limit
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
name|boolean
name|isSingleColumn
parameter_list|()
block|{
return|return
name|singleColumn
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryMetadata
name|getMetaData
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
name|Object
name|root
init|=
name|resolveRoot
argument_list|(
name|resolver
argument_list|)
decl_stmt|;
name|getBaseMetaData
argument_list|()
operator|.
name|resolve
argument_list|(
name|root
argument_list|,
name|resolver
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|metaData
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ColumnSelectMetadata
name|getBaseMetaData
parameter_list|()
block|{
return|return
operator|(
name|ColumnSelectMetadata
operator|)
name|metaData
return|;
block|}
comment|/**      * Maps result of this query by processing with a given function.      *<br/>      * Could be used to map plain Object[] to some domain-specific object.      *<br/>      *<b>Note:</b> this method could be called multiple time, result will be mapped by all functions in the call order.      * @param mapper function that maps result to the required type.      * @return this query with changed result type      * @param<E> new result type      *      * @since 4.2      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|E
parameter_list|>
name|ColumnSelect
argument_list|<
name|E
argument_list|>
name|map
parameter_list|(
name|Function
argument_list|<
name|T
argument_list|,
name|E
argument_list|>
name|mapper
parameter_list|)
block|{
name|getBaseMetaData
argument_list|()
operator|.
name|setResultMapper
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
return|return
operator|(
name|ColumnSelect
argument_list|<
name|E
argument_list|>
operator|)
name|this
return|;
block|}
block|}
end_class

end_unit

