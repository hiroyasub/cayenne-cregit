begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_comment
comment|/**  *<p>A selecting query providing individual properties based on the root object.</p>  *<p>  *     It can be properties of the object itself, properties of related entities  *     or some function calls (including aggregate functions).  *</p><p>  * Usage examples:<pre>  *      // select list of names:  *      List&lt;String&gt; names = ColumnSelect.query(Artist.class, Artist.ARTIST_NAME).select(context);  *  *      // select count:  *      Property<Long> countProperty = Property.create(FunctionExpressionFactory.countExp(), Long.class);  *      long count = ColumnSelect.query(Artist.class, countProperty).selectOne();  *  *      // select only required properties of an entity:  *      List&lt;Object[]&gt; data = ColumnSelect.query(Artist.class, Artist.ARTIST_NAME, Artist.DATE_OF_BIRTH)  *                                  .where(Artist.ARTIST_NAME.like("Picasso%))  *                                  .select(context);  *</pre></p>  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|ColumnSelect
parameter_list|<
name|T
parameter_list|>
extends|extends
name|FluentSelect
argument_list|<
name|T
argument_list|,
name|ColumnSelect
argument_list|<
name|T
argument_list|>
argument_list|>
block|{
specifier|private
name|Collection
argument_list|<
name|Property
argument_list|<
name|?
argument_list|>
argument_list|>
name|columns
decl_stmt|;
specifier|private
name|boolean
name|havingExpressionIsActive
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|singleColumn
init|=
literal|true
decl_stmt|;
specifier|private
name|Expression
name|having
decl_stmt|;
comment|/**      *      * @param entityType base persistent class that will be used as a root for this query      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|ColumnSelect
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|entityType
parameter_list|)
block|{
return|return
operator|new
name|ColumnSelect
argument_list|<
name|T
argument_list|>
argument_list|()
operator|.
name|entityType
argument_list|(
name|entityType
argument_list|)
return|;
block|}
comment|/**      *      * @param entityType base persistent class that will be used as a root for this query      * @param column single column to select      */
specifier|public
specifier|static
parameter_list|<
name|E
parameter_list|>
name|ColumnSelect
argument_list|<
name|E
argument_list|>
name|query
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|entityType
parameter_list|,
name|Property
argument_list|<
name|E
argument_list|>
name|column
parameter_list|)
block|{
return|return
operator|new
name|ColumnSelect
argument_list|<>
argument_list|()
operator|.
name|entityType
argument_list|(
name|entityType
argument_list|)
operator|.
name|column
argument_list|(
name|column
argument_list|)
return|;
block|}
comment|/**      *      * @param entityType base persistent class that will be used as a root for this query      * @param firstColumn column to select      * @param otherColumns columns to select      */
specifier|public
specifier|static
name|ColumnSelect
argument_list|<
name|Object
index|[]
argument_list|>
name|query
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|entityType
parameter_list|,
name|Property
argument_list|<
name|?
argument_list|>
name|firstColumn
parameter_list|,
name|Property
argument_list|<
name|?
argument_list|>
modifier|...
name|otherColumns
parameter_list|)
block|{
return|return
operator|new
name|ColumnSelect
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
operator|.
name|entityType
argument_list|(
name|entityType
argument_list|)
operator|.
name|columns
argument_list|(
name|firstColumn
argument_list|,
name|otherColumns
argument_list|)
return|;
block|}
specifier|protected
name|ColumnSelect
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Copy constructor to convert ObjectSelect to ColumnSelect      */
specifier|protected
name|ColumnSelect
parameter_list|(
name|ObjectSelect
argument_list|<
name|T
argument_list|>
name|select
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|entityType
operator|=
name|select
operator|.
name|entityType
expr_stmt|;
name|this
operator|.
name|entityName
operator|=
name|select
operator|.
name|entityName
expr_stmt|;
name|this
operator|.
name|dbEntityName
operator|=
name|select
operator|.
name|dbEntityName
expr_stmt|;
name|this
operator|.
name|where
operator|=
name|select
operator|.
name|where
expr_stmt|;
name|this
operator|.
name|orderings
operator|=
name|select
operator|.
name|orderings
expr_stmt|;
name|this
operator|.
name|prefetches
operator|=
name|select
operator|.
name|prefetches
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|select
operator|.
name|limit
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|select
operator|.
name|offset
expr_stmt|;
name|this
operator|.
name|pageSize
operator|=
name|select
operator|.
name|pageSize
expr_stmt|;
name|this
operator|.
name|statementFetchSize
operator|=
name|select
operator|.
name|statementFetchSize
expr_stmt|;
name|this
operator|.
name|cacheStrategy
operator|=
name|select
operator|.
name|cacheStrategy
expr_stmt|;
name|this
operator|.
name|cacheGroups
operator|=
name|select
operator|.
name|cacheGroups
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Query
name|createReplacementQuery
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
name|SelectQuery
argument_list|<
name|?
argument_list|>
name|replacement
init|=
operator|(
name|SelectQuery
operator|)
name|super
operator|.
name|createReplacementQuery
argument_list|(
name|resolver
argument_list|)
decl_stmt|;
name|replacement
operator|.
name|setColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|replacement
operator|.
name|setHavingQualifier
argument_list|(
name|having
argument_list|)
expr_stmt|;
name|replacement
operator|.
name|setCanReturnScalarValue
argument_list|(
name|singleColumn
argument_list|)
expr_stmt|;
return|return
name|replacement
return|;
block|}
comment|/**      *<p>Select only specific properties.</p>      *<p>Can be any properties that can be resolved against root entity type      * (root entity properties, function call expressions, properties of relationships, etc).</p>      *<p>      *<pre>      * List&lt;Object[]&gt; columns = ColumnSelect.query(Artist.class)      *                                    .columns(Artist.ARTIST_NAME, Artist.DATE_OF_BIRTH)      *                                    .select(context);      *</pre>      *      * @param firstProperty first property      * @param otherProperties array of properties to select      * @see ColumnSelect#column(Property)      * @see ColumnSelect#columns(Collection)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|ColumnSelect
argument_list|<
name|Object
index|[]
argument_list|>
name|columns
parameter_list|(
name|Property
argument_list|<
name|?
argument_list|>
name|firstProperty
parameter_list|,
name|Property
argument_list|<
name|?
argument_list|>
modifier|...
name|otherProperties
parameter_list|)
block|{
if|if
condition|(
name|columns
operator|==
literal|null
condition|)
block|{
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|otherProperties
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|columns
operator|.
name|add
argument_list|(
name|firstProperty
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|columns
argument_list|,
name|otherProperties
argument_list|)
expr_stmt|;
name|singleColumn
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ColumnSelect
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|this
return|;
block|}
comment|/**      *<p>Select only specific properties.</p>      *<p>Can be any properties that can be resolved against root entity type      * (root entity properties, function call expressions, properties of relationships, etc).</p>      *<p>      * @param properties collection of properties,<b>must</b> contain at least one element      * @see ColumnSelect#columns(Property, Property[])      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|ColumnSelect
argument_list|<
name|Object
index|[]
argument_list|>
name|columns
parameter_list|(
name|Collection
argument_list|<
name|Property
argument_list|<
name|?
argument_list|>
argument_list|>
name|properties
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"properties is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"properties must contain at least one element"
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|properties
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|columns
operator|.
name|addAll
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|singleColumn
operator|=
literal|false
expr_stmt|;
return|return
operator|(
name|ColumnSelect
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|this
return|;
block|}
comment|/**      *<p>Select one specific property.</p>      *<p>Can be any property that can be resolved against root entity type      * (root entity property, function call expression, property of relationships, etc)</p>      *<p>If you need several columns use {@link ColumnSelect#columns(Property, Property[])} method as subsequent      * call to this method will override previous columns set via this or      * {@link ColumnSelect#columns(Property, Property[])} method.</p>      *<p>      *<pre>      * List&lt;String&gt; names = ColumnSelect.query(Artist.class, Artist.ARTIST_NAME).select(context);      *</pre>      *      * @param property single property to select      * @see ColumnSelect#columns(Property, Property[])      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
parameter_list|<
name|E
parameter_list|>
name|ColumnSelect
argument_list|<
name|E
argument_list|>
name|column
parameter_list|(
name|Property
argument_list|<
name|E
argument_list|>
name|property
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|columns
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|columns
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|columns
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// if we don't clear then return type will be incorrect
block|}
name|this
operator|.
name|columns
operator|.
name|add
argument_list|(
name|property
argument_list|)
expr_stmt|;
return|return
operator|(
name|ColumnSelect
argument_list|<
name|E
argument_list|>
operator|)
name|this
return|;
block|}
comment|/**      * Appends a having qualifier expression of this query. An equivalent to      * {@link #and(Expression...)} that can be used a syntactic sugar.      *      * @return this object      */
specifier|public
name|ColumnSelect
argument_list|<
name|T
argument_list|>
name|having
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|havingExpressionIsActive
operator|=
literal|true
expr_stmt|;
return|return
name|and
argument_list|(
name|expression
argument_list|)
return|;
block|}
comment|/**      * Appends a having qualifier expression of this query, using provided expression      * String and an array of position parameters. This is an equivalent to      * calling "and".      *      * @return this object      */
specifier|public
name|ColumnSelect
argument_list|<
name|T
argument_list|>
name|having
parameter_list|(
name|String
name|expressionString
parameter_list|,
name|Object
modifier|...
name|parameters
parameter_list|)
block|{
name|havingExpressionIsActive
operator|=
literal|true
expr_stmt|;
return|return
name|and
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
name|expressionString
argument_list|,
name|parameters
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * AND's provided expressions to the existing WHERE or HAVING clause expression.      *      * @return this object      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|ColumnSelect
argument_list|<
name|T
argument_list|>
name|and
parameter_list|(
name|Collection
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|)
block|{
if|if
condition|(
name|expressions
operator|==
literal|null
operator|||
name|expressions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
name|Collection
argument_list|<
name|Expression
argument_list|>
name|all
decl_stmt|;
name|Expression
name|activeExpression
init|=
name|getActiveExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|activeExpression
operator|!=
literal|null
condition|)
block|{
name|all
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|expressions
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|all
operator|.
name|add
argument_list|(
name|activeExpression
argument_list|)
expr_stmt|;
name|all
operator|.
name|addAll
argument_list|(
name|expressions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|all
operator|=
name|expressions
expr_stmt|;
block|}
name|setActiveExpression
argument_list|(
name|ExpressionFactory
operator|.
name|and
argument_list|(
name|all
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * OR's provided expressions to the existing WHERE or HAVING clause expression.      *      * @return this object      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|ColumnSelect
argument_list|<
name|T
argument_list|>
name|or
parameter_list|(
name|Collection
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|)
block|{
if|if
condition|(
name|expressions
operator|==
literal|null
operator|||
name|expressions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
name|Collection
argument_list|<
name|Expression
argument_list|>
name|all
decl_stmt|;
name|Expression
name|activeExpression
init|=
name|getActiveExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|activeExpression
operator|!=
literal|null
condition|)
block|{
name|all
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|expressions
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|all
operator|.
name|add
argument_list|(
name|activeExpression
argument_list|)
expr_stmt|;
name|all
operator|.
name|addAll
argument_list|(
name|expressions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|all
operator|=
name|expressions
expr_stmt|;
block|}
name|setActiveExpression
argument_list|(
name|ExpressionFactory
operator|.
name|or
argument_list|(
name|all
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|void
name|setActiveExpression
parameter_list|(
name|Expression
name|exp
parameter_list|)
block|{
if|if
condition|(
name|havingExpressionIsActive
condition|)
block|{
name|having
operator|=
name|exp
expr_stmt|;
block|}
else|else
block|{
name|where
operator|=
name|exp
expr_stmt|;
block|}
block|}
specifier|private
name|Expression
name|getActiveExpression
parameter_list|()
block|{
if|if
condition|(
name|havingExpressionIsActive
condition|)
block|{
return|return
name|having
return|;
block|}
else|else
block|{
return|return
name|where
return|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|Property
argument_list|<
name|?
argument_list|>
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
name|columns
return|;
block|}
comment|/**      * Returns a HAVING clause Expression of this query.      */
specifier|public
name|Expression
name|getHaving
parameter_list|()
block|{
return|return
name|having
return|;
block|}
block|}
end_class

end_unit

