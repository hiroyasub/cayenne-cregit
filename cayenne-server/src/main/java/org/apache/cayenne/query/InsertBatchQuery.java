begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Batched INSERT query. Allows inserting multiple object snapshots (DataRows)  * for a given DbEntity in a single query. InsertBatchQuery normally is not used  * directly. Rather DataContext creates one internally when committing  * DataObjects.  */
end_comment

begin_class
specifier|public
class|class
name|InsertBatchQuery
extends|extends
name|BatchQuery
block|{
comment|/**      * Creates new InsertBatchQuery for a given DbEntity and estimated capacity.      */
specifier|public
name|InsertBatchQuery
parameter_list|(
name|DbEntity
name|entity
parameter_list|,
name|int
name|batchCapacity
parameter_list|)
block|{
name|super
argument_list|(
name|entity
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|entity
operator|.
name|getAttributes
argument_list|()
argument_list|)
argument_list|,
name|batchCapacity
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a snapshot to batch. A shortcut for "add(snapshot, null)".      */
specifier|public
name|void
name|add
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|snapshot
parameter_list|)
block|{
name|add
argument_list|(
name|snapshot
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a snapshot to batch. Optionally stores the object id for the      * snapshot. Note that snapshot can hold either the real values or the      * instances of java.util.Supplier that will be resolved      * to the actual value on the spot, thus allowing deferred propagated keys      * resolution.      *       * @since 1.2      */
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|snapshot
parameter_list|,
name|ObjectId
name|id
parameter_list|)
block|{
name|rows
operator|.
name|add
argument_list|(
operator|new
name|BatchQueryRow
argument_list|(
name|id
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Object
name|getValue
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getValue
argument_list|(
name|snapshot
argument_list|,
name|dbAttributes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

