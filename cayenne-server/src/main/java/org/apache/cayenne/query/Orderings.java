begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**   *<p>Orderings is provided so that you can chain Ordering together and then use    * the result to pass into methods that require List&lt;Ordering&gt;</p>   *<p>Example:</p>   *<pre>Person.COMPANY_NAME.asc().then(Person.FIRST_NAME.desc)</pre>   *    * @since 4.0   */
end_comment

begin_class
specifier|public
class|class
name|Orderings
extends|extends
name|ArrayList
argument_list|<
name|Ordering
argument_list|>
block|{
specifier|public
name|Orderings
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Orderings
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Orderings
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Ordering
argument_list|>
name|c
parameter_list|)
block|{
name|super
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Orderings
parameter_list|(
name|Ordering
name|ordering
parameter_list|)
block|{
name|super
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ordering
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Orderings
parameter_list|(
name|Ordering
modifier|...
name|orderings
parameter_list|)
block|{
name|super
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|orderings
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Adds the given sort ordering to the end of this list and 	 * returns "this" so it can be chained again. 	 *  	 * @param nextOrdering the sort ordering to add 	 * @return this (with nextOrdering appended) 	 */
specifier|public
name|Orderings
name|then
parameter_list|(
name|Ordering
name|nextOrdering
parameter_list|)
block|{
name|add
argument_list|(
name|nextOrdering
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** 	 * Adds the given sort orderings to the end of this list and returns 	 * "this" so it can be chained again. 	 *  	 * @param nextOrderings the sort ordering to add 	 * @return this (with nextOrderings appended) 	 */
specifier|public
name|Orderings
name|then
parameter_list|(
name|Orderings
name|nextOrderings
parameter_list|)
block|{
name|addAll
argument_list|(
name|nextOrderings
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** 	 * @see Orderings#then(Orderings) 	 * @param nextOrderings 	 * @return 	 */
specifier|public
name|Orderings
name|then
parameter_list|(
name|List
argument_list|<
name|Ordering
argument_list|>
name|nextOrderings
parameter_list|)
block|{
name|addAll
argument_list|(
name|nextOrderings
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** 	 * Returns an list sorted with these Orderings. 	 *  	 * @param<T> the type of the list 	 * @param list the list to sort 	 * @return a sorted copy of the list 	 */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|orderedList
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|Ordering
operator|.
name|orderedList
argument_list|(
name|list
argument_list|,
name|this
argument_list|)
return|;
block|}
comment|/** 	 * Sorts the given array with these Orderings. 	 *  	 * @param<T> the type of the list 	 * @param list the list to sort 	 */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|orderList
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
name|Ordering
operator|.
name|orderList
argument_list|(
name|list
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

