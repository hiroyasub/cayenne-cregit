begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|TraversalHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|BaseProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
class|class
name|ObjectSelectMetadata
extends|extends
name|BaseQueryMetadata
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|4936484509363047672L
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pathSplitAliases
decl_stmt|;
annotation|@
name|Override
name|void
name|copyFromInfo
parameter_list|(
name|QueryMetadata
name|info
parameter_list|)
block|{
name|super
operator|.
name|copyFromInfo
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|this
operator|.
name|pathSplitAliases
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|info
operator|.
name|getPathSplitAliases
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|resolve
parameter_list|(
name|Object
name|root
parameter_list|,
name|EntityResolver
name|resolver
parameter_list|,
name|ObjectSelect
argument_list|<
name|?
argument_list|>
name|query
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|resolve
argument_list|(
name|root
argument_list|,
name|resolver
argument_list|)
condition|)
block|{
comment|// generate unique cache key, but only if we are caching..
if|if
condition|(
name|cacheStrategy
operator|!=
literal|null
operator|&&
name|cacheStrategy
operator|!=
name|QueryCacheStrategy
operator|.
name|NO_CACHE
condition|)
block|{
name|this
operator|.
name|cacheKey
operator|=
name|makeCacheKey
argument_list|(
name|query
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
block|}
name|resolveAutoAliases
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|String
name|makeCacheKey
parameter_list|(
name|FluentSelect
argument_list|<
name|?
argument_list|>
name|query
parameter_list|,
name|EntityResolver
name|resolver
parameter_list|)
block|{
comment|// create a unique key based on entity or columns, qualifier, ordering, fetch offset and limit
name|StringBuilder
name|key
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// handler to create string out of expressions, created lazily
name|TraversalHandler
name|traversalHandler
init|=
literal|null
decl_stmt|;
name|ObjEntity
name|entity
init|=
name|getObjEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|key
operator|.
name|append
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dbEntity
operator|!=
literal|null
condition|)
block|{
name|key
operator|.
name|append
argument_list|(
literal|"db:"
argument_list|)
operator|.
name|append
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|.
name|getColumns
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|query
operator|.
name|getColumns
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|traversalHandler
operator|=
operator|new
name|ToCacheKeyTraversalHandler
argument_list|(
name|resolver
operator|.
name|getValueObjectTypeRegistry
argument_list|()
argument_list|,
name|key
argument_list|)
expr_stmt|;
for|for
control|(
name|BaseProperty
argument_list|<
name|?
argument_list|>
name|property
range|:
name|query
operator|.
name|getColumns
argument_list|()
control|)
block|{
name|key
operator|.
name|append
argument_list|(
literal|"/c:"
argument_list|)
expr_stmt|;
name|property
operator|.
name|getExpression
argument_list|()
operator|.
name|traverse
argument_list|(
name|traversalHandler
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|query
operator|.
name|getWhere
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|key
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|traversalHandler
operator|=
operator|new
name|ToCacheKeyTraversalHandler
argument_list|(
name|resolver
operator|.
name|getValueObjectTypeRegistry
argument_list|()
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|query
operator|.
name|getWhere
argument_list|()
operator|.
name|traverse
argument_list|(
name|traversalHandler
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|.
name|getOrderings
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|query
operator|.
name|getOrderings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Ordering
name|o
range|:
name|query
operator|.
name|getOrderings
argument_list|()
control|)
block|{
name|key
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|o
operator|.
name|getSortSpecString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|o
operator|.
name|isAscending
argument_list|()
condition|)
block|{
name|key
operator|.
name|append
argument_list|(
literal|":d"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|.
name|isCaseInsensitive
argument_list|()
condition|)
block|{
name|key
operator|.
name|append
argument_list|(
literal|":i"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|fetchLimit
operator|>
literal|0
operator|||
name|fetchOffset
operator|>
literal|0
condition|)
block|{
name|key
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|fetchOffset
operator|>
literal|0
condition|)
block|{
name|key
operator|.
name|append
argument_list|(
literal|'o'
argument_list|)
operator|.
name|append
argument_list|(
name|fetchOffset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchLimit
operator|>
literal|0
condition|)
block|{
name|key
operator|.
name|append
argument_list|(
literal|'l'
argument_list|)
operator|.
name|append
argument_list|(
name|fetchLimit
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add prefetch to cache key per CAY-2349
if|if
condition|(
name|prefetchTree
operator|!=
literal|null
condition|)
block|{
name|prefetchTree
operator|.
name|traverse
argument_list|(
operator|new
name|ToCacheKeyPrefetchProcessor
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|key
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|void
name|resolveAutoAliases
parameter_list|(
name|FluentSelect
argument_list|<
name|?
argument_list|>
name|query
parameter_list|)
block|{
name|resolveQualifierAliases
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|resolveOrderingAliases
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|resolveHavingQualifierAliases
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|resolveQualifierAliases
parameter_list|(
name|FluentSelect
argument_list|<
name|?
argument_list|>
name|query
parameter_list|)
block|{
name|Expression
name|qualifier
init|=
name|query
operator|.
name|getWhere
argument_list|()
decl_stmt|;
if|if
condition|(
name|qualifier
operator|!=
literal|null
condition|)
block|{
name|resolveAutoAliases
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|resolveHavingQualifierAliases
parameter_list|(
name|FluentSelect
argument_list|<
name|?
argument_list|>
name|query
parameter_list|)
block|{
name|Expression
name|havingQualifier
init|=
name|query
operator|.
name|getHaving
argument_list|()
decl_stmt|;
if|if
condition|(
name|havingQualifier
operator|!=
literal|null
condition|)
block|{
name|resolveAutoAliases
argument_list|(
name|havingQualifier
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|resolveOrderingAliases
parameter_list|(
name|FluentSelect
argument_list|<
name|?
argument_list|>
name|query
parameter_list|)
block|{
name|Collection
argument_list|<
name|Ordering
argument_list|>
name|orderings
init|=
name|query
operator|.
name|getOrderings
argument_list|()
decl_stmt|;
if|if
condition|(
name|orderings
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Ordering
name|ordering
range|:
name|orderings
control|)
block|{
name|Expression
name|sortSpec
init|=
name|ordering
operator|.
name|getSortSpec
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortSpec
operator|!=
literal|null
condition|)
block|{
name|resolveAutoAliases
argument_list|(
name|sortSpec
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|resolveAutoAliases
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aliases
init|=
name|expression
operator|.
name|getPathAliases
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|aliases
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|pathSplitAliases
operator|==
literal|null
condition|)
block|{
name|pathSplitAliases
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|aliases
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|pathSplitAliases
operator|.
name|compute
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't add the same alias to different path segments."
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|entry
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|len
init|=
name|expression
operator|.
name|getOperandCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|operand
init|=
name|expression
operator|.
name|getOperand
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|operand
operator|instanceof
name|Expression
condition|)
block|{
name|resolveAutoAliases
argument_list|(
operator|(
name|Expression
operator|)
name|operand
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPathSplitAliases
parameter_list|()
block|{
return|return
name|pathSplitAliases
operator|!=
literal|null
condition|?
name|pathSplitAliases
else|:
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
block|}
end_class

end_unit

