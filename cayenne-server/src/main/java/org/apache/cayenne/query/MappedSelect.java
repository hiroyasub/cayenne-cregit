begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * https://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultBatchIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultIteratorCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|QueryDescriptor
import|;
end_import

begin_comment
comment|/**  * A query that represents a named parameterized selecting query stored in the mapping. The  * actual query is resolved during execution.  *  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|MappedSelect
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractMappedQuery
implements|implements
name|Select
argument_list|<
name|T
argument_list|>
block|{
comment|/**      * Loads query with the given name, which selects objects of a given persistent class,      * from the mapping configuration.      *      * @param queryName name of the mapped query      * @param rootClass the Class of objects fetched by this query      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|MappedSelect
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|String
name|queryName
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|rootClass
parameter_list|)
block|{
return|return
operator|new
name|MappedSelect
argument_list|<>
argument_list|(
name|queryName
argument_list|,
name|rootClass
argument_list|)
return|;
block|}
comment|/**      * Loads query with the given name from the mapping configuration.      *      * @param queryName name of the mapped query      */
specifier|public
specifier|static
name|MappedSelect
argument_list|<
name|?
argument_list|>
name|query
parameter_list|(
name|String
name|queryName
parameter_list|)
block|{
return|return
operator|new
name|MappedSelect
argument_list|<>
argument_list|(
name|queryName
argument_list|)
return|;
block|}
specifier|protected
name|Class
argument_list|<
name|T
argument_list|>
name|resultClass
decl_stmt|;
specifier|protected
name|Integer
name|fetchLimit
decl_stmt|;
specifier|protected
name|Integer
name|fetchOffset
decl_stmt|;
specifier|protected
name|Integer
name|statementFetchSize
decl_stmt|;
specifier|protected
name|Integer
name|queryTimeout
decl_stmt|;
specifier|protected
name|Integer
name|pageSize
decl_stmt|;
specifier|protected
name|boolean
name|forceNoCache
decl_stmt|;
specifier|protected
name|MappedSelect
parameter_list|(
name|String
name|queryName
parameter_list|)
block|{
name|super
argument_list|(
name|queryName
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|MappedSelect
parameter_list|(
name|String
name|queryName
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|resultClass
parameter_list|)
block|{
name|super
argument_list|(
name|queryName
argument_list|)
expr_stmt|;
name|this
operator|.
name|resultClass
operator|=
name|resultClass
expr_stmt|;
block|}
comment|/**      * Resets query fetch limit - a parameter that defines max number of objects      * that should be ever be fetched from the database.      */
specifier|public
name|MappedSelect
argument_list|<
name|T
argument_list|>
name|limit
parameter_list|(
name|int
name|fetchLimit
parameter_list|)
block|{
name|this
operator|.
name|fetchLimit
operator|=
name|fetchLimit
expr_stmt|;
name|this
operator|.
name|replacementQuery
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Resets query fetch offset - a parameter that defines how many objects      * should be skipped when reading data from the database.      */
specifier|public
name|MappedSelect
argument_list|<
name|T
argument_list|>
name|offset
parameter_list|(
name|int
name|fetchOffset
parameter_list|)
block|{
name|this
operator|.
name|fetchOffset
operator|=
name|fetchOffset
expr_stmt|;
name|this
operator|.
name|replacementQuery
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets fetch size of the PreparedStatement generated for this query. Only      * non-negative values would change the default size.      *      * @see Statement#setFetchSize(int)      */
specifier|public
name|MappedSelect
argument_list|<
name|T
argument_list|>
name|statementFetchSize
parameter_list|(
name|int
name|statementFetchSize
parameter_list|)
block|{
name|this
operator|.
name|statementFetchSize
operator|=
name|statementFetchSize
expr_stmt|;
name|this
operator|.
name|replacementQuery
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets query timeout for the PreparedStatement generated for this query.      *      * @see Statement#setQueryTimeout(int)      * @since 4.2      */
specifier|public
name|MappedSelect
argument_list|<
name|T
argument_list|>
name|queryTimeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|queryTimeout
operator|=
name|timeout
expr_stmt|;
name|this
operator|.
name|replacementQuery
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Resets query page size. A non-negative page size enables query result      * pagination that saves memory and processing time for large lists if only      * parts of the result are ever going to be accessed.      */
specifier|public
name|MappedSelect
argument_list|<
name|T
argument_list|>
name|pageSize
parameter_list|(
name|int
name|pageSize
parameter_list|)
block|{
name|this
operator|.
name|pageSize
operator|=
name|pageSize
expr_stmt|;
name|this
operator|.
name|replacementQuery
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Forces query cache to be refreshed during the execution of this query.      */
specifier|public
name|MappedSelect
argument_list|<
name|T
argument_list|>
name|forceNoCache
parameter_list|()
block|{
name|this
operator|.
name|forceNoCache
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|replacementQuery
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|MappedSelect
argument_list|<
name|T
argument_list|>
name|params
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|parameters
parameter_list|)
block|{
return|return
operator|(
name|MappedSelect
argument_list|<
name|T
argument_list|>
operator|)
name|super
operator|.
name|params
argument_list|(
name|parameters
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|MappedSelect
argument_list|<
name|T
argument_list|>
name|param
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
name|MappedSelect
argument_list|<
name|T
argument_list|>
operator|)
name|super
operator|.
name|param
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|select
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|select
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|selectOne
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|selectOne
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|selectFirst
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|selectFirst
argument_list|(
name|limit
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|ResultIteratorCallback
argument_list|<
name|T
argument_list|>
name|callback
parameter_list|)
block|{
name|context
operator|.
name|iterate
argument_list|(
name|this
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ResultIterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|iterator
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultBatchIterator
argument_list|<
name|T
argument_list|>
name|batchIterator
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|int
name|size
parameter_list|)
block|{
return|return
name|context
operator|.
name|batchIterator
argument_list|(
name|this
argument_list|,
name|size
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Query
name|createReplacementQuery
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
name|QueryDescriptor
name|descriptor
init|=
name|resolver
operator|.
name|getQueryDescriptor
argument_list|(
name|queryName
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|super
operator|.
name|createReplacementQuery
argument_list|(
name|resolver
argument_list|)
decl_stmt|;
name|QueryCacheStrategy
name|cacheStrategyOverride
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|forceNoCache
condition|)
block|{
name|QueryCacheStrategy
name|cacheStrategy
init|=
name|query
operator|.
name|getMetaData
argument_list|(
name|resolver
argument_list|)
operator|.
name|getCacheStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|QueryCacheStrategy
operator|.
name|LOCAL_CACHE
operator|==
name|cacheStrategy
condition|)
block|{
name|cacheStrategyOverride
operator|=
name|QueryCacheStrategy
operator|.
name|LOCAL_CACHE_REFRESH
expr_stmt|;
block|}
if|else if
condition|(
name|QueryCacheStrategy
operator|.
name|SHARED_CACHE
operator|==
name|cacheStrategy
condition|)
block|{
name|cacheStrategyOverride
operator|=
name|QueryCacheStrategy
operator|.
name|SHARED_CACHE_REFRESH
expr_stmt|;
block|}
block|}
switch|switch
condition|(
name|descriptor
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|QueryDescriptor
operator|.
name|SELECT_QUERY
case|:
name|SelectQuery
name|selectQuery
init|=
operator|(
name|SelectQuery
operator|)
name|query
decl_stmt|;
if|if
condition|(
name|fetchLimit
operator|!=
literal|null
condition|)
block|{
name|selectQuery
operator|.
name|setFetchLimit
argument_list|(
name|fetchLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchOffset
operator|!=
literal|null
condition|)
block|{
name|selectQuery
operator|.
name|setFetchOffset
argument_list|(
name|fetchOffset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|statementFetchSize
operator|!=
literal|null
condition|)
block|{
name|selectQuery
operator|.
name|setStatementFetchSize
argument_list|(
name|statementFetchSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pageSize
operator|!=
literal|null
condition|)
block|{
name|selectQuery
operator|.
name|setPageSize
argument_list|(
name|pageSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cacheStrategyOverride
operator|!=
literal|null
condition|)
block|{
name|selectQuery
operator|.
name|setCacheStrategy
argument_list|(
name|cacheStrategyOverride
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QueryDescriptor
operator|.
name|SQL_TEMPLATE
case|:
name|SQLTemplate
name|sqlTemplate
init|=
operator|(
name|SQLTemplate
operator|)
name|query
decl_stmt|;
if|if
condition|(
name|fetchLimit
operator|!=
literal|null
condition|)
block|{
name|sqlTemplate
operator|.
name|setFetchLimit
argument_list|(
name|fetchLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchOffset
operator|!=
literal|null
condition|)
block|{
name|sqlTemplate
operator|.
name|setFetchOffset
argument_list|(
name|fetchOffset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|statementFetchSize
operator|!=
literal|null
condition|)
block|{
name|sqlTemplate
operator|.
name|setStatementFetchSize
argument_list|(
name|statementFetchSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryTimeout
operator|!=
literal|null
condition|)
block|{
name|sqlTemplate
operator|.
name|setQueryTimeout
argument_list|(
name|queryTimeout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pageSize
operator|!=
literal|null
condition|)
block|{
name|sqlTemplate
operator|.
name|setPageSize
argument_list|(
name|pageSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cacheStrategyOverride
operator|!=
literal|null
condition|)
block|{
name|sqlTemplate
operator|.
name|setCacheStrategy
argument_list|(
name|cacheStrategyOverride
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QueryDescriptor
operator|.
name|EJBQL_QUERY
case|:
name|EJBQLQuery
name|ejbqlQuery
init|=
operator|(
name|EJBQLQuery
operator|)
name|query
decl_stmt|;
if|if
condition|(
name|fetchLimit
operator|!=
literal|null
condition|)
block|{
name|ejbqlQuery
operator|.
name|setFetchLimit
argument_list|(
name|fetchLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchOffset
operator|!=
literal|null
condition|)
block|{
name|ejbqlQuery
operator|.
name|setFetchOffset
argument_list|(
name|fetchOffset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|statementFetchSize
operator|!=
literal|null
condition|)
block|{
name|ejbqlQuery
operator|.
name|setStatementFetchSize
argument_list|(
name|statementFetchSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryTimeout
operator|!=
literal|null
condition|)
block|{
name|ejbqlQuery
operator|.
name|setQueryTimeout
argument_list|(
name|queryTimeout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pageSize
operator|!=
literal|null
condition|)
block|{
name|ejbqlQuery
operator|.
name|setPageSize
argument_list|(
name|pageSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cacheStrategyOverride
operator|!=
literal|null
condition|)
block|{
name|ejbqlQuery
operator|.
name|setCacheStrategy
argument_list|(
name|cacheStrategyOverride
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QueryDescriptor
operator|.
name|PROCEDURE_QUERY
case|:
name|ProcedureQuery
name|procedureQuery
init|=
operator|(
name|ProcedureQuery
operator|)
name|query
decl_stmt|;
if|if
condition|(
name|fetchLimit
operator|!=
literal|null
condition|)
block|{
name|procedureQuery
operator|.
name|setFetchLimit
argument_list|(
name|fetchLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchOffset
operator|!=
literal|null
condition|)
block|{
name|procedureQuery
operator|.
name|setFetchOffset
argument_list|(
name|fetchOffset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|statementFetchSize
operator|!=
literal|null
condition|)
block|{
name|procedureQuery
operator|.
name|setStatementFetchSize
argument_list|(
name|statementFetchSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryTimeout
operator|!=
literal|null
condition|)
block|{
name|procedureQuery
operator|.
name|setQueryTimeout
argument_list|(
name|queryTimeout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pageSize
operator|!=
literal|null
condition|)
block|{
name|procedureQuery
operator|.
name|setPageSize
argument_list|(
name|pageSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cacheStrategyOverride
operator|!=
literal|null
condition|)
block|{
name|procedureQuery
operator|.
name|setCacheStrategy
argument_list|(
name|cacheStrategyOverride
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unknown query type: %s"
argument_list|,
name|descriptor
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|query
return|;
block|}
block|}
end_class

end_unit

