begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A wrapper for a QueryMetadata instance allowing that may override a subset of metadata  * properties.  *   * @since 1.2  */
end_comment

begin_class
class|class
name|QueryMetadataWrapper
extends|extends
name|QueryMetadataProxy
block|{
specifier|static
specifier|final
name|String
name|CACHE_KEY_PROPERTY
init|=
literal|"QueryMetadataWrapper.CacheKey"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|overrides
decl_stmt|;
specifier|public
name|QueryMetadataWrapper
parameter_list|(
name|QueryMetadata
name|info
parameter_list|)
block|{
name|super
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
comment|/**      * Overrides a property with an alternative value. Property names are defined in the      * {@link QueryMetadata} interface.      */
name|void
name|override
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|overrides
operator|==
literal|null
condition|)
block|{
name|overrides
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|overrides
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|boolean
name|overrideExists
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|overrides
operator|!=
literal|null
operator|&&
name|overrides
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|String
name|getCacheKey
parameter_list|()
block|{
return|return
operator|(
name|overrideExists
argument_list|(
name|CACHE_KEY_PROPERTY
argument_list|)
operator|)
condition|?
operator|(
name|String
operator|)
name|overrides
operator|.
name|get
argument_list|(
name|CACHE_KEY_PROPERTY
argument_list|)
else|:
name|super
operator|.
name|getCacheKey
argument_list|()
return|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|QueryCacheStrategy
name|getCacheStrategy
parameter_list|()
block|{
return|return
operator|(
name|overrideExists
argument_list|(
name|QueryMetadata
operator|.
name|CACHE_STRATEGY_PROPERTY
argument_list|)
operator|)
condition|?
operator|(
name|QueryCacheStrategy
operator|)
name|overrides
operator|.
name|get
argument_list|(
name|QueryMetadata
operator|.
name|CACHE_STRATEGY_PROPERTY
argument_list|)
else|:
name|super
operator|.
name|getCacheStrategy
argument_list|()
return|;
block|}
comment|/**      * @deprecated since 4.0, use {@link QueryMetadataWrapper#getCacheKey()}      */
annotation|@
name|Deprecated
specifier|public
name|String
index|[]
name|getCacheGroups
parameter_list|()
block|{
return|return
operator|(
name|overrideExists
argument_list|(
name|QueryMetadata
operator|.
name|CACHE_GROUPS_PROPERTY
argument_list|)
operator|)
condition|?
operator|(
name|String
index|[]
operator|)
name|overrides
operator|.
name|get
argument_list|(
name|QueryMetadata
operator|.
name|CACHE_GROUPS_PROPERTY
argument_list|)
else|:
name|super
operator|.
name|getCacheGroups
argument_list|()
return|;
block|}
comment|/**      * @since 4.0      */
specifier|public
name|String
name|getCacheGroup
parameter_list|()
block|{
if|if
condition|(
name|overrideExists
argument_list|(
name|QueryMetadata
operator|.
name|CACHE_GROUPS_PROPERTY
argument_list|)
condition|)
block|{
name|String
index|[]
name|cacheGroups
init|=
operator|(
name|String
index|[]
operator|)
name|overrides
operator|.
name|get
argument_list|(
name|QueryMetadata
operator|.
name|CACHE_GROUPS_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheGroups
operator|==
literal|null
operator|||
name|cacheGroups
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|cacheGroups
index|[
literal|0
index|]
return|;
block|}
block|}
return|return
name|super
operator|.
name|getCacheGroup
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isFetchingDataRows
parameter_list|()
block|{
if|if
condition|(
operator|!
name|overrideExists
argument_list|(
name|QueryMetadata
operator|.
name|FETCHING_DATA_ROWS_PROPERTY
argument_list|)
condition|)
block|{
return|return
name|super
operator|.
name|isFetchingDataRows
argument_list|()
return|;
block|}
name|Boolean
name|b
init|=
operator|(
name|Boolean
operator|)
name|overrides
operator|.
name|get
argument_list|(
name|QueryMetadata
operator|.
name|FETCHING_DATA_ROWS_PROPERTY
argument_list|)
decl_stmt|;
return|return
name|b
operator|!=
literal|null
operator|&&
name|b
return|;
block|}
specifier|public
name|boolean
name|isRefreshingObjects
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|getPageSize
parameter_list|()
block|{
if|if
condition|(
operator|!
name|overrideExists
argument_list|(
name|QueryMetadata
operator|.
name|PAGE_SIZE_PROPERTY
argument_list|)
condition|)
block|{
return|return
name|super
operator|.
name|getPageSize
argument_list|()
return|;
block|}
name|Number
name|n
init|=
operator|(
name|Number
operator|)
name|overrides
operator|.
name|get
argument_list|(
name|QueryMetadata
operator|.
name|PAGE_SIZE_PROPERTY
argument_list|)
decl_stmt|;
return|return
name|n
operator|!=
literal|null
condition|?
name|n
operator|.
name|intValue
argument_list|()
else|:
literal|0
return|;
block|}
specifier|public
name|int
name|getFetchLimit
parameter_list|()
block|{
if|if
condition|(
operator|!
name|overrideExists
argument_list|(
name|QueryMetadata
operator|.
name|FETCH_LIMIT_PROPERTY
argument_list|)
condition|)
block|{
return|return
name|super
operator|.
name|getFetchLimit
argument_list|()
return|;
block|}
name|Number
name|n
init|=
operator|(
name|Number
operator|)
name|overrides
operator|.
name|get
argument_list|(
name|QueryMetadata
operator|.
name|FETCH_LIMIT_PROPERTY
argument_list|)
decl_stmt|;
return|return
name|n
operator|!=
literal|null
condition|?
name|n
operator|.
name|intValue
argument_list|()
else|:
literal|0
return|;
block|}
specifier|public
name|int
name|getStatementFetchSize
parameter_list|()
block|{
if|if
condition|(
operator|!
name|overrideExists
argument_list|(
name|QueryMetadata
operator|.
name|STATEMENT_FETCH_SIZE_PROPERTY
argument_list|)
condition|)
block|{
return|return
name|super
operator|.
name|getPageSize
argument_list|()
return|;
block|}
name|Number
name|n
init|=
operator|(
name|Number
operator|)
name|overrides
operator|.
name|get
argument_list|(
name|QueryMetadata
operator|.
name|STATEMENT_FETCH_SIZE_PROPERTY
argument_list|)
decl_stmt|;
return|return
name|n
operator|!=
literal|null
condition|?
name|n
operator|.
name|intValue
argument_list|()
else|:
literal|0
return|;
block|}
block|}
end_class

end_unit

