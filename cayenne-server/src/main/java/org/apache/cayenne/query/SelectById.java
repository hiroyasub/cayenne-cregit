begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultBatchIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultIteratorCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A query to select objects by id.  *   * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|SelectById
parameter_list|<
name|T
parameter_list|>
extends|extends
name|IndirectQuery
implements|implements
name|Select
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|6589464349051607583L
decl_stmt|;
specifier|final
name|QueryRoot
name|root
decl_stmt|;
specifier|final
name|IdSpec
name|idSpec
decl_stmt|;
specifier|final
name|boolean
name|fetchingDataRows
decl_stmt|;
name|QueryCacheStrategy
name|cacheStrategy
decl_stmt|;
name|String
name|cacheGroup
decl_stmt|;
name|PrefetchTreeNode
name|prefetches
decl_stmt|;
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|SelectById
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|entityType
parameter_list|,
name|Object
name|id
parameter_list|)
block|{
name|QueryRoot
name|root
init|=
name|resolver
lambda|->
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|entityType
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IdSpec
name|idSpec
init|=
operator|new
name|SingleScalarIdSpec
argument_list|(
name|id
argument_list|)
decl_stmt|;
return|return
operator|new
name|SelectById
argument_list|<>
argument_list|(
name|root
argument_list|,
name|idSpec
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|SelectById
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|entityType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|id
parameter_list|)
block|{
name|QueryRoot
name|root
init|=
name|resolver
lambda|->
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|entityType
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IdSpec
name|idSpec
init|=
operator|new
name|SingleMapIdSpec
argument_list|(
name|id
argument_list|)
decl_stmt|;
return|return
operator|new
name|SelectById
argument_list|<>
argument_list|(
name|root
argument_list|,
name|idSpec
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|SelectById
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|entityType
parameter_list|,
name|ObjectId
name|id
parameter_list|)
block|{
name|checkObjectId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|QueryRoot
name|root
init|=
name|resolver
lambda|->
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|id
operator|.
name|getEntityName
argument_list|()
argument_list|)
decl_stmt|;
name|IdSpec
name|idSpec
init|=
operator|new
name|SingleMapIdSpec
argument_list|(
name|id
operator|.
name|getIdSnapshot
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|SelectById
argument_list|<>
argument_list|(
name|root
argument_list|,
name|idSpec
argument_list|)
return|;
block|}
comment|/** 	 * @since 4.2 	 */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|SelectById
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|entityType
parameter_list|,
name|Object
name|firstId
parameter_list|,
name|Object
modifier|...
name|otherIds
parameter_list|)
block|{
name|QueryRoot
name|root
init|=
name|resolver
lambda|->
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|entityType
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IdSpec
name|idSpec
init|=
operator|new
name|MultiScalarIdSpec
argument_list|(
name|firstId
argument_list|,
name|otherIds
argument_list|)
decl_stmt|;
return|return
operator|new
name|SelectById
argument_list|<>
argument_list|(
name|root
argument_list|,
name|idSpec
argument_list|)
return|;
block|}
comment|/** 	 * @since 4.2 	 */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|SelectById
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|entityType
parameter_list|,
name|Collection
argument_list|<
name|Object
argument_list|>
name|ids
parameter_list|)
block|{
name|QueryRoot
name|root
init|=
name|resolver
lambda|->
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|entityType
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IdSpec
name|idSpec
init|=
operator|new
name|MultiScalarIdSpec
argument_list|(
name|ids
argument_list|)
decl_stmt|;
return|return
operator|new
name|SelectById
argument_list|<>
argument_list|(
name|root
argument_list|,
name|idSpec
argument_list|)
return|;
block|}
comment|/** 	 * @since 4.2 	 */
annotation|@
name|SafeVarargs
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|SelectById
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|entityType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|firstId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
modifier|...
name|otherIds
parameter_list|)
block|{
name|QueryRoot
name|root
init|=
name|resolver
lambda|->
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|entityType
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IdSpec
name|idSpec
init|=
operator|new
name|MultiMapIdSpec
argument_list|(
name|firstId
argument_list|,
name|otherIds
argument_list|)
decl_stmt|;
return|return
operator|new
name|SelectById
argument_list|<>
argument_list|(
name|root
argument_list|,
name|idSpec
argument_list|)
return|;
block|}
comment|/** 	 * @since 4.2 	 */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|SelectById
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|entityType
parameter_list|,
name|ObjectId
name|firstId
parameter_list|,
name|ObjectId
modifier|...
name|otherIds
parameter_list|)
block|{
name|checkObjectId
argument_list|(
name|firstId
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectId
name|id
range|:
name|otherIds
control|)
block|{
name|checkObjectId
argument_list|(
name|id
argument_list|,
name|firstId
operator|.
name|getEntityName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QueryRoot
name|root
init|=
name|resolver
lambda|->
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|firstId
operator|.
name|getEntityName
argument_list|()
argument_list|)
decl_stmt|;
name|IdSpec
name|idSpec
init|=
operator|new
name|MultiMapIdSpec
argument_list|(
name|firstId
argument_list|,
name|otherIds
argument_list|)
decl_stmt|;
return|return
operator|new
name|SelectById
argument_list|<>
argument_list|(
name|root
argument_list|,
name|idSpec
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SelectById
argument_list|<
name|DataRow
argument_list|>
name|dataRowQuery
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|entityType
parameter_list|,
name|Object
name|id
parameter_list|)
block|{
name|QueryRoot
name|root
init|=
name|resolver
lambda|->
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|entityType
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IdSpec
name|idSpec
init|=
operator|new
name|SingleScalarIdSpec
argument_list|(
name|id
argument_list|)
decl_stmt|;
return|return
operator|new
name|SelectById
argument_list|<>
argument_list|(
name|root
argument_list|,
name|idSpec
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SelectById
argument_list|<
name|DataRow
argument_list|>
name|dataRowQuery
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|entityType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|id
parameter_list|)
block|{
name|QueryRoot
name|root
init|=
name|resolver
lambda|->
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|entityType
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IdSpec
name|idSpec
init|=
operator|new
name|SingleMapIdSpec
argument_list|(
name|id
argument_list|)
decl_stmt|;
return|return
operator|new
name|SelectById
argument_list|<>
argument_list|(
name|root
argument_list|,
name|idSpec
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|SelectById
argument_list|<
name|DataRow
argument_list|>
name|dataRowQuery
parameter_list|(
name|ObjectId
name|id
parameter_list|)
block|{
name|checkObjectId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|QueryRoot
name|root
init|=
name|resolver
lambda|->
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|id
operator|.
name|getEntityName
argument_list|()
argument_list|)
decl_stmt|;
name|IdSpec
name|idSpec
init|=
operator|new
name|SingleMapIdSpec
argument_list|(
name|id
operator|.
name|getIdSnapshot
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|SelectById
argument_list|<>
argument_list|(
name|root
argument_list|,
name|idSpec
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** 	 * @since 4.2 	 */
specifier|public
specifier|static
name|SelectById
argument_list|<
name|DataRow
argument_list|>
name|dataRowQuery
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|entityType
parameter_list|,
name|Object
name|firstId
parameter_list|,
name|Object
modifier|...
name|otherIds
parameter_list|)
block|{
name|QueryRoot
name|root
init|=
name|resolver
lambda|->
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|entityType
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IdSpec
name|idSpec
init|=
operator|new
name|MultiScalarIdSpec
argument_list|(
name|firstId
argument_list|,
name|otherIds
argument_list|)
decl_stmt|;
return|return
operator|new
name|SelectById
argument_list|<>
argument_list|(
name|root
argument_list|,
name|idSpec
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** 	 * @since 4.2 	 */
annotation|@
name|SafeVarargs
specifier|public
specifier|static
name|SelectById
argument_list|<
name|DataRow
argument_list|>
name|dataRowQuery
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|entityType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|firstId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
modifier|...
name|otherIds
parameter_list|)
block|{
name|QueryRoot
name|root
init|=
name|resolver
lambda|->
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|entityType
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IdSpec
name|idSpec
init|=
operator|new
name|MultiMapIdSpec
argument_list|(
name|firstId
argument_list|,
name|otherIds
argument_list|)
decl_stmt|;
return|return
operator|new
name|SelectById
argument_list|<>
argument_list|(
name|root
argument_list|,
name|idSpec
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/** 	 * @since 4.2 	 */
specifier|public
specifier|static
name|SelectById
argument_list|<
name|DataRow
argument_list|>
name|dataRowQuery
parameter_list|(
name|ObjectId
name|firstId
parameter_list|,
name|ObjectId
modifier|...
name|otherIds
parameter_list|)
block|{
name|checkObjectId
argument_list|(
name|firstId
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectId
name|id
range|:
name|otherIds
control|)
block|{
name|checkObjectId
argument_list|(
name|id
argument_list|,
name|firstId
operator|.
name|getEntityName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QueryRoot
name|root
init|=
name|resolver
lambda|->
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|firstId
operator|.
name|getEntityName
argument_list|()
argument_list|)
decl_stmt|;
name|IdSpec
name|idSpec
init|=
operator|new
name|MultiMapIdSpec
argument_list|(
name|firstId
argument_list|,
name|otherIds
argument_list|)
decl_stmt|;
return|return
operator|new
name|SelectById
argument_list|<>
argument_list|(
name|root
argument_list|,
name|idSpec
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|protected
name|SelectById
parameter_list|(
name|QueryRoot
name|root
parameter_list|,
name|IdSpec
name|idSpec
parameter_list|,
name|boolean
name|fetchingDataRows
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|idSpec
operator|=
name|idSpec
expr_stmt|;
name|this
operator|.
name|fetchingDataRows
operator|=
name|fetchingDataRows
expr_stmt|;
block|}
specifier|protected
name|SelectById
parameter_list|(
name|QueryRoot
name|root
parameter_list|,
name|IdSpec
name|idSpec
parameter_list|)
block|{
name|this
argument_list|(
name|root
argument_list|,
name|idSpec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|select
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|select
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|selectOne
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|selectOne
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|selectFirst
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|selectFirst
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|ResultIteratorCallback
argument_list|<
name|T
argument_list|>
name|callback
parameter_list|)
block|{
name|context
operator|.
name|iterate
argument_list|(
name|this
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ResultIterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|iterator
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultBatchIterator
argument_list|<
name|T
argument_list|>
name|batchIterator
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|int
name|size
parameter_list|)
block|{
return|return
name|context
operator|.
name|batchIterator
argument_list|(
name|this
argument_list|,
name|size
argument_list|)
return|;
block|}
comment|/** 	 * Instructs Cayenne to look for query results in the "local" cache when 	 * running the query. This is a short-hand notation for: 	 * 	 *<pre> 	 * query.cacheStrategy(QueryCacheStrategy.LOCAL_CACHE, cacheGroup); 	 *</pre> 	 */
specifier|public
name|SelectById
argument_list|<
name|T
argument_list|>
name|localCache
parameter_list|(
name|String
name|cacheGroup
parameter_list|)
block|{
return|return
name|cacheStrategy
argument_list|(
name|QueryCacheStrategy
operator|.
name|LOCAL_CACHE
argument_list|,
name|cacheGroup
argument_list|)
return|;
block|}
comment|/** 	 * Instructs Cayenne to look for query results in the "local" cache when 	 * running the query. This is a short-hand notation for: 	 * 	 *<pre> 	 * query.cacheStrategy(QueryCacheStrategy.LOCAL_CACHE); 	 *</pre> 	 */
specifier|public
name|SelectById
argument_list|<
name|T
argument_list|>
name|localCache
parameter_list|()
block|{
return|return
name|cacheStrategy
argument_list|(
name|QueryCacheStrategy
operator|.
name|LOCAL_CACHE
argument_list|)
return|;
block|}
comment|/** 	 * Instructs Cayenne to look for query results in the "shared" cache when 	 * running the query. This is a short-hand notation for: 	 * 	 *<pre> 	 * query.cacheStrategy(QueryCacheStrategy.SHARED_CACHE, cacheGroup); 	 *</pre> 	 */
specifier|public
name|SelectById
argument_list|<
name|T
argument_list|>
name|sharedCache
parameter_list|(
name|String
name|cacheGroup
parameter_list|)
block|{
return|return
name|cacheStrategy
argument_list|(
name|QueryCacheStrategy
operator|.
name|SHARED_CACHE
argument_list|,
name|cacheGroup
argument_list|)
return|;
block|}
comment|/** 	 * Instructs Cayenne to look for query results in the "shared" cache when 	 * running the query. This is a short-hand notation for: 	 * 	 *<pre> 	 * query.cacheStrategy(QueryCacheStrategy.SHARED_CACHE); 	 *</pre> 	 */
specifier|public
name|SelectById
argument_list|<
name|T
argument_list|>
name|sharedCache
parameter_list|()
block|{
return|return
name|cacheStrategy
argument_list|(
name|QueryCacheStrategy
operator|.
name|SHARED_CACHE
argument_list|)
return|;
block|}
specifier|public
name|QueryCacheStrategy
name|getCacheStrategy
parameter_list|()
block|{
return|return
name|cacheStrategy
return|;
block|}
specifier|public
name|SelectById
argument_list|<
name|T
argument_list|>
name|cacheStrategy
parameter_list|(
name|QueryCacheStrategy
name|strategy
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|cacheStrategy
operator|!=
name|strategy
condition|)
block|{
name|this
operator|.
name|cacheStrategy
operator|=
name|strategy
expr_stmt|;
name|this
operator|.
name|replacementQuery
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|SelectById
argument_list|<
name|T
argument_list|>
name|cacheStrategy
parameter_list|(
name|QueryCacheStrategy
name|strategy
parameter_list|,
name|String
name|cacheGroup
parameter_list|)
block|{
return|return
name|cacheStrategy
argument_list|(
name|strategy
argument_list|)
operator|.
name|cacheGroup
argument_list|(
name|cacheGroup
argument_list|)
return|;
block|}
specifier|public
name|String
name|getCacheGroup
parameter_list|()
block|{
return|return
name|cacheGroup
return|;
block|}
specifier|public
name|SelectById
argument_list|<
name|T
argument_list|>
name|cacheGroup
parameter_list|(
name|String
name|cacheGroup
parameter_list|)
block|{
name|this
operator|.
name|cacheGroup
operator|=
name|cacheGroup
expr_stmt|;
name|this
operator|.
name|replacementQuery
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|isFetchingDataRows
parameter_list|()
block|{
return|return
name|fetchingDataRows
return|;
block|}
comment|/** 	 * Merges prefetch into the query prefetch tree. 	 *  	 * @return this object 	 */
specifier|public
name|SelectById
argument_list|<
name|T
argument_list|>
name|prefetch
parameter_list|(
name|PrefetchTreeNode
name|prefetch
parameter_list|)
block|{
if|if
condition|(
name|prefetch
operator|==
literal|null
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|prefetches
operator|==
literal|null
condition|)
block|{
name|prefetches
operator|=
operator|new
name|PrefetchTreeNode
argument_list|()
expr_stmt|;
block|}
name|prefetches
operator|.
name|merge
argument_list|(
name|prefetch
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** 	 * Merges a prefetch path with specified semantics into the query prefetch 	 * tree. 	 *  	 * @return this object 	 */
specifier|public
name|SelectById
argument_list|<
name|T
argument_list|>
name|prefetch
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|semantics
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|prefetches
operator|==
literal|null
condition|)
block|{
name|prefetches
operator|=
operator|new
name|PrefetchTreeNode
argument_list|()
expr_stmt|;
block|}
name|prefetches
operator|.
name|addPath
argument_list|(
name|path
argument_list|)
operator|.
name|setSemantics
argument_list|(
name|semantics
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|PrefetchTreeNode
name|getPrefetches
parameter_list|()
block|{
return|return
name|prefetches
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Query
name|createReplacementQuery
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
name|ObjEntity
name|entity
init|=
name|root
operator|.
name|resolve
argument_list|(
name|resolver
argument_list|)
decl_stmt|;
name|ObjectSelect
argument_list|<
name|?
argument_list|>
name|query
init|=
operator|new
name|ObjectSelect
argument_list|<>
argument_list|()
operator|.
name|entityName
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
name|idSpec
operator|.
name|getQualifier
argument_list|(
name|entity
argument_list|)
argument_list|)
operator|.
name|cacheStrategy
argument_list|(
name|cacheStrategy
argument_list|,
name|cacheGroup
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefetches
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|prefetch
argument_list|(
name|prefetches
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fetchingDataRows
condition|)
block|{
name|query
operator|.
name|fetchDataRows
argument_list|()
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
specifier|private
specifier|static
name|String
name|resolveSinglePkName
parameter_list|(
name|ObjEntity
name|entity
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|pkAttributes
init|=
name|entity
operator|.
name|getPrimaryKeyNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|pkAttributes
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|pkAttributes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"PK contains %d columns, expected 1."
argument_list|,
name|pkAttributes
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|void
name|checkObjectId
parameter_list|(
name|ObjectId
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|.
name|isTemporary
argument_list|()
operator|&&
operator|!
name|id
operator|.
name|isReplacementIdAttached
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't build a query for a temporary id: %s"
argument_list|,
name|id
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|checkObjectId
parameter_list|(
name|ObjectId
name|id
parameter_list|,
name|String
name|entityName
parameter_list|)
block|{
name|checkObjectId
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|entityName
operator|.
name|equals
argument_list|(
name|id
operator|.
name|getEntityName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't build a query with mixed object types for given ObjectIds"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SafeVarargs
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|,
name|R
parameter_list|>
name|Collection
argument_list|<
name|R
argument_list|>
name|foldArguments
parameter_list|(
name|Function
argument_list|<
name|E
argument_list|,
name|R
argument_list|>
name|mapper
parameter_list|,
name|E
name|first
parameter_list|,
name|E
modifier|...
name|other
parameter_list|)
block|{
name|List
argument_list|<
name|R
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
operator|+
name|other
operator|.
name|length
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|mapper
operator|.
name|apply
argument_list|(
name|first
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|E
name|next
range|:
name|other
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|mapper
operator|.
name|apply
argument_list|(
name|next
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|protected
interface|interface
name|QueryRoot
extends|extends
name|Serializable
block|{
name|ObjEntity
name|resolve
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
function_decl|;
block|}
specifier|protected
interface|interface
name|IdSpec
extends|extends
name|Serializable
block|{
name|Expression
name|getQualifier
parameter_list|(
name|ObjEntity
name|entity
parameter_list|)
function_decl|;
block|}
specifier|protected
specifier|static
class|class
name|SingleScalarIdSpec
implements|implements
name|IdSpec
block|{
specifier|private
specifier|final
name|Object
name|id
decl_stmt|;
specifier|protected
name|SingleScalarIdSpec
parameter_list|(
name|Object
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|getQualifier
parameter_list|(
name|ObjEntity
name|entity
parameter_list|)
block|{
return|return
name|matchDbExp
argument_list|(
name|resolveSinglePkName
argument_list|(
name|entity
argument_list|)
argument_list|,
name|id
argument_list|)
return|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|MultiScalarIdSpec
implements|implements
name|IdSpec
block|{
specifier|private
specifier|final
name|Collection
argument_list|<
name|Object
argument_list|>
name|ids
decl_stmt|;
specifier|protected
name|MultiScalarIdSpec
parameter_list|(
name|Object
name|firstId
parameter_list|,
name|Object
modifier|...
name|otherIds
parameter_list|)
block|{
name|this
operator|.
name|ids
operator|=
name|foldArguments
argument_list|(
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|firstId
argument_list|,
name|otherIds
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|MultiScalarIdSpec
parameter_list|(
name|Collection
argument_list|<
name|Object
argument_list|>
name|ids
parameter_list|)
block|{
name|this
operator|.
name|ids
operator|=
name|ids
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|getQualifier
parameter_list|(
name|ObjEntity
name|entity
parameter_list|)
block|{
return|return
name|inDbExp
argument_list|(
name|resolveSinglePkName
argument_list|(
name|entity
argument_list|)
argument_list|,
name|ids
argument_list|)
return|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|SingleMapIdSpec
implements|implements
name|IdSpec
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|id
decl_stmt|;
specifier|protected
name|SingleMapIdSpec
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|getQualifier
parameter_list|(
name|ObjEntity
name|entity
parameter_list|)
block|{
return|return
name|matchAllDbExp
argument_list|(
name|id
argument_list|,
name|Expression
operator|.
name|EQUAL_TO
argument_list|)
return|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|MultiMapIdSpec
implements|implements
name|IdSpec
block|{
specifier|private
specifier|final
name|Collection
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
name|ids
decl_stmt|;
annotation|@
name|SafeVarargs
specifier|protected
name|MultiMapIdSpec
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|firstId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
modifier|...
name|otherIds
parameter_list|)
block|{
name|this
operator|.
name|ids
operator|=
name|foldArguments
argument_list|(
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|firstId
argument_list|,
name|otherIds
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|MultiMapIdSpec
parameter_list|(
name|ObjectId
name|firstId
parameter_list|,
name|ObjectId
modifier|...
name|otherIds
parameter_list|)
block|{
name|this
operator|.
name|ids
operator|=
name|foldArguments
argument_list|(
name|ObjectId
operator|::
name|getIdSnapshot
argument_list|,
name|firstId
argument_list|,
name|otherIds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|getQualifier
parameter_list|(
name|ObjEntity
name|entity
parameter_list|)
block|{
name|List
argument_list|<
name|Expression
argument_list|>
name|expressions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|id
range|:
name|ids
control|)
block|{
name|expressions
operator|.
name|add
argument_list|(
name|matchAllDbExp
argument_list|(
name|id
argument_list|,
name|Expression
operator|.
name|EQUAL_TO
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|or
argument_list|(
name|expressions
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

