begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
operator|.
name|matchAllDbExp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_comment
comment|/**  * A query to select single objects by id.  *   * @since 3.2  */
end_comment

begin_class
specifier|public
class|class
name|SelectById
parameter_list|<
name|T
parameter_list|>
extends|extends
name|IndirectQuery
implements|implements
name|Select
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|6589464349051607583L
decl_stmt|;
comment|// type is not same as T, as T maybe be DataRow or scalar
comment|// either type or entity name is specified, but not both
name|Class
argument_list|<
name|?
argument_list|>
name|entityType
decl_stmt|;
name|String
name|entityName
decl_stmt|;
comment|// only one of the two id forms is provided, but not both
name|Object
name|singleId
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|mapId
decl_stmt|;
name|boolean
name|fetchingDataRows
decl_stmt|;
name|QueryCacheStrategy
name|cacheStrategy
decl_stmt|;
name|String
index|[]
name|cacheGroups
decl_stmt|;
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|SelectById
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|entityType
parameter_list|,
name|Object
name|id
parameter_list|)
block|{
name|SelectById
argument_list|<
name|T
argument_list|>
name|q
init|=
operator|new
name|SelectById
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|q
operator|.
name|entityType
operator|=
name|entityType
expr_stmt|;
name|q
operator|.
name|singleId
operator|=
name|id
expr_stmt|;
name|q
operator|.
name|fetchingDataRows
operator|=
literal|false
expr_stmt|;
return|return
name|q
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|SelectById
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|entityType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|id
parameter_list|)
block|{
name|SelectById
argument_list|<
name|T
argument_list|>
name|q
init|=
operator|new
name|SelectById
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|q
operator|.
name|entityType
operator|=
name|entityType
expr_stmt|;
name|q
operator|.
name|mapId
operator|=
name|id
expr_stmt|;
name|q
operator|.
name|fetchingDataRows
operator|=
literal|false
expr_stmt|;
return|return
name|q
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|SelectById
argument_list|<
name|T
argument_list|>
name|query
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|entityType
parameter_list|,
name|ObjectId
name|id
parameter_list|)
block|{
name|checkObjectId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|SelectById
argument_list|<
name|T
argument_list|>
name|q
init|=
operator|new
name|SelectById
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|q
operator|.
name|entityName
operator|=
name|id
operator|.
name|getEntityName
argument_list|()
expr_stmt|;
name|q
operator|.
name|mapId
operator|=
name|id
operator|.
name|getIdSnapshot
argument_list|()
expr_stmt|;
name|q
operator|.
name|fetchingDataRows
operator|=
literal|false
expr_stmt|;
return|return
name|q
return|;
block|}
specifier|public
specifier|static
name|SelectById
argument_list|<
name|DataRow
argument_list|>
name|dataRowQuery
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|entityType
parameter_list|,
name|Object
name|id
parameter_list|)
block|{
name|SelectById
argument_list|<
name|DataRow
argument_list|>
name|q
init|=
operator|new
name|SelectById
argument_list|<
name|DataRow
argument_list|>
argument_list|()
decl_stmt|;
name|q
operator|.
name|entityType
operator|=
name|entityType
expr_stmt|;
name|q
operator|.
name|singleId
operator|=
name|id
expr_stmt|;
name|q
operator|.
name|fetchingDataRows
operator|=
literal|true
expr_stmt|;
return|return
name|q
return|;
block|}
specifier|public
specifier|static
name|SelectById
argument_list|<
name|DataRow
argument_list|>
name|dataRowQuery
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|entityType
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|id
parameter_list|)
block|{
name|SelectById
argument_list|<
name|DataRow
argument_list|>
name|q
init|=
operator|new
name|SelectById
argument_list|<
name|DataRow
argument_list|>
argument_list|()
decl_stmt|;
name|q
operator|.
name|entityType
operator|=
name|entityType
expr_stmt|;
name|q
operator|.
name|mapId
operator|=
name|id
expr_stmt|;
name|q
operator|.
name|fetchingDataRows
operator|=
literal|true
expr_stmt|;
return|return
name|q
return|;
block|}
specifier|public
specifier|static
name|SelectById
argument_list|<
name|DataRow
argument_list|>
name|dataRowQuery
parameter_list|(
name|ObjectId
name|id
parameter_list|)
block|{
name|checkObjectId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|SelectById
argument_list|<
name|DataRow
argument_list|>
name|q
init|=
operator|new
name|SelectById
argument_list|<
name|DataRow
argument_list|>
argument_list|()
decl_stmt|;
name|q
operator|.
name|entityName
operator|=
name|id
operator|.
name|getEntityName
argument_list|()
expr_stmt|;
name|q
operator|.
name|mapId
operator|=
name|id
operator|.
name|getIdSnapshot
argument_list|()
expr_stmt|;
name|q
operator|.
name|fetchingDataRows
operator|=
literal|true
expr_stmt|;
return|return
name|q
return|;
block|}
specifier|private
specifier|static
name|void
name|checkObjectId
parameter_list|(
name|ObjectId
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|.
name|isTemporary
argument_list|()
operator|&&
operator|!
name|id
operator|.
name|isReplacementIdAttached
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't build a query for temporary id: "
operator|+
name|id
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Selects a single object using provided context. Essentially the inversion 	 * of "ObjectContext.selectOne(Select)". 	 */
specifier|public
name|T
name|selectOne
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|selectOne
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/** 	 * Instructs Cayenne to look for query results in the "local" cache when 	 * running the query. This is a short-hand notation for: 	 *  	 *<pre> 	 * query.setCacheStrategy(QueryCacheStrategy.LOCAL_CACHE); 	 * query.setCacheGroups(&quot;group1&quot;,&quot;group2&quot;); 	 *</pre> 	 *  	 * @since 3.2 	 */
specifier|public
name|SelectById
argument_list|<
name|T
argument_list|>
name|useLocalCache
parameter_list|(
name|String
modifier|...
name|cacheGroups
parameter_list|)
block|{
name|cacheStrategy
argument_list|(
name|QueryCacheStrategy
operator|.
name|LOCAL_CACHE
argument_list|)
expr_stmt|;
name|cacheGroups
argument_list|(
name|cacheGroups
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|SelectById
argument_list|<
name|T
argument_list|>
name|useSharedCache
parameter_list|(
name|String
modifier|...
name|cacheGroups
parameter_list|)
block|{
return|return
name|cacheStrategy
argument_list|(
name|QueryCacheStrategy
operator|.
name|SHARED_CACHE
argument_list|)
operator|.
name|cacheGroups
argument_list|(
name|cacheGroups
argument_list|)
return|;
block|}
specifier|public
name|QueryCacheStrategy
name|getCacheStrategy
parameter_list|()
block|{
return|return
name|cacheStrategy
return|;
block|}
specifier|public
name|SelectById
argument_list|<
name|T
argument_list|>
name|cacheStrategy
parameter_list|(
name|QueryCacheStrategy
name|strategy
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|cacheStrategy
operator|!=
name|strategy
condition|)
block|{
name|this
operator|.
name|cacheStrategy
operator|=
name|strategy
expr_stmt|;
name|this
operator|.
name|replacementQuery
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|String
index|[]
name|getCacheGroups
parameter_list|()
block|{
return|return
name|cacheGroups
return|;
block|}
specifier|public
name|SelectById
argument_list|<
name|T
argument_list|>
name|cacheGroups
parameter_list|(
name|String
modifier|...
name|cacheGroups
parameter_list|)
block|{
name|this
operator|.
name|cacheGroups
operator|=
name|cacheGroups
expr_stmt|;
name|this
operator|.
name|replacementQuery
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|isFetchingDataRows
parameter_list|()
block|{
return|return
name|fetchingDataRows
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Query
name|createReplacementQuery
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
name|ObjEntity
name|entity
init|=
name|resolveEntity
argument_list|(
name|resolver
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|id
init|=
name|resolveId
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|SelectQuery
argument_list|<
name|Object
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|query
operator|.
name|setRoot
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFetchingDataRows
argument_list|(
name|fetchingDataRows
argument_list|)
expr_stmt|;
name|query
operator|.
name|setQualifier
argument_list|(
name|matchAllDbExp
argument_list|(
name|id
argument_list|,
name|Expression
operator|.
name|EQUAL_TO
argument_list|)
argument_list|)
expr_stmt|;
comment|// note on caching... this hits query cache instead of object cache...
comment|// until we merge the two this may result in not using the cache
comment|// optimally - object cache may have an object, but query cache will not
name|query
operator|.
name|setCacheGroups
argument_list|(
name|cacheGroups
argument_list|)
expr_stmt|;
name|query
operator|.
name|setCacheStrategy
argument_list|(
name|cacheStrategy
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|resolveId
parameter_list|(
name|ObjEntity
name|entity
parameter_list|)
block|{
if|if
condition|(
name|singleId
operator|==
literal|null
operator|&&
name|mapId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Misconfigured query. Either singleId or mapId must be set"
argument_list|)
throw|;
block|}
if|if
condition|(
name|mapId
operator|!=
literal|null
condition|)
block|{
return|return
name|mapId
return|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|pkAttributes
init|=
name|entity
operator|.
name|getPrimaryKeyNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|pkAttributes
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"PK contains "
operator|+
name|pkAttributes
operator|.
name|size
argument_list|()
operator|+
literal|" columns, expected 1."
argument_list|)
throw|;
block|}
name|String
name|pk
init|=
name|pkAttributes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|singletonMap
argument_list|(
name|pk
argument_list|,
name|singleId
argument_list|)
return|;
block|}
specifier|protected
name|ObjEntity
name|resolveEntity
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
if|if
condition|(
name|entityName
operator|==
literal|null
operator|&&
name|entityType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Misconfigured query. Either entityName or entityType must be set"
argument_list|)
throw|;
block|}
return|return
name|entityName
operator|!=
literal|null
condition|?
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|entityName
argument_list|)
else|:
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|entityType
argument_list|)
return|;
block|}
block|}
end_class

end_unit

