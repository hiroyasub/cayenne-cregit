begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|CayenneMapEntry
import|;
end_import

begin_comment
comment|/**  * Preprocessor and router of SelectQuery prefetches.  *   * @since 1.2  */
end_comment

begin_class
class|class
name|SelectQueryPrefetchRouterAction
implements|implements
name|PrefetchProcessor
block|{
name|SelectQuery
argument_list|<
name|?
argument_list|>
name|query
decl_stmt|;
name|QueryRouter
name|router
decl_stmt|;
name|EntityResolver
name|resolver
decl_stmt|;
name|ClassDescriptor
name|classDescriptor
decl_stmt|;
comment|/**      * Routes query prefetches, but not the query itself.      */
name|void
name|route
parameter_list|(
name|SelectQuery
name|query
parameter_list|,
name|QueryRouter
name|router
parameter_list|,
name|EntityResolver
name|resolver
parameter_list|)
block|{
if|if
condition|(
operator|!
name|query
operator|.
name|isFetchingDataRows
argument_list|()
operator|&&
name|query
operator|.
name|getPrefetchTree
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|router
operator|=
name|router
expr_stmt|;
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
name|this
operator|.
name|classDescriptor
operator|=
name|query
operator|.
name|getMetaData
argument_list|(
name|resolver
argument_list|)
operator|.
name|getClassDescriptor
argument_list|()
expr_stmt|;
name|query
operator|.
name|getPrefetchTree
argument_list|()
operator|.
name|traverse
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|startPhantomPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|startDisjointPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
comment|// don't do anything to root
if|if
condition|(
name|node
operator|==
name|query
operator|.
name|getPrefetchTree
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|prefetchPath
init|=
name|node
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// find last relationship
name|Iterator
argument_list|<
name|CayenneMapEntry
argument_list|>
name|it
init|=
name|classDescriptor
operator|.
name|getEntity
argument_list|()
operator|.
name|resolvePathComponents
argument_list|(
name|prefetchPath
argument_list|)
decl_stmt|;
name|ObjRelationship
name|relationship
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|relationship
operator|=
operator|(
name|ObjRelationship
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|relationship
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Invalid prefetch '%s' for entity '%s'"
argument_list|,
name|prefetchPath
argument_list|,
name|classDescriptor
operator|.
name|getEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|// chain query and entity qualifiers
name|Expression
name|queryQualifier
init|=
name|query
operator|.
name|getQualifier
argument_list|()
decl_stmt|;
name|Expression
name|entityQualifier
init|=
name|classDescriptor
operator|.
name|getEntityInheritanceTree
argument_list|()
operator|.
name|qualifierForEntityAndSubclasses
argument_list|()
decl_stmt|;
if|if
condition|(
name|entityQualifier
operator|!=
literal|null
condition|)
block|{
name|queryQualifier
operator|=
operator|(
name|queryQualifier
operator|!=
literal|null
operator|)
condition|?
name|queryQualifier
operator|.
name|andExp
argument_list|(
name|entityQualifier
argument_list|)
else|:
name|entityQualifier
expr_stmt|;
block|}
comment|// create and configure PrefetchSelectQuery
name|PrefetchSelectQuery
name|prefetchQuery
init|=
operator|new
name|PrefetchSelectQuery
argument_list|(
name|prefetchPath
argument_list|,
name|relationship
argument_list|)
decl_stmt|;
name|prefetchQuery
operator|.
name|setStatementFetchSize
argument_list|(
name|query
operator|.
name|getStatementFetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|prefetchQuery
operator|.
name|setQualifier
argument_list|(
name|classDescriptor
operator|.
name|getEntity
argument_list|()
operator|.
name|translateToRelatedEntity
argument_list|(
name|queryQualifier
argument_list|,
name|prefetchPath
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|relationship
operator|.
name|isSourceIndependentFromTargetChange
argument_list|()
condition|)
block|{
comment|// setup extra result columns to be able to relate result rows to the parent
comment|// result objects.
name|prefetchQuery
operator|.
name|addResultPath
argument_list|(
literal|"db:"
operator|+
name|relationship
operator|.
name|getReverseDbRelationshipPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// pass prefetch subtree to enable joint prefetches...
name|prefetchQuery
operator|.
name|setPrefetchTree
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// route...
name|prefetchQuery
operator|.
name|route
argument_list|(
name|router
argument_list|,
name|resolver
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|startDisjointByIdPrefetch
parameter_list|(
name|PrefetchTreeNode
name|prefetchTreeNode
parameter_list|)
block|{
comment|// simply pass through
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|startJointPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
comment|// simply pass through
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|startUnknownPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
comment|// don't do anything to root
if|if
condition|(
name|node
operator|==
name|query
operator|.
name|getPrefetchTree
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// route unknown as disjoint...
return|return
name|startDisjointPrefetch
argument_list|(
name|node
argument_list|)
return|;
block|}
specifier|public
name|void
name|finishPrefetch
parameter_list|(
name|PrefetchTreeNode
name|node
parameter_list|)
block|{
block|}
block|}
end_class

end_unit

