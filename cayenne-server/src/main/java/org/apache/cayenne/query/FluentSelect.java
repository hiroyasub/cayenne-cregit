begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultBatchIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultIteratorCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_comment
comment|/**  * Base class for {@link ObjectSelect} and {@link ColumnSelect}  *  * @since 4.0  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|FluentSelect
parameter_list|<
name|T
parameter_list|,
name|S
extends|extends
name|FluentSelect
parameter_list|<
name|T
parameter_list|,
name|S
parameter_list|>
parameter_list|>
extends|extends
name|AbstractQuery
implements|implements
name|Select
argument_list|<
name|T
argument_list|>
block|{
comment|// root
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|entityType
decl_stmt|;
specifier|protected
name|String
name|entityName
decl_stmt|;
specifier|protected
name|String
name|dbEntityName
decl_stmt|;
specifier|protected
name|Expression
name|where
decl_stmt|;
specifier|protected
name|Expression
name|having
decl_stmt|;
specifier|protected
name|boolean
name|havingExpressionIsActive
init|=
literal|false
decl_stmt|;
specifier|protected
name|Collection
argument_list|<
name|Ordering
argument_list|>
name|orderings
decl_stmt|;
specifier|protected
name|boolean
name|distinct
decl_stmt|;
specifier|protected
name|ObjectSelectMetadata
name|metaData
decl_stmt|;
specifier|protected
name|FluentSelect
parameter_list|()
block|{
name|metaData
operator|=
name|createMetadata
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|ObjectSelectMetadata
name|createMetadata
parameter_list|()
function_decl|;
specifier|protected
name|Object
name|resolveRoot
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
name|Object
name|root
decl_stmt|;
if|if
condition|(
name|entityType
operator|!=
literal|null
condition|)
block|{
name|root
operator|=
name|entityType
expr_stmt|;
block|}
if|else if
condition|(
name|entityName
operator|!=
literal|null
condition|)
block|{
name|ObjEntity
name|entity
init|=
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|entityName
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unrecognized ObjEntity name: %s"
argument_list|,
name|entityName
argument_list|)
throw|;
block|}
name|root
operator|=
name|entity
expr_stmt|;
block|}
if|else if
condition|(
name|dbEntityName
operator|!=
literal|null
condition|)
block|{
name|DbEntity
name|entity
init|=
name|resolver
operator|.
name|getDbEntity
argument_list|(
name|dbEntityName
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unrecognized DbEntity name: %s"
argument_list|,
name|dbEntityName
argument_list|)
throw|;
block|}
name|root
operator|=
name|entity
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Undefined root entity of the query"
argument_list|)
throw|;
block|}
return|return
name|root
return|;
block|}
comment|/**      * Sets the type of the entity to fetch without changing the return type of      * the query.      *      * @return this object      */
specifier|public
name|S
name|entityType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|entityType
parameter_list|)
block|{
return|return
name|resetEntity
argument_list|(
name|entityType
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Sets the {@link ObjEntity} name to fetch without changing the return type      * of the query. This form is most often used for generic entities that      * don't map to a distinct class.      *      * @return this object      */
specifier|public
name|S
name|entityName
parameter_list|(
name|String
name|entityName
parameter_list|)
block|{
return|return
name|resetEntity
argument_list|(
literal|null
argument_list|,
name|entityName
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Sets the {@link DbEntity} name to fetch without changing the return type      * of the query. This form is most often used for generic entities that      * don't map to a distinct class.      *      * @return this object      */
specifier|public
name|S
name|dbEntityName
parameter_list|(
name|String
name|dbEntityName
parameter_list|)
block|{
return|return
name|resetEntity
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|dbEntityName
argument_list|)
return|;
block|}
specifier|private
name|S
name|resetEntity
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|entityType
parameter_list|,
name|String
name|entityName
parameter_list|,
name|String
name|dbEntityName
parameter_list|)
block|{
name|this
operator|.
name|entityType
operator|=
name|entityType
expr_stmt|;
name|this
operator|.
name|entityName
operator|=
name|entityName
expr_stmt|;
name|this
operator|.
name|dbEntityName
operator|=
name|dbEntityName
expr_stmt|;
return|return
name|castSelf
argument_list|()
return|;
block|}
comment|/**      * Appends a qualifier expression of this query. An equivalent to      * {@link #and(Expression...)} that can be used a syntactic sugar.      *      * @return this object      */
specifier|public
name|S
name|where
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
return|return
name|and
argument_list|(
name|expression
argument_list|)
return|;
block|}
comment|/**      * Appends a qualifier expression of this query, using provided expression      * String and an array of position parameters. This is an equivalent to      * calling "and".      *      * @return this object      */
specifier|public
name|S
name|where
parameter_list|(
name|String
name|expressionString
parameter_list|,
name|Object
modifier|...
name|parameters
parameter_list|)
block|{
return|return
name|and
argument_list|(
name|ExpressionFactory
operator|.
name|exp
argument_list|(
name|expressionString
argument_list|,
name|parameters
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * AND's provided expressions to the existing WHERE clause expression.      *      * @return this object      */
specifier|public
name|S
name|and
parameter_list|(
name|Expression
modifier|...
name|expressions
parameter_list|)
block|{
if|if
condition|(
name|expressions
operator|==
literal|null
operator|||
name|expressions
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|castSelf
argument_list|()
return|;
block|}
return|return
name|and
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expressions
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * AND's provided expressions to the existing WHERE clause expression.      *      * @return this object      */
specifier|public
name|S
name|and
parameter_list|(
name|Collection
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|)
block|{
return|return
name|joinExpression
argument_list|(
name|expressions
argument_list|,
name|ExpressionFactory
operator|::
name|and
argument_list|)
return|;
block|}
specifier|protected
name|S
name|joinExpression
parameter_list|(
name|Collection
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|,
name|Function
argument_list|<
name|Collection
argument_list|<
name|Expression
argument_list|>
argument_list|,
name|Expression
argument_list|>
name|joiner
parameter_list|)
block|{
if|if
condition|(
name|expressions
operator|==
literal|null
operator|||
name|expressions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|castSelf
argument_list|()
return|;
block|}
name|Collection
argument_list|<
name|Expression
argument_list|>
name|all
decl_stmt|;
name|Expression
name|activeExpression
init|=
name|getActiveExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|activeExpression
operator|!=
literal|null
condition|)
block|{
name|all
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|expressions
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|all
operator|.
name|add
argument_list|(
name|activeExpression
argument_list|)
expr_stmt|;
name|all
operator|.
name|addAll
argument_list|(
name|expressions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|all
operator|=
name|expressions
expr_stmt|;
block|}
name|setActiveExpression
argument_list|(
name|joiner
operator|.
name|apply
argument_list|(
name|all
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|castSelf
argument_list|()
return|;
block|}
comment|/**      * OR's provided expressions to the existing WHERE clause expression.      *      * @return this object      */
specifier|public
name|S
name|or
parameter_list|(
name|Expression
modifier|...
name|expressions
parameter_list|)
block|{
if|if
condition|(
name|expressions
operator|==
literal|null
operator|||
name|expressions
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|castSelf
argument_list|()
return|;
block|}
return|return
name|or
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expressions
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * OR's provided expressions to the existing WHERE clause expression.      *      * @return this object      */
specifier|public
name|S
name|or
parameter_list|(
name|Collection
argument_list|<
name|Expression
argument_list|>
name|expressions
parameter_list|)
block|{
return|return
name|joinExpression
argument_list|(
name|expressions
argument_list|,
name|ExpressionFactory
operator|::
name|or
argument_list|)
return|;
block|}
comment|/**      * Add an ascending ordering on the given property. If there is already an ordering      * on this query then add this ordering with a lower priority.      *      * @param property the property to sort on      * @return this object      */
specifier|public
name|S
name|orderBy
parameter_list|(
name|String
name|property
parameter_list|)
block|{
return|return
name|orderBy
argument_list|(
operator|new
name|Ordering
argument_list|(
name|property
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Add an ordering on the given property. If there is already an ordering      * on this query then add this ordering with a lower priority.      *      * @param property  the property to sort on      * @param sortOrder the direction of the ordering      * @return this object      */
specifier|public
name|S
name|orderBy
parameter_list|(
name|String
name|property
parameter_list|,
name|SortOrder
name|sortOrder
parameter_list|)
block|{
return|return
name|orderBy
argument_list|(
operator|new
name|Ordering
argument_list|(
name|property
argument_list|,
name|sortOrder
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Add one or more orderings to this query.      *      * @return this object      */
specifier|public
name|S
name|orderBy
parameter_list|(
name|Ordering
modifier|...
name|orderings
parameter_list|)
block|{
if|if
condition|(
name|orderings
operator|==
literal|null
condition|)
block|{
return|return
name|castSelf
argument_list|()
return|;
block|}
if|if
condition|(
name|this
operator|.
name|orderings
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|orderings
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|orderings
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|orderings
argument_list|,
name|orderings
argument_list|)
expr_stmt|;
return|return
name|castSelf
argument_list|()
return|;
block|}
comment|/**      * Adds a list of orderings to this query.      *      * @return this object      */
specifier|public
name|S
name|orderBy
parameter_list|(
name|Collection
argument_list|<
name|Ordering
argument_list|>
name|orderings
parameter_list|)
block|{
if|if
condition|(
name|orderings
operator|==
literal|null
condition|)
block|{
return|return
name|castSelf
argument_list|()
return|;
block|}
if|if
condition|(
name|this
operator|.
name|orderings
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|orderings
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|orderings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|orderings
operator|.
name|addAll
argument_list|(
name|orderings
argument_list|)
expr_stmt|;
return|return
name|castSelf
argument_list|()
return|;
block|}
comment|/**      * Merges prefetch into the query prefetch tree.      *      * @return this object      */
specifier|public
name|S
name|prefetch
parameter_list|(
name|PrefetchTreeNode
name|prefetch
parameter_list|)
block|{
name|getBaseMetaData
argument_list|()
operator|.
name|mergePrefetch
argument_list|(
name|prefetch
argument_list|)
expr_stmt|;
return|return
name|castSelf
argument_list|()
return|;
block|}
comment|/**      * Merges a prefetch path with specified semantics into the query prefetch tree.      *      * @return this object      */
specifier|public
name|S
name|prefetch
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|semantics
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
name|castSelf
argument_list|()
return|;
block|}
name|getBaseMetaData
argument_list|()
operator|.
name|addPrefetch
argument_list|(
name|path
argument_list|,
name|semantics
argument_list|)
expr_stmt|;
return|return
name|castSelf
argument_list|()
return|;
block|}
comment|/**      * Resets query fetch limit - a parameter that defines max number of objects      * that should be ever be fetched from the database.      */
specifier|public
name|S
name|limit
parameter_list|(
name|int
name|fetchLimit
parameter_list|)
block|{
name|this
operator|.
name|getBaseMetaData
argument_list|()
operator|.
name|setFetchLimit
argument_list|(
name|fetchLimit
argument_list|)
expr_stmt|;
return|return
name|castSelf
argument_list|()
return|;
block|}
comment|/**      * Resets query fetch offset - a parameter that defines how many objects      * should be skipped when reading data from the database.      */
specifier|public
name|S
name|offset
parameter_list|(
name|int
name|fetchOffset
parameter_list|)
block|{
name|this
operator|.
name|getBaseMetaData
argument_list|()
operator|.
name|setFetchOffset
argument_list|(
name|fetchOffset
argument_list|)
expr_stmt|;
return|return
name|castSelf
argument_list|()
return|;
block|}
comment|/**      * Resets query page size. A non-negative page size enables query result      * pagination that saves memory and processing time for large lists if only      * parts of the result are ever going to be accessed.      */
specifier|public
name|S
name|pageSize
parameter_list|(
name|int
name|pageSize
parameter_list|)
block|{
name|this
operator|.
name|getBaseMetaData
argument_list|()
operator|.
name|setPageSize
argument_list|(
name|pageSize
argument_list|)
expr_stmt|;
return|return
name|castSelf
argument_list|()
return|;
block|}
comment|/**      * Sets fetch size of the PreparedStatement generated for this query. Only      * non-negative values would change the default size.      *      * @see Statement#setFetchSize(int)      */
specifier|public
name|S
name|statementFetchSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|getBaseMetaData
argument_list|()
operator|.
name|setStatementFetchSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
return|return
name|castSelf
argument_list|()
return|;
block|}
comment|/**      * Sets query timeout of PreparedStatement generated for this query.      * @see Statement#setQueryTimeout(int)      */
specifier|public
name|S
name|queryTimeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|getBaseMetaData
argument_list|()
operator|.
name|setQueryTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
return|return
name|castSelf
argument_list|()
return|;
block|}
specifier|public
name|S
name|cacheStrategy
parameter_list|(
name|QueryCacheStrategy
name|strategy
parameter_list|)
block|{
name|setCacheStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|setCacheGroup
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|castSelf
argument_list|()
return|;
block|}
specifier|public
name|S
name|cacheStrategy
parameter_list|(
name|QueryCacheStrategy
name|strategy
parameter_list|,
name|String
name|cacheGroup
parameter_list|)
block|{
return|return
name|cacheStrategy
argument_list|(
name|strategy
argument_list|)
operator|.
name|cacheGroup
argument_list|(
name|cacheGroup
argument_list|)
return|;
block|}
specifier|public
name|S
name|cacheGroup
parameter_list|(
name|String
name|cacheGroup
parameter_list|)
block|{
name|setCacheGroup
argument_list|(
name|cacheGroup
argument_list|)
expr_stmt|;
return|return
name|castSelf
argument_list|()
return|;
block|}
comment|/**      * Instructs Cayenne to look for query results in the "local" cache when      * running the query. This is a short-hand notation for:      *<p>      *<pre>      * query.cacheStrategy(QueryCacheStrategy.LOCAL_CACHE, cacheGroup);      *</pre>      */
specifier|public
name|S
name|localCache
parameter_list|(
name|String
name|cacheGroup
parameter_list|)
block|{
return|return
name|cacheStrategy
argument_list|(
name|QueryCacheStrategy
operator|.
name|LOCAL_CACHE
argument_list|,
name|cacheGroup
argument_list|)
return|;
block|}
comment|/**      * Instructs Cayenne to look for query results in the "local" cache when      * running the query. This is a short-hand notation for:      *<p>      *<pre>      * query.cacheStrategy(QueryCacheStrategy.LOCAL_CACHE);      *</pre>      */
specifier|public
name|S
name|localCache
parameter_list|()
block|{
return|return
name|cacheStrategy
argument_list|(
name|QueryCacheStrategy
operator|.
name|LOCAL_CACHE
argument_list|)
return|;
block|}
comment|/**      * Instructs Cayenne to look for query results in the "shared" cache when      * running the query. This is a short-hand notation for:      *<p>      *<pre>      * query.cacheStrategy(QueryCacheStrategy.SHARED_CACHE, cacheGroup);      *</pre>      */
specifier|public
name|S
name|sharedCache
parameter_list|(
name|String
name|cacheGroup
parameter_list|)
block|{
return|return
name|cacheStrategy
argument_list|(
name|QueryCacheStrategy
operator|.
name|SHARED_CACHE
argument_list|,
name|cacheGroup
argument_list|)
return|;
block|}
comment|/**      * Instructs Cayenne to look for query results in the "shared" cache when      * running the query. This is a short-hand notation for:      *<p>      *<pre>      * query.cacheStrategy(QueryCacheStrategy.SHARED_CACHE);      *</pre>      */
specifier|public
name|S
name|sharedCache
parameter_list|()
block|{
return|return
name|cacheStrategy
argument_list|(
name|QueryCacheStrategy
operator|.
name|SHARED_CACHE
argument_list|)
return|;
block|}
specifier|public
name|int
name|getStatementFetchSize
parameter_list|()
block|{
return|return
name|getBaseMetaData
argument_list|()
operator|.
name|getStatementFetchSize
argument_list|()
return|;
block|}
comment|/**      * @since 4.2      */
specifier|public
name|int
name|getQueryTimeout
parameter_list|()
block|{
return|return
name|getBaseMetaData
argument_list|()
operator|.
name|getQueryTimeout
argument_list|()
return|;
block|}
specifier|public
name|int
name|getPageSize
parameter_list|()
block|{
return|return
name|getBaseMetaData
argument_list|()
operator|.
name|getPageSize
argument_list|()
return|;
block|}
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
return|return
name|getBaseMetaData
argument_list|()
operator|.
name|getFetchLimit
argument_list|()
return|;
block|}
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|getBaseMetaData
argument_list|()
operator|.
name|getFetchOffset
argument_list|()
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getEntityType
parameter_list|()
block|{
return|return
name|entityType
return|;
block|}
specifier|public
name|String
name|getEntityName
parameter_list|()
block|{
return|return
name|entityName
return|;
block|}
specifier|public
name|String
name|getDbEntityName
parameter_list|()
block|{
return|return
name|dbEntityName
return|;
block|}
comment|/**      * Returns a WHERE clause Expression of this query.      */
specifier|public
name|Expression
name|getWhere
parameter_list|()
block|{
return|return
name|where
return|;
block|}
comment|/**      * Returns a HAVING clause Expression of this query.      */
specifier|public
name|Expression
name|getHaving
parameter_list|()
block|{
return|return
name|having
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|Ordering
argument_list|>
name|getOrderings
parameter_list|()
block|{
return|return
name|orderings
return|;
block|}
specifier|public
name|PrefetchTreeNode
name|getPrefetches
parameter_list|()
block|{
return|return
name|getBaseMetaData
argument_list|()
operator|.
name|getPrefetchTree
argument_list|()
return|;
block|}
specifier|protected
name|void
name|setActiveExpression
parameter_list|(
name|Expression
name|exp
parameter_list|)
block|{
if|if
condition|(
name|havingExpressionIsActive
condition|)
block|{
name|having
operator|=
name|exp
expr_stmt|;
block|}
else|else
block|{
name|where
operator|=
name|exp
expr_stmt|;
block|}
block|}
specifier|protected
name|Expression
name|getActiveExpression
parameter_list|()
block|{
if|if
condition|(
name|havingExpressionIsActive
condition|)
block|{
return|return
name|having
return|;
block|}
else|else
block|{
return|return
name|where
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|select
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|select
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|selectOne
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|selectOne
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|ResultIteratorCallback
argument_list|<
name|T
argument_list|>
name|callback
parameter_list|)
block|{
name|context
operator|.
name|iterate
argument_list|(
name|this
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ResultIterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|iterator
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultBatchIterator
argument_list|<
name|T
argument_list|>
name|batchIterator
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|int
name|size
parameter_list|)
block|{
return|return
name|context
operator|.
name|batchIterator
argument_list|(
name|this
argument_list|,
name|size
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SQLAction
name|createSQLAction
parameter_list|(
name|SQLActionVisitor
name|visitor
parameter_list|)
block|{
return|return
name|visitor
operator|.
name|objectSelectAction
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|route
parameter_list|(
name|QueryRouter
name|router
parameter_list|,
name|EntityResolver
name|resolver
parameter_list|,
name|Query
name|substitutedQuery
parameter_list|)
block|{
name|super
operator|.
name|route
argument_list|(
name|router
argument_list|,
name|resolver
argument_list|,
name|substitutedQuery
argument_list|)
expr_stmt|;
comment|// suppress prefetches for paginated queries.. instead prefetches will be resolved per row...
if|if
condition|(
name|getPageSize
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|routePrefetches
argument_list|(
name|router
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isFetchingDataRows
parameter_list|()
block|{
return|return
name|getBaseMetaData
argument_list|()
operator|.
name|isFetchingDataRows
argument_list|()
return|;
block|}
specifier|protected
name|void
name|routePrefetches
parameter_list|(
name|QueryRouter
name|router
parameter_list|,
name|EntityResolver
name|resolver
parameter_list|)
block|{
operator|new
name|FluentSelectPrefetchRouterAction
argument_list|()
operator|.
name|route
argument_list|(
name|this
argument_list|,
name|router
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since 4.2      */
specifier|public
name|Collection
argument_list|<
name|Property
argument_list|<
name|?
argument_list|>
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * @since 4.2      */
specifier|public
name|boolean
name|isDistinct
parameter_list|()
block|{
return|return
name|distinct
return|;
block|}
comment|/**      * @since 4.2      */
specifier|public
name|void
name|initWithProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|getBaseMetaData
argument_list|()
operator|.
name|initWithProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
comment|/**      * Utility method to perform (re)cast this type, doesn't perform any checks, so use with caution.      *      * @return<code>this</code> casted to the type E      * @param<E> type to cast to      * @since 5.0      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
parameter_list|<
name|E
parameter_list|>
name|E
name|castSelf
parameter_list|()
block|{
return|return
operator|(
name|E
operator|)
name|this
return|;
block|}
block|}
end_class

end_unit

