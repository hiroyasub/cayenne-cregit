begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultBatchIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultIteratorCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_comment
comment|/**  * Base class for {@link ObjectSelect} and {@link ColumnSelect}  *  * @since 4.0  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|FluentSelect
parameter_list|<
name|T
parameter_list|>
extends|extends
name|IndirectQuery
implements|implements
name|Select
argument_list|<
name|T
argument_list|>
block|{
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|entityType
decl_stmt|;
specifier|protected
name|String
name|entityName
decl_stmt|;
specifier|protected
name|String
name|dbEntityName
decl_stmt|;
specifier|protected
name|Expression
name|where
decl_stmt|;
specifier|protected
name|Collection
argument_list|<
name|Ordering
argument_list|>
name|orderings
decl_stmt|;
specifier|protected
name|PrefetchTreeNode
name|prefetches
decl_stmt|;
specifier|protected
name|int
name|limit
decl_stmt|;
specifier|protected
name|int
name|offset
decl_stmt|;
specifier|protected
name|int
name|pageSize
decl_stmt|;
specifier|protected
name|int
name|statementFetchSize
decl_stmt|;
specifier|protected
name|QueryCacheStrategy
name|cacheStrategy
decl_stmt|;
specifier|protected
name|String
name|cacheGroup
decl_stmt|;
specifier|protected
name|FluentSelect
parameter_list|()
block|{
block|}
comment|/**      * Translates self to a SelectQuery.      */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"deprecation"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Override
specifier|protected
name|Query
name|createReplacementQuery
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|SelectQuery
name|replacement
init|=
operator|new
name|SelectQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|entityType
operator|!=
literal|null
condition|)
block|{
name|replacement
operator|.
name|setRoot
argument_list|(
name|entityType
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|entityName
operator|!=
literal|null
condition|)
block|{
name|ObjEntity
name|entity
init|=
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|entityName
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unrecognized ObjEntity name: %s"
argument_list|,
name|entityName
argument_list|)
throw|;
block|}
name|replacement
operator|.
name|setRoot
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dbEntityName
operator|!=
literal|null
condition|)
block|{
name|DbEntity
name|entity
init|=
name|resolver
operator|.
name|getDbEntity
argument_list|(
name|dbEntityName
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unrecognized DbEntity name: %s"
argument_list|,
name|dbEntityName
argument_list|)
throw|;
block|}
name|replacement
operator|.
name|setRoot
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Undefined root entity of the query"
argument_list|)
throw|;
block|}
name|replacement
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|replacement
operator|.
name|setQualifier
argument_list|(
name|where
argument_list|)
expr_stmt|;
name|replacement
operator|.
name|addOrderings
argument_list|(
name|orderings
argument_list|)
expr_stmt|;
name|replacement
operator|.
name|setPrefetchTree
argument_list|(
name|prefetches
argument_list|)
expr_stmt|;
name|replacement
operator|.
name|setCacheStrategy
argument_list|(
name|cacheStrategy
argument_list|)
expr_stmt|;
name|replacement
operator|.
name|setCacheGroup
argument_list|(
name|cacheGroup
argument_list|)
expr_stmt|;
name|replacement
operator|.
name|setFetchLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|replacement
operator|.
name|setFetchOffset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|replacement
operator|.
name|setPageSize
argument_list|(
name|pageSize
argument_list|)
expr_stmt|;
name|replacement
operator|.
name|setStatementFetchSize
argument_list|(
name|statementFetchSize
argument_list|)
expr_stmt|;
return|return
name|replacement
return|;
block|}
specifier|public
name|String
name|getCacheGroup
parameter_list|()
block|{
return|return
name|cacheGroup
return|;
block|}
specifier|public
name|QueryCacheStrategy
name|getCacheStrategy
parameter_list|()
block|{
return|return
name|cacheStrategy
return|;
block|}
specifier|public
name|int
name|getStatementFetchSize
parameter_list|()
block|{
return|return
name|statementFetchSize
return|;
block|}
specifier|public
name|int
name|getPageSize
parameter_list|()
block|{
return|return
name|pageSize
return|;
block|}
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
return|return
name|limit
return|;
block|}
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getEntityType
parameter_list|()
block|{
return|return
name|entityType
return|;
block|}
specifier|public
name|String
name|getEntityName
parameter_list|()
block|{
return|return
name|entityName
return|;
block|}
specifier|public
name|String
name|getDbEntityName
parameter_list|()
block|{
return|return
name|dbEntityName
return|;
block|}
comment|/**      * Returns a WHERE clause Expression of this query.      */
specifier|public
name|Expression
name|getWhere
parameter_list|()
block|{
return|return
name|where
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|Ordering
argument_list|>
name|getOrderings
parameter_list|()
block|{
return|return
name|orderings
return|;
block|}
specifier|public
name|PrefetchTreeNode
name|getPrefetches
parameter_list|()
block|{
return|return
name|prefetches
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|select
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|select
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|selectOne
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|selectOne
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|ResultIteratorCallback
argument_list|<
name|T
argument_list|>
name|callback
parameter_list|)
block|{
name|context
operator|.
name|iterate
argument_list|(
name|this
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ResultIterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|iterator
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultBatchIterator
argument_list|<
name|T
argument_list|>
name|batchIterator
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|int
name|size
parameter_list|)
block|{
return|return
name|context
operator|.
name|batchIterator
argument_list|(
name|this
argument_list|,
name|size
argument_list|)
return|;
block|}
block|}
end_class

end_unit

