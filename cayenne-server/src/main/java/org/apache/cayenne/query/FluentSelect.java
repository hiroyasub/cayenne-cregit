begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultBatchIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ResultIteratorCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_comment
comment|/**  * Base class for {@link ObjectSelect} and {@link ColumnSelect}  *  * @since 4.0  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|FluentSelect
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractQuery
implements|implements
name|Select
argument_list|<
name|T
argument_list|>
block|{
comment|// root
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|entityType
decl_stmt|;
specifier|protected
name|String
name|entityName
decl_stmt|;
specifier|protected
name|String
name|dbEntityName
decl_stmt|;
specifier|protected
name|Expression
name|where
decl_stmt|;
specifier|protected
name|Expression
name|having
decl_stmt|;
name|boolean
name|havingExpressionIsActive
init|=
literal|false
decl_stmt|;
specifier|protected
name|Collection
argument_list|<
name|Ordering
argument_list|>
name|orderings
decl_stmt|;
name|boolean
name|distinct
decl_stmt|;
specifier|protected
name|FluentSelect
parameter_list|()
block|{
block|}
specifier|protected
name|Object
name|resolveRoot
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
name|Object
name|root
decl_stmt|;
if|if
condition|(
name|entityType
operator|!=
literal|null
condition|)
block|{
name|root
operator|=
name|entityType
expr_stmt|;
block|}
if|else if
condition|(
name|entityName
operator|!=
literal|null
condition|)
block|{
name|ObjEntity
name|entity
init|=
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|entityName
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unrecognized ObjEntity name: %s"
argument_list|,
name|entityName
argument_list|)
throw|;
block|}
name|root
operator|=
name|entity
expr_stmt|;
block|}
if|else if
condition|(
name|dbEntityName
operator|!=
literal|null
condition|)
block|{
name|DbEntity
name|entity
init|=
name|resolver
operator|.
name|getDbEntity
argument_list|(
name|dbEntityName
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unrecognized DbEntity name: %s"
argument_list|,
name|dbEntityName
argument_list|)
throw|;
block|}
name|root
operator|=
name|entity
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Undefined root entity of the query"
argument_list|)
throw|;
block|}
return|return
name|root
return|;
block|}
specifier|public
name|int
name|getStatementFetchSize
parameter_list|()
block|{
return|return
name|getBaseMetaData
argument_list|()
operator|.
name|getStatementFetchSize
argument_list|()
return|;
block|}
comment|/**      * @since 4.2      */
specifier|public
name|int
name|getQueryTimeout
parameter_list|()
block|{
return|return
name|getBaseMetaData
argument_list|()
operator|.
name|getQueryTimeout
argument_list|()
return|;
block|}
specifier|public
name|int
name|getPageSize
parameter_list|()
block|{
return|return
name|getBaseMetaData
argument_list|()
operator|.
name|getPageSize
argument_list|()
return|;
block|}
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
return|return
name|getBaseMetaData
argument_list|()
operator|.
name|getFetchLimit
argument_list|()
return|;
block|}
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|getBaseMetaData
argument_list|()
operator|.
name|getFetchOffset
argument_list|()
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getEntityType
parameter_list|()
block|{
return|return
name|entityType
return|;
block|}
specifier|public
name|String
name|getEntityName
parameter_list|()
block|{
return|return
name|entityName
return|;
block|}
specifier|public
name|String
name|getDbEntityName
parameter_list|()
block|{
return|return
name|dbEntityName
return|;
block|}
comment|/**      * Returns a WHERE clause Expression of this query.      */
specifier|public
name|Expression
name|getWhere
parameter_list|()
block|{
return|return
name|where
return|;
block|}
comment|/**      * Returns a HAVING clause Expression of this query.      */
specifier|public
name|Expression
name|getHaving
parameter_list|()
block|{
return|return
name|having
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|Ordering
argument_list|>
name|getOrderings
parameter_list|()
block|{
return|return
name|orderings
return|;
block|}
specifier|public
name|PrefetchTreeNode
name|getPrefetches
parameter_list|()
block|{
return|return
name|getBaseMetaData
argument_list|()
operator|.
name|getPrefetchTree
argument_list|()
return|;
block|}
name|void
name|setActiveExpression
parameter_list|(
name|Expression
name|exp
parameter_list|)
block|{
if|if
condition|(
name|havingExpressionIsActive
condition|)
block|{
name|having
operator|=
name|exp
expr_stmt|;
block|}
else|else
block|{
name|where
operator|=
name|exp
expr_stmt|;
block|}
block|}
name|Expression
name|getActiveExpression
parameter_list|()
block|{
if|if
condition|(
name|havingExpressionIsActive
condition|)
block|{
return|return
name|having
return|;
block|}
else|else
block|{
return|return
name|where
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|select
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|select
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|selectOne
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|selectOne
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|ResultIteratorCallback
argument_list|<
name|T
argument_list|>
name|callback
parameter_list|)
block|{
name|context
operator|.
name|iterate
argument_list|(
name|this
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ResultIterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|(
name|ObjectContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|iterator
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultBatchIterator
argument_list|<
name|T
argument_list|>
name|batchIterator
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|int
name|size
parameter_list|)
block|{
return|return
name|context
operator|.
name|batchIterator
argument_list|(
name|this
argument_list|,
name|size
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SQLAction
name|createSQLAction
parameter_list|(
name|SQLActionVisitor
name|visitor
parameter_list|)
block|{
return|return
name|visitor
operator|.
name|objectSelectAction
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|route
parameter_list|(
name|QueryRouter
name|router
parameter_list|,
name|EntityResolver
name|resolver
parameter_list|,
name|Query
name|substitutedQuery
parameter_list|)
block|{
name|super
operator|.
name|route
argument_list|(
name|router
argument_list|,
name|resolver
argument_list|,
name|substitutedQuery
argument_list|)
expr_stmt|;
comment|// suppress prefetches for paginated queries.. instead prefetches will be resolved per row...
if|if
condition|(
name|getPageSize
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|routePrefetches
argument_list|(
name|router
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isFetchingDataRows
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|routePrefetches
parameter_list|(
name|QueryRouter
name|router
parameter_list|,
name|EntityResolver
name|resolver
parameter_list|)
block|{
operator|new
name|FluentSelectPrefetchRouterAction
argument_list|()
operator|.
name|route
argument_list|(
name|this
argument_list|,
name|router
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since 4.2      */
specifier|public
name|Collection
argument_list|<
name|Property
argument_list|<
name|?
argument_list|>
argument_list|>
name|getColumns
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * @since 4.2      */
specifier|public
name|boolean
name|isDistinct
parameter_list|()
block|{
return|return
name|distinct
return|;
block|}
comment|/**      * @since 4.2      */
specifier|public
name|void
name|initWithProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|getBaseMetaData
argument_list|()
operator|.
name|initWithProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

