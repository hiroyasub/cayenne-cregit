begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_comment
comment|/**  * Represents a single row of values in a BatchQuery.  *   * @since 4.0  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BatchQueryRow
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MAX_NESTED_SUPPLIER_LEVEL
init|=
literal|1000
decl_stmt|;
specifier|protected
name|ObjectId
name|objectId
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|qualifier
decl_stmt|;
specifier|public
name|BatchQueryRow
parameter_list|(
name|ObjectId
name|objectId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|qualifier
parameter_list|)
block|{
name|this
operator|.
name|objectId
operator|=
name|objectId
expr_stmt|;
name|this
operator|.
name|qualifier
operator|=
name|qualifier
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|Object
name|getValue
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getQualifier
parameter_list|()
block|{
return|return
name|qualifier
return|;
block|}
specifier|public
name|ObjectId
name|getObjectId
parameter_list|()
block|{
return|return
name|objectId
return|;
block|}
comment|/**      * Used by subclasses to resolve deferred values on demand. This is useful      * when a certain value comes from a generated key of another master object.      */
specifier|protected
name|Object
name|getValue
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|valueMap
parameter_list|,
name|DbAttribute
name|attribute
parameter_list|)
block|{
name|Object
name|value
init|=
name|valueMap
operator|.
name|get
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isSupplier
init|=
literal|false
decl_stmt|;
name|int
name|safeguard
init|=
literal|0
decl_stmt|;
comment|// Supplier can be nested, resolve all the way down
while|while
condition|(
name|value
operator|instanceof
name|Supplier
operator|&&
name|safeguard
operator|<
name|MAX_NESTED_SUPPLIER_LEVEL
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|Supplier
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|isSupplier
operator|=
literal|true
expr_stmt|;
name|safeguard
operator|++
expr_stmt|;
block|}
comment|// simple guard from recursive Suppliers
if|if
condition|(
name|safeguard
operator|==
name|MAX_NESTED_SUPPLIER_LEVEL
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Possible recursive supplier chain for batch row value, object %s, attribute %s"
argument_list|,
name|objectId
argument_list|,
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|// if a value is a Supplier, resolve it here...
if|if
condition|(
name|isSupplier
condition|)
block|{
name|valueMap
operator|.
name|put
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// update replacement id
if|if
condition|(
name|attribute
operator|.
name|isPrimaryKey
argument_list|()
condition|)
block|{
comment|// sanity check
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|String
name|name
init|=
name|attribute
operator|.
name|getEntity
argument_list|()
operator|!=
literal|null
condition|?
name|attribute
operator|.
name|getEntity
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|"<null>"
decl_stmt|;
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Failed to generate PK: %s.%s"
argument_list|,
name|name
argument_list|,
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|ObjectId
name|id
init|=
name|getObjectId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
comment|// always override with fresh value as this is what's in the DB
name|id
operator|.
name|getReplacementIdMap
argument_list|()
operator|.
name|put
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

