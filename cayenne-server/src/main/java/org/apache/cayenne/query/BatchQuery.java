begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNodeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Factory
import|;
end_import

begin_comment
comment|/**  * BatchQuery and its descendants allow to group similar data for the batch database  * modifications, including inserts, updates and deletes. Single BatchQuery corresponds to  * a parameterized PreparedStatement and a matrix of values.  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BatchQuery
implements|implements
name|Query
block|{
comment|/**      * @since 1.2      */
specifier|protected
name|int
name|batchIndex
decl_stmt|;
comment|/**      * @since 1.2      */
specifier|protected
name|DbEntity
name|dbEntity
decl_stmt|;
specifier|protected
name|String
name|name
decl_stmt|;
comment|/**      * @since 3.1      */
specifier|protected
name|DataMap
name|dataMap
decl_stmt|;
specifier|public
name|BatchQuery
parameter_list|(
name|DbEntity
name|dbEntity
parameter_list|)
block|{
name|this
operator|.
name|dbEntity
operator|=
name|dbEntity
expr_stmt|;
name|this
operator|.
name|batchIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|acceptVisitor
parameter_list|(
name|ConfigurationNodeVisitor
argument_list|<
name|T
argument_list|>
name|visitor
parameter_list|)
block|{
return|return
name|visitor
operator|.
name|visitQuery
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * @since 3.1      */
annotation|@
name|Override
specifier|public
name|DataMap
name|getDataMap
parameter_list|()
block|{
return|return
name|dataMap
return|;
block|}
comment|/**      * @since 3.1      */
specifier|public
name|void
name|setDataMap
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
name|this
operator|.
name|dataMap
operator|=
name|dataMap
expr_stmt|;
block|}
comment|/**      * Returns default select parameters.      *       * @since 1.2      */
annotation|@
name|Override
specifier|public
name|QueryMetadata
name|getMetaData
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
return|return
operator|new
name|DefaultQueryMetadata
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DbEntity
name|getDbEntity
parameter_list|()
block|{
return|return
name|dbEntity
return|;
block|}
block|}
return|;
block|}
comment|/**      * @since 1.2      */
annotation|@
name|Override
specifier|public
name|void
name|route
parameter_list|(
name|QueryRouter
name|router
parameter_list|,
name|EntityResolver
name|resolver
parameter_list|,
name|Query
name|substitutedQuery
parameter_list|)
block|{
name|router
operator|.
name|route
argument_list|(
name|router
operator|.
name|engineForDataMap
argument_list|(
name|dbEntity
operator|.
name|getDataMap
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|substitutedQuery
argument_list|)
expr_stmt|;
block|}
comment|/**      * Calls "batchAction" on the visitor.      *       * @since 1.2      */
annotation|@
name|Override
specifier|public
name|SQLAction
name|createSQLAction
parameter_list|(
name|SQLActionVisitor
name|visitor
parameter_list|)
block|{
return|return
name|visitor
operator|.
name|batchAction
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * Returns true if the batch query uses optimistic locking.      *       * @since 1.1      */
specifier|public
name|boolean
name|isUsingOptimisticLocking
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Returns a DbEntity associated with this batch.      */
specifier|public
name|DbEntity
name|getDbEntity
parameter_list|()
block|{
return|return
name|dbEntity
return|;
block|}
comment|/**      * Returns<code>true</code> if this batch query has no parameter rows.      */
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
comment|/**      * Returns a list of DbAttributes describing batch parameters.      */
specifier|public
specifier|abstract
name|List
argument_list|<
name|DbAttribute
argument_list|>
name|getDbAttributes
parameter_list|()
function_decl|;
comment|/**      * Rewinds batch to the first parameter row.      */
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|batchIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/**      * Repositions batch to the next object, so that subsequent calls to getObject(int)      * would return the values of the next batch object. Returns<code>true</code> if      * batch has more objects to iterate over,<code>false</code> otherwise.      */
specifier|public
name|boolean
name|next
parameter_list|()
block|{
name|batchIndex
operator|++
expr_stmt|;
return|return
name|size
argument_list|()
operator|>
name|batchIndex
return|;
block|}
comment|/**      * Returns a value at a given index for the current batch iteration.      *       * @since 1.2      */
specifier|public
specifier|abstract
name|Object
name|getValue
parameter_list|(
name|int
name|valueIndex
parameter_list|)
function_decl|;
comment|/**      * Returns the number of parameter rows in a batch.      */
specifier|public
specifier|abstract
name|int
name|size
parameter_list|()
function_decl|;
comment|/**      * A helper method used by subclasses to resolve deferred values on demand. This is      * useful when a certain value comes from a generated key of another master object.      *       * @since 1.2      */
specifier|protected
name|Object
name|getValue
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|valueMap
parameter_list|,
name|DbAttribute
name|attribute
parameter_list|)
block|{
name|Object
name|value
init|=
name|valueMap
operator|.
name|get
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// if a value is a Factory, resolve it here...
comment|// slight chance that a normal value will implement Factory interface???
if|if
condition|(
name|value
operator|instanceof
name|Factory
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|Factory
operator|)
name|value
operator|)
operator|.
name|create
argument_list|()
expr_stmt|;
comment|// update replacement id
if|if
condition|(
name|attribute
operator|.
name|isPrimaryKey
argument_list|()
condition|)
block|{
comment|// sanity check
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|String
name|name
init|=
name|attribute
operator|.
name|getEntity
argument_list|()
operator|!=
literal|null
condition|?
name|attribute
operator|.
name|getEntity
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|"<null>"
decl_stmt|;
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Failed to generate PK: "
operator|+
name|name
operator|+
literal|"."
operator|+
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|ObjectId
name|id
init|=
name|getObjectId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
comment|// always override with fresh value as this is what's in the DB
name|id
operator|.
name|getReplacementIdMap
argument_list|()
operator|.
name|put
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// update snapshot
name|valueMap
operator|.
name|put
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
comment|/**      * Returns an ObjectId associated with the current batch iteration. Used internally by      * Cayenne to match current iteration with a specific object and assign it generated      * keys.      *<p>      * Default implementation simply returns null.      *</p>      *       * @since 1.2      */
specifier|public
name|ObjectId
name|getObjectId
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

