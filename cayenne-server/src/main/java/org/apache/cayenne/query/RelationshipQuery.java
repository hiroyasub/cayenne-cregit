begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ArcProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|ClassDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * A query that selects objects related to a given object via a mapped relationship.  * RelationshipQuery is used by Cayenne internally to resolve relationships, and is rarely  * executed by the application directly, although this of course is possible too.  *   * @since 1.2  */
end_comment

begin_class
specifier|public
class|class
name|RelationshipQuery
extends|extends
name|IndirectQuery
block|{
specifier|protected
name|ObjectId
name|objectId
decl_stmt|;
specifier|protected
name|String
name|relationshipName
decl_stmt|;
specifier|protected
name|boolean
name|refreshing
decl_stmt|;
specifier|protected
name|int
name|statementFetchSize
decl_stmt|;
specifier|protected
specifier|transient
name|EntityResolver
name|metadataResolver
decl_stmt|;
specifier|protected
specifier|transient
name|QueryMetadata
name|metadata
decl_stmt|;
specifier|protected
specifier|transient
name|ArcProperty
name|arc
decl_stmt|;
comment|// exists for deserialization with Hessian
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|RelationshipQuery
parameter_list|()
block|{
block|}
comment|/**      * Creates a RelationshipQuery. Same as      *<em>new RelationshipQuery(objectID, relationshipName, true)</em>.      *       * @param objectID ObjectId of a root object of the relationship.      * @param relationshipName The name of the relationship.      */
specifier|public
name|RelationshipQuery
parameter_list|(
name|ObjectId
name|objectID
parameter_list|,
name|String
name|relationshipName
parameter_list|)
block|{
name|this
argument_list|(
name|objectID
argument_list|,
name|relationshipName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a RelationshipQuery.      *       * @param objectID ObjectId of a root object of the relationship.      * @param relationshipName The name of the relationship.      * @param refreshing whether objects should be refreshed      */
specifier|public
name|RelationshipQuery
parameter_list|(
name|ObjectId
name|objectID
parameter_list|,
name|String
name|relationshipName
parameter_list|,
name|boolean
name|refreshing
parameter_list|)
block|{
if|if
condition|(
name|objectID
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Null objectID"
argument_list|)
throw|;
block|}
name|this
operator|.
name|objectId
operator|=
name|objectID
expr_stmt|;
name|this
operator|.
name|relationshipName
operator|=
name|relationshipName
expr_stmt|;
name|this
operator|.
name|refreshing
operator|=
name|refreshing
expr_stmt|;
block|}
comment|/**      * Returns query metadata object.      */
comment|// return metadata without creating replacement, as this is not always possible to
comment|// create replacement (one-way relationships, etc.)
annotation|@
name|Override
specifier|public
name|QueryMetadata
name|getMetaData
parameter_list|(
specifier|final
name|EntityResolver
name|resolver
parameter_list|)
block|{
name|updateMetadata
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
return|return
name|metadata
return|;
block|}
specifier|public
name|ObjectId
name|getObjectId
parameter_list|()
block|{
return|return
name|objectId
return|;
block|}
specifier|public
name|boolean
name|isRefreshing
parameter_list|()
block|{
return|return
name|refreshing
return|;
block|}
specifier|public
name|String
name|getRelationshipName
parameter_list|()
block|{
return|return
name|relationshipName
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Query
name|createReplacementQuery
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
if|if
condition|(
name|objectId
operator|.
name|isTemporary
argument_list|()
operator|&&
operator|!
name|objectId
operator|.
name|isReplacementIdAttached
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't build a query for relationship '"
operator|+
name|relationshipName
operator|+
literal|"' for temporary id: "
operator|+
name|objectId
argument_list|)
throw|;
block|}
name|ObjRelationship
name|relationship
init|=
name|getRelationship
argument_list|(
name|resolver
argument_list|)
decl_stmt|;
comment|// build executable select...
name|Expression
name|qualifier
init|=
name|ExpressionFactory
operator|.
name|matchDbExp
argument_list|(
name|relationship
operator|.
name|getReverseDbRelationshipPath
argument_list|()
argument_list|,
name|objectId
argument_list|)
decl_stmt|;
name|SelectQuery
argument_list|<
name|Object
argument_list|>
name|query
init|=
operator|new
name|SelectQuery
argument_list|<
name|Object
argument_list|>
argument_list|(
operator|(
name|ObjEntity
operator|)
name|relationship
operator|.
name|getTargetEntity
argument_list|()
argument_list|,
name|qualifier
argument_list|)
decl_stmt|;
name|query
operator|.
name|setStatementFetchSize
argument_list|(
name|statementFetchSize
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
comment|/**      * Returns a non-null relationship object for this query.      */
specifier|public
name|ObjRelationship
name|getRelationship
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
name|updateMetadata
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
return|return
name|arc
operator|.
name|getRelationship
argument_list|()
return|;
block|}
name|void
name|updateMetadata
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
comment|// caching metadata as it may be accessed multiple times (at a DC and DD level)
if|if
condition|(
name|metadataResolver
operator|!=
name|resolver
condition|)
block|{
if|if
condition|(
name|objectId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't resolve query - objectID is null."
argument_list|)
throw|;
block|}
name|ClassDescriptor
name|descriptor
init|=
name|resolver
operator|.
name|getClassDescriptor
argument_list|(
name|objectId
operator|.
name|getEntityName
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|arc
operator|=
operator|(
name|ArcProperty
operator|)
name|descriptor
operator|.
name|getProperty
argument_list|(
name|relationshipName
argument_list|)
expr_stmt|;
if|if
condition|(
name|arc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"No relationship named "
operator|+
name|relationshipName
operator|+
literal|" found in entity "
operator|+
name|objectId
operator|.
name|getEntityName
argument_list|()
operator|+
literal|"; object id: "
operator|+
name|objectId
argument_list|)
throw|;
block|}
name|this
operator|.
name|metadata
operator|=
operator|new
name|DefaultQueryMetadata
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isRefreshingObjects
parameter_list|()
block|{
return|return
name|refreshing
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjEntity
name|getObjEntity
parameter_list|()
block|{
return|return
name|arc
operator|.
name|getTargetDescriptor
argument_list|()
operator|.
name|getEntity
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClassDescriptor
name|getClassDescriptor
parameter_list|()
block|{
return|return
name|arc
operator|.
name|getTargetDescriptor
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getStatementFetchSize
parameter_list|()
block|{
return|return
name|statementFetchSize
return|;
block|}
block|}
expr_stmt|;
name|this
operator|.
name|metadataResolver
operator|=
name|resolver
expr_stmt|;
block|}
block|}
comment|/**      * Sets statement's fetch size (0 for no default size)      *       * @since 3.0      */
specifier|public
name|void
name|setStatementFetchSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|statementFetchSize
operator|=
name|size
expr_stmt|;
block|}
comment|/**      * @return statement's fetch size      * @since 3.0      */
specifier|public
name|int
name|getStatementFetchSize
parameter_list|()
block|{
return|return
name|statementFetchSize
return|;
block|}
comment|/**      * Overrides toString() outputting a short string with query class and relationship      * name.      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Util
operator|.
name|stripPackageName
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|":"
operator|+
name|getRelationshipName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

