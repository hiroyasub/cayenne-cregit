begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
operator|.
name|Context
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|ASTVariable
extends|extends
name|IdentifierNode
implements|implements
name|ExpressionNode
block|{
specifier|public
name|ASTVariable
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|evaluateAsString
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|Object
name|object
init|=
name|evaluateAsObject
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|haveObject
argument_list|(
name|getIdentifier
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|'$'
operator|+
name|getIdentifier
argument_list|()
return|;
block|}
return|return
literal|""
return|;
block|}
return|return
name|object
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluateAsObject
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|Object
name|object
init|=
name|context
operator|.
name|getObject
argument_list|(
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jjtGetNumChildren
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ASTMethod
name|method
init|=
operator|(
name|ASTMethod
operator|)
name|jjtGetChild
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|object
operator|=
name|method
operator|.
name|evaluateAsObject
argument_list|(
name|context
argument_list|,
name|object
argument_list|)
expr_stmt|;
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|object
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|context
operator|.
name|getBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|evaluateAsString
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|evaluateAsLong
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|Number
name|object
init|=
operator|(
name|Number
operator|)
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|evaluateAsObject
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|object
operator|.
name|longValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|evaluateAsDouble
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|Number
name|object
init|=
operator|(
name|Number
operator|)
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|evaluateAsObject
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|object
operator|.
name|doubleValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|evaluateAsBoolean
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|Object
name|object
init|=
name|evaluateAsObject
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|object
return|;
block|}
return|return
name|object
operator|!=
literal|null
return|;
block|}
block|}
end_class

end_unit

