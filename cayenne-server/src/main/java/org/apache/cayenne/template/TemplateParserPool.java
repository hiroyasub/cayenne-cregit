begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
operator|.
name|parser
operator|.
name|SQLTemplateParser
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
class|class
name|TemplateParserPool
block|{
specifier|final
specifier|static
name|int
name|INITIAL_POOL_SIZE
init|=
literal|4
decl_stmt|;
specifier|final
specifier|static
name|int
name|MAX_POOL_SIZE
init|=
literal|20
decl_stmt|;
specifier|private
name|ArrayBlockingQueue
argument_list|<
name|SQLTemplateParser
argument_list|>
name|parsers
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
name|MAX_POOL_SIZE
argument_list|)
decl_stmt|;
name|TemplateParserPool
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|INITIAL_POOL_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|parsers
operator|.
name|offer
argument_list|(
name|createNewParser
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|SQLTemplateParser
name|get
parameter_list|()
block|{
name|SQLTemplateParser
name|parser
init|=
name|parsers
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
name|parser
operator|=
name|createNewParser
argument_list|()
expr_stmt|;
block|}
return|return
name|parser
return|;
block|}
name|void
name|put
parameter_list|(
name|SQLTemplateParser
name|parser
parameter_list|)
block|{
name|parser
operator|.
name|ReInit
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|parsers
operator|.
name|offer
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
name|SQLTemplateParser
name|createNewParser
parameter_list|()
block|{
return|return
operator|new
name|SQLTemplateParser
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

