begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
operator|.
name|Context
import|;
end_import

begin_class
specifier|public
class|class
name|ASTArray
extends|extends
name|ASTExpression
block|{
specifier|public
name|ASTArray
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|context
operator|.
name|getBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|evaluateAsString
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|evaluateAsString
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
name|evaluateAsArray
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluateAsObject
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
name|evaluateAsArray
argument_list|(
name|context
argument_list|)
return|;
block|}
specifier|protected
name|Object
index|[]
name|evaluateAsArray
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|Object
index|[]
name|evaluated
init|=
operator|new
name|Object
index|[
name|jjtGetNumChildren
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jjtGetNumChildren
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ExpressionNode
name|node
init|=
operator|(
name|ExpressionNode
operator|)
name|jjtGetChild
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|evaluated
index|[
name|i
index|]
operator|=
name|node
operator|.
name|evaluateAsObject
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
return|return
name|evaluated
return|;
block|}
block|}
end_class

end_unit

