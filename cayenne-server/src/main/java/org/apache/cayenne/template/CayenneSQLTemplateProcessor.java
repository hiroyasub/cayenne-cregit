begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|SQLStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|SQLTemplateProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
operator|.
name|parser
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
operator|.
name|parser
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
operator|.
name|parser
operator|.
name|SQLTemplateParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
operator|.
name|parser
operator|.
name|TokenMgrError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|concurrentlinkedhashmap
operator|.
name|ConcurrentLinkedHashMap
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|CayenneSQLTemplateProcessor
implements|implements
name|SQLTemplateProcessor
block|{
name|ConcurrentLinkedHashMap
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
name|templateCache
init|=
operator|new
name|ConcurrentLinkedHashMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
argument_list|()
operator|.
name|maximumWeightedCapacity
argument_list|(
literal|100
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|SQLStatement
name|processTemplate
parameter_list|(
name|String
name|template
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|parameters
parameter_list|)
block|{
name|Context
name|context
init|=
operator|new
name|Context
argument_list|()
decl_stmt|;
name|context
operator|.
name|addParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
return|return
name|process
argument_list|(
name|template
argument_list|,
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SQLStatement
name|processTemplate
parameter_list|(
name|String
name|template
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|positionalParameters
parameter_list|)
block|{
name|Context
name|context
init|=
operator|new
name|Context
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|param
range|:
name|positionalParameters
control|)
block|{
name|parameters
operator|.
name|put
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|++
argument_list|)
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|addParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
return|return
name|process
argument_list|(
name|template
argument_list|,
name|context
argument_list|)
return|;
block|}
specifier|protected
name|SQLStatement
name|process
parameter_list|(
name|String
name|template
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
name|Node
name|node
init|=
name|templateCache
operator|.
name|get
argument_list|(
name|template
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|SQLTemplateParser
name|parser
init|=
operator|new
name|SQLTemplateParser
argument_list|(
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|template
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|node
operator|=
name|parser
operator|.
name|template
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
decl||
name|TokenMgrError
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error parsing template '%s' : %s"
argument_list|,
name|template
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|templateCache
operator|.
name|put
argument_list|(
name|template
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|String
name|sql
init|=
name|node
operator|.
name|evaluate
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
operator|new
name|SQLStatement
argument_list|(
name|sql
argument_list|,
name|context
operator|.
name|getColumnDescriptors
argument_list|()
argument_list|,
name|context
operator|.
name|getParameterBindings
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

