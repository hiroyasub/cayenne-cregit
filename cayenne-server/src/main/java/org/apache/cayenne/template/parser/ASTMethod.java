begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
operator|.
name|Context
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|ASTMethod
extends|extends
name|IdentifierNode
block|{
specifier|public
name|ASTMethod
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**      * Evaluate method call to an Object      */
specifier|public
name|Object
name|evaluateAsObject
parameter_list|(
name|Context
name|context
parameter_list|,
name|Object
name|parentObject
parameter_list|)
block|{
if|if
condition|(
name|parentObject
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"To evaluate method node parent object should be set."
argument_list|)
throw|;
block|}
try|try
block|{
comment|// first try default property resolution
return|return
name|PropertyUtils
operator|.
name|getProperty
argument_list|(
name|parentObject
argument_list|,
name|getIdentifier
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// if it fails, try direct method call
name|methodsLoop
label|:
for|for
control|(
name|Method
name|m
range|:
name|parentObject
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|getIdentifier
argument_list|()
argument_list|)
condition|)
block|{
comment|// check count of arguments
if|if
condition|(
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|!=
name|jjtGetNumChildren
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Object
index|[]
name|arguments
init|=
operator|new
name|Object
index|[
name|jjtGetNumChildren
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
range|:
name|m
operator|.
name|getParameterTypes
argument_list|()
control|)
block|{
name|ASTExpression
name|child
init|=
operator|(
name|ASTExpression
operator|)
name|jjtGetChild
argument_list|(
name|i
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|parameterType
operator|.
name|isAssignableFrom
argument_list|(
name|Object
operator|.
name|class
argument_list|)
condition|)
block|{
name|arguments
index|[
name|i
index|]
operator|=
name|child
operator|.
name|evaluateAsObject
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|parameterType
operator|.
name|isAssignableFrom
argument_list|(
name|String
operator|.
name|class
argument_list|)
condition|)
block|{
name|arguments
index|[
name|i
index|]
operator|=
name|child
operator|.
name|evaluateAsString
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|parameterType
operator|.
name|isAssignableFrom
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
operator|||
name|parameterType
operator|.
name|isAssignableFrom
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
condition|)
block|{
name|arguments
index|[
name|i
index|]
operator|=
name|child
operator|.
name|evaluateAsBoolean
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|parameterType
operator|.
name|isAssignableFrom
argument_list|(
name|Double
operator|.
name|class
argument_list|)
operator|||
name|parameterType
operator|.
name|isAssignableFrom
argument_list|(
name|double
operator|.
name|class
argument_list|)
condition|)
block|{
name|arguments
index|[
name|i
index|]
operator|=
name|child
operator|.
name|evaluateAsDouble
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|parameterType
operator|.
name|isAssignableFrom
argument_list|(
name|Float
operator|.
name|class
argument_list|)
operator|||
name|parameterType
operator|.
name|isAssignableFrom
argument_list|(
name|float
operator|.
name|class
argument_list|)
condition|)
block|{
name|arguments
index|[
name|i
index|]
operator|=
operator|(
name|float
operator|)
name|child
operator|.
name|evaluateAsDouble
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|parameterType
operator|.
name|isAssignableFrom
argument_list|(
name|Long
operator|.
name|class
argument_list|)
operator|||
name|parameterType
operator|.
name|isAssignableFrom
argument_list|(
name|long
operator|.
name|class
argument_list|)
condition|)
block|{
name|arguments
index|[
name|i
index|]
operator|=
name|child
operator|.
name|evaluateAsLong
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|parameterType
operator|.
name|isAssignableFrom
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|||
name|parameterType
operator|.
name|isAssignableFrom
argument_list|(
name|int
operator|.
name|class
argument_list|)
condition|)
block|{
name|arguments
index|[
name|i
index|]
operator|=
operator|(
name|int
operator|)
name|child
operator|.
name|evaluateAsLong
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|parameterType
operator|.
name|isAssignableFrom
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
condition|)
block|{
name|arguments
index|[
name|i
index|]
operator|=
name|child
operator|.
name|evaluateAsObject
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
continue|continue
name|methodsLoop
continue|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|ignored
parameter_list|)
block|{
continue|continue
name|methodsLoop
continue|;
block|}
name|i
operator|++
expr_stmt|;
block|}
try|try
block|{
return|return
name|m
operator|.
name|invoke
argument_list|(
name|parentObject
argument_list|,
name|arguments
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// continue
block|}
block|}
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to resolve method "
operator|+
name|getIdentifier
argument_list|()
operator|+
literal|" with "
operator|+
name|jjtGetNumChildren
argument_list|()
operator|+
literal|" args for object "
operator|+
name|parentObject
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unable evaluate method directly, must be solved via ASTVariable"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

