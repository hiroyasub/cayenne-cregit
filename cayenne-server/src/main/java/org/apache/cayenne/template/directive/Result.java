begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
operator|.
name|directive
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|jdbc
operator|.
name|ColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
operator|.
name|parser
operator|.
name|ASTExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|Result
implements|implements
name|Directive
block|{
specifier|public
specifier|static
specifier|final
name|Result
name|INSTANCE
init|=
operator|new
name|Result
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|typesGuess
decl_stmt|;
static|static
block|{
comment|// init default types
name|typesGuess
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
comment|// primitives
name|typesGuess
operator|.
name|put
argument_list|(
literal|"long"
argument_list|,
name|Long
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typesGuess
operator|.
name|put
argument_list|(
literal|"double"
argument_list|,
name|Double
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typesGuess
operator|.
name|put
argument_list|(
literal|"byte"
argument_list|,
name|Byte
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typesGuess
operator|.
name|put
argument_list|(
literal|"boolean"
argument_list|,
name|Boolean
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typesGuess
operator|.
name|put
argument_list|(
literal|"float"
argument_list|,
name|Float
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typesGuess
operator|.
name|put
argument_list|(
literal|"short"
argument_list|,
name|Short
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typesGuess
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
name|Integer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// numeric
name|typesGuess
operator|.
name|put
argument_list|(
literal|"Long"
argument_list|,
name|Long
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typesGuess
operator|.
name|put
argument_list|(
literal|"Double"
argument_list|,
name|Double
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typesGuess
operator|.
name|put
argument_list|(
literal|"Byte"
argument_list|,
name|Byte
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typesGuess
operator|.
name|put
argument_list|(
literal|"Boolean"
argument_list|,
name|Boolean
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typesGuess
operator|.
name|put
argument_list|(
literal|"Float"
argument_list|,
name|Float
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typesGuess
operator|.
name|put
argument_list|(
literal|"Short"
argument_list|,
name|Short
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typesGuess
operator|.
name|put
argument_list|(
literal|"Integer"
argument_list|,
name|Integer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// other
name|typesGuess
operator|.
name|put
argument_list|(
literal|"String"
argument_list|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typesGuess
operator|.
name|put
argument_list|(
literal|"Date"
argument_list|,
name|Date
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typesGuess
operator|.
name|put
argument_list|(
literal|"Time"
argument_list|,
name|Time
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typesGuess
operator|.
name|put
argument_list|(
literal|"Timestamp"
argument_list|,
name|Timestamp
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typesGuess
operator|.
name|put
argument_list|(
literal|"BigDecimal"
argument_list|,
name|BigDecimal
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typesGuess
operator|.
name|put
argument_list|(
literal|"BigInteger"
argument_list|,
name|BigInteger
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|Context
name|context
parameter_list|,
name|ASTExpression
modifier|...
name|expressions
parameter_list|)
block|{
name|ColumnDescriptor
name|columnDescriptor
init|=
operator|new
name|ColumnDescriptor
argument_list|()
decl_stmt|;
name|String
name|column
init|=
name|expressions
index|[
literal|0
index|]
operator|.
name|evaluate
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|columnDescriptor
operator|.
name|setName
argument_list|(
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|expressions
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|String
name|type
init|=
name|expressions
index|[
literal|1
index|]
operator|.
name|evaluate
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|columnDescriptor
operator|.
name|setJavaClass
argument_list|(
name|guessType
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|alias
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|expressions
operator|.
name|length
operator|>
literal|2
condition|)
block|{
name|alias
operator|=
name|expressions
index|[
literal|2
index|]
operator|.
name|evaluate
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|String
name|dataRowKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|expressions
operator|.
name|length
operator|>
literal|3
condition|)
block|{
name|dataRowKey
operator|=
name|expressions
index|[
literal|3
index|]
operator|.
name|evaluate
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
comment|// determine what we want to name this column in a resulting DataRow...
name|String
name|label
init|=
operator|(
operator|!
name|Util
operator|.
name|isEmptyString
argument_list|(
name|dataRowKey
argument_list|)
operator|)
condition|?
name|dataRowKey
else|:
operator|(
operator|!
name|Util
operator|.
name|isEmptyString
argument_list|(
name|alias
argument_list|)
operator|)
condition|?
name|alias
else|:
literal|null
decl_stmt|;
name|columnDescriptor
operator|.
name|setDataRowKey
argument_list|(
name|label
argument_list|)
expr_stmt|;
if|if
condition|(
name|expressions
operator|.
name|length
operator|>
literal|4
condition|)
block|{
name|int
name|jdbcType
init|=
operator|(
name|int
operator|)
name|expressions
index|[
literal|4
index|]
operator|.
name|evaluateAsLong
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|columnDescriptor
operator|.
name|setJdbcType
argument_list|(
name|jdbcType
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|addColumnDescriptor
argument_list|(
name|columnDescriptor
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|column
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|isEmptyString
argument_list|(
name|alias
argument_list|)
operator|&&
operator|!
name|alias
operator|.
name|equals
argument_list|(
name|column
argument_list|)
condition|)
block|{
name|result
operator|+=
literal|" AS "
operator|+
name|alias
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Converts "short" type notation to the fully qualified class name. Right      * now supports all major standard SQL types, including primitives. All      * other types are expected to be fully qualified, and are not converted.      */
specifier|protected
name|String
name|guessType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|String
name|guessed
init|=
name|typesGuess
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|guessed
operator|!=
literal|null
condition|?
name|guessed
else|:
name|type
return|;
block|}
block|}
end_class

end_unit

