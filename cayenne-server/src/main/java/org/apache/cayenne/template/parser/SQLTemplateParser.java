begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Generated By:JJTree&JavaCC: Do not edit this line. SQLTemplateParser.java */
end_comment

begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|template
operator|.
name|parser
package|;
end_package

begin_comment
comment|/**   * Parser of Cayenne Templates.   *   * @since 4.1   */
end_comment

begin_class
specifier|public
class|class
name|SQLTemplateParser
comment|/*@bgen(jjtree)*/
implements|implements
name|SQLTemplateParserTreeConstants
implements|,
name|SQLTemplateParserConstants
block|{
comment|/*@bgen(jjtree)*/
specifier|protected
name|JJTSQLTemplateParserState
name|jjtree
init|=
operator|new
name|JJTSQLTemplateParserState
argument_list|()
decl_stmt|;
comment|/*     Entry function in parser */
specifier|final
specifier|public
name|Node
name|template
parameter_list|()
throws|throws
name|ParseException
block|{
name|block
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
operator|(
name|ASTBlock
operator|)
name|jjtree
operator|.
name|rootNode
argument_list|()
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/*     Top component of parsing tree */
specifier|final
specifier|public
name|void
name|block
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/*@bgen(jjtree) Block */
name|ASTBlock
name|jjtn000
init|=
operator|new
name|ASTBlock
argument_list|(
name|JJTBLOCK
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|label_1
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|IF
case|:
case|case
name|SHARP
case|:
case|case
name|DOLLAR
case|:
case|case
name|TEXT
case|:
case|case
name|TEXT_OTHER
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|0
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_1
break|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|IF
case|:
name|ifElse
argument_list|()
expr_stmt|;
break|break;
case|case
name|SHARP
case|:
name|directive
argument_list|()
expr_stmt|;
break|break;
case|case
name|DOLLAR
case|:
name|variable
argument_list|()
expr_stmt|;
break|break;
case|case
name|TEXT
case|:
case|case
name|TEXT_OTHER
case|:
name|text
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|1
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*     Plain text that is not processed in any way by render */
specifier|final
specifier|public
name|void
name|text
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/*@bgen(jjtree) Text */
name|ASTText
name|jjtn000
init|=
operator|new
name|ASTText
argument_list|(
name|JJTTEXT
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|Token
name|t
decl_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|TEXT
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|TEXT
argument_list|)
expr_stmt|;
break|break;
case|case
name|TEXT_OTHER
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|TEXT_OTHER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|2
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
name|jjtn000
operator|.
name|setValue
argument_list|(
name|t
operator|.
name|image
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*     Condition directive: #if(condition) ...  #else ... #end */
specifier|final
specifier|public
name|void
name|ifElse
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/*@bgen(jjtree) IfElse */
name|ASTIfElse
name|jjtn000
init|=
operator|new
name|ASTIfElse
argument_list|(
name|JJTIFELSE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|IF
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LBRACKET
argument_list|)
expr_stmt|;
name|expression
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RBRACKET
argument_list|)
expr_stmt|;
name|block
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ELSE
case|:
name|jj_consume_token
argument_list|(
name|ELSE
argument_list|)
expr_stmt|;
name|block
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|3
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|END
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*     Directive in form of #directiveName(args list) */
specifier|final
specifier|public
name|void
name|directive
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/*@bgen(jjtree) Directive */
name|ASTDirective
name|jjtn000
init|=
operator|new
name|ASTDirective
argument_list|(
name|JJTDIRECTIVE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|Token
name|t
decl_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|SHARP
argument_list|)
expr_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|jjtn000
operator|.
name|setIdentifier
argument_list|(
name|t
operator|.
name|image
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LBRACKET
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|DOLLAR
case|:
case|case
name|TRUE
case|:
case|case
name|FALSE
case|:
case|case
name|LSBRACKET
case|:
case|case
name|SINGLE_QUOTED_STRING
case|:
case|case
name|DOUBLE_QUOTED_STRING
case|:
case|case
name|INT_LITERAL
case|:
case|case
name|FLOAT_LITERAL
case|:
name|expression
argument_list|()
expr_stmt|;
name|label_2
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|DOLLAR
case|:
case|case
name|TRUE
case|:
case|case
name|FALSE
case|:
case|case
name|COMMA
case|:
case|case
name|LSBRACKET
case|:
case|case
name|SINGLE_QUOTED_STRING
case|:
case|case
name|DOUBLE_QUOTED_STRING
case|:
case|case
name|INT_LITERAL
case|:
case|case
name|FLOAT_LITERAL
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|4
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_2
break|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|5
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|expression
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|6
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|RBRACKET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*     valid expression in parameters of method or directive     can be scalar, variable (with methods calls) or array */
specifier|final
specifier|public
name|void
name|expression
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/*@bgen(jjtree) Expression */
name|ASTExpression
name|jjtn000
init|=
operator|new
name|ASTExpression
argument_list|(
name|JJTEXPRESSION
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|TRUE
case|:
case|case
name|FALSE
case|:
case|case
name|SINGLE_QUOTED_STRING
case|:
case|case
name|DOUBLE_QUOTED_STRING
case|:
case|case
name|INT_LITERAL
case|:
case|case
name|FLOAT_LITERAL
case|:
name|scalar
argument_list|()
expr_stmt|;
break|break;
case|case
name|DOLLAR
case|:
name|variable
argument_list|()
expr_stmt|;
break|break;
case|case
name|LSBRACKET
case|:
name|array
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|7
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*     Single scalar value: String, long, double, boolean     String: single or double quoted     long: dec, hex and octo with sign     double: simple and exponential form */
specifier|final
specifier|public
name|void
name|scalar
parameter_list|()
throws|throws
name|ParseException
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|SINGLE_QUOTED_STRING
case|:
name|jj_consume_token
argument_list|(
name|SINGLE_QUOTED_STRING
argument_list|)
expr_stmt|;
name|ASTStringScalar
name|jjtn001
init|=
operator|new
name|ASTStringScalar
argument_list|(
name|JJTSTRINGSCALAR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc001
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn001
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc001
operator|=
literal|false
expr_stmt|;
name|jjtn001
operator|.
name|setValue
argument_list|(
operator|(
name|String
operator|)
name|token_source
operator|.
name|literalValue
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc001
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn001
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DOUBLE_QUOTED_STRING
case|:
name|jj_consume_token
argument_list|(
name|DOUBLE_QUOTED_STRING
argument_list|)
expr_stmt|;
name|ASTStringScalar
name|jjtn002
init|=
operator|new
name|ASTStringScalar
argument_list|(
name|JJTSTRINGSCALAR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc002
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn002
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn002
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc002
operator|=
literal|false
expr_stmt|;
name|jjtn002
operator|.
name|setValue
argument_list|(
operator|(
name|String
operator|)
name|token_source
operator|.
name|literalValue
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc002
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn002
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|INT_LITERAL
case|:
name|jj_consume_token
argument_list|(
name|INT_LITERAL
argument_list|)
expr_stmt|;
name|ASTIntScalar
name|jjtn003
init|=
operator|new
name|ASTIntScalar
argument_list|(
name|JJTINTSCALAR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc003
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn003
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn003
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc003
operator|=
literal|false
expr_stmt|;
name|jjtn003
operator|.
name|setValue
argument_list|(
operator|(
name|Long
operator|)
name|token_source
operator|.
name|literalValue
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc003
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn003
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|FLOAT_LITERAL
case|:
name|jj_consume_token
argument_list|(
name|FLOAT_LITERAL
argument_list|)
expr_stmt|;
name|ASTFloatScalar
name|jjtn004
init|=
operator|new
name|ASTFloatScalar
argument_list|(
name|JJTFLOATSCALAR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc004
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn004
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn004
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc004
operator|=
literal|false
expr_stmt|;
name|jjtn004
operator|.
name|setValue
argument_list|(
operator|(
name|Double
operator|)
name|token_source
operator|.
name|literalValue
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc004
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn004
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|TRUE
case|:
name|jj_consume_token
argument_list|(
name|TRUE
argument_list|)
expr_stmt|;
name|ASTBoolScalar
name|jjtn005
init|=
operator|new
name|ASTBoolScalar
argument_list|(
name|JJTBOOLSCALAR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc005
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn005
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn005
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc005
operator|=
literal|false
expr_stmt|;
name|jjtn005
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc005
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn005
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|FALSE
case|:
name|jj_consume_token
argument_list|(
name|FALSE
argument_list|)
expr_stmt|;
name|ASTBoolScalar
name|jjtn006
init|=
operator|new
name|ASTBoolScalar
argument_list|(
name|JJTBOOLSCALAR
argument_list|)
decl_stmt|;
name|boolean
name|jjtc006
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn006
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn006
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtc006
operator|=
literal|false
expr_stmt|;
name|jjtn006
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc006
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn006
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|8
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
comment|/*     Variable, optionally with some methods calls     $a or $a.method() or $a.method1().method2() */
specifier|final
specifier|public
name|void
name|variable
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/*@bgen(jjtree) Variable */
name|ASTVariable
name|jjtn000
init|=
operator|new
name|ASTVariable
argument_list|(
name|JJTVARIABLE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|Token
name|t
decl_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|jjtn000
operator|.
name|setIdentifier
argument_list|(
name|t
operator|.
name|image
argument_list|)
expr_stmt|;
name|label_3
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|DOT
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|9
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_3
break|;
block|}
name|method
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*     Method call, valid only as part of variable, can be chain of methods     $a.method1($var).method2().method3('val') */
specifier|final
specifier|public
name|void
name|method
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/*@bgen(jjtree) Method */
name|ASTMethod
name|jjtn000
init|=
operator|new
name|ASTMethod
argument_list|(
name|JJTMETHOD
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|Token
name|t
decl_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|DOT
argument_list|)
expr_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|jjtn000
operator|.
name|setIdentifier
argument_list|(
name|t
operator|.
name|image
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|LBRACKET
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|DOLLAR
case|:
case|case
name|TRUE
case|:
case|case
name|FALSE
case|:
case|case
name|LSBRACKET
case|:
case|case
name|SINGLE_QUOTED_STRING
case|:
case|case
name|DOUBLE_QUOTED_STRING
case|:
case|case
name|INT_LITERAL
case|:
case|case
name|FLOAT_LITERAL
case|:
name|expression
argument_list|()
expr_stmt|;
name|label_4
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|DOLLAR
case|:
case|case
name|TRUE
case|:
case|case
name|FALSE
case|:
case|case
name|COMMA
case|:
case|case
name|LSBRACKET
case|:
case|case
name|SINGLE_QUOTED_STRING
case|:
case|case
name|DOUBLE_QUOTED_STRING
case|:
case|case
name|INT_LITERAL
case|:
case|case
name|FLOAT_LITERAL
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|10
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_4
break|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|11
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|expression
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|12
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|RBRACKET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*     Comma or space separated array of scalars and/or variables     valid values: [], ['a' 5], [$a, 'b', 5] */
specifier|final
specifier|public
name|void
name|array
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/*@bgen(jjtree) Array */
name|ASTArray
name|jjtn000
init|=
operator|new
name|ASTArray
argument_list|(
name|JJTARRAY
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|LSBRACKET
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|DOLLAR
case|:
case|case
name|TRUE
case|:
case|case
name|FALSE
case|:
case|case
name|SINGLE_QUOTED_STRING
case|:
case|case
name|DOUBLE_QUOTED_STRING
case|:
case|case
name|INT_LITERAL
case|:
case|case
name|FLOAT_LITERAL
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|TRUE
case|:
case|case
name|FALSE
case|:
case|case
name|SINGLE_QUOTED_STRING
case|:
case|case
name|DOUBLE_QUOTED_STRING
case|:
case|case
name|INT_LITERAL
case|:
case|case
name|FLOAT_LITERAL
case|:
name|scalar
argument_list|()
expr_stmt|;
break|break;
case|case
name|DOLLAR
case|:
name|variable
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|13
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|label_5
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|DOLLAR
case|:
case|case
name|TRUE
case|:
case|case
name|FALSE
case|:
case|case
name|COMMA
case|:
case|case
name|SINGLE_QUOTED_STRING
case|:
case|case
name|DOUBLE_QUOTED_STRING
case|:
case|case
name|INT_LITERAL
case|:
case|case
name|FLOAT_LITERAL
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|14
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_5
break|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|COMMA
case|:
name|jj_consume_token
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|15
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|TRUE
case|:
case|case
name|FALSE
case|:
case|case
name|SINGLE_QUOTED_STRING
case|:
case|case
name|DOUBLE_QUOTED_STRING
case|:
case|case
name|INT_LITERAL
case|:
case|case
name|FLOAT_LITERAL
case|:
name|scalar
argument_list|()
expr_stmt|;
break|break;
case|case
name|DOLLAR
case|:
name|variable
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|16
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|17
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|RSBRACKET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Generated Token Manager. */
specifier|public
name|SQLTemplateParserTokenManager
name|token_source
decl_stmt|;
name|JavaCharStream
name|jj_input_stream
decl_stmt|;
comment|/** Current token. */
specifier|public
name|Token
name|token
decl_stmt|;
comment|/** Next token. */
specifier|public
name|Token
name|jj_nt
decl_stmt|;
specifier|private
name|int
name|jj_ntk
decl_stmt|;
specifier|private
name|int
name|jj_gen
decl_stmt|;
specifier|final
specifier|private
name|int
index|[]
name|jj_la1
init|=
operator|new
name|int
index|[
literal|18
index|]
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_0
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_1
decl_stmt|;
static|static
block|{
name|jj_la1_init_0
argument_list|()
expr_stmt|;
name|jj_la1_init_1
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_0
parameter_list|()
block|{
name|jj_la1_0
operator|=
operator|new
name|int
index|[]
block|{
literal|0x320
block|,
literal|0x320
block|,
literal|0x0
block|,
literal|0x40
block|,
literal|0x90006e00
block|,
literal|0x2000
block|,
literal|0x90004e00
block|,
literal|0x90004e00
block|,
literal|0x90000c00
block|,
literal|0x20000
block|,
literal|0x90006e00
block|,
literal|0x2000
block|,
literal|0x90004e00
block|,
literal|0x90000e00
block|,
literal|0x90002e00
block|,
literal|0x2000
block|,
literal|0x90000e00
block|,
literal|0x90000e00
block|,}
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_1
parameter_list|()
block|{
name|jj_la1_1
operator|=
operator|new
name|int
index|[]
block|{
literal|0xc0
block|,
literal|0xc0
block|,
literal|0xc0
block|,
literal|0x0
block|,
literal|0x3
block|,
literal|0x0
block|,
literal|0x3
block|,
literal|0x3
block|,
literal|0x3
block|,
literal|0x0
block|,
literal|0x3
block|,
literal|0x0
block|,
literal|0x3
block|,
literal|0x3
block|,
literal|0x3
block|,
literal|0x0
block|,
literal|0x3
block|,
literal|0x3
block|,}
expr_stmt|;
block|}
comment|/** Constructor with InputStream. */
specifier|public
name|SQLTemplateParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|this
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Constructor with InputStream and supplied encoding */
specifier|public
name|SQLTemplateParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|jj_input_stream
operator|=
operator|new
name|JavaCharStream
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|token_source
operator|=
operator|new
name|SQLTemplateParserTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|18
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/** Reinitialise. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Reinitialise. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jjtree
operator|.
name|reset
argument_list|()
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|18
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/** Constructor. */
specifier|public
name|SQLTemplateParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|=
operator|new
name|JavaCharStream
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|=
operator|new
name|SQLTemplateParserTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|18
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/** Reinitialise. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jjtree
operator|.
name|reset
argument_list|()
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|18
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/** Constructor with generated Token Manager. */
specifier|public
name|SQLTemplateParser
parameter_list|(
name|SQLTemplateParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|18
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/** Reinitialise. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|SQLTemplateParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jjtree
operator|.
name|reset
argument_list|()
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|18
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|private
name|Token
name|jj_consume_token
parameter_list|(
name|int
name|kind
parameter_list|)
throws|throws
name|ParseException
block|{
name|Token
name|oldToken
decl_stmt|;
if|if
condition|(
operator|(
name|oldToken
operator|=
name|token
operator|)
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|kind
operator|==
name|kind
condition|)
block|{
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
name|token
operator|=
name|oldToken
expr_stmt|;
name|jj_kind
operator|=
name|kind
expr_stmt|;
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
comment|/** Get the next Token. */
specifier|final
specifier|public
name|Token
name|getNextToken
parameter_list|()
block|{
if|if
condition|(
name|token
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
comment|/** Get the specific Token. */
specifier|final
specifier|public
name|Token
name|getToken
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Token
name|t
init|=
name|token
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|.
name|next
operator|!=
literal|null
condition|)
name|t
operator|=
name|t
operator|.
name|next
expr_stmt|;
else|else
name|t
operator|=
name|t
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
specifier|private
name|int
name|jj_ntk
parameter_list|()
block|{
if|if
condition|(
operator|(
name|jj_nt
operator|=
name|token
operator|.
name|next
operator|)
operator|==
literal|null
condition|)
return|return
operator|(
name|jj_ntk
operator|=
operator|(
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
operator|)
operator|.
name|kind
operator|)
return|;
else|else
return|return
operator|(
name|jj_ntk
operator|=
name|jj_nt
operator|.
name|kind
operator|)
return|;
block|}
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|int
index|[]
argument_list|>
name|jj_expentries
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
index|[]
name|jj_expentry
decl_stmt|;
specifier|private
name|int
name|jj_kind
init|=
operator|-
literal|1
decl_stmt|;
comment|/** Generate ParseException. */
specifier|public
name|ParseException
name|generateParseException
parameter_list|()
block|{
name|jj_expentries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boolean
index|[]
name|la1tokens
init|=
operator|new
name|boolean
index|[
literal|40
index|]
decl_stmt|;
if|if
condition|(
name|jj_kind
operator|>=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|jj_kind
index|]
operator|=
literal|true
expr_stmt|;
name|jj_kind
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|18
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|jj_la1
index|[
name|i
index|]
operator|==
name|jj_gen
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|32
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|jj_la1_0
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_1
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|32
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|40
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|la1tokens
index|[
name|i
index|]
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
literal|1
index|]
expr_stmt|;
name|jj_expentry
index|[
literal|0
index|]
operator|=
name|i
expr_stmt|;
name|jj_expentries
operator|.
name|add
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
block|}
block|}
name|int
index|[]
index|[]
name|exptokseq
init|=
operator|new
name|int
index|[
name|jj_expentries
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|exptokseq
index|[
name|i
index|]
operator|=
name|jj_expentries
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ParseException
argument_list|(
name|token
argument_list|,
name|exptokseq
argument_list|,
name|tokenImage
argument_list|)
return|;
block|}
comment|/** Enable tracing. */
specifier|final
specifier|public
name|void
name|enable_tracing
parameter_list|()
block|{
block|}
comment|/** Disable tracing. */
specifier|final
specifier|public
name|void
name|disable_tracing
parameter_list|()
block|{
block|}
block|}
end_class

end_unit

