begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *<p>  * A portable global identifier for persistent objects. ObjectId can be  * temporary (used for transient or new uncommitted objects) or permanent (used  * for objects that have been already stored in DB).  *<p>  * A temporary ObjectId stores object entity name and a pseudo-unique binary key;  * permanent id stores a map of values from an external persistent store (aka "primary key").  */
end_comment

begin_interface
specifier|public
interface|interface
name|ObjectId
extends|extends
name|Serializable
block|{
specifier|static
name|ObjectId
name|of
parameter_list|(
name|String
name|entityName
parameter_list|)
block|{
return|return
operator|new
name|ObjectIdTmp
argument_list|(
name|entityName
argument_list|)
return|;
block|}
specifier|static
name|ObjectId
name|of
parameter_list|(
name|String
name|entityName
parameter_list|,
name|byte
index|[]
name|tmpKey
parameter_list|)
block|{
return|return
operator|new
name|ObjectIdTmp
argument_list|(
name|entityName
argument_list|,
name|tmpKey
argument_list|)
return|;
block|}
specifier|static
name|ObjectId
name|of
parameter_list|(
name|String
name|entityName
parameter_list|,
name|String
name|keyName
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|new
name|ObjectIdNumber
argument_list|(
name|entityName
argument_list|,
name|keyName
argument_list|,
operator|(
name|Number
operator|)
name|value
argument_list|)
return|;
block|}
return|return
operator|new
name|ObjectIdSingle
argument_list|(
name|entityName
argument_list|,
name|keyName
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|static
name|ObjectId
name|of
parameter_list|(
name|String
name|entityName
parameter_list|,
name|ObjectId
name|objectId
parameter_list|)
block|{
if|if
condition|(
name|objectId
operator|instanceof
name|ObjectIdNumber
condition|)
block|{
name|ObjectIdNumber
name|id
init|=
operator|(
name|ObjectIdNumber
operator|)
name|objectId
decl_stmt|;
return|return
operator|new
name|ObjectIdNumber
argument_list|(
name|entityName
argument_list|,
name|id
operator|.
name|getKeyName
argument_list|()
argument_list|,
name|id
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|objectId
operator|instanceof
name|ObjectIdSingle
condition|)
block|{
name|ObjectIdSingle
name|id
init|=
operator|(
name|ObjectIdSingle
operator|)
name|objectId
decl_stmt|;
return|return
operator|new
name|ObjectIdSingle
argument_list|(
name|entityName
argument_list|,
name|id
operator|.
name|getKeyName
argument_list|()
argument_list|,
name|id
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|objectId
operator|instanceof
name|ObjectIdTmp
condition|)
block|{
return|return
name|of
argument_list|(
name|entityName
argument_list|,
name|objectId
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
return|return
name|of
argument_list|(
name|entityName
argument_list|,
name|objectId
operator|.
name|getIdSnapshot
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|ObjectId
name|of
parameter_list|(
name|String
name|entityName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|entry
init|=
name|values
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
return|return
name|of
argument_list|(
name|entityName
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|ObjectIdCompound
argument_list|(
name|entityName
argument_list|,
name|values
argument_list|)
return|;
block|}
name|boolean
name|isTemporary
parameter_list|()
function_decl|;
name|String
name|getEntityName
parameter_list|()
function_decl|;
name|byte
index|[]
name|getKey
parameter_list|()
function_decl|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getIdSnapshot
parameter_list|()
function_decl|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getReplacementIdMap
parameter_list|()
function_decl|;
name|ObjectId
name|createReplacementId
parameter_list|()
function_decl|;
name|boolean
name|isReplacementIdAttached
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

