begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|ToStringBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * DataRow a map that holds values retrieved from the database for a given query row.  * DataRows are used to cache raw database data and as a reference point for tracking  * DataObject changes.  *   * @since 1.1  */
end_comment

begin_class
specifier|public
class|class
name|DataRow
extends|extends
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
block|{
comment|// make sure the starting value is different from DataObject default version value
specifier|private
specifier|static
name|AtomicLong
name|currentVersion
init|=
operator|new
name|AtomicLong
argument_list|(
name|DataObject
operator|.
name|DEFAULT_VERSION
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|protected
name|long
name|version
init|=
name|currentVersion
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
specifier|protected
name|long
name|replacesVersion
init|=
name|DataObject
operator|.
name|DEFAULT_VERSION
decl_stmt|;
comment|/**      * @since 3.0      */
specifier|protected
name|String
name|entityName
decl_stmt|;
specifier|public
name|DataRow
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|map
parameter_list|)
block|{
name|super
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DataRow
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|super
argument_list|(
name|initialCapacity
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
specifier|public
name|long
name|getReplacesVersion
parameter_list|()
block|{
return|return
name|replacesVersion
return|;
block|}
comment|/**      * Sets the version of DataRow replaced by this one in the store.      */
specifier|public
name|void
name|setReplacesVersion
parameter_list|(
name|long
name|replacesVersion
parameter_list|)
block|{
name|this
operator|.
name|replacesVersion
operator|=
name|replacesVersion
expr_stmt|;
block|}
comment|/**      * Builds a new DataRow, merging changes from<code>diff</code> parameter with data      * contained in this DataRow.      */
specifier|public
name|DataRow
name|applyDiff
parameter_list|(
name|DataRow
name|diff
parameter_list|)
block|{
name|DataRow
name|merged
init|=
operator|new
name|DataRow
argument_list|(
name|this
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|diff
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|merged
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|merged
return|;
block|}
comment|/**      * Creates a DataRow that contains only the keys that have values that differ between      * this object and<code>row</code> parameter. Diff values are taken from the      *<code>row</code> parameter. It is assumed that key sets are compatible in both rows      * (e.g. they represent snapshots for the same entity). Returns null if no differences      * are found.      */
specifier|public
name|DataRow
name|createDiff
parameter_list|(
name|DataRow
name|row
parameter_list|)
block|{
comment|// build a diff...
name|DataRow
name|diff
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|currentValue
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Object
name|rowValue
init|=
name|row
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|currentValue
argument_list|,
name|rowValue
argument_list|)
condition|)
block|{
if|if
condition|(
name|diff
operator|==
literal|null
condition|)
block|{
name|diff
operator|=
operator|new
name|DataRow
argument_list|(
name|this
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|diff
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|rowValue
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|diff
return|;
block|}
comment|/**      * Returns an ObjectId of an object on the other side of the to-one relationship, for      * this DataRow representing a source of relationship. Returns null if snapshot FK      * columns indicate a null to-one relationship.      */
specifier|public
name|ObjectId
name|createTargetObjectId
parameter_list|(
name|String
name|entityName
parameter_list|,
name|DbRelationship
name|relationship
parameter_list|)
block|{
if|if
condition|(
name|relationship
operator|.
name|isToMany
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Only 'to one' can have a target ObjectId."
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|target
init|=
name|relationship
operator|.
name|targetPkSnapshotWithSrcSnapshot
argument_list|(
name|this
argument_list|)
decl_stmt|;
return|return
operator|(
name|target
operator|!=
literal|null
operator|)
condition|?
name|ObjectId
operator|.
name|of
argument_list|(
name|entityName
argument_list|,
name|target
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|ToStringBuilder
argument_list|(
name|this
argument_list|)
operator|.
name|append
argument_list|(
literal|"values"
argument_list|,
name|super
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" version"
argument_list|,
name|version
argument_list|)
operator|.
name|append
argument_list|(
literal|" replaces"
argument_list|,
name|replacesVersion
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|String
name|getEntityName
parameter_list|()
block|{
return|return
name|entityName
return|;
block|}
comment|/**      * @since 3.0      */
specifier|public
name|void
name|setEntityName
parameter_list|(
name|String
name|entityName
parameter_list|)
block|{
name|this
operator|.
name|entityName
operator|=
name|entityName
expr_stmt|;
block|}
block|}
end_class

end_unit

