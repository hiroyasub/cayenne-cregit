begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
class|class
name|ExpressionUtils
block|{
specifier|static
name|void
name|parsePath
parameter_list|(
name|ASTPath
name|pathExp
parameter_list|,
name|Object
name|path
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
name|path
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|String
index|[]
name|pathSegments
init|=
name|path
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aliasMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pathSegments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|pathSegments
index|[
name|i
index|]
operator|.
name|contains
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|String
index|[]
name|splitedSegment
init|=
name|pathSegments
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|"#"
argument_list|)
decl_stmt|;
name|splitedSegment
index|[
literal|0
index|]
operator|+=
name|splitedSegment
index|[
literal|1
index|]
operator|.
name|endsWith
argument_list|(
literal|"+"
argument_list|)
condition|?
literal|"+"
else|:
literal|""
expr_stmt|;
name|splitedSegment
index|[
literal|1
index|]
operator|=
name|splitedSegment
index|[
literal|1
index|]
operator|.
name|endsWith
argument_list|(
literal|"+"
argument_list|)
condition|?
name|splitedSegment
index|[
literal|1
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|splitedSegment
index|[
literal|1
index|]
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
else|:
name|splitedSegment
index|[
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|aliasMap
operator|.
name|putIfAbsent
argument_list|(
name|splitedSegment
index|[
literal|1
index|]
argument_list|,
name|splitedSegment
index|[
literal|0
index|]
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|aliasMap
operator|.
name|get
argument_list|(
name|splitedSegment
index|[
literal|1
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|splitedSegment
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Can't add the same alias to different path segments."
argument_list|)
throw|;
block|}
name|pathSegments
index|[
name|i
index|]
operator|=
name|splitedSegment
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
name|pathExp
operator|.
name|setPath
argument_list|(
name|String
operator|.
name|join
argument_list|(
literal|"."
argument_list|,
name|pathSegments
argument_list|)
argument_list|)
expr_stmt|;
name|pathExp
operator|.
name|setPathAliases
argument_list|(
name|aliasMap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pathExp
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

