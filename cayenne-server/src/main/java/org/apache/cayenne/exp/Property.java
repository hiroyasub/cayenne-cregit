begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ASTPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Orderings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|PrefetchTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|reflect
operator|.
name|PropertyUtils
import|;
end_import

begin_comment
comment|/**  *<p>  * A property in a {@link org.apache.cayenne.DataObject}.  *</p>  *<p>  * Used to construct Expressions quickly and with type-safety, and to construct Orderings.  *</p>  *<p>  * Instances of this class are immutable.  *</p>  *<p>  * Must be created via factory methods {@link Property#create(String, Class) Property.create(..)}  *</p>  *  * @param<E> The type this property returns.  *  * @see Property#create(String, Class)  * @see Property#create(Expression, Class)  * @see Property#create(String, Expression, Class)  *  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|Property
parameter_list|<
name|E
parameter_list|>
block|{
comment|/**      *<p>Property that can be used in COUNT(*) queries</p>      *<p>      *<pre>{@code      * List<Object[]> result = ObjectSelect      *         .columnQuery(Artist.class, Property.COUNT, Artist.ARTIST_NAME)      *         .having(Property.COUNT.gt(1L))      *         .select(context);      * }</pre>      *</p>      */
specifier|public
specifier|static
specifier|final
name|Property
argument_list|<
name|Long
argument_list|>
name|COUNT
init|=
name|Property
operator|.
name|create
argument_list|(
name|FunctionExpressionFactory
operator|.
name|countExp
argument_list|()
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Name of the property in the object      */
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|/**      * Expression provider for the property      */
specifier|private
specifier|final
name|ExpressionProvider
name|expressionProvider
decl_stmt|;
comment|/**      * Explicit type of the property      */
specifier|private
specifier|final
name|Class
argument_list|<
name|?
super|super
name|E
argument_list|>
name|type
decl_stmt|;
comment|/**      * Constructs a new property with the given name and type.      *      * @param name of the property (usually it's obj path)      * @param type of the property      *      * @see Property#create(String, Class)      */
specifier|protected
name|Property
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
super|super
name|E
argument_list|>
name|type
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|expressionProvider
operator|=
operator|new
name|ExpressionProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Expression
name|get
parameter_list|()
block|{
return|return
name|ExpressionFactory
operator|.
name|pathExp
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/**      * Constructs a new property with the given name and expression      *      * @param name of the property (will be used as alias for the expression)      * @param expression expression for property      * @param type of the property      *      * @see Property#create(String, Expression, Class)      */
specifier|protected
name|Property
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Expression
name|expression
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
super|super
name|E
argument_list|>
name|type
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|expressionProvider
operator|=
operator|new
name|ExpressionProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Expression
name|get
parameter_list|()
block|{
return|return
name|expression
operator|.
name|deepCopy
argument_list|()
return|;
block|}
block|}
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/**      * @return Name of the property in the object.      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * @return alias for this property      */
specifier|public
name|String
name|getAlias
parameter_list|()
block|{
if|if
condition|(
name|getName
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// check if default name for Path expression is overridden
name|Expression
name|exp
init|=
name|getExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|exp
operator|instanceof
name|ASTPath
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|ASTPath
operator|)
name|exp
operator|)
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|getName
argument_list|()
return|;
block|}
comment|/**      * This method returns fresh copy of the expression for each call.      * @return expression that represents this Property      */
specifier|public
name|Expression
name|getExpression
parameter_list|()
block|{
return|return
name|expressionProvider
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|name
operator|!=
literal|null
condition|?
name|name
operator|.
name|hashCode
argument_list|()
else|:
name|expressionProvider
operator|.
name|get
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|type
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Property
argument_list|<
name|?
argument_list|>
name|property
init|=
operator|(
name|Property
argument_list|<
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|?
operator|!
name|name
operator|.
name|equals
argument_list|(
name|property
operator|.
name|name
argument_list|)
else|:
name|property
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
operator|&&
operator|!
name|expressionProvider
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
name|property
operator|.
name|expressionProvider
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
name|type
operator|==
literal|null
condition|?
name|property
operator|.
name|type
operator|==
literal|null
else|:
name|type
operator|.
name|equals
argument_list|(
name|property
operator|.
name|type
argument_list|)
operator|)
return|;
block|}
comment|/**      * Constructs a property path by appending the argument to the existing property separated by a dot.      *      * @return a newly created Property object.      */
specifier|public
name|Property
argument_list|<
name|Object
argument_list|>
name|dot
parameter_list|(
name|String
name|property
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|property
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Constructs a new property path by appending the argument to the existing property separated by a dot.      *      * @return a newly created Property object.      */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Property
argument_list|<
name|T
argument_list|>
name|dot
parameter_list|(
name|Property
argument_list|<
name|T
argument_list|>
name|property
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|property
operator|.
name|getName
argument_list|()
argument_list|,
name|property
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns a version of this property that represents an OUTER join. It is      * up to caller to ensure that the property corresponds to a relationship,      * as "outer" attributes make no sense.      */
specifier|public
name|Property
argument_list|<
name|E
argument_list|>
name|outer
parameter_list|()
block|{
return|return
name|isOuter
argument_list|()
condition|?
name|this
else|:
name|create
argument_list|(
name|name
operator|+
literal|"+"
argument_list|,
name|type
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isOuter
parameter_list|()
block|{
return|return
name|name
operator|.
name|endsWith
argument_list|(
literal|"+"
argument_list|)
return|;
block|}
comment|/**      * Converts this property to a path expression.      * This method is equivalent of getExpression() which is preferred as more generic.      *      * @return a newly created expression.      * @see Property#getExpression()      */
specifier|public
name|Expression
name|path
parameter_list|()
block|{
return|return
name|getExpression
argument_list|()
return|;
block|}
comment|/**      * @return An expression representing null.      */
specifier|public
name|Expression
name|isNull
parameter_list|()
block|{
return|return
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * @return An expression representing a non-null value.      */
specifier|public
name|Expression
name|isNotNull
parameter_list|()
block|{
return|return
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|.
name|notExp
argument_list|()
return|;
block|}
comment|/**      * @return An expression representing equality to TRUE.      */
specifier|public
name|Expression
name|isTrue
parameter_list|()
block|{
return|return
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
return|;
block|}
comment|/**      * @return An expression representing equality to FALSE.      */
specifier|public
name|Expression
name|isFalse
parameter_list|()
block|{
return|return
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
return|;
block|}
comment|/**      * @return An expression representing equality to a value.      */
specifier|public
name|Expression
name|eq
parameter_list|(
name|E
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * @return An expression representing equality between two attributes      * (columns).      */
specifier|public
name|Expression
name|eq
parameter_list|(
name|Property
argument_list|<
name|?
argument_list|>
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
operator|.
name|getExpression
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return An expression representing inequality to a value.      */
specifier|public
name|Expression
name|ne
parameter_list|(
name|E
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|noMatchExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * @return An expression representing inequality between two attributes      * (columns).      */
specifier|public
name|Expression
name|ne
parameter_list|(
name|Property
argument_list|<
name|?
argument_list|>
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|noMatchExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
operator|.
name|getExpression
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @param pattern a pattern matching property value. Pattern may include "_" and      *                "%" wildcard symbols to match any single character or a      *                sequence of characters. To prevent "_" and "%" from being      *                treated as wildcards, they need to be escaped and escape char      *                passed with {@link #like(String, char)} method.      * @return An expression for a Database "LIKE" query.      */
specifier|public
name|Expression
name|like
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|pattern
argument_list|)
return|;
block|}
comment|/**      * @param pattern    a properly escaped pattern matching property value. Pattern      *                   may include "_" and "%" wildcard symbols to match any single      *                   character or a sequence of characters.      * @param escapeChar an escape character used in the pattern to escape "%" and "_".      * @return An expression for a Database "LIKE" query.      */
specifier|public
name|Expression
name|like
parameter_list|(
name|String
name|pattern
parameter_list|,
name|char
name|escapeChar
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|escapeChar
argument_list|)
return|;
block|}
comment|/**      * @return An expression for a case insensitive "LIKE" query.      */
specifier|public
name|Expression
name|likeIgnoreCase
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|likeIgnoreCaseExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|pattern
argument_list|)
return|;
block|}
comment|/**      * @return An expression for a Database "NOT LIKE" query.      */
specifier|public
name|Expression
name|nlike
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|notLikeExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * @return An expression for a case insensitive "NOT LIKE" query.      */
specifier|public
name|Expression
name|nlikeIgnoreCase
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|notLikeIgnoreCaseExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * Creates an expression for a database "LIKE" query with the value converted to a pattern matching anywhere in the      * String.      *      * @param substring a String to match against property value. "_" and "%" symbols      *                  are NOT treated as wildcards and are escaped when converted to      *                  a LIKE expression.      * @return a newly created expression.      */
specifier|public
name|Expression
name|contains
parameter_list|(
name|String
name|substring
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|containsExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|substring
argument_list|)
return|;
block|}
comment|/**      * Creates an expression for a database "LIKE" query with the value converted to a pattern matching the beginning of      * a String.      *      * @param value a String to match against property value. "_" and "%" symbols      *              are NOT treated as wildcards and are escaped when converted to      *              a LIKE expression.      * @return a newly created expression.      */
specifier|public
name|Expression
name|startsWith
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|startsWithExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * Creates an expression for a database "LIKE" query with the value      * converted to a pattern matching the tail of a String.      *      * @param value a String to match against property value. "_" and "%" symbols      *              are NOT treated as wildcards and are escaped when converted to      *              a LIKE expression.      * @return a newly created expression.      */
specifier|public
name|Expression
name|endsWith
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|endsWithExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * Same as {@link #contains(String)}, only using case-insensitive      * comparison.      */
specifier|public
name|Expression
name|containsIgnoreCase
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|containsIgnoreCaseExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * Same as {@link #startsWith(String)}, only using case-insensitive      * comparison.      */
specifier|public
name|Expression
name|startsWithIgnoreCase
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|startsWithIgnoreCaseExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * Same as {@link #endsWith(String)}, only using case-insensitive      * comparison.      */
specifier|public
name|Expression
name|endsWithIgnoreCase
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|endsWithIgnoreCaseExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * @param lower The lower bound.      * @param upper The upper bound.      * @return An expression checking for objects between a lower and upper      * bound inclusive      */
specifier|public
name|Expression
name|between
parameter_list|(
name|E
name|lower
parameter_list|,
name|E
name|upper
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|betweenExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|lower
argument_list|,
name|upper
argument_list|)
return|;
block|}
comment|/**      * @return An expression for finding objects with values in the given set.      */
specifier|public
name|Expression
name|in
parameter_list|(
name|E
name|firstValue
parameter_list|,
name|E
modifier|...
name|moreValues
parameter_list|)
block|{
name|int
name|moreValuesLength
init|=
name|moreValues
operator|!=
literal|null
condition|?
name|moreValues
operator|.
name|length
else|:
literal|0
decl_stmt|;
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|moreValuesLength
operator|+
literal|1
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|firstValue
expr_stmt|;
if|if
condition|(
name|moreValuesLength
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|moreValues
argument_list|,
literal|0
argument_list|,
name|values
argument_list|,
literal|1
argument_list|,
name|moreValuesLength
argument_list|)
expr_stmt|;
block|}
return|return
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|values
argument_list|)
return|;
block|}
comment|/**      * @return An expression for finding objects with values not in the given      * set.      */
specifier|public
name|Expression
name|nin
parameter_list|(
name|E
name|firstValue
parameter_list|,
name|E
modifier|...
name|moreValues
parameter_list|)
block|{
name|int
name|moreValuesLength
init|=
name|moreValues
operator|!=
literal|null
condition|?
name|moreValues
operator|.
name|length
else|:
literal|0
decl_stmt|;
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|moreValuesLength
operator|+
literal|1
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|firstValue
expr_stmt|;
if|if
condition|(
name|moreValuesLength
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|moreValues
argument_list|,
literal|0
argument_list|,
name|values
argument_list|,
literal|1
argument_list|,
name|moreValuesLength
argument_list|)
expr_stmt|;
block|}
return|return
name|ExpressionFactory
operator|.
name|notInExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|values
argument_list|)
return|;
block|}
comment|/**      * @return An expression for finding objects with values in the given set.      */
specifier|public
name|Expression
name|in
parameter_list|(
name|Collection
argument_list|<
name|E
argument_list|>
name|values
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|values
argument_list|)
return|;
block|}
comment|/**      * @return An expression for finding objects with values not in the given      * set.      */
specifier|public
name|Expression
name|nin
parameter_list|(
name|Collection
argument_list|<
name|E
argument_list|>
name|values
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|notInExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|values
argument_list|)
return|;
block|}
comment|/**      * @return A greater than Expression.      */
specifier|public
name|Expression
name|gt
parameter_list|(
name|E
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|greaterExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * @return Represents a greater than relationship between two attributes      * (columns).      */
specifier|public
name|Expression
name|gt
parameter_list|(
name|Property
argument_list|<
name|?
argument_list|>
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|greaterExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
operator|.
name|getExpression
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return A greater than or equal to Expression.      */
specifier|public
name|Expression
name|gte
parameter_list|(
name|E
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|greaterOrEqualExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * @return Represents a greater than or equal relationship between two      * attributes (columns).      */
specifier|public
name|Expression
name|gte
parameter_list|(
name|Property
argument_list|<
name|?
argument_list|>
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|greaterOrEqualExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
operator|.
name|getExpression
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return A less than Expression.      */
specifier|public
name|Expression
name|lt
parameter_list|(
name|E
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|lessExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * @return Represents a less than relationship between two attributes      * (columns).      */
specifier|public
name|Expression
name|lt
parameter_list|(
name|Property
argument_list|<
name|?
argument_list|>
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|lessExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
operator|.
name|getExpression
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return A less than or equal to Expression.      */
specifier|public
name|Expression
name|lte
parameter_list|(
name|E
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|lessOrEqualExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * @return Represents a less than or equal relationship between two      * attributes (columns).      */
specifier|public
name|Expression
name|lte
parameter_list|(
name|Property
argument_list|<
name|?
argument_list|>
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|lessOrEqualExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
operator|.
name|getExpression
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return Ascending sort orderings on this property.      */
specifier|public
name|Ordering
name|asc
parameter_list|()
block|{
return|return
operator|new
name|Ordering
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
return|;
block|}
comment|/**      * @return Ascending sort orderings on this property.      */
specifier|public
name|Orderings
name|ascs
parameter_list|()
block|{
return|return
operator|new
name|Orderings
argument_list|(
name|asc
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return Ascending case insensitive sort orderings on this property.      */
specifier|public
name|Ordering
name|ascInsensitive
parameter_list|()
block|{
return|return
operator|new
name|Ordering
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|SortOrder
operator|.
name|ASCENDING_INSENSITIVE
argument_list|)
return|;
block|}
comment|/**      * @return Ascending case insensitive sort orderings on this property.      */
specifier|public
name|Orderings
name|ascInsensitives
parameter_list|()
block|{
return|return
operator|new
name|Orderings
argument_list|(
name|ascInsensitive
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return Descending sort orderings on this property.      */
specifier|public
name|Ordering
name|desc
parameter_list|()
block|{
return|return
operator|new
name|Ordering
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|SortOrder
operator|.
name|DESCENDING
argument_list|)
return|;
block|}
comment|/**      * @return Descending sort orderings on this property.      */
specifier|public
name|Orderings
name|descs
parameter_list|()
block|{
return|return
operator|new
name|Orderings
argument_list|(
name|desc
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return Descending case insensitive sort orderings on this property.      */
specifier|public
name|Ordering
name|descInsensitive
parameter_list|()
block|{
return|return
operator|new
name|Ordering
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|SortOrder
operator|.
name|DESCENDING_INSENSITIVE
argument_list|)
return|;
block|}
comment|/**      * @return Descending case insensitive sort orderings on this property.      */
specifier|public
name|Orderings
name|descInsensitives
parameter_list|()
block|{
return|return
operator|new
name|Orderings
argument_list|(
name|descInsensitive
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns a prefetch tree that follows this property path, potentially      * spanning a number of phantom nodes, and having a single leaf with "joint"      * prefetch semantics.      */
specifier|public
name|PrefetchTreeNode
name|joint
parameter_list|()
block|{
return|return
name|PrefetchTreeNode
operator|.
name|withPath
argument_list|(
name|getName
argument_list|()
argument_list|,
name|PrefetchTreeNode
operator|.
name|JOINT_PREFETCH_SEMANTICS
argument_list|)
return|;
block|}
comment|/**      * Returns a prefetch tree that follows this property path, potentially      * spanning a number of phantom nodes, and having a single leaf with      * "disjoint" prefetch semantics.      */
specifier|public
name|PrefetchTreeNode
name|disjoint
parameter_list|()
block|{
return|return
name|PrefetchTreeNode
operator|.
name|withPath
argument_list|(
name|getName
argument_list|()
argument_list|,
name|PrefetchTreeNode
operator|.
name|DISJOINT_PREFETCH_SEMANTICS
argument_list|)
return|;
block|}
comment|/**      * Returns a prefetch tree that follows this property path, potentially      * spanning a number of phantom nodes, and having a single leaf with      * "disjoint by id" prefetch semantics.      */
specifier|public
name|PrefetchTreeNode
name|disjointById
parameter_list|()
block|{
return|return
name|PrefetchTreeNode
operator|.
name|withPath
argument_list|(
name|getName
argument_list|()
argument_list|,
name|PrefetchTreeNode
operator|.
name|DISJOINT_BY_ID_PREFETCH_SEMANTICS
argument_list|)
return|;
block|}
comment|/**      * Extracts property value from an object using JavaBean-compatible      * introspection with one addition - a property can be a dot-separated      * property name path.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|E
name|getFrom
parameter_list|(
name|Object
name|bean
parameter_list|)
block|{
return|return
operator|(
name|E
operator|)
name|PropertyUtils
operator|.
name|getProperty
argument_list|(
name|bean
argument_list|,
name|getName
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Extracts property value from a collection of objects using      * JavaBean-compatible introspection with one addition - a property can be a      * dot-separated property name path.      */
specifier|public
name|List
argument_list|<
name|E
argument_list|>
name|getFromAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|beans
parameter_list|)
block|{
name|List
argument_list|<
name|E
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|beans
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|bean
range|:
name|beans
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|getFrom
argument_list|(
name|bean
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Sets a property value in 'obj' using JavaBean-compatible introspection      * with one addition - a property can be a dot-separated property name path.      */
specifier|public
name|void
name|setIn
parameter_list|(
name|Object
name|bean
parameter_list|,
name|E
name|value
parameter_list|)
block|{
name|PropertyUtils
operator|.
name|setProperty
argument_list|(
name|bean
argument_list|,
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets a property value in a collection of objects using      * JavaBean-compatible introspection with one addition - a property can be a      * dot-separated property name path.      */
specifier|public
name|void
name|setInAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|beans
parameter_list|,
name|E
name|value
parameter_list|)
block|{
for|for
control|(
name|Object
name|bean
range|:
name|beans
control|)
block|{
name|setIn
argument_list|(
name|bean
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see FunctionExpressionFactory#countExp(Expression)      */
specifier|public
name|Property
argument_list|<
name|Long
argument_list|>
name|count
parameter_list|()
block|{
return|return
name|create
argument_list|(
name|FunctionExpressionFactory
operator|.
name|countExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|Long
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#maxExp(Expression)      */
specifier|public
name|Property
argument_list|<
name|E
argument_list|>
name|max
parameter_list|()
block|{
return|return
name|create
argument_list|(
name|FunctionExpressionFactory
operator|.
name|maxExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|getType
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#minExp(Expression)      */
specifier|public
name|Property
argument_list|<
name|E
argument_list|>
name|min
parameter_list|()
block|{
return|return
name|create
argument_list|(
name|FunctionExpressionFactory
operator|.
name|minExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|getType
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#avgExp(Expression)      */
specifier|public
name|Property
argument_list|<
name|E
argument_list|>
name|avg
parameter_list|()
block|{
return|return
name|create
argument_list|(
name|FunctionExpressionFactory
operator|.
name|avgExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|getType
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#sumExp(Expression)      */
specifier|public
name|Property
argument_list|<
name|E
argument_list|>
name|sum
parameter_list|()
block|{
return|return
name|create
argument_list|(
name|FunctionExpressionFactory
operator|.
name|sumExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|getType
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#modExp(Expression, Number)      */
specifier|public
name|Property
argument_list|<
name|E
argument_list|>
name|mod
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|FunctionExpressionFactory
operator|.
name|modExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|number
argument_list|)
argument_list|,
name|getType
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#absExp(Expression)      */
specifier|public
name|Property
argument_list|<
name|E
argument_list|>
name|abs
parameter_list|()
block|{
return|return
name|create
argument_list|(
name|FunctionExpressionFactory
operator|.
name|absExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|getType
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#sqrtExp(Expression)      */
specifier|public
name|Property
argument_list|<
name|E
argument_list|>
name|sqrt
parameter_list|()
block|{
return|return
name|create
argument_list|(
name|FunctionExpressionFactory
operator|.
name|sqrtExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|getType
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#lengthExp(Expression)      */
specifier|public
name|Property
argument_list|<
name|Integer
argument_list|>
name|length
parameter_list|()
block|{
return|return
name|create
argument_list|(
name|FunctionExpressionFactory
operator|.
name|lengthExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#locateExp(String, Expression)      */
specifier|public
name|Property
argument_list|<
name|Integer
argument_list|>
name|locate
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|FunctionExpressionFactory
operator|.
name|locateExp
argument_list|(
name|ExpressionFactory
operator|.
name|wrapScalarValue
argument_list|(
name|string
argument_list|)
argument_list|,
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#locateExp(Expression, Expression)      */
specifier|public
name|Property
argument_list|<
name|Integer
argument_list|>
name|locate
parameter_list|(
name|Property
argument_list|<
name|?
extends|extends
name|String
argument_list|>
name|property
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|FunctionExpressionFactory
operator|.
name|locateExp
argument_list|(
name|property
operator|.
name|getExpression
argument_list|()
argument_list|,
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#trimExp(Expression)      */
specifier|public
name|Property
argument_list|<
name|String
argument_list|>
name|trim
parameter_list|()
block|{
return|return
name|create
argument_list|(
name|FunctionExpressionFactory
operator|.
name|trimExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#upperExp(Expression)      */
specifier|public
name|Property
argument_list|<
name|String
argument_list|>
name|upper
parameter_list|()
block|{
return|return
name|create
argument_list|(
name|FunctionExpressionFactory
operator|.
name|upperExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#lowerExp(Expression)      */
specifier|public
name|Property
argument_list|<
name|String
argument_list|>
name|lower
parameter_list|()
block|{
return|return
name|create
argument_list|(
name|FunctionExpressionFactory
operator|.
name|lowerExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      *<p>Arguments will be converted as follows:      *<ul>      *<li>if argument is a {@link Property} than its expression will be used</li>      *<li>if argument is a {@link Expression} than it will be used as is</li>      *<li>all other values will be converted to String</li>      *</ul>      *</p>      *<p>      *     Usage:      *<pre>{@code      *     Property<String> fullName = Artist.FIRST_NAME.concat(" ", Artist.SECOND_NAME);      *     }</pre>      *</p>      * @see FunctionExpressionFactory#concatExp(Expression...)      */
specifier|public
name|Property
argument_list|<
name|String
argument_list|>
name|concat
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|Expression
index|[]
name|exp
init|=
operator|new
name|Expression
index|[
name|args
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|exp
index|[
name|i
operator|++
index|]
operator|=
name|getExpression
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|arg
range|:
name|args
control|)
block|{
if|if
condition|(
name|arg
operator|instanceof
name|Property
condition|)
block|{
name|exp
index|[
name|i
operator|++
index|]
operator|=
operator|(
operator|(
name|Property
operator|)
name|arg
operator|)
operator|.
name|getExpression
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|arg
operator|instanceof
name|Expression
condition|)
block|{
name|exp
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|Expression
operator|)
name|arg
expr_stmt|;
block|}
if|else if
condition|(
name|arg
operator|!=
literal|null
condition|)
block|{
name|exp
index|[
name|i
operator|++
index|]
operator|=
name|ExpressionFactory
operator|.
name|wrapScalarValue
argument_list|(
name|arg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|create
argument_list|(
name|FunctionExpressionFactory
operator|.
name|concatExp
argument_list|(
name|exp
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#substringExp(Expression, int, int)      */
specifier|public
name|Property
argument_list|<
name|String
argument_list|>
name|substring
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|FunctionExpressionFactory
operator|.
name|substringExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * Creates alias with different name for this property      */
specifier|public
name|Property
argument_list|<
name|E
argument_list|>
name|alias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
return|return
operator|new
name|Property
argument_list|<>
argument_list|(
name|alias
argument_list|,
name|this
operator|.
name|getExpression
argument_list|()
argument_list|,
name|this
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
comment|/**      *<p>Create new "flat" property for toMany relationship.</p>      *<p>      *     Example:      *<pre>{@code      *     List<Object[]> result = ObjectSelect      *          .columnQuery(Artist.class, Artist.ARTIST_NAME, Artist.PAINTING_ARRAY.flat(Painting.class))      *          .select(context);      *     }</pre>      *</p>      */
specifier|public
parameter_list|<
name|T
extends|extends
name|Persistent
parameter_list|>
name|Property
argument_list|<
name|T
argument_list|>
name|flat
parameter_list|(
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
name|tClass
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Collection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|&&
operator|!
name|Map
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can use flat() function only on Property mapped on toMany relationship."
argument_list|)
throw|;
block|}
return|return
name|create
argument_list|(
name|ExpressionFactory
operator|.
name|fullObjectExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|tClass
argument_list|)
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
super|super
name|E
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Creates property with name and type      * @see Property#create(Expression, Class)      * @see Property#create(String, Expression, Class)      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Property
argument_list|<
name|T
argument_list|>
name|create
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|new
name|Property
argument_list|<>
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      * Creates property with expression and type      * @see Property#create(String, Class)      * @see Property#create(String, Expression, Class)      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Property
argument_list|<
name|T
argument_list|>
name|create
parameter_list|(
name|Expression
name|expression
parameter_list|,
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|new
name|Property
argument_list|<>
argument_list|(
literal|null
argument_list|,
name|expression
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      * Creates property with name, expression and type      * @see Property#create(String, Class)      * @see Property#create(Expression, Class)      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Property
argument_list|<
name|T
argument_list|>
name|create
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|,
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|new
name|Property
argument_list|<>
argument_list|(
name|name
argument_list|,
name|expression
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      *<p>      * Creates "self" Property for persistent class.      * This property can be used to select full object along with some of it properties (or      * properties that can be resolved against query root)      *</p>      *<p>      *     Here is sample code, that will select all Artists and count of their Paintings:      *<pre>{@code      *     Property<Artist> artistFull = Property.createSelf(Artist.class);      *     List<Object[]> result = ObjectSelect      *          .columnQuery(Artist.class, artistFull, Artist.PAINTING_ARRAY.count())      *          .select(context);      *     }      *</pre>      *</p>      */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Persistent
parameter_list|>
name|Property
argument_list|<
name|T
argument_list|>
name|createSelf
parameter_list|(
name|Class
argument_list|<
name|?
super|super
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|new
name|Property
argument_list|<>
argument_list|(
literal|null
argument_list|,
name|ExpressionFactory
operator|.
name|fullObjectExp
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      * Since Expression is mutable we need to provide clean Expression for every getter call.      * So to keep Property itself immutable we use ExpressionProvider.      * @see Property#Property(String, Class)      * @see Property#Property(String, Expression, Class)      */
specifier|private
interface|interface
name|ExpressionProvider
block|{
name|Expression
name|get
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

