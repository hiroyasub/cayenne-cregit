begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|FunctionExpressionFactory
import|;
end_import

begin_comment
comment|/**  * Property that represents date/time attribute.  *<pre>{@code  * ObjectSelect.query(Artist.class)  *      .where(Artist.DATE_OF_BIRTH.year().lte(1900))  *      .or(Artist.DATE_OF_BIRTH.month().between(6, 8))  * }</pre>  *  * @see org.apache.cayenne.exp.property  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|DateProperty
parameter_list|<
name|E
parameter_list|>
extends|extends
name|BaseProperty
argument_list|<
name|E
argument_list|>
implements|implements
name|ComparableProperty
argument_list|<
name|E
argument_list|>
block|{
comment|/**      * Constructs a new property with the given name and expression      *      * @param name       of the property (will be used as alias for the expression)      * @param expression expression for property      * @param type       of the property      */
specifier|protected
name|DateProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|expression
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
comment|/**      * It is a caller responsibility to check that underlying attribute has year component      *      * @return new property that represents year component of this date property      * @see FunctionExpressionFactory#yearExp(Expression)      */
specifier|public
name|NumericProperty
argument_list|<
name|Integer
argument_list|>
name|year
parameter_list|()
block|{
return|return
name|PropertyFactory
operator|.
name|createNumeric
argument_list|(
name|FunctionExpressionFactory
operator|.
name|yearExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * It is a caller responsibility to check that underlying attribute has month component      *      * @return new property that represents month component of this date property      * @see FunctionExpressionFactory#monthExp(Expression)      */
specifier|public
name|NumericProperty
argument_list|<
name|Integer
argument_list|>
name|month
parameter_list|()
block|{
return|return
name|PropertyFactory
operator|.
name|createNumeric
argument_list|(
name|FunctionExpressionFactory
operator|.
name|monthExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * It is a caller responsibility to check that underlying attribute has day component      *      * @return new property that represents day of month component of this date property      * @see FunctionExpressionFactory#dayOfMonthExp(Expression)      */
specifier|public
name|NumericProperty
argument_list|<
name|Integer
argument_list|>
name|dayOfMonth
parameter_list|()
block|{
return|return
name|PropertyFactory
operator|.
name|createNumeric
argument_list|(
name|FunctionExpressionFactory
operator|.
name|dayOfMonthExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * It is a caller responsibility to check that underlying attribute has day component      *      * @return new property that represents day of year component of this date property      * @see FunctionExpressionFactory#dayOfMonthExp(Expression)      */
specifier|public
name|NumericProperty
argument_list|<
name|Integer
argument_list|>
name|dayOfYear
parameter_list|()
block|{
return|return
name|PropertyFactory
operator|.
name|createNumeric
argument_list|(
name|FunctionExpressionFactory
operator|.
name|dayOfYearExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * It is a caller responsibility to check that underlying attribute has time component      *      * @return new property that represents hour component of this time property      * @see FunctionExpressionFactory#hourExp(Expression)      */
specifier|public
name|NumericProperty
argument_list|<
name|Integer
argument_list|>
name|hour
parameter_list|()
block|{
return|return
name|PropertyFactory
operator|.
name|createNumeric
argument_list|(
name|FunctionExpressionFactory
operator|.
name|hourExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * It is a caller responsibility to check that underlying attribute has time component      *      * @return new property that represents minute component of this time property      * @see FunctionExpressionFactory#minuteExp(Expression)      */
specifier|public
name|NumericProperty
argument_list|<
name|Integer
argument_list|>
name|minute
parameter_list|()
block|{
return|return
name|PropertyFactory
operator|.
name|createNumeric
argument_list|(
name|FunctionExpressionFactory
operator|.
name|minuteExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * It is a caller responsibility to check that underlying attribute has time component      *      * @return new property that represents second component of this time property      * @see FunctionExpressionFactory#secondExp(Expression)      */
specifier|public
name|NumericProperty
argument_list|<
name|Integer
argument_list|>
name|second
parameter_list|()
block|{
return|return
name|PropertyFactory
operator|.
name|createNumeric
argument_list|(
name|FunctionExpressionFactory
operator|.
name|secondExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|DateProperty
argument_list|<
name|E
argument_list|>
name|alias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
return|return
name|PropertyFactory
operator|.
name|createDate
argument_list|(
name|alias
argument_list|,
name|this
operator|.
name|getExpression
argument_list|()
argument_list|,
name|this
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#maxExp(Expression)      */
specifier|public
name|DateProperty
argument_list|<
name|E
argument_list|>
name|max
parameter_list|()
block|{
return|return
name|PropertyFactory
operator|.
name|createDate
argument_list|(
name|FunctionExpressionFactory
operator|.
name|maxExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|getType
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#minExp(Expression)      */
specifier|public
name|DateProperty
argument_list|<
name|E
argument_list|>
name|min
parameter_list|()
block|{
return|return
name|PropertyFactory
operator|.
name|createDate
argument_list|(
name|FunctionExpressionFactory
operator|.
name|minExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|getType
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

