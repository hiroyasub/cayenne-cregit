begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Base class for all aggregation functions expressions  * It's more like marker interface for now.  * @since 4.0  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ASTAggregateFunctionCall
extends|extends
name|ASTFunctionCall
block|{
name|ASTAggregateFunctionCall
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|functionName
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|functionName
argument_list|)
expr_stmt|;
block|}
name|ASTAggregateFunctionCall
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|functionName
parameter_list|,
name|Object
modifier|...
name|nodes
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|functionName
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getRequiredChildrenCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Object
name|evaluateNode
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|len
init|=
name|jjtGetNumChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Aggregate functions can be calculated only for Collection or Map."
argument_list|)
throw|;
block|}
name|Object
name|firstChild
init|=
name|evaluateChild
argument_list|(
literal|0
argument_list|,
name|o
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|?
argument_list|>
name|values
decl_stmt|;
if|if
condition|(
name|firstChild
operator|instanceof
name|Map
condition|)
block|{
name|values
operator|=
operator|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|firstChild
operator|)
operator|.
name|values
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|firstChild
operator|instanceof
name|Collection
condition|)
block|{
name|values
operator|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|firstChild
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Aggregate functions can be calculated only for Collection or Map."
argument_list|)
throw|;
block|}
return|return
name|evaluateCollection
argument_list|(
name|values
argument_list|)
return|;
block|}
specifier|protected
name|Object
name|evaluateCollection
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|values
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"In-memory evaluation of aggregate functions not implemented yet."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|Object
name|evaluateSubNode
parameter_list|(
name|Object
name|o
parameter_list|,
name|Object
index|[]
name|evaluatedChildren
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"In-memory evaluation of aggregate functions not implemented yet."
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

