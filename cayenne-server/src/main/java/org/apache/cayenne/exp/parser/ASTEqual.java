begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ValueInjector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * "Equal To" expression.  *   * @since 1.1  */
end_comment

begin_class
specifier|public
class|class
name|ASTEqual
extends|extends
name|ConditionNode
implements|implements
name|ValueInjector
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1211234198602067833L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ASTEqual
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** 	 * Constructor used by expression parser. Do not invoke directly. 	 */
name|ASTEqual
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ASTEqual
parameter_list|()
block|{
name|super
argument_list|(
name|ExpressionParserTreeConstants
operator|.
name|JJTEQUAL
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Creates "Equal To" expression. 	 */
specifier|public
name|ASTEqual
parameter_list|(
name|SimpleNode
name|path
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|ExpressionParserTreeConstants
operator|.
name|JJTEQUAL
argument_list|)
expr_stmt|;
name|jjtAddChild
argument_list|(
name|path
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|jjtAddChild
argument_list|(
operator|new
name|ASTScalar
argument_list|(
name|value
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|connectChildren
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Object
name|evaluateNode
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|len
init|=
name|jjtGetNumChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|!=
literal|2
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
name|Object
name|o1
init|=
name|evaluateChild
argument_list|(
literal|0
argument_list|,
name|o
argument_list|)
decl_stmt|;
name|Object
name|o2
init|=
name|evaluateChild
argument_list|(
literal|1
argument_list|,
name|o
argument_list|)
decl_stmt|;
return|return
name|evaluateImpl
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
return|;
block|}
comment|/** 	 * Compares two objects, if one of them is array, 'in' operation is 	 * performed 	 */
specifier|static
name|boolean
name|evaluateImpl
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
comment|// TODO: maybe we need a comparison "strategy" here, instead of
comment|// a switch of all possible cases? ... there were other requests for
comment|// more relaxed type-unsafe comparison (e.g. numbers to strings)
if|if
condition|(
name|o1
operator|==
literal|null
operator|&&
name|o2
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|o1
operator|!=
literal|null
condition|)
block|{
comment|// Per CAY-419 we perform 'in' comparison if one object is a list,
comment|// and other is not
if|if
condition|(
name|o1
operator|instanceof
name|List
operator|&&
operator|!
operator|(
name|o2
operator|instanceof
name|List
operator|)
condition|)
block|{
for|for
control|(
name|Object
name|element
range|:
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|o1
operator|)
control|)
block|{
if|if
condition|(
name|element
operator|!=
literal|null
operator|&&
name|Evaluator
operator|.
name|evaluator
argument_list|(
name|element
argument_list|)
operator|.
name|eq
argument_list|(
name|element
argument_list|,
name|o2
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
if|if
condition|(
name|o2
operator|instanceof
name|List
operator|&&
operator|!
operator|(
name|o1
operator|instanceof
name|List
operator|)
condition|)
block|{
for|for
control|(
name|Object
name|element
range|:
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|o2
operator|)
control|)
block|{
if|if
condition|(
name|element
operator|!=
literal|null
operator|&&
name|Evaluator
operator|.
name|evaluator
argument_list|(
name|element
argument_list|)
operator|.
name|eq
argument_list|(
name|element
argument_list|,
name|o1
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
return|return
name|Evaluator
operator|.
name|evaluator
argument_list|(
name|o1
argument_list|)
operator|.
name|eq
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** 	 * Creates a copy of this expression node, without copying children. 	 */
annotation|@
name|Override
specifier|public
name|Expression
name|shallowCopy
parameter_list|()
block|{
return|return
operator|new
name|ASTEqual
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getExpressionOperator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
literal|"="
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getEJBQLExpressionOperator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|jjtGetChild
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ASTScalar
operator|&&
operator|(
operator|(
name|ASTScalar
operator|)
name|jjtGetChild
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// for ejbql, we need "is null" instead of "= null"
return|return
literal|"is"
return|;
block|}
return|return
name|getExpressionOperator
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|Expression
operator|.
name|EQUAL_TO
return|;
block|}
specifier|public
name|void
name|injectValue
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
comment|// try to inject value, if one of the operands is scalar, and other is a
comment|// path
name|Node
index|[]
name|args
init|=
operator|new
name|Node
index|[]
block|{
name|jjtGetChild
argument_list|(
literal|0
argument_list|)
block|,
name|jjtGetChild
argument_list|(
literal|1
argument_list|)
block|}
decl_stmt|;
name|int
name|scalarIndex
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|instanceof
name|ASTScalar
condition|)
block|{
name|scalarIndex
operator|=
literal|0
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|1
index|]
operator|instanceof
name|ASTScalar
condition|)
block|{
name|scalarIndex
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|scalarIndex
operator|!=
operator|-
literal|1
operator|&&
name|args
index|[
literal|1
operator|-
name|scalarIndex
index|]
operator|instanceof
name|ASTObjPath
condition|)
block|{
comment|// inject
name|ASTObjPath
name|path
init|=
operator|(
name|ASTObjPath
operator|)
name|args
index|[
literal|1
operator|-
name|scalarIndex
index|]
decl_stmt|;
try|try
block|{
name|path
operator|.
name|injectValue
argument_list|(
name|o
argument_list|,
name|evaluateChild
argument_list|(
name|scalarIndex
argument_list|,
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Failed to inject value "
operator|+
literal|" on path "
operator|+
name|path
operator|.
name|getPath
argument_list|()
operator|+
literal|" to "
operator|+
name|o
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

