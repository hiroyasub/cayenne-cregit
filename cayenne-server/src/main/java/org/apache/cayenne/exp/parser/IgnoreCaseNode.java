begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionException
import|;
end_import

begin_comment
comment|/**  * Common node for likeIgnoreCase and notLikeIgnoreCase  */
end_comment

begin_class
specifier|abstract
class|class
name|IgnoreCaseNode
extends|extends
name|PatternMatchNode
block|{
name|IgnoreCaseNode
parameter_list|(
name|int
name|i
parameter_list|,
name|boolean
name|ignoringCase
parameter_list|)
block|{
name|super
argument_list|(
name|i
argument_list|,
name|ignoringCase
argument_list|)
expr_stmt|;
block|}
name|IgnoreCaseNode
parameter_list|(
name|int
name|i
parameter_list|,
name|boolean
name|ignoringCase
parameter_list|,
name|char
name|escapeChar
parameter_list|)
block|{
name|super
argument_list|(
name|i
argument_list|,
name|ignoringCase
argument_list|,
name|escapeChar
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|appendChildrenAsEJBQL
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|parameterAccumulator
parameter_list|,
name|Appendable
name|out
parameter_list|,
name|String
name|rootId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// with like, first expression is always path, second is a literal,
comment|// which must be uppercased
name|out
operator|.
name|append
argument_list|(
literal|"upper("
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SimpleNode
operator|)
name|children
index|[
literal|0
index|]
operator|)
operator|.
name|appendAsEJBQL
argument_list|(
name|parameterAccumulator
argument_list|,
name|out
argument_list|,
name|rootId
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|") "
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|getEJBQLExpressionOperator
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|Object
name|literal
init|=
operator|(
operator|(
name|ASTScalar
operator|)
name|children
index|[
literal|1
index|]
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|literal
operator|instanceof
name|String
operator|)
condition|)
block|{
throw|throw
operator|new
name|ExpressionException
argument_list|(
literal|"Literal value should be a string"
argument_list|)
throw|;
block|}
name|SimpleNode
operator|.
name|encodeScalarAsEJBQL
argument_list|(
name|parameterAccumulator
argument_list|,
name|out
argument_list|,
operator|(
operator|(
name|String
operator|)
name|literal
operator|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

