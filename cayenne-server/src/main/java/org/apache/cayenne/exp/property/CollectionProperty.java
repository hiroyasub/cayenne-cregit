begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_comment
comment|/**  * Base class for {@link ListProperty} and {@link SetProperty}  * @since 4.2  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|CollectionProperty
parameter_list|<
name|V
extends|extends
name|Persistent
parameter_list|,
name|E
extends|extends
name|Collection
parameter_list|<
name|V
parameter_list|>
parameter_list|>
extends|extends
name|BaseProperty
argument_list|<
name|E
argument_list|>
implements|implements
name|RelationshipProperty
argument_list|<
name|E
argument_list|>
block|{
specifier|protected
name|Class
argument_list|<
name|V
argument_list|>
name|entityType
decl_stmt|;
comment|/**      * Constructs a new property with the given name and expression      *      * @param name       of the property (will be used as alias for the expression)      * @param expression expression for property      * @param collectionType type of the collection      * @param entityType type of related entity      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|CollectionProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|,
name|Class
argument_list|<
name|?
super|super
name|E
argument_list|>
name|collectionType
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|entityType
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|expression
argument_list|,
name|collectionType
argument_list|)
expr_stmt|;
name|this
operator|.
name|entityType
operator|=
name|entityType
expr_stmt|;
block|}
comment|/**      *<p>Create new "flat" property for toMany relationship.</p>      *<p>      * Example:      *<pre>{@code      * List<Object[]> result = ObjectSelect      *      .columnQuery(Artist.class, Artist.ARTIST_NAME, Artist.PAINTING_ARRAY.flat())      *      .select(context);      * }</pre>      *</p>      */
specifier|public
name|EntityProperty
argument_list|<
name|V
argument_list|>
name|flat
parameter_list|()
block|{
return|return
name|PropertyFactory
operator|.
name|createEntity
argument_list|(
name|ExpressionFactory
operator|.
name|fullObjectExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|getEntityType
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return An expression representing equality to a value.      */
specifier|public
name|Expression
name|contains
parameter_list|(
name|V
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * @return An expression representing inequality to a value.      */
specifier|public
name|Expression
name|notContains
parameter_list|(
name|V
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|noMatchExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|// TODO: move all *contains* methods to RelationshipProperty once Property class is removed
comment|/**      * @return An expression for finding objects with values in the given set.      */
annotation|@
name|SafeVarargs
specifier|public
specifier|final
name|Expression
name|contains
parameter_list|(
name|V
name|firstValue
parameter_list|,
name|V
modifier|...
name|moreValues
parameter_list|)
block|{
name|int
name|moreValuesLength
init|=
name|moreValues
operator|!=
literal|null
condition|?
name|moreValues
operator|.
name|length
else|:
literal|0
decl_stmt|;
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|moreValuesLength
operator|+
literal|1
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|firstValue
expr_stmt|;
if|if
condition|(
name|moreValuesLength
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|moreValues
argument_list|,
literal|0
argument_list|,
name|values
argument_list|,
literal|1
argument_list|,
name|moreValuesLength
argument_list|)
expr_stmt|;
block|}
return|return
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|values
argument_list|)
return|;
block|}
comment|/**      * @return An expression for finding objects with values in the given set.      */
specifier|public
name|Expression
name|contains
parameter_list|(
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|values
argument_list|)
return|;
block|}
comment|/**      * @param id object id      * @return An expression for finding object with given id.      */
specifier|public
name|Expression
name|containsId
parameter_list|(
name|Object
name|id
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|id
argument_list|)
return|;
block|}
comment|/**      * @return An expression for finding objects with given id set      */
specifier|public
name|Expression
name|containsId
parameter_list|(
name|Object
name|firstId
parameter_list|,
name|Object
modifier|...
name|moreId
parameter_list|)
block|{
name|int
name|moreValuesLength
init|=
name|moreId
operator|!=
literal|null
condition|?
name|moreId
operator|.
name|length
else|:
literal|0
decl_stmt|;
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|moreValuesLength
operator|+
literal|1
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|firstId
expr_stmt|;
if|if
condition|(
name|moreValuesLength
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|moreId
argument_list|,
literal|0
argument_list|,
name|values
argument_list|,
literal|1
argument_list|,
name|moreValuesLength
argument_list|)
expr_stmt|;
block|}
return|return
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|values
argument_list|)
return|;
block|}
comment|/**      * @return An expression for finding objects with given id set.      */
specifier|public
name|Expression
name|containsId
parameter_list|(
name|Collection
argument_list|<
name|Object
argument_list|>
name|ids
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|inExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|ids
argument_list|)
return|;
block|}
comment|/**      * @param id object id      * @return An expression for finding object without given id.      */
specifier|public
name|Expression
name|notContainsId
parameter_list|(
name|Object
name|id
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|noMatchExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|id
argument_list|)
return|;
block|}
comment|/**      * @return An expression for finding objects without given id set.      */
specifier|public
name|Expression
name|notContainsId
parameter_list|(
name|Object
name|firstId
parameter_list|,
name|Object
modifier|...
name|moreId
parameter_list|)
block|{
name|int
name|moreValuesLength
init|=
name|moreId
operator|!=
literal|null
condition|?
name|moreId
operator|.
name|length
else|:
literal|0
decl_stmt|;
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|moreValuesLength
operator|+
literal|1
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|firstId
expr_stmt|;
if|if
condition|(
name|moreValuesLength
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|moreId
argument_list|,
literal|0
argument_list|,
name|values
argument_list|,
literal|1
argument_list|,
name|moreValuesLength
argument_list|)
expr_stmt|;
block|}
return|return
name|ExpressionFactory
operator|.
name|notInExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|values
argument_list|)
return|;
block|}
comment|/**      * @return An expression for finding objects without given id set.      */
specifier|public
name|Expression
name|notContainsId
parameter_list|(
name|Collection
argument_list|<
name|Object
argument_list|>
name|ids
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|notInExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|ids
argument_list|)
return|;
block|}
comment|/**      * @return An expression for finding objects with values not in the given set.      */
specifier|public
name|Expression
name|notContains
parameter_list|(
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|notInExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|values
argument_list|)
return|;
block|}
comment|/**      * @return An expression for finding objects with values not in the given set.      */
annotation|@
name|SafeVarargs
specifier|public
specifier|final
name|Expression
name|notContains
parameter_list|(
name|V
name|firstValue
parameter_list|,
name|V
modifier|...
name|moreValues
parameter_list|)
block|{
name|int
name|moreValuesLength
init|=
name|moreValues
operator|!=
literal|null
condition|?
name|moreValues
operator|.
name|length
else|:
literal|0
decl_stmt|;
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[
name|moreValuesLength
operator|+
literal|1
index|]
decl_stmt|;
name|values
index|[
literal|0
index|]
operator|=
name|firstValue
expr_stmt|;
if|if
condition|(
name|moreValuesLength
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|moreValues
argument_list|,
literal|0
argument_list|,
name|values
argument_list|,
literal|1
argument_list|,
name|moreValuesLength
argument_list|)
expr_stmt|;
block|}
return|return
name|ExpressionFactory
operator|.
name|notInExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|values
argument_list|)
return|;
block|}
comment|/**      * @return object entity type represented by this property      */
specifier|protected
name|Class
argument_list|<
name|V
argument_list|>
name|getEntityType
parameter_list|()
block|{
return|return
name|entityType
return|;
block|}
block|}
end_class

end_unit

