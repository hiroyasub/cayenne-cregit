begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|PrefetchTreeNode
import|;
end_import

begin_comment
comment|/**  * Interface (or "Trait") that provides basic functionality for all types of relationships.  *<p>  * Provides "dot", prefetch and "outer" functionality.  *  * @see org.apache.cayenne.exp.property  * @since 4.2  */
end_comment

begin_interface
specifier|public
interface|interface
name|RelationshipProperty
parameter_list|<
name|E
parameter_list|>
extends|extends
name|PathProperty
argument_list|<
name|E
argument_list|>
block|{
comment|/**      * Returns a version of this property that represents an OUTER join. It is      * up to caller to ensure that the property corresponds to a relationship,      * as "outer" attributes make no sense.      */
name|BaseProperty
argument_list|<
name|E
argument_list|>
name|outer
parameter_list|()
function_decl|;
comment|/**      * Returns a prefetch tree that follows this property path, potentially      * spanning a number of phantom nodes, and having a single leaf with "joint"      * prefetch semantics.      */
specifier|default
name|PrefetchTreeNode
name|joint
parameter_list|()
block|{
if|if
condition|(
operator|!
name|getExpression
argument_list|()
operator|.
name|getPathAliases
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't use aliases with prefetch"
argument_list|)
throw|;
block|}
return|return
name|PrefetchTreeNode
operator|.
name|withPath
argument_list|(
name|getName
argument_list|()
argument_list|,
name|PrefetchTreeNode
operator|.
name|JOINT_PREFETCH_SEMANTICS
argument_list|)
return|;
block|}
comment|/**      * Returns a prefetch tree that follows this property path, potentially      * spanning a number of phantom nodes, and having a single leaf with      * "disjoint" prefetch semantics.      */
specifier|default
name|PrefetchTreeNode
name|disjoint
parameter_list|()
block|{
if|if
condition|(
operator|!
name|getExpression
argument_list|()
operator|.
name|getPathAliases
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't use aliases with prefetch"
argument_list|)
throw|;
block|}
return|return
name|PrefetchTreeNode
operator|.
name|withPath
argument_list|(
name|getName
argument_list|()
argument_list|,
name|PrefetchTreeNode
operator|.
name|DISJOINT_PREFETCH_SEMANTICS
argument_list|)
return|;
block|}
comment|/**      * Returns a prefetch tree that follows this property path, potentially      * spanning a number of phantom nodes, and having a single leaf with      * "disjoint by id" prefetch semantics.      */
specifier|default
name|PrefetchTreeNode
name|disjointById
parameter_list|()
block|{
if|if
condition|(
operator|!
name|getExpression
argument_list|()
operator|.
name|getPathAliases
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't use aliases with prefetch"
argument_list|)
throw|;
block|}
return|return
name|PrefetchTreeNode
operator|.
name|withPath
argument_list|(
name|getName
argument_list|()
argument_list|,
name|PrefetchTreeNode
operator|.
name|DISJOINT_BY_ID_PREFETCH_SEMANTICS
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

