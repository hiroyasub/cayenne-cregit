begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_comment
comment|/**  * Base class for properties mapped to PK  * @since 4.2  */
end_comment

begin_interface
specifier|public
interface|interface
name|IdProperty
parameter_list|<
name|E
parameter_list|>
extends|extends
name|Property
argument_list|<
name|E
argument_list|>
block|{
specifier|default
name|Expression
name|eq
parameter_list|(
name|ObjectId
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getEntityName
argument_list|()
operator|.
name|equals
argument_list|(
name|value
operator|.
name|getEntityName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can match IdProperty only with ObjectId for same entity"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|idSnapshot
init|=
name|value
operator|.
name|getIdSnapshot
argument_list|()
decl_stmt|;
name|Object
name|pkValue
decl_stmt|;
if|if
condition|(
name|getAttributeName
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|idSnapshot
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Can't match IdProperty with compound PK"
argument_list|)
throw|;
block|}
name|pkValue
operator|=
name|idSnapshot
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|pkValue
operator|=
name|idSnapshot
operator|.
name|get
argument_list|(
name|getAttributeName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pkValue
operator|==
literal|null
operator|&&
operator|!
name|idSnapshot
operator|.
name|containsKey
argument_list|(
name|getAttributeName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"No PK attribute %s for ObjectId %s"
argument_list|,
name|getAttributeName
argument_list|()
argument_list|,
name|value
argument_list|)
throw|;
block|}
block|}
return|return
name|ExpressionFactory
operator|.
name|matchExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|pkValue
argument_list|)
return|;
block|}
name|String
name|getEntityName
parameter_list|()
function_decl|;
name|String
name|getAttributeName
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

