begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|PatternMatchNode
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
class|class
name|LikeExpressionHelper
block|{
comment|// presumably only "?" can't be an escape char
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|ESCAPE_ALPHABET
init|=
operator|new
name|char
index|[]
block|{
literal|'\\'
block|,
literal|'|'
block|,
literal|'/'
block|,
literal|' '
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WILDCARD_SEQUENCE
init|=
literal|"%"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WILDCARD_ONE
init|=
literal|"_"
decl_stmt|;
specifier|static
name|void
name|toContains
parameter_list|(
name|PatternMatchNode
name|exp
parameter_list|)
block|{
name|escape
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|wrap
argument_list|(
name|exp
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|toStartsWith
parameter_list|(
name|PatternMatchNode
name|exp
parameter_list|)
block|{
name|escape
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|wrap
argument_list|(
name|exp
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|toEndsWith
parameter_list|(
name|PatternMatchNode
name|exp
parameter_list|)
block|{
name|escape
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|wrap
argument_list|(
name|exp
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|escape
parameter_list|(
name|PatternMatchNode
name|exp
parameter_list|)
block|{
block|}
specifier|static
name|void
name|wrap
parameter_list|(
name|PatternMatchNode
name|exp
parameter_list|,
name|boolean
name|start
parameter_list|,
name|boolean
name|end
parameter_list|)
block|{
name|Object
name|pattern
init|=
name|exp
operator|.
name|getOperand
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|instanceof
name|String
condition|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|WILDCARD_SEQUENCE
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
if|if
condition|(
name|end
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|WILDCARD_SEQUENCE
argument_list|)
expr_stmt|;
block|}
name|exp
operator|.
name|setOperand
argument_list|(
literal|1
argument_list|,
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

