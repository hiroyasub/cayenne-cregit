begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ColumnSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_comment
comment|/**  * Property that represents root entity  *<br>  * Usage example:<code><pre>  * List<Object[]> result = Artist.SELF.columnQuery(Artist.SELF, Artist.PAINTING_ARRAY.count()).select(context);  *</pre></code>  *  * @since 5.0  * @param<E> type of the property  */
end_comment

begin_class
specifier|public
class|class
name|SelfProperty
parameter_list|<
name|E
extends|extends
name|Persistent
parameter_list|>
extends|extends
name|EntityProperty
argument_list|<
name|E
argument_list|>
block|{
comment|/**      * Constructs a new property with the given name and expression      *      * @param name       of the property (will be used as alias for the expression)      * @param expression expression for property      * @param type       of the property      * @see PropertyFactory#createBase(String, Expression, Class)      */
specifier|protected
name|SelfProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|expression
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Expression
name|exists
parameter_list|(
name|Expression
name|where
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|exists
argument_list|(
name|ObjectSelect
operator|.
name|query
argument_list|(
name|getType
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
name|where
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|notExists
parameter_list|(
name|Expression
name|where
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|notExists
argument_list|(
name|ObjectSelect
operator|.
name|query
argument_list|(
name|getType
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
name|where
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|ObjectSelect
argument_list|<
name|E
argument_list|>
name|query
parameter_list|(
name|Expression
name|where
parameter_list|)
block|{
return|return
name|ObjectSelect
operator|.
name|query
argument_list|(
name|getType
argument_list|()
argument_list|)
operator|.
name|where
argument_list|(
name|where
argument_list|)
return|;
block|}
specifier|public
name|ObjectSelect
argument_list|<
name|E
argument_list|>
name|query
parameter_list|()
block|{
return|return
name|ObjectSelect
operator|.
name|query
argument_list|(
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ColumnSelect
argument_list|<
name|T
argument_list|>
name|columnQuery
parameter_list|(
name|Property
argument_list|<
name|T
argument_list|>
name|property
parameter_list|)
block|{
return|return
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|getType
argument_list|()
argument_list|,
name|property
argument_list|)
return|;
block|}
specifier|public
name|ColumnSelect
argument_list|<
name|Object
index|[]
argument_list|>
name|columnQuery
parameter_list|(
name|Property
argument_list|<
name|?
argument_list|>
modifier|...
name|properties
parameter_list|)
block|{
return|return
name|ObjectSelect
operator|.
name|columnQuery
argument_list|(
name|getType
argument_list|()
argument_list|,
name|properties
argument_list|)
return|;
block|}
block|}
end_class

end_unit

