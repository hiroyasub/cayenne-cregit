begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|property
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|FunctionExpressionFactory
import|;
end_import

begin_comment
comment|/**  * Property that represents attributes mapped on string types  *<p>  * String type is an any type inherited from {@link CharSequence}.  *<p>  * Provides basic string functions like {@link #like(String)}, {@link #concat(Object...)}, {@link #upper()}  * and {@link #contains(String)}}.  *<p>  * Example:<pre>{@code  * ObjectSelect.query(Artist.class)  *      .where(Artist.FIRST_NAME.trim().concat(Artist.LAST_NAME.trim()).length().gt(30))  * }</pre>  *  * @see org.apache.cayenne.exp.property  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|StringProperty
parameter_list|<
name|E
extends|extends
name|CharSequence
parameter_list|>
extends|extends
name|BaseProperty
argument_list|<
name|E
argument_list|>
block|{
comment|/**      * Constructs a new property with the given name and expression      *      * @param name       of the property (will be used as alias for the expression)      * @param expression expression for property      * @param type       of the property      * @see PropertyFactory#createString(String, Expression, Class)      */
specifier|protected
name|StringProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Expression
name|expression
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|expression
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param pattern a pattern matching property value. Pattern may include "_" and      *                "%" wildcard symbols to match any single character or a      *                sequence of characters. To prevent "_" and "%" from being      *                treated as wildcards, they need to be escaped and escape char      *                passed with {@link #like(String, char)} method.      * @return An expression for a Database "LIKE" query.      */
specifier|public
name|Expression
name|like
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|pattern
argument_list|)
return|;
block|}
comment|/**      * @param pattern a pattern matching property value. Pattern may include "_" and      *                "%" wildcard symbols to match any single character or a      *                sequence of characters.      * @return An expression for a Database "LIKE" query.      */
specifier|public
name|Expression
name|like
parameter_list|(
name|StringProperty
argument_list|<
name|?
argument_list|>
name|pattern
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|pattern
operator|.
name|getExpression
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @param pattern    a properly escaped pattern matching property value. Pattern      *                   may include "_" and "%" wildcard symbols to match any single      *                   character or a sequence of characters.      * @param escapeChar an escape character used in the pattern to escape "%" and "_".      * @return An expression for a Database "LIKE" query.      */
specifier|public
name|Expression
name|like
parameter_list|(
name|String
name|pattern
parameter_list|,
name|char
name|escapeChar
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|likeExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|escapeChar
argument_list|)
return|;
block|}
comment|/**      * @return An expression for a case insensitive "LIKE" query.      */
specifier|public
name|Expression
name|likeIgnoreCase
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|likeIgnoreCaseExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|pattern
argument_list|)
return|;
block|}
comment|/**      * @return An expression for a case insensitive "LIKE" query.      */
specifier|public
name|Expression
name|likeIgnoreCase
parameter_list|(
name|StringProperty
argument_list|<
name|?
argument_list|>
name|pattern
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|likeIgnoreCaseExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|pattern
operator|.
name|getExpression
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return An expression for a Database "NOT LIKE" query.      */
specifier|public
name|Expression
name|nlike
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|notLikeExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * @return An expression for a Database "NOT LIKE" query.      */
specifier|public
name|Expression
name|nlike
parameter_list|(
name|StringProperty
argument_list|<
name|?
argument_list|>
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|notLikeExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
operator|.
name|getExpression
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return An expression for a case insensitive "NOT LIKE" query.      */
specifier|public
name|Expression
name|nlikeIgnoreCase
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|notLikeIgnoreCaseExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * @return An expression for a case insensitive "NOT LIKE" query.      */
specifier|public
name|Expression
name|nlikeIgnoreCase
parameter_list|(
name|StringProperty
argument_list|<
name|?
argument_list|>
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|notLikeIgnoreCaseExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
operator|.
name|getExpression
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Creates an expression for a database "LIKE" query with the value converted to a pattern matching anywhere in the      * String.      *      * @param substring a String to match against property value. "_" and "%" symbols      *                  are NOT treated as wildcards and are escaped when converted to      *                  a LIKE expression.      * @return a newly created expression.      */
specifier|public
name|Expression
name|contains
parameter_list|(
name|String
name|substring
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|containsExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|substring
argument_list|)
return|;
block|}
comment|/**      * Creates an expression for a database "LIKE" query with the value converted to a pattern matching the beginning of      * a String.      *      * @param value a String to match against property value. "_" and "%" symbols      *              are NOT treated as wildcards and are escaped when converted to      *              a LIKE expression.      * @return a newly created expression.      */
specifier|public
name|Expression
name|startsWith
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|startsWithExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * Creates an expression for a database "LIKE" query with the value      * converted to a pattern matching the tail of a String.      *      * @param value a String to match against property value. "_" and "%" symbols      *              are NOT treated as wildcards and are escaped when converted to      *              a LIKE expression.      * @return a newly created expression.      */
specifier|public
name|Expression
name|endsWith
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|endsWithExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * Same as {@link #contains(String)}, only using case-insensitive      * comparison.      */
specifier|public
name|Expression
name|containsIgnoreCase
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|containsIgnoreCaseExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * Same as {@link #startsWith(String)}, only using case-insensitive      * comparison.      */
specifier|public
name|Expression
name|startsWithIgnoreCase
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|startsWithIgnoreCaseExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * Same as {@link #endsWith(String)}, only using case-insensitive      * comparison.      */
specifier|public
name|Expression
name|endsWithIgnoreCase
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|ExpressionFactory
operator|.
name|endsWithIgnoreCaseExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#lengthExp(Expression)      */
specifier|public
name|NumericProperty
argument_list|<
name|Integer
argument_list|>
name|length
parameter_list|()
block|{
return|return
name|PropertyFactory
operator|.
name|createNumeric
argument_list|(
name|FunctionExpressionFactory
operator|.
name|lengthExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#locateExp(String, Expression)      */
specifier|public
name|NumericProperty
argument_list|<
name|Integer
argument_list|>
name|locate
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
name|PropertyFactory
operator|.
name|createNumeric
argument_list|(
name|FunctionExpressionFactory
operator|.
name|locateExp
argument_list|(
name|ExpressionFactory
operator|.
name|wrapScalarValue
argument_list|(
name|string
argument_list|)
argument_list|,
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#locateExp(Expression, Expression)      */
specifier|public
name|NumericProperty
argument_list|<
name|Integer
argument_list|>
name|locate
parameter_list|(
name|StringProperty
argument_list|<
name|?
extends|extends
name|String
argument_list|>
name|property
parameter_list|)
block|{
return|return
name|PropertyFactory
operator|.
name|createNumeric
argument_list|(
name|FunctionExpressionFactory
operator|.
name|locateExp
argument_list|(
name|property
operator|.
name|getExpression
argument_list|()
argument_list|,
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#trimExp(Expression)      */
specifier|public
name|StringProperty
argument_list|<
name|String
argument_list|>
name|trim
parameter_list|()
block|{
return|return
name|PropertyFactory
operator|.
name|createString
argument_list|(
name|FunctionExpressionFactory
operator|.
name|trimExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#upperExp(Expression)      */
specifier|public
name|StringProperty
argument_list|<
name|String
argument_list|>
name|upper
parameter_list|()
block|{
return|return
name|PropertyFactory
operator|.
name|createString
argument_list|(
name|FunctionExpressionFactory
operator|.
name|upperExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#lowerExp(Expression)      */
specifier|public
name|StringProperty
argument_list|<
name|String
argument_list|>
name|lower
parameter_list|()
block|{
return|return
name|PropertyFactory
operator|.
name|createString
argument_list|(
name|FunctionExpressionFactory
operator|.
name|lowerExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      *<p>Arguments will be converted as follows:      *<ul>      *<li>if argument is a {@link BaseProperty} than its expression will be used</li>      *<li>if argument is a {@link Expression} than it will be used as is</li>      *<li>all other values will be converted to String</li>      *</ul>      *</p>      *<p>      *     Usage:      *<pre>{@code      *     Property<String> fullName = Artist.FIRST_NAME.concat(" ", Artist.SECOND_NAME);      *     }</pre>      *</p>      * @see FunctionExpressionFactory#concatExp(Expression...)      */
specifier|public
name|StringProperty
argument_list|<
name|String
argument_list|>
name|concat
parameter_list|(
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|Expression
index|[]
name|exp
init|=
operator|new
name|Expression
index|[
name|args
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|exp
index|[
name|i
operator|++
index|]
operator|=
name|getExpression
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|arg
range|:
name|args
control|)
block|{
if|if
condition|(
name|arg
operator|instanceof
name|BaseProperty
condition|)
block|{
name|exp
index|[
name|i
operator|++
index|]
operator|=
operator|(
operator|(
name|BaseProperty
operator|)
name|arg
operator|)
operator|.
name|getExpression
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|arg
operator|instanceof
name|Expression
condition|)
block|{
name|exp
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|Expression
operator|)
name|arg
expr_stmt|;
block|}
if|else if
condition|(
name|arg
operator|!=
literal|null
condition|)
block|{
name|exp
index|[
name|i
operator|++
index|]
operator|=
name|ExpressionFactory
operator|.
name|wrapScalarValue
argument_list|(
name|arg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|PropertyFactory
operator|.
name|createString
argument_list|(
name|FunctionExpressionFactory
operator|.
name|concatExp
argument_list|(
name|exp
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#substringExp(Expression, int, int)      */
specifier|public
name|StringProperty
argument_list|<
name|String
argument_list|>
name|substring
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|PropertyFactory
operator|.
name|createString
argument_list|(
name|FunctionExpressionFactory
operator|.
name|substringExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * @see FunctionExpressionFactory#substringExp(Expression, Expression, Expression)      */
specifier|public
name|StringProperty
argument_list|<
name|String
argument_list|>
name|substring
parameter_list|(
name|NumericProperty
argument_list|<
name|?
argument_list|>
name|offset
parameter_list|,
name|NumericProperty
argument_list|<
name|?
argument_list|>
name|length
parameter_list|)
block|{
return|return
name|PropertyFactory
operator|.
name|createString
argument_list|(
name|FunctionExpressionFactory
operator|.
name|substringExp
argument_list|(
name|getExpression
argument_list|()
argument_list|,
name|offset
operator|.
name|getExpression
argument_list|()
argument_list|,
name|length
operator|.
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * Creates alias with different name for this property      */
annotation|@
name|Override
specifier|public
name|StringProperty
argument_list|<
name|E
argument_list|>
name|alias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
return|return
name|PropertyFactory
operator|.
name|createString
argument_list|(
name|alias
argument_list|,
name|this
operator|.
name|getExpression
argument_list|()
argument_list|,
name|this
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return property that will be translated relative to parent query      */
specifier|public
name|StringProperty
argument_list|<
name|E
argument_list|>
name|enclosing
parameter_list|()
block|{
return|return
name|PropertyFactory
operator|.
name|createString
argument_list|(
name|ExpressionFactory
operator|.
name|enclosingObjectExp
argument_list|(
name|getExpression
argument_list|()
argument_list|)
argument_list|,
name|getType
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

