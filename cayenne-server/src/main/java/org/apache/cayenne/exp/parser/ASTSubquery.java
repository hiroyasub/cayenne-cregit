begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ColumnSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
operator|.
name|ColumnSelectWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
operator|.
name|ObjectSelectWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
operator|.
name|SelectQueryWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|select
operator|.
name|TranslatableQueryWrapper
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|ASTSubquery
extends|extends
name|SimpleNode
block|{
specifier|private
specifier|final
name|TranslatableQueryWrapper
name|query
decl_stmt|;
specifier|public
name|ASTSubquery
parameter_list|(
name|SelectQuery
argument_list|<
name|?
argument_list|>
name|query
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|SelectQueryWrapper
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ASTSubquery
parameter_list|(
name|ObjectSelect
argument_list|<
name|?
argument_list|>
name|query
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ObjectSelectWrapper
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ASTSubquery
parameter_list|(
name|ColumnSelect
argument_list|<
name|?
argument_list|>
name|query
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ColumnSelectWrapper
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ASTSubquery
parameter_list|(
name|TranslatableQueryWrapper
name|query
parameter_list|)
block|{
name|super
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getExpressionOperator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|Object
name|evaluateNode
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|ObjectContext
name|context
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Persistent
condition|)
block|{
name|context
operator|=
operator|(
operator|(
name|Persistent
operator|)
name|o
operator|)
operator|.
name|getObjectContext
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Can't evaluate subquery expression against non-persistent object"
argument_list|)
throw|;
block|}
return|return
name|context
operator|.
name|select
argument_list|(
name|query
operator|.
name|unwrap
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|shallowCopy
parameter_list|()
block|{
return|return
operator|new
name|ASTSubquery
argument_list|(
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|Expression
operator|.
name|SUBQUERY
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|appendAsString
parameter_list|(
name|Appendable
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|append
argument_list|(
literal|"EXISTS"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TranslatableQueryWrapper
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
block|}
end_class

end_unit

