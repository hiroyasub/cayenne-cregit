begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|CayenneMapEntry
import|;
end_import

begin_comment
comment|/**  * @since 4.2  */
end_comment

begin_class
specifier|public
class|class
name|ASTDbIdPath
extends|extends
name|ASTDbPath
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DBID_PREFIX
init|=
literal|"dbid:"
decl_stmt|;
name|ASTDbIdPath
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ASTDbIdPath
parameter_list|()
block|{
name|super
argument_list|(
name|ExpressionParserTreeConstants
operator|.
name|JJTDBIDPATH
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ASTDbIdPath
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|ExpressionParserTreeConstants
operator|.
name|JJTDBIDPATH
argument_list|)
expr_stmt|;
name|setPath
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a copy of this expression node, without copying children.      */
annotation|@
name|Override
specifier|public
name|Expression
name|shallowCopy
parameter_list|()
block|{
name|ASTDbIdPath
name|copy
init|=
operator|new
name|ASTDbIdPath
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|copy
operator|.
name|path
operator|=
name|path
expr_stmt|;
return|return
name|copy
return|;
block|}
specifier|protected
name|Object
name|evaluateNode
parameter_list|(
name|Object
name|o
parameter_list|,
name|String
name|localPath
parameter_list|)
block|{
name|int
name|lastDot
init|=
name|localPath
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|String
name|id
decl_stmt|;
name|String
name|nextSegment
decl_stmt|;
if|if
condition|(
name|lastDot
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// nested entity
name|String
name|objPath
init|=
name|localPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastDot
argument_list|)
decl_stmt|;
name|id
operator|=
name|localPath
operator|.
name|substring
argument_list|(
name|lastDot
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|DataObject
condition|)
block|{
name|o
operator|=
operator|(
operator|(
name|DataObject
operator|)
name|o
operator|)
operator|.
name|readNestedProperty
argument_list|(
name|objPath
argument_list|)
expr_stmt|;
name|nextSegment
operator|=
name|id
expr_stmt|;
block|}
else|else
block|{
name|nextSegment
operator|=
name|localPath
expr_stmt|;
block|}
block|}
else|else
block|{
name|id
operator|=
name|localPath
expr_stmt|;
name|nextSegment
operator|=
name|localPath
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|DataObject
condition|)
block|{
return|return
name|toMap
argument_list|(
name|o
argument_list|)
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Collection
condition|)
block|{
return|return
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|o
operator|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|o1
lambda|->
name|evaluateNode
argument_list|(
name|o1
argument_list|,
name|nextSegment
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Object
name|evaluateNode
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Entity
condition|)
block|{
return|return
name|evaluateEntityNode
argument_list|(
operator|(
name|Entity
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
argument_list|)
return|;
block|}
return|return
name|evaluateNode
argument_list|(
name|o
argument_list|,
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|CayenneMapEntry
name|evaluateEntityNode
parameter_list|(
name|Entity
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|entity
parameter_list|)
block|{
name|int
name|lastDot
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|String
name|objPath
init|=
literal|null
decl_stmt|;
name|String
name|id
init|=
name|path
decl_stmt|;
if|if
condition|(
name|lastDot
operator|>
operator|-
literal|1
condition|)
block|{
name|objPath
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastDot
argument_list|)
expr_stmt|;
name|id
operator|=
name|path
operator|.
name|substring
argument_list|(
name|lastDot
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|entity
operator|instanceof
name|ObjEntity
operator|)
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unable to evaluate DBID path for DbEntity"
argument_list|)
throw|;
block|}
name|ObjEntity
name|objEntity
init|=
operator|(
name|ObjEntity
operator|)
name|entity
decl_stmt|;
if|if
condition|(
name|objPath
operator|!=
literal|null
condition|)
block|{
name|CayenneMapEntry
name|entry
init|=
operator|new
name|ASTObjPath
argument_list|(
name|objPath
argument_list|)
operator|.
name|evaluateEntityNode
argument_list|(
name|objEntity
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|entry
operator|instanceof
name|ObjRelationship
operator|)
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unable to evaluate DBID path %s, relationship expected"
argument_list|,
name|path
argument_list|)
throw|;
block|}
name|objEntity
operator|=
operator|(
operator|(
name|ObjRelationship
operator|)
name|entry
operator|)
operator|.
name|getTargetEntity
argument_list|()
expr_stmt|;
block|}
name|DbAttribute
name|pk
init|=
name|objEntity
operator|.
name|getDbEntity
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|pk
operator|==
literal|null
operator|||
operator|!
name|pk
operator|.
name|isPrimaryKey
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Unable to find PK %s for entity %s"
argument_list|,
name|id
argument_list|,
name|objEntity
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|pk
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|toMap
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Map
condition|)
block|{
return|return
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|ObjectId
condition|)
block|{
return|return
operator|(
operator|(
name|ObjectId
operator|)
name|o
operator|)
operator|.
name|getIdSnapshot
argument_list|()
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Persistent
condition|)
block|{
return|return
operator|(
operator|(
name|Persistent
operator|)
name|o
operator|)
operator|.
name|getObjectId
argument_list|()
operator|.
name|getIdSnapshot
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|Expression
operator|.
name|DBID_PATH
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|appendAsEJBQL
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|parameterAccumulator
parameter_list|,
name|Appendable
name|out
parameter_list|,
name|String
name|rootId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// NOTE: append as db path
name|out
operator|.
name|append
argument_list|(
name|DB_PREFIX
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|rootId
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|appendAsString
parameter_list|(
name|Appendable
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|append
argument_list|(
name|DBID_PREFIX
argument_list|)
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

