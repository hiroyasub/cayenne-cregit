begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphChangeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphManager
import|;
end_import

begin_comment
comment|/**  * Tracks dirty Persistent objects.  *   * @since 1.2  */
end_comment

begin_class
class|class
name|ObjectContextStateLog
implements|implements
name|GraphChangeHandler
block|{
name|Set
argument_list|<
name|Object
argument_list|>
name|dirtyIds
decl_stmt|;
name|GraphManager
name|graphManager
decl_stmt|;
name|ObjectContextStateLog
parameter_list|(
name|GraphManager
name|graphManager
parameter_list|)
block|{
name|this
operator|.
name|dirtyIds
operator|=
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|graphManager
operator|=
name|graphManager
expr_stmt|;
block|}
name|void
name|clear
parameter_list|()
block|{
name|dirtyIds
operator|=
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Updates dirty objects state and clears dirty ids map.      */
name|void
name|graphCommitted
parameter_list|()
block|{
comment|/**          * Array for deleted ids, to avoid concurrent modification          */
name|List
name|deletedIds
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|id
range|:
name|dirtyIds
control|)
block|{
name|Object
name|node
init|=
name|graphManager
operator|.
name|getNode
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Persistent
condition|)
block|{
name|Persistent
name|persistentNode
init|=
operator|(
name|Persistent
operator|)
name|node
decl_stmt|;
switch|switch
condition|(
name|persistentNode
operator|.
name|getPersistenceState
argument_list|()
condition|)
block|{
case|case
name|PersistenceState
operator|.
name|MODIFIED
case|:
case|case
name|PersistenceState
operator|.
name|NEW
case|:
name|persistentNode
operator|.
name|setPersistenceState
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|PersistenceState
operator|.
name|DELETED
case|:
name|deletedIds
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|persistentNode
operator|.
name|setPersistenceState
argument_list|(
name|PersistenceState
operator|.
name|TRANSIENT
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/**          * Now unregister all deleted objects          */
for|for
control|(
name|Object
name|id
range|:
name|deletedIds
control|)
block|{
name|graphManager
operator|.
name|unregisterNode
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|clear
argument_list|()
expr_stmt|;
block|}
name|void
name|graphReverted
parameter_list|()
block|{
for|for
control|(
name|Object
name|id
range|:
name|dirtyIds
control|)
block|{
name|Object
name|node
init|=
name|graphManager
operator|.
name|getNode
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Persistent
condition|)
block|{
name|Persistent
name|persistentNode
init|=
operator|(
name|Persistent
operator|)
name|node
decl_stmt|;
switch|switch
condition|(
name|persistentNode
operator|.
name|getPersistenceState
argument_list|()
condition|)
block|{
case|case
name|PersistenceState
operator|.
name|MODIFIED
case|:
case|case
name|PersistenceState
operator|.
name|DELETED
case|:
name|persistentNode
operator|.
name|setPersistenceState
argument_list|(
name|PersistenceState
operator|.
name|COMMITTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|PersistenceState
operator|.
name|NEW
case|:
name|persistentNode
operator|.
name|setPersistenceState
argument_list|(
name|PersistenceState
operator|.
name|TRANSIENT
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|clear
argument_list|()
expr_stmt|;
block|}
name|boolean
name|hasChanges
parameter_list|()
block|{
return|return
operator|!
name|dirtyIds
operator|.
name|isEmpty
argument_list|()
return|;
block|}
name|Collection
argument_list|<
name|Object
argument_list|>
name|dirtyIds
parameter_list|()
block|{
return|return
name|dirtyIds
return|;
block|}
name|Collection
argument_list|<
name|Object
argument_list|>
name|dirtyNodes
parameter_list|()
block|{
if|if
condition|(
name|dirtyIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
name|Collection
argument_list|<
name|Object
argument_list|>
name|objects
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|dirtyIds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|id
range|:
name|dirtyIds
control|)
block|{
name|objects
operator|.
name|add
argument_list|(
name|graphManager
operator|.
name|getNode
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|objects
return|;
block|}
name|Collection
argument_list|<
name|Object
argument_list|>
name|dirtyNodes
parameter_list|(
name|int
name|state
parameter_list|)
block|{
if|if
condition|(
name|dirtyIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
name|int
name|size
init|=
name|dirtyIds
operator|.
name|size
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Object
argument_list|>
name|objects
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|size
operator|>
literal|50
condition|?
name|size
operator|/
literal|2
else|:
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|id
range|:
name|dirtyIds
control|)
block|{
name|Persistent
name|o
init|=
operator|(
name|Persistent
operator|)
name|graphManager
operator|.
name|getNode
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|.
name|getPersistenceState
argument_list|()
operator|==
name|state
condition|)
block|{
name|objects
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|objects
return|;
block|}
name|void
name|unregisterNode
parameter_list|(
name|Object
name|nodeId
parameter_list|)
block|{
name|dirtyIds
operator|.
name|remove
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
comment|// *** GraphChangeHandler methods
specifier|public
name|void
name|nodeIdChanged
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|Object
name|newId
parameter_list|)
block|{
if|if
condition|(
name|dirtyIds
operator|.
name|remove
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|dirtyIds
operator|.
name|add
argument_list|(
name|newId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|nodeCreated
parameter_list|(
name|Object
name|nodeId
parameter_list|)
block|{
name|dirtyIds
operator|.
name|add
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|nodeRemoved
parameter_list|(
name|Object
name|nodeId
parameter_list|)
block|{
name|dirtyIds
operator|.
name|add
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|nodePropertyChanged
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|String
name|property
parameter_list|,
name|Object
name|oldValue
parameter_list|,
name|Object
name|newValue
parameter_list|)
block|{
name|dirtyIds
operator|.
name|add
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|arcCreated
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|Object
name|targetNodeId
parameter_list|,
name|Object
name|arcId
parameter_list|)
block|{
name|dirtyIds
operator|.
name|add
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|arcDeleted
parameter_list|(
name|Object
name|nodeId
parameter_list|,
name|Object
name|targetNodeId
parameter_list|,
name|Object
name|arcId
parameter_list|)
block|{
name|dirtyIds
operator|.
name|add
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

