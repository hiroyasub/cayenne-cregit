begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tutorial
operator|.
name|persistent
operator|.
name|client
operator|.
name|auto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|PersistentObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tutorial
operator|.
name|persistent
operator|.
name|client
operator|.
name|Painting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|PersistentObjectList
import|;
end_import

begin_comment
comment|/**  * A generated persistent class mapped as "Artist" Cayenne entity. It is a good idea to  * avoid changing this class manually, since it will be overwritten next time code is  * regenerated. If you need to make any customizations, put them in a subclass.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|_Artist
extends|extends
name|PersistentObject
block|{
specifier|public
specifier|static
specifier|final
name|Property
argument_list|<
name|LocalDate
argument_list|>
name|DATE_OF_BIRTH
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"dateOfBirth"
argument_list|,
name|LocalDate
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Property
argument_list|<
name|String
argument_list|>
name|NAME
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"name"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Property
argument_list|<
name|List
argument_list|<
name|Painting
argument_list|>
argument_list|>
name|PAINTINGS
init|=
name|Property
operator|.
name|create
argument_list|(
literal|"paintings"
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|LocalDate
name|dateOfBirth
decl_stmt|;
specifier|protected
name|String
name|name
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Painting
argument_list|>
name|paintings
decl_stmt|;
specifier|public
name|LocalDate
name|getDateOfBirth
parameter_list|()
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"dateOfBirth"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|dateOfBirth
return|;
block|}
specifier|public
name|void
name|setDateOfBirth
parameter_list|(
name|LocalDate
name|dateOfBirth
parameter_list|)
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"dateOfBirth"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Object
name|oldValue
init|=
name|this
operator|.
name|dateOfBirth
decl_stmt|;
comment|// notify objectContext about simple property change
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|propertyChanged
argument_list|(
name|this
argument_list|,
literal|"dateOfBirth"
argument_list|,
name|oldValue
argument_list|,
name|dateOfBirth
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|dateOfBirth
operator|=
name|dateOfBirth
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"name"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"name"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Object
name|oldValue
init|=
name|this
operator|.
name|name
decl_stmt|;
comment|// notify objectContext about simple property change
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|propertyChanged
argument_list|(
name|this
argument_list|,
literal|"name"
argument_list|,
name|oldValue
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Painting
argument_list|>
name|getPaintings
parameter_list|()
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"paintings"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|this
operator|.
name|paintings
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|paintings
operator|=
operator|new
name|PersistentObjectList
argument_list|(
name|this
argument_list|,
literal|"paintings"
argument_list|)
expr_stmt|;
block|}
return|return
name|paintings
return|;
block|}
specifier|public
name|void
name|addToPaintings
parameter_list|(
name|Painting
name|object
parameter_list|)
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"paintings"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|this
operator|.
name|paintings
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|paintings
operator|=
operator|new
name|PersistentObjectList
argument_list|(
name|this
argument_list|,
literal|"paintings"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|paintings
operator|.
name|add
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeFromPaintings
parameter_list|(
name|Painting
name|object
parameter_list|)
block|{
if|if
condition|(
name|objectContext
operator|!=
literal|null
condition|)
block|{
name|objectContext
operator|.
name|prepareForAccess
argument_list|(
name|this
argument_list|,
literal|"paintings"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|this
operator|.
name|paintings
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|paintings
operator|=
operator|new
name|PersistentObjectList
argument_list|(
name|this
argument_list|,
literal|"paintings"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|paintings
operator|.
name|remove
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

