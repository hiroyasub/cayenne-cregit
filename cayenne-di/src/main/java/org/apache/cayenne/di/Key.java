begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * An object that encapsulates a key used to store and lookup DI bindings. Key is made of  * a binding type and an optional binding name.  *   * @since 3.1  */
end_comment

begin_class
specifier|public
class|class
name|Key
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**      * @since 4.0      */
specifier|protected
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|typeLiteral
decl_stmt|;
specifier|protected
name|String
name|bindingName
decl_stmt|;
comment|/**      * Creates a key for a nameless binding of a given type.      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Key
argument_list|<
name|T
argument_list|>
name|get
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|new
name|Key
argument_list|<>
argument_list|(
name|TypeLiteral
operator|.
name|of
argument_list|(
name|type
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Creates a key for a named binding of a given type. 'bindingName' that is an empty      * String is treated the same way as a null 'bindingName'. In both cases a nameless      * binding key is created.      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Key
argument_list|<
name|T
argument_list|>
name|get
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|String
name|bindingName
parameter_list|)
block|{
return|return
operator|new
name|Key
argument_list|<>
argument_list|(
name|TypeLiteral
operator|.
name|of
argument_list|(
name|type
argument_list|)
argument_list|,
name|bindingName
argument_list|)
return|;
block|}
comment|/**      * @since 4.0      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Key
argument_list|<
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|getListOf
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|getListOf
argument_list|(
name|type
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * @since 4.0      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Key
argument_list|<
name|List
argument_list|<
name|T
argument_list|>
argument_list|>
name|getListOf
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|String
name|bindingName
parameter_list|)
block|{
return|return
operator|new
name|Key
argument_list|<>
argument_list|(
name|TypeLiteral
operator|.
name|listOf
argument_list|(
name|type
argument_list|)
argument_list|,
name|bindingName
argument_list|)
return|;
block|}
comment|/**      * @since 4.0      */
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Key
argument_list|<
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|getMapOf
parameter_list|(
name|Class
argument_list|<
name|K
argument_list|>
name|keyType
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|valueType
parameter_list|)
block|{
return|return
name|getMapOf
argument_list|(
name|keyType
argument_list|,
name|valueType
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * @since 4.0      */
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Key
argument_list|<
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|getMapOf
parameter_list|(
name|Class
argument_list|<
name|K
argument_list|>
name|keyType
parameter_list|,
name|Class
argument_list|<
name|V
argument_list|>
name|valueType
parameter_list|,
name|String
name|bindingName
parameter_list|)
block|{
return|return
operator|new
name|Key
argument_list|<>
argument_list|(
name|TypeLiteral
operator|.
name|mapOf
argument_list|(
name|keyType
argument_list|,
name|valueType
argument_list|)
argument_list|,
name|bindingName
argument_list|)
return|;
block|}
specifier|protected
name|Key
parameter_list|(
name|TypeLiteral
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|String
name|bindingName
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null key type"
argument_list|)
throw|;
block|}
name|this
operator|.
name|typeLiteral
operator|=
name|type
expr_stmt|;
comment|// empty non-null binding names are often passed from annotation defaults and are
comment|// treated as null
name|this
operator|.
name|bindingName
operator|=
name|bindingName
operator|!=
literal|null
operator|&&
name|bindingName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|bindingName
else|:
literal|null
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Class
argument_list|<
name|T
argument_list|>
name|getType
parameter_list|()
block|{
return|return
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|typeLiteral
operator|.
name|getType
argument_list|()
return|;
block|}
comment|/**      * Returns an optional name of the binding used to distinguish multiple bindings of      * the same object type.      */
specifier|public
name|String
name|getBindingName
parameter_list|()
block|{
return|return
name|bindingName
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|Key
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|Key
argument_list|<
name|?
argument_list|>
name|key
init|=
operator|(
name|Key
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
comment|// type is guaranteed to be not null, so skip null checking...
if|if
condition|(
operator|!
name|typeLiteral
operator|.
name|equals
argument_list|(
name|key
operator|.
name|typeLiteral
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// bindingName can be null, so take this into account
if|if
condition|(
name|bindingName
operator|!=
literal|null
condition|)
block|{
return|return
name|bindingName
operator|.
name|equals
argument_list|(
name|key
operator|.
name|bindingName
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|key
operator|.
name|bindingName
operator|==
literal|null
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hashCode
init|=
literal|407
operator|+
literal|11
operator|*
name|typeLiteral
operator|.
name|hashCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|bindingName
operator|!=
literal|null
condition|)
block|{
name|hashCode
operator|+=
name|bindingName
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"<BindingKey: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|typeLiteral
argument_list|)
expr_stmt|;
if|if
condition|(
name|bindingName
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", '"
argument_list|)
operator|.
name|append
argument_list|(
name|bindingName
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

