begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|DIRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Scope
import|;
end_import

begin_comment
comment|/**  * @since 3.1  */
end_comment

begin_class
class|class
name|DefaultMapBuilder
parameter_list|<
name|T
parameter_list|>
implements|implements
name|MapBuilder
argument_list|<
name|T
argument_list|>
block|{
specifier|private
name|DefaultInjector
name|injector
decl_stmt|;
specifier|private
name|Key
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
name|bindingKey
decl_stmt|;
name|DefaultMapBuilder
parameter_list|(
name|Key
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
name|bindingKey
parameter_list|,
name|DefaultInjector
name|injector
parameter_list|)
block|{
name|this
operator|.
name|injector
operator|=
name|injector
expr_stmt|;
name|this
operator|.
name|bindingKey
operator|=
name|bindingKey
expr_stmt|;
comment|// trigger initialization of the MapProvider right away, as we need to bind an
comment|// empty map even if the user never calls 'put'
name|getMapProvider
argument_list|()
expr_stmt|;
block|}
specifier|public
name|MapBuilder
argument_list|<
name|T
argument_list|>
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|interfaceType
parameter_list|)
throws|throws
name|DIRuntimeException
block|{
comment|// TODO: andrus 11/15/2009 - report overriding the key??
name|getMapProvider
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|injector
operator|.
name|getProvider
argument_list|(
name|interfaceType
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|MapBuilder
argument_list|<
name|T
argument_list|>
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|T
name|value
parameter_list|)
throws|throws
name|DIRuntimeException
block|{
name|Provider
argument_list|<
name|T
argument_list|>
name|provider0
init|=
operator|new
name|InstanceProvider
argument_list|<
name|T
argument_list|>
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|Provider
argument_list|<
name|T
argument_list|>
name|provider1
init|=
operator|new
name|FieldInjectingProvider
argument_list|<
name|T
argument_list|>
argument_list|(
name|provider0
argument_list|,
name|injector
argument_list|)
decl_stmt|;
comment|// TODO: andrus 11/15/2009 - report overriding the key??
name|getMapProvider
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|provider1
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|MapBuilder
argument_list|<
name|T
argument_list|>
name|putAll
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|map
parameter_list|)
throws|throws
name|DIRuntimeException
block|{
name|MapProvider
name|provider
init|=
name|getMapProvider
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Provider
argument_list|<
name|T
argument_list|>
name|provider0
init|=
operator|new
name|InstanceProvider
argument_list|<
name|T
argument_list|>
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Provider
argument_list|<
name|T
argument_list|>
name|provider1
init|=
operator|new
name|FieldInjectingProvider
argument_list|<
name|T
argument_list|>
argument_list|(
name|provider0
argument_list|,
name|injector
argument_list|)
decl_stmt|;
name|provider
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|provider1
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|private
name|MapProvider
name|getMapProvider
parameter_list|()
block|{
name|MapProvider
name|provider
init|=
literal|null
decl_stmt|;
name|Binding
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|>
name|binding
init|=
name|injector
operator|.
name|getBinding
argument_list|(
name|bindingKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|binding
operator|==
literal|null
condition|)
block|{
name|provider
operator|=
operator|new
name|MapProvider
argument_list|()
expr_stmt|;
name|injector
operator|.
name|putBinding
argument_list|(
name|bindingKey
argument_list|,
name|provider
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|provider
operator|=
operator|(
name|MapProvider
operator|)
name|binding
operator|.
name|getOriginal
argument_list|()
expr_stmt|;
block|}
return|return
name|provider
return|;
block|}
specifier|public
name|void
name|in
parameter_list|(
name|Scope
name|scope
parameter_list|)
block|{
name|injector
operator|.
name|changeBindingScope
argument_list|(
name|bindingKey
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

