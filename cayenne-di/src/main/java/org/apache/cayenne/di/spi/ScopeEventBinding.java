begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|DIRuntimeException
import|;
end_import

begin_comment
comment|/**  * A class that wraps an annotated method call of an object, passing it DI scope events.  *   * @since 3.1  */
end_comment

begin_class
specifier|public
class|class
name|ScopeEventBinding
block|{
specifier|private
name|WeakReference
argument_list|<
name|Object
argument_list|>
name|objectReference
decl_stmt|;
specifier|private
name|Method
name|eventHandlerMethod
decl_stmt|;
specifier|private
name|int
name|argWidth
decl_stmt|;
specifier|public
name|ScopeEventBinding
parameter_list|(
name|Object
name|object
parameter_list|,
name|Method
name|eventHandlerMethod
parameter_list|)
block|{
comment|// store weak references for objects to avoid retaining them when they go out of
comment|// scope
name|this
operator|.
name|objectReference
operator|=
operator|new
name|WeakReference
argument_list|<
name|Object
argument_list|>
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|this
operator|.
name|eventHandlerMethod
operator|=
name|eventHandlerMethod
expr_stmt|;
name|this
operator|.
name|argWidth
operator|=
name|eventHandlerMethod
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
expr_stmt|;
comment|// allow public methods of non-public classes to be annotated
name|eventHandlerMethod
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|objectReference
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|onScopeEvent
parameter_list|(
name|Object
modifier|...
name|eventArgs
parameter_list|)
block|{
name|Object
name|object
init|=
name|objectReference
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|eventHandlerMethod
operator|.
name|invoke
argument_list|(
name|object
argument_list|,
name|invocationArguments
argument_list|(
name|eventArgs
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DIRuntimeException
argument_list|(
literal|"Error invoking event method %s"
argument_list|,
name|e
argument_list|,
name|eventHandlerMethod
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|Object
index|[]
name|invocationArguments
parameter_list|(
name|Object
index|[]
name|eventArgs
parameter_list|)
block|{
name|int
name|eventArgWidth
init|=
operator|(
name|eventArgs
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|eventArgs
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|argWidth
operator|!=
name|eventArgWidth
condition|)
block|{
throw|throw
operator|new
name|DIRuntimeException
argument_list|(
literal|"Event argument list size (%d) is different "
operator|+
literal|"from the handler method argument list size (%d)"
argument_list|,
name|eventArgWidth
argument_list|,
name|argWidth
argument_list|)
throw|;
block|}
return|return
name|eventArgs
return|;
block|}
block|}
end_class

end_unit

