begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|DIRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceLoader
import|;
end_import

begin_comment
comment|/**  * Auto-loads DI modules using ServiceLoader. To make a module auto-loadable, you will need to ship the jar with a file  * "META-INF/services/&lt;full.provider.class.name&gt;" that contains provider implementation for the module in  * question.  *  * @see ModuleProvider  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|ModuleLoader
block|{
comment|/**      * Auto-loads all modules declared on classpath. Modules are loaded from the SPI declarations stored in      * "META-INF/services/&lt;full.provider.class.name&gt;", and then sorted in the order of override dependency.      *      * @return a sorted collection of auto-loadable modules.      * @throws DIRuntimeException if auto-loaded modules have circular override dependencies.      */
specifier|public
name|List
argument_list|<
name|Module
argument_list|>
name|load
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ModuleProvider
argument_list|>
name|providerClass
parameter_list|)
block|{
comment|// map providers by class
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|,
name|ModuleProvider
argument_list|>
name|providers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ModuleProvider
name|provider
range|:
name|ServiceLoader
operator|.
name|load
argument_list|(
name|providerClass
argument_list|)
control|)
block|{
name|ModuleProvider
name|existing
init|=
name|providers
operator|.
name|put
argument_list|(
name|provider
operator|.
name|moduleType
argument_list|()
argument_list|,
name|provider
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
operator|&&
operator|!
name|existing
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|provider
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DIRuntimeException
argument_list|(
literal|"More than one provider for module type '%s': %s and %s"
argument_list|,
name|provider
operator|.
name|moduleType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|existing
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|provider
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|providers
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|// do override dependency sort...
name|DIGraph
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|overrideGraph
init|=
operator|new
name|DIGraph
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|,
name|ModuleProvider
argument_list|>
name|e
range|:
name|providers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|overrideGraph
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|overridden
range|:
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|overrides
argument_list|()
control|)
block|{
name|overrideGraph
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|overridden
argument_list|)
expr_stmt|;
block|}
block|}
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|moduleTypes
init|=
name|overrideGraph
operator|.
name|topSort
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Module
argument_list|>
name|modules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|moduleTypes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|type
range|:
name|moduleTypes
control|)
block|{
name|modules
operator|.
name|add
argument_list|(
name|providers
operator|.
name|get
argument_list|(
name|type
argument_list|)
operator|.
name|module
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|modules
return|;
block|}
block|}
end_class

end_unit

