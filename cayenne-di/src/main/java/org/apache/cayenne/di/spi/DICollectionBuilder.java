begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      https://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|DIRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Scope
import|;
end_import

begin_comment
comment|/**  * A superclass of DI List and Map builders.  *  * @param<K> DI key type.  * @param<E> Collection element type.  * @since 4.0  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|DICollectionBuilder
parameter_list|<
name|K
parameter_list|,
name|E
parameter_list|>
block|{
specifier|protected
name|DefaultInjector
name|injector
decl_stmt|;
specifier|protected
name|Key
argument_list|<
name|K
argument_list|>
name|bindingKey
decl_stmt|;
specifier|public
name|DICollectionBuilder
parameter_list|(
name|Key
argument_list|<
name|K
argument_list|>
name|bindingKey
parameter_list|,
name|DefaultInjector
name|injector
parameter_list|)
block|{
name|this
operator|.
name|injector
operator|=
name|injector
expr_stmt|;
name|this
operator|.
name|bindingKey
operator|=
name|bindingKey
expr_stmt|;
block|}
specifier|protected
name|Provider
argument_list|<
name|E
argument_list|>
name|createInstanceProvider
parameter_list|(
name|E
name|value
parameter_list|)
block|{
name|Provider
argument_list|<
name|E
argument_list|>
name|provider0
init|=
operator|new
name|InstanceProvider
argument_list|<>
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|FieldInjectingProvider
argument_list|<>
argument_list|(
name|provider0
argument_list|,
name|injector
argument_list|)
return|;
block|}
specifier|protected
parameter_list|<
name|SubT
extends|extends
name|E
parameter_list|>
name|Provider
argument_list|<
name|SubT
argument_list|>
name|createTypeProvider
parameter_list|(
specifier|final
name|Class
argument_list|<
name|SubT
argument_list|>
name|interfaceType
parameter_list|)
throws|throws
name|DIRuntimeException
block|{
comment|// Create deferred provider to prevent caching the intermediate provider from the Injector.
comment|// The actual provider may get overridden after list builder is created.
return|return
operator|new
name|Provider
argument_list|<
name|SubT
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SubT
name|get
parameter_list|()
throws|throws
name|DIRuntimeException
block|{
return|return
name|findOrCreateBinding
argument_list|(
name|interfaceType
argument_list|)
operator|.
name|getScoped
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|protected
parameter_list|<
name|SubT
extends|extends
name|E
parameter_list|>
name|Binding
argument_list|<
name|SubT
argument_list|>
name|findOrCreateBinding
parameter_list|(
name|Class
argument_list|<
name|SubT
argument_list|>
name|interfaceType
parameter_list|)
block|{
name|Key
argument_list|<
name|SubT
argument_list|>
name|key
init|=
name|Key
operator|.
name|get
argument_list|(
name|interfaceType
argument_list|)
decl_stmt|;
name|Binding
argument_list|<
name|SubT
argument_list|>
name|binding
init|=
name|injector
operator|.
name|getBinding
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|binding
operator|==
literal|null
condition|)
block|{
name|Provider
argument_list|<
name|SubT
argument_list|>
name|provider0
init|=
operator|new
name|ConstructorInjectingProvider
argument_list|<>
argument_list|(
name|interfaceType
argument_list|,
name|injector
argument_list|)
decl_stmt|;
name|Provider
argument_list|<
name|SubT
argument_list|>
name|provider1
init|=
operator|new
name|FieldInjectingProvider
argument_list|<>
argument_list|(
name|provider0
argument_list|,
name|injector
argument_list|)
decl_stmt|;
name|injector
operator|.
name|putBinding
argument_list|(
name|key
argument_list|,
name|provider1
argument_list|)
expr_stmt|;
name|binding
operator|=
name|injector
operator|.
name|getBinding
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|binding
return|;
block|}
specifier|public
name|void
name|in
parameter_list|(
name|Scope
name|scope
parameter_list|)
block|{
name|injector
operator|.
name|changeBindingScope
argument_list|(
name|bindingKey
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since 4.1      */
specifier|public
name|void
name|withoutScope
parameter_list|()
block|{
name|in
argument_list|(
name|injector
operator|.
name|getNoScope
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

