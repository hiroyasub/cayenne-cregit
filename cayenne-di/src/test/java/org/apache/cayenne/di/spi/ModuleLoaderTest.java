begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Binder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|DIBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|ModuleLoaderTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testLoad
parameter_list|()
block|{
name|List
argument_list|<
name|Module
argument_list|>
name|modules
init|=
operator|new
name|ModuleLoader
argument_list|()
operator|.
name|load
argument_list|(
name|ModuleProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|modules
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|modules
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|modules
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Module3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|modules
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|modules
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|Module4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|modules
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|modules
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|instanceof
name|Module2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|modules
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|modules
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|instanceof
name|Module1
argument_list|)
expr_stmt|;
name|Injector
name|i
init|=
name|DIBootstrap
operator|.
name|createInjector
argument_list|(
name|modules
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|i
operator|.
name|getInstance
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|56
argument_list|)
argument_list|,
name|i
operator|.
name|getInstance
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadCustom
parameter_list|()
block|{
name|List
argument_list|<
name|Module
argument_list|>
name|modules
init|=
operator|new
name|ModuleLoader
argument_list|()
operator|.
name|load
argument_list|(
name|CustomModuleProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|modules
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|modules
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|modules
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Module5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|modules
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|modules
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|Module6
argument_list|)
expr_stmt|;
name|Injector
name|i
init|=
name|DIBootstrap
operator|.
name|createInjector
argument_list|(
name|modules
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|66
argument_list|)
argument_list|,
name|i
operator|.
name|getInstance
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|Module1
implements|implements
name|Module
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Module2
implements|implements
name|Module
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Module3
implements|implements
name|Module
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
literal|66
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Module4
implements|implements
name|Module
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
literal|56
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Module5
implements|implements
name|Module
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
literal|56
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Module6
implements|implements
name|Module
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
name|binder
operator|.
name|bind
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
literal|66
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ModuleProvider1
implements|implements
name|ModuleProvider
block|{
annotation|@
name|Override
specifier|public
name|Module
name|module
parameter_list|()
block|{
return|return
operator|new
name|Module1
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|moduleType
parameter_list|()
block|{
return|return
name|Module1
operator|.
name|class
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|overrides
parameter_list|()
block|{
name|Collection
name|c
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|Module2
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|c
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ModuleProvider2
implements|implements
name|ModuleProvider
block|{
annotation|@
name|Override
specifier|public
name|Module
name|module
parameter_list|()
block|{
return|return
operator|new
name|Module2
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|moduleType
parameter_list|()
block|{
return|return
name|Module2
operator|.
name|class
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|overrides
parameter_list|()
block|{
name|Collection
name|c
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|Module4
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|c
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ModuleProvider3
implements|implements
name|ModuleProvider
block|{
annotation|@
name|Override
specifier|public
name|Module
name|module
parameter_list|()
block|{
return|return
operator|new
name|Module3
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|moduleType
parameter_list|()
block|{
return|return
name|Module3
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|overrides
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ModuleProvider4
implements|implements
name|ModuleProvider
block|{
annotation|@
name|Override
specifier|public
name|Module
name|module
parameter_list|()
block|{
return|return
operator|new
name|Module4
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|moduleType
parameter_list|()
block|{
return|return
name|Module4
operator|.
name|class
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|overrides
parameter_list|()
block|{
name|Collection
name|c
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|Module3
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|c
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ModuleProvider5
implements|implements
name|CustomModuleProvider
block|{
annotation|@
name|Override
specifier|public
name|Module
name|module
parameter_list|()
block|{
return|return
operator|new
name|Module5
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|moduleType
parameter_list|()
block|{
return|return
name|Module5
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|overrides
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ModuleProvider6
implements|implements
name|CustomModuleProvider
block|{
annotation|@
name|Override
specifier|public
name|Module
name|module
parameter_list|()
block|{
return|return
operator|new
name|Module6
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
name|moduleType
parameter_list|()
block|{
return|return
name|Module6
operator|.
name|class
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Module
argument_list|>
argument_list|>
name|overrides
parameter_list|()
block|{
name|Collection
name|c
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|Module5
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|c
return|;
block|}
block|}
block|}
end_class

end_unit

