begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|KeyTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|Key
argument_list|<
name|String
argument_list|>
name|key1
init|=
name|Key
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Key
argument_list|<
name|String
argument_list|>
name|key2
init|=
name|Key
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Key
argument_list|<
name|Integer
argument_list|>
name|key3
init|=
name|Key
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Key
argument_list|<
name|Integer
argument_list|>
name|key31
init|=
name|Key
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Key
argument_list|<
name|Integer
argument_list|>
name|key4
init|=
name|Key
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Key
argument_list|<
name|Integer
argument_list|>
name|key5
init|=
name|Key
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Key
argument_list|<
name|Integer
argument_list|>
name|key6
init|=
name|Key
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|Key
argument_list|<
name|String
argument_list|>
name|key7
init|=
name|Key
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|key1
operator|.
name|equals
argument_list|(
name|key2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key1
operator|.
name|equals
argument_list|(
name|key3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|key3
operator|.
name|equals
argument_list|(
name|key31
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|key31
operator|.
name|equals
argument_list|(
name|key3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key3
operator|.
name|equals
argument_list|(
name|key4
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key4
operator|.
name|equals
argument_list|(
name|key3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|key4
operator|.
name|equals
argument_list|(
name|key5
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|key5
operator|.
name|equals
argument_list|(
name|key4
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key5
operator|.
name|equals
argument_list|(
name|key6
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key6
operator|.
name|equals
argument_list|(
name|key5
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key4
operator|.
name|equals
argument_list|(
name|key7
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key7
operator|.
name|equals
argument_list|(
name|key4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListKeysEquals
parameter_list|()
block|{
name|Key
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|key1
init|=
name|Key
operator|.
name|getListOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Key
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|key2
init|=
name|Key
operator|.
name|getListOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Key
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|key3
init|=
name|Key
operator|.
name|getListOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Key
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|key4
init|=
name|Key
operator|.
name|getListOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|key1
argument_list|,
name|key2
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|key3
argument_list|,
name|key4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key1
argument_list|,
name|key3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key1
argument_list|,
name|key1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key2
argument_list|,
name|key4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key4
argument_list|,
name|key4
argument_list|)
expr_stmt|;
comment|// Name is suppressing generic type, to keep backward compatibility.
name|Key
name|key5
init|=
name|Key
operator|.
name|getListOf
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
decl_stmt|;
name|Key
name|key6
init|=
name|Key
operator|.
name|getListOf
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"abc"
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|key5
argument_list|,
name|key6
argument_list|)
expr_stmt|;
name|Key
name|key7
init|=
name|Key
operator|.
name|getListOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
decl_stmt|;
name|Key
name|key8
init|=
name|Key
operator|.
name|getListOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"abc"
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|key7
argument_list|,
name|key8
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|key5
argument_list|,
name|key7
argument_list|)
expr_stmt|;
name|Key
name|key9
init|=
name|Key
operator|.
name|get
argument_list|(
name|List
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|key7
argument_list|,
name|key9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCode
parameter_list|()
block|{
name|Key
argument_list|<
name|String
argument_list|>
name|key1
init|=
name|Key
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Key
argument_list|<
name|String
argument_list|>
name|key2
init|=
name|Key
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Key
argument_list|<
name|Integer
argument_list|>
name|key3
init|=
name|Key
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Key
argument_list|<
name|Integer
argument_list|>
name|key4
init|=
name|Key
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Key
argument_list|<
name|Integer
argument_list|>
name|key5
init|=
name|Key
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|Key
argument_list|<
name|Integer
argument_list|>
name|key6
init|=
name|Key
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|Key
argument_list|<
name|String
argument_list|>
name|key7
init|=
name|Key
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"generated different hashcode on second inocation"
argument_list|,
name|key1
operator|.
name|hashCode
argument_list|()
operator|==
name|key1
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|key1
operator|.
name|hashCode
argument_list|()
operator|==
name|key2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|key4
operator|.
name|hashCode
argument_list|()
operator|==
name|key5
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// these are not technically required for hashCode() validity, but as things stand
comment|// now, these tests will all succeed.
name|assertFalse
argument_list|(
name|key1
operator|.
name|hashCode
argument_list|()
operator|==
name|key3
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key4
operator|.
name|hashCode
argument_list|()
operator|==
name|key3
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key5
operator|.
name|hashCode
argument_list|()
operator|==
name|key6
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|key7
operator|.
name|hashCode
argument_list|()
operator|==
name|key4
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"<BindingKey: java.lang.String>"
argument_list|,
name|Key
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<BindingKey: java.lang.String, 'xyz'>"
argument_list|,
name|Key
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<BindingKey: java.util.List[java.lang.String]>"
argument_list|,
name|Key
operator|.
name|getListOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<BindingKey: java.util.List[java.lang.String], 'xyz'>"
argument_list|,
name|Key
operator|.
name|getListOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

