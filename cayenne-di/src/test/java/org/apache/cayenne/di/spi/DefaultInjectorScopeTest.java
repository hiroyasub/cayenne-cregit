begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|BeforeScopeEnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation1_EventAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation1_Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockInterface1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultInjectorScopeTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testDefaultScope_IsSingleton
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1
operator|.
name|class
argument_list|)
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface1
name|instance1
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|MockInterface1
name|instance2
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|MockInterface1
name|instance3
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|instance1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|instance2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|instance3
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|instance1
argument_list|,
name|instance2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|instance2
argument_list|,
name|instance3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoScope
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1
operator|.
name|class
argument_list|)
operator|.
name|withoutScope
argument_list|()
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface1
name|instance1
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|MockInterface1
name|instance2
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|MockInterface1
name|instance3
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|instance1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|instance2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|instance3
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|instance1
argument_list|,
name|instance2
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|instance2
argument_list|,
name|instance3
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|instance3
argument_list|,
name|instance1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingletonScope
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1
operator|.
name|class
argument_list|)
operator|.
name|inSingletonScope
argument_list|()
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface1
name|instance1
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|MockInterface1
name|instance2
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|MockInterface1
name|instance3
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|instance1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|instance2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|instance3
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|instance1
argument_list|,
name|instance2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|instance2
argument_list|,
name|instance3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingletonScope_AnnotatedEvents
parameter_list|()
block|{
name|MockImplementation1_EventAnnotations
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Module
name|module
init|=
name|binder
lambda|->
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1_EventAnnotations
operator|.
name|class
argument_list|)
operator|.
name|inSingletonScope
argument_list|()
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface1
name|instance1
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"XuI"
argument_list|,
name|instance1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MockImplementation1_EventAnnotations
operator|.
name|shutdown1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MockImplementation1_EventAnnotations
operator|.
name|shutdown2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MockImplementation1_EventAnnotations
operator|.
name|shutdown3
argument_list|)
expr_stmt|;
name|injector
operator|.
name|getSingletonScope
argument_list|()
operator|.
name|postScopeEvent
argument_list|(
name|BeforeScopeEnd
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MockImplementation1_EventAnnotations
operator|.
name|shutdown1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MockImplementation1_EventAnnotations
operator|.
name|shutdown2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MockImplementation1_EventAnnotations
operator|.
name|shutdown3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingletonScope_WithProvider
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|toProvider
argument_list|(
name|MockImplementation1_Provider
operator|.
name|class
argument_list|)
operator|.
name|inSingletonScope
argument_list|()
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface1
name|instance1
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|MockInterface1
name|instance2
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|MockInterface1
name|instance3
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|instance1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|instance2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|instance3
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|instance1
argument_list|,
name|instance2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|instance2
argument_list|,
name|instance3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoScope_WithProvider
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|toProvider
argument_list|(
name|MockImplementation1_Provider
operator|.
name|class
argument_list|)
operator|.
name|withoutScope
argument_list|()
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface1
name|instance1
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|MockInterface1
name|instance2
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|MockInterface1
name|instance3
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|instance1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|instance2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|instance3
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|instance1
argument_list|,
name|instance2
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|instance2
argument_list|,
name|instance3
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

