begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|DIRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation1Alt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation1Alt2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation1_ListConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation1_ListConfigurationMock5
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation1_MapConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation1_MapWithWildcards
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation1_WithInjector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation2Sub1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation2_ConstructorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation2_ListConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation2_Named
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation4Alt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation4Alt2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockImplementation5
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockInterface1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockInterface2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockInterface3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockInterface4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|mock
operator|.
name|MockInterface5
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultInjectorInjectionTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testFieldInjection
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface2
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation2
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface2
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface2
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"altered_MyName"
argument_list|,
name|service
operator|.
name|getAlteredName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFieldInjection_Named
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|,
literal|"one"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1Alt
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|,
literal|"two"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1Alt2
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface2
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation2_Named
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface2
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface2
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"altered_alt"
argument_list|,
name|service
operator|.
name|getAlteredName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFieldInjectionSuperclass
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface2
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation2Sub1
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface3
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation3
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface2
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface2
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"altered_MyName:XName"
argument_list|,
name|service
operator|.
name|getAlteredName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConstructorInjection
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface4
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation4
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface4
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface4
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"constructor_MyName"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConstructorInjection_Named
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|,
literal|"one"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1Alt
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|,
literal|"two"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1Alt2
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface4
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation4Alt
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface4
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface4
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"constructor_alt2"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConstructorInjection_Named_Mixed
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|,
literal|"one"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1Alt
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|,
literal|"two"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1Alt2
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface3
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation3
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface4
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation4Alt2
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface4
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface4
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"constructor_alt2_XName"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProviderInjection_Constructor
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface2
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation2_ConstructorProvider
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface2
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface2
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"altered_MyName"
argument_list|,
name|service
operator|.
name|getAlteredName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapInjection_Empty
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1_MapConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// empty map must be still bound
name|binder
operator|.
name|bindMap
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface1
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|void
name|mapInjectionDeprecated
parameter_list|()
block|{
specifier|final
name|String
name|bindingName
init|=
literal|"xyz"
decl_stmt|;
specifier|final
name|Object
name|test
init|=
literal|"test_map"
decl_stmt|;
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1_MapConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bindMap
argument_list|(
name|bindingName
argument_list|)
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
name|test
argument_list|)
operator|.
name|put
argument_list|(
literal|"abc"
argument_list|,
literal|"def"
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
comment|// Even with old version of binding we should use new version of key...
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|Key
operator|.
name|getMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|bindingName
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|test
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Old version of getting by key will fail...
name|injector
operator|.
name|getInstance
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|Map
operator|.
name|class
argument_list|,
name|bindingName
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"DI Exception should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DIRuntimeException
name|ignored
parameter_list|)
block|{
block|}
comment|// Check that injection is working
name|MockInterface1
name|interface1
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|interface1
argument_list|,
name|instanceOf
argument_list|(
name|MockImplementation1_MapConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|";abc=def;test=test_map"
argument_list|,
name|interface1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapInjection
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1_MapConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bindMap
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|put
argument_list|(
literal|"x"
argument_list|,
literal|"xvalue"
argument_list|)
operator|.
name|put
argument_list|(
literal|"y"
argument_list|,
literal|"yvalue"
argument_list|)
operator|.
name|put
argument_list|(
literal|"x"
argument_list|,
literal|"xvalue1"
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface1
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|";x=xvalue1;y=yvalue"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mapWithWildcardInjection
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1_MapWithWildcards
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bindMap
argument_list|(
name|Class
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"x"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"y"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"z"
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
comment|// This is example of how to deal with wildcards:
comment|// to handle it nicer we need to use some hacks with anonymous classes:
comment|// Key.get(new TypeLiteral<String, Class<?>>(){});
name|Map
name|mapUntyped
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|Key
operator|.
name|getMapOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Class
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
operator|)
name|mapUntyped
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|MockInterface1
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"map:3"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapInjection_Resumed
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1_MapConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// bind 1
name|binder
operator|.
name|bindMap
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|put
argument_list|(
literal|"x"
argument_list|,
literal|"xvalue"
argument_list|)
operator|.
name|put
argument_list|(
literal|"y"
argument_list|,
literal|"yvalue"
argument_list|)
expr_stmt|;
comment|// second binding attempt to the same map...
name|binder
operator|.
name|bindMap
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|put
argument_list|(
literal|"z"
argument_list|,
literal|"zvalue"
argument_list|)
operator|.
name|put
argument_list|(
literal|"x"
argument_list|,
literal|"xvalue1"
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface1
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|";x=xvalue1;y=yvalue;z=zvalue"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapInjection_OverrideExplicitlyBoundType
parameter_list|()
block|{
name|Module
name|m1
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface5
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation5
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1_MapConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bindMap
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
name|MockInterface5
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|Module
name|m2
init|=
name|binder
lambda|->
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface5
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|MockInterface5
argument_list|()
block|{
block_content|@Override             public String toString(
init|)
block|{
return|return
literal|"abc"
return|;
block|}
block|}
block|)
class|;
end_class

begin_decl_stmt
name|MockInterface1
name|service
init|=
operator|new
name|DefaultInjector
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
literal|"Map element was not overridden in submodule"
argument_list|,
literal|";a=abc"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      @
name|Test
specifier|public
name|void
name|testMapInjection_OverrideImplicitlyBoundType
parameter_list|()
block|{
name|Module
name|m1
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1_MapConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bindMap
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
name|MockImplementation5
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|Module
name|m2
init|=
name|binder
lambda|->
name|binder
operator|.
name|bind
argument_list|(
name|MockImplementation5
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|MockImplementation5
argument_list|()
block|{
block_content|@Override             public String toString(
init|)
block|{
return|return
literal|"abc"
return|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|MockInterface1
name|service
init|=
operator|new
name|DefaultInjector
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
literal|"Map element was not overridden in submodule"
argument_list|,
literal|";a=abc"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      @
name|Test
specifier|public
name|void
name|testListInjection_addValue
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1_ListConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bindList
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|add
argument_list|(
literal|"xvalue"
argument_list|)
operator|.
name|add
argument_list|(
literal|"yvalue"
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface1
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|";xvalue;yvalue"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testListInjection_addOrderedValues
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1_ListConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface5
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation5
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bindList
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|add
argument_list|(
literal|"1value"
argument_list|)
operator|.
name|add
argument_list|(
literal|"2value"
argument_list|)
operator|.
name|addAfter
argument_list|(
literal|"5value"
argument_list|,
name|MockInterface5
operator|.
name|class
argument_list|)
operator|.
name|insertBefore
argument_list|(
literal|"3value"
argument_list|,
name|MockInterface5
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|MockInterface5
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface1
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|";1value;2value;3value;xyz;5value"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testListInjection_addAllValues
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1_ListConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Object
argument_list|>
name|firstList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|firstList
operator|.
name|add
argument_list|(
literal|"1value"
argument_list|)
expr_stmt|;
name|firstList
operator|.
name|add
argument_list|(
literal|"2value"
argument_list|)
expr_stmt|;
name|firstList
operator|.
name|add
argument_list|(
literal|"3value"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Object
argument_list|>
name|secondList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|secondList
operator|.
name|add
argument_list|(
literal|"6value"
argument_list|)
expr_stmt|;
name|secondList
operator|.
name|add
argument_list|(
literal|"7value"
argument_list|)
expr_stmt|;
name|secondList
operator|.
name|add
argument_list|(
literal|"8value"
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface5
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation5
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bindList
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|insertAllBefore
argument_list|(
name|firstList
argument_list|,
name|MockInterface5
operator|.
name|class
argument_list|)
operator|.
name|addAllAfter
argument_list|(
name|secondList
argument_list|,
name|MockInterface5
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
literal|"5value"
argument_list|)
operator|.
name|add
argument_list|(
name|MockInterface5
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface1
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|";1value;2value;3value;xyz;6value;7value;8value;5value"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testListInjection_addType
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface5
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation5
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1_ListConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bindList
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|add
argument_list|(
name|MockInterface5
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
literal|"yvalue"
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface1
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|";xyz;yvalue"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testListInjection_addOrderedTypes
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1_ListConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface5
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation5
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bindList
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|add
argument_list|(
literal|"1value"
argument_list|)
operator|.
name|insertBefore
argument_list|(
literal|"5value"
argument_list|,
name|MockInterface5
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
literal|"2value"
argument_list|)
operator|.
name|addAfter
argument_list|(
literal|"6value"
argument_list|,
name|MockInterface5
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
literal|"3value"
argument_list|)
operator|.
name|add
argument_list|(
name|MockInterface5
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface1
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|";1value;2value;5value;xyz;6value;3value"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testListInjection_addTypeWithBinding
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1_ListConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bindList
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|add
argument_list|(
name|MockImplementation5
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
literal|"yvalue"
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface1
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|";xyz;yvalue"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testListInjection_empty
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1_ListConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bindList
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface1
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testListInjection_resumed
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1_ListConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bindList
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|add
argument_list|(
literal|"xvalue"
argument_list|)
operator|.
name|add
argument_list|(
literal|"yvalue"
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bindList
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|add
argument_list|(
literal|"avalue"
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface1
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|";xvalue;yvalue;avalue"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testTypedListInjection
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1_ListConfigurationMock5
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface2
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation2_ListConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Bind list for MockImplementation2_ListConfiguration
name|binder
operator|.
name|bindList
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|add
argument_list|(
literal|"xvalue"
argument_list|)
operator|.
name|add
argument_list|(
literal|"yvalue"
argument_list|)
operator|.
name|add
argument_list|(
name|MockImplementation5
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Bind list for MockImplementation1_ListConfigurationMock5
name|binder
operator|.
name|bindList
argument_list|(
name|MockInterface5
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|MockImplementation5
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|MockInterface5
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"abc"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bindList
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
literal|"avalue"
argument_list|)
operator|.
name|add
argument_list|(
literal|"bvalue"
argument_list|)
operator|.
name|add
argument_list|(
name|MockImplementation5
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Add to list for MockImplementation1_ListConfigurationMock5
name|binder
operator|.
name|bindList
argument_list|(
name|MockInterface5
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|MockInterface5
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"cde"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Create named list for MockInterface5
name|binder
operator|.
name|bindList
argument_list|(
name|MockInterface5
operator|.
name|class
argument_list|,
literal|"another_binding"
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|MockInterface5
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"fgh"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface1
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|";xyz;abc;cde"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|MockInterface2
name|service2
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface2
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service2
operator|instanceof
name|MockImplementation2_ListConfiguration
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|";xvalue;yvalue;xyz"
argument_list|,
name|service2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testListInjection_OverrideExplicitlyBoundType
parameter_list|()
block|{
name|Module
name|m1
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface5
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation5
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1_ListConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bindList
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|add
argument_list|(
name|MockInterface5
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|Module
name|m2
init|=
name|binder
lambda|->
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface5
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|MockInterface5
argument_list|()
block|{
block_content|@Override             public String toString(
init|)
block|{
return|return
literal|"abc"
return|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|MockInterface1
name|service
init|=
operator|new
name|DefaultInjector
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
literal|"List element was not overridden in submodule"
argument_list|,
literal|";abc"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      @
name|Test
specifier|public
name|void
name|testListInjection_OverrideImplicitlyBoundType
parameter_list|()
block|{
name|Module
name|m1
init|=
name|binder
lambda|->
block|{
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1_ListConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|binder
operator|.
name|bindList
argument_list|(
name|Object
operator|.
name|class
argument_list|,
literal|"xyz"
argument_list|)
operator|.
name|add
argument_list|(
name|MockImplementation5
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|Module
name|m2
init|=
name|binder
lambda|->
name|binder
operator|.
name|bind
argument_list|(
name|MockImplementation5
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|MockImplementation5
argument_list|()
block|{
block_content|@Override             public String toString(
init|)
block|{
return|return
literal|"abc"
return|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|MockInterface1
name|service
init|=
operator|new
name|DefaultInjector
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
literal|"List element was not overridden in submodule"
argument_list|,
literal|";abc"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}       @
name|Test
specifier|public
name|void
name|testInjectorInjection
parameter_list|()
block|{
name|Module
name|module
init|=
name|binder
lambda|->
name|binder
operator|.
name|bind
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MockImplementation1_WithInjector
operator|.
name|class
argument_list|)
decl_stmt|;
name|DefaultInjector
name|injector
init|=
operator|new
name|DefaultInjector
argument_list|(
name|module
argument_list|)
decl_stmt|;
name|MockInterface1
name|service
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MockInterface1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"injector_not_null"
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

