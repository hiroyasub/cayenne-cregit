begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|extension
operator|.
name|info
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
operator|.
name|DataChannelMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
operator|.
name|DataMapHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
operator|.
name|DbEntityHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
operator|.
name|DbRelationshipHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
operator|.
name|EmbeddableHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
operator|.
name|NamespaceAwareNestedTagHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
operator|.
name|ObjEntityHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
operator|.
name|ObjRelationshipHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
operator|.
name|ProcedureHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
operator|.
name|QueryDescriptorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
class|class
name|PropertyHandler
extends|extends
name|NamespaceAwareNestedTagHandler
block|{
specifier|static
specifier|final
name|String
name|PROPERTY_TAG
init|=
literal|"property"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PropertyHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DataChannelMetaData
name|metaData
decl_stmt|;
name|PropertyHandler
parameter_list|(
name|NamespaceAwareNestedTagHandler
name|parentHandler
parameter_list|,
name|DataChannelMetaData
name|metaData
parameter_list|)
block|{
name|super
argument_list|(
name|parentHandler
argument_list|)
expr_stmt|;
name|setTargetNamespace
argument_list|(
name|InfoExtension
operator|.
name|NAMESPACE
argument_list|)
expr_stmt|;
name|this
operator|.
name|metaData
operator|=
name|metaData
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|processElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
switch|switch
condition|(
name|localName
condition|)
block|{
case|case
name|PROPERTY_TAG
case|:
name|ConfigurationNode
name|parentObject
init|=
name|getParentObject
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentObject
operator|!=
literal|null
condition|)
block|{
name|ObjectInfo
name|info
init|=
name|metaData
operator|.
name|get
argument_list|(
name|parentObject
argument_list|,
name|ObjectInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|info
operator|=
operator|new
name|ObjectInfo
argument_list|()
expr_stmt|;
name|metaData
operator|.
name|add
argument_list|(
name|parentObject
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|String
name|oldValue
init|=
name|info
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Duplicated property {} for object {}"
argument_list|,
name|name
argument_list|,
name|parentObject
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ContentHandler
name|createChildTagHandler
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
block|{
return|return
name|super
operator|.
name|createChildTagHandler
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|,
name|attributes
argument_list|)
return|;
block|}
specifier|private
name|ConfigurationNode
name|getParentObject
parameter_list|()
block|{
if|if
condition|(
name|parentHandler
operator|instanceof
name|DataMapHandler
condition|)
block|{
return|return
operator|(
operator|(
name|DataMapHandler
operator|)
name|parentHandler
operator|)
operator|.
name|getDataMap
argument_list|()
return|;
block|}
if|else if
condition|(
name|parentHandler
operator|instanceof
name|DbEntityHandler
condition|)
block|{
return|return
operator|(
operator|(
name|DbEntityHandler
operator|)
name|parentHandler
operator|)
operator|.
name|getEntity
argument_list|()
return|;
block|}
if|else if
condition|(
name|parentHandler
operator|instanceof
name|ObjEntityHandler
condition|)
block|{
return|return
operator|(
operator|(
name|ObjEntityHandler
operator|)
name|parentHandler
operator|)
operator|.
name|getEntity
argument_list|()
return|;
block|}
if|else if
condition|(
name|parentHandler
operator|instanceof
name|EmbeddableHandler
condition|)
block|{
return|return
operator|(
operator|(
name|EmbeddableHandler
operator|)
name|parentHandler
operator|)
operator|.
name|getEmbeddable
argument_list|()
return|;
block|}
if|else if
condition|(
name|parentHandler
operator|instanceof
name|QueryDescriptorHandler
condition|)
block|{
return|return
operator|(
operator|(
name|QueryDescriptorHandler
operator|)
name|parentHandler
operator|)
operator|.
name|getQueryDescriptor
argument_list|()
return|;
block|}
if|else if
condition|(
name|parentHandler
operator|instanceof
name|ProcedureHandler
condition|)
block|{
return|return
operator|(
operator|(
name|ProcedureHandler
operator|)
name|parentHandler
operator|)
operator|.
name|getProcedure
argument_list|()
return|;
block|}
if|else if
condition|(
name|parentHandler
operator|instanceof
name|DbRelationshipHandler
condition|)
block|{
return|return
operator|(
operator|(
name|DbRelationshipHandler
operator|)
name|parentHandler
operator|)
operator|.
name|getDbRelationship
argument_list|()
return|;
block|}
if|else if
condition|(
name|parentHandler
operator|instanceof
name|ObjRelationshipHandler
condition|)
block|{
return|return
operator|(
operator|(
name|ObjRelationshipHandler
operator|)
name|parentHandler
operator|)
operator|.
name|getObjRelationship
argument_list|()
return|;
block|}
if|if
condition|(
name|parentHandler
operator|instanceof
name|NamespaceAwareNestedTagHandler
condition|)
block|{
name|ContentHandler
name|parentParentHandler
init|=
operator|(
operator|(
name|NamespaceAwareNestedTagHandler
operator|)
name|parentHandler
operator|)
operator|.
name|getParentHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentParentHandler
operator|instanceof
name|DbEntityHandler
condition|)
block|{
return|return
operator|(
operator|(
name|DbEntityHandler
operator|)
name|parentParentHandler
operator|)
operator|.
name|getLastAttribute
argument_list|()
return|;
block|}
if|else if
condition|(
name|parentParentHandler
operator|instanceof
name|ObjEntityHandler
condition|)
block|{
return|return
operator|(
operator|(
name|ObjEntityHandler
operator|)
name|parentParentHandler
operator|)
operator|.
name|getLastAttribute
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

