begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|validation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ejbql
operator|.
name|EJBQLParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EJBQLQueryDescriptor
import|;
end_import

begin_class
specifier|public
class|class
name|EJBQLStatementValidator
block|{
specifier|public
name|PositionException
name|validateEJBQL
parameter_list|(
name|EJBQLQueryDescriptor
name|query
parameter_list|)
block|{
if|if
condition|(
name|query
operator|.
name|getEjbql
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|PositionException
name|message
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Only parse query and validate it's syntax.
comment|// It still may be invalid e.g. invalid entities used.
comment|// We can't call compile() for the full check as it will try to get
comment|// Class objects for ObjEntities used in query that are not available
comment|// in the modeler
name|EJBQLParserFactory
operator|.
name|getParser
argument_list|()
operator|.
name|parse
argument_list|(
name|query
operator|.
name|getEjbql
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CayenneRuntimeException
name|e
parameter_list|)
block|{
name|message
operator|=
operator|new
name|PositionException
argument_list|()
expr_stmt|;
name|message
operator|.
name|setE
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setMessage
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|EJBQLException
condition|)
block|{
name|EJBQLException
name|ejbqlException
init|=
operator|(
name|EJBQLException
operator|)
name|e
decl_stmt|;
name|Throwable
name|cause
init|=
name|ejbqlException
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Field
name|tokenField
init|=
name|cause
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
literal|"currentToken"
argument_list|)
decl_stmt|;
name|Object
name|token
init|=
name|tokenField
operator|.
name|get
argument_list|(
name|cause
argument_list|)
decl_stmt|;
name|Field
name|nextTokenField
init|=
name|token
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
literal|"next"
argument_list|)
decl_stmt|;
name|Object
name|nextToken
init|=
name|nextTokenField
operator|.
name|get
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|Field
name|beginColumnField
init|=
name|nextToken
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
literal|"beginColumn"
argument_list|)
decl_stmt|;
name|Field
name|beginLineField
init|=
name|nextToken
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
literal|"beginLine"
argument_list|)
decl_stmt|;
name|Field
name|endColumnField
init|=
name|nextToken
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
literal|"endColumn"
argument_list|)
decl_stmt|;
name|Field
name|endLineField
init|=
name|nextToken
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
literal|"endLine"
argument_list|)
decl_stmt|;
name|Field
name|imageField
init|=
name|nextToken
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
literal|"image"
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBeginColumn
argument_list|(
operator|(
name|Integer
operator|)
name|beginColumnField
operator|.
name|get
argument_list|(
name|nextToken
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setBeginLine
argument_list|(
operator|(
name|Integer
operator|)
name|beginLineField
operator|.
name|get
argument_list|(
name|nextToken
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setEndColumn
argument_list|(
operator|(
name|Integer
operator|)
name|endColumnField
operator|.
name|get
argument_list|(
name|nextToken
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setEndLine
argument_list|(
operator|(
name|Integer
operator|)
name|endLineField
operator|.
name|get
argument_list|(
name|nextToken
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setImage
argument_list|(
operator|(
name|String
operator|)
name|imageField
operator|.
name|get
argument_list|(
name|nextToken
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setLength
argument_list|(
name|message
operator|.
name|getImage
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
name|e1
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
name|message
operator|.
name|setE
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|message
operator|.
name|setMessage
argument_list|(
name|e
operator|.
name|getUnlabeledMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|message
operator|=
operator|new
name|PositionException
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|Exception
condition|)
block|{
name|message
operator|.
name|setE
argument_list|(
operator|(
name|Exception
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|setMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
class|class
name|PositionException
block|{
specifier|private
name|Integer
name|beginColumn
decl_stmt|;
specifier|private
name|Integer
name|beginLine
decl_stmt|;
specifier|private
name|Integer
name|endColumn
decl_stmt|;
specifier|private
name|Integer
name|endLine
decl_stmt|;
specifier|private
name|Integer
name|length
decl_stmt|;
specifier|private
name|String
name|image
decl_stmt|;
specifier|private
name|String
name|message
decl_stmt|;
specifier|private
name|Exception
name|e
decl_stmt|;
specifier|public
name|Integer
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
specifier|public
name|void
name|setLength
parameter_list|(
name|Integer
name|length
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|Exception
name|getE
parameter_list|()
block|{
return|return
name|e
return|;
block|}
specifier|public
name|void
name|setE
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|e
operator|=
name|e
expr_stmt|;
block|}
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
specifier|public
name|void
name|setMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
specifier|public
name|Integer
name|getBeginColumn
parameter_list|()
block|{
return|return
name|beginColumn
return|;
block|}
specifier|public
name|void
name|setBeginColumn
parameter_list|(
name|Integer
name|beginColumn
parameter_list|)
block|{
name|this
operator|.
name|beginColumn
operator|=
name|beginColumn
expr_stmt|;
block|}
specifier|public
name|Integer
name|getBeginLine
parameter_list|()
block|{
return|return
name|beginLine
return|;
block|}
specifier|public
name|void
name|setBeginLine
parameter_list|(
name|Integer
name|beginLine
parameter_list|)
block|{
name|this
operator|.
name|beginLine
operator|=
name|beginLine
expr_stmt|;
block|}
specifier|public
name|Integer
name|getEndColumn
parameter_list|()
block|{
return|return
name|endColumn
return|;
block|}
specifier|public
name|void
name|setEndColumn
parameter_list|(
name|Integer
name|endColumn
parameter_list|)
block|{
name|this
operator|.
name|endColumn
operator|=
name|endColumn
expr_stmt|;
block|}
specifier|public
name|Integer
name|getEndLine
parameter_list|()
block|{
return|return
name|endLine
return|;
block|}
specifier|public
name|void
name|setEndLine
parameter_list|(
name|Integer
name|endLine
parameter_list|)
block|{
name|this
operator|.
name|endLine
operator|=
name|endLine
expr_stmt|;
block|}
specifier|public
name|String
name|getImage
parameter_list|()
block|{
return|return
name|image
return|;
block|}
specifier|public
name|void
name|setImage
parameter_list|(
name|String
name|image
parameter_list|)
block|{
name|this
operator|.
name|image
operator|=
name|image
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

