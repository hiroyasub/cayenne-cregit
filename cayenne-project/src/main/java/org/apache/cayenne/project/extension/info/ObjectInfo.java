begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|extension
operator|.
name|info
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
operator|.
name|DataChannelMetaData
import|;
end_import

begin_comment
comment|/**  * Key-value storage for additional info associated with data map elements.  *  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|ObjectInfo
block|{
specifier|public
specifier|static
specifier|final
name|String
name|COMMENT
init|=
literal|"comment"
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|infoMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|putToMetaData
parameter_list|(
name|DataChannelMetaData
name|metaData
parameter_list|,
name|ConfigurationNode
name|object
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|ObjectInfo
name|info
init|=
name|metaData
operator|.
name|get
argument_list|(
name|object
argument_list|,
name|ObjectInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|info
operator|=
operator|new
name|ObjectInfo
argument_list|()
expr_stmt|;
name|metaData
operator|.
name|add
argument_list|(
name|object
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|getFromMetaData
parameter_list|(
name|DataChannelMetaData
name|metaData
parameter_list|,
name|ConfigurationNode
name|object
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|ObjectInfo
name|info
init|=
name|metaData
operator|.
name|get
argument_list|(
name|object
argument_list|,
name|ObjectInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|info
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * Package private constructor, use {@link ObjectInfo#putToMetaData(DataChannelMetaData, ConfigurationNode, String, String)}      * to create instance.      */
name|ObjectInfo
parameter_list|()
block|{
block|}
specifier|public
name|String
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|infoMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|infoMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSortedValues
parameter_list|()
block|{
return|return
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|infoMap
argument_list|)
return|;
block|}
block|}
end_class

end_unit

