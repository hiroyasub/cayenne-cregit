begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|extension
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
operator|.
name|DefaultHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
operator|.
name|NamespaceAwareNestedTagHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_comment
comment|/**  * Project parser handlers factory that will use third-party extensions  * to provide handlers for unknown tags.  *  * @see ProjectExtension  * @see DefaultHandlerFactory  *  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|ExtensionAwareHandlerFactory
extends|extends
name|DefaultHandlerFactory
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|LoaderDelegate
argument_list|>
name|loaderDelegates
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|ExtensionAwareHandlerFactory
parameter_list|(
annotation|@
name|Inject
name|List
argument_list|<
name|ProjectExtension
argument_list|>
name|extensions
parameter_list|)
block|{
for|for
control|(
name|ProjectExtension
name|extension
range|:
name|extensions
control|)
block|{
name|LoaderDelegate
name|delegate
init|=
name|extension
operator|.
name|createLoaderDelegate
argument_list|()
decl_stmt|;
name|LoaderDelegate
name|old
init|=
name|loaderDelegates
operator|.
name|put
argument_list|(
name|delegate
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|delegate
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Found two loader delegates for namespace %s"
argument_list|,
name|delegate
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|NamespaceAwareNestedTagHandler
name|createHandler
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|localName
parameter_list|,
name|NamespaceAwareNestedTagHandler
name|parent
parameter_list|)
block|{
name|LoaderDelegate
name|delegate
init|=
name|loaderDelegates
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
name|NamespaceAwareNestedTagHandler
name|handler
init|=
name|delegate
operator|.
name|createHandler
argument_list|(
name|parent
argument_list|,
name|localName
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
return|return
name|handler
return|;
block|}
block|}
return|return
name|super
operator|.
name|createHandler
argument_list|(
name|namespace
argument_list|,
name|localName
argument_list|,
name|parent
argument_list|)
return|;
block|}
block|}
end_class

end_unit

