begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|validation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|QueryDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|ValidationResult
import|;
end_import

begin_comment
comment|/**  * Base validation for all query types  */
end_comment

begin_class
class|class
name|BaseQueryValidator
extends|extends
name|ConfigurationNodeValidator
block|{
name|void
name|validateCacheGroup
parameter_list|(
name|QueryDescriptor
name|query
parameter_list|,
name|ValidationResult
name|validationResult
parameter_list|)
block|{
name|String
name|cacheGroup
init|=
name|query
operator|.
name|getProperty
argument_list|(
name|QueryMetadata
operator|.
name|CACHE_GROUPS_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheGroup
operator|!=
literal|null
operator|&&
name|cacheGroup
operator|.
name|contains
argument_list|(
literal|","
argument_list|)
condition|)
block|{
name|addFailure
argument_list|(
name|validationResult
argument_list|,
name|query
argument_list|,
literal|"Invalid cache group \"%s\", "
operator|+
literal|"multiple groups are deprecated"
argument_list|,
name|cacheGroup
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|validateName
parameter_list|(
name|QueryDescriptor
name|query
parameter_list|,
name|ValidationResult
name|validationResult
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|query
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// Must have name
if|if
condition|(
name|Util
operator|.
name|isEmptyString
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|addFailure
argument_list|(
name|validationResult
argument_list|,
name|query
argument_list|,
literal|"Unnamed "
operator|+
name|query
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|DataMap
name|map
init|=
name|query
operator|.
name|getDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// check for duplicate names in the parent context
if|if
condition|(
name|hasDuplicateQueryDescriptorInDataMap
argument_list|(
name|query
argument_list|,
name|map
argument_list|)
condition|)
block|{
name|addFailure
argument_list|(
name|validationResult
argument_list|,
name|query
argument_list|,
literal|"Duplicate query name: %s"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return;
block|}
name|DataChannelDescriptor
name|domain
init|=
name|query
operator|.
name|getDataMap
argument_list|()
operator|.
name|getDataChannelDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
name|domain
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// check for duplicate names in sibling contexts
for|for
control|(
name|DataMap
name|nextMap
range|:
name|domain
operator|.
name|getDataMaps
argument_list|()
control|)
block|{
if|if
condition|(
name|nextMap
operator|==
name|map
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|hasDuplicateQueryDescriptorInDataMap
argument_list|(
name|query
argument_list|,
name|nextMap
argument_list|)
condition|)
block|{
name|addFailure
argument_list|(
name|validationResult
argument_list|,
name|query
argument_list|,
literal|"Duplicate %s name in another DataMap: %s"
argument_list|,
name|query
operator|.
name|getType
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
specifier|private
name|boolean
name|hasDuplicateQueryDescriptorInDataMap
parameter_list|(
name|QueryDescriptor
name|queryDescriptor
parameter_list|,
name|DataMap
name|dataMap
parameter_list|)
block|{
for|for
control|(
specifier|final
name|QueryDescriptor
name|otherQuery
range|:
name|dataMap
operator|.
name|getQueryDescriptors
argument_list|()
control|)
block|{
if|if
condition|(
name|otherQuery
operator|==
name|queryDescriptor
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|queryDescriptor
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|otherQuery
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

