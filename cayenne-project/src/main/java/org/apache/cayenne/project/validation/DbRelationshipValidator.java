begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|validation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|ValidationResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
class|class
name|DbRelationshipValidator
extends|extends
name|ConfigurationNodeValidator
block|{
name|void
name|validate
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|,
name|ValidationResult
name|validationResult
parameter_list|)
block|{
if|if
condition|(
name|relationship
operator|.
name|getTargetEntity
argument_list|()
operator|==
literal|null
condition|)
block|{
name|addFailure
argument_list|(
name|validationResult
argument_list|,
name|relationship
argument_list|,
literal|"DbRelationship '%s' has no target entity"
argument_list|,
name|toString
argument_list|(
name|relationship
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|relationship
operator|.
name|getJoins
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addFailure
argument_list|(
name|validationResult
argument_list|,
name|relationship
argument_list|,
literal|"DbRelationship '%s' has no joins"
argument_list|,
name|toString
argument_list|(
name|relationship
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// validate joins
for|for
control|(
name|DbJoin
name|join
range|:
name|relationship
operator|.
name|getJoins
argument_list|()
control|)
block|{
if|if
condition|(
name|join
operator|.
name|getSource
argument_list|()
operator|==
literal|null
operator|&&
name|join
operator|.
name|getTarget
argument_list|()
operator|==
literal|null
condition|)
block|{
name|addFailure
argument_list|(
name|validationResult
argument_list|,
name|relationship
argument_list|,
literal|"DbRelationship '%s' has a join with no source and target attributes selected"
argument_list|,
name|toString
argument_list|(
name|relationship
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|join
operator|.
name|getSource
argument_list|()
operator|==
literal|null
condition|)
block|{
name|addFailure
argument_list|(
name|validationResult
argument_list|,
name|relationship
argument_list|,
literal|"DbRelationship '%s' has a join with no source attribute selected"
argument_list|,
name|toString
argument_list|(
name|relationship
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|join
operator|.
name|getTarget
argument_list|()
operator|==
literal|null
condition|)
block|{
name|addFailure
argument_list|(
name|validationResult
argument_list|,
name|relationship
argument_list|,
literal|"DbRelationship '%s' has a join with no target attribute selected"
argument_list|,
name|toString
argument_list|(
name|relationship
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|Util
operator|.
name|isEmptyString
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|addFailure
argument_list|(
name|validationResult
argument_list|,
name|relationship
argument_list|,
literal|"Unnamed DbRelationship"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|relationship
operator|.
name|getSourceEntity
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// check if there are attributes having the same name
name|addFailure
argument_list|(
name|validationResult
argument_list|,
name|relationship
argument_list|,
literal|"Name of DbRelationship '%s' conflicts with the name of one of DbAttributes in the same entity"
argument_list|,
name|toString
argument_list|(
name|relationship
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NameValidationHelper
name|helper
init|=
name|NameValidationHelper
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|String
name|invalidChars
init|=
name|helper
operator|.
name|invalidCharsInDbPathComponent
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|invalidChars
operator|!=
literal|null
condition|)
block|{
name|addFailure
argument_list|(
name|validationResult
argument_list|,
name|relationship
argument_list|,
literal|"Name of DbRelationship '%s' contains invalid characters: %s"
argument_list|,
name|toString
argument_list|(
name|relationship
argument_list|)
argument_list|,
name|invalidChars
argument_list|)
expr_stmt|;
block|}
block|}
name|checkForDuplicates
argument_list|(
name|relationship
argument_list|,
name|validationResult
argument_list|)
expr_stmt|;
name|checkOnGeneratedStrategyConflict
argument_list|(
name|relationship
argument_list|,
name|validationResult
argument_list|)
expr_stmt|;
name|checkToMany
argument_list|(
name|relationship
argument_list|,
name|validationResult
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkToMany
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|,
name|ValidationResult
name|validationResult
parameter_list|)
block|{
if|if
condition|(
name|relationship
operator|!=
literal|null
operator|&&
name|relationship
operator|.
name|getReverseRelationship
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|relationship
operator|.
name|isToMany
argument_list|()
operator|&&
name|relationship
operator|.
name|getReverseRelationship
argument_list|()
operator|.
name|isToMany
argument_list|()
condition|)
block|{
name|addFailure
argument_list|(
name|validationResult
argument_list|,
name|relationship
argument_list|,
literal|"Relationship '%s' and '%s' ManyToMany is impossible"
argument_list|,
name|relationship
operator|.
name|getName
argument_list|()
argument_list|,
name|relationship
operator|.
name|getReverseRelationship
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|checkTypesOfAttributesInRelationship
argument_list|(
name|relationship
argument_list|,
name|validationResult
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkTypesOfAttributesInRelationship
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|,
name|ValidationResult
name|validationResult
parameter_list|)
block|{
for|for
control|(
name|DbJoin
name|join
range|:
name|relationship
operator|.
name|getJoins
argument_list|()
control|)
block|{
if|if
condition|(
name|join
operator|.
name|getSource
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|join
operator|.
name|getTarget
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
name|addFailure
argument_list|(
name|validationResult
argument_list|,
name|relationship
argument_list|,
literal|"Attributes '%s' and '%s' have different types in a relationship '%s'"
argument_list|,
name|join
operator|.
name|getSourceName
argument_list|()
argument_list|,
name|join
operator|.
name|getTargetName
argument_list|()
argument_list|,
name|relationship
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkOnGeneratedStrategyConflict
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|,
name|ValidationResult
name|validationResult
parameter_list|)
block|{
if|if
condition|(
name|relationship
operator|.
name|isToDependentPK
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
name|attributes
init|=
name|relationship
operator|.
name|getTargetEntity
argument_list|()
operator|.
name|getGeneratedAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|DbAttribute
name|attribute
range|:
name|attributes
control|)
block|{
if|if
condition|(
name|attribute
operator|.
name|isGenerated
argument_list|()
condition|)
block|{
name|addFailure
argument_list|(
name|validationResult
argument_list|,
name|relationship
argument_list|,
literal|"'To Dep Pk' incompatible with Database-Generated on '%s' relationship"
argument_list|,
name|toString
argument_list|(
name|relationship
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Per CAY-1813, make sure two (or more) DbRelationships do not map to the      * same database path.      */
specifier|private
name|void
name|checkForDuplicates
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|,
name|ValidationResult
name|validationResult
parameter_list|)
block|{
if|if
condition|(
name|relationship
operator|!=
literal|null
operator|&&
name|relationship
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
name|relationship
operator|.
name|getTargetEntityName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|dbRelationshipPath
init|=
name|relationship
operator|.
name|getTargetEntityName
argument_list|()
operator|+
literal|"."
operator|+
name|getJoins
argument_list|(
name|relationship
argument_list|)
decl_stmt|;
name|DbEntity
name|entity
init|=
name|relationship
operator|.
name|getSourceEntity
argument_list|()
decl_stmt|;
for|for
control|(
name|DbRelationship
name|comparisonRelationship
range|:
name|entity
operator|.
name|getRelationships
argument_list|()
control|)
block|{
if|if
condition|(
name|relationship
operator|!=
name|comparisonRelationship
condition|)
block|{
name|String
name|comparisonDbRelationshipPath
init|=
name|comparisonRelationship
operator|.
name|getTargetEntityName
argument_list|()
operator|+
literal|"."
operator|+
name|getJoins
argument_list|(
name|comparisonRelationship
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbRelationshipPath
operator|.
name|equals
argument_list|(
name|comparisonDbRelationshipPath
argument_list|)
condition|)
block|{
name|addFailure
argument_list|(
name|validationResult
argument_list|,
name|relationship
argument_list|,
literal|"DbEntity '%s' contains a duplicate DbRelationship mapping ('%s' -> '%s')"
argument_list|,
name|entity
operator|.
name|getName
argument_list|()
argument_list|,
name|relationship
operator|.
name|getName
argument_list|()
argument_list|,
name|dbRelationshipPath
argument_list|)
expr_stmt|;
return|return;
comment|// Duplicate found, stop.
block|}
block|}
block|}
block|}
block|}
specifier|private
name|String
name|getJoins
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|joins
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DbJoin
name|join
range|:
name|relationship
operator|.
name|getJoins
argument_list|()
control|)
block|{
name|joins
operator|.
name|add
argument_list|(
literal|"[source="
operator|+
name|join
operator|.
name|getSourceName
argument_list|()
operator|+
literal|",target="
operator|+
name|join
operator|.
name|getTargetName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|joins
argument_list|)
expr_stmt|;
return|return
name|Util
operator|.
name|join
argument_list|(
name|joins
argument_list|,
literal|","
argument_list|)
return|;
block|}
specifier|private
name|String
name|toString
parameter_list|(
name|DbRelationship
name|relationship
parameter_list|)
block|{
if|if
condition|(
name|relationship
operator|.
name|getSourceEntity
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|"[null source entity]."
operator|+
name|relationship
operator|.
name|getName
argument_list|()
return|;
block|}
return|return
name|relationship
operator|.
name|getSourceEntity
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|relationship
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

