begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|upgrade
operator|.
name|v9
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|XMLDataChannelDescriptorLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|ProjectSaver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|upgrade
operator|.
name|BaseUpgradeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|upgrade
operator|.
name|UpgradeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|upgrade
operator|.
name|UpgradeMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|upgrade
operator|.
name|UpgradeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|upgrade
operator|.
name|v8
operator|.
name|ProjectUpgrader_V8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_class
specifier|public
class|class
name|UpgradeHandler_V9
extends|extends
name|BaseUpgradeHandler
block|{
specifier|static
specifier|final
name|String
name|TO_VERSION
init|=
literal|"9"
decl_stmt|;
specifier|static
specifier|final
name|String
name|MIN_SUPPORTED_VERSION
init|=
literal|"8"
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|Injector
name|injector
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ProjectSaver
name|projectSaver
decl_stmt|;
specifier|public
name|UpgradeHandler_V9
parameter_list|(
name|Resource
name|source
parameter_list|)
block|{
name|super
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Resource
name|doPerformUpgrade
parameter_list|(
name|UpgradeMetaData
name|metaData
parameter_list|)
throws|throws
name|ConfigurationException
block|{
if|if
condition|(
name|compareVersions
argument_list|(
name|metaData
operator|.
name|getProjectVersion
argument_list|()
argument_list|,
name|MIN_SUPPORTED_VERSION
argument_list|)
operator|==
literal|0
condition|)
block|{
name|ProjectUpgrader_V8
name|upgraderV8
init|=
operator|new
name|ProjectUpgrader_V8
argument_list|()
decl_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|upgraderV8
argument_list|)
expr_stmt|;
name|UpgradeHandler
name|handlerV8
init|=
name|upgraderV8
operator|.
name|getUpgradeHandler
argument_list|(
name|projectSource
argument_list|)
decl_stmt|;
name|projectSource
operator|=
name|handlerV8
operator|.
name|performUpgrade
argument_list|()
expr_stmt|;
block|}
name|deleteReverseEngineeringFiles
argument_list|(
name|projectSource
argument_list|)
expr_stmt|;
name|XMLDataChannelDescriptorLoader
name|loader
init|=
operator|new
name|XMLDataChannelDescriptorLoader
argument_list|()
decl_stmt|;
name|injector
operator|.
name|injectMembers
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|ConfigurationTree
argument_list|<
name|DataChannelDescriptor
argument_list|>
name|tree
init|=
name|loader
operator|.
name|load
argument_list|(
name|projectSource
argument_list|)
decl_stmt|;
name|Project
name|project
init|=
operator|new
name|Project
argument_list|(
name|tree
argument_list|)
decl_stmt|;
comment|// load and safe cycle updates project version
name|projectSaver
operator|.
name|save
argument_list|(
name|project
argument_list|)
expr_stmt|;
return|return
name|project
operator|.
name|getConfigurationResource
argument_list|()
return|;
block|}
specifier|private
name|void
name|deleteReverseEngineeringFiles
parameter_list|(
name|Resource
name|projectSource
parameter_list|)
block|{
name|Document
name|projectDoc
init|=
name|readDOMDocument
argument_list|(
name|projectSource
argument_list|)
decl_stmt|;
try|try
block|{
name|XPath
name|xpath
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXPath
argument_list|()
decl_stmt|;
name|NodeList
name|nodes
init|=
operator|(
name|NodeList
operator|)
name|xpath
operator|.
name|evaluate
argument_list|(
literal|"/domain/map/@name"
argument_list|,
name|projectDoc
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|mapNode
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Resource
name|mapResource
init|=
name|projectSource
operator|.
name|getRelativeResource
argument_list|(
name|mapNode
operator|.
name|getNodeValue
argument_list|()
operator|+
literal|".map.xml"
argument_list|)
decl_stmt|;
name|Document
name|datamapDoc
init|=
name|readDOMDocument
argument_list|(
name|mapResource
argument_list|)
decl_stmt|;
name|Node
name|reNode
init|=
operator|(
name|Node
operator|)
name|xpath
operator|.
name|evaluate
argument_list|(
literal|"/data-map/reverse-engineering-config"
argument_list|,
name|datamapDoc
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|reNode
operator|!=
literal|null
condition|)
block|{
name|String
name|reFileName
init|=
operator|(
operator|(
name|Element
operator|)
name|reNode
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
operator|+
literal|".xml"
decl_stmt|;
try|try
block|{
name|String
name|directoryPath
init|=
name|Util
operator|.
name|toFile
argument_list|(
name|projectSource
operator|.
name|getURL
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|directoryPath
operator|+
literal|"/"
operator|+
name|reFileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore...
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Unable to parse Cayenne XML configuration files."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Document
name|readDOMDocument
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|DocumentBuilderFactory
name|documentBuilderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|DocumentBuilder
name|domBuilder
init|=
name|documentBuilderFactory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|inputStream
init|=
name|resource
operator|.
name|getURL
argument_list|()
operator|.
name|openStream
argument_list|()
init|)
block|{
return|return
name|domBuilder
operator|.
name|parse
argument_list|(
name|inputStream
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Error loading configuration from %s"
argument_list|,
name|e
argument_list|,
name|resource
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|UpgradeMetaData
name|loadMetaData
parameter_list|()
block|{
name|String
name|version
init|=
name|loadProjectVersion
argument_list|()
decl_stmt|;
name|UpgradeMetaData
name|metadata
init|=
operator|new
name|UpgradeMetaData
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|setSupportedVersion
argument_list|(
name|TO_VERSION
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setProjectVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|int
name|c1
init|=
name|compareVersions
argument_list|(
name|version
argument_list|,
name|MIN_SUPPORTED_VERSION
argument_list|)
decl_stmt|;
name|int
name|c2
init|=
name|compareVersions
argument_list|(
name|TO_VERSION
argument_list|,
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|c1
operator|<
literal|0
condition|)
block|{
name|metadata
operator|.
name|setIntermediateUpgradeVersion
argument_list|(
name|MIN_SUPPORTED_VERSION
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setUpgradeType
argument_list|(
name|UpgradeType
operator|.
name|INTERMEDIATE_UPGRADE_NEEDED
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|c2
operator|<
literal|0
condition|)
block|{
name|metadata
operator|.
name|setUpgradeType
argument_list|(
name|UpgradeType
operator|.
name|DOWNGRADE_NEEDED
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|c2
operator|==
literal|0
condition|)
block|{
name|metadata
operator|.
name|setUpgradeType
argument_list|(
name|UpgradeType
operator|.
name|UPGRADE_NOT_NEEDED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|setUpgradeType
argument_list|(
name|UpgradeType
operator|.
name|UPGRADE_NEEDED
argument_list|)
expr_stmt|;
block|}
return|return
name|metadata
return|;
block|}
block|}
end_class

end_unit

