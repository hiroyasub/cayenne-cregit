begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|upgrade
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_comment
comment|/**  * A common superclass of UpgradeHandlers.  *   * @since 3.1  */
end_comment

begin_comment
comment|// there's no guarantee this will survive the further version upgrades, but for
end_comment

begin_comment
comment|// now all
end_comment

begin_comment
comment|// the code here seems like version-agnostic
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BaseUpgradeHandler
implements|implements
name|UpgradeHandler
block|{
specifier|static
specifier|final
name|String
name|UNKNOWN_VERSION
init|=
literal|"0"
decl_stmt|;
specifier|protected
name|Resource
name|projectSource
decl_stmt|;
specifier|protected
name|UpgradeMetaData
name|metaData
decl_stmt|;
specifier|public
name|BaseUpgradeHandler
parameter_list|(
name|Resource
name|projectSource
parameter_list|)
block|{
if|if
condition|(
name|projectSource
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null project source"
argument_list|)
throw|;
block|}
name|this
operator|.
name|projectSource
operator|=
name|projectSource
expr_stmt|;
block|}
comment|/** 	 * Creates a single common EntityResolver for all project DataMaps, setting 	 * it as a namespace for all of them. This is needed for resolving cross-map 	 * relationships. 	 */
specifier|protected
name|void
name|attachToNamespace
parameter_list|(
name|DataChannelDescriptor
name|channelDescriptor
parameter_list|)
block|{
name|EntityResolver
name|entityResolver
init|=
operator|new
name|EntityResolver
argument_list|(
name|channelDescriptor
operator|.
name|getDataMaps
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DataMap
name|map
range|:
name|entityResolver
operator|.
name|getDataMaps
argument_list|()
control|)
block|{
name|map
operator|.
name|setNamespace
argument_list|(
name|entityResolver
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Resource
name|getProjectSource
parameter_list|()
block|{
return|return
name|projectSource
return|;
block|}
annotation|@
name|Override
specifier|public
name|UpgradeMetaData
name|getUpgradeMetaData
parameter_list|()
block|{
comment|// no attempts at thread-safety... shouldn't be needed for upgrades
if|if
condition|(
name|metaData
operator|==
literal|null
condition|)
block|{
name|metaData
operator|=
name|loadMetaData
argument_list|()
expr_stmt|;
block|}
return|return
name|metaData
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resource
name|performUpgrade
parameter_list|()
throws|throws
name|ConfigurationException
block|{
name|UpgradeMetaData
name|metaData
init|=
name|getUpgradeMetaData
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|metaData
operator|.
name|getUpgradeType
argument_list|()
condition|)
block|{
case|case
name|DOWNGRADE_NEEDED
case|:
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Downgrade can not be performed"
argument_list|)
throw|;
case|case
name|INTERMEDIATE_UPGRADE_NEEDED
case|:
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Upgrade can not be performed - intermediate version upgrade needed"
argument_list|)
throw|;
case|case
name|UPGRADE_NEEDED
case|:
return|return
name|doPerformUpgrade
argument_list|(
name|metaData
argument_list|)
return|;
default|default:
return|return
name|getProjectSource
argument_list|()
return|;
block|}
block|}
comment|/** 	 * Does the actual project upgrade, assuming the caller already verified 	 * that the upgrade is possible. 	 *  	 * @param metaData 	 *            object describing the type of upgrade 	 */
specifier|protected
specifier|abstract
name|Resource
name|doPerformUpgrade
parameter_list|(
name|UpgradeMetaData
name|metaData
parameter_list|)
throws|throws
name|ConfigurationException
function_decl|;
comment|/** 	 * Creates a metadata object describing the type of upgrade needed. 	 */
specifier|protected
specifier|abstract
name|UpgradeMetaData
name|loadMetaData
parameter_list|()
function_decl|;
comment|/** 	 * A default method for quick extraction of the project version from an XML 	 * file. 	 */
specifier|protected
name|String
name|loadProjectVersion
parameter_list|()
block|{
name|RootTagHandler
name|rootHandler
init|=
operator|new
name|RootTagHandler
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|projectSource
operator|.
name|getURL
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
name|url
operator|.
name|openStream
argument_list|()
init|;
init|)
block|{
name|XMLReader
name|parser
init|=
name|Util
operator|.
name|createXmlReader
argument_list|()
decl_stmt|;
name|parser
operator|.
name|setContentHandler
argument_list|(
name|rootHandler
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setErrorHandler
argument_list|(
name|rootHandler
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
comment|// expected ... handler will terminate as soon as it finds a root
comment|// tag.
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Error reading configuration from %s"
argument_list|,
name|e
argument_list|,
name|url
argument_list|)
throw|;
block|}
return|return
name|rootHandler
operator|.
name|projectVersion
operator|!=
literal|null
condition|?
name|rootHandler
operator|.
name|projectVersion
else|:
name|UNKNOWN_VERSION
return|;
block|}
comment|/** 	 * Compares two String versions. 	 */
specifier|protected
name|int
name|compareVersions
parameter_list|(
name|String
name|v1
parameter_list|,
name|String
name|v2
parameter_list|)
block|{
if|if
condition|(
name|v1
operator|.
name|equals
argument_list|(
name|v2
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
name|double
name|v1Double
init|=
name|decodeVersion
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|double
name|v2Double
init|=
name|decodeVersion
argument_list|(
name|v2
argument_list|)
decl_stmt|;
return|return
name|v1Double
operator|<
name|v2Double
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
specifier|protected
name|double
name|decodeVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
if|if
condition|(
name|version
operator|==
literal|null
operator|||
name|version
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// leave the first dot, and treat remaining as a fraction
comment|// remove all non digit chars
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
name|version
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|dotProcessed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|version
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|nextChar
init|=
name|version
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextChar
operator|==
literal|'.'
operator|&&
operator|!
name|dotProcessed
condition|)
block|{
name|dotProcessed
operator|=
literal|true
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|nextChar
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|nextChar
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
class|class
name|RootTagHandler
extends|extends
name|DefaultHandler
block|{
specifier|private
name|String
name|projectVersion
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|this
operator|.
name|projectVersion
operator|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"project-version"
argument_list|)
expr_stmt|;
comment|// bail right away - we are not interested in reading this to the
comment|// end
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"finished"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

