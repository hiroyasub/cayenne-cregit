begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|velocity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|translator
operator|.
name|ParameterBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|context
operator|.
name|InternalContextAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|exception
operator|.
name|MethodInvocationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|exception
operator|.
name|ParseErrorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|exception
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|parser
operator|.
name|node
operator|.
name|Node
import|;
end_import

begin_comment
comment|/**  * A custom Velocity directive to create a set of SQL conditions to match an ObjectId of  * an object. Usage in Velocity template is "WHERE #bindObjectEqual($object)" or "WHERE  * #bindObjectEqual($object $columns $idValues)".  *   * @since 3.0  */
end_comment

begin_class
specifier|public
class|class
name|BindObjectEqualDirective
extends|extends
name|BindDirective
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"bindObjectEqual"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|render
parameter_list|(
name|InternalContextAdapter
name|context
parameter_list|,
name|Writer
name|writer
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|IOException
throws|,
name|ResourceNotFoundException
throws|,
name|ParseErrorException
throws|,
name|MethodInvocationException
block|{
name|Object
name|object
init|=
name|getChild
argument_list|(
name|context
argument_list|,
name|node
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Map
name|idMap
init|=
name|toIdMap
argument_list|(
name|object
argument_list|)
decl_stmt|;
name|Object
name|sqlColumns
init|=
name|getChild
argument_list|(
name|context
argument_list|,
name|node
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Object
name|idColumns
init|=
name|getChild
argument_list|(
name|context
argument_list|,
name|node
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|idMap
operator|==
literal|null
condition|)
block|{
comment|// assume null object, and bind all null values
if|if
condition|(
name|sqlColumns
operator|==
literal|null
operator|||
name|idColumns
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParseErrorException
argument_list|(
literal|"Invalid parameters. "
operator|+
literal|"Either object has to be set "
operator|+
literal|"or sqlColumns and idColumns or both."
argument_list|)
throw|;
block|}
name|idMap
operator|=
name|Collections
operator|.
name|EMPTY_MAP
expr_stmt|;
block|}
if|else if
condition|(
name|sqlColumns
operator|==
literal|null
operator|||
name|idColumns
operator|==
literal|null
condition|)
block|{
comment|// infer SQL columns from ID columns
name|sqlColumns
operator|=
name|idMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
expr_stmt|;
name|idColumns
operator|=
name|sqlColumns
expr_stmt|;
block|}
name|Object
index|[]
name|sqlColumnsArray
init|=
name|toArray
argument_list|(
name|sqlColumns
argument_list|)
decl_stmt|;
name|Object
index|[]
name|idColumnsArray
init|=
name|toArray
argument_list|(
name|idColumns
argument_list|)
decl_stmt|;
if|if
condition|(
name|sqlColumnsArray
operator|.
name|length
operator|!=
name|idColumnsArray
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|ParseErrorException
argument_list|(
literal|"SQL columns and ID columns arrays have different sizes."
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sqlColumnsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|value
init|=
name|idMap
operator|.
name|get
argument_list|(
name|idColumnsArray
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|int
name|jdbcType
init|=
operator|(
name|value
operator|!=
literal|null
operator|)
condition|?
name|TypesMapping
operator|.
name|getSqlTypeByJava
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
else|:
name|Types
operator|.
name|INTEGER
decl_stmt|;
name|renderColumn
argument_list|(
name|context
argument_list|,
name|writer
argument_list|,
name|sqlColumnsArray
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|render
argument_list|(
name|context
argument_list|,
name|writer
argument_list|,
operator|new
name|ParameterBinding
argument_list|(
name|value
argument_list|,
name|jdbcType
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|Object
index|[]
name|toArray
parameter_list|(
name|Object
name|columns
parameter_list|)
block|{
if|if
condition|(
name|columns
operator|instanceof
name|Collection
condition|)
block|{
return|return
operator|(
operator|(
name|Collection
operator|)
name|columns
operator|)
operator|.
name|toArray
argument_list|()
return|;
block|}
if|else if
condition|(
name|columns
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
operator|(
name|Object
index|[]
operator|)
name|columns
return|;
block|}
else|else
block|{
return|return
operator|new
name|Object
index|[]
block|{
name|columns
block|}
return|;
block|}
block|}
specifier|protected
name|Map
name|toIdMap
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|ParseErrorException
block|{
if|if
condition|(
name|object
operator|instanceof
name|Persistent
condition|)
block|{
return|return
operator|(
operator|(
name|Persistent
operator|)
name|object
operator|)
operator|.
name|getObjectId
argument_list|()
operator|.
name|getIdSnapshot
argument_list|()
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|ObjectId
condition|)
block|{
return|return
operator|(
operator|(
name|ObjectId
operator|)
name|object
operator|)
operator|.
name|getIdSnapshot
argument_list|()
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Map
condition|)
block|{
return|return
operator|(
name|Map
operator|)
name|object
return|;
block|}
if|else if
condition|(
name|object
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParseErrorException
argument_list|(
literal|"Invalid object parameter, expected Persistent or ObjectId or null: "
operator|+
name|object
argument_list|)
throw|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|void
name|renderColumn
parameter_list|(
name|InternalContextAdapter
name|context
parameter_list|,
name|Writer
name|writer
parameter_list|,
name|Object
name|columnName
parameter_list|,
name|int
name|columnIndex
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|columnIndex
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|" AND "
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
name|columnName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|render
parameter_list|(
name|InternalContextAdapter
name|context
parameter_list|,
name|Writer
name|writer
parameter_list|,
name|ParameterBinding
name|binding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|binding
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|bind
argument_list|(
name|context
argument_list|,
name|binding
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"= ?"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"IS NULL"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

