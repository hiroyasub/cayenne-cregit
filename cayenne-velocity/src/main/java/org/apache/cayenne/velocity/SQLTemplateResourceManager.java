begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|velocity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|concurrentlinkedhashmap
operator|.
name|ConcurrentLinkedHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|ExtendedProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|Template
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|exception
operator|.
name|ParseErrorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|exception
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|RuntimeServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|resource
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|resource
operator|.
name|loader
operator|.
name|ResourceLoader
import|;
end_import

begin_comment
comment|/**  * An implementation of the Velocity ResourceManager and ResourceLoader that  * creates templates from in-memory Strings.  *   * @since 1.1  */
end_comment

begin_comment
comment|// class must be public since it is instantiated by Velocity via reflection.
end_comment

begin_class
specifier|public
class|class
name|SQLTemplateResourceManager
extends|extends
name|ResourceLoader
implements|implements
name|ResourceManager
block|{
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Template
argument_list|>
name|templateCache
decl_stmt|;
specifier|public
name|void
name|initialize
parameter_list|(
name|RuntimeServices
name|rs
parameter_list|)
block|{
name|super
operator|.
name|rsvc
operator|=
name|rs
expr_stmt|;
name|this
operator|.
name|templateCache
operator|=
operator|new
name|ConcurrentLinkedHashMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Template
argument_list|>
argument_list|()
operator|.
name|maximumWeightedCapacity
argument_list|(
literal|100
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|clearCache
parameter_list|()
block|{
name|templateCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns a Velocity Resource which is a Template for the given SQL.      */
specifier|public
name|Resource
name|getResource
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|int
name|resourceType
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|ResourceNotFoundException
throws|,
name|ParseErrorException
block|{
synchronized|synchronized
init|(
name|templateCache
init|)
block|{
name|Template
name|resource
init|=
name|templateCache
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|resource
operator|=
operator|new
name|Template
argument_list|()
expr_stmt|;
name|resource
operator|.
name|setRuntimeServices
argument_list|(
name|rsvc
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setResourceLoader
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setName
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|resource
operator|.
name|process
argument_list|()
expr_stmt|;
name|templateCache
operator|.
name|put
argument_list|(
name|resourceName
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
return|return
name|resource
return|;
block|}
block|}
specifier|public
name|String
name|getLoaderNameForResource
parameter_list|(
name|String
name|resourceName
parameter_list|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastModified
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getResourceStream
parameter_list|(
name|String
name|source
parameter_list|)
throws|throws
name|ResourceNotFoundException
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|source
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|ExtendedProperties
name|configuration
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSourceModified
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

