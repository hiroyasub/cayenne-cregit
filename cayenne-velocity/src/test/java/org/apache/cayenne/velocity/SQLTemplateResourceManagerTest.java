begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|velocity
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|Template
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|RuntimeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|RuntimeServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|parser
operator|.
name|node
operator|.
name|SimpleNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|resource
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SQLTemplateResourceManagerTest
block|{
specifier|private
name|SQLTemplateResourceManager
name|rm
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|RuntimeServices
name|rs
init|=
name|mock
argument_list|(
name|RuntimeServices
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rs
operator|.
name|parse
argument_list|(
name|any
argument_list|(
name|Reader
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|SimpleNode
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rs
operator|.
name|parse
argument_list|(
name|any
argument_list|(
name|Reader
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|SimpleNode
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rm
operator|=
operator|new
name|SQLTemplateResourceManager
argument_list|()
expr_stmt|;
name|rm
operator|.
name|initialize
argument_list|(
name|rs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFetResource
parameter_list|()
throws|throws
name|Exception
block|{
name|Resource
name|resource
init|=
name|rm
operator|.
name|getResource
argument_list|(
literal|"abc"
argument_list|,
name|ResourceManager
operator|.
name|RESOURCE_TEMPLATE
argument_list|,
name|RuntimeConstants
operator|.
name|ENCODING_DEFAULT
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|resource
operator|instanceof
name|Template
argument_list|)
expr_stmt|;
comment|// must be cached...
name|assertSame
argument_list|(
name|resource
argument_list|,
name|rm
operator|.
name|getResource
argument_list|(
literal|"abc"
argument_list|,
name|ResourceManager
operator|.
name|RESOURCE_TEMPLATE
argument_list|,
name|RuntimeConstants
operator|.
name|ENCODING_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
comment|// new resource must be different
name|assertNotSame
argument_list|(
name|resource
argument_list|,
name|rm
operator|.
name|getResource
argument_list|(
literal|"xyz"
argument_list|,
name|ResourceManager
operator|.
name|RESOURCE_TEMPLATE
argument_list|,
name|RuntimeConstants
operator|.
name|ENCODING_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
comment|// after clearing cache, resource must be refreshed
name|rm
operator|.
name|clearCache
argument_list|()
expr_stmt|;
name|assertNotSame
argument_list|(
name|resource
argument_list|,
name|rm
operator|.
name|getResource
argument_list|(
literal|"abc"
argument_list|,
name|ResourceManager
operator|.
name|RESOURCE_TEMPLATE
argument_list|,
name|RuntimeConstants
operator|.
name|ENCODING_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

