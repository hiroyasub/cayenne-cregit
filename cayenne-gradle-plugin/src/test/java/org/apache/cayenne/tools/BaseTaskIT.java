begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystems
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|gradle
operator|.
name|testkit
operator|.
name|runner
operator|.
name|GradleRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|BaseTaskIT
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|tempFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|protected
name|File
name|projectDir
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createProjectDir
parameter_list|()
throws|throws
name|IOException
block|{
name|projectDir
operator|=
name|tempFolder
operator|.
name|newFolder
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|GradleRunner
name|createRunner
parameter_list|(
name|String
name|projectName
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|prepareBuildScript
argument_list|(
name|projectName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|gradleArguments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|gradleArguments
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|gradleArguments
operator|.
name|add
argument_list|(
literal|"--stacktrace"
argument_list|)
expr_stmt|;
return|return
name|GradleRunner
operator|.
name|create
argument_list|()
operator|.
name|withProjectDir
argument_list|(
name|projectDir
argument_list|)
operator|.
name|withPluginClasspath
argument_list|()
operator|.
name|withArguments
argument_list|(
name|gradleArguments
argument_list|)
return|;
block|}
specifier|private
name|void
name|prepareBuildScript
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|src
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|name
operator|+
literal|".gradle"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|Path
name|dst
init|=
name|FileSystems
operator|.
name|getDefault
argument_list|()
operator|.
name|getPath
argument_list|(
name|projectDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"build.gradle"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

