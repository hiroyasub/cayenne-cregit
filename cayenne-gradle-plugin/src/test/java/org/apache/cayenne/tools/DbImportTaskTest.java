begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|groovy
operator|.
name|lang
operator|.
name|Closure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|DbImportConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
operator|.
name|model
operator|.
name|DataSourceConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
operator|.
name|model
operator|.
name|DbImportConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|gradle
operator|.
name|api
operator|.
name|InvalidUserDataException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|gradle
operator|.
name|api
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|gradle
operator|.
name|testfixtures
operator|.
name|ProjectBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|DbImportTaskTest
block|{
specifier|private
name|DbImportTask
name|task
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createTask
parameter_list|()
block|{
name|Project
name|project
init|=
name|ProjectBuilder
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|DbImportTask
operator|.
name|class
argument_list|)
expr_stmt|;
name|task
operator|=
operator|(
name|DbImportTask
operator|)
name|project
operator|.
name|task
argument_list|(
name|parameters
argument_list|,
literal|"cdbimportTask"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidUserDataException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRunWithNoConfig
parameter_list|()
block|{
name|task
operator|.
name|runImport
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFullConfigCreation
parameter_list|()
block|{
name|File
name|mockFile
init|=
name|mock
argument_list|(
name|File
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// configure task
name|task
operator|.
name|setMap
argument_list|(
name|mockFile
argument_list|)
expr_stmt|;
name|task
operator|.
name|setAdapter
argument_list|(
literal|"org.apache.cayenne.test.adapter"
argument_list|)
expr_stmt|;
name|task
operator|.
name|dataSource
argument_list|(
operator|new
name|Closure
argument_list|<
name|DataSourceConfig
argument_list|>
argument_list|(
name|task
argument_list|,
name|task
argument_list|)
block|{
name|DataSourceConfig
name|doCall
parameter_list|(
name|DataSourceConfig
name|dataSourceConfig
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|dataSourceConfig
argument_list|)
expr_stmt|;
name|dataSourceConfig
operator|.
name|setUrl
argument_list|(
literal|"test://url"
argument_list|)
expr_stmt|;
name|dataSourceConfig
operator|.
name|setDriver
argument_list|(
literal|"org.apache.cayenne.test.driver"
argument_list|)
expr_stmt|;
name|dataSourceConfig
operator|.
name|setUsername
argument_list|(
literal|"username"
argument_list|)
expr_stmt|;
name|dataSourceConfig
operator|.
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
return|return
name|dataSourceConfig
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|task
operator|.
name|dbImport
argument_list|(
operator|new
name|Closure
argument_list|<
name|DataSourceConfig
argument_list|>
argument_list|(
name|task
argument_list|,
name|task
argument_list|)
block|{
name|DbImportConfig
name|doCall
parameter_list|(
name|DbImportConfig
name|config
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|config
operator|.
name|setDefaultPackage
argument_list|(
literal|"com.example.package"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setMeaningfulPkTables
argument_list|(
literal|"pk_tables"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setNamingStrategy
argument_list|(
literal|"com.example.naming"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setSkipPrimaryKeyLoading
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setSkipRelationshipsLoading
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setStripFromTableNames
argument_list|(
literal|"strip"
argument_list|)
expr_stmt|;
name|config
operator|.
name|tableTypes
argument_list|(
literal|"view"
argument_list|,
literal|"alias"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setForceDataMapCatalog
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setForceDataMapSchema
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setUseJava7Types
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setUsePrimitives
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Testing this:
name|DbImportConfiguration
name|dbImportConfiguration
init|=
name|task
operator|.
name|createConfig
argument_list|()
decl_stmt|;
comment|// Check that all values in end configuration is properly set
name|assertEquals
argument_list|(
literal|"org.apache.cayenne.test.adapter"
argument_list|,
name|dbImportConfiguration
operator|.
name|getAdapter
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test://url"
argument_list|,
name|dbImportConfiguration
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"org.apache.cayenne.test.driver"
argument_list|,
name|dbImportConfiguration
operator|.
name|getDriver
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"username"
argument_list|,
name|dbImportConfiguration
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"password"
argument_list|,
name|dbImportConfiguration
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"com.example.package"
argument_list|,
name|dbImportConfiguration
operator|.
name|getDefaultPackage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pk_tables"
argument_list|,
name|dbImportConfiguration
operator|.
name|getMeaningfulPkTables
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"com.example.naming"
argument_list|,
name|dbImportConfiguration
operator|.
name|getNamingStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbImportConfiguration
operator|.
name|getDbLoaderConfig
argument_list|()
operator|.
name|isSkipPrimaryKeyLoading
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbImportConfiguration
operator|.
name|getDbLoaderConfig
argument_list|()
operator|.
name|isSkipRelationshipsLoading
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"strip"
argument_list|,
name|dbImportConfiguration
operator|.
name|getStripFromTableNames
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"password"
argument_list|,
name|dbImportConfiguration
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"view"
block|,
literal|"alias"
block|}
argument_list|,
name|dbImportConfiguration
operator|.
name|getDbLoaderConfig
argument_list|()
operator|.
name|getTableTypes
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbImportConfiguration
operator|.
name|isForceDataMapCatalog
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbImportConfiguration
operator|.
name|isForceDataMapSchema
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dbImportConfiguration
operator|.
name|isUseJava7Types
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dbImportConfiguration
operator|.
name|isUsePrimitives
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

