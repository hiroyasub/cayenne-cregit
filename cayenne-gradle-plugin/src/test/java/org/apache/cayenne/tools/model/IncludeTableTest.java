begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ExcludeColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ExcludeRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|IncludeColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|IncludeTableTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|includeColumn
parameter_list|()
throws|throws
name|Exception
block|{
name|IncludeTable
name|table
init|=
operator|new
name|IncludeTable
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|table
operator|.
name|includeColumn
argument_list|(
literal|"column1"
argument_list|)
expr_stmt|;
name|table
operator|.
name|includeColumn
argument_list|(
literal|"column2"
argument_list|)
expr_stmt|;
name|table
operator|.
name|includeColumn
argument_list|(
literal|"column2"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|IncludeColumn
argument_list|>
name|columns
init|=
name|table
operator|.
name|toIncludeTable
argument_list|()
operator|.
name|getIncludeColumns
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"column1"
argument_list|,
name|columns
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|includeColumns
parameter_list|()
throws|throws
name|Exception
block|{
name|IncludeTable
name|table
init|=
operator|new
name|IncludeTable
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|table
operator|.
name|includeColumns
argument_list|(
literal|"column1"
argument_list|,
literal|"column2"
argument_list|,
literal|"column2"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|IncludeColumn
argument_list|>
name|columns
init|=
name|table
operator|.
name|toIncludeTable
argument_list|()
operator|.
name|getIncludeColumns
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"column1"
argument_list|,
name|columns
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|excludeColumn
parameter_list|()
throws|throws
name|Exception
block|{
name|IncludeTable
name|table
init|=
operator|new
name|IncludeTable
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|table
operator|.
name|excludeColumn
argument_list|(
literal|"column1"
argument_list|)
expr_stmt|;
name|table
operator|.
name|excludeColumn
argument_list|(
literal|"column2"
argument_list|)
expr_stmt|;
name|table
operator|.
name|excludeColumn
argument_list|(
literal|"column2"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ExcludeColumn
argument_list|>
name|columns
init|=
name|table
operator|.
name|toIncludeTable
argument_list|()
operator|.
name|getExcludeColumns
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"column1"
argument_list|,
name|columns
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|excludeColumns
parameter_list|()
throws|throws
name|Exception
block|{
name|IncludeTable
name|table
init|=
operator|new
name|IncludeTable
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|table
operator|.
name|excludeColumns
argument_list|(
literal|"column1"
argument_list|,
literal|"column2"
argument_list|,
literal|"column2"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ExcludeColumn
argument_list|>
name|columns
init|=
name|table
operator|.
name|toIncludeTable
argument_list|()
operator|.
name|getExcludeColumns
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|columns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"column1"
argument_list|,
name|columns
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|excludeRelationship
parameter_list|()
throws|throws
name|Exception
block|{
name|IncludeTable
name|table
init|=
operator|new
name|IncludeTable
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|table
operator|.
name|excludeRelationship
argument_list|(
literal|"rel1"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ExcludeRelationship
argument_list|>
name|rel
init|=
name|table
operator|.
name|toIncludeTable
argument_list|()
operator|.
name|getExcludeRelationship
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|rel
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rel
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rel1"
argument_list|,
name|rel
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|toIncludeTable
parameter_list|()
throws|throws
name|Exception
block|{
name|IncludeTable
name|table
init|=
operator|new
name|IncludeTable
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|table
operator|.
name|includeColumns
argument_list|(
literal|"column1"
argument_list|,
literal|"column2"
argument_list|)
expr_stmt|;
name|table
operator|.
name|excludeColumns
argument_list|(
literal|"column3"
argument_list|,
literal|"column4"
argument_list|,
literal|"column5"
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|IncludeTable
name|rrTable
init|=
name|table
operator|.
name|toIncludeTable
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"name"
argument_list|,
name|rrTable
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rrTable
operator|.
name|getIncludeColumns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rrTable
operator|.
name|getExcludeColumns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

