begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|IncludeTable
extends|extends
name|PatternParam
block|{
specifier|private
name|Collection
argument_list|<
name|PatternParam
argument_list|>
name|includeColumns
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|PatternParam
argument_list|>
name|excludeColumns
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|PatternParam
argument_list|>
name|excludeRelationships
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|IncludeTable
parameter_list|()
block|{
block|}
name|IncludeTable
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|super
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|setPattern
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|setPattern
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|includeColumn
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|includeColumns
operator|.
name|add
argument_list|(
operator|new
name|PatternParam
argument_list|(
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|includeColumns
parameter_list|(
name|String
modifier|...
name|patterns
parameter_list|)
block|{
for|for
control|(
name|String
name|pattern
range|:
name|patterns
control|)
block|{
name|includeColumn
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|excludeColumn
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|excludeColumns
operator|.
name|add
argument_list|(
operator|new
name|PatternParam
argument_list|(
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|excludeColumns
parameter_list|(
name|String
modifier|...
name|patterns
parameter_list|)
block|{
for|for
control|(
name|String
name|pattern
range|:
name|patterns
control|)
block|{
name|excludeColumn
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param pattern RegExp pattern to use for relationship exclusion      * @since 4.1      */
specifier|public
name|void
name|excludeRelationship
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|excludeRelationships
operator|.
name|add
argument_list|(
operator|new
name|PatternParam
argument_list|(
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param patterns collection of RegExp patterns to use for relationship exclusion      * @since 4.1      */
specifier|public
name|void
name|excludeRelationships
parameter_list|(
name|String
modifier|...
name|patterns
parameter_list|)
block|{
for|for
control|(
name|String
name|pattern
range|:
name|patterns
control|)
block|{
name|excludeRelationship
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
block|}
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|IncludeTable
name|toIncludeTable
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|IncludeTable
name|table
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|IncludeTable
argument_list|()
decl_stmt|;
name|table
operator|.
name|setPattern
argument_list|(
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PatternParam
name|includeColumn
range|:
name|includeColumns
control|)
block|{
name|table
operator|.
name|addIncludeColumn
argument_list|(
name|includeColumn
operator|.
name|toIncludeColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatternParam
name|excludeColumn
range|:
name|excludeColumns
control|)
block|{
name|table
operator|.
name|addExcludeColumn
argument_list|(
name|excludeColumn
operator|.
name|toExcludeColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatternParam
name|excludeRelationship
range|:
name|excludeRelationships
control|)
block|{
name|table
operator|.
name|addExcludeRelationship
argument_list|(
name|excludeRelationship
operator|.
name|toExcludeRelationship
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
block|}
end_class

end_unit

