begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|ClassLoaderManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|gradle
operator|.
name|api
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|gradle
operator|.
name|api
operator|.
name|artifacts
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|gradle
operator|.
name|api
operator|.
name|artifacts
operator|.
name|ConfigurationContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|gradle
operator|.
name|api
operator|.
name|artifacts
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|gradle
operator|.
name|api
operator|.
name|artifacts
operator|.
name|DependencySet
import|;
end_import

begin_comment
comment|/**  * Gradle class loader manager to update class loader urls with project dependencies.  *  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|GradlePluginClassLoaderManager
implements|implements
name|ClassLoaderManager
block|{
specifier|private
name|Project
name|project
decl_stmt|;
specifier|private
name|List
argument_list|<
name|URL
argument_list|>
name|urls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|GradlePluginClassLoaderManager
parameter_list|(
specifier|final
name|Project
name|project
parameter_list|)
block|{
name|this
operator|.
name|project
operator|=
name|project
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ClassLoader
name|getClassLoader
parameter_list|(
specifier|final
name|String
name|resourceName
parameter_list|)
block|{
return|return
name|buildClassLoader
argument_list|()
return|;
block|}
specifier|private
name|void
name|addUrlFromDependency
parameter_list|(
specifier|final
name|Dependency
name|dependency
parameter_list|,
specifier|final
name|Configuration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|dependency
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|configuration
operator|.
name|files
argument_list|(
name|dependency
argument_list|)
operator|.
name|forEach
argument_list|(
name|this
operator|::
name|addUrlFromFile
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addUrlFromFile
parameter_list|(
specifier|final
name|File
name|file
parameter_list|)
block|{
try|try
block|{
name|urls
operator|.
name|add
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
block|}
block|}
specifier|private
name|ClassLoader
name|buildClassLoader
parameter_list|()
block|{
name|ClassLoader
name|classLoader
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|ConfigurationContainer
name|configurations
init|=
name|project
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
if|if
condition|(
name|configurations
operator|==
literal|null
operator|||
name|configurations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|classLoader
return|;
block|}
name|Configuration
name|configuration
init|=
name|configurations
operator|.
name|getByName
argument_list|(
literal|"compile"
argument_list|)
decl_stmt|;
name|DependencySet
name|dependencies
init|=
name|configuration
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
if|if
condition|(
name|dependencies
operator|==
literal|null
operator|||
name|dependencies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|classLoader
return|;
block|}
name|dependencies
operator|.
name|forEach
argument_list|(
name|dependency
lambda|->
name|addUrlFromDependency
argument_list|(
name|dependency
argument_list|,
name|configuration
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|URLClassLoader
argument_list|(
name|urls
operator|.
name|toArray
argument_list|(
operator|new
name|URL
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

