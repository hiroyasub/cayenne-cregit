begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|groovy
operator|.
name|lang
operator|.
name|Closure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|gradle
operator|.
name|util
operator|.
name|ConfigureUtil
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|SchemaContainer
extends|extends
name|FilterContainer
block|{
name|Collection
argument_list|<
name|FilterContainer
argument_list|>
name|schemas
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|SchemaContainer
parameter_list|()
block|{
block|}
name|SchemaContainer
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|schema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|schemas
operator|.
name|add
argument_list|(
operator|new
name|FilterContainer
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|schema
parameter_list|(
name|Closure
argument_list|<
name|?
argument_list|>
name|closure
parameter_list|)
block|{
name|schemas
operator|.
name|add
argument_list|(
name|ConfigureUtil
operator|.
name|configure
argument_list|(
name|closure
argument_list|,
operator|new
name|FilterContainer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|schema
parameter_list|(
name|String
name|name
parameter_list|,
name|Closure
argument_list|<
name|?
argument_list|>
name|closure
parameter_list|)
block|{
name|schemas
operator|.
name|add
argument_list|(
name|ConfigureUtil
operator|.
name|configure
argument_list|(
name|closure
argument_list|,
operator|new
name|FilterContainer
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Catalog
name|toCatalog
parameter_list|()
block|{
name|Catalog
name|catalog
init|=
name|fillContainer
argument_list|(
operator|new
name|Catalog
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FilterContainer
name|container
range|:
name|schemas
control|)
block|{
name|catalog
operator|.
name|addSchema
argument_list|(
name|container
operator|.
name|fillContainer
argument_list|(
operator|new
name|Schema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|catalog
return|;
block|}
block|}
end_class

end_unit

