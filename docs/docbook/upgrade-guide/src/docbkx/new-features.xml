<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements. See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to you under the Apache License, Version
    2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under the
    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied. See the License for
    the specific language governing permissions and limitations under the
    License.
-->
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <title>Guide to 4.0 Features</title>
    <para>This guide highlights the new features and changes introduced in Apache Cayenne 4.0. For a
        full list of changes consult RELEASE-NOTES.txt included in
        Cayenne download. For release-specific upgrade instructions check UPGRADE.txt.</para>

    <section xml:id="java-version">
        <title>Java Version</title>
        <para>Minimal required JDK verision is 1.6 or newer. Cayenne 4.0 is fully tested with Java
            1.6,  1.7, 1.8.</para>
    </section>
    <section xml:id="cayenne-configuration">
        <title>Cayenne Configuration</title>
        <section>
            <title>ServerRuntimeBuilder</title>
            <para>Cayenne 3.1 introduced dependency injection and ServerRuntime. 4.0 provides a very
                convenient utility to create a custom runtime with various extensions. This reduces
                the code needed to integrate Cayenne in your environment to just a few lines and no
                boilerplate.
                E.g.:<programlisting>ServerRuntime runtime = new ServerRuntimeBuilder("myproject")
        .addConfigs("cayenne-project1.xml", "cayenne-project2.xml")
        .addModule(binder -> binder.bind(JdbcEventLogger.class).toInstance(myLogger))
        .dataSource(myDataSource)
        .build();</programlisting></para>
        </section>
    </section>
    <section xml:id="framework-api">
        <title>Framework API</title>
        <section>
            <title>Fluent Query API</title>
            <para>Fluent Query API is one of the most exciting new features in Cayenne 4.0. There
                are many parts that make it possible (most are described below). But in essence this
                is a number of new "chainable" queries that allow to write query assembly and
                execution code on one line. The most useful fluent queries are ObjectSelect,
                SQLSelect and SelectById:</para>
            <section>
                <title>ObjectSelect</title>
                <para>A "chainable" analog of SelectQuery.
                    <programlisting>Artist a = ObjectSelect
     .query(Artist.class)
     .where(Artist.ARTIST_NAME.eq("Picasso"))
     .selectOne(context);</programlisting></para>
            </section>
            <section>
                <title>SQLSelect</title>
                <para>A "chainable" analog of SQLTemplate used specifically to run selecting raw
                    SQL:<programlisting>List&lt;Long> ids = SQLSelect
     .scalarQuery(Long.class, "SELECT ARTIST_ID FROM ARTIST ORDER BY ARTIST_ID")
     .select(context);</programlisting></para>
                
            </section>
            <section>
                <title>SelectById</title>
                <para>There's really no good analog of SelectById in Cayenne prior to 4.0.
                    Previously available ObjectIdQuery didn't support half of the features of
                    SelectById (e.g. caching consistent with other queries, prefetches, etc.)
                    :<programlisting>Artist a = SelectById
     .query(Artist.class, 3)
     .useLocalCache("g1")
     .selectOne(context)</programlisting></para>
                
            </section>
        </section>
        
        <section>
            <title>Generics in Expressions and Queries</title>
            <para>We finished the work of "genericizing" Cayenne APIs started in 3.1. Now all APIs
                dealing with persistent objects (Expressions, Queries, ObjectContext, etc.) support
                generics of Persistent object type or attribute property type.</para>
        </section>
        <section>
            <title>Property API</title>
            <para>Persistent superclasses (_MyEntity) now contain a set of static Property&lt;T>
                variables generated from the model. These metadata objects make possible to create
                type-safe Expressions and other query parts.</para>
        </section>
    </section>
    <section xml:id="cayenne-modeler">
        <title>CayenneModeler</title>
        <section>
            <title>Improved UI</title>
            <para>CayenneModeler features a number of UI improvements. Attributes and relationships are
                now edited in the same view (no need to switch between the tabs). Project tree allows to
                easily filter elements by type and quickly collapse the tree.</para>
        </section>
        <section>
            <title>Dropped Support for Mapping Listeners</title>
            <para>Managing listeners in the DataMap XML model is counterproductive and confusing, so
                support for listeners was removed from both the XML and the Modeler. If you
                previously had listeners mapped in the model, annotate their callback methods, and
                perform listener registration in the code:
                <programlisting>runtime.getDataDomain().addListener(myListener);</programlisting>Entity
                callbacks on the other hand are managed in the Modeler as before.</para>
        </section>
    </section>
    <section xml:id="build-tools">
        <title>Build Tools</title>
        <section>
            <title>cdbimport</title>
            <para>"cdbimport" has evolved from </para>
        </section>
        <section>
            <title>cgen</title>
            <para>As was mentioned above, cgen now includes Property&lt;T> static variables for
                expression building. It is also made smarter about its defaults for "destDir" and
                "superPkg".</para>
        </section>
    </section>
</article>
