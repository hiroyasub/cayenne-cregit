<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:id="re-filtering">
    <title>Filtering</title>
    <para>
        The first thing you usually want to control during reverse engineering is what exactly should be loaded from database and
        what not. One of the most common cases is excluding system tables, as you usually don't want to map them.
    </para>
    <para>
        Briefly, you are able to include/exclude tables, columns and procedures and do it at several levels: default, catalog, schema.
        Although everything defined at the top level (default rules) will be applied for the nested elements, all rules from the most specific
        areas will override general rules (i.e. rules from schemas override rules from catalogs and even more override default rules).
    </para>
    <para>
        The following use-cases will provide you a better understanding of how filtering works and how you could use it.
    </para>
    <section xml:id="everything-schema-catalog">
        <title>Process everything from schema/catalog</title>
        <para>
            The simplest example of reverse engineering is processing tables from one schema of catalog and there are several options to do this. 
            Basic syntax is described below:
        </para>
        <programlisting language="xml">
            &lt;!-- Ant/Maven in case you only want to specify the schema to import --&gt;
            &lt;schema&gt;SCHEMA_NAME&lt;/schema&gt;

            &lt;!-- Maven way in case you have nested elements in the schema  --&gt;
            &lt;schema&gt;
                &lt;name&gt;SCHEMA_NAME&lt;/name&gt;
                ...
            &lt;/schema&gt;

            &lt;!-- Ant way in case you have nested elements in the schema --&gt;
            &lt;schema name="SCHEMA_NAME"&gt;
                ...
            &lt;/schema&gt;
        </programlisting>
        <para>
            The same options are available for catalogs:
        </para>
        <programlisting language="xml">
            &lt;!-- Ant/Maven in case you only want to specify the catalog to import --&gt;
            &lt;catalog&gt;CATALOG_NAME&lt;/catalog&gt;
            
            &lt;!-- Maven way in case you have nested elements in the catalog --&gt;
            &lt;catalog&gt;
                &lt;name&gt;CATALOG_NAME&lt;/name&gt;
                ...
            &lt;/catalog&gt;

            &lt;!-- Ant way in case you have nested elements in the catalog --&gt;
                &lt;catalog name="CATALOG_NAME"&gt;
                ...
            &lt;/catalog&gt;
        </programlisting>
    </section>
    <section xml:id="combine-schema-catalog">
        <title>Combine Schema and Catalog filters</title>
        <para>
            Cayenne supports combination of different schemas and catalogs, and it filters data according to your requirements. 
            You could achieve this by the following example of reverse engineering configuration:
        </para>
        <programlisting language="xml">
            &lt;configuration&gt;
                ...
                &lt;reverseEngineering&gt;
                
                    &lt;catalog name="shop_01"&gt;
                        &lt;schema name="schema-name-01"/&gt;
                        &lt;schema name="schema-name-02"/&gt;
                        &lt;schema name="schema-name-03"/&gt;
                    &lt;/catalog&gt;

                    &lt;catalog name="shop_02"&gt;
                        &lt;schema name="schema-name-01"/&gt;
                    &lt;/catalog&gt;

                    &lt;catalog name="shop_03"&gt;
                        &lt;schema name="schema-name-01"/&gt;
                        &lt;schema name="schema-name-02"/&gt;
                        &lt;schema name="schema-name-03"/&gt;
                    &lt;/catalog&gt;
                    
                &lt;/reverseEngineering&gt;
                ...
            &lt;/configuration&gt;
        </programlisting>
        <para>
            In the example above, Cayenne reverse engineering process contains three catalogs named as shop_01, shop_02 and shop_03, 
            each of wich has their own schemas. Cayenne will load all data only from the declared catalogs and schemas.
        </para>
        <para>
            If you want to load everything from database, you could simply declare catalog specification alone.
        </para>
        <programlisting language="xml">
            &lt;configuration&gt;
                ...
                &lt;reverseEngineering&gt;
                
                    &lt;catalog name="shop_01"/&gt;
                    &lt;catalog name="shop_02"/&gt;
                    &lt;catalog name="shop_03"/&gt;

                &lt;/reverseEngineering&gt;
                ...
            &lt;/configuration&gt;
        </programlisting>
        <para>
            If you want to do reverse engineering for specific schemas, just remove unwanted schemas from the catalog section. 
            For example, if you want to process schema-name-01 and schema-name-03 schemas only, then you should change reverse engineering section like this.
        </para>
        <programlisting language="xml">
            &lt;configuration&gt;
                ...
                &lt;reverseEngineering&gt;
                
                    &lt;catalog name="shop_01"&gt;
                        &lt;schema name="schema-name-01"/&gt;
                        &lt;schema name="schema-name-03"/&gt;
                    &lt;/catalog&gt;

                    &lt;catalog name="shop_02"&gt;
                        &lt;schema name="schema-name-01"/&gt;
                    &lt;/catalog&gt;

                    &lt;catalog name="shop_03"&gt;
                        &lt;schema name="schema-name-01"/&gt;
                        &lt;schema name="schema-name-03"/&gt;
                    &lt;/catalog&gt;
                    
                &lt;/reverseEngineering&gt;
                ...
            &lt;/configuration&gt;
        </programlisting>
    </section>
    <section xml:id="including-excluding-tables-columns-procedures">
        <title>Including and Excluding tables, columns and procedures</title>
        <para>
            <itemizedlist>
                <listitem>
                    <para>1. Include tables with ‘CRM_’ prefix if you are working in that domain of application:</para>
                    <programlisting language="xml">
                &lt;includeTable&gt;CRM_.*&lt;/includeTable&gt;
                    </programlisting>
                </listitem>
                <listitem>
                    <para>2. Include tables with ‘_LOOKUP’ suffix</para>
                    <programlisting language="xml">
                &lt;includeTable&gt;
                    &lt;pattern&gt;.*_LOOKUP&lt;/pattern&gt;
                &lt;/includeTable&gt;
                    </programlisting>
                </listitem>
                <listitem>
                    <para>3. Exclude tables with ‘CRM_’ prefix if you are not working only in that domain of application:</para>
                    <programlisting language="xml">
                &lt;excludeTable&gt;CRM_.*&lt;/excludeTable&gt;
                    </programlisting>
                </listitem>
                <listitem>
                    <para>4. Include only specific columns that follows specific naming convention:</para>
                    <programlisting language="xml">
                &lt;includeColumn&gt;includeColumn01&lt;/includeColumn&gt;
                &lt;includeColumn pattern="includeColumn03"/&gt;
                    </programlisting>
                </listitem>
                <listitem>
                    <para>5. Exclude system or obsolete columns:</para>
                    <programlisting language="xml">
                &lt;excludeColumn&gt;excludeColumn01&lt;/excludeColumn&gt;
                &lt;excludeColumn pattern="excludeColumn03"/&gt;
                    </programlisting>
                </listitem>
                <listitem>
                    <para>6. Include/Exclude columns for particular table or group of tables:</para>
                    <programlisting language="xml">
                &lt;includeTable pattern="table pattern"&gt;
                    &lt;includeColumn pattern="includeColumn01"/&gt;
                    &lt;excludeColumn pattern="excludeColumn01"/&gt;
                &lt;/includeTable&gt;
                    </programlisting>
                </listitem>
                <listitem>
                    <para>7. Include stored procedures:</para>
                    <programlisting language="xml">
                &lt;includeProcedure&gt;includeProcedure01&lt;/includeProcedure&gt;
                &lt;includeProcedure pattern="includeProcedure03"/&gt;
                    </programlisting>
                </listitem>
                <listitem>
                    <para>8. Exclude stored procedures by pattern:</para>
                    <programlisting language="xml">
                &lt;excludeProcedure&gt;excludeProcedure01&lt;/excludeProcedure&gt;
                &lt;excludeProcedure pattern="excludeProcedure03"/&gt;
                    </programlisting>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            All filtering tags includeTable, excludeTable, includeColumn, excludeColumn, includeProcedure and excludeProcedure have three ways 
            to pass filtering RegExp.
            <itemizedlist>
                <listitem>
                    <para>text inside tag</para>
                    <programlisting language="xml">
                &lt;includeTable&gt;CRM_.*&lt;/includeTable&gt;
                    </programlisting>
                </listitem>
                <listitem>
                    <para>pattern attribute</para>
                    <programlisting language="xml">
                &lt;excludeProcedure pattern="excludeProcedure03"/&gt;
                    </programlisting>
                </listitem>
                <listitem>
                    <para>pattern inner tag</para>
                    <programlisting language="xml">
                &lt;includeTable&gt;
                    &lt;pattern&gt;.*_LOOKUP&lt;/pattern&gt;
                &lt;/includeTable&gt;
                    </programlisting>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            All filtering tags can be placed inside schema and catalog tags, but also inside &lt;reverseEngineering&gt; tag. It means that filtering rules
            will be applied for all schemas and catalogs.
        </para>
    </section>
    <section xml:id="complete-filtering-example">
        <title>Complete filtering example</title>
        <para>
            Initially, let’s make a small sample. Consider the following reverse engineering configuration.
        </para>
        <programlisting language="xml">
                &lt;reverseEngineering&gt;
                    &lt;catalog&gt;shop-01&lt;/catalog&gt;
                &lt;/reverseEngineering&gt;
        </programlisting>
        <para>
            In this case reverse engineering will not filter anything from the shop-01 catalog. If you really want to filter database columns, tables, 
            stored procedures and relationships, you could do it in the following way.
        </para>
        <programlisting language="xml">
                &lt;reverseEngineering&gt;
                    &lt;catalog&gt;shop-01&lt;/catalog&gt;
                    &lt;catalog name="shop-02"&gt;
                        &lt;includeTable&gt;includeTable-01&lt;/includeTable&gt;
                    &lt;/catalog&gt;
                &lt;/reverseEngineering&gt;
        </programlisting>
        <para>
            Then Cayenne will do reverse engineering for both shop-01 and shop-02 catalogs. First catalog will not be processed for filtering,
            but the second catalog will be processed with “includeTable-01” filter. 
        </para>
        <para>
            Let’s assume you have a lot of table prefixes with the same names. Cayenne allows you to mention a pattern as regular expression.
            Using regular expressions is easier way to handle a big amount of database entities than writing filter config for each use-case.
            They make your configuration more readable, understandable and straightforward. There is not complex.
            Let’s see how to use patterns in reverse engineering configuration with complete example.
        </para>
        <programlisting language="xml">
                &lt;reverseEngineering&gt;

                    &lt;catalog&gt;shop-01&lt;/catalog&gt;

                    &lt;catalog&gt;
                        &lt;name&gt;shop-02&lt;/name&gt;
                    &lt;/catalog&gt;

                    &lt;catalog name="shop-03"&gt;
                        &lt;includeTable&gt;includeTable-01&lt;/includeTable&gt;

                        &lt;includeTable&gt;
                            &lt;pattern&gt;includeTable-02&lt;/pattern&gt;
                        &lt;/includeTable&gt;

                        &lt;includeTable pattern="includeTable-03"&gt;
                            &lt;includeColumn pattern="includeColumn-01"/&gt;
                            &lt;excludeColumn pattern="excludeColumn-01"/&gt;
                        &lt;/includeTable&gt;

                        &lt;excludeTable&gt;excludeTable-01&lt;/excludeTable&gt;

                        &lt;excludeTable&gt;
                            &lt;pattern&gt;excludeTable-02&lt;/pattern&gt;
                        &lt;/excludeTable&gt;

                        &lt;excludeTable pattern="excludeTable-03"/&gt;
                        
                        &lt;includeColumn&gt;includeColumn-01&lt;/includeColumn&gt;
                        
                        &lt;includeColumn&gt;
                            &lt;pattern&gt;includeColumn-02&lt;/pattern&gt;
                        &lt;/includeColumn&gt;
                        
                        &lt;includeColumn pattern="includeColumn-03"/&gt;

                        &lt;excludeColumn&gt;excludeColumn-01&lt;/excludeColumn&gt;
                        
                        &lt;excludeColumn&gt;
                            &lt;pattern&gt;excludeColumn-02&lt;/pattern&gt;
                        &lt;/excludeColumn&gt;
                        
                        &lt;excludeColumn pattern="excludeColumn-03"/&gt;
                        
                        &lt;includeProcedure&gt;includeProcedure-01&lt;/includeProcedure&gt;
                        
                        &lt;includeProcedure&gt;
                            &lt;pattern&gt;includeProcedure-02&lt;/pattern&gt;
                        &lt;/includeProcedure&gt;
                        
                        &lt;includeProcedure pattern="includeProcedure-03"/&gt;

                        &lt;excludeProcedure&gt;excludeProcedure-01&lt;/excludeProcedure&gt;
                        
                        &lt;excludeProcedure&gt;
                            &lt;pattern&gt;excludeProcedure-02&lt;/pattern&gt;
                        &lt;/excludeProcedure&gt;
                        
                        &lt;excludeProcedure pattern="excludeProcedure-03"/&gt;

                    &lt;/catalog&gt;
                &lt;/reverseEngineering&gt;
        </programlisting>
        <para>
            The example above should provide you more idea about how to use filtering and patterns in Cayenne reverse engineering.
            You could notice that this example demonstrates you the "name" and "pattern" configurations. Yes, you could use these as separates xml element
            and xml attributes.
        </para>
        <para>
            The cdbimport will execute reverse engineering task for all entities from “shop-01” and “shop-02”, including tables, views, stored procedures
            and table columns. As “shop-03” has variety filter tags, entities from this catalog will be filtered by cdbimport.
        </para>
    </section>
</chapter>
