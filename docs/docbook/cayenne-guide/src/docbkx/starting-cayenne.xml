<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
	version="5.0" xml:id="starting-cayenne">
	<title>Starting Cayenne</title>
	<section xml:id="starting-serverruntime">
		<title>Starting and Stopping ServerRuntime</title>
		<para>In runtime Cayenne is accessed via
				<code>org.apache.cayenne.configuration.server.ServerRuntime</code>. ServerRuntime is
			created simply by calling a
			constructor:<programlisting>ServerRuntime runtime = 
	new ServerRuntime("com/example/cayenne-project.xml");</programlisting></para>
		<para>The parameter you pass to the constructor is a location of the main project file. Location
			is a '/'-separated path (same path separator is used on UNIX and Windows) that is
			resolved relative to the application classpath. The project file can be placed in the
			root package or in a subpackage (e.g. in the code above it is in "com/example"
			subpackage).</para>
		<para>ServerRuntime encapsulates a single Cayenne stack. Most applications will just have one
			ServerRuntime using it to create as many ObjectContexts as needed, access the Dependency
			Injection (DI) container and work with other Cayenne features. Internally ServerRuntime
			is just a thin wrapper around the DI container. Detailed features of the container are
			discussed in "Customizing Cayenne Runtime" chapter. Here we'll just show an example of
			how an application might replace a default implementation of a built-in Cayenne service
			(in this case - QueryCache) with a different
			class:<programlisting>public class MyExtensionsModule implements Module {
	public void configure(Binder binder) {
		binder.bind(QueryCache.class).to(EhCacheQueryCache.class);
	}	
}</programlisting><programlisting>Module extensions = new MyExtensionsModule();
ServerRuntime runtime = 
	new ServerRuntime("com/example/cayenne-project.xml", extensions);</programlisting></para>
		<para>It is a good idea to shut down the runtime when it is no longer needed, usually before the
			application itself is shutdown: <programlisting>runtime.shutdwon();</programlisting>When
			a runtime object has the same scope as the application, this may not be always
			necessary, however in some cases it is essential, and is generally considered a good
			practice. E.g. in a web container hot redeploy of a webapp will cause resource leaks and
			eventual OutOfMemoryError if the application fails to shutdown CayenneRuntime.</para>
	</section>
	<section>
		<title>Merging Multiple Projects</title>
		<para>ServerRuntime requires at least one mapping project to run. But it can also take multiple
			projects and merge them together in a single configuration. This way different parts of
			a database can be mapped independenlty from each other (even by different software
			providers), and combined in runtime when assembling an application. Doing it is as easy
			as passing multiple project locations to ServerRuntime constructor:</para><programlisting>ServerRuntime runtime = 
	new ServerRuntime(new String[] {
		"com/example/cayenne-project.xml",
		"org/foo/cayenne-library1.xml",
		"org/foo/cayenne-library2.xml"
	}
);</programlisting>
		<para>When the projects are merged, the following rules are applied:<itemizedlist>
				<listitem>
					<para>The order of projects matters during merge. If there are two conflicting
						metadata objects belonging to two projects, an object from the <emphasis
							role="italic">last</emphasis> project takes precedence over the object
						from the first one. This makes possible to override pieces of metadata. This
						is also similar to how DI modules are merged in Cayenne.</para>
				</listitem>
				<listitem>
					<para>Runtime DataDomain name is set to the name of the last project in the
						list.</para>
				</listitem>
				<listitem>
					<para>Runtime DataDomain properties are the same as the properties of the last
						project in the list. I.e. <emphasis role="italic">properties are not
							merged</emphasis> to avoid invalid combinations and unexpected runtime
						behavior.</para>
				</listitem>
				<listitem>
					<para>If there are two or more DataMaps with the same name, only one DataMap is
						used in the merged project, the rest are discarded. Same precedence rules
						apply - DataMap from the project with the highest index in the project list
						overrides all other DataMaps with the same name.</para>
				</listitem>
				<listitem>
					<para>If there are two or more DataNodes with the same name, only one DataNodes
						is used in the merged project, the rest are discarded. DataNode coming from
						project with the highest index in the project list is chosen per precedence
						rule above.</para>
				</listitem>
				<listitem>
					<para>There is a notion of "default" DataNode. After the merge if any DataMaps
						are not explicitly linked to DataNodes, their queries will be executed via a
						default DataNode. This makes it possible to build mapping "libraries" that
						are only associated with a specific database in runtime. If there's only one
						DataNode in the merged project, it will be automatically chosen as default.
						A possible way to explicitly designate a specific node as default is to
						override <code>DataDomainProvider.createAndInitDataDomain()</code>.</para>
				</listitem>
			</itemizedlist></para>
	</section>
	<section xml:id="webapps">
		<title>Web Applications</title>
	</section>
</chapter>
