<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements. See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to you under the Apache License, Version
    2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under the
    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied. See the License for
    the specific language governing permissions and limitations under the
    License.
-->
<appendix xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:id="service-collections">
    <title>Service Collections</title>
    <para>Note that the collection keys below are
                defined as constants in <code>org.apache.cayenne.configuration.Constants</code>
                interface.</para>
    <para>
        <table frame="void">
            <caption>Service Collection Keys Present in ServerRuntime and/or ClientRuntime</caption>
            <col width="42%"/>
            <col width="25%"/>
            <col width="33%"/>
            <thead>
                <tr>
                    <th>Collection Property</th>
                    <th>Type</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><code>cayenne.properties</code></td>
                    <td><code>Map&lt;String,String></code></td> 
                    <td>Properties used by built-in
                        Cayenne services. The keys in this map are the property names from the table
                        in Appendix A. Separate copies of this map exist on the server and ROP
                        client.</td>
                </tr>
                <tr>
                    <td><code>cayenne.server.adapter_detectors</code></td>
                    <td><code>List&lt;DbAdapterDetector></code></td>
                    <td>Contains
                        objects that can discover the type of current database and install the
                        correct DbAdapter in runtime.</td>
                </tr>
                <tr>
                    <td><code>cayenne.server.domain_filters</code></td>
                    <td><code>List&lt;DataChannelFilter></code></td>
                    <td>Stores DataDomain filters.</td>
                </tr>
                <tr>
                    <td><code>cayenne.server.project_locations</code></td>
                    <td><code>List&lt;String></code></td>
                    <td>Stores locations of the one of more project configuration files.</td>
                </tr>
                <tr>
                    <td><code>cayenne.server.default_types</code></td>
                    <td><code>List&lt;ExtendedType></code></td>
                    <td>Stores default adapter-agnostic ExtendedTypes. Default ExtendedTypes can be
                        overridden / extended by DB-specific DbAdapters as well as by user-provided
                        types configured in another colltecion (see
                        <code>"cayenne.server.user_types"</code>).</td>
                </tr>
                <tr>
                    <td><code>cayenne.server.user_types</code></td>
                    <td><code>List&lt;ExtendedType></code></td>
                    <td>Stores a
                        user-provided ExtendedTypes. This collection will be merged into a full list
                        of ExtendedTypes and would override any ExtendedTypes defined in a default
                        list, or by a DbAdapter.</td>
                </tr>
                <tr>
                    <td><code>cayenne.server.type_factories</code></td>
                    <td><code>List&lt;ExtendedTypeFactory></code></td>
                    <td>Stores default and user-provided ExtendedTypeFactories. ExtendedTypeFactory
                        allows to define ExtendedTypes dynamically for the whole group of Java
                        classes. E.g. Cayenne supplies a factory to map all Enums regardless of
                        their type.</td>
                </tr>
                <tr>
                    <td><code>cayenne.server.rop_event_bridge_properties</code></td>
                    <td><code>Map&lt;String, String></code></td>
                    <td>Stores event bridge properties passed to the ROP client on
                        bootstrap. This means that the map is configured by server DI, and passed to
                        the client via the wire. The properties in this map are specific to
                        EventBridgeFactory implementation (e.g JMS or XMPP connection prameters).
                        One common property is <code>"cayenne.server.rop_event_bridge_factory"</code> that
                        defines the type of the factory.</td>
                </tr>
            </tbody>
        </table>
    </para>

</appendix>
