<?xml version="1.0" encoding="UTF-8"?>
<!--
	Licensed to the Apache Software Foundation (ASF) under one or more
	contributor license agreements. See the NOTICE file distributed with
	this work for additional information regarding copyright ownership.
	The ASF licenses this file to you under the Apache License, Version
	2.0 (the "License"); you may not use this file except in compliance
	with the License. You may obtain a copy of the License at
	
	http://www.apache.org/licenses/LICENSE-2.0 Unless required by
	applicable law or agreed to in writing, software distributed under the
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
	CONDITIONS OF ANY KIND, either express or implied. See the License for
	the specific language governing permissions and limitations under the
	License.
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:id="re-relationships-loading-control">
    <title>Relationships Loading Control</title>
    <para>
        In databases relations are defined via foreign keys and there are a lot of different politics according to the level of relationships and 
        ways how those relationships could be modeled in database. Anyway, cdbimport is able to recognize basic patterns of relationships, such as
        OneToMany, OneToOne and ManyToMany. 
    </para>
    <section xml:id="one-to-many">
        <title>OneToMany relationships</title>
        <para>
            One to many is the simplest case of the database relationships:
            <itemizedlist>
                <listitem>
                    <para>There is a table A with primary key A.ID</para>
                </listitem>
                <listitem>
                    <para>There is a table B with primary key B.ID and foreign key B.A_ID (defined through db reference)</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            This is a way to model one-to-many relationship from table A to table B. Note that this is an implicit relationship, because table A don’t have
            any evidence of data linkage with B. On the other hand, table B have explicit (column A_ID) link to the table A and it can have only one 
            corresponding row from the table A. That’s why for the  table B it is many-to-one relationships. 
        </para>
        <para>
            This pattern is the most common, easily recognisable and successfully handled by cdbimport.
        </para>
    </section>
    <section xml:id="one-to-one">
        <title>OneToOne relationships</title>
        <para>
            One-to-one relationships are very similar with one-to-many. The only difference is that foreign key at the second table should also be a primary key:
            <itemizedlist>
                <listitem>
                    <para>There is a table A with primary key A.ID </para>
                </listitem>
                <listitem>
                    <para>There is a table B with primary key B.A_ID and foreign key B.A_ID (defined through db reference)</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            Overall, it means that there is one primary key for both tables. Only such structure will be treated as one-to-one relationship by cdbimport.
        </para>
    </section>
    <section xml:id="many-to-many">
        <title>ManyToMany</title>
        <para>
            This type of relationships usually modeled via join or junction table (<link xlink:href="http://en.wikipedia.org/wiki/Junction_table">http://en.wikipedia.org/wiki/Junction_table</link>).
            It is also successfully handled by cdbimport. Notice that join table should contain two and only two columns. Both of this columns 
            should be included as primary keys. 
        </para>
    </section>
    <section xml:id="skip-relationships-loading">
        <title>Skip Relationships Loading</title>
        <para>
            You are able to skip relationships loading by the <code language="xml">&lt;skipRelationshipsLoading&gt;</code> element.
        </para>
        <programlisting language="xml">
    &lt;reverseEngineering&gt;
        &lt;skipRelationshipsLoading&gt;true&lt;skipRelationshipsLoading&gt;
    &lt;/reverseEngineering&gt;</programlisting>
    </section>
    <section xml:id="skip-pk-loading">
        <title>Skip Primary Keys Loading</title>
        <para>
            Another useful Cayenne reverse engineering property is <code language="xml">&lt;skipPrimaryKeyLoading&gt;</code>. If you decide to support all relationships at the application layer
            and avoid their management in database, you’ll find useful to turn off primary keys synchronization at all.
        </para>
        <programlisting language="xml">
    &lt;reverseEngineering&gt;
        &lt;skipPrimaryKeyLoading&gt;true&lt;skipPrimaryKeyLoading&gt;
    &lt;/reverseEngineering&gt;</programlisting>
    </section>
</chapter>
