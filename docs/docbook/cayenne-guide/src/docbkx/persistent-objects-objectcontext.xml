<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
	version="5.0" xml:id="persistent-objects-objectcontext">
	<title>Persistent Objects and ObjectContext</title>
	<section xml:id="objectcontext">
		<title>ObjectContext</title>
		<para>ObjectContext is an interface that users normally work with to access the database. It
			provides the API to execute database operations and to manage persistent objects. A
			context is obtained from the
			ServerRuntime:<programlisting>ObjectContext context = runtime.getContext();</programlisting></para>
		<para>The call above creates a new instance of ObjectContext that can work with this
			particualr Cayenne stack. ObjectContext is a single "work area" in Cayenne, storing
			persistent objects. ObjectContext guarantees that for each database row with a unique ID
			it will contain at most one instance of an object, thus ensuring object graph
			consistency between multiple selects (a feature called "uniquing"). At the same time
			different ObjectContexts will have independent copies of objects for each unique
			database row. This allows users to isolate object changes from one another by using
			separate ObjectContexts.</para>
		<para>These properties directly affect the strategies for scoping and sharing (or not
			sharing) ObjectContexts. Contexts that are only used to fetch objects from the database
			and whose objects are never modified by the application can be shared between mutliple
			users (and multiple threads). Contexts that store modified objects should be accessed
			only by a single user (e.g. a web application user might reuse a context instance
			between multiple web requests in the same HttpSession, thus carrying uncommitted changes
			to objects from request to request, until he decides to commit or rollback them). Even
			for a single user it might make sense to use mutliple ObjectContexts (e.g.
			request-scoped contexts to allow concurrent requests from the browser that change and
			commit objects independently).</para>
		<para>ObjectContext is serializable and does not permanently hold to any of the application
			resources. So it does not have to be closed. If the context is not used anymore, it
			should simply be allowed to go out of scope and get garbage collected, just like any
			other Java object.</para>
	</section>
	<section xml:id="persistent-lifecycle">
		<title>Persistent and its Lifecycle</title>
		<para>Cayenne can persist Java objects that implement <code>org.apache.cayenne.Persistent</code>
			interface. Generally persistent objects are created from the model via class generation
			as described above, so users do not have to worry about implementation details. </para>
		<para>Persistent interface provides access to 3 persistence-related properties - objectId,
			persistenceState and objectContext. All 3 are initialized by Cayenne runtime framework.
			Application code should not attempt to change them them. However it is allowed to read
			them, which provides valuable runtime information. E.g. ObjectId can be used for quick
			equality check of 2 objects, knowing persistence state would allow highlighting changed
			objects, etc.</para>
		<para>Each persistent object belongs to a single ObjectContext, and can be in one of the following
			persistence states (as defined in <code>org.apache.cayenne.PersistenceState</code>)
				:<table frame="void">
				<caption>Persistence States</caption>
				<col width="16%"/>
				<col width="84%"/>
				<tbody>
					<tr>
						<td>TRANSIENT</td>
						<td>The object is not registered with an ObjectContext and will not be
							persisted.</td>
					</tr>
					<tr>
						<td>NEW</td>
						<td>The object is freshly registered in an ObjectContext, but has not been
							saved to the database yet and there is no matching database row.</td>
					</tr>
					<tr>
						<td>COMMITTED</td>
						<td>The object is registered in an ObjectContext, there is a row in the
							database corresponding to this object, and the object state corresponds
							to the last known state of the matching database row.</td>
					</tr>
					<tr>
						<td>MODIFIED</td>
						<td>The object is registered in an ObjectContext, there is a row in the
							database corresponding to this object, but the object in-memory state
							has diverged from the last known state of the matching database
							row.</td>
					</tr>
					<tr>
						<td>HOLLOW</td>
						<td>The object is registered in an ObjectContext, there is a row in the
							database corresponding to this object, but the object state is unknown.
							Whenever an application tries to access a property of such object,
							Cayenne attempts reading its values from the database and "inflate" the
							object, turning it to COMMITED.</td>
					</tr>
					<tr>
						<td>DELETED</td>
						<td>The object is registered in an ObjectContext and has been marked for
							deletion in-memory. The corresponding row in the database will get
							deleted upon ObjectContext commit, and the object state will be turned
							into TRANSIENT.</td>
					</tr>
				</tbody>
			</table></para>
	</section>
	<section xml:id="persistent-operations">
		<title>Persistent Operations</title>
	</section>
	<section xml:id="cayenne-helper-class">
		<title>Cayenne Helper Class</title>
	</section>
	<section xml:id="objectcontext-nesting">
		<title>ObjectContext Nesting</title>
	</section>
	<section xml:id="generic-persistent-objects">
		<title>Generic Persistent Objects</title>
	</section>
	<section xml:id="transactions">
		<title>Transactions</title>
	</section>
</chapter>
