<?xml version="1.0" encoding="UTF-8"?>
<!--
	Licensed to the Apache Software Foundation (ASF) under one or more
	contributor license agreements. See the NOTICE file distributed with
	this work for additional information regarding copyright ownership.
	The ASF licenses this file to you under the Apache License, Version
	2.0 (the "License"); you may not use this file except in compliance
	with the License. You may obtain a copy of the License at
	
	http://www.apache.org/licenses/LICENSE-2.0 Unless required by
	applicable law or agreed to in writing, software distributed under the
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
	CONDITIONS OF ANY KIND, either express or implied. See the License for
	the specific language governing permissions and limitations under the
	License.
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:id="re-name-generator">
    <title>Name Generator</title>
    <para>
        Doing reverse engineering process, Cayenne have to translate database object names into names that follows Java naming convention. 
        This page describes how Cayenne does this. 
    </para>
    <section xml:id="default-name-generator">
        <title>Default Name Generator</title>
        <para>
            Usually, underscores are used for the word separations by db naming convention, while Java naming convention uses camelcase style. 
            So, Cayenne uses this rule for almost all translations. The only exception is relationships naming, because they represented as foreign keys
            in the database and often have absent or auto-generated names. As a consequence those names are meaningless.
            In this case Cayenne tries to “guess” an appropriate name via the following rules:
            <itemizedlist>
                <listitem>
                    <para>For explicit relationships (i.e PAINTING.ARTIST_ID), the column name is used. Cayenne cuts “ID” and translates it into camelcase style,
                        like ARTIST_ID -> artist</para>
                </listitem>
                <listitem>
                    <para>For implicit relationships, it is usually a pluralized name of the target table in the camelcase</para>
                </listitem>
            </itemizedlist>
        </para>
        <table frame="void">
            <thead>
                <tr>
                    <th>OneToMany</th>
                    <th>Implicit</th>
                    <th>Explicit</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>ARTIST.ARTIST_ID -- PAINTING.ARTIST_ID</td>
                    <td>Artists.paintings</td>
                    <td>Painting.artist</td>
                </tr>
                <tr>
                    <td>PERSON.PERSON_ID -- PERSON.MOTHER_ID</td>
                    <td>Person.people</td>
                    <td>Person.mother</td>
                </tr>
                <tr>
                    <td>PERSON.PERSON_ID -- ADDRESS.SHIPPING_ADDRESS_ID</td>
                    <td>Person.addresses</td>
                    <td>Address.shippingAddress</td>
                </tr>
            </tbody>
        </table>
    </section>
    <section xml:id="customizing-name-generator">
        <title>Cuztomizing Name Generator</title>
        <para>
            In case you want to customize the default naming strategy, you could set your own strategy through the namingStrategy option in the Maven or Ant 
            configuration. Ensure that naming strategy class is in a class-path and implements <code>org.apache.cayenne.dbsync.naming.ObjectNameGenerator</code> interface.
            <programlisting language="xml">
    &lt;reverseEngineering&gt;
        &lt;namingStrategy&gt;YourCustomNameGenerator&lt;/namingStrategy&gt;
    &lt;/reverseEngineering&gt;</programlisting>
        </para>
    </section>
</chapter>