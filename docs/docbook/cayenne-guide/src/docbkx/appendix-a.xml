<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements. See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to you under the Apache License, Version
    2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under the
    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied. See the License for
    the specific language governing permissions and limitations under the
    License.
-->
<appendix xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:id="configuration-properties">
    <title>Configuration Properties</title>
    <para>Note that the property names below are defined as constants in
            <code>org.apache.cayenne.configuration.Constants</code> interface. </para>
    <para>
        <table frame="void">
            <caption>Configuration Properties Recognized by ServerRuntime and/or ClientRuntime</caption>
            <col width="67%"/>
            <col width="15%"/>
            <col width="18%"/>
            <thead>
                <tr>
                    <th>Property</th>
                    <th>Possible Values</th>
                    <th>Default Value</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><code>cayenne.jdbc.driver[.domain_name.node_name]</code> - defines a JDBC driver class to
                        use when creating a DataSource. If domain name and optionally - node name
                        are specified, the setting overrides DataSource info just for this
                        domain/node. Otherwise the override is applied to all domains/nodes in the
                        system.</td>
                    <td/>
                    <td>none, project DataNode configuration is used</td>
                </tr>
                <tr>
                    <td><code>cayenne.jdbc.url[.domain_name.node_name] </code>- defines a DB URL to use when
                        creating a DataSource. If domain name and optionally - node name are
                        specified, the setting overrides DataSource info just for this domain/node.
                        Otherwise the override is applied to all domains/nodes in the system.</td>
                    <td/>
                    <td>none, project DataNode configuration is used</td>
                </tr>
                <tr>
                    <td><code>cayenne.jdbc.username[.domain_name.node_name] </code>- defines a DB user name to use
                        when creating a DataSource. If domain name and optionally - node name are
                        specified, the setting overrides DataSource info just for this domain/node.
                        Otherwise the override is applied to all domains/nodes in the system.</td>
                    <td/>
                    <td>none, project DataNode configuration is used</td>
                </tr>
                <tr>
                    <td><code>cayenne.jdbc.password[.domain_name.node_name]</code> - defines a DB password to use
                        when creating a DataSource. If domain name and optionally - node name are
                        specified, the setting overrides DataSource info just for this domain/node.
                        Otherwise the override is applied to all domains/nodes in the system</td>
                    <td/>
                    <td>none, project DataNode configuration is used</td>
                </tr>
                <tr>
                    <td><code>cayenne.jdbc.min_connections[.domain_name.node_name]</code> - defines the DB
                        connection pool minimal size. If domain name and optionally - node name are
                        specified, the setting overrides DataSource info just for this domain/node.
                        Otherwise the override is applied to all domains/nodes in the system</td>
                    <td/>
                    <td>none, project DataNode configuration is used</td>
                </tr>
                <tr>
                    <td><code>cayenne.jdbc.max_connections[.domain_name.node_name]</code> - defines the DB
                        connection pool maximum size. If domain name and optionally - node name are
                        specified, the setting overrides DataSource info just for this domain/node.
                        Otherwise the override is applied to all domains/nodes in the system</td>
                    <td/>
                    <td>none, project DataNode configuration is used</td>
                </tr>
                <tr>
                    <td><code>cayenne.querycache.size</code> - An integer defining the maximum number of entries in
                        the query cache. Note that not all QueryCache providers may respect this
                        property. MapQueryCache uses it, but the rest would use alternative
                        configuration methods.</td>
                    <td>any positive int value</td>
                    <td>2000</td>
                </tr>
                <tr>
                    <td><code>cayenne.server.contexts_sync_strategy</code> - defines whether peer ObjectContexts
                        should receive snapshot events after commits from other contexts. If true
                        (default), the contexts would automatically synchronize their state with
                        peers.</td>
                    <td>true, false</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td><code>cayenne.server.object_retain_strategy</code> - defines fetched objects retain
                        strategy for ObjectContexts. When weak or soft strategy is used, objects
                        retained by ObjectContext that have no local changes can potetially get
                        garbage collected when JVM feels like doing it.</td>
                    <td>weak, soft, hard</td>
                    <td>weak</td>
                </tr>
                <tr>
                    <td><code>cayenne.server.max_id_qualifier_size</code> - defines a maximum number of ID
                        qualifiers in the WHERE  clause of queries that are generated for paginated
                        queries and for DISJOINT_BY_ID prefetch processing. This is needed to avoid
                        hitting WHERE clause size limitations and memory usage efficiency.</td>
                    <td>any positive int</td>
                    <td>10000</td>
                </tr>
                <tr>
                    <td><code>cayenne.server.external_tx</code> - defines whether runtime should use
                        external transactions.</td>
                    <td>true, false</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td><code>cayenne.rop.service_url</code> - defines the URL of the ROP server</td>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td><code>cayenne.rop.service_username</code> - defines the user name for an ROP client to
                        login to an ROP server.</td>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td><code>cayenne.rop.service_password</code> - defines the password for an ROP client to login
                        to an ROP server.</td>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td><code>cayenne.rop.shared_session_name</code>- defines the name of the shared session that
                        an ROP client wants to join on an ROP server. If omitted, a dedicated
                        session is created.</td>
                    <td/>
                    <td/>
                </tr>
                <tr>
                    <td><code>cayenne.rop.service.timeout</code> - a value in milliseconds for the
                        ROP client-server connection read operation timeout</td>
                    <td>any positive long value</td>
                    <td/>
                </tr>
                <tr>
                    <td><code>cayenne.rop.channel_events</code> - defines whether client-side DataChannel should
                        dispatch events to child ObjectContexts. If set to true, ObjectContexts will
                        receive commit events and merge changes committed by peer contexts that
                        passed through the common client DataChannel.</td>
                    <td>true, false</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td><code>cayenne.rop.context_change_events</code>- defines whether object property changes in
                        the client context result in firing events. Client UI components can listen
                        to these events and update the UI. Disabled by default.</td>
                    <td>true, false</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td><code>cayenne.rop.context_lifecycle_events</code> - defines whether object commit and
                        rollback operations in the client context result in firing events. Client UI
                        components can listen to these events and update the UI. Disabled by
                        default.</td>
                    <td>true,false</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td><code>cayenne.server.rop_event_bridge_factory</code> - defines the name of
                        the org.apache.cayenne.event.EventBridgeFactory that is passed from the ROP
                        server to the client. I.e. server DI would provide a name of the factory,
                        passing this name to the client via the wire. The client would instantiate
                        it to receive events from the server. Note that this property is stored in
                        "cayenne.server.rop_event_bridge_properties" map, not in the main
                        "cayenne.properties".</td>
                    <td/>
                    <td/>
                </tr>
            </tbody>
        </table>
    </para>
</appendix>
