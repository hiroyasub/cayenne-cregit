<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements. See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to you under the Apache License, Version
    2.0 (the "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at
    
    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under the
    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied. See the License for
    the specific language governing permissions and limitations under the
    License.
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <title>A few hands-on examples</title>
    <section xml:id="renaming-table-column-example">
        <title>Renaming table column example</title>
        <para>
            Let's rename "name" column from the Customer table to the "first_name".
        </para>
        <para>
            SQL
        </para>
        <programlisting>
            ALTER TABLE `customer` 
            CHANGE COLUMN `name` `first_name` VARCHAR(50) NULL DEFAULT NULL ;
        </programlisting>
        <para>
            Now we can do reverse engineering again by the command we already know:
        </para>
        <programlisting>
            mvn compile -Pormsync
        </programlisting>
        <para>The output should look like this:</para>
        <programlisting>
            [INFO] Scanning for projects...
            [INFO]
            [INFO] ------------------------------------------------------------------------
            [INFO] Building MySQLTest 0.0.1-SNAPSHOT
            [INFO] ------------------------------------------------------------------------
            [INFO]
            [INFO] --- maven-cayenne-plugin:4.0.M3:cdbimport (ormsync) @ MySQLTest ---
            Aug 16, 2016 5:07:31 PM org.apache.cayenne.datasource.DriverDataSource logConnect
            INFO: Connecting to 'jdbc:mysql://127.0.0.1:3306/test' as 'root'
            Aug 16, 2016 5:07:32 PM org.apache.cayenne.datasource.DriverDataSource getConnection
            INFO: +++ Connecting: SUCCESS.
            Aug 16, 2016 5:07:32 PM org.apache.cayenne.log.CommonsJdbcEventLogger log
            INFO: Detected and installed adapter: org.apache.cayenne.dba.mysql.MySQLAdapter
            Aug 16, 2016 5:07:32 PM org.apache.cayenne.datasource.DriverDataSource logConnect
            INFO: Connecting to 'jdbc:mysql://127.0.0.1:3306/test' as 'root'
            Aug 16, 2016 5:07:32 PM org.apache.cayenne.datasource.DriverDataSource getConnection
            INFO: +++ Connecting: SUCCESS.
            Aug 16, 2016 5:07:32 PM org.apache.cayenne.access.DbLoader load
            INFO: Schema loading...
            Aug 16, 2016 5:07:32 PM org.apache.cayenne.datasource.DriverDataSource logConnect
            INFO: Connecting to 'jdbc:mysql://127.0.0.1:3306/test' as 'root'
            Aug 16, 2016 5:07:32 PM org.apache.cayenne.datasource.DriverDataSource getConnection
            INFO: +++ Connecting: SUCCESS.
            Aug 16, 2016 5:07:32 PM org.apache.cayenne.log.CommonsJdbcEventLogger log
            INFO: Detected and installed adapter: org.apache.cayenne.dba.mysql.MySQLAdapter
            [INFO]   Table: test.customer
            [INFO]   Table: test.order
            [INFO]     Db Relationship : toOne  (order.customer_id, customer.id)
            [INFO]     Db Relationship : toMany (customer.id, order.customer_id)
            [INFO]
            [INFO] Detected changes:
            [INFO]     Add Column           customer.first_name
            [INFO]     Drop Column          customer.name
            [INFO]
            [INFO] Migration Complete Successfully.
            [INFO]
            [INFO] --- maven-cayenne-plugin:4.0.M3:cgen (ormsync) @ MySQLTest ---
            [INFO] Generating superclass file: **/MySQLTest/src/main/java/org/apache/cayenne/shopping/auto/_Customer.java
            [INFO] Generating superclass file: **/MySQLTest/src/main/java/org/apache/cayenne/shopping/auto/_Order.java
            [INFO]
        </programlisting>
        <para>
            As you could see, cdbimport task found and applied our changes to the model. Then, superclasses was updated by 
            cgen task to catch our changes. Notice that Cayenne treated a column renaming change as dropping and adding 
            a new column, because it can’t really track the renaming change.
        </para>
    </section>
    <section xml:id="renaming-objattribute-example">
        <title>Renaming ObjAttribute example</title>
        <para>
            Let’s rename an "amount" ObjAttribute name to "totalPrice" in Order ObjectEntity. After running
            reverse engineering task, the output will show you no changes to import:
        </para>
        <programlisting>
            [INFO] Scanning for projects...
            [INFO]
            [INFO] ------------------------------------------------------------------------
            [INFO] Building MySQLTest 0.0.1-SNAPSHOT
            [INFO] ------------------------------------------------------------------------
            [INFO]
            [INFO] --- maven-cayenne-plugin:4.0.M3:cdbimport (ormsync) @ MySQLTest ---
            Aug 16, 2016 5:26:53 PM org.apache.cayenne.datasource.DriverDataSource logConnect
            INFO: Connecting to 'jdbc:mysql://127.0.0.1:3306/test' as 'root'
            Aug 16, 2016 5:26:53 PM org.apache.cayenne.datasource.DriverDataSource getConnection
            INFO: +++ Connecting: SUCCESS.
            Aug 16, 2016 5:26:53 PM org.apache.cayenne.log.CommonsJdbcEventLogger log
            INFO: Detected and installed adapter: org.apache.cayenne.dba.mysql.MySQLAdapter
            Aug 16, 2016 5:26:53 PM org.apache.cayenne.datasource.DriverDataSource logConnect
            INFO: Connecting to 'jdbc:mysql://127.0.0.1:3306/test' as 'root'
            Aug 16, 2016 5:26:53 PM org.apache.cayenne.datasource.DriverDataSource getConnection
            INFO: +++ Connecting: SUCCESS.
            Aug 16, 2016 5:26:53 PM org.apache.cayenne.access.DbLoader load
            INFO: Schema loading...
            Aug 16, 2016 5:26:53 PM org.apache.cayenne.datasource.DriverDataSource logConnect
            INFO: Connecting to 'jdbc:mysql://127.0.0.1:3306/test' as 'root'
            Aug 16, 2016 5:26:53 PM org.apache.cayenne.datasource.DriverDataSource getConnection
            INFO: +++ Connecting: SUCCESS.
            Aug 16, 2016 5:26:53 PM org.apache.cayenne.log.CommonsJdbcEventLogger log
            INFO: Detected and installed adapter: org.apache.cayenne.dba.mysql.MySQLAdapter
            [INFO]   Table: test.customer
            [INFO]   Table: test.order
            [INFO]     Db Relationship : toOne  (order.customer_id, customer.id)
            [INFO]     Db Relationship : toMany (customer.id, order.customer_id)
            [INFO]
            [INFO] Detected changes: No changes to import.
            [INFO]
            [INFO] --- maven-cayenne-plugin:4.0.M3:cgen (ormsync) @ MySQLTest ---
            [INFO] Generating superclass file: **/MySQLTest/src/main/java/org/apache/cayenne/shopping/auto/_Customer.java
            [INFO] Generating superclass file: **/MySQLTest/src/main/java/org/apache/cayenne/shopping/auto/_Order.java
            [INFO]
        </programlisting>
        <para>
            As you could see, cdbimport task didn't detect any changes. Whenever you change anything in “obj-attribute” xml element 
            it will not reflect anything on the database side. But your changes will be reflected in auto generated java classes
            by cgen task.
        </para>
    </section>
    <section xml:id="adding-table-relationships-example">
        <title>Adding table and relationships example</title>
        <para>
            In this section we are going to add a new table "ordered_product" with foreign key relationships between the existing tables.
            So our schema will look as follows:
        </para>
        <para>
            SQL
        </para>
        <programlisting language="sql">
            CREATE TABLE `ordered_product` (
            `customer_order_id` INT(11) NOT NULL,
            `product_id` INT(11) DEFAULT NULL,
            `quantity` SMALLINT(6) DEFAULT NULL,
            PRIMARY KEY (`customer_order_id`),
            KEY `fk_product_references_idx` (`product_id`),
            CONSTRAINT `fk_order_references` FOREIGN KEY (`customer_order_id`) REFERENCES `order` (`id`) 
            ON DELETE CASCADE ON UPDATE CASCADE);
        </programlisting>
        <para>
            <inlinemediaobject>
                <imageobject>
                    <imagedata fileref="images/customer-order-ordered_product.png" scalefit="1" width="100%"/>
                </imageobject>
            </inlinemediaobject>
        </para>
        <para>
            After running the reverse engineering task again as described in the previous examples, the new output will 
            show a few actual DB operations:
        </para>
        <programlisting>
            [INFO] Scanning for projects...
            [INFO]
            [INFO] ------------------------------------------------------------------------
            [INFO] Building MySQLTest 0.0.1-SNAPSHOT
            [INFO] ------------------------------------------------------------------------
            [INFO]
            [INFO] --- maven-cayenne-plugin:4.0.M3:cdbimport (ormsync) @ MySQLTest ---
            Aug 16, 2016 5:43:52 PM org.apache.cayenne.datasource.DriverDataSource logConnect
            INFO: Connecting to 'jdbc:mysql://127.0.0.1:3306/test' as 'root'
            Aug 16, 2016 5:43:52 PM org.apache.cayenne.datasource.DriverDataSource getConnection
            INFO: +++ Connecting: SUCCESS.
            Aug 16, 2016 5:43:52 PM org.apache.cayenne.log.CommonsJdbcEventLogger log
            INFO: Detected and installed adapter: org.apache.cayenne.dba.mysql.MySQLAdapter
            Aug 16, 2016 5:43:52 PM org.apache.cayenne.datasource.DriverDataSource logConnect
            INFO: Connecting to 'jdbc:mysql://127.0.0.1:3306/test' as 'root'
            Aug 16, 2016 5:43:52 PM org.apache.cayenne.datasource.DriverDataSource getConnection
            INFO: +++ Connecting: SUCCESS.
            Aug 16, 2016 5:43:52 PM org.apache.cayenne.access.DbLoader load
            INFO: Schema loading...
            Aug 16, 2016 5:43:52 PM org.apache.cayenne.datasource.DriverDataSource logConnect
            INFO: Connecting to 'jdbc:mysql://127.0.0.1:3306/test' as 'root'
            Aug 16, 2016 5:43:52 PM org.apache.cayenne.datasource.DriverDataSource getConnection
            INFO: +++ Connecting: SUCCESS.
            Aug 16, 2016 5:43:52 PM org.apache.cayenne.log.CommonsJdbcEventLogger log
            INFO: Detected and installed adapter: org.apache.cayenne.dba.mysql.MySQLAdapter
            [INFO]   Table: test.customer
            [INFO]   Table: test.order
            [INFO]   Table: test.ordered_product
            [INFO]     Db Relationship : toOne  (ordered_product.customer_order_id, order.id)
            [INFO]     Db Relationship : toOne  (order.id, ordered_product.customer_order_id)
            [INFO]     Db Relationship : toOne  (order.customer_id, customer.id)
            [INFO]     Db Relationship : toMany (customer.id, order.customer_id)
            [INFO]
            [INFO] Detected changes:
            [INFO]     Add Relationship     customerOrder order->ordered_product.customer_order_id
            [INFO]     Create Table         ordered_product
            [INFO]
            Aug 16, 2016 5:43:52 PM org.apache.cayenne.util.EntityMergeSupport addMissingRelationships
            WARNING: Can't find ObjEntity for ordered_product
            Aug 16, 2016 5:43:52 PM org.apache.cayenne.util.EntityMergeSupport addMissingRelationships
            WARNING: Db Relationship (Db Relationship : toOne  (order.id, ordered_product.customer_order_id)) will have GUESSED Obj Relationship reflection.
            [INFO] Migration Complete Successfully.
            [INFO]
            [INFO] --- maven-cayenne-plugin:4.0.M3:cgen (ormsync) @ MySQLTest ---
            [INFO] Generating superclass file: **/MySQLTest/src/main/java/org/apache/cayenne/shopping/auto/_Customer.java
            [INFO] Generating superclass file: **/MySQLTest/src/main/java/org/apache/cayenne/shopping/auto/_Order.java
            [INFO] Generating superclass file: **/MySQLTest/src/main/java/org/apache/cayenne/shopping/auto/_OrderedProduct.java
            [INFO] Generating class file: **/MySQLTest/src/main/java/org/apache/cayenne/shopping/OrderedProduct.java
            [INFO]
        </programlisting>
    </section>
</chapter>
