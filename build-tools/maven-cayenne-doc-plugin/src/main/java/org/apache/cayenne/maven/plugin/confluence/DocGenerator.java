begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|maven
operator|.
name|plugin
operator|.
name|confluence
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectstyle
operator|.
name|confluence
operator|.
name|rpc
operator|.
name|soap_axis
operator|.
name|confluenceservice_v1
operator|.
name|ConfluenceSoapService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectstyle
operator|.
name|confluence
operator|.
name|rpc
operator|.
name|soap_axis
operator|.
name|confluenceservice_v1
operator|.
name|ConfluenceSoapServiceProxy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|confluence
operator|.
name|rpc
operator|.
name|soap
operator|.
name|beans
operator|.
name|RemoteAttachment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|confluence
operator|.
name|rpc
operator|.
name|soap
operator|.
name|beans
operator|.
name|RemotePage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|atlassian
operator|.
name|confluence
operator|.
name|rpc
operator|.
name|soap
operator|.
name|beans
operator|.
name|RemotePageSummary
import|;
end_import

begin_comment
comment|/**  * Generates standalone documentation for Cayenne based on Confluence content.  *   * @author Cris Daniluk  */
end_comment

begin_class
specifier|public
class|class
name|DocGenerator
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_TEMPLATE
init|=
literal|"doctemplates/default.vm"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ENDPOINT_SUFFIX
init|=
literal|"/rpc/soap-axis/confluenceservice-v1"
decl_stmt|;
specifier|private
name|String
name|baseUrl
decl_stmt|;
specifier|private
name|String
name|spaceKey
decl_stmt|;
specifier|private
name|String
name|docBase
decl_stmt|;
specifier|private
name|String
name|startPage
decl_stmt|;
specifier|private
name|String
name|token
decl_stmt|;
specifier|private
name|ConfluenceSoapService
name|service
decl_stmt|;
specifier|private
name|String
name|username
decl_stmt|;
specifier|private
name|String
name|password
decl_stmt|;
specifier|private
name|String
name|template
decl_stmt|;
specifier|private
name|DocPageRenderer
name|parser
decl_stmt|;
specifier|public
name|DocGenerator
parameter_list|(
name|String
name|baseUrl
parameter_list|,
name|String
name|spaceKey
parameter_list|,
name|String
name|docBase
parameter_list|,
name|String
name|startPage
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|template
parameter_list|)
block|{
name|ConfluenceSoapServiceProxy
name|service
init|=
operator|new
name|ConfluenceSoapServiceProxy
argument_list|()
decl_stmt|;
comment|// derive service URL from base URL
if|if
condition|(
name|baseUrl
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|baseUrl
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|baseUrl
operator|=
name|baseUrl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|baseUrl
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|endpoint
init|=
name|baseUrl
operator|+
name|ENDPOINT_SUFFIX
decl_stmt|;
name|service
operator|.
name|setEndpoint
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
comment|// service base URL from service default URL
if|else if
condition|(
name|service
operator|.
name|getEndpoint
argument_list|()
operator|.
name|endsWith
argument_list|(
name|ENDPOINT_SUFFIX
argument_list|)
condition|)
block|{
name|String
name|endpoint
init|=
name|service
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|baseUrl
operator|=
name|endpoint
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|endpoint
operator|.
name|length
argument_list|()
operator|-
name|ENDPOINT_SUFFIX
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null base url and invalid service URL"
argument_list|)
throw|;
block|}
name|this
operator|.
name|baseUrl
operator|=
name|baseUrl
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
name|this
operator|.
name|spaceKey
operator|=
name|spaceKey
expr_stmt|;
name|this
operator|.
name|docBase
operator|=
name|docBase
expr_stmt|;
name|this
operator|.
name|startPage
operator|=
name|startPage
expr_stmt|;
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
if|if
condition|(
name|template
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|template
operator|=
name|DEFAULT_TEMPLATE
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|template
operator|=
name|template
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|generateDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|login
argument_list|()
expr_stmt|;
name|createPath
argument_list|(
name|docBase
argument_list|)
expr_stmt|;
comment|// Build a page hierarchy first..
name|DocPage
name|page
init|=
name|getPage
argument_list|(
literal|null
argument_list|,
name|startPage
argument_list|)
decl_stmt|;
name|iterateChildren
argument_list|(
name|page
argument_list|)
expr_stmt|;
comment|// Now render the content nodes..
name|renderPage
argument_list|(
name|page
argument_list|,
name|docBase
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|iterateChildren
parameter_list|(
name|DocPage
name|parent
parameter_list|)
throws|throws
name|Exception
block|{
name|RemotePageSummary
index|[]
name|children
init|=
name|getChildren
argument_list|(
name|parent
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DocPage
name|child
init|=
name|getPage
argument_list|(
name|parent
argument_list|,
name|children
index|[
name|i
index|]
operator|.
name|getTitle
argument_list|()
argument_list|)
decl_stmt|;
name|parent
operator|.
name|addChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|iterateChildren
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|renderPage
parameter_list|(
name|DocPage
name|page
parameter_list|,
name|String
name|basePath
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|currentPath
init|=
name|basePath
operator|+
literal|"/"
operator|+
name|page
operator|.
name|getTitle
argument_list|()
decl_stmt|;
name|createPath
argument_list|(
name|currentPath
argument_list|)
expr_stmt|;
name|FileWriter
name|fw
init|=
operator|new
name|FileWriter
argument_list|(
name|currentPath
operator|+
literal|"/index.html"
argument_list|)
decl_stmt|;
name|parser
operator|.
name|render
argument_list|(
name|page
argument_list|,
name|fw
argument_list|)
expr_stmt|;
name|fw
operator|.
name|close
argument_list|()
expr_stmt|;
name|writeAttachments
argument_list|(
name|currentPath
argument_list|,
name|page
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|childIter
init|=
name|page
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|childIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|renderPage
argument_list|(
operator|(
name|DocPage
operator|)
name|childIter
operator|.
name|next
argument_list|()
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|RemotePageSummary
index|[]
name|getChildren
parameter_list|(
name|DocPage
name|page
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|service
operator|.
name|getChildren
argument_list|(
name|token
argument_list|,
name|page
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|void
name|writeAttachments
parameter_list|(
name|String
name|basePath
parameter_list|,
name|DocPage
name|page
parameter_list|)
throws|throws
name|Exception
block|{
name|RemoteAttachment
index|[]
name|attachments
init|=
name|service
operator|.
name|getAttachments
argument_list|(
name|token
argument_list|,
name|page
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|attachments
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|FileOutputStream
name|fos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|basePath
operator|+
literal|"/"
operator|+
name|attachments
index|[
name|j
index|]
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|getAttachmentData
argument_list|(
name|page
argument_list|,
name|attachments
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|byte
index|[]
name|getAttachmentData
parameter_list|(
name|DocPage
name|page
parameter_list|,
name|RemoteAttachment
name|attachment
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|service
operator|.
name|getAttachmentData
argument_list|(
name|token
argument_list|,
name|page
operator|.
name|getId
argument_list|()
argument_list|,
name|attachment
operator|.
name|getFileName
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|protected
name|void
name|login
parameter_list|()
throws|throws
name|Exception
block|{
name|token
operator|=
name|service
operator|.
name|login
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|parser
operator|=
operator|new
name|DocPageRenderer
argument_list|(
name|service
argument_list|,
name|baseUrl
argument_list|,
name|token
argument_list|,
name|spaceKey
argument_list|,
name|template
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DocPage
name|getPage
parameter_list|(
name|DocPage
name|parentPage
parameter_list|,
name|String
name|pageTitle
parameter_list|)
throws|throws
name|Exception
block|{
name|RemotePage
name|page
init|=
name|service
operator|.
name|getPage
argument_list|(
name|token
argument_list|,
name|spaceKey
argument_list|,
name|pageTitle
argument_list|)
decl_stmt|;
return|return
operator|new
name|DocPage
argument_list|(
name|parentPage
argument_list|,
name|page
operator|.
name|getTitle
argument_list|()
argument_list|,
name|page
operator|.
name|getId
argument_list|()
argument_list|,
name|page
operator|.
name|getContent
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|void
name|createPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getBaseUrl
parameter_list|()
block|{
return|return
name|baseUrl
return|;
block|}
block|}
end_class

end_unit

