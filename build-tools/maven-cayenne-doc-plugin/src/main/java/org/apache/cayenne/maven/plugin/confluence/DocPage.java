begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|maven
operator|.
name|plugin
operator|.
name|confluence
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Represents a TOC entry. This has a lot of tree-like search functions, but I did not  * find a tree implementation that I thought was worth using for this.  *   * @author Cris Daniluk  */
end_comment

begin_class
specifier|public
class|class
name|DocPage
block|{
specifier|private
specifier|static
specifier|final
name|Pattern
name|TOC_BLOCK
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\n?\\{excerpt(.*?)\\}"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|TOC_LINE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\[([^|]*\\|)?(.+)\\]"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
name|titleMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|String
name|title
decl_stmt|;
specifier|private
name|long
name|id
decl_stmt|;
specifier|private
name|String
name|rawContent
decl_stmt|;
specifier|private
name|DocPage
name|parentRef
decl_stmt|;
specifier|private
name|List
name|children
decl_stmt|;
specifier|private
name|Comparator
name|ordering
decl_stmt|;
specifier|private
name|int
name|depth
decl_stmt|;
specifier|public
specifier|static
name|DocPage
name|getPageByTitle
parameter_list|(
name|String
name|title
parameter_list|)
block|{
return|return
operator|(
name|DocPage
operator|)
name|titleMap
operator|.
name|get
argument_list|(
name|title
argument_list|)
return|;
block|}
name|DocPage
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|this
operator|.
name|title
operator|=
name|title
expr_stmt|;
block|}
specifier|public
name|DocPage
parameter_list|(
name|DocPage
name|parentRef
parameter_list|,
name|String
name|title
parameter_list|,
name|long
name|id
parameter_list|,
name|String
name|rawContent
parameter_list|)
block|{
name|this
operator|.
name|parentRef
operator|=
name|parentRef
expr_stmt|;
name|this
operator|.
name|title
operator|=
name|title
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|rawContent
operator|=
name|rawContent
expr_stmt|;
name|this
operator|.
name|children
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|this
operator|.
name|ordering
operator|=
name|createChildOrdering
argument_list|(
name|rawContent
argument_list|)
expr_stmt|;
name|titleMap
operator|.
name|put
argument_list|(
name|title
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentRef
operator|==
literal|null
condition|)
block|{
name|depth
operator|=
literal|1
expr_stmt|;
block|}
block|}
comment|/**      * Infers the order of children based on the content "excerpt" tags.      */
name|Comparator
name|createChildOrdering
parameter_list|(
name|String
name|rawContent
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|TOC_BLOCK
operator|.
name|matcher
argument_list|(
name|rawContent
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|int
name|regionStart
init|=
name|matcher
operator|.
name|end
argument_list|()
operator|+
literal|1
decl_stmt|;
name|matcher
operator|.
name|find
argument_list|()
expr_stmt|;
name|List
name|lines
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|rawContent
operator|.
name|substring
argument_list|(
name|regionStart
argument_list|,
name|matcher
operator|.
name|start
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
decl_stmt|;
name|List
name|titles
init|=
operator|new
name|ArrayList
argument_list|(
name|lines
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|lines
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Matcher
name|lineMatcher
init|=
name|TOC_LINE
operator|.
name|matcher
argument_list|(
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lineMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|titles
operator|.
name|add
argument_list|(
name|lineMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|PreorderedTitleComparator
argument_list|(
name|titles
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|AlphabeticalTitleComparator
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|addChild
parameter_list|(
name|DocPage
name|child
parameter_list|)
block|{
name|child
operator|.
name|depth
operator|=
name|depth
operator|+
literal|1
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
name|title
return|;
block|}
specifier|public
name|int
name|getDepth
parameter_list|()
block|{
return|return
name|depth
return|;
block|}
specifier|public
name|List
name|getChildren
parameter_list|()
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|children
argument_list|,
name|ordering
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|children
argument_list|)
return|;
block|}
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|String
name|getRawContent
parameter_list|()
block|{
return|return
name|rawContent
return|;
block|}
specifier|public
name|DocPage
name|getParentRef
parameter_list|()
block|{
return|return
name|parentRef
return|;
block|}
specifier|public
name|DocPage
name|findPageId
parameter_list|(
name|long
name|searchId
parameter_list|)
block|{
return|return
name|findChild
argument_list|(
name|this
argument_list|,
name|searchId
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasDescendent
parameter_list|(
name|DocPage
name|page
parameter_list|)
block|{
if|if
condition|(
name|findChild
argument_list|(
name|this
argument_list|,
name|page
operator|.
name|getId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Get the "module" root. This returns the next-to-top element in the tree.      */
specifier|public
name|DocPage
name|getRoot
parameter_list|()
block|{
name|DocPage
name|base
init|=
name|this
decl_stmt|;
while|while
condition|(
name|base
operator|.
name|parentRef
operator|!=
literal|null
operator|&&
name|base
operator|.
name|parentRef
operator|.
name|parentRef
operator|!=
literal|null
condition|)
block|{
name|base
operator|=
name|base
operator|.
name|parentRef
expr_stmt|;
block|}
return|return
name|base
return|;
block|}
specifier|private
name|DocPage
name|findChild
parameter_list|(
name|DocPage
name|page
parameter_list|,
name|long
name|searchId
parameter_list|)
block|{
if|if
condition|(
name|page
operator|.
name|getId
argument_list|()
operator|==
name|searchId
condition|)
block|{
return|return
name|page
return|;
block|}
name|Iterator
name|pageIter
init|=
name|page
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|pageIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DocPage
name|match
init|=
name|findChild
argument_list|(
operator|(
name|DocPage
operator|)
name|pageIter
operator|.
name|next
argument_list|()
argument_list|,
name|searchId
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|!=
literal|null
condition|)
block|{
return|return
name|match
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getLinkPath
parameter_list|()
block|{
return|return
name|buildLinkPath
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|private
name|String
name|buildLinkPath
parameter_list|(
name|DocPage
name|page
parameter_list|)
block|{
if|if
condition|(
name|page
operator|.
name|getParentRef
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|page
operator|.
name|getTitle
argument_list|()
return|;
block|}
return|return
name|buildLinkPath
argument_list|(
name|page
operator|.
name|getParentRef
argument_list|()
argument_list|)
operator|+
literal|"/"
operator|+
name|page
operator|.
name|getTitle
argument_list|()
return|;
block|}
block|}
end_class

end_unit

