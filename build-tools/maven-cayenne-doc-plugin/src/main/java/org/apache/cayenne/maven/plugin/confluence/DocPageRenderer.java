begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|maven
operator|.
name|plugin
operator|.
name|confluence
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|Template
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|VelocityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|app
operator|.
name|VelocityEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|RuntimeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|log
operator|.
name|NullLogSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectstyle
operator|.
name|confluence
operator|.
name|rpc
operator|.
name|soap_axis
operator|.
name|confluenceservice_v1
operator|.
name|ConfluenceSoapService
import|;
end_import

begin_comment
comment|/**  * Extracts embedded links from Confluence documentation and converts them to local fs  * references  *   * @author Cris Daniluk  */
end_comment

begin_class
specifier|public
class|class
name|DocPageRenderer
block|{
specifier|private
specifier|static
specifier|final
name|String
name|URL_PREFIX
init|=
literal|"/confluence"
decl_stmt|;
comment|/**      * Only attachments within the page are supported right now. This could easily be      * adjusted to find attachments in external documents if necessary.      */
specifier|private
specifier|static
specifier|final
name|Pattern
name|attachmentPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(href|src)=\""
operator|+
name|URL_PREFIX
operator|+
literal|"/download/attachments/(.*?)/(.*?)\""
argument_list|)
decl_stmt|;
comment|/**      * When browsing the local filesystem, browsers like %20 (hex encoded) instead of +      * (legacy HTTP 0.9) for spaces.      */
specifier|private
specifier|static
specifier|final
name|Pattern
name|spaceEncoderPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"href=\"(?!http://).*?\\+.*?\""
argument_list|)
decl_stmt|;
comment|/**      * Not all images are supported - only the ones referenced by current docs.      */
specifier|private
specifier|static
specifier|final
name|Pattern
name|confluenceImagePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"src=\""
operator|+
name|URL_PREFIX
operator|+
literal|"/images/icons/(.*?)\""
argument_list|)
decl_stmt|;
comment|/**      * Take any confluence links to non-doc content and add the url      */
specifier|private
name|Pattern
name|confluenceLinkPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"href=\"("
operator|+
name|URL_PREFIX
operator|+
literal|"/display/.*?)\""
argument_list|)
decl_stmt|;
specifier|private
name|Pattern
name|embeddedLinkPattern
decl_stmt|;
specifier|private
name|ConfluenceSoapService
name|service
decl_stmt|;
specifier|private
name|String
name|token
decl_stmt|;
specifier|private
name|String
name|spaceKey
decl_stmt|;
specifier|private
name|String
name|baseUrl
decl_stmt|;
specifier|private
name|VelocityContext
name|velCtxt
decl_stmt|;
specifier|private
name|Template
name|pageTemplate
decl_stmt|;
specifier|public
name|DocPageRenderer
parameter_list|(
name|ConfluenceSoapService
name|service
parameter_list|,
name|String
name|baseUrl
parameter_list|,
name|String
name|token
parameter_list|,
name|String
name|spaceKey
parameter_list|,
name|String
name|template
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Note that these regexps have a fairly narrow capture - since the HTML
comment|// is
comment|// machine-generated,
comment|// we're kind of assuming it is well-formed
name|embeddedLinkPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"href=\""
operator|+
name|URL_PREFIX
operator|+
literal|"/display/"
operator|+
name|spaceKey
operator|+
literal|"/(.*?)\""
argument_list|)
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
name|this
operator|.
name|baseUrl
operator|=
name|baseUrl
expr_stmt|;
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
name|this
operator|.
name|spaceKey
operator|=
name|spaceKey
expr_stmt|;
name|velCtxt
operator|=
operator|new
name|VelocityContext
argument_list|()
expr_stmt|;
name|initializeClassTemplate
argument_list|(
name|template
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initializeClassTemplate
parameter_list|(
name|String
name|template
parameter_list|)
throws|throws
name|Exception
block|{
name|VelocityEngine
name|velocityEngine
init|=
operator|new
name|VelocityEngine
argument_list|()
decl_stmt|;
try|try
block|{
comment|// use ClasspathResourceLoader for velocity templates lookup
comment|// if Cayenne URL is not null, load resource from this URL
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// null logger that will prevent velocity.log from being generated
name|props
operator|.
name|put
argument_list|(
name|RuntimeConstants
operator|.
name|RUNTIME_LOG_LOGSYSTEM_CLASS
argument_list|,
name|NullLogSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"resource.loader"
argument_list|,
literal|"cayenne"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"cayenne.resource.loader.class"
argument_list|,
literal|"org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader"
argument_list|)
expr_stmt|;
name|velocityEngine
operator|.
name|init
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't initialize Velocity"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|pageTemplate
operator|=
name|velocityEngine
operator|.
name|getTemplate
argument_list|(
name|template
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|render
parameter_list|(
name|DocPage
name|page
parameter_list|,
name|Writer
name|out
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Add the TOC, unless this is the top-level page
name|StringBuffer
name|toc
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|page
operator|.
name|getParentRef
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|toc
operator|.
name|append
argument_list|(
literal|"<div id=\"cayenne_toc\">\n"
argument_list|)
expr_stmt|;
name|DocPage
name|root
init|=
name|page
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|iterateChildren
argument_list|(
name|toc
argument_list|,
name|page
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|toc
operator|.
name|append
argument_list|(
literal|"</div>\n"
argument_list|)
expr_stmt|;
block|}
comment|// Figure out the level of nesting for relative links
name|String
name|basePath
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|page
operator|.
name|getDepth
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|basePath
operator|+=
literal|"../"
expr_stmt|;
block|}
name|String
name|renderedContent
init|=
literal|null
decl_stmt|;
try|try
block|{
name|renderedContent
operator|=
name|service
operator|.
name|renderContent
argument_list|(
name|token
argument_list|,
name|spaceKey
argument_list|,
name|page
operator|.
name|getId
argument_list|()
argument_list|,
name|page
operator|.
name|getRawContent
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"style"
argument_list|,
literal|"clean"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// could have hit a DOS prevention bit so
comment|// sleep for 250ms and try again
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
name|renderedContent
operator|=
name|service
operator|.
name|renderContent
argument_list|(
name|token
argument_list|,
name|spaceKey
argument_list|,
name|page
operator|.
name|getId
argument_list|()
argument_list|,
name|page
operator|.
name|getRawContent
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"style"
argument_list|,
literal|"clean"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Replace cross-doc links
name|Matcher
name|linkMatcher
init|=
name|embeddedLinkPattern
operator|.
name|matcher
argument_list|(
name|renderedContent
argument_list|)
decl_stmt|;
name|StringBuffer
name|replacementBuffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|linkMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|DocPage
name|destPage
init|=
name|DocPage
operator|.
name|getPageByTitle
argument_list|(
name|linkMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
literal|'+'
argument_list|,
literal|' '
argument_list|)
argument_list|)
decl_stmt|;
comment|// If we don't understand the link, just leave it alone to be safe
if|if
condition|(
name|destPage
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|linkMatcher
operator|.
name|appendReplacement
argument_list|(
name|replacementBuffer
argument_list|,
literal|"href=\""
operator|+
name|basePath
operator|+
name|destPage
operator|.
name|getLinkPath
argument_list|()
operator|+
literal|"/index.html\""
argument_list|)
expr_stmt|;
block|}
name|linkMatcher
operator|.
name|appendTail
argument_list|(
name|replacementBuffer
argument_list|)
expr_stmt|;
name|renderedContent
operator|=
name|replacementBuffer
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// renderedContent =
comment|// embeddedLinkPattern.matcher(renderedContent).replaceAll("href=\"$1/index.html\"");
comment|// Replace attachment links
name|renderedContent
operator|=
name|attachmentPattern
operator|.
name|matcher
argument_list|(
name|renderedContent
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"$1=\"$3\""
argument_list|)
expr_stmt|;
comment|// Convert confluence images to relative links
name|renderedContent
operator|=
name|confluenceImagePattern
operator|.
name|matcher
argument_list|(
name|renderedContent
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"src=\""
operator|+
name|basePath
operator|+
literal|"images/$1\""
argument_list|)
expr_stmt|;
comment|// Replace wiki links
name|renderedContent
operator|=
name|confluenceLinkPattern
operator|.
name|matcher
argument_list|(
name|renderedContent
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"href=\""
operator|+
name|baseUrl
operator|+
literal|"$1\""
argument_list|)
expr_stmt|;
comment|// Convert local links with + to %20 to make browsers happy (wtf?)
name|Matcher
name|matcher
init|=
name|spaceEncoderPattern
operator|.
name|matcher
argument_list|(
name|renderedContent
argument_list|)
decl_stmt|;
name|replacementBuffer
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|matcher
operator|.
name|appendReplacement
argument_list|(
name|replacementBuffer
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|0
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\+"
argument_list|,
literal|"%20"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|matcher
operator|.
name|appendTail
argument_list|(
name|replacementBuffer
argument_list|)
expr_stmt|;
name|renderedContent
operator|=
name|replacementBuffer
operator|.
name|toString
argument_list|()
expr_stmt|;
name|velCtxt
operator|.
name|put
argument_list|(
literal|"page"
argument_list|,
name|page
argument_list|)
expr_stmt|;
name|velCtxt
operator|.
name|put
argument_list|(
literal|"basePath"
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
name|velCtxt
operator|.
name|put
argument_list|(
literal|"pageContent"
argument_list|,
name|toc
operator|.
name|toString
argument_list|()
operator|+
name|renderedContent
argument_list|)
expr_stmt|;
name|pageTemplate
operator|.
name|merge
argument_list|(
name|velCtxt
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|iterateChildren
parameter_list|(
name|StringBuffer
name|toc
parameter_list|,
name|DocPage
name|currentPage
parameter_list|,
name|DocPage
name|basePage
parameter_list|)
block|{
name|toc
operator|.
name|append
argument_list|(
literal|"<ul>\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|baseIter
init|=
name|basePage
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|baseIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DocPage
name|child
init|=
operator|(
name|DocPage
operator|)
name|baseIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|toc
operator|.
name|append
argument_list|(
literal|"<li>"
argument_list|)
operator|.
name|append
argument_list|(
literal|"<a href=\""
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|currentPage
operator|.
name|getDepth
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|toc
operator|.
name|append
argument_list|(
literal|"../"
argument_list|)
expr_stmt|;
block|}
name|toc
operator|.
name|append
argument_list|(
name|child
operator|.
name|getLinkPath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"/index.html\">"
argument_list|)
expr_stmt|;
name|toc
operator|.
name|append
argument_list|(
name|child
operator|.
name|getTitle
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"</a>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|hasDescendent
argument_list|(
name|currentPage
argument_list|)
condition|)
block|{
comment|// render children
name|iterateChildren
argument_list|(
name|toc
argument_list|,
name|currentPage
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
name|toc
operator|.
name|append
argument_list|(
literal|"</li>\n"
argument_list|)
expr_stmt|;
block|}
name|toc
operator|.
name|append
argument_list|(
literal|"</ul>\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

