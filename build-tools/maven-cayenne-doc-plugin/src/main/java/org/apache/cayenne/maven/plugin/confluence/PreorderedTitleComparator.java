begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|maven
operator|.
name|plugin
operator|.
name|confluence
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A comparator of pages based on preset case-insensitive ordering of titles.  *   */
end_comment

begin_class
class|class
name|PreorderedTitleComparator
implements|implements
name|Comparator
block|{
specifier|private
name|List
name|titles
decl_stmt|;
name|PreorderedTitleComparator
parameter_list|(
name|List
name|titles
parameter_list|)
block|{
name|this
operator|.
name|titles
operator|=
operator|new
name|ArrayList
argument_list|(
name|titles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|titles
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|title
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|this
operator|.
name|titles
operator|.
name|add
argument_list|(
name|title
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|DocPage
name|child0
init|=
operator|(
name|DocPage
operator|)
name|o1
decl_stmt|;
name|DocPage
name|child1
init|=
operator|(
name|DocPage
operator|)
name|o2
decl_stmt|;
name|String
name|title0
init|=
name|child0
operator|.
name|getTitle
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|String
name|title1
init|=
name|child1
operator|.
name|getTitle
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|title0
operator|.
name|equals
argument_list|(
name|title1
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
if|else if
condition|(
name|titles
operator|.
name|indexOf
argument_list|(
name|title1
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
comment|// if its not on the list, float it to the bottom
return|return
literal|1
return|;
block|}
if|if
condition|(
name|titles
operator|.
name|indexOf
argument_list|(
name|title0
argument_list|)
operator|<
name|titles
operator|.
name|indexOf
argument_list|(
name|title1
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
block|}
end_class

end_unit

