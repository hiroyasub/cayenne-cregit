begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|maven
operator|.
name|plugin
operator|.
name|confluence
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|DocPageTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testCreateChildOrdering1
parameter_list|()
block|{
name|String
name|ex
init|=
literal|"{excerpt}\n"
operator|+
literal|"[c4]\n"
operator|+
literal|"[c2]\n"
operator|+
literal|"[c3]\n"
operator|+
literal|"[c1]\n"
operator|+
literal|"{excerpt}"
decl_stmt|;
name|DocPage
name|parent
init|=
operator|new
name|DocPage
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|Comparator
name|ordering
init|=
name|parent
operator|.
name|createChildOrdering
argument_list|(
name|ex
argument_list|)
decl_stmt|;
name|List
name|children
init|=
name|createChildren
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|children
argument_list|,
name|ordering
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c4"
argument_list|,
operator|(
operator|(
name|DocPage
operator|)
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c2"
argument_list|,
operator|(
operator|(
name|DocPage
operator|)
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c3"
argument_list|,
operator|(
operator|(
name|DocPage
operator|)
name|children
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c1"
argument_list|,
operator|(
operator|(
name|DocPage
operator|)
name|children
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCreateChildOrdering2
parameter_list|()
block|{
name|String
name|ex
init|=
literal|"{excerpt}\n"
operator|+
literal|"# [c4]\n"
operator|+
literal|"# [c2]\n"
operator|+
literal|"# [c3]\n"
operator|+
literal|"# [c1]\n"
operator|+
literal|"{excerpt}"
decl_stmt|;
name|DocPage
name|parent
init|=
operator|new
name|DocPage
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|Comparator
name|ordering
init|=
name|parent
operator|.
name|createChildOrdering
argument_list|(
name|ex
argument_list|)
decl_stmt|;
name|List
name|children
init|=
name|createChildren
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|children
argument_list|,
name|ordering
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c4"
argument_list|,
operator|(
operator|(
name|DocPage
operator|)
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c2"
argument_list|,
operator|(
operator|(
name|DocPage
operator|)
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c3"
argument_list|,
operator|(
operator|(
name|DocPage
operator|)
name|children
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c1"
argument_list|,
operator|(
operator|(
name|DocPage
operator|)
name|children
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCreateChildOrdering3
parameter_list|()
block|{
name|String
name|ex
init|=
literal|"{excerpt}\n"
operator|+
literal|"[X|c4]\n"
operator|+
literal|"[M|c2]\n"
operator|+
literal|"[Z a|c3]\n"
operator|+
literal|"[c1]\n"
operator|+
literal|"{excerpt}"
decl_stmt|;
name|DocPage
name|parent
init|=
operator|new
name|DocPage
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|Comparator
name|ordering
init|=
name|parent
operator|.
name|createChildOrdering
argument_list|(
name|ex
argument_list|)
decl_stmt|;
name|List
name|children
init|=
name|createChildren
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|children
argument_list|,
name|ordering
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c4"
argument_list|,
operator|(
operator|(
name|DocPage
operator|)
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c2"
argument_list|,
operator|(
operator|(
name|DocPage
operator|)
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c3"
argument_list|,
operator|(
operator|(
name|DocPage
operator|)
name|children
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c1"
argument_list|,
operator|(
operator|(
name|DocPage
operator|)
name|children
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCreateChildOrdering4
parameter_list|()
block|{
name|String
name|ex
init|=
literal|"{excerpt}\n"
operator|+
literal|"[c4 yy]\n"
operator|+
literal|"[c2 ww]\n"
operator|+
literal|"[c3 aa]\n"
operator|+
literal|"[c1 xx]\n"
operator|+
literal|"{excerpt}"
decl_stmt|;
name|DocPage
name|parent
init|=
operator|new
name|DocPage
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|Comparator
name|ordering
init|=
name|parent
operator|.
name|createChildOrdering
argument_list|(
name|ex
argument_list|)
decl_stmt|;
name|List
name|children
init|=
operator|new
name|ArrayList
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
operator|new
name|DocPage
argument_list|(
literal|"c1 xx"
argument_list|)
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
operator|new
name|DocPage
argument_list|(
literal|"c2 ww"
argument_list|)
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
operator|new
name|DocPage
argument_list|(
literal|"c3 aa"
argument_list|)
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
operator|new
name|DocPage
argument_list|(
literal|"c4 yy"
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|children
argument_list|,
name|ordering
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c4 yy"
argument_list|,
operator|(
operator|(
name|DocPage
operator|)
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c2 ww"
argument_list|,
operator|(
operator|(
name|DocPage
operator|)
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c3 aa"
argument_list|,
operator|(
operator|(
name|DocPage
operator|)
name|children
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c1 xx"
argument_list|,
operator|(
operator|(
name|DocPage
operator|)
name|children
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCreateChildOrdering5
parameter_list|()
block|{
name|String
name|ex
init|=
literal|"{excerpt}\n"
operator|+
literal|"# [c4]\n"
operator|+
literal|"# [C2]\n"
operator|+
literal|"# [c3]\n"
operator|+
literal|"# [c1]\n"
operator|+
literal|"{excerpt}"
decl_stmt|;
name|DocPage
name|parent
init|=
operator|new
name|DocPage
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|Comparator
name|ordering
init|=
name|parent
operator|.
name|createChildOrdering
argument_list|(
name|ex
argument_list|)
decl_stmt|;
name|List
name|children
init|=
name|createChildren
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|children
argument_list|,
name|ordering
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c4"
argument_list|,
operator|(
operator|(
name|DocPage
operator|)
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c2"
argument_list|,
operator|(
operator|(
name|DocPage
operator|)
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c3"
argument_list|,
operator|(
operator|(
name|DocPage
operator|)
name|children
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c1"
argument_list|,
operator|(
operator|(
name|DocPage
operator|)
name|children
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
name|createChildren
parameter_list|()
block|{
name|List
name|children
init|=
operator|new
name|ArrayList
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
operator|new
name|DocPage
argument_list|(
literal|"c1"
argument_list|)
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
operator|new
name|DocPage
argument_list|(
literal|"c2"
argument_list|)
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
operator|new
name|DocPage
argument_list|(
literal|"c3"
argument_list|)
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
operator|new
name|DocPage
argument_list|(
literal|"c4"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|children
return|;
block|}
block|}
end_class

end_unit

