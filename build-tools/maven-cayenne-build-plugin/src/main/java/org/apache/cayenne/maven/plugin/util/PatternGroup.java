begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|maven
operator|.
name|plugin
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_class
specifier|public
class|class
name|PatternGroup
block|{
specifier|protected
name|Collection
name|patterns
decl_stmt|;
specifier|static
name|Collection
name|parsePatterns
parameter_list|(
name|File
name|patternsFile
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|Collection
name|patterns
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|patternsFile
operator|==
literal|null
operator|||
operator|!
name|patternsFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
name|patterns
return|;
block|}
name|BufferedReader
name|in
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|patternsFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error reading patterns file "
operator|+
name|patternsFile
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|patterns
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error reading patterns file "
operator|+
name|patternsFile
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
block|}
block|}
return|return
name|patterns
return|;
block|}
specifier|public
name|PatternGroup
parameter_list|(
name|Collection
name|patterns
parameter_list|)
block|{
name|this
operator|.
name|patterns
operator|=
name|patterns
expr_stmt|;
block|}
specifier|public
name|PatternGroup
parameter_list|(
name|File
name|patternsFile
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|this
argument_list|(
name|parsePatterns
argument_list|(
name|patternsFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addPatterns
parameter_list|(
name|String
index|[]
name|patterns
parameter_list|)
block|{
name|this
operator|.
name|patterns
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|patterns
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getPatterns
parameter_list|()
block|{
return|return
operator|(
name|String
index|[]
operator|)
name|patterns
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|patterns
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|patterns
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

