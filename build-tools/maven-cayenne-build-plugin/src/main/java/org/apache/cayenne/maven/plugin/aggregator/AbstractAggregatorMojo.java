begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|maven
operator|.
name|plugin
operator|.
name|aggregator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|maven
operator|.
name|plugin
operator|.
name|util
operator|.
name|PatternGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiver
operator|.
name|MavenArchiveConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|archiver
operator|.
name|MavenArchiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|ArchiverException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|UnArchiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|jar
operator|.
name|JarArchiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|manager
operator|.
name|ArchiverManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|manager
operator|.
name|NoSuchArchiverException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_comment
comment|/**  * A superclass of aggregator mojos.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractAggregatorMojo
extends|extends
name|AbstractMojo
block|{
comment|// by default exclude maven entries from other jars and overlapping manifests
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_EXCLUDES
init|=
operator|new
name|String
index|[]
block|{
literal|"META-INF/maven/**"
block|,
literal|"META-INF/MANIFEST.MF"
block|}
decl_stmt|;
comment|/**      * Used to look up Artifacts in the remote repository.      *       * @parameter expression="${component.org.apache.maven.artifact.factory.ArtifactFactory}"      * @required      * @readonly      */
specifier|private
name|ArtifactFactory
name|factory
decl_stmt|;
comment|/**      * Used to look up Artifacts in the remote repository.      *       * @parameter expression="${component.org.apache.maven.artifact.resolver.ArtifactResolver}"      * @required      * @readonly      */
specifier|private
name|ArtifactResolver
name|resolver
decl_stmt|;
comment|/**      * Location of the local repository.      *       * @parameter expression="${localRepository}"      * @readonly      * @required      */
specifier|private
name|ArtifactRepository
name|local
decl_stmt|;
comment|/**      * List of Remote Repositories used by the resolver      *       * @parameter expression="${project.remoteArtifactRepositories}"      * @readonly      * @required      */
specifier|private
name|List
name|remoteRepos
decl_stmt|;
comment|/**      * To look up Archiver/UnArchiver implementations      *       * @parameter expression="${component.org.codehaus.plexus.archiver.manager.ArchiverManager}"      * @required      * @readonly      */
specifier|protected
name|ArchiverManager
name|archiverManager
decl_stmt|;
comment|/**      * Collection of ArtifactItems to work on. (ArtifactItem contains groupId, artifactId,      * version, type, location, destFile, markerFile and overwrite.) See "How To Use" and      * "Javadoc" for details.      *       * @parameter      * @required      */
specifier|private
name|ArrayList
name|artifactItems
decl_stmt|;
comment|/**      * POM      *       * @parameter expression="${project}"      * @readonly      * @required      */
specifier|protected
name|MavenProject
name|project
decl_stmt|;
comment|/**      * @component      */
specifier|private
name|MavenProjectHelper
name|projectHelper
decl_stmt|;
comment|/**      * Name of the generated JAR.      *       * @parameter expression="${project.build.finalName}"      * @required      */
specifier|private
name|String
name|finalName
decl_stmt|;
comment|/**      * A file that contains excludes patterns.      *       * @parameter      */
specifier|private
name|File
name|excludesFile
decl_stmt|;
comment|/**      * A file that contains includes patterns.      *       * @parameter      */
specifier|private
name|File
name|includesFile
decl_stmt|;
comment|/**      * Preprocesses the list of ArtifactItems and unpacks them to the provided directory.      */
specifier|protected
name|void
name|unpackArtifacts
parameter_list|(
name|File
name|unpackDirectory
parameter_list|,
name|String
name|classifier
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|Iterator
name|it
init|=
name|artifactItems
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ArtifactItem
name|artifactItem
init|=
operator|(
name|ArtifactItem
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|artifactItem
operator|.
name|setClassifier
argument_list|(
name|classifier
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Configured artifact: "
operator|+
name|artifactItem
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|artifactItem
operator|.
name|getOutputDirectory
argument_list|()
operator|==
literal|null
condition|)
block|{
name|artifactItem
operator|.
name|setOutputDirectory
argument_list|(
name|unpackDirectory
argument_list|)
expr_stmt|;
block|}
name|artifactItem
operator|.
name|getOutputDirectory
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|unpackArtifact
argument_list|(
name|artifactItem
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a filtered aggregated jar file from unpacked artifacts.      */
specifier|protected
name|void
name|packAggregatedArtifact
parameter_list|(
name|File
name|unpackDirectory
parameter_list|,
name|String
name|classifier
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
name|classifier
operator|!=
literal|null
condition|)
block|{
name|finalName
operator|+=
literal|"-"
operator|+
name|classifier
expr_stmt|;
block|}
name|File
name|outputDirectory
init|=
operator|new
name|File
argument_list|(
name|project
operator|.
name|getBuild
argument_list|()
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|destinationFile
init|=
operator|new
name|File
argument_list|(
name|outputDirectory
argument_list|,
name|finalName
operator|+
literal|".jar"
argument_list|)
decl_stmt|;
name|JarArchiver
name|jarArchiver
decl_stmt|;
try|try
block|{
name|jarArchiver
operator|=
operator|(
name|JarArchiver
operator|)
name|archiverManager
operator|.
name|getArchiver
argument_list|(
literal|"jar"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchArchiverException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unknown archiver type"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|PatternGroup
name|excludes
init|=
operator|new
name|PatternGroup
argument_list|(
name|excludesFile
argument_list|)
decl_stmt|;
name|excludes
operator|.
name|addPatterns
argument_list|(
name|DEFAULT_EXCLUDES
argument_list|)
expr_stmt|;
name|PatternGroup
name|includes
init|=
operator|new
name|PatternGroup
argument_list|(
name|includesFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|includes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|includes
operator|.
name|addPatterns
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"**/**"
block|}
argument_list|)
expr_stmt|;
block|}
comment|// MavenArchiver adds Maven stuff into META-INF
name|MavenArchiver
name|archiver
init|=
operator|new
name|MavenArchiver
argument_list|()
decl_stmt|;
name|archiver
operator|.
name|setArchiver
argument_list|(
name|jarArchiver
argument_list|)
expr_stmt|;
name|archiver
operator|.
name|setOutputFile
argument_list|(
name|destinationFile
argument_list|)
expr_stmt|;
name|MavenArchiveConfiguration
name|archive
init|=
operator|new
name|MavenArchiveConfiguration
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|unpackDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Jar will be empty, no unpack directory."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|archiver
operator|.
name|getArchiver
argument_list|()
operator|.
name|addDirectory
argument_list|(
name|unpackDirectory
argument_list|,
name|includes
operator|.
name|getPatterns
argument_list|()
argument_list|,
name|excludes
operator|.
name|getPatterns
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|archiver
operator|.
name|createArchive
argument_list|(
name|project
argument_list|,
name|archive
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error assembling JAR"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|classifier
operator|==
literal|null
condition|)
block|{
name|project
operator|.
name|getArtifact
argument_list|()
operator|.
name|setFile
argument_list|(
name|destinationFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|projectHelper
operator|.
name|attachArtifact
argument_list|(
name|project
argument_list|,
literal|"jar"
argument_list|,
name|classifier
argument_list|,
name|destinationFile
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Resolves the Artifact from the remote repository if nessessary. If no version is      * specified, it will be retrieved from the DependencyManagement section of the pom.      */
specifier|private
name|Artifact
name|getArtifact
parameter_list|(
name|ArtifactItem
name|artifactItem
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|Artifact
name|artifact
decl_stmt|;
if|if
condition|(
name|artifactItem
operator|.
name|getVersion
argument_list|()
operator|==
literal|null
condition|)
block|{
name|fillArtifactVersionFromDependencyManagement
argument_list|(
name|artifactItem
argument_list|)
expr_stmt|;
if|if
condition|(
name|artifactItem
operator|.
name|getVersion
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to find artifact version of "
operator|+
name|artifactItem
operator|.
name|getGroupId
argument_list|()
operator|+
literal|":"
operator|+
name|artifactItem
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|" in project's dependency management."
argument_list|)
throw|;
block|}
block|}
comment|// use classifer if set.
name|String
name|classifier
init|=
name|artifactItem
operator|.
name|getClassifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|classifier
operator|==
literal|null
operator|||
name|classifier
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|artifact
operator|=
name|factory
operator|.
name|createArtifact
argument_list|(
name|artifactItem
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifactItem
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifactItem
operator|.
name|getVersion
argument_list|()
argument_list|,
name|Artifact
operator|.
name|SCOPE_PROVIDED
argument_list|,
name|artifactItem
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|artifact
operator|=
name|factory
operator|.
name|createArtifactWithClassifier
argument_list|(
name|artifactItem
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifactItem
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifactItem
operator|.
name|getVersion
argument_list|()
argument_list|,
name|artifactItem
operator|.
name|getType
argument_list|()
argument_list|,
name|artifactItem
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|resolver
operator|.
name|resolve
argument_list|(
name|artifact
argument_list|,
name|remoteRepos
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArtifactResolutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to resolve artifact."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ArtifactNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to find artifact."
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|artifact
return|;
block|}
comment|/**      * Tries to find missing version from dependancy management. If found, the artifact is      * updated with the correct version.      *       * @param artifact representing configured file.      */
specifier|private
name|void
name|fillArtifactVersionFromDependencyManagement
parameter_list|(
name|ArtifactItem
name|artifact
parameter_list|)
block|{
name|this
operator|.
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Attempting to find missing version from dependency management."
argument_list|)
expr_stmt|;
name|List
name|list
init|=
name|this
operator|.
name|project
operator|.
name|getDependencyManagement
argument_list|()
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Dependency
name|dependency
init|=
operator|(
name|Dependency
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|dependency
operator|.
name|getGroupId
argument_list|()
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|&&
name|dependency
operator|.
name|getArtifactId
argument_list|()
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|&&
name|dependency
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Found missing version: "
operator|+
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setVersion
argument_list|(
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Unpacks an artifact item.      */
specifier|private
name|void
name|unpackArtifact
parameter_list|(
name|ArtifactItem
name|artifactItem
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|Artifact
name|artifact
init|=
name|getArtifact
argument_list|(
name|artifactItem
argument_list|)
decl_stmt|;
name|File
name|location
init|=
name|artifactItem
operator|.
name|getOutputDirectory
argument_list|()
decl_stmt|;
name|File
name|file
init|=
name|artifact
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|String
name|archiveExt
init|=
name|FileUtils
operator|.
name|getExtension
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
try|try
block|{
name|UnArchiver
name|unArchiver
init|=
name|archiverManager
operator|.
name|getUnArchiver
argument_list|(
name|archiveExt
argument_list|)
decl_stmt|;
name|unArchiver
operator|.
name|setSourceFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|unArchiver
operator|.
name|setDestDirectory
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|unArchiver
operator|.
name|extract
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchArchiverException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unknown archiver type"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error unpacking file: "
operator|+
name|file
operator|+
literal|"to: "
operator|+
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ArchiverException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error unpacking file: "
operator|+
name|file
operator|+
literal|"to: "
operator|+
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

