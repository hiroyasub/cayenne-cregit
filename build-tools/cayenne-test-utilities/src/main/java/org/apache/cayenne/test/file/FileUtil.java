begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|file
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|FileUtil
block|{
specifier|static
specifier|final
name|String
name|TEST_DIR_KEY
init|=
literal|"cayenne.test.dir"
decl_stmt|;
specifier|static
specifier|final
name|String
name|DEFAULT_TEST_DIR
init|=
literal|"target/testrun"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|File
name|baseTestDirectory
decl_stmt|;
static|static
block|{
name|String
name|testDirName
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|TEST_DIR_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|testDirName
operator|==
literal|null
condition|)
block|{
name|testDirName
operator|=
name|DEFAULT_TEST_DIR
expr_stmt|;
block|}
name|baseTestDirectory
operator|=
operator|new
name|File
argument_list|(
name|testDirName
argument_list|)
expr_stmt|;
comment|// delete old tests
if|if
condition|(
name|baseTestDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|delete
argument_list|(
name|testDirName
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error deleting test directory: "
operator|+
name|testDirName
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|baseTestDirectory
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error creating test directory: "
operator|+
name|testDirName
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns a test directory that is used as a scratch area.      */
specifier|public
specifier|static
name|File
name|baseTestDirectory
parameter_list|()
block|{
return|return
name|baseTestDirectory
return|;
block|}
specifier|public
specifier|static
name|boolean
name|delete
parameter_list|(
name|String
name|filePath
parameter_list|,
name|boolean
name|recursive
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|recursive
operator|||
operator|!
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
return|return
name|file
operator|.
name|delete
argument_list|()
return|;
name|String
index|[]
name|contents
init|=
name|file
operator|.
name|list
argument_list|()
decl_stmt|;
comment|// list can be null if directory doesn't have an 'x' permission bit set for the
comment|// user
if|if
condition|(
name|contents
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|item
range|:
name|contents
control|)
block|{
if|if
condition|(
operator|!
name|delete
argument_list|(
name|filePath
operator|+
name|File
operator|.
name|separator
operator|+
name|item
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
name|file
operator|.
name|delete
argument_list|()
return|;
block|}
block|}
end_class

end_unit

