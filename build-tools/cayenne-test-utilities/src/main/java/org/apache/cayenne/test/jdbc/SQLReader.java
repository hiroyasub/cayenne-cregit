begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * Parses SQL from a URL source. Expectations for the URL contents:  *<ul>  *<li>It has to be UTF-8 encoded.  *<li>All lines starting with "-- " are treated as comments  *<li>If a statement separator is supplied, it must be at the end of the line  * or on its own line.  *<li>If no separator is supplied, then the entire content body sans comments  * is treated as a single statement.  *</ul>  */
end_comment

begin_class
specifier|public
class|class
name|SQLReader
block|{
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|statements
parameter_list|(
name|URL
name|sqlSource
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|statements
argument_list|(
name|sqlSource
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|statements
parameter_list|(
name|URL
name|sqlSource
parameter_list|,
name|String
name|separator
parameter_list|)
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|statements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|sqlSource
operator|.
name|openStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
init|;
init|)
block|{
name|String
name|line
decl_stmt|;
name|StringBuilder
name|statement
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|appendLine
argument_list|(
name|statement
argument_list|,
name|line
argument_list|,
name|separator
argument_list|)
condition|)
block|{
name|statements
operator|.
name|add
argument_list|(
name|statement
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|statement
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|statement
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|statements
operator|.
name|add
argument_list|(
name|statement
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|statements
return|;
block|}
specifier|private
specifier|static
name|boolean
name|appendLine
parameter_list|(
name|StringBuilder
name|statement
parameter_list|,
name|String
name|line
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"-- "
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|endOfLine
init|=
literal|false
decl_stmt|;
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|separator
operator|!=
literal|null
operator|&&
name|line
operator|.
name|endsWith
argument_list|(
name|separator
argument_list|)
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|line
operator|.
name|length
argument_list|()
operator|-
name|separator
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|endOfLine
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|statement
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
return|return
name|endOfLine
return|;
block|}
block|}
end_class

end_unit

