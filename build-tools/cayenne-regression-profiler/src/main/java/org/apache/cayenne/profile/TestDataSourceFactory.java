begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Copyright 2006 The Apache Software Foundation  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|profile
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|ConnectionProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|DataSourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conn
operator|.
name|DataSourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conn
operator|.
name|PoolManager
import|;
end_import

begin_comment
comment|/**  * A DataSourceFactory that loads connection info from connection properties, the same way  * unit tests do.  *   * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|TestDataSourceFactory
implements|implements
name|DataSourceFactory
block|{
comment|// same as the one used in unit tests
specifier|public
specifier|static
specifier|final
name|String
name|CONNECTION_SET_PROPERTY
init|=
literal|"cayenne.test.connection"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONNECTION_POOL_MIN_SIZE_PROPERTY
init|=
literal|"cayenne.test.pool.min"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONNECTION_POOL_MAX_SIZE_PROPERTY
init|=
literal|"cayenne.test.pool.max"
decl_stmt|;
specifier|public
specifier|static
name|String
name|getDataSourceName
parameter_list|()
block|{
name|String
name|connectionSet
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|CONNECTION_SET_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectionSet
operator|==
literal|null
condition|)
block|{
name|connectionSet
operator|=
name|ConnectionProperties
operator|.
name|EMBEDDED_DATASOURCE
expr_stmt|;
block|}
return|return
name|connectionSet
return|;
block|}
specifier|public
name|DataSource
name|getDataSource
parameter_list|(
name|String
name|location
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|connectionSet
init|=
name|getDataSourceName
argument_list|()
decl_stmt|;
name|DataSourceInfo
name|dsi
init|=
name|ConnectionProperties
operator|.
name|getInstance
argument_list|()
operator|.
name|getConnectionInfo
argument_list|(
name|connectionSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|dsi
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Connection info for key '"
operator|+
name|connectionSet
operator|+
literal|"' is not configured"
argument_list|)
throw|;
block|}
name|String
name|minPool
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|CONNECTION_POOL_MIN_SIZE_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|minPool
operator|!=
literal|null
condition|)
block|{
name|dsi
operator|.
name|setMinConnections
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|minPool
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|maxPool
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|CONNECTION_POOL_MAX_SIZE_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxPool
operator|!=
literal|null
condition|)
block|{
name|dsi
operator|.
name|setMaxConnections
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|maxPool
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dsi
operator|.
name|getMinConnections
argument_list|()
operator|>
name|dsi
operator|.
name|getMaxConnections
argument_list|()
condition|)
block|{
name|dsi
operator|.
name|setMaxConnections
argument_list|(
name|dsi
operator|.
name|getMinConnections
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PoolManager
argument_list|(
name|dsi
operator|.
name|getJdbcDriver
argument_list|()
argument_list|,
name|dsi
operator|.
name|getDataSourceUrl
argument_list|()
argument_list|,
name|dsi
operator|.
name|getMinConnections
argument_list|()
argument_list|,
name|dsi
operator|.
name|getMaxConnections
argument_list|()
argument_list|,
name|dsi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|dsi
operator|.
name|getPassword
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|initializeWithParentConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
block|}
block|}
end_class

end_unit

