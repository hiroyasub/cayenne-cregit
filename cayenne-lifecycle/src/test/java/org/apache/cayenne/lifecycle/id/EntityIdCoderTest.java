begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|lifecycle
operator|.
name|id
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|EntityIdCoderTest
block|{
specifier|private
name|ServerRuntime
name|runtime
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|runtime
operator|=
name|ServerRuntime
operator|.
name|builder
argument_list|()
operator|.
name|addConfig
argument_list|(
literal|"cayenne-lifecycle.xml"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|runtime
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEntityName
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"M"
argument_list|,
name|EntityIdCoder
operator|.
name|getEntityName
argument_list|(
literal|"M:N:K"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"M"
argument_list|,
name|EntityIdCoder
operator|.
name|getEntityName
argument_list|(
literal|".M:N:K"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTempId
parameter_list|()
block|{
name|ObjEntity
name|e1
init|=
name|runtime
operator|.
name|getChannel
argument_list|()
operator|.
name|getEntityResolver
argument_list|()
operator|.
name|getObjEntity
argument_list|(
literal|"E1"
argument_list|)
decl_stmt|;
name|EntityIdCoder
name|coder
init|=
operator|new
name|EntityIdCoder
argument_list|(
name|e1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|10
block|,
literal|100
block|}
decl_stmt|;
name|ObjectId
name|encoded
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"E1"
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|String
name|string
init|=
name|coder
operator|.
name|toStringId
argument_list|(
name|encoded
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|".E1:02020A64"
argument_list|,
name|string
argument_list|)
expr_stmt|;
name|ObjectId
name|decoded
init|=
name|coder
operator|.
name|toObjectId
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|decoded
operator|.
name|isTemporary
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|encoded
argument_list|,
name|decoded
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleIntPk
parameter_list|()
block|{
name|DbEntity
name|dbEntity
init|=
operator|new
name|DbEntity
argument_list|(
literal|"X"
argument_list|)
decl_stmt|;
name|DbAttribute
name|pk
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"ID"
argument_list|)
decl_stmt|;
name|pk
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|pk
operator|.
name|setPrimaryKey
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|pk
argument_list|)
expr_stmt|;
name|ObjEntity
name|entity
init|=
name|mock
argument_list|(
name|ObjEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getDbEntityName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getDbEntity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|ObjectId
name|id
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"ID"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|EntityIdCoder
name|coder
init|=
operator|new
name|EntityIdCoder
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x:3"
argument_list|,
name|coder
operator|.
name|toStringId
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectId
name|parsedId
init|=
name|coder
operator|.
name|toObjectId
argument_list|(
literal|"x:3"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|parsedId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleLongPk
parameter_list|()
block|{
name|DbEntity
name|dbEntity
init|=
operator|new
name|DbEntity
argument_list|(
literal|"X"
argument_list|)
decl_stmt|;
name|DbAttribute
name|pk
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"ID"
argument_list|)
decl_stmt|;
name|pk
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|pk
operator|.
name|setPrimaryKey
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|pk
argument_list|)
expr_stmt|;
name|ObjEntity
name|entity
init|=
name|mock
argument_list|(
name|ObjEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getDbEntityName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getDbEntity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|ObjectId
name|id
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"ID"
argument_list|,
literal|3L
argument_list|)
decl_stmt|;
name|EntityIdCoder
name|coder
init|=
operator|new
name|EntityIdCoder
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x:3"
argument_list|,
name|coder
operator|.
name|toStringId
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectId
name|parsedId
init|=
name|coder
operator|.
name|toObjectId
argument_list|(
literal|"x:3"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|parsedId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleStringPk
parameter_list|()
block|{
name|DbEntity
name|dbEntity
init|=
operator|new
name|DbEntity
argument_list|(
literal|"X"
argument_list|)
decl_stmt|;
name|DbAttribute
name|pk
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"ID"
argument_list|)
decl_stmt|;
name|pk
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|pk
operator|.
name|setPrimaryKey
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|pk
argument_list|)
expr_stmt|;
name|ObjEntity
name|entity
init|=
name|mock
argument_list|(
name|ObjEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getDbEntityName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getDbEntity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|EntityIdCoder
name|coder
init|=
operator|new
name|EntityIdCoder
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|ObjectId
name|id
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"ID"
argument_list|,
literal|"AbC"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x:AbC"
argument_list|,
name|coder
operator|.
name|toStringId
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectId
name|parsedId
init|=
name|coder
operator|.
name|toObjectId
argument_list|(
literal|"x:AbC"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|parsedId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIdEncoding
parameter_list|()
block|{
name|DbEntity
name|dbEntity
init|=
operator|new
name|DbEntity
argument_list|(
literal|"X"
argument_list|)
decl_stmt|;
name|DbAttribute
name|pk
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"ID"
argument_list|)
decl_stmt|;
name|pk
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|pk
operator|.
name|setPrimaryKey
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|pk
argument_list|)
expr_stmt|;
name|ObjEntity
name|entity
init|=
name|mock
argument_list|(
name|ObjEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getDbEntityName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getDbEntity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|EntityIdCoder
name|coder
init|=
operator|new
name|EntityIdCoder
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|ObjectId
name|id
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"ID"
argument_list|,
literal|"Ab:C"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x:Ab%3AC"
argument_list|,
name|coder
operator|.
name|toStringId
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectId
name|parsedId
init|=
name|coder
operator|.
name|toObjectId
argument_list|(
literal|"x:Ab%3AC"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|parsedId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMixedCompoundPk
parameter_list|()
block|{
name|DbEntity
name|dbEntity
init|=
operator|new
name|DbEntity
argument_list|(
literal|"X"
argument_list|)
decl_stmt|;
name|DbAttribute
name|pk1
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"ID"
argument_list|)
decl_stmt|;
name|pk1
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|pk1
operator|.
name|setPrimaryKey
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|pk1
argument_list|)
expr_stmt|;
name|DbAttribute
name|pk2
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"ABC"
argument_list|)
decl_stmt|;
name|pk2
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|BIGINT
argument_list|)
expr_stmt|;
name|pk2
operator|.
name|setPrimaryKey
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|pk2
argument_list|)
expr_stmt|;
name|DbAttribute
name|pk3
init|=
operator|new
name|DbAttribute
argument_list|(
literal|"ZZZ"
argument_list|)
decl_stmt|;
name|pk3
operator|.
name|setType
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|pk3
operator|.
name|setPrimaryKey
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|pk3
argument_list|)
expr_stmt|;
name|ObjEntity
name|entity
init|=
name|mock
argument_list|(
name|ObjEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getDbEntityName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dbEntity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|entity
operator|.
name|getDbEntity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
name|EntityIdCoder
name|coder
init|=
operator|new
name|EntityIdCoder
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|idMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|idMap
operator|.
name|put
argument_list|(
literal|"ID"
argument_list|,
literal|"X;Y"
argument_list|)
expr_stmt|;
name|idMap
operator|.
name|put
argument_list|(
literal|"ABC"
argument_list|,
literal|6783463L
argument_list|)
expr_stmt|;
name|idMap
operator|.
name|put
argument_list|(
literal|"ZZZ"
argument_list|,
literal|"'_'"
argument_list|)
expr_stmt|;
name|ObjectId
name|id
init|=
name|ObjectId
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
name|idMap
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"x:6783463:X%3BY:%27_%27"
argument_list|,
name|coder
operator|.
name|toStringId
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectId
name|parsedId
init|=
name|coder
operator|.
name|toObjectId
argument_list|(
literal|"x:6783463:X%3BY:%27_%27"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|parsedId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

