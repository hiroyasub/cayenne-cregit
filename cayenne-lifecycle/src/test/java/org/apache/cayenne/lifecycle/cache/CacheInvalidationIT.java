begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|lifecycle
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|lifecycle
operator|.
name|db
operator|.
name|E1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|lifecycle
operator|.
name|unit
operator|.
name|CacheInvalidationCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectSelect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|CacheInvalidationIT
extends|extends
name|CacheInvalidationCase
block|{
annotation|@
name|Ignore
argument_list|(
literal|"MapQueryCache doesn't store cache groups in different caches, so it can't run this test for now."
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testInvalidate_Custom
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectContext
name|context
init|=
name|runtime
operator|.
name|newContext
argument_list|()
decl_stmt|;
comment|// no explicit cache group must still work - it lands inside default cache called 'cayenne.default.cache'
name|ObjectSelect
argument_list|<
name|E1
argument_list|>
name|g0
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|E1
operator|.
name|class
argument_list|)
operator|.
name|localCache
argument_list|()
decl_stmt|;
name|ObjectSelect
argument_list|<
name|E1
argument_list|>
name|g1
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|E1
operator|.
name|class
argument_list|)
operator|.
name|localCache
argument_list|(
literal|"g1"
argument_list|)
decl_stmt|;
name|ObjectSelect
argument_list|<
name|E1
argument_list|>
name|g2
init|=
name|ObjectSelect
operator|.
name|query
argument_list|(
name|E1
operator|.
name|class
argument_list|)
operator|.
name|localCache
argument_list|(
literal|"g2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|g0
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|g1
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|g2
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|e1
operator|.
name|insert
argument_list|(
literal|1
argument_list|)
operator|.
name|insert
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// inserted via SQL... query results are still cached...
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|g0
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|g1
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|g2
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|E1
name|e1
init|=
name|context
operator|.
name|newObject
argument_list|(
name|E1
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|runtime
operator|.
name|getDataDomain
argument_list|()
operator|.
name|getQueryCache
argument_list|()
operator|.
name|removeGroup
argument_list|(
literal|"g1"
argument_list|)
expr_stmt|;
comment|// inserted via Cayenne... "g1" should get auto refreshed...
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|g0
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|g1
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|g2
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|deleteObject
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
comment|// deleted via Cayenne... "g1" should get auto refreshed
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|g0
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|g1
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|g2
operator|.
name|selectCount
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

