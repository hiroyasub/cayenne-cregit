begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|lifecycle
operator|.
name|id
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|ServerRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|DBHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|jdbc
operator|.
name|TableHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|StringIdQueryTest
block|{
specifier|private
name|ServerRuntime
name|runtime
decl_stmt|;
specifier|private
name|TableHelper
name|e1Helper
decl_stmt|;
specifier|private
name|TableHelper
name|e2Helper
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|runtime
operator|=
name|ServerRuntime
operator|.
name|builder
argument_list|()
operator|.
name|addConfig
argument_list|(
literal|"cayenne-lifecycle.xml"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|DBHelper
name|dbHelper
init|=
operator|new
name|DBHelper
argument_list|(
name|runtime
operator|.
name|getDataSource
argument_list|(
literal|"lifecycle-db"
argument_list|)
argument_list|)
decl_stmt|;
name|e1Helper
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"E1"
argument_list|,
literal|"ID"
argument_list|)
expr_stmt|;
name|e2Helper
operator|=
operator|new
name|TableHelper
argument_list|(
name|dbHelper
argument_list|,
literal|"E2"
argument_list|,
literal|"ID"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|runtime
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConstructor
parameter_list|()
block|{
name|StringIdQuery
name|q1
init|=
operator|new
name|StringIdQuery
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|q1
operator|.
name|getStringIds
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|StringIdQuery
name|q2
init|=
operator|new
name|StringIdQuery
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|q2
operator|.
name|getStringIds
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q2
operator|.
name|getStringIds
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q2
operator|.
name|getStringIds
argument_list|()
operator|.
name|contains
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q2
operator|.
name|getStringIds
argument_list|()
operator|.
name|contains
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|StringIdQuery
name|q3
init|=
operator|new
name|StringIdQuery
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|q3
operator|.
name|getStringIds
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q3
operator|.
name|getStringIds
argument_list|()
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q3
operator|.
name|getStringIds
argument_list|()
operator|.
name|contains
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q3
operator|.
name|getStringIds
argument_list|()
operator|.
name|contains
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPerformQuery_SingleEntity
parameter_list|()
throws|throws
name|Exception
block|{
name|e1Helper
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
name|e1Helper
operator|.
name|insert
argument_list|(
literal|3
argument_list|)
operator|.
name|insert
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|StringIdQuery
name|query
init|=
operator|new
name|StringIdQuery
argument_list|(
literal|"E1:3"
argument_list|,
literal|"E1:4"
argument_list|,
literal|"E1:5"
argument_list|)
decl_stmt|;
name|QueryResponse
name|response
init|=
name|runtime
operator|.
name|newContext
argument_list|()
operator|.
name|performGenericQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|response
operator|.
name|firstList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Number
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|DataRow
name|r1
init|=
operator|(
name|DataRow
operator|)
name|response
operator|.
name|firstList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ids
operator|.
name|add
argument_list|(
operator|(
name|Number
operator|)
name|r1
operator|.
name|get
argument_list|(
literal|"ID"
argument_list|)
argument_list|)
expr_stmt|;
name|DataRow
name|r2
init|=
operator|(
name|DataRow
operator|)
name|response
operator|.
name|firstList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ids
operator|.
name|add
argument_list|(
operator|(
name|Number
operator|)
name|r2
operator|.
name|get
argument_list|(
literal|"ID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ids
operator|.
name|contains
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ids
operator|.
name|contains
argument_list|(
literal|4L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPerformQuery_MultipleEntities
parameter_list|()
throws|throws
name|Exception
block|{
name|e1Helper
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
name|e1Helper
operator|.
name|insert
argument_list|(
literal|3
argument_list|)
operator|.
name|insert
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|e2Helper
operator|.
name|deleteAll
argument_list|()
expr_stmt|;
name|e2Helper
operator|.
name|insert
argument_list|(
literal|5
argument_list|)
operator|.
name|insert
argument_list|(
literal|6
argument_list|)
operator|.
name|insert
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|StringIdQuery
name|query
init|=
operator|new
name|StringIdQuery
argument_list|(
literal|"E1:3"
argument_list|,
literal|"E1:4"
argument_list|,
literal|"E2:6"
argument_list|,
literal|"E1:5"
argument_list|)
decl_stmt|;
name|QueryResponse
name|response
init|=
name|runtime
operator|.
name|newContext
argument_list|()
operator|.
name|performGenericQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|response
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|response
operator|.
name|next
argument_list|()
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|DataRow
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|DataRow
argument_list|>
operator|)
name|response
operator|.
name|currentList
argument_list|()
decl_stmt|;
for|for
control|(
name|DataRow
name|row
range|:
name|list
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|row
operator|.
name|getEntityName
argument_list|()
operator|+
literal|":"
operator|+
name|row
operator|.
name|get
argument_list|(
literal|"ID"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ids
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ids
operator|.
name|contains
argument_list|(
literal|"E1:3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ids
operator|.
name|contains
argument_list|(
literal|"E1:4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ids
operator|.
name|contains
argument_list|(
literal|"E2:6"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

