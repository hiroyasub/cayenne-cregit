begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|lifecycle
operator|.
name|id
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Persistent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_comment
comment|/**  * An object to encode/decode ObjectIds for all entities found in a mapping  * namespace.  *   * @since 3.1  */
end_comment

begin_class
specifier|public
class|class
name|IdCoder
block|{
specifier|protected
name|EntityResolver
name|entityResolver
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|EntityIdCoder
argument_list|>
name|coders
decl_stmt|;
specifier|public
name|IdCoder
parameter_list|(
name|EntityResolver
name|entityResolver
parameter_list|)
block|{
name|this
operator|.
name|entityResolver
operator|=
name|entityResolver
expr_stmt|;
name|this
operator|.
name|coders
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns an ObjectId for a given String ID.      */
specifier|public
name|ObjectId
name|getObjectId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|String
name|entityName
init|=
name|EntityIdCoder
operator|.
name|getEntityName
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|EntityIdCoder
name|coder
init|=
name|getCoder
argument_list|(
name|entityName
argument_list|)
decl_stmt|;
return|return
name|coder
operator|.
name|toObjectId
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**      * @since 4.0      */
specifier|public
name|String
name|getStringId
parameter_list|(
name|ObjectId
name|id
parameter_list|)
block|{
name|EntityIdCoder
name|coder
init|=
name|getCoder
argument_list|(
name|id
operator|.
name|getEntityName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|coder
operator|.
name|toStringId
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|public
name|String
name|getStringId
parameter_list|(
name|Persistent
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null object"
argument_list|)
throw|;
block|}
name|ObjectId
name|id
init|=
name|object
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
return|return
name|getStringId
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|protected
name|EntityIdCoder
name|getCoder
parameter_list|(
name|String
name|entityName
parameter_list|)
block|{
name|EntityIdCoder
name|coder
init|=
name|coders
operator|.
name|get
argument_list|(
name|entityName
argument_list|)
decl_stmt|;
if|if
condition|(
name|coder
operator|==
literal|null
condition|)
block|{
name|coder
operator|=
name|createCoder
argument_list|(
name|entityName
argument_list|)
expr_stmt|;
name|coders
operator|.
name|put
argument_list|(
name|entityName
argument_list|,
name|coder
argument_list|)
expr_stmt|;
block|}
return|return
name|coder
return|;
block|}
specifier|protected
name|EntityIdCoder
name|createCoder
parameter_list|(
name|String
name|entityName
parameter_list|)
block|{
name|ObjEntity
name|entity
init|=
name|entityResolver
operator|.
name|getObjEntity
argument_list|(
name|entityName
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Entity '"
operator|+
name|entityName
operator|+
literal|"' is not mapped"
argument_list|)
throw|;
block|}
return|return
operator|new
name|EntityIdCoder
argument_list|(
name|entity
argument_list|)
return|;
block|}
block|}
end_class

end_unit

