begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|lifecycle
operator|.
name|relationship
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|Cayenne
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|lifecycle
operator|.
name|id
operator|.
name|EntityIdCoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|ObjectIdQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_comment
comment|/**  * Provides lazy faulting functionality for a map of objects identified by String  * ObjectId.  *   * @since 3.1  */
end_comment

begin_class
class|class
name|ObjectIdBatchFault
block|{
specifier|private
name|ObjectContext
name|context
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ObjectIdBatchSourceItem
argument_list|>
name|sources
decl_stmt|;
specifier|private
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|resolved
decl_stmt|;
name|ObjectIdBatchFault
parameter_list|(
name|ObjectContext
name|context
parameter_list|,
name|List
argument_list|<
name|ObjectIdBatchSourceItem
argument_list|>
name|sources
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|sources
operator|=
name|sources
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getObjects
parameter_list|()
block|{
if|if
condition|(
name|resolved
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|resolved
operator|==
literal|null
condition|)
block|{
name|resolved
operator|=
name|fetchObjects
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|resolved
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fetchObjects
parameter_list|()
block|{
if|if
condition|(
name|sources
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|EntityResolver
name|resolver
init|=
name|context
operator|.
name|getEntityResolver
argument_list|()
decl_stmt|;
comment|// simple case of one query, handle it separately for performance reasons
if|if
condition|(
name|sources
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|String
name|uuid
init|=
name|sources
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|entityName
init|=
name|EntityIdCoder
operator|.
name|getEntityName
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
name|ObjEntity
name|entity
init|=
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|entityName
argument_list|)
decl_stmt|;
name|ObjectId
name|id
init|=
operator|new
name|EntityIdCoder
argument_list|(
name|entity
argument_list|)
operator|.
name|toObjectId
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
name|Object
name|object
init|=
name|Cayenne
operator|.
name|objectForQuery
argument_list|(
name|context
argument_list|,
operator|new
name|ObjectIdQuery
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
name|uuid
argument_list|,
name|object
argument_list|)
return|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|SelectQuery
argument_list|<
name|DataObject
argument_list|>
argument_list|>
name|queriesByEntity
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SelectQuery
argument_list|<
name|DataObject
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|EntityIdCoder
argument_list|>
name|codersByEntity
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|EntityIdCoder
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectIdBatchSourceItem
name|source
range|:
name|sources
control|)
block|{
name|String
name|uuid
init|=
name|source
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|entityName
init|=
name|EntityIdCoder
operator|.
name|getEntityName
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
name|EntityIdCoder
name|coder
init|=
name|codersByEntity
operator|.
name|get
argument_list|(
name|entityName
argument_list|)
decl_stmt|;
name|SelectQuery
argument_list|<
name|DataObject
argument_list|>
name|query
decl_stmt|;
if|if
condition|(
name|coder
operator|==
literal|null
condition|)
block|{
name|coder
operator|=
operator|new
name|EntityIdCoder
argument_list|(
name|resolver
operator|.
name|getObjEntity
argument_list|(
name|entityName
argument_list|)
argument_list|)
expr_stmt|;
name|codersByEntity
operator|.
name|put
argument_list|(
name|entityName
argument_list|,
name|coder
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|SelectQuery
argument_list|<
name|DataObject
argument_list|>
argument_list|(
name|entityName
argument_list|)
expr_stmt|;
name|queriesByEntity
operator|.
name|put
argument_list|(
name|entityName
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|queriesByEntity
operator|.
name|get
argument_list|(
name|entityName
argument_list|)
expr_stmt|;
block|}
name|ObjectId
name|id
init|=
name|coder
operator|.
name|toObjectId
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
name|Expression
name|idExp
init|=
name|ExpressionFactory
operator|.
name|matchAllDbExp
argument_list|(
name|id
operator|.
name|getIdSnapshot
argument_list|()
argument_list|,
name|Expression
operator|.
name|EQUAL_TO
argument_list|)
decl_stmt|;
name|query
operator|.
name|orQualifier
argument_list|(
name|idExp
argument_list|)
expr_stmt|;
block|}
name|int
name|capacity
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|sources
operator|.
name|size
argument_list|()
operator|/
literal|0.75d
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|capacity
argument_list|)
decl_stmt|;
for|for
control|(
name|SelectQuery
argument_list|<
name|DataObject
argument_list|>
name|query
range|:
name|queriesByEntity
operator|.
name|values
argument_list|()
control|)
block|{
name|EntityIdCoder
name|coder
init|=
name|codersByEntity
operator|.
name|get
argument_list|(
name|query
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DataObject
argument_list|>
name|objects
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
for|for
control|(
name|DataObject
name|object
range|:
name|objects
control|)
block|{
name|String
name|uuid
init|=
name|coder
operator|.
name|toStringId
argument_list|(
name|object
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
name|results
operator|.
name|put
argument_list|(
name|uuid
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

