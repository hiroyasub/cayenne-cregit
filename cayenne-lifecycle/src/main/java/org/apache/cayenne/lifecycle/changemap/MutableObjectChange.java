begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|lifecycle
operator|.
name|changemap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectId
import|;
end_import

begin_comment
comment|/**  * A mutable implementation of {@link ObjectChange}.  *   * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|MutableObjectChange
implements|implements
name|ObjectChange
block|{
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|TYPE_PRECEDENCE
decl_stmt|;
static|static
block|{
name|TYPE_PRECEDENCE
operator|=
operator|new
name|int
index|[
name|ObjectChangeType
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
comment|// decreasing precedence of operations when recording audits is DELETE,
comment|// INSERT, UPDATE
name|TYPE_PRECEDENCE
index|[
name|ObjectChangeType
operator|.
name|DELETE
operator|.
name|ordinal
argument_list|()
index|]
operator|=
literal|3
expr_stmt|;
name|TYPE_PRECEDENCE
index|[
name|ObjectChangeType
operator|.
name|INSERT
operator|.
name|ordinal
argument_list|()
index|]
operator|=
literal|2
expr_stmt|;
name|TYPE_PRECEDENCE
index|[
name|ObjectChangeType
operator|.
name|UPDATE
operator|.
name|ordinal
argument_list|()
index|]
operator|=
literal|1
expr_stmt|;
block|}
comment|// note that we are tracking DB-level changes for clarity
specifier|private
name|ObjectId
name|preCommitId
decl_stmt|;
specifier|private
name|ObjectId
name|postCommitId
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MutableAttributeChange
argument_list|>
name|attributeChanges
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MutableToManyRelationshipChange
argument_list|>
name|toManyRelationshipChanges
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MutableToOneRelationshipChange
argument_list|>
name|toOneRelationshipChanges
decl_stmt|;
specifier|private
name|ObjectChangeType
name|type
decl_stmt|;
specifier|public
name|MutableObjectChange
parameter_list|(
name|ObjectId
name|preCommitId
parameter_list|)
block|{
name|this
operator|.
name|preCommitId
operator|=
name|preCommitId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|PropertyChange
argument_list|>
name|getChanges
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyChange
argument_list|>
name|allChanges
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|attributeChanges
operator|!=
literal|null
condition|)
block|{
name|allChanges
operator|.
name|putAll
argument_list|(
name|attributeChanges
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toOneRelationshipChanges
operator|!=
literal|null
condition|)
block|{
name|allChanges
operator|.
name|putAll
argument_list|(
name|toOneRelationshipChanges
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toManyRelationshipChanges
operator|!=
literal|null
condition|)
block|{
name|allChanges
operator|.
name|putAll
argument_list|(
name|toManyRelationshipChanges
argument_list|)
expr_stmt|;
block|}
return|return
name|allChanges
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|AttributeChange
argument_list|>
name|getAttributeChanges
parameter_list|()
block|{
return|return
name|attributeChanges
operator|!=
literal|null
condition|?
name|attributeChanges
else|:
name|Collections
operator|.
expr|<
name|String
operator|,
name|AttributeChange
operator|>
name|emptyMap
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|ToManyRelationshipChange
argument_list|>
name|getToManyRelationshipChanges
parameter_list|()
block|{
return|return
name|toManyRelationshipChanges
operator|!=
literal|null
condition|?
name|toManyRelationshipChanges
else|:
name|Collections
operator|.
expr|<
name|String
operator|,
name|ToManyRelationshipChange
operator|>
name|emptyMap
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|ToOneRelationshipChange
argument_list|>
name|getToOneRelationshipChanges
parameter_list|()
block|{
return|return
name|toOneRelationshipChanges
operator|!=
literal|null
condition|?
name|toOneRelationshipChanges
else|:
name|Collections
operator|.
expr|<
name|String
operator|,
name|ToOneRelationshipChange
operator|>
name|emptyMap
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectChangeType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectId
name|getPreCommitId
parameter_list|()
block|{
return|return
name|preCommitId
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectId
name|getPostCommitId
parameter_list|()
block|{
return|return
name|postCommitId
operator|!=
literal|null
condition|?
name|postCommitId
else|:
name|preCommitId
return|;
block|}
specifier|public
name|void
name|setPostCommitId
parameter_list|(
name|ObjectId
name|postCommitId
parameter_list|)
block|{
name|this
operator|.
name|postCommitId
operator|=
name|postCommitId
expr_stmt|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|ObjectChangeType
name|changeType
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|type
operator|==
literal|null
operator|||
name|TYPE_PRECEDENCE
index|[
name|changeType
operator|.
name|ordinal
argument_list|()
index|]
operator|>
name|TYPE_PRECEDENCE
index|[
name|this
operator|.
name|type
operator|.
name|ordinal
argument_list|()
index|]
condition|)
block|{
name|this
operator|.
name|type
operator|=
name|changeType
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|toManyRelationshipConnected
parameter_list|(
name|String
name|property
parameter_list|,
name|ObjectId
name|value
parameter_list|)
block|{
name|getOrCreateToManyChange
argument_list|(
name|property
argument_list|)
operator|.
name|connected
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|toManyRelationshipDisconnected
parameter_list|(
name|String
name|property
parameter_list|,
name|ObjectId
name|value
parameter_list|)
block|{
name|getOrCreateToManyChange
argument_list|(
name|property
argument_list|)
operator|.
name|disconnected
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|toOneRelationshipConnected
parameter_list|(
name|String
name|property
parameter_list|,
name|ObjectId
name|value
parameter_list|)
block|{
name|getOrCreateToOneChange
argument_list|(
name|property
argument_list|)
operator|.
name|connected
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|toOneRelationshipDisconnected
parameter_list|(
name|String
name|property
parameter_list|,
name|ObjectId
name|value
parameter_list|)
block|{
name|getOrCreateToOneChange
argument_list|(
name|property
argument_list|)
operator|.
name|disconnected
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|attributeChanged
parameter_list|(
name|String
name|property
parameter_list|,
name|Object
name|oldValue
parameter_list|,
name|Object
name|newValue
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Null op"
argument_list|)
throw|;
block|}
name|MutableAttributeChange
name|c
init|=
name|getOrCreateAttributeChange
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|c
operator|.
name|setNewValue
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|c
operator|.
name|setOldValue
argument_list|(
name|oldValue
argument_list|)
expr_stmt|;
block|}
specifier|private
name|MutableAttributeChange
name|getOrCreateAttributeChange
parameter_list|(
name|String
name|property
parameter_list|)
block|{
name|MutableAttributeChange
name|pChange
init|=
name|attributeChanges
operator|!=
literal|null
condition|?
name|attributeChanges
operator|.
name|get
argument_list|(
name|property
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|pChange
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|attributeChanges
operator|==
literal|null
condition|)
block|{
name|attributeChanges
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|pChange
operator|=
operator|new
name|MutableAttributeChange
argument_list|()
expr_stmt|;
name|attributeChanges
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|pChange
argument_list|)
expr_stmt|;
block|}
return|return
name|pChange
return|;
block|}
specifier|private
name|MutableToOneRelationshipChange
name|getOrCreateToOneChange
parameter_list|(
name|String
name|property
parameter_list|)
block|{
name|MutableToOneRelationshipChange
name|pChange
init|=
name|toOneRelationshipChanges
operator|!=
literal|null
condition|?
name|toOneRelationshipChanges
operator|.
name|get
argument_list|(
name|property
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|pChange
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|toOneRelationshipChanges
operator|==
literal|null
condition|)
block|{
name|toOneRelationshipChanges
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|pChange
operator|=
operator|new
name|MutableToOneRelationshipChange
argument_list|()
expr_stmt|;
name|toOneRelationshipChanges
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|pChange
argument_list|)
expr_stmt|;
block|}
return|return
name|pChange
return|;
block|}
specifier|private
name|MutableToManyRelationshipChange
name|getOrCreateToManyChange
parameter_list|(
name|String
name|property
parameter_list|)
block|{
name|MutableToManyRelationshipChange
name|pChange
init|=
name|toManyRelationshipChanges
operator|!=
literal|null
condition|?
name|toManyRelationshipChanges
operator|.
name|get
argument_list|(
name|property
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|pChange
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|toManyRelationshipChanges
operator|==
literal|null
condition|)
block|{
name|toManyRelationshipChanges
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|pChange
operator|=
operator|new
name|MutableToManyRelationshipChange
argument_list|()
expr_stmt|;
name|toManyRelationshipChanges
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|pChange
argument_list|)
expr_stmt|;
block|}
return|return
name|pChange
return|;
block|}
block|}
end_class

end_unit

