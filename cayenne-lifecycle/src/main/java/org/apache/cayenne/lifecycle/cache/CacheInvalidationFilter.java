begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|lifecycle
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannelFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannelFilterChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|annotation
operator|.
name|PrePersist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|annotation
operator|.
name|PreRemove
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|annotation
operator|.
name|PreUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|cache
operator|.
name|QueryCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_comment
comment|/**  * A {@link DataChannelFilter} that invalidates cache groups defined for mapped entities  * via {@link CacheGroups} annotations.  *   * @since 3.1  */
end_comment

begin_class
specifier|public
class|class
name|CacheInvalidationFilter
implements|implements
name|DataChannelFilter
block|{
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|groups
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|(
name|DataChannel
name|channel
parameter_list|)
block|{
comment|// noop
block|}
specifier|public
name|QueryResponse
name|onQuery
parameter_list|(
name|ObjectContext
name|originatingContext
parameter_list|,
name|Query
name|query
parameter_list|,
name|DataChannelFilterChain
name|filterChain
parameter_list|)
block|{
return|return
name|filterChain
operator|.
name|onQuery
argument_list|(
name|originatingContext
argument_list|,
name|query
argument_list|)
return|;
block|}
specifier|public
name|GraphDiff
name|onSync
parameter_list|(
name|ObjectContext
name|originatingContext
parameter_list|,
name|GraphDiff
name|changes
parameter_list|,
name|int
name|syncType
parameter_list|,
name|DataChannelFilterChain
name|filterChain
parameter_list|)
block|{
try|try
block|{
name|GraphDiff
name|result
init|=
name|filterChain
operator|.
name|onSync
argument_list|(
name|originatingContext
argument_list|,
name|changes
argument_list|,
name|syncType
argument_list|)
decl_stmt|;
comment|// no exceptions, flush...
name|Collection
argument_list|<
name|String
argument_list|>
name|groupSet
init|=
name|groups
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupSet
operator|!=
literal|null
operator|&&
operator|!
name|groupSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// TODO: replace this with QueryCache injection once CAY-1445 is done
name|QueryCache
name|cache
init|=
operator|(
operator|(
name|DataContext
operator|)
name|originatingContext
operator|)
operator|.
name|getQueryCache
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|group
range|:
name|groupSet
control|)
block|{
name|cache
operator|.
name|removeGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
name|groups
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * A callback method that records cache group to flush at the end of the commit.      */
annotation|@
name|PrePersist
argument_list|(
name|entityAnnotations
operator|=
name|CacheGroups
operator|.
name|class
argument_list|)
annotation|@
name|PreRemove
argument_list|(
name|entityAnnotations
operator|=
name|CacheGroups
operator|.
name|class
argument_list|)
annotation|@
name|PreUpdate
argument_list|(
name|entityAnnotations
operator|=
name|CacheGroups
operator|.
name|class
argument_list|)
specifier|protected
name|void
name|preCommit
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|groupSet
init|=
name|groups
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupSet
operator|==
literal|null
condition|)
block|{
name|groupSet
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|groups
operator|.
name|set
argument_list|(
name|groupSet
argument_list|)
expr_stmt|;
block|}
name|addCacheGroups
argument_list|(
name|groupSet
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
comment|/**      * A method that builds a list of cache groups for a given object and adds them to the      * invalidation group set. This implementation adds all groups defined via      * {@link CacheGroups} annotation for a given class. Subclasses may override this      * method to provide more fine-grained filtering of cache groups to invalidate, based      * on the state of the object.      */
specifier|protected
name|void
name|addCacheGroups
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|groupSet
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
name|CacheGroups
name|a
init|=
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|CacheGroups
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|group
range|:
name|a
operator|.
name|value
argument_list|()
control|)
block|{
name|groupSet
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

