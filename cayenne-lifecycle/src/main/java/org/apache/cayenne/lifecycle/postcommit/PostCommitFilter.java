begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|lifecycle
operator|.
name|postcommit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannelFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannelFilterChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphChangeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|graph
operator|.
name|GraphDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|lifecycle
operator|.
name|changemap
operator|.
name|ChangeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|lifecycle
operator|.
name|changemap
operator|.
name|MutableChangeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|lifecycle
operator|.
name|postcommit
operator|.
name|meta
operator|.
name|PostCommitEntityFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_comment
comment|/**  * A {@link DataChannelFilter} that captures commit changes, delegating their  * processing to an underlying collection of listeners.  *   * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|PostCommitFilter
implements|implements
name|DataChannelFilter
block|{
specifier|static
specifier|final
name|String
name|POST_COMMIT_LISTENERS_LIST
init|=
literal|"cayenne.server.post_commit.listeners"
decl_stmt|;
specifier|private
name|PostCommitEntityFactory
name|entityFactory
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|PostCommitListener
argument_list|>
name|listeners
decl_stmt|;
specifier|public
name|PostCommitFilter
parameter_list|(
annotation|@
name|Inject
name|PostCommitEntityFactory
name|entityFactory
parameter_list|,
annotation|@
name|Inject
argument_list|(
name|POST_COMMIT_LISTENERS_LIST
argument_list|)
name|List
argument_list|<
name|PostCommitListener
argument_list|>
name|listeners
parameter_list|)
block|{
name|this
operator|.
name|entityFactory
operator|=
name|entityFactory
expr_stmt|;
name|this
operator|.
name|listeners
operator|=
name|listeners
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|DataChannel
name|channel
parameter_list|)
block|{
comment|// do nothing...
block|}
annotation|@
name|Override
specifier|public
name|QueryResponse
name|onQuery
parameter_list|(
name|ObjectContext
name|originatingContext
parameter_list|,
name|Query
name|query
parameter_list|,
name|DataChannelFilterChain
name|filterChain
parameter_list|)
block|{
return|return
name|filterChain
operator|.
name|onQuery
argument_list|(
name|originatingContext
argument_list|,
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|GraphDiff
name|onSync
parameter_list|(
name|ObjectContext
name|originatingContext
parameter_list|,
name|GraphDiff
name|beforeDiff
parameter_list|,
name|int
name|syncType
parameter_list|,
name|DataChannelFilterChain
name|filterChain
parameter_list|)
block|{
comment|// process commits only; skip rollback
if|if
condition|(
name|syncType
operator|!=
name|DataChannel
operator|.
name|FLUSH_CASCADE_SYNC
operator|&&
name|syncType
operator|!=
name|DataChannel
operator|.
name|FLUSH_NOCASCADE_SYNC
condition|)
block|{
return|return
name|filterChain
operator|.
name|onSync
argument_list|(
name|originatingContext
argument_list|,
name|beforeDiff
argument_list|,
name|syncType
argument_list|)
return|;
block|}
comment|// don't collect changes if there are no listeners
if|if
condition|(
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|filterChain
operator|.
name|onSync
argument_list|(
name|originatingContext
argument_list|,
name|beforeDiff
argument_list|,
name|syncType
argument_list|)
return|;
block|}
name|MutableChangeMap
name|changes
init|=
operator|new
name|MutableChangeMap
argument_list|()
decl_stmt|;
comment|// passing DataDomain, not ObjectContext to speed things up
comment|// and avoid capturing changed state when fetching snapshots
name|DataChannel
name|channel
init|=
name|originatingContext
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|beforeCommit
argument_list|(
name|changes
argument_list|,
name|channel
argument_list|,
name|beforeDiff
argument_list|)
expr_stmt|;
name|GraphDiff
name|afterDiff
init|=
name|filterChain
operator|.
name|onSync
argument_list|(
name|originatingContext
argument_list|,
name|beforeDiff
argument_list|,
name|syncType
argument_list|)
decl_stmt|;
name|afterCommit
argument_list|(
name|changes
argument_list|,
name|channel
argument_list|,
name|beforeDiff
argument_list|,
name|afterDiff
argument_list|)
expr_stmt|;
name|notifyListeners
argument_list|(
name|originatingContext
argument_list|,
name|changes
argument_list|)
expr_stmt|;
return|return
name|afterDiff
return|;
block|}
specifier|private
name|void
name|beforeCommit
parameter_list|(
name|MutableChangeMap
name|changes
parameter_list|,
name|DataChannel
name|channel
parameter_list|,
name|GraphDiff
name|contextDiff
parameter_list|)
block|{
comment|// capture snapshots of deleted objects before they are purged from
comment|// cache
name|GraphChangeHandler
name|handler
init|=
operator|new
name|DiffFilter
argument_list|(
name|entityFactory
argument_list|,
operator|new
name|DeletedDiffProcessor
argument_list|(
name|changes
argument_list|,
name|channel
argument_list|,
name|entityFactory
argument_list|)
argument_list|)
decl_stmt|;
name|contextDiff
operator|.
name|apply
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|afterCommit
parameter_list|(
name|MutableChangeMap
name|changes
parameter_list|,
name|DataChannel
name|channel
parameter_list|,
name|GraphDiff
name|contextDiff
parameter_list|,
name|GraphDiff
name|dbDiff
parameter_list|)
block|{
name|GraphChangeHandler
name|handler
init|=
operator|new
name|DiffFilter
argument_list|(
name|entityFactory
argument_list|,
operator|new
name|DiffProcessor
argument_list|(
name|changes
argument_list|,
name|channel
operator|.
name|getEntityResolver
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|contextDiff
operator|.
name|apply
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|dbDiff
operator|.
name|apply
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|notifyListeners
parameter_list|(
name|ObjectContext
name|originatingContext
parameter_list|,
name|ChangeMap
name|changes
parameter_list|)
block|{
for|for
control|(
name|PostCommitListener
name|l
range|:
name|listeners
control|)
block|{
name|l
operator|.
name|onPostCommit
argument_list|(
name|originatingContext
argument_list|,
name|changes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

