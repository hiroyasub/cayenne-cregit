begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|itest
operator|.
name|pojo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SelectQuery
import|;
end_import

begin_class
specifier|public
class|class
name|OneToManyObjectTest
extends|extends
name|PojoContextCase
block|{
specifier|public
name|void
name|testSelectToMany
parameter_list|()
throws|throws
name|Exception
block|{
name|getDbHelper
argument_list|()
operator|.
name|deleteAll
argument_list|(
literal|"many_to_one_entity1"
argument_list|)
expr_stmt|;
name|getDbHelper
argument_list|()
operator|.
name|deleteAll
argument_list|(
literal|"one_to_many_entity1"
argument_list|)
expr_stmt|;
name|getDbHelper
argument_list|()
operator|.
name|insert
argument_list|(
literal|"one_to_many_entity1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"id"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|5
block|}
argument_list|)
expr_stmt|;
name|getDbHelper
argument_list|()
operator|.
name|insert
argument_list|(
literal|"many_to_one_entity1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"id"
block|,
literal|"one_to_many_entity1_id"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|16
block|,
literal|5
block|}
argument_list|)
expr_stmt|;
name|getDbHelper
argument_list|()
operator|.
name|insert
argument_list|(
literal|"many_to_one_entity1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"id"
block|,
literal|"one_to_many_entity1_id"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|17
block|,
literal|5
block|}
argument_list|)
expr_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|OneToManyEntity1
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|OneToManyEntity1
name|o1
init|=
operator|(
name|OneToManyEntity1
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Field
name|f
init|=
name|OneToManyEntity1
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"$cay_faultResolved_toMany"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|f
operator|.
name|get
argument_list|(
name|o1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ManyToOneEntity1
argument_list|>
name|or
init|=
name|o1
operator|.
name|getToMany
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|or
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|f
operator|.
name|get
argument_list|(
name|o1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|or
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|o1
argument_list|,
name|or
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getToOne
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectToManyWithPrefetch
parameter_list|()
throws|throws
name|Exception
block|{
name|getDbHelper
argument_list|()
operator|.
name|deleteAll
argument_list|(
literal|"many_to_one_entity1"
argument_list|)
expr_stmt|;
name|getDbHelper
argument_list|()
operator|.
name|deleteAll
argument_list|(
literal|"one_to_many_entity1"
argument_list|)
expr_stmt|;
name|getDbHelper
argument_list|()
operator|.
name|insert
argument_list|(
literal|"one_to_many_entity1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"id"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|5
block|}
argument_list|)
expr_stmt|;
name|getDbHelper
argument_list|()
operator|.
name|insert
argument_list|(
literal|"many_to_one_entity1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"id"
block|,
literal|"one_to_many_entity1_id"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|16
block|,
literal|5
block|}
argument_list|)
expr_stmt|;
name|getDbHelper
argument_list|()
operator|.
name|insert
argument_list|(
literal|"many_to_one_entity1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"id"
block|,
literal|"one_to_many_entity1_id"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|17
block|,
literal|5
block|}
argument_list|)
expr_stmt|;
name|SelectQuery
name|q
init|=
operator|new
name|SelectQuery
argument_list|(
name|OneToManyEntity1
operator|.
name|class
argument_list|)
decl_stmt|;
name|q
operator|.
name|addPrefetch
argument_list|(
literal|"toMany"
argument_list|)
expr_stmt|;
name|List
name|results
init|=
name|context
operator|.
name|performQuery
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|OneToManyEntity1
name|o1
init|=
operator|(
name|OneToManyEntity1
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Field
name|f
init|=
name|OneToManyEntity1
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"$cay_faultResolved_toMany"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|f
operator|.
name|get
argument_list|(
name|o1
argument_list|)
argument_list|)
expr_stmt|;
name|blockContextQueries
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|ManyToOneEntity1
argument_list|>
name|or
init|=
name|o1
operator|.
name|getToMany
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|or
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|or
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|o1
argument_list|,
name|or
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getToOne
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|unblockContextQueries
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testNew
parameter_list|()
throws|throws
name|Exception
block|{
name|getDbHelper
argument_list|()
operator|.
name|deleteAll
argument_list|(
literal|"many_to_one_entity1"
argument_list|)
expr_stmt|;
name|getDbHelper
argument_list|()
operator|.
name|deleteAll
argument_list|(
literal|"one_to_many_entity1"
argument_list|)
expr_stmt|;
name|OneToManyEntity1
name|o1
init|=
operator|(
name|OneToManyEntity1
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|OneToManyEntity1
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|o1
operator|.
name|getToMany
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|o1
operator|.
name|getToMany
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ManyToOneEntity1
name|o2
init|=
operator|(
name|ManyToOneEntity1
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|ManyToOneEntity1
operator|.
name|class
argument_list|)
decl_stmt|;
name|o1
operator|.
name|getToMany
argument_list|()
operator|.
name|add
argument_list|(
name|o2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|o1
operator|.
name|getToMany
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ManyToOneEntity1
name|o3
init|=
operator|(
name|ManyToOneEntity1
operator|)
name|context
operator|.
name|newObject
argument_list|(
name|ManyToOneEntity1
operator|.
name|class
argument_list|)
decl_stmt|;
name|o1
operator|.
name|getToMany
argument_list|()
operator|.
name|add
argument_list|(
name|o3
argument_list|)
expr_stmt|;
name|context
operator|.
name|commitChanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getDbHelper
argument_list|()
operator|.
name|getRowCount
argument_list|(
literal|"many_to_one_entity1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getDbHelper
argument_list|()
operator|.
name|getRowCount
argument_list|(
literal|"one_to_many_entity1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

