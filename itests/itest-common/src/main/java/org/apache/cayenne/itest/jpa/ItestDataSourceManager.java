begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|itest
operator|.
name|jpa
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conn
operator|.
name|PoolManager
import|;
end_import

begin_comment
comment|/**  * A helper class that manages test DataSource.  *   * @author Andrus Adamchik  */
end_comment

begin_class
class|class
name|ItestDataSourceManager
block|{
specifier|private
name|DataSource
name|dataSource
decl_stmt|;
specifier|private
name|String
name|schemaScriptUrl
decl_stmt|;
specifier|private
name|String
name|dbName
decl_stmt|;
name|ItestDataSourceManager
parameter_list|(
name|String
name|schemaScriptUrl
parameter_list|)
block|{
name|this
operator|.
name|schemaScriptUrl
operator|=
name|schemaScriptUrl
expr_stmt|;
comment|// create pseudo random DB name
name|this
operator|.
name|dbName
operator|=
literal|"d"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DataSource
name|getDataSource
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|dataSource
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|dataSource
operator|=
name|createDataSource
argument_list|()
expr_stmt|;
block|}
return|return
name|dataSource
return|;
block|}
name|String
name|getSchemaScriptUrl
parameter_list|()
block|{
return|return
name|schemaScriptUrl
return|;
block|}
comment|/**      * Creates DataSource and loads local schema.      */
specifier|private
name|DataSource
name|createDataSource
parameter_list|()
block|{
name|DataSource
name|dataSource
decl_stmt|;
try|try
block|{
name|dataSource
operator|=
operator|new
name|PoolManager
argument_list|(
literal|"org.hsqldb.jdbcDriver"
argument_list|,
literal|"jdbc:hsqldb:mem:"
operator|+
name|dbName
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|"sa"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error creating DataSource"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Connection
name|c
init|=
literal|null
decl_stmt|;
try|try
block|{
name|c
operator|=
name|dataSource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|loadSchema
argument_list|(
name|c
argument_list|,
name|schemaScriptUrl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error loading schema"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|dataSource
return|;
block|}
specifier|private
name|void
name|loadSchema
parameter_list|(
name|Connection
name|c
parameter_list|,
name|String
name|schemaFile
parameter_list|)
throws|throws
name|SQLException
block|{
name|InputStream
name|in
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|schemaFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"No SQL script found in classpath: "
operator|+
name|schemaFile
argument_list|)
throw|;
block|}
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Statement
name|st
init|=
name|c
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|st
operator|.
name|executeUpdate
argument_list|(
name|line
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Error reading SQL input: "
operator|+
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
end_class

end_unit

