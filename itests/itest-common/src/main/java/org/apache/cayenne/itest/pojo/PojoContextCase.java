begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|itest
operator|.
name|pojo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|DataChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_class
specifier|public
class|class
name|PojoContextCase
extends|extends
name|PojoTestCase
block|{
specifier|protected
name|DataContext
name|context
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|context
operator|=
name|ItestSetup
operator|.
name|getInstance
argument_list|()
operator|.
name|createDataContext
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ObjectContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
comment|/**      * Ensure that context can't send any queries doesn the channel.      */
specifier|protected
name|void
name|blockContextQueries
parameter_list|()
block|{
name|context
operator|.
name|setChannel
argument_list|(
operator|new
name|BlockingDataChannel
argument_list|(
name|context
operator|.
name|getChannel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|unblockContextQueries
parameter_list|()
block|{
name|DataChannel
name|channel
init|=
name|context
operator|.
name|getChannel
argument_list|()
decl_stmt|;
if|if
condition|(
name|channel
operator|instanceof
name|BlockingDataChannel
condition|)
block|{
name|context
operator|.
name|setChannel
argument_list|(
operator|(
operator|(
name|BlockingDataChannel
operator|)
name|channel
operator|)
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Ensures that DataDomain can't send queries to the DB.      */
specifier|protected
name|void
name|blockDomainQueries
parameter_list|()
block|{
name|ItestSetup
operator|.
name|getInstance
argument_list|()
operator|.
name|getDataDomain
argument_list|()
operator|.
name|setTransactionDelegate
argument_list|(
operator|new
name|BlockingTransactionDelegate
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|unblockDomainQueries
parameter_list|()
block|{
name|ItestSetup
operator|.
name|getInstance
argument_list|()
operator|.
name|getDataDomain
argument_list|()
operator|.
name|setTransactionDelegate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

