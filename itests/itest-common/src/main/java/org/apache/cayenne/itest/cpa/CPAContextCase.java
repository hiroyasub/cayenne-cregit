begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|itest
operator|.
name|cpa
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|ObjectContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|ClientServerChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|ClientChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|remote
operator|.
name|service
operator|.
name|LocalConnection
import|;
end_import

begin_class
specifier|public
class|class
name|CPAContextCase
extends|extends
name|CPATestCase
block|{
specifier|private
name|DataContext
name|context
decl_stmt|;
specifier|private
name|ObjectContext
name|clientContext
decl_stmt|;
specifier|public
name|ObjectContext
name|getContext
parameter_list|()
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|context
operator|=
name|ItestSetup
operator|.
name|getInstance
argument_list|()
operator|.
name|createDataContext
argument_list|()
expr_stmt|;
block|}
return|return
name|context
return|;
block|}
specifier|public
name|ObjectContext
name|getContext
parameter_list|(
name|boolean
name|reset
parameter_list|)
block|{
if|if
condition|(
name|reset
condition|)
block|{
name|this
operator|.
name|context
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|getContext
argument_list|()
return|;
block|}
specifier|protected
name|ObjectContext
name|getClientContext
parameter_list|()
block|{
if|if
condition|(
name|clientContext
operator|==
literal|null
condition|)
block|{
comment|// create with this test case DataContext to allow callers to poke on the
comment|// server side as well as the client
name|ClientServerChannel
name|clientServerChannel
init|=
operator|new
name|ClientServerChannel
argument_list|(
operator|(
name|DataContext
operator|)
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|LocalConnection
name|connection
init|=
operator|new
name|LocalConnection
argument_list|(
name|clientServerChannel
argument_list|)
decl_stmt|;
name|ClientChannel
name|channel
init|=
operator|new
name|ClientChannel
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|clientContext
operator|=
operator|new
name|CayenneContext
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
return|return
name|clientContext
return|;
block|}
specifier|protected
name|ObjectContext
name|getClientContext
parameter_list|(
name|boolean
name|reset
parameter_list|)
block|{
if|if
condition|(
name|reset
condition|)
block|{
name|clientContext
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|getClientContext
argument_list|()
return|;
block|}
block|}
end_class

end_unit

