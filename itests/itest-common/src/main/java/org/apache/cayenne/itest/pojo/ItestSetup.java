begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|itest
operator|.
name|pojo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|access
operator|.
name|DbGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|itest
operator|.
name|ItestDBUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_class
specifier|public
class|class
name|ItestSetup
block|{
specifier|private
specifier|static
name|ItestSetup
name|sharedInstance
decl_stmt|;
specifier|protected
name|ItestDBUtils
name|dbHelper
decl_stmt|;
specifier|protected
name|DataDomain
name|domain
decl_stmt|;
specifier|public
specifier|static
name|void
name|initInstance
parameter_list|()
block|{
name|sharedInstance
operator|=
operator|new
name|ItestSetup
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|ItestSetup
name|getInstance
parameter_list|()
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Null shared instance, call 'initInstance' first"
argument_list|,
name|sharedInstance
argument_list|)
expr_stmt|;
return|return
name|sharedInstance
return|;
block|}
specifier|protected
name|ItestSetup
parameter_list|()
block|{
name|domain
operator|=
name|Configuration
operator|.
name|getSharedConfiguration
argument_list|()
operator|.
name|getDomain
argument_list|()
expr_stmt|;
name|Iterator
name|it
init|=
name|domain
operator|.
name|getDataMaps
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DataMap
name|map
init|=
operator|(
name|DataMap
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|DataNode
name|node
init|=
name|domain
operator|.
name|lookupDataNode
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|DbGenerator
name|generator
init|=
operator|new
name|DbGenerator
argument_list|(
name|node
operator|.
name|getAdapter
argument_list|()
argument_list|,
name|map
argument_list|)
decl_stmt|;
try|try
block|{
name|generator
operator|.
name|runGenerator
argument_list|(
name|node
operator|.
name|getDataSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Error generating schema for DataMap "
operator|+
name|map
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// only single node is expected...
name|dbHelper
operator|=
operator|new
name|ItestDBUtils
argument_list|(
name|node
operator|.
name|getDataSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|DataDomain
name|getDataDomain
parameter_list|()
block|{
return|return
name|domain
return|;
block|}
specifier|public
name|DataContext
name|createDataContext
parameter_list|()
block|{
return|return
name|domain
operator|.
name|createDataContext
argument_list|()
return|;
block|}
specifier|public
name|ItestDBUtils
name|getDbHelper
parameter_list|()
block|{
return|return
name|dbHelper
return|;
block|}
block|}
end_class

end_unit

