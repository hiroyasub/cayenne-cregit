begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|itest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_comment
comment|/**  * JDBC utilities for integration testing that bypass Cayenne for DB access.  *   */
end_comment

begin_class
specifier|public
class|class
name|ItestDBUtils
block|{
specifier|protected
name|DataSource
name|dataSource
decl_stmt|;
specifier|public
name|ItestDBUtils
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
block|{
name|this
operator|.
name|dataSource
operator|=
name|dataSource
expr_stmt|;
block|}
comment|/**      * Inserts a single row.      */
specifier|public
name|void
name|insert
parameter_list|(
name|String
name|table
parameter_list|,
name|String
index|[]
name|columns
parameter_list|,
name|Object
index|[]
name|values
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|columns
operator|.
name|length
operator|!=
name|values
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Columns and values arrays have different sizes: "
operator|+
name|columns
operator|.
name|length
operator|+
literal|" and "
operator|+
name|values
operator|.
name|length
argument_list|)
throw|;
block|}
if|if
condition|(
name|columns
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No columns"
argument_list|)
throw|;
block|}
name|StringBuilder
name|sql
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"INSERT INTO "
argument_list|)
decl_stmt|;
name|sql
operator|.
name|append
argument_list|(
name|table
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|columns
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|columns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|columns
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
literal|") VALUES (?"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sql
operator|.
name|append
argument_list|(
literal|", ?"
argument_list|)
expr_stmt|;
block|}
name|sql
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|Connection
name|c
init|=
name|getConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|PreparedStatement
name|st
init|=
name|c
operator|.
name|prepareStatement
argument_list|(
name|sql
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|st
operator|.
name|setObject
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|st
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|c
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|deleteAll
parameter_list|(
name|String
name|table
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|sql
init|=
literal|"delete from "
operator|+
name|table
decl_stmt|;
name|Connection
name|c
init|=
name|getConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|Statement
name|st
init|=
name|c
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|st
operator|.
name|executeUpdate
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
name|c
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|count
return|;
block|}
finally|finally
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getRowCount
parameter_list|(
name|String
name|table
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|sql
init|=
literal|"select count(*) from "
operator|+
name|table
decl_stmt|;
return|return
operator|new
name|RowTemplate
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|Integer
name|readRow
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
return|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|String
name|sql
init|=
literal|"select "
operator|+
name|column
operator|+
literal|" from "
operator|+
name|table
decl_stmt|;
return|return
operator|new
name|RowTemplate
argument_list|<
name|Object
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|Object
name|readRow
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|rs
operator|.
name|getObject
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
return|;
block|}
specifier|public
name|byte
name|getByte
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|String
name|sql
init|=
literal|"select "
operator|+
name|column
operator|+
literal|" from "
operator|+
name|table
decl_stmt|;
return|return
operator|new
name|RowTemplate
argument_list|<
name|Byte
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|Byte
name|readRow
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|rs
operator|.
name|getByte
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
return|;
block|}
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|String
name|sql
init|=
literal|"select "
operator|+
name|column
operator|+
literal|" from "
operator|+
name|table
decl_stmt|;
return|return
operator|new
name|RowTemplate
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|byte
index|[]
name|readRow
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|rs
operator|.
name|getBytes
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
return|;
block|}
specifier|public
name|int
name|getInt
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|String
name|sql
init|=
literal|"select "
operator|+
name|column
operator|+
literal|" from "
operator|+
name|table
decl_stmt|;
return|return
operator|new
name|RowTemplate
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|Integer
name|readRow
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
return|;
block|}
specifier|public
name|long
name|getLong
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|String
name|sql
init|=
literal|"select "
operator|+
name|column
operator|+
literal|" from "
operator|+
name|table
decl_stmt|;
return|return
operator|new
name|RowTemplate
argument_list|<
name|Long
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|Long
name|readRow
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|rs
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
return|;
block|}
specifier|public
name|double
name|getDouble
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|String
name|sql
init|=
literal|"select "
operator|+
name|column
operator|+
literal|" from "
operator|+
name|table
decl_stmt|;
return|return
operator|new
name|RowTemplate
argument_list|<
name|Double
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|Double
name|readRow
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|rs
operator|.
name|getDouble
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|getBoolean
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|String
name|sql
init|=
literal|"select "
operator|+
name|column
operator|+
literal|" from "
operator|+
name|table
decl_stmt|;
return|return
operator|new
name|RowTemplate
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|Boolean
name|readRow
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|rs
operator|.
name|getBoolean
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Date
name|getUtilDate
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
name|Timestamp
name|ts
init|=
name|getTimestamp
argument_list|(
name|table
argument_list|,
name|column
argument_list|)
decl_stmt|;
return|return
name|ts
operator|!=
literal|null
condition|?
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|(
name|ts
operator|.
name|getTime
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|java
operator|.
name|sql
operator|.
name|Date
name|getSqlDate
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|String
name|sql
init|=
literal|"select "
operator|+
name|column
operator|+
literal|" from "
operator|+
name|table
decl_stmt|;
return|return
operator|new
name|RowTemplate
argument_list|<
name|java
operator|.
name|sql
operator|.
name|Date
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|java
operator|.
name|sql
operator|.
name|Date
name|readRow
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|rs
operator|.
name|getDate
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
return|;
block|}
specifier|public
name|Time
name|getTime
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|String
name|sql
init|=
literal|"select "
operator|+
name|column
operator|+
literal|" from "
operator|+
name|table
decl_stmt|;
return|return
operator|new
name|RowTemplate
argument_list|<
name|Time
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|Time
name|readRow
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|rs
operator|.
name|getTime
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
return|;
block|}
specifier|public
name|Timestamp
name|getTimestamp
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|column
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|String
name|sql
init|=
literal|"select "
operator|+
name|column
operator|+
literal|" from "
operator|+
name|table
decl_stmt|;
return|return
operator|new
name|RowTemplate
argument_list|<
name|Timestamp
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
name|Timestamp
name|readRow
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|rs
operator|.
name|getTimestamp
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
return|;
block|}
specifier|public
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|dataSource
operator|.
name|getConnection
argument_list|()
return|;
block|}
block|}
end_class

end_unit

