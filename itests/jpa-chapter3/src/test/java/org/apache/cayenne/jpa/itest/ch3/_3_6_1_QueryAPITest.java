begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|itest
operator|.
name|ch3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|NonUniqueResultException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|itest
operator|.
name|jpa
operator|.
name|EntityManagerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|itest
operator|.
name|ch3
operator|.
name|entity
operator|.
name|SimpleEntity
import|;
end_import

begin_class
specifier|public
class|class
name|_3_6_1_QueryAPITest
extends|extends
name|EntityManagerCase
block|{
specifier|public
name|void
name|testGetResultListEntity
parameter_list|()
throws|throws
name|Exception
block|{
name|getDbHelper
argument_list|()
operator|.
name|deleteAll
argument_list|(
literal|"SimpleEntity"
argument_list|)
expr_stmt|;
name|getTableHelper
argument_list|(
literal|"SimpleEntity"
argument_list|)
operator|.
name|deleteAll
argument_list|()
operator|.
name|setColumns
argument_list|(
literal|"id"
argument_list|,
literal|"property1"
argument_list|)
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"X"
argument_list|)
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"Y"
argument_list|)
expr_stmt|;
name|EntityManager
name|em
init|=
name|getEntityManager
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
name|em
operator|.
name|createQuery
argument_list|(
literal|"SELECT a FROM SimpleEntity a ORDER BY a.property1"
argument_list|)
decl_stmt|;
name|List
name|result
init|=
name|query
operator|.
name|getResultList
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|SimpleEntity
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetResultListScalar
parameter_list|()
throws|throws
name|Exception
block|{
name|getDbHelper
argument_list|()
operator|.
name|deleteAll
argument_list|(
literal|"SimpleEntity"
argument_list|)
expr_stmt|;
name|getTableHelper
argument_list|(
literal|"SimpleEntity"
argument_list|)
operator|.
name|deleteAll
argument_list|()
operator|.
name|setColumns
argument_list|(
literal|"id"
argument_list|,
literal|"property1"
argument_list|)
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"X"
argument_list|)
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"Y"
argument_list|)
expr_stmt|;
name|EntityManager
name|em
init|=
name|getEntityManager
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
name|em
operator|.
name|createQuery
argument_list|(
literal|"SELECT count(a) FROM SimpleEntity a"
argument_list|)
decl_stmt|;
name|List
name|result
init|=
name|query
operator|.
name|getResultList
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Long
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetResultListMixed
parameter_list|()
throws|throws
name|Exception
block|{
name|getDbHelper
argument_list|()
operator|.
name|deleteAll
argument_list|(
literal|"SimpleEntity"
argument_list|)
expr_stmt|;
name|getTableHelper
argument_list|(
literal|"SimpleEntity"
argument_list|)
operator|.
name|deleteAll
argument_list|()
operator|.
name|setColumns
argument_list|(
literal|"id"
argument_list|,
literal|"property1"
argument_list|)
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"X"
argument_list|)
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"Y"
argument_list|)
expr_stmt|;
name|EntityManager
name|em
init|=
name|getEntityManager
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
name|em
operator|.
name|createQuery
argument_list|(
literal|"SELECT a, a.id FROM SimpleEntity a ORDER BY a.property1"
argument_list|)
decl_stmt|;
name|List
name|result
init|=
name|query
operator|.
name|getResultList
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Object
index|[]
argument_list|)
expr_stmt|;
name|Object
index|[]
name|row0
init|=
operator|(
name|Object
index|[]
operator|)
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|row0
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row0
index|[
literal|0
index|]
operator|instanceof
name|SimpleEntity
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|row0
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetSingleResultListEntity
parameter_list|()
throws|throws
name|Exception
block|{
name|getDbHelper
argument_list|()
operator|.
name|deleteAll
argument_list|(
literal|"SimpleEntity"
argument_list|)
expr_stmt|;
name|getTableHelper
argument_list|(
literal|"SimpleEntity"
argument_list|)
operator|.
name|deleteAll
argument_list|()
operator|.
name|setColumns
argument_list|(
literal|"id"
argument_list|,
literal|"property1"
argument_list|)
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
name|EntityManager
name|em
init|=
name|getEntityManager
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
name|em
operator|.
name|createQuery
argument_list|(
literal|"SELECT a FROM SimpleEntity a ORDER BY a.property1"
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|query
operator|.
name|getSingleResult
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|instanceof
name|SimpleEntity
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetSingleResultListEntityNonUniqueResultException
parameter_list|()
throws|throws
name|Exception
block|{
name|getDbHelper
argument_list|()
operator|.
name|deleteAll
argument_list|(
literal|"SimpleEntity"
argument_list|)
expr_stmt|;
name|getTableHelper
argument_list|(
literal|"SimpleEntity"
argument_list|)
operator|.
name|deleteAll
argument_list|()
operator|.
name|setColumns
argument_list|(
literal|"id"
argument_list|,
literal|"property1"
argument_list|)
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"X"
argument_list|)
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"Y"
argument_list|)
expr_stmt|;
name|EntityManager
name|em
init|=
name|getEntityManager
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
name|em
operator|.
name|createQuery
argument_list|(
literal|"SELECT a FROM SimpleEntity a ORDER BY a.property1"
argument_list|)
decl_stmt|;
try|try
block|{
name|query
operator|.
name|getSingleResult
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Must have thrown NonUniqueResultException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NonUniqueResultException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_class

end_unit

