begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|itest
operator|.
name|ch3
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityExistsException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|PersistenceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|itest
operator|.
name|jpa
operator|.
name|EntityManagerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|itest
operator|.
name|ch3
operator|.
name|entity
operator|.
name|NonEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|itest
operator|.
name|ch3
operator|.
name|entity
operator|.
name|SimpleEntity
import|;
end_import

begin_class
specifier|public
class|class
name|_3_1_1_EntityManagerTest
extends|extends
name|EntityManagerCase
block|{
specifier|public
name|void
name|testPersist
parameter_list|()
throws|throws
name|Exception
block|{
name|getDbHelper
argument_list|()
operator|.
name|deleteAll
argument_list|(
literal|"SimpleEntity"
argument_list|)
expr_stmt|;
name|SimpleEntity
name|e
init|=
operator|new
name|SimpleEntity
argument_list|()
decl_stmt|;
name|e
operator|.
name|setProperty1
argument_list|(
literal|"XXX"
argument_list|)
expr_stmt|;
name|getEntityManager
argument_list|()
operator|.
name|persist
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|getEntityManager
argument_list|()
operator|.
name|getTransaction
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getDbHelper
argument_list|()
operator|.
name|getRowCount
argument_list|(
literal|"SimpleEntity"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPersistNonEntity
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|getEntityManager
argument_list|()
operator|.
name|persist
argument_list|(
operator|new
name|NonEntity
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must have thrown IllegalARgumentException on non entity"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testPersistEntityExistsException
parameter_list|()
block|{
name|SimpleEntity
name|e1
init|=
operator|new
name|SimpleEntity
argument_list|()
decl_stmt|;
name|e1
operator|.
name|updateIdField
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|SimpleEntity
name|e2
init|=
operator|new
name|SimpleEntity
argument_list|()
decl_stmt|;
name|e2
operator|.
name|updateIdField
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|getEntityManager
argument_list|()
operator|.
name|persist
argument_list|(
name|e1
argument_list|)
expr_stmt|;
try|try
block|{
name|getEntityManager
argument_list|()
operator|.
name|persist
argument_list|(
name|e2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityExistsException
name|e
parameter_list|)
block|{
comment|// expected
return|return;
block|}
comment|// if no EntityExistsException was thrown immediately, try doing a commit - an
comment|// exception must be thrown here
try|try
block|{
name|getEntityManager
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PersistenceException
name|e
parameter_list|)
block|{
comment|// expected
return|return;
block|}
try|try
block|{
name|getEntityManager
argument_list|()
operator|.
name|getTransaction
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PersistenceException
name|e
parameter_list|)
block|{
comment|// expected
return|return;
block|}
name|fail
argument_list|(
literal|"Must have thrown on EntityExists condition."
argument_list|)
expr_stmt|;
block|}
comment|// TODO: andrus, 1/3/2007 - this fails with Null ObjectId exception
specifier|public
name|void
name|_testMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|getDbHelper
argument_list|()
operator|.
name|deleteAll
argument_list|(
literal|"SimpleEntity"
argument_list|)
expr_stmt|;
name|getDbHelper
argument_list|()
operator|.
name|insert
argument_list|(
literal|"SimpleEntity"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"id"
block|,
literal|"property1"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|"XXX"
block|}
argument_list|)
expr_stmt|;
name|SimpleEntity
name|e1
init|=
operator|new
name|SimpleEntity
argument_list|()
decl_stmt|;
name|e1
operator|.
name|setProperty1
argument_list|(
literal|"YYY"
argument_list|)
expr_stmt|;
name|e1
operator|.
name|updateIdField
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// detailed merge logic is described in chapter 3.2.4.1
name|Object
name|merged
init|=
name|getEntityManager
argument_list|()
operator|.
name|merge
argument_list|(
name|e1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|merged
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|merged
operator|instanceof
name|SimpleEntity
argument_list|)
expr_stmt|;
name|SimpleEntity
name|e2
init|=
operator|(
name|SimpleEntity
operator|)
name|merged
decl_stmt|;
name|assertEquals
argument_list|(
literal|"YYY"
argument_list|,
name|e2
operator|.
name|getProperty1
argument_list|()
argument_list|)
expr_stmt|;
name|getEntityManager
argument_list|()
operator|.
name|getTransaction
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getDbHelper
argument_list|()
operator|.
name|getRowCount
argument_list|(
literal|"SimpleEntity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"YYY"
argument_list|,
name|getDbHelper
argument_list|()
operator|.
name|getObject
argument_list|(
literal|"SimpleEntity"
argument_list|,
literal|"property1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMergeRemovedEntity
parameter_list|()
throws|throws
name|Exception
block|{
name|getDbHelper
argument_list|()
operator|.
name|deleteAll
argument_list|(
literal|"SimpleEntity"
argument_list|)
expr_stmt|;
name|getDbHelper
argument_list|()
operator|.
name|insert
argument_list|(
literal|"SimpleEntity"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"id"
block|,
literal|"property1"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|"XXX"
block|}
argument_list|)
expr_stmt|;
name|SimpleEntity
name|e1
init|=
operator|(
name|SimpleEntity
operator|)
name|getEntityManager
argument_list|()
operator|.
name|find
argument_list|(
name|SimpleEntity
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|getEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
name|e1
argument_list|)
expr_stmt|;
try|try
block|{
name|getEntityManager
argument_list|()
operator|.
name|merge
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must have thrown IllegalArgumentException on merging a removed entity."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testMergeNonEntity
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|getEntityManager
argument_list|()
operator|.
name|merge
argument_list|(
operator|new
name|NonEntity
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must have thrown IllegalArgumentException on merging a non entity."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|// TODO: andrus, 1/3/2007 - implement - need to emulate the container environment
specifier|public
name|void
name|_testMergeTransactionRequiredException
parameter_list|()
block|{
comment|// throws TransactionRequiredException if invoked on a
comment|// container-managed entity manager of type
comment|// PersistenceContextType.TRANSACTION and there is
comment|// no transaction.
block|}
specifier|public
name|void
name|testRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|getDbHelper
argument_list|()
operator|.
name|deleteAll
argument_list|(
literal|"SimpleEntity"
argument_list|)
expr_stmt|;
name|getDbHelper
argument_list|()
operator|.
name|insert
argument_list|(
literal|"SimpleEntity"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"id"
block|,
literal|"property1"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|"XXX"
block|}
argument_list|)
expr_stmt|;
name|SimpleEntity
name|e1
init|=
operator|(
name|SimpleEntity
operator|)
name|getEntityManager
argument_list|()
operator|.
name|find
argument_list|(
name|SimpleEntity
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|getEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|getEntityManager
argument_list|()
operator|.
name|getTransaction
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getDbHelper
argument_list|()
operator|.
name|getRowCount
argument_list|(
literal|"SimpleEntity"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveNonEntity
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|getEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
operator|new
name|NonEntity
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must have thrown IllegalArgumentException on non entity"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testRemoveDetachedEntity
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|getEntityManager
argument_list|()
operator|.
name|remove
argument_list|(
operator|new
name|SimpleEntity
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must have thrown IllegalArgumentException on detached entity"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|// TODO: andrus, 1/3/2007 - implement - need to emulate the container environment
specifier|public
name|void
name|_testRemoveTransactionRequiredException
parameter_list|()
block|{
comment|// throws TransactionRequiredException if invoked on a
comment|// container-managed entity manager of type
comment|// PersistenceContextType.TRANSACTION and there is
comment|// no transaction.
block|}
specifier|public
name|void
name|testFind
parameter_list|()
throws|throws
name|Exception
block|{
name|getDbHelper
argument_list|()
operator|.
name|deleteAll
argument_list|(
literal|"SimpleEntity"
argument_list|)
expr_stmt|;
name|getDbHelper
argument_list|()
operator|.
name|insert
argument_list|(
literal|"SimpleEntity"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"id"
block|,
literal|"property1"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|15
block|,
literal|"XXX"
block|}
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getEntityManager
argument_list|()
operator|.
name|find
argument_list|(
name|SimpleEntity
operator|.
name|class
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|getEntityManager
argument_list|()
operator|.
name|find
argument_list|(
name|SimpleEntity
operator|.
name|class
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFindNonEntity
parameter_list|()
block|{
try|try
block|{
name|getEntityManager
argument_list|()
operator|.
name|find
argument_list|(
name|NonEntity
operator|.
name|class
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|// TODO: andrus, 1/3/2007 - this fails - need algorithm for id validation.
specifier|public
name|void
name|_testFindBadIdType
parameter_list|()
block|{
try|try
block|{
name|getEntityManager
argument_list|()
operator|.
name|find
argument_list|(
name|SimpleEntity
operator|.
name|class
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must have thrown on invalid id class."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|// TODO: andrus, 1/3/2007 - implement - need to emulate the container environment
specifier|public
name|void
name|_testRefreshTransactionRequiredException
parameter_list|()
block|{
comment|// throws TransactionRequiredException if invoked on a
comment|// container-managed entity manager of type
comment|// PersistenceContextType.TRANSACTION and there is
comment|// no transaction.
block|}
block|}
end_class

end_unit

