begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|itest
operator|.
name|ch9
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|itest
operator|.
name|jpa
operator|.
name|EntityManagerCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|jpa
operator|.
name|itest
operator|.
name|ch9
operator|.
name|entity
operator|.
name|BasicEntity
import|;
end_import

begin_comment
comment|/**  * Tests not included here: (1) supported types are tested in chapter 2; (2) there is no  * good way to test optionality, as it is only a hint to the schema generator that is used  * outside the JPA spec. It should be tested at the provider level.  *   */
end_comment

begin_class
specifier|public
class|class
name|_9_1_18_BasicAnnotationTest
extends|extends
name|EntityManagerCase
block|{
specifier|public
name|void
name|testSelectBasicDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|getDbHelper
argument_list|()
operator|.
name|deleteAll
argument_list|(
literal|"BasicEntity"
argument_list|)
expr_stmt|;
name|getDbHelper
argument_list|()
operator|.
name|insert
argument_list|(
literal|"BasicEntity"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"id"
block|,
literal|"basicDefault"
block|,
literal|"basicDefaultInt"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|"a"
block|,
literal|67
block|}
argument_list|)
expr_stmt|;
name|BasicEntity
name|o1
init|=
name|getEntityManager
argument_list|()
operator|.
name|find
argument_list|(
name|BasicEntity
operator|.
name|class
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|o1
operator|.
name|getBasicDefaultX
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|67
argument_list|,
name|o1
operator|.
name|getBasicDefaultIntX
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectBasicEager
parameter_list|()
throws|throws
name|Exception
block|{
name|getDbHelper
argument_list|()
operator|.
name|deleteAll
argument_list|(
literal|"BasicEntity"
argument_list|)
expr_stmt|;
name|getDbHelper
argument_list|()
operator|.
name|insert
argument_list|(
literal|"BasicEntity"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"id"
block|,
literal|"basicEager"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|2
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
name|BasicEntity
name|o1
init|=
name|getEntityManager
argument_list|()
operator|.
name|find
argument_list|(
name|BasicEntity
operator|.
name|class
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|o1
operator|.
name|getBasicEagerX
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelectBasicLazy
parameter_list|()
throws|throws
name|Exception
block|{
name|getDbHelper
argument_list|()
operator|.
name|deleteAll
argument_list|(
literal|"BasicEntity"
argument_list|)
expr_stmt|;
name|getDbHelper
argument_list|()
operator|.
name|insert
argument_list|(
literal|"BasicEntity"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"id"
block|,
literal|"basicLazy"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|3
block|,
literal|"c"
block|}
argument_list|)
expr_stmt|;
name|BasicEntity
name|o1
init|=
name|getEntityManager
argument_list|()
operator|.
name|find
argument_list|(
name|BasicEntity
operator|.
name|class
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// application may or may not support lazy loading, but when the property is
comment|// accessed via getter, it must get resolved one way or another...
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|o1
operator|.
name|getBasicLazy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

