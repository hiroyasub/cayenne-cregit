begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|file
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|test
operator|.
name|resource
operator|.
name|ResourceUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|CgenWithConfigTest
block|{
specifier|private
specifier|static
specifier|final
name|File
name|baseDir
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|File
name|map
decl_stmt|;
static|static
block|{
name|baseDir
operator|=
name|FileUtil
operator|.
name|baseTestDirectory
argument_list|()
expr_stmt|;
name|map
operator|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"antmap-cgen.xml"
argument_list|)
expr_stmt|;
name|ResourceUtil
operator|.
name|copyResourceToFile
argument_list|(
literal|"cgenTest.map.xml"
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|CayenneGeneratorTask
name|task
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|Project
name|project
init|=
operator|new
name|Project
argument_list|()
decl_stmt|;
name|project
operator|.
name|setBaseDir
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
name|task
operator|=
operator|new
name|CayenneGeneratorTask
argument_list|()
expr_stmt|;
name|task
operator|.
name|setProject
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|task
operator|.
name|setTaskName
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|task
operator|.
name|setLocation
argument_list|(
name|Location
operator|.
name|UNKNOWN_LOCATION
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCgenWithDmConfig
parameter_list|()
block|{
name|File
name|mapDir
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"cgenConfigTest"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|mapDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|setMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
comment|// run task
name|task
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// check results
name|File
name|entity
init|=
operator|new
name|File
argument_list|(
name|mapDir
argument_list|,
name|convertPath
argument_list|(
literal|"ObjEntity1.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|entity
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|datamap
init|=
operator|new
name|File
argument_list|(
name|mapDir
argument_list|,
name|convertPath
argument_list|(
literal|"Antmap_cgen_xml.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|datamap
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|notIncludedEntity
init|=
operator|new
name|File
argument_list|(
name|mapDir
argument_list|,
literal|"ObjEntity.txt"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|notIncludedEntity
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|notIncludeSuperDatamap
init|=
operator|new
name|File
argument_list|(
name|mapDir
argument_list|,
name|convertPath
argument_list|(
literal|"auto/_Antmap_cgen_xml.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|notIncludeSuperDatamap
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCgenWithDmAndPomConfigs
parameter_list|()
block|{
name|File
name|mapDir
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"cgenDmPomTest"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|mapDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|setDestDir
argument_list|(
name|mapDir
argument_list|)
expr_stmt|;
name|task
operator|.
name|setMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|task
operator|.
name|setExcludeEntities
argument_list|(
literal|"ObjEntity1"
argument_list|)
expr_stmt|;
name|task
operator|.
name|setMode
argument_list|(
literal|"entity"
argument_list|)
expr_stmt|;
name|task
operator|.
name|setMakepairs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|task
operator|.
name|setOutputPattern
argument_list|(
literal|"*.txt"
argument_list|)
expr_stmt|;
comment|// run task
name|task
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// check results
name|File
name|entity
init|=
operator|new
name|File
argument_list|(
name|mapDir
argument_list|,
name|convertPath
argument_list|(
literal|"ObjEntity.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|entity
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|embeddable
init|=
operator|new
name|File
argument_list|(
name|mapDir
argument_list|,
name|convertPath
argument_list|(
literal|"Embeddable.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|embeddable
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|datamap
init|=
operator|new
name|File
argument_list|(
name|mapDir
argument_list|,
name|convertPath
argument_list|(
literal|"Antmap_cgen_xml.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|datamap
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|notIncludedEntity
init|=
operator|new
name|File
argument_list|(
name|mapDir
argument_list|,
literal|"ObjEntity1.txt"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|notIncludedEntity
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|notIncludeSuperDatamap
init|=
operator|new
name|File
argument_list|(
name|mapDir
argument_list|,
name|convertPath
argument_list|(
literal|"_Antmap_cgen_xml.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|notIncludeSuperDatamap
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|notIncludedSuperEntity
init|=
operator|new
name|File
argument_list|(
name|mapDir
argument_list|,
name|convertPath
argument_list|(
literal|"_ObjEntity.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|notIncludedSuperEntity
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplaceDatamapMode
parameter_list|()
block|{
name|File
name|mapDir
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"cgenReplaceMode"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|mapDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|setDestDir
argument_list|(
name|mapDir
argument_list|)
expr_stmt|;
name|task
operator|.
name|setMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|task
operator|.
name|setMode
argument_list|(
literal|"datamap"
argument_list|)
expr_stmt|;
name|task
operator|.
name|setMakepairs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|task
operator|.
name|setOutputPattern
argument_list|(
literal|"*.txt"
argument_list|)
expr_stmt|;
comment|// run task
name|task
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// check results
name|File
name|notIncludedEntity
init|=
operator|new
name|File
argument_list|(
name|mapDir
argument_list|,
name|convertPath
argument_list|(
literal|"ObjEntity.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|notIncludedEntity
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|notIncludedEmbeddable
init|=
operator|new
name|File
argument_list|(
name|mapDir
argument_list|,
name|convertPath
argument_list|(
literal|"Embeddable.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|notIncludedEmbeddable
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|datamap
init|=
operator|new
name|File
argument_list|(
name|mapDir
argument_list|,
name|convertPath
argument_list|(
literal|"Antmap_cgen_xml.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|datamap
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|notIncludedEntity1
init|=
operator|new
name|File
argument_list|(
name|mapDir
argument_list|,
literal|"ObjEntity1.txt"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|notIncludedEntity1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|includeSuperDatamap
init|=
operator|new
name|File
argument_list|(
name|mapDir
argument_list|,
name|convertPath
argument_list|(
literal|"auto/_Antmap_cgen_xml.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|includeSuperDatamap
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|notIncludedSuperEntity
init|=
operator|new
name|File
argument_list|(
name|mapDir
argument_list|,
name|convertPath
argument_list|(
literal|"auto/_ObjEntity.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|notIncludedSuperEntity
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|convertPath
parameter_list|(
name|String
name|unixPath
parameter_list|)
block|{
return|return
name|unixPath
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
return|;
block|}
block|}
end_class

end_unit

