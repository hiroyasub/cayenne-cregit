begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|wocompat
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|PrefetchTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|EOQueryTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testConstructor
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"wotests/fetchspec.eomodeld/"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|EOModelProcessor
name|processor
init|=
operator|new
name|EOModelProcessor
argument_list|()
decl_stmt|;
name|DataMap
name|map
init|=
name|processor
operator|.
name|loadEOModel
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|Map
name|fspecMap
init|=
operator|(
name|Map
operator|)
name|PropertyListSerialization
operator|.
name|propertyListFromStream
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"wotests/fetchspec.eomodeld/Entity1.fspec"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fspecMap
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fspecMap
operator|.
name|get
argument_list|(
literal|"E1FS1"
argument_list|)
argument_list|)
expr_stmt|;
name|EOQuery
name|query
init|=
operator|new
name|EOQuery
argument_list|(
name|map
operator|.
name|getObjEntity
argument_list|(
literal|"Entity1"
argument_list|)
argument_list|,
operator|(
name|Map
operator|)
name|fspecMap
operator|.
name|get
argument_list|(
literal|"E1FS1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|query
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|query
operator|.
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(name = \"aa\") and (db:ID>= 7) and ((e2.name = \"bb\") or (db:e2.ID != 5))"
argument_list|,
name|query
operator|.
name|getQualifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|query
operator|.
name|getPrefetchTree
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
name|children
init|=
name|query
operator|.
name|getPrefetchTree
argument_list|()
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"e2"
argument_list|,
operator|(
operator|(
name|PrefetchTreeNode
operator|)
name|children
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|query
operator|.
name|isFetchingDataRows
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|query
operator|.
name|getFetchLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|query
operator|.
name|getPageSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|query
operator|.
name|isDistinct
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

