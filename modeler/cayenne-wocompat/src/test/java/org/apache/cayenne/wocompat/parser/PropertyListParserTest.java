begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|wocompat
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|PropertyListParserTest
block|{
specifier|private
specifier|static
name|Parser
name|parser
parameter_list|(
name|String
name|plistText
parameter_list|)
block|{
return|return
operator|new
name|Parser
argument_list|(
operator|new
name|StringReader
argument_list|(
name|plistText
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListPlist
parameter_list|()
throws|throws
name|Exception
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|plist
init|=
name|parser
argument_list|(
literal|"(str, 5)"
argument_list|)
operator|.
name|object
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|equals
argument_list|(
name|plist
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapPlist
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"key2"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|plist
init|=
name|parser
argument_list|(
literal|"{key1 = val; key2 = 5}"
argument_list|)
operator|.
name|object
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|map
operator|.
name|equals
argument_list|(
name|plist
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringWithQuotes
parameter_list|()
throws|throws
name|Exception
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"s\"tr"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|plist
init|=
name|parser
argument_list|(
literal|"(\"s\\\"tr\", 5)"
argument_list|)
operator|.
name|object
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|equals
argument_list|(
name|plist
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedPlist
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"key2"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"key3"
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
argument_list|,
name|parser
argument_list|(
literal|"{key1 = val; key2 = 5; key3 = (str, 5)}"
argument_list|)
operator|.
name|object
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringWithSpaces
parameter_list|()
throws|throws
name|Exception
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"s tr"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|plist
init|=
name|parser
argument_list|(
literal|"(\"s tr\", 5)"
argument_list|)
operator|.
name|object
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|equals
argument_list|(
name|plist
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringWithBraces
parameter_list|()
throws|throws
name|Exception
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"s{t)r"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|parser
argument_list|(
literal|"(\"s{t)r\", 5)"
argument_list|)
operator|.
name|object
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringWithSlashes
parameter_list|()
throws|throws
name|Exception
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"s/t\\r"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|parser
argument_list|(
literal|"(\"s/t\\\\r\", 5)"
argument_list|)
operator|.
name|object
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapWithLastSemicolon
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"key2"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// last semicolon is optional
name|assertEquals
argument_list|(
name|map
argument_list|,
name|parser
argument_list|(
literal|"{key1 = val; key2 = 5; }"
argument_list|)
operator|.
name|object
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
argument_list|,
name|parser
argument_list|(
literal|"{key1 = val; key2 = 5 }"
argument_list|)
operator|.
name|object
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyMap
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Collections
operator|.
name|EMPTY_MAP
argument_list|,
name|parser
argument_list|(
literal|"{}"
argument_list|)
operator|.
name|object
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyList
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
name|parser
argument_list|(
literal|"()"
argument_list|)
operator|.
name|object
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOutsideComments
parameter_list|()
throws|throws
name|Exception
block|{
name|List
name|list
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"str"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|parser
argument_list|(
literal|"// comment\n ( str)"
argument_list|)
operator|.
name|object
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsideComments
parameter_list|()
throws|throws
name|Exception
block|{
name|List
name|list
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"str"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|parser
argument_list|(
literal|"(\n // comment\n str )"
argument_list|)
operator|.
name|object
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsideKVComments
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
name|map
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"str"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|map
argument_list|,
name|parser
argument_list|(
literal|"{\n str = // comment\n 5; }"
argument_list|)
operator|.
name|object
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTrailingComments
parameter_list|()
throws|throws
name|Exception
block|{
name|List
name|list
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"str"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|parser
argument_list|(
literal|"(// comment\n str)"
argument_list|)
operator|.
name|object
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoubleslashInsideLiteral
parameter_list|()
throws|throws
name|Exception
block|{
name|List
name|list
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"s//tr"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|parser
argument_list|(
literal|"( \"s//tr\" )"
argument_list|)
operator|.
name|object
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWindowsComments
parameter_list|()
throws|throws
name|Exception
block|{
name|List
name|list
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"str"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|parser
argument_list|(
literal|"// comment\r\n ( str)"
argument_list|)
operator|.
name|object
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMacComments
parameter_list|()
throws|throws
name|Exception
block|{
name|List
name|list
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"str"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|parser
argument_list|(
literal|"// comment\r ( str)"
argument_list|)
operator|.
name|object
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUNIXComments
parameter_list|()
throws|throws
name|Exception
block|{
name|List
name|list
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"str"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|parser
argument_list|(
literal|"// comment\n ( str)"
argument_list|)
operator|.
name|object
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

