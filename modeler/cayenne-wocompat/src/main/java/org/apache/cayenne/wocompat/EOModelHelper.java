begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|wocompat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|wocompat
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|IteratorUtils
import|;
end_import

begin_comment
comment|/**  * Helper class used by EOModelProcessor. EOModelHelper loads an EOModel from the  * specified location and gives its users access to the untyped EOModel information.  */
end_comment

begin_class
specifier|public
class|class
name|EOModelHelper
block|{
specifier|private
name|Parser
name|plistParser
init|=
operator|new
name|Parser
argument_list|()
decl_stmt|;
specifier|protected
name|URL
name|modelUrl
decl_stmt|;
specifier|protected
name|Map
name|entityIndex
decl_stmt|;
specifier|protected
name|Map
name|entityClassIndex
decl_stmt|;
specifier|protected
name|Map
name|entityQueryIndex
decl_stmt|;
specifier|protected
name|Map
name|entityClientClassIndex
decl_stmt|;
specifier|protected
name|DataMap
name|dataMap
decl_stmt|;
specifier|private
name|Map
name|prototypeValues
decl_stmt|;
comment|/**      * Creates helper instance and tries to locate EOModel and load index file.      *       * @deprecated since 4.0, use {@link #EOModelHelper(URL)}.      */
annotation|@
name|Deprecated
specifier|public
name|EOModelHelper
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EOModelHelper
parameter_list|(
name|URL
name|modelUrl
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|modelUrl
operator|=
name|modelUrl
expr_stmt|;
name|this
operator|.
name|dataMap
operator|=
operator|new
name|DataMap
argument_list|(
name|findModelName
argument_list|(
name|modelUrl
operator|.
name|toExternalForm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// load index file
name|List
name|modelIndex
init|=
operator|(
name|List
operator|)
name|loadModelIndex
argument_list|()
operator|.
name|get
argument_list|(
literal|"entities"
argument_list|)
decl_stmt|;
comment|// load entity indices
name|entityIndex
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|entityClassIndex
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|entityClientClassIndex
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|entityQueryIndex
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|Iterator
name|it
init|=
name|modelIndex
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
name|info
init|=
operator|(
name|Map
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|entityIndex
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|loadEntityIndex
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|entityQueryIndex
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|loadQueryIndex
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|entityClassIndex
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|info
operator|.
name|get
argument_list|(
literal|"className"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
name|entityPlistMap
init|=
name|entityPListMap
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// get client class information
name|Map
name|internalInfo
init|=
operator|(
name|Map
operator|)
name|entityPlistMap
operator|.
name|get
argument_list|(
literal|"internalInfo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|internalInfo
operator|!=
literal|null
condition|)
block|{
name|String
name|clientClassName
init|=
operator|(
name|String
operator|)
name|internalInfo
operator|.
name|get
argument_list|(
literal|"_javaClientClassName"
argument_list|)
decl_stmt|;
name|entityClientClassIndex
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|clientClassName
argument_list|)
expr_stmt|;
block|}
block|}
name|it
operator|=
name|modelIndex
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
name|info
init|=
operator|(
name|Map
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|Map
name|entityPlistMap
init|=
name|entityPListMap
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|List
name|classProperties
init|=
operator|(
name|List
operator|)
name|entityPlistMap
operator|.
name|get
argument_list|(
literal|"classProperties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|classProperties
operator|==
literal|null
condition|)
block|{
name|classProperties
operator|=
name|Collections
operator|.
name|EMPTY_LIST
expr_stmt|;
block|}
comment|// get client class information
name|Map
name|internalInfo
init|=
operator|(
name|Map
operator|)
name|entityPlistMap
operator|.
name|get
argument_list|(
literal|"internalInfo"
argument_list|)
decl_stmt|;
name|List
name|clientClassProperties
init|=
operator|(
name|internalInfo
operator|!=
literal|null
operator|)
condition|?
operator|(
name|List
operator|)
name|internalInfo
operator|.
name|get
argument_list|(
literal|"_clientClassPropertyNames"
argument_list|)
else|:
literal|null
decl_stmt|;
comment|// guard against no internal info and no client class properties
if|if
condition|(
name|clientClassProperties
operator|==
literal|null
condition|)
block|{
name|clientClassProperties
operator|=
name|Collections
operator|.
name|EMPTY_LIST
expr_stmt|;
block|}
comment|// there is a bug in EOModeler it sometimes keeps outdated properties in
comment|// the client property list. This removes them
name|clientClassProperties
operator|.
name|retainAll
argument_list|(
name|classProperties
argument_list|)
expr_stmt|;
comment|// remove all properties from the entity properties that are already defined
comment|// in
comment|// a potential parent class.
name|String
name|parentEntity
init|=
operator|(
name|String
operator|)
name|entityPlistMap
operator|.
name|get
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
while|while
condition|(
name|parentEntity
operator|!=
literal|null
condition|)
block|{
name|Map
name|parentEntityPListMap
init|=
name|entityPListMap
argument_list|(
name|parentEntity
argument_list|)
decl_stmt|;
name|List
name|parentClassProps
init|=
operator|(
name|List
operator|)
name|parentEntityPListMap
operator|.
name|get
argument_list|(
literal|"classProperties"
argument_list|)
decl_stmt|;
name|classProperties
operator|.
name|removeAll
argument_list|(
name|parentClassProps
argument_list|)
expr_stmt|;
comment|// get client class information of parent
name|Map
name|parentInternalInfo
init|=
operator|(
name|Map
operator|)
name|parentEntityPListMap
operator|.
name|get
argument_list|(
literal|"internalInfo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentInternalInfo
operator|!=
literal|null
condition|)
block|{
name|List
name|parentClientClassProps
init|=
operator|(
name|List
operator|)
name|parentInternalInfo
operator|.
name|get
argument_list|(
literal|"_clientClassPropertyNames"
argument_list|)
decl_stmt|;
name|clientClassProperties
operator|.
name|removeAll
argument_list|(
name|parentClientClassProps
argument_list|)
expr_stmt|;
block|}
name|parentEntity
operator|=
operator|(
name|String
operator|)
name|parentEntityPListMap
operator|.
name|get
argument_list|(
literal|"parent"
argument_list|)
expr_stmt|;
block|}
comment|// put back processed properties to the map
name|entityPlistMap
operator|.
name|put
argument_list|(
literal|"classProperties"
argument_list|,
name|classProperties
argument_list|)
expr_stmt|;
comment|// add client classes directly for easier access
name|entityPlistMap
operator|.
name|put
argument_list|(
literal|"clientClassProperties"
argument_list|,
name|clientClassProperties
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Performs Objective C data types conversion to Java types.      *       * @since 1.1      * @return String representation for Java type corresponding to String representation      *         of Objective C type.      */
specifier|public
name|String
name|javaTypeForEOModelerType
parameter_list|(
name|String
name|valueClassName
parameter_list|,
name|String
name|valueType
parameter_list|)
block|{
if|if
condition|(
name|valueClassName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|valueClassName
operator|.
name|equals
argument_list|(
literal|"NSString"
argument_list|)
condition|)
block|{
return|return
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
if|if
condition|(
name|valueClassName
operator|.
name|equals
argument_list|(
literal|"NSNumber"
argument_list|)
condition|)
block|{
name|Class
name|numericClass
init|=
name|numericAttributeClass
argument_list|(
name|valueType
argument_list|)
decl_stmt|;
return|return
operator|(
name|numericClass
operator|!=
literal|null
operator|)
condition|?
name|numericClass
operator|.
name|getName
argument_list|()
else|:
name|Number
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
if|if
condition|(
name|valueClassName
operator|.
name|equals
argument_list|(
literal|"NSCalendarDate"
argument_list|)
condition|)
return|return
literal|"java.sql.Timestamp"
return|;
if|if
condition|(
name|valueClassName
operator|.
name|equals
argument_list|(
literal|"NSDecimalNumber"
argument_list|)
condition|)
block|{
name|Class
name|numericClass
init|=
name|numericAttributeClass
argument_list|(
name|valueType
argument_list|)
decl_stmt|;
return|return
operator|(
name|numericClass
operator|!=
literal|null
operator|)
condition|?
name|numericClass
operator|.
name|getName
argument_list|()
else|:
name|BigDecimal
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
if|if
condition|(
name|valueClassName
operator|.
name|equals
argument_list|(
literal|"NSData"
argument_list|)
condition|)
return|return
literal|"byte[]"
return|;
comment|// don't know what the class is mapped to...
comment|// do some minimum sanity check and use as is
try|try
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|valueClassName
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|aClassNotFoundException
parameter_list|)
block|{
try|try
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
literal|"java.lang."
operator|+
name|valueClassName
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|anotherClassNotFoundException
parameter_list|)
block|{
try|try
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
literal|"java.util."
operator|+
name|valueClassName
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|yetAnotherClassNotFoundException
parameter_list|)
block|{
try|try
block|{
return|return
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|valueClassName
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// likely a custom class
return|return
name|valueClassName
return|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * @since 1.1      */
comment|// TODO: create a lookup map, maybe XML-loaded...
specifier|protected
name|Class
name|numericAttributeClass
parameter_list|(
name|String
name|valueType
parameter_list|)
block|{
if|if
condition|(
name|valueType
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
literal|"b"
operator|.
name|equals
argument_list|(
name|valueType
argument_list|)
condition|)
block|{
return|return
name|Byte
operator|.
name|class
return|;
block|}
if|else if
condition|(
literal|"s"
operator|.
name|equals
argument_list|(
name|valueType
argument_list|)
condition|)
block|{
return|return
name|Short
operator|.
name|class
return|;
block|}
if|else if
condition|(
literal|"i"
operator|.
name|equals
argument_list|(
name|valueType
argument_list|)
condition|)
block|{
return|return
name|Integer
operator|.
name|class
return|;
block|}
if|else if
condition|(
literal|"l"
operator|.
name|equals
argument_list|(
name|valueType
argument_list|)
condition|)
block|{
return|return
name|Long
operator|.
name|class
return|;
block|}
if|else if
condition|(
literal|"f"
operator|.
name|equals
argument_list|(
name|valueType
argument_list|)
condition|)
block|{
return|return
name|Float
operator|.
name|class
return|;
block|}
if|else if
condition|(
literal|"d"
operator|.
name|equals
argument_list|(
name|valueType
argument_list|)
condition|)
block|{
return|return
name|Double
operator|.
name|class
return|;
block|}
if|else if
condition|(
literal|"B"
operator|.
name|equals
argument_list|(
name|valueType
argument_list|)
condition|)
block|{
return|return
name|BigDecimal
operator|.
name|class
return|;
block|}
if|else if
condition|(
literal|"c"
operator|.
name|equals
argument_list|(
name|valueType
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|class
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** Returns a DataMap associated with this helper. */
specifier|public
name|DataMap
name|getDataMap
parameter_list|()
block|{
return|return
name|dataMap
return|;
block|}
comment|/** Returns EOModel location as URL. */
specifier|public
name|URL
name|getModelUrl
parameter_list|()
block|{
return|return
name|modelUrl
return|;
block|}
comment|/**      * Returns an iterator of model names.      */
specifier|public
name|Iterator
name|modelNames
parameter_list|()
block|{
return|return
name|entityClassIndex
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * Returns a list of model entity names.      *       * @since 1.1      */
specifier|public
name|List
name|modelNamesAsList
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|(
name|entityClassIndex
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Map
name|getPrototypeAttributeMapFor
parameter_list|(
name|String
name|aPrototypeAttributeName
parameter_list|)
block|{
if|if
condition|(
name|prototypeValues
operator|==
literal|null
condition|)
block|{
name|Map
name|eoPrototypesEntityMap
init|=
name|this
operator|.
name|entityPListMap
argument_list|(
literal|"EOPrototypes"
argument_list|)
decl_stmt|;
comment|// no prototypes
if|if
condition|(
name|eoPrototypesEntityMap
operator|==
literal|null
condition|)
block|{
name|prototypeValues
operator|=
name|Collections
operator|.
name|EMPTY_MAP
expr_stmt|;
block|}
else|else
block|{
name|List
name|eoPrototypeAttributes
init|=
operator|(
name|List
operator|)
name|eoPrototypesEntityMap
operator|.
name|get
argument_list|(
literal|"attributes"
argument_list|)
decl_stmt|;
name|prototypeValues
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|Iterator
name|it
init|=
name|eoPrototypeAttributes
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
name|attrMap
init|=
operator|(
name|Map
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|attrName
init|=
operator|(
name|String
operator|)
name|attrMap
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
comment|// TODO: why are we copying the original map? can we just use it as
comment|// is?
name|Map
name|prototypeAttrMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|prototypeValues
operator|.
name|put
argument_list|(
name|attrName
argument_list|,
name|prototypeAttrMap
argument_list|)
expr_stmt|;
name|prototypeAttrMap
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|attrMap
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|prototypeAttrMap
operator|.
name|put
argument_list|(
literal|"prototypeName"
argument_list|,
name|attrMap
operator|.
name|get
argument_list|(
literal|"prototypeName"
argument_list|)
argument_list|)
expr_stmt|;
name|prototypeAttrMap
operator|.
name|put
argument_list|(
literal|"columnName"
argument_list|,
name|attrMap
operator|.
name|get
argument_list|(
literal|"columnName"
argument_list|)
argument_list|)
expr_stmt|;
name|prototypeAttrMap
operator|.
name|put
argument_list|(
literal|"valueClassName"
argument_list|,
name|attrMap
operator|.
name|get
argument_list|(
literal|"valueClassName"
argument_list|)
argument_list|)
expr_stmt|;
name|prototypeAttrMap
operator|.
name|put
argument_list|(
literal|"width"
argument_list|,
name|attrMap
operator|.
name|get
argument_list|(
literal|"width"
argument_list|)
argument_list|)
expr_stmt|;
name|prototypeAttrMap
operator|.
name|put
argument_list|(
literal|"allowsNull"
argument_list|,
name|attrMap
operator|.
name|get
argument_list|(
literal|"allowsNull"
argument_list|)
argument_list|)
expr_stmt|;
name|prototypeAttrMap
operator|.
name|put
argument_list|(
literal|"scale"
argument_list|,
name|attrMap
operator|.
name|get
argument_list|(
literal|"scale"
argument_list|)
argument_list|)
expr_stmt|;
name|prototypeAttrMap
operator|.
name|put
argument_list|(
literal|"valueType"
argument_list|,
name|attrMap
operator|.
name|get
argument_list|(
literal|"valueType"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Map
name|aMap
init|=
operator|(
name|Map
operator|)
name|prototypeValues
operator|.
name|get
argument_list|(
name|aPrototypeAttributeName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|aMap
condition|)
name|aMap
operator|=
name|Collections
operator|.
name|EMPTY_MAP
expr_stmt|;
return|return
name|aMap
return|;
block|}
comment|/** Returns an info map for the entity called<code>entityName</code>. */
specifier|public
name|Map
name|entityPListMap
parameter_list|(
name|String
name|entityName
parameter_list|)
block|{
return|return
operator|(
name|Map
operator|)
name|entityIndex
operator|.
name|get
argument_list|(
name|entityName
argument_list|)
return|;
block|}
comment|/**      * Returns the iterator over EOFetchSpecification names for a given entity.      *       * @since 1.1      */
specifier|public
name|Iterator
name|queryNames
parameter_list|(
name|String
name|entityName
parameter_list|)
block|{
name|Map
name|queryPlist
init|=
operator|(
name|Map
operator|)
name|entityQueryIndex
operator|.
name|get
argument_list|(
name|entityName
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryPlist
operator|==
literal|null
operator|||
name|queryPlist
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|IteratorUtils
operator|.
name|EMPTY_ITERATOR
return|;
block|}
return|return
name|queryPlist
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * Returns a map containing EOFetchSpecification information for entity name and query      * name. Returns null if no such query is found.      *       * @since 1.1      */
specifier|public
name|Map
name|queryPListMap
parameter_list|(
name|String
name|entityName
parameter_list|,
name|String
name|queryName
parameter_list|)
block|{
name|Map
name|queryPlist
init|=
operator|(
name|Map
operator|)
name|entityQueryIndex
operator|.
name|get
argument_list|(
name|entityName
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryPlist
operator|==
literal|null
operator|||
name|queryPlist
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|Map
operator|)
name|queryPlist
operator|.
name|get
argument_list|(
name|queryName
argument_list|)
return|;
block|}
specifier|public
name|String
name|entityClass
parameter_list|(
name|String
name|entityName
parameter_list|,
name|boolean
name|getClientClass
parameter_list|)
block|{
if|if
condition|(
name|getClientClass
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|entityClientClassIndex
operator|.
name|get
argument_list|(
name|entityName
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|String
operator|)
name|entityClassIndex
operator|.
name|get
argument_list|(
name|entityName
argument_list|)
return|;
block|}
block|}
comment|/** Loads EOModel index and returns it as a map. */
specifier|protected
name|Map
name|loadModelIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|indexIn
init|=
name|openIndexStream
argument_list|()
decl_stmt|;
try|try
block|{
name|plistParser
operator|.
name|ReInit
argument_list|(
name|indexIn
argument_list|)
expr_stmt|;
return|return
operator|(
name|Map
operator|)
name|plistParser
operator|.
name|propertyList
argument_list|()
return|;
block|}
finally|finally
block|{
name|indexIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Loads EOEntity information and returns it as a map.      */
specifier|protected
name|Map
name|loadEntityIndex
parameter_list|(
name|String
name|entityName
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|entIn
init|=
name|openEntityStream
argument_list|(
name|entityName
argument_list|)
decl_stmt|;
try|try
block|{
name|plistParser
operator|.
name|ReInit
argument_list|(
name|entIn
argument_list|)
expr_stmt|;
return|return
operator|(
name|Map
operator|)
name|plistParser
operator|.
name|propertyList
argument_list|()
return|;
block|}
finally|finally
block|{
name|entIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Loads EOFetchSpecification information and returns it as a map.      */
specifier|protected
name|Map
name|loadQueryIndex
parameter_list|(
name|String
name|entityName
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|queryIn
init|=
literal|null
decl_stmt|;
comment|// catch file open exceptions since not all entities have query files....
try|try
block|{
name|queryIn
operator|=
name|openQueryStream
argument_list|(
name|entityName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_MAP
return|;
block|}
try|try
block|{
name|plistParser
operator|.
name|ReInit
argument_list|(
name|queryIn
argument_list|)
expr_stmt|;
return|return
operator|(
name|Map
operator|)
name|plistParser
operator|.
name|propertyList
argument_list|()
return|;
block|}
finally|finally
block|{
name|queryIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Returns EOModel name based on its path. */
specifier|protected
name|String
name|findModelName
parameter_list|(
name|String
name|path
parameter_list|)
block|{
comment|// strip trailing slashes
if|if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|||
name|path
operator|.
name|endsWith
argument_list|(
literal|"\\"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// strip path components
name|int
name|i1
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|int
name|i2
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|"\\"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
operator|(
name|i1
operator|>
name|i2
operator|)
condition|?
name|i1
else|:
name|i2
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// strip .eomodeld suffix
if|if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|".eomodeld"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|()
operator|-
literal|".eomodeld"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
comment|/**      * Returns InputStream to read an EOModel index file.      */
specifier|protected
name|InputStream
name|openIndexStream
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|URL
argument_list|(
name|modelUrl
argument_list|,
literal|"index.eomodeld"
argument_list|)
operator|.
name|openStream
argument_list|()
return|;
block|}
comment|/**      * Returns InputStream to read an EOEntity plist file.      *       * @param entityName name of EOEntity to be loaded.      * @return InputStream to read an EOEntity plist file or null if      *<code>entityname.plist</code> file can not be located.      */
specifier|protected
name|InputStream
name|openEntityStream
parameter_list|(
name|String
name|entityName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|URL
argument_list|(
name|modelUrl
argument_list|,
name|entityName
operator|+
literal|".plist"
argument_list|)
operator|.
name|openStream
argument_list|()
return|;
block|}
comment|/**      * Returns InputStream to read an EOFetchSpecification plist file.      *       * @param entityName name of EOEntity to be loaded.      * @return InputStream to read an EOEntity plist file or null if      *<code>entityname.plist</code> file can not be located.      */
specifier|protected
name|InputStream
name|openQueryStream
parameter_list|(
name|String
name|entityName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|URL
argument_list|(
name|modelUrl
argument_list|,
name|entityName
operator|+
literal|".fspec"
argument_list|)
operator|.
name|openStream
argument_list|()
return|;
block|}
block|}
end_class

end_unit

