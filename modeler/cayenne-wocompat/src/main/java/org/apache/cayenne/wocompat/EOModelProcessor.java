begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|wocompat
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|naming
operator|.
name|NameBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbJoin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|QueryDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|SQLTemplateDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|SelectQueryDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Ordering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|QueryMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|wocompat
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|PredicateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_comment
comment|/**  * Class for converting stored Apple EOModel mapping files to Cayenne DataMaps.  */
end_comment

begin_class
specifier|public
class|class
name|EOModelProcessor
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|EOModelProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Predicate
name|prototypeChecker
decl_stmt|;
specifier|public
name|EOModelProcessor
parameter_list|()
block|{
name|prototypeChecker
operator|=
operator|new
name|Predicate
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|entityName
init|=
name|object
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|entityName
operator|.
name|startsWith
argument_list|(
literal|"EO"
argument_list|)
operator|&&
name|entityName
operator|.
name|endsWith
argument_list|(
literal|"Prototypes"
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
comment|/** 	 * @deprecated since 4.0 in favor of {@link #loadModeIndex(URL)}. 	 */
annotation|@
name|Deprecated
specifier|public
name|Map
name|loadModeIndex
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|loadModeIndex
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * Returns index.eomodeld contents as a Map. 	 *  	 * @since 4.0 	 */
comment|// TODO: refactor EOModelHelper to provide a similar method without loading
comment|// all entity files in memory... here we simply copied stuff from
comment|// EOModelHelper
specifier|public
name|Map
name|loadModeIndex
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|urlString
init|=
name|url
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|urlString
operator|.
name|endsWith
argument_list|(
literal|".eomodeld"
argument_list|)
condition|)
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|urlString
operator|+
literal|".eomodeld"
argument_list|)
expr_stmt|;
block|}
name|Parser
name|plistParser
init|=
operator|new
name|Parser
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
operator|new
name|URL
argument_list|(
name|url
argument_list|,
literal|"index.eomodeld"
argument_list|)
operator|.
name|openStream
argument_list|()
init|;
init|)
block|{
name|plistParser
operator|.
name|ReInit
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
operator|(
name|Map
operator|)
name|plistParser
operator|.
name|propertyList
argument_list|()
return|;
block|}
block|}
comment|/** 	 * @deprecated since 4.0 in favor of {@link #loadEOModel(URL)}. 	 */
annotation|@
name|Deprecated
specifier|public
name|DataMap
name|loadEOModel
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|loadEOModel
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** 	 * @deprecated since 4.0 in favor of {@link #loadEOModel(URL, boolean)}. 	 */
annotation|@
name|Deprecated
specifier|public
name|DataMap
name|loadEOModel
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|generateClientClass
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|loadEOModel
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
name|generateClientClass
argument_list|)
return|;
block|}
comment|/** 	 * Performs EOModel loading. 	 *  	 * @param url 	 *            URL of ".eomodeld" directory. 	 */
specifier|public
name|DataMap
name|loadEOModel
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|loadEOModel
argument_list|(
name|url
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** 	 * Performs EOModel loading. 	 *  	 * @param url 	 *            URL of ".eomodeld" directory. 	 * @param generateClientClass 	 *            if true then loading of EOModel is java client classes aware 	 *            and the following processing will work with Java client class 	 *            settings of the EOModel. 	 */
specifier|public
name|DataMap
name|loadEOModel
parameter_list|(
name|URL
name|url
parameter_list|,
name|boolean
name|generateClientClass
parameter_list|)
throws|throws
name|Exception
block|{
name|EOModelHelper
name|helper
init|=
name|makeHelper
argument_list|(
name|url
argument_list|)
decl_stmt|;
comment|// create empty map
name|DataMap
name|dataMap
init|=
name|helper
operator|.
name|getDataMap
argument_list|()
decl_stmt|;
comment|// process enitities ... throw out prototypes ... for now
name|List
name|modelNames
init|=
operator|new
name|ArrayList
argument_list|(
name|helper
operator|.
name|modelNamesAsList
argument_list|()
argument_list|)
decl_stmt|;
name|CollectionUtils
operator|.
name|filter
argument_list|(
name|modelNames
argument_list|,
name|PredicateUtils
operator|.
name|notPredicate
argument_list|(
name|prototypeChecker
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|modelNames
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// create and register entity
name|makeEntity
argument_list|(
name|helper
argument_list|,
name|name
argument_list|,
name|generateClientClass
argument_list|)
expr_stmt|;
block|}
comment|// now sort following inheritance hierarchy
name|Collections
operator|.
name|sort
argument_list|(
name|modelNames
argument_list|,
operator|new
name|InheritanceComparator
argument_list|(
name|dataMap
argument_list|)
argument_list|)
expr_stmt|;
comment|// after all entities are loaded, process attributes
name|it
operator|=
name|modelNames
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|EOObjEntity
name|e
init|=
operator|(
name|EOObjEntity
operator|)
name|dataMap
operator|.
name|getObjEntity
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// process entity attributes
name|makeAttributes
argument_list|(
name|helper
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// after all entities are loaded, process relationships
name|it
operator|=
name|modelNames
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|makeRelationships
argument_list|(
name|helper
argument_list|,
name|dataMap
operator|.
name|getObjEntity
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// after all normal relationships are loaded, process flattened
comment|// relationships
name|it
operator|=
name|modelNames
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|makeFlatRelationships
argument_list|(
name|helper
argument_list|,
name|dataMap
operator|.
name|getObjEntity
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// now create missing reverse DB (but not OBJ) relationships
comment|// since Cayenne requires them
name|it
operator|=
name|modelNames
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|DbEntity
name|dbEntity
init|=
name|dataMap
operator|.
name|getObjEntity
argument_list|(
name|name
argument_list|)
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbEntity
operator|!=
literal|null
condition|)
block|{
name|makeReverseDbRelationships
argument_list|(
name|dbEntity
argument_list|)
expr_stmt|;
block|}
block|}
comment|// build SelectQueries out of EOFetchSpecifications...
name|it
operator|=
name|modelNames
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
name|queries
init|=
name|helper
operator|.
name|queryNames
argument_list|(
name|name
argument_list|)
decl_stmt|;
while|while
condition|(
name|queries
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|queryName
init|=
operator|(
name|String
operator|)
name|queries
operator|.
name|next
argument_list|()
decl_stmt|;
name|EOObjEntity
name|entity
init|=
operator|(
name|EOObjEntity
operator|)
name|dataMap
operator|.
name|getObjEntity
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|makeQuery
argument_list|(
name|helper
argument_list|,
name|entity
argument_list|,
name|queryName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dataMap
return|;
block|}
comment|/** 	 * Returns whether an Entity is an EOF EOPrototypes entity. According to EOF 	 * conventions EOPrototypes and EO[Adapter]Prototypes entities are 	 * considered to be prototypes. 	 *  	 * @since 1.1 	 */
specifier|protected
name|boolean
name|isPrototypesEntity
parameter_list|(
name|String
name|entityName
parameter_list|)
block|{
return|return
name|prototypeChecker
operator|.
name|evaluate
argument_list|(
name|entityName
argument_list|)
return|;
block|}
comment|/** 	 * Creates an returns new EOModelHelper to process EOModel. Exists mostly 	 * for the benefit of subclasses. 	 */
specifier|protected
name|EOModelHelper
name|makeHelper
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|EOModelHelper
argument_list|(
name|url
argument_list|)
return|;
block|}
comment|/** 	 * Creates a Cayenne query out of EOFetchSpecification data. 	 *  	 * @since 1.1 	 */
specifier|protected
name|QueryDescriptor
name|makeQuery
parameter_list|(
name|EOModelHelper
name|helper
parameter_list|,
name|EOObjEntity
name|entity
parameter_list|,
name|String
name|queryName
parameter_list|)
block|{
name|DataMap
name|dataMap
init|=
name|helper
operator|.
name|getDataMap
argument_list|()
decl_stmt|;
name|Map
name|queryPlist
init|=
name|helper
operator|.
name|queryPListMap
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|,
name|queryName
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryPlist
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|QueryDescriptor
name|query
decl_stmt|;
if|if
condition|(
name|queryPlist
operator|.
name|containsKey
argument_list|(
literal|"hints"
argument_list|)
condition|)
block|{
comment|// just a predefined SQL query
name|query
operator|=
name|makeEOSQLQueryDescriptor
argument_list|(
name|entity
argument_list|,
name|queryPlist
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|makeEOQueryDescriptor
argument_list|(
name|entity
argument_list|,
name|queryPlist
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|setName
argument_list|(
name|entity
operator|.
name|qualifiedQueryName
argument_list|(
name|queryName
argument_list|)
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|addQueryDescriptor
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
specifier|protected
name|QueryDescriptor
name|makeEOQueryDescriptor
parameter_list|(
name|ObjEntity
name|root
parameter_list|,
name|Map
name|plistMap
parameter_list|)
block|{
name|SelectQueryDescriptor
name|descriptor
init|=
name|QueryDescriptor
operator|.
name|selectQueryDescriptor
argument_list|()
decl_stmt|;
name|descriptor
operator|.
name|setRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|descriptor
operator|.
name|setDistinct
argument_list|(
literal|"YES"
operator|.
name|equalsIgnoreCase
argument_list|(
operator|(
name|String
operator|)
name|plistMap
operator|.
name|get
argument_list|(
literal|"usesDistinct"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|fetchLimit
init|=
name|plistMap
operator|.
name|get
argument_list|(
literal|"fetchLimit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fetchLimit
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|fetchLimit
operator|instanceof
name|Number
condition|)
block|{
name|descriptor
operator|.
name|setProperty
argument_list|(
name|QueryMetadata
operator|.
name|FETCH_LIMIT_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|fetchLimit
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|StringUtils
operator|.
name|isNumeric
argument_list|(
name|fetchLimit
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|descriptor
operator|.
name|setProperty
argument_list|(
name|QueryMetadata
operator|.
name|FETCH_LIMIT_PROPERTY
argument_list|,
name|fetchLimit
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfex
parameter_list|)
block|{
comment|// ignoring...
block|}
block|}
comment|// sort orderings
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|orderings
init|=
operator|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
operator|)
name|plistMap
operator|.
name|get
argument_list|(
literal|"sortOrderings"
argument_list|)
decl_stmt|;
if|if
condition|(
name|orderings
operator|!=
literal|null
operator|&&
operator|!
name|orderings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ordering
range|:
name|orderings
control|)
block|{
name|boolean
name|asc
init|=
operator|!
literal|"compareDescending:"
operator|.
name|equals
argument_list|(
name|ordering
operator|.
name|get
argument_list|(
literal|"selectorName"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|ordering
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|descriptor
operator|.
name|addOrdering
argument_list|(
operator|new
name|Ordering
argument_list|(
name|key
argument_list|,
name|asc
condition|?
name|SortOrder
operator|.
name|ASCENDING
else|:
name|SortOrder
operator|.
name|DESCENDING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// qualifiers
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|qualifierMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
operator|)
name|plistMap
operator|.
name|get
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
if|if
condition|(
name|qualifierMap
operator|!=
literal|null
operator|&&
operator|!
name|qualifierMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|descriptor
operator|.
name|setQualifier
argument_list|(
name|EOQuery
operator|.
name|EOFetchSpecificationParser
operator|.
name|makeQualifier
argument_list|(
operator|(
name|EOObjEntity
operator|)
name|root
argument_list|,
name|qualifierMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// prefetches
name|List
name|prefetches
init|=
operator|(
name|List
operator|)
name|plistMap
operator|.
name|get
argument_list|(
literal|"prefetchingRelationshipKeyPaths"
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefetches
operator|!=
literal|null
operator|&&
operator|!
name|prefetches
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Iterator
name|it
init|=
name|prefetches
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|descriptor
operator|.
name|addPrefetch
argument_list|(
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// data rows - note that we do not support fetching individual columns
comment|// in the
comment|// modeler...
if|if
condition|(
name|plistMap
operator|.
name|containsKey
argument_list|(
literal|"rawRowKeyPaths"
argument_list|)
condition|)
block|{
name|descriptor
operator|.
name|setProperty
argument_list|(
name|QueryMetadata
operator|.
name|FETCHING_DATA_ROWS_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|descriptor
return|;
block|}
specifier|protected
name|QueryDescriptor
name|makeEOSQLQueryDescriptor
parameter_list|(
name|ObjEntity
name|root
parameter_list|,
name|Map
name|plistMap
parameter_list|)
block|{
name|SQLTemplateDescriptor
name|descriptor
init|=
name|QueryDescriptor
operator|.
name|sqlTemplateDescriptor
argument_list|()
decl_stmt|;
name|descriptor
operator|.
name|setRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|Object
name|fetchLimit
init|=
name|plistMap
operator|.
name|get
argument_list|(
literal|"fetchLimit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fetchLimit
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|fetchLimit
operator|instanceof
name|Number
condition|)
block|{
name|descriptor
operator|.
name|setProperty
argument_list|(
name|QueryMetadata
operator|.
name|FETCH_LIMIT_PROPERTY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|fetchLimit
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|StringUtils
operator|.
name|isNumeric
argument_list|(
name|fetchLimit
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|descriptor
operator|.
name|setProperty
argument_list|(
name|QueryMetadata
operator|.
name|FETCH_LIMIT_PROPERTY
argument_list|,
name|fetchLimit
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfex
parameter_list|)
block|{
comment|// ignoring...
block|}
block|}
comment|//query
comment|// TODO: doesn't work with Stored Procedures.
name|Map
name|hints
init|=
operator|(
name|Map
operator|)
name|plistMap
operator|.
name|get
argument_list|(
literal|"hints"
argument_list|)
decl_stmt|;
if|if
condition|(
name|hints
operator|!=
literal|null
operator|&&
operator|!
name|hints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|sqlExpression
init|=
operator|(
name|String
operator|)
name|hints
operator|.
name|get
argument_list|(
literal|"EOCustomQueryExpressionHintKey"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sqlExpression
operator|!=
literal|null
condition|)
block|{
name|descriptor
operator|.
name|setSql
argument_list|(
name|sqlExpression
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|descriptor
return|;
block|}
comment|/** 	 * Creates and returns a new ObjEntity linked to a corresponding DbEntity. 	 */
specifier|protected
name|EOObjEntity
name|makeEntity
parameter_list|(
name|EOModelHelper
name|helper
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|generateClientClass
parameter_list|)
block|{
name|DataMap
name|dataMap
init|=
name|helper
operator|.
name|getDataMap
argument_list|()
decl_stmt|;
name|Map
name|entityPlist
init|=
name|helper
operator|.
name|entityPListMap
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// create ObjEntity
name|EOObjEntity
name|objEntity
init|=
operator|new
name|EOObjEntity
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|objEntity
operator|.
name|setEoMap
argument_list|(
name|entityPlist
argument_list|)
expr_stmt|;
name|objEntity
operator|.
name|setServerOnly
argument_list|(
operator|!
name|generateClientClass
argument_list|)
expr_stmt|;
name|String
name|parent
init|=
operator|(
name|String
operator|)
name|entityPlist
operator|.
name|get
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|objEntity
operator|.
name|setClassName
argument_list|(
name|helper
operator|.
name|entityClass
argument_list|(
name|name
argument_list|,
name|generateClientClass
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|objEntity
operator|.
name|setSubclass
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|objEntity
operator|.
name|setSuperClassName
argument_list|(
name|helper
operator|.
name|entityClass
argument_list|(
name|parent
argument_list|,
name|generateClientClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add flag whether this entity is set as abstract in the model
name|objEntity
operator|.
name|setAbstractEntity
argument_list|(
literal|"Y"
operator|.
name|equals
argument_list|(
name|entityPlist
operator|.
name|get
argument_list|(
literal|"isAbstractEntity"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// create DbEntity...since EOF allows the same table to be
comment|// associated with multiple EOEntities, check for name duplicates
name|String
name|dbEntityName
init|=
operator|(
name|String
operator|)
name|entityPlist
operator|.
name|get
argument_list|(
literal|"externalName"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbEntityName
operator|!=
literal|null
condition|)
block|{
comment|// ... if inheritance is involved and parent hierarchy uses the same
comment|// DBEntity,
comment|// do not create a DbEntity...
name|boolean
name|createDbEntity
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|String
name|parentName
init|=
name|parent
decl_stmt|;
while|while
condition|(
name|parentName
operator|!=
literal|null
condition|)
block|{
name|Map
name|parentData
init|=
name|helper
operator|.
name|entityPListMap
argument_list|(
name|parentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentData
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|String
name|parentExternalName
init|=
operator|(
name|String
operator|)
name|parentData
operator|.
name|get
argument_list|(
literal|"externalName"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentExternalName
operator|==
literal|null
condition|)
block|{
name|parentName
operator|=
operator|(
name|String
operator|)
name|parentData
operator|.
name|get
argument_list|(
literal|"parent"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|dbEntityName
operator|.
name|equals
argument_list|(
name|parentExternalName
argument_list|)
condition|)
block|{
name|createDbEntity
operator|=
literal|false
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|createDbEntity
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
name|dbEntityBaseName
init|=
name|dbEntityName
decl_stmt|;
while|while
condition|(
name|dataMap
operator|.
name|getDbEntity
argument_list|(
name|dbEntityName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|dbEntityName
operator|=
name|dbEntityBaseName
operator|+
name|i
operator|++
expr_stmt|;
block|}
name|objEntity
operator|.
name|setDbEntityName
argument_list|(
name|dbEntityName
argument_list|)
expr_stmt|;
name|DbEntity
name|de
init|=
operator|new
name|DbEntity
argument_list|(
name|dbEntityName
argument_list|)
decl_stmt|;
name|dataMap
operator|.
name|addDbEntity
argument_list|(
name|de
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set various flags
name|objEntity
operator|.
name|setReadOnly
argument_list|(
literal|"Y"
operator|.
name|equals
argument_list|(
name|entityPlist
operator|.
name|get
argument_list|(
literal|"isReadOnly"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|objEntity
operator|.
name|setSuperEntityName
argument_list|(
operator|(
name|String
operator|)
name|entityPlist
operator|.
name|get
argument_list|(
literal|"parent"
argument_list|)
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|addObjEntity
argument_list|(
name|objEntity
argument_list|)
expr_stmt|;
return|return
name|objEntity
return|;
block|}
specifier|private
specifier|static
name|boolean
name|externalTypeIsClob
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|"CLOB"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
operator|||
literal|"TEXT"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/** 	 * Create ObjAttributes of the specified entity, as well as DbAttributes of 	 * the corresponding DbEntity. 	 */
specifier|protected
name|void
name|makeAttributes
parameter_list|(
name|EOModelHelper
name|helper
parameter_list|,
name|EOObjEntity
name|objEntity
parameter_list|)
block|{
name|Map
name|entityPlistMap
init|=
name|helper
operator|.
name|entityPListMap
argument_list|(
name|objEntity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
name|primaryKeys
init|=
operator|(
name|List
operator|)
name|entityPlistMap
operator|.
name|get
argument_list|(
literal|"primaryKeyAttributes"
argument_list|)
decl_stmt|;
name|List
name|classProperties
decl_stmt|;
if|if
condition|(
name|objEntity
operator|.
name|isServerOnly
argument_list|()
condition|)
block|{
name|classProperties
operator|=
operator|(
name|List
operator|)
name|entityPlistMap
operator|.
name|get
argument_list|(
literal|"classProperties"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|classProperties
operator|=
operator|(
name|List
operator|)
name|entityPlistMap
operator|.
name|get
argument_list|(
literal|"clientClassProperties"
argument_list|)
expr_stmt|;
block|}
name|List
name|attributes
init|=
operator|(
name|List
operator|)
name|entityPlistMap
operator|.
name|get
argument_list|(
literal|"attributes"
argument_list|)
decl_stmt|;
name|DbEntity
name|dbEntity
init|=
name|objEntity
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|primaryKeys
operator|==
literal|null
condition|)
block|{
name|primaryKeys
operator|=
name|Collections
operator|.
name|EMPTY_LIST
expr_stmt|;
block|}
if|if
condition|(
name|classProperties
operator|==
literal|null
condition|)
block|{
name|classProperties
operator|=
name|Collections
operator|.
name|EMPTY_LIST
expr_stmt|;
block|}
if|if
condition|(
name|attributes
operator|==
literal|null
condition|)
block|{
name|attributes
operator|=
name|Collections
operator|.
name|EMPTY_LIST
expr_stmt|;
block|}
comment|// detect single table inheritance
name|boolean
name|singleTableInheritance
init|=
literal|false
decl_stmt|;
name|String
name|parentName
init|=
operator|(
name|String
operator|)
name|entityPlistMap
operator|.
name|get
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
while|while
condition|(
name|parentName
operator|!=
literal|null
condition|)
block|{
name|Map
name|parentData
init|=
name|helper
operator|.
name|entityPListMap
argument_list|(
name|parentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentData
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|String
name|parentExternalName
init|=
operator|(
name|String
operator|)
name|parentData
operator|.
name|get
argument_list|(
literal|"externalName"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentExternalName
operator|==
literal|null
condition|)
block|{
name|parentName
operator|=
operator|(
name|String
operator|)
name|parentData
operator|.
name|get
argument_list|(
literal|"parent"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|dbEntity
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
name|dbEntity
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|parentExternalName
argument_list|)
condition|)
block|{
name|singleTableInheritance
operator|=
literal|true
expr_stmt|;
block|}
break|break;
block|}
name|Iterator
name|it
init|=
name|attributes
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
name|attrMap
init|=
operator|(
name|Map
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|prototypeName
init|=
operator|(
name|String
operator|)
name|attrMap
operator|.
name|get
argument_list|(
literal|"prototypeName"
argument_list|)
decl_stmt|;
name|Map
name|prototypeAttrMap
init|=
name|helper
operator|.
name|getPrototypeAttributeMapFor
argument_list|(
name|prototypeName
argument_list|)
decl_stmt|;
name|String
name|dbAttrName
init|=
name|getStringValueFromMap
argument_list|(
literal|"columnName"
argument_list|,
name|attrMap
argument_list|,
name|prototypeAttrMap
argument_list|)
decl_stmt|;
name|String
name|attrName
init|=
name|getStringValueFromMap
argument_list|(
literal|"name"
argument_list|,
name|attrMap
argument_list|,
name|prototypeAttrMap
argument_list|)
decl_stmt|;
name|String
name|attrType
init|=
name|getStringValueFromMap
argument_list|(
literal|"valueClassName"
argument_list|,
name|attrMap
argument_list|,
name|prototypeAttrMap
argument_list|)
decl_stmt|;
name|String
name|valueType
init|=
name|getStringValueFromMap
argument_list|(
literal|"valueType"
argument_list|,
name|attrMap
argument_list|,
name|prototypeAttrMap
argument_list|)
decl_stmt|;
name|String
name|externalType
init|=
name|getStringValueFromMap
argument_list|(
literal|"externalType"
argument_list|,
name|attrMap
argument_list|,
name|prototypeAttrMap
argument_list|)
decl_stmt|;
name|String
name|javaType
init|=
name|helper
operator|.
name|javaTypeForEOModelerType
argument_list|(
name|attrType
argument_list|,
name|valueType
argument_list|)
decl_stmt|;
name|EODbAttribute
name|dbAttr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dbAttrName
operator|!=
literal|null
operator|&&
name|dbEntity
operator|!=
literal|null
condition|)
block|{
comment|// if inherited attribute, skip it for DbEntity...
if|if
condition|(
operator|!
name|singleTableInheritance
operator|||
name|dbEntity
operator|.
name|getAttribute
argument_list|(
name|dbAttrName
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// create DbAttribute...since EOF allows the same column name for
comment|// more than one Java attribute, we need to check for name duplicates
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
name|dbAttributeBaseName
init|=
name|dbAttrName
decl_stmt|;
while|while
condition|(
name|dbEntity
operator|.
name|getAttribute
argument_list|(
name|dbAttrName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|dbAttrName
operator|=
name|dbAttributeBaseName
operator|+
name|i
operator|++
expr_stmt|;
block|}
name|int
name|sqlType
init|=
name|TypesMapping
operator|.
name|getSqlTypeByJava
argument_list|(
name|javaType
argument_list|)
decl_stmt|;
name|int
name|width
init|=
name|getInt
argument_list|(
literal|"width"
argument_list|,
name|attrMap
argument_list|,
name|prototypeAttrMap
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|sqlType
operator|==
name|Types
operator|.
name|VARCHAR
operator|&&
name|width
operator|<
literal|0
operator|&&
name|externalTypeIsClob
argument_list|(
name|externalType
argument_list|)
condition|)
block|{
comment|// CLOB, or TEXT as PostgreSQL calls it, is usally noted as having no width. In order to
comment|// not mistake any VARCHAR columns that just happen to have no width set in the model
comment|// for CLOB columns, use externalType as an additional check.
name|sqlType
operator|=
name|Types
operator|.
name|CLOB
expr_stmt|;
block|}
if|else if
condition|(
name|sqlType
operator|==
name|TypesMapping
operator|.
name|NOT_DEFINED
operator|&&
name|externalType
operator|!=
literal|null
condition|)
block|{
comment|// At this point we usually hit a custom Java class through a prototype, which isn't resolvable
comment|// with the model alone. But we can use the externalType as a hint. If that still doesn't match
comment|// anything, sqlType will still be NOT_DEFINED.
name|sqlType
operator|=
name|TypesMapping
operator|.
name|getSqlTypeByName
argument_list|(
name|externalType
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dbAttr
operator|=
operator|new
name|EODbAttribute
argument_list|(
name|dbAttrName
argument_list|,
name|sqlType
argument_list|,
name|dbEntity
argument_list|)
expr_stmt|;
name|dbAttr
operator|.
name|setEoAttributeName
argument_list|(
name|attrName
argument_list|)
expr_stmt|;
name|dbEntity
operator|.
name|addAttribute
argument_list|(
name|dbAttr
argument_list|)
expr_stmt|;
if|if
condition|(
name|width
operator|>=
literal|0
condition|)
block|{
name|dbAttr
operator|.
name|setMaxLength
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
name|int
name|scale
init|=
name|getInt
argument_list|(
literal|"scale"
argument_list|,
name|attrMap
argument_list|,
name|prototypeAttrMap
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|scale
operator|>=
literal|0
condition|)
block|{
name|dbAttr
operator|.
name|setScale
argument_list|(
name|scale
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|primaryKeys
operator|.
name|contains
argument_list|(
name|attrName
argument_list|)
condition|)
name|dbAttr
operator|.
name|setPrimaryKey
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|allowsNull
init|=
name|attrMap
operator|.
name|get
argument_list|(
literal|"allowsNull"
argument_list|)
decl_stmt|;
comment|// TODO: Unclear that allowsNull should be inherited from EOPrototypes
comment|// if (null == allowsNull) allowsNull = prototypeAttrMap.get("allowsNull");;
name|dbAttr
operator|.
name|setMandatory
argument_list|(
operator|!
literal|"Y"
operator|.
name|equals
argument_list|(
name|allowsNull
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|classProperties
operator|.
name|contains
argument_list|(
name|attrName
argument_list|)
condition|)
block|{
name|EOObjAttribute
name|attr
init|=
operator|new
name|EOObjAttribute
argument_list|(
name|attrName
argument_list|,
name|javaType
argument_list|,
name|objEntity
argument_list|)
decl_stmt|;
comment|// set readOnly flag of Attribute if either attribute is read or
comment|// if entity is readOnly
name|String
name|entityReadOnlyString
init|=
operator|(
name|String
operator|)
name|entityPlistMap
operator|.
name|get
argument_list|(
literal|"isReadOnly"
argument_list|)
decl_stmt|;
name|String
name|attributeReadOnlyString
init|=
operator|(
name|String
operator|)
name|attrMap
operator|.
name|get
argument_list|(
literal|"isReadOnly"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"Y"
operator|.
name|equals
argument_list|(
name|entityReadOnlyString
argument_list|)
operator|||
literal|"Y"
operator|.
name|equals
argument_list|(
name|attributeReadOnlyString
argument_list|)
condition|)
block|{
name|attr
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// set name instead of the actual attribute, as it may be
comment|// inherited....
name|attr
operator|.
name|setDbAttributePath
argument_list|(
name|dbAttrName
argument_list|)
expr_stmt|;
name|objEntity
operator|.
name|addAttribute
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|getStringValueFromMap
parameter_list|(
name|String
name|key
parameter_list|,
name|Map
name|attrMap
parameter_list|,
name|Map
name|prototypeAttrMap
parameter_list|)
block|{
name|String
name|dbAttrName
init|=
operator|(
name|String
operator|)
name|attrMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|dbAttrName
condition|)
block|{
name|dbAttrName
operator|=
operator|(
name|String
operator|)
name|prototypeAttrMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|dbAttrName
return|;
block|}
name|int
name|getInt
parameter_list|(
name|String
name|key
parameter_list|,
name|Map
name|map
parameter_list|,
name|Map
name|prototypes
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|Object
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|prototypes
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
comment|// per CAY-752, value can be a String or a Number, so handle both
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfex
parameter_list|)
block|{
return|return
name|defaultValue
return|;
block|}
block|}
block|}
comment|/** 	 * Create ObjRelationships of the specified entity, as well as 	 * DbRelationships of the corresponding DbEntity. 	 */
specifier|protected
name|void
name|makeRelationships
parameter_list|(
name|EOModelHelper
name|helper
parameter_list|,
name|ObjEntity
name|objEntity
parameter_list|)
block|{
name|Map
name|entityPlistMap
init|=
name|helper
operator|.
name|entityPListMap
argument_list|(
name|objEntity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
name|classProps
init|=
operator|(
name|List
operator|)
name|entityPlistMap
operator|.
name|get
argument_list|(
literal|"classProperties"
argument_list|)
decl_stmt|;
name|List
name|rinfo
init|=
operator|(
name|List
operator|)
name|entityPlistMap
operator|.
name|get
argument_list|(
literal|"relationships"
argument_list|)
decl_stmt|;
name|Collection
name|attributes
init|=
operator|(
name|Collection
operator|)
name|entityPlistMap
operator|.
name|get
argument_list|(
literal|"attributes"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rinfo
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|classProps
operator|==
literal|null
condition|)
block|{
name|classProps
operator|=
name|Collections
operator|.
name|EMPTY_LIST
expr_stmt|;
block|}
if|if
condition|(
name|attributes
operator|==
literal|null
condition|)
block|{
name|attributes
operator|=
name|Collections
operator|.
name|EMPTY_LIST
expr_stmt|;
block|}
name|DbEntity
name|dbSrc
init|=
name|objEntity
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|rinfo
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
name|relMap
init|=
operator|(
name|Map
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|targetName
init|=
operator|(
name|String
operator|)
name|relMap
operator|.
name|get
argument_list|(
literal|"destination"
argument_list|)
decl_stmt|;
comment|// ignore flattened relationships for now
if|if
condition|(
name|targetName
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|relName
init|=
operator|(
name|String
operator|)
name|relMap
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|boolean
name|toMany
init|=
literal|"Y"
operator|.
name|equals
argument_list|(
name|relMap
operator|.
name|get
argument_list|(
literal|"isToMany"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|toDependentPK
init|=
literal|"Y"
operator|.
name|equals
argument_list|(
name|relMap
operator|.
name|get
argument_list|(
literal|"propagatesPrimaryKey"
argument_list|)
argument_list|)
decl_stmt|;
name|ObjEntity
name|target
init|=
name|helper
operator|.
name|getDataMap
argument_list|()
operator|.
name|getObjEntity
argument_list|(
name|targetName
argument_list|)
decl_stmt|;
comment|// target maybe null for cross-EOModel relationships
comment|// ignoring those now.
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|DbEntity
name|dbTarget
init|=
name|target
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
name|Map
name|targetPlistMap
init|=
name|helper
operator|.
name|entityPListMap
argument_list|(
name|targetName
argument_list|)
decl_stmt|;
name|Collection
name|targetAttributes
init|=
operator|(
name|Collection
operator|)
name|targetPlistMap
operator|.
name|get
argument_list|(
literal|"attributes"
argument_list|)
decl_stmt|;
name|DbRelationship
name|dbRel
init|=
literal|null
decl_stmt|;
comment|// process underlying DbRelationship
comment|// Note: there is no flattened rel. support here....
comment|// Note: source maybe null, e.g. an abstract entity.
if|if
condition|(
name|dbSrc
operator|!=
literal|null
operator|&&
name|dbTarget
operator|!=
literal|null
condition|)
block|{
comment|// in case of inheritance EOF stores duplicates of all inherited
comment|// relationships, so we must skip this relationship in DB entity
comment|// if it is
comment|// already there...
name|dbRel
operator|=
name|dbSrc
operator|.
name|getRelationship
argument_list|(
name|relName
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbRel
operator|==
literal|null
condition|)
block|{
name|dbRel
operator|=
operator|new
name|DbRelationship
argument_list|()
expr_stmt|;
name|dbRel
operator|.
name|setSourceEntity
argument_list|(
name|dbSrc
argument_list|)
expr_stmt|;
name|dbRel
operator|.
name|setTargetEntityName
argument_list|(
name|dbTarget
argument_list|)
expr_stmt|;
name|dbRel
operator|.
name|setToMany
argument_list|(
name|toMany
argument_list|)
expr_stmt|;
name|dbRel
operator|.
name|setName
argument_list|(
name|relName
argument_list|)
expr_stmt|;
name|dbRel
operator|.
name|setToDependentPK
argument_list|(
name|toDependentPK
argument_list|)
expr_stmt|;
name|dbSrc
operator|.
name|addRelationship
argument_list|(
name|dbRel
argument_list|)
expr_stmt|;
name|List
name|joins
init|=
operator|(
name|List
operator|)
name|relMap
operator|.
name|get
argument_list|(
literal|"joins"
argument_list|)
decl_stmt|;
name|Iterator
name|jIt
init|=
name|joins
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|jIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
name|joinMap
init|=
operator|(
name|Map
operator|)
name|jIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|DbJoin
name|join
init|=
operator|new
name|DbJoin
argument_list|(
name|dbRel
argument_list|)
decl_stmt|;
comment|// find source attribute dictionary and extract the
comment|// column name
name|String
name|sourceAttributeName
init|=
operator|(
name|String
operator|)
name|joinMap
operator|.
name|get
argument_list|(
literal|"sourceAttribute"
argument_list|)
decl_stmt|;
name|join
operator|.
name|setSourceName
argument_list|(
name|columnName
argument_list|(
name|attributes
argument_list|,
name|sourceAttributeName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|targetAttributeName
init|=
operator|(
name|String
operator|)
name|joinMap
operator|.
name|get
argument_list|(
literal|"destinationAttribute"
argument_list|)
decl_stmt|;
name|join
operator|.
name|setTargetName
argument_list|(
name|columnName
argument_list|(
name|targetAttributes
argument_list|,
name|targetAttributeName
argument_list|)
argument_list|)
expr_stmt|;
name|dbRel
operator|.
name|addJoin
argument_list|(
name|join
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// only create obj relationship if it is a class property
if|if
condition|(
name|classProps
operator|.
name|contains
argument_list|(
name|relName
argument_list|)
condition|)
block|{
name|ObjRelationship
name|rel
init|=
operator|new
name|ObjRelationship
argument_list|()
decl_stmt|;
name|rel
operator|.
name|setName
argument_list|(
name|relName
argument_list|)
expr_stmt|;
name|rel
operator|.
name|setSourceEntity
argument_list|(
name|objEntity
argument_list|)
expr_stmt|;
name|rel
operator|.
name|setTargetEntityName
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|objEntity
operator|.
name|addRelationship
argument_list|(
name|rel
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbRel
operator|!=
literal|null
condition|)
block|{
name|rel
operator|.
name|addDbRelationship
argument_list|(
name|dbRel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** 	 * Create reverse DbRelationships that were not created so far, since 	 * Cayenne requires them. 	 *  	 * @since 1.0.5 	 */
specifier|protected
name|void
name|makeReverseDbRelationships
parameter_list|(
name|DbEntity
name|dbEntity
parameter_list|)
block|{
if|if
condition|(
name|dbEntity
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Attempt to create reverse relationships for the null DbEntity."
argument_list|)
throw|;
block|}
comment|// iterate over a copy of the collection, since in case of
comment|// reflexive relationships, we may modify source entity relationship map
for|for
control|(
name|DbRelationship
name|relationship
range|:
operator|new
name|ArrayList
argument_list|<
name|DbRelationship
argument_list|>
argument_list|(
name|dbEntity
operator|.
name|getRelationships
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|relationship
operator|.
name|getReverseRelationship
argument_list|()
operator|==
literal|null
condition|)
block|{
name|DbRelationship
name|reverse
init|=
name|relationship
operator|.
name|createReverseRelationship
argument_list|()
decl_stmt|;
name|reverse
operator|.
name|setName
argument_list|(
name|NameBuilder
operator|.
name|builder
argument_list|(
name|reverse
argument_list|,
name|reverse
operator|.
name|getSourceEntity
argument_list|()
argument_list|)
comment|// TODO: we can do better with ObjectNameGenerator
operator|.
name|baseName
argument_list|(
name|relationship
operator|.
name|getName
argument_list|()
operator|+
literal|"Reverse"
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|relationship
operator|.
name|getTargetEntity
argument_list|()
operator|.
name|addRelationship
argument_list|(
name|reverse
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Create Flattened ObjRelationships of the specified entity. 	 */
specifier|protected
name|void
name|makeFlatRelationships
parameter_list|(
name|EOModelHelper
name|helper
parameter_list|,
name|ObjEntity
name|e
parameter_list|)
block|{
name|Map
name|info
init|=
name|helper
operator|.
name|entityPListMap
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
name|rinfo
init|=
operator|(
name|List
operator|)
name|info
operator|.
name|get
argument_list|(
literal|"relationships"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rinfo
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Iterator
name|it
init|=
name|rinfo
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
name|relMap
init|=
operator|(
name|Map
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|targetPath
init|=
operator|(
name|String
operator|)
name|relMap
operator|.
name|get
argument_list|(
literal|"definition"
argument_list|)
decl_stmt|;
comment|// ignore normal relationships
if|if
condition|(
name|targetPath
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|ObjRelationship
name|flatRel
init|=
operator|new
name|ObjRelationship
argument_list|()
decl_stmt|;
name|flatRel
operator|.
name|setName
argument_list|(
operator|(
name|String
operator|)
name|relMap
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|flatRel
operator|.
name|setSourceEntity
argument_list|(
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|flatRel
operator|.
name|setDbRelationshipPath
argument_list|(
name|targetPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExpressionException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Invalid relationship: "
operator|+
name|targetPath
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// find target entity
name|Map
name|entityInfo
init|=
name|info
decl_stmt|;
name|StringTokenizer
name|toks
init|=
operator|new
name|StringTokenizer
argument_list|(
name|targetPath
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
while|while
condition|(
name|toks
operator|.
name|hasMoreTokens
argument_list|()
operator|&&
name|entityInfo
operator|!=
literal|null
condition|)
block|{
name|String
name|pathComponent
init|=
name|toks
operator|.
name|nextToken
argument_list|()
decl_stmt|;
comment|// get relationship info and reset entityInfo, so that we could
comment|// use
comment|// entityInfo state as an indicator of valid flat relationship
comment|// enpoint
comment|// outside the loop
name|Collection
name|relationshipInfo
init|=
operator|(
name|Collection
operator|)
name|entityInfo
operator|.
name|get
argument_list|(
literal|"relationships"
argument_list|)
decl_stmt|;
name|entityInfo
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|relationshipInfo
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|Iterator
name|rit
init|=
name|relationshipInfo
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|rit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
name|pathRelationship
init|=
operator|(
name|Map
operator|)
name|rit
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathComponent
operator|.
name|equals
argument_list|(
name|pathRelationship
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|targetName
init|=
operator|(
name|String
operator|)
name|pathRelationship
operator|.
name|get
argument_list|(
literal|"destination"
argument_list|)
decl_stmt|;
name|entityInfo
operator|=
name|helper
operator|.
name|entityPListMap
argument_list|(
name|targetName
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|entityInfo
operator|!=
literal|null
condition|)
block|{
name|flatRel
operator|.
name|setTargetEntityName
argument_list|(
operator|(
name|String
operator|)
name|entityInfo
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|addRelationship
argument_list|(
name|flatRel
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Locates an attribute map matching the name and returns column name for 	 * this attribute. 	 *  	 * @since 1.1 	 */
name|String
name|columnName
parameter_list|(
name|Collection
name|entityAttributes
parameter_list|,
name|String
name|attributeName
parameter_list|)
block|{
if|if
condition|(
name|attributeName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Iterator
name|it
init|=
name|entityAttributes
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|attributeName
operator|.
name|equals
argument_list|(
name|map
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"columnName"
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|// sorts ObjEntities so that subentities in inheritance hierarchy are shown
comment|// last
specifier|final
class|class
name|InheritanceComparator
implements|implements
name|Comparator
block|{
name|DataMap
name|dataMap
decl_stmt|;
name|InheritanceComparator
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
name|this
operator|.
name|dataMap
operator|=
name|dataMap
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
literal|null
condition|)
block|{
return|return
name|o2
operator|!=
literal|null
condition|?
operator|-
literal|1
else|:
literal|0
return|;
block|}
if|else if
condition|(
name|o2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
name|String
name|name1
init|=
name|o1
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|name2
init|=
name|o2
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ObjEntity
name|e1
init|=
name|dataMap
operator|.
name|getObjEntity
argument_list|(
name|name1
argument_list|)
decl_stmt|;
name|ObjEntity
name|e2
init|=
name|dataMap
operator|.
name|getObjEntity
argument_list|(
name|name2
argument_list|)
decl_stmt|;
return|return
name|compareEntities
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|)
return|;
block|}
name|int
name|compareEntities
parameter_list|(
name|ObjEntity
name|e1
parameter_list|,
name|ObjEntity
name|e2
parameter_list|)
block|{
if|if
condition|(
name|e1
operator|==
literal|null
condition|)
block|{
return|return
name|e2
operator|!=
literal|null
condition|?
operator|-
literal|1
else|:
literal|0
return|;
block|}
if|else if
condition|(
name|e2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
comment|// entity goes first if it is a direct or indirect superentity of
comment|// another
comment|// one
if|if
condition|(
name|e1
operator|.
name|isSubentityOf
argument_list|(
name|e2
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|e2
operator|.
name|isSubentityOf
argument_list|(
name|e1
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// sort alphabetically
return|return
name|e1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

