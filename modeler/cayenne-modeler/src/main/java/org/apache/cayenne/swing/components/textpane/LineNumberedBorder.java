begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|components
operator|.
name|textpane
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|FontMetrics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Insets
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|AbstractBorder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_class
specifier|public
class|class
name|LineNumberedBorder
extends|extends
name|AbstractBorder
block|{
specifier|private
name|int
name|etalon
decl_stmt|;
specifier|private
name|int
name|lineNumberWidth
decl_stmt|;
specifier|private
name|JCayenneTextPane
name|pane
decl_stmt|;
specifier|public
name|LineNumberedBorder
parameter_list|(
name|JCayenneTextPane
name|pane
parameter_list|)
block|{
name|setEtalon
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|pane
operator|=
name|pane
expr_stmt|;
block|}
specifier|public
name|Insets
name|getBorderInsets
parameter_list|(
name|Component
name|c
parameter_list|)
block|{
return|return
name|getBorderInsets
argument_list|(
name|c
argument_list|,
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Insets
name|getBorderInsets
parameter_list|(
name|Component
name|c
parameter_list|,
name|Insets
name|insets
parameter_list|)
block|{
if|if
condition|(
name|c
operator|instanceof
name|JTextPane
condition|)
block|{
name|int
name|width
init|=
name|lineNumberWidth
argument_list|(
operator|(
name|JTextPane
operator|)
name|c
argument_list|)
decl_stmt|;
name|insets
operator|.
name|left
operator|=
name|width
expr_stmt|;
block|}
return|return
name|insets
return|;
block|}
comment|/** 	 * Returns the width, in pixels 	 */
specifier|private
name|int
name|lineNumberWidth
parameter_list|(
name|JTextPane
name|textPane
parameter_list|)
block|{
name|int
name|lineCount
init|=
name|getEtalon
argument_list|()
decl_stmt|;
name|setLineNumberWidth
argument_list|(
name|textPane
operator|.
name|getFontMetrics
argument_list|(
name|textPane
operator|.
name|getFont
argument_list|()
argument_list|)
operator|.
name|stringWidth
argument_list|(
name|lineCount
operator|+
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|getLineNumberWidth
argument_list|()
return|;
block|}
specifier|public
name|void
name|paintBorder
parameter_list|(
name|Component
name|c
parameter_list|,
name|Graphics
name|g
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|java
operator|.
name|awt
operator|.
name|Rectangle
name|clip
init|=
name|g
operator|.
name|getClipBounds
argument_list|()
decl_stmt|;
name|FontMetrics
name|fm
init|=
name|g
operator|.
name|getFontMetrics
argument_list|()
decl_stmt|;
name|int
name|fontHeight
init|=
name|fm
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|int
name|ybaseline
init|=
name|y
operator|+
name|fm
operator|.
name|getAscent
argument_list|()
decl_stmt|;
name|int
name|startingLineNumber
init|=
operator|(
name|clip
operator|.
name|y
operator|/
name|fontHeight
operator|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|ybaseline
operator|<
name|clip
operator|.
name|y
condition|)
block|{
name|ybaseline
operator|=
name|y
operator|+
name|startingLineNumber
operator|*
name|fontHeight
operator|-
operator|(
name|fontHeight
operator|-
name|fm
operator|.
name|getAscent
argument_list|()
operator|)
expr_stmt|;
block|}
name|int
name|yend
init|=
name|ybaseline
operator|+
name|height
decl_stmt|;
if|if
condition|(
name|yend
operator|>
operator|(
name|y
operator|+
name|height
operator|)
condition|)
block|{
name|yend
operator|=
name|y
operator|+
name|height
expr_stmt|;
block|}
name|int
name|lnxstart
init|=
name|x
decl_stmt|;
name|int
name|widhtBorder
init|=
name|getLineNumberWidth
argument_list|()
operator|-
literal|2
decl_stmt|;
name|g
operator|.
name|setColor
argument_list|(
operator|new
name|Color
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|224
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
name|lnxstart
argument_list|,
literal|0
argument_list|,
name|lnxstart
operator|+
name|widhtBorder
argument_list|,
name|yend
argument_list|)
expr_stmt|;
name|g
operator|.
name|setColor
argument_list|(
operator|new
name|Color
argument_list|(
literal|214
argument_list|,
literal|214
argument_list|,
literal|214
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawRect
argument_list|(
name|lnxstart
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|lnxstart
operator|+
name|widhtBorder
argument_list|,
name|yend
operator|+
literal|1
argument_list|)
expr_stmt|;
name|int
name|end
init|=
name|pane
operator|.
name|getEndPositionInDocument
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|pane
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|int
name|endline
init|=
name|doc
operator|.
name|getDefaultRootElement
argument_list|()
operator|.
name|getElementIndex
argument_list|(
name|end
argument_list|)
operator|+
literal|1
decl_stmt|;
while|while
condition|(
name|startingLineNumber
operator|<=
name|endline
condition|)
block|{
name|g
operator|.
name|setColor
argument_list|(
name|Color
operator|.
name|gray
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawString
argument_list|(
name|startingLineNumber
operator|+
literal|" "
argument_list|,
name|lnxstart
operator|+
literal|1
argument_list|,
name|ybaseline
argument_list|)
expr_stmt|;
name|ybaseline
operator|+=
name|fontHeight
expr_stmt|;
name|startingLineNumber
operator|++
expr_stmt|;
block|}
name|setEtalon
argument_list|(
name|startingLineNumber
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getEtalon
parameter_list|()
block|{
return|return
name|etalon
return|;
block|}
specifier|public
name|void
name|setEtalon
parameter_list|(
name|int
name|etalon
parameter_list|)
block|{
if|if
condition|(
name|etalon
operator|<
literal|10
condition|)
block|{
name|etalon
operator|=
literal|10
expr_stmt|;
block|}
name|this
operator|.
name|etalon
operator|=
name|etalon
expr_stmt|;
block|}
specifier|public
name|int
name|getLineNumberWidth
parameter_list|()
block|{
return|return
name|lineNumberWidth
return|;
block|}
specifier|public
name|void
name|setLineNumberWidth
parameter_list|(
name|int
name|lineNumberWidth
parameter_list|)
block|{
name|this
operator|.
name|lineNumberWidth
operator|=
name|lineNumberWidth
expr_stmt|;
block|}
block|}
end_class

end_unit

