begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|cgen
operator|.
name|domain
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|xml
operator|.
name|DataChannelMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
operator|.
name|CgenConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
operator|.
name|ClassGenerationAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
operator|.
name|ClientClassGenerationAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|ErrorDebugDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|pref
operator|.
name|GeneralPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataMapDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|ModelerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ItemEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|Preferences
import|;
end_import

begin_class
specifier|public
class|class
name|CgenTabController
block|{
specifier|private
specifier|static
name|Logger
name|logObj
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ErrorDebugDialog
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ProjectController
name|projectController
decl_stmt|;
specifier|private
name|CgenTab
name|view
decl_stmt|;
specifier|private
name|ConcurrentMap
argument_list|<
name|DataMap
argument_list|,
name|CgenPanel
argument_list|>
name|generatorsPanels
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|DataMap
argument_list|>
name|selectedDataMaps
decl_stmt|;
specifier|public
name|CgenTabController
parameter_list|(
name|ProjectController
name|projectController
parameter_list|)
block|{
name|this
operator|.
name|projectController
operator|=
name|projectController
expr_stmt|;
name|this
operator|.
name|view
operator|=
operator|new
name|CgenTab
argument_list|(
name|projectController
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|generatorsPanels
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|selectedDataMaps
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|void
name|createPanels
parameter_list|()
block|{
name|Collection
argument_list|<
name|DataMap
argument_list|>
name|dataMaps
init|=
name|getDataMaps
argument_list|()
decl_stmt|;
name|generatorsPanels
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|DataMap
name|dataMap
range|:
name|dataMaps
control|)
block|{
name|CgenPanel
name|cgenPanel
init|=
operator|new
name|CgenPanel
argument_list|(
name|dataMap
argument_list|)
decl_stmt|;
name|initListenersForPanel
argument_list|(
name|cgenPanel
argument_list|)
expr_stmt|;
name|generatorsPanels
operator|.
name|put
argument_list|(
name|dataMap
argument_list|,
name|cgenPanel
argument_list|)
expr_stmt|;
block|}
name|selectedDataMaps
operator|.
name|forEach
argument_list|(
name|dataMap
lambda|->
block|{
if|if
condition|(
name|generatorsPanels
operator|.
name|get
argument_list|(
name|dataMap
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|CgenPanel
name|currPanel
init|=
name|generatorsPanels
operator|.
name|get
argument_list|(
name|dataMap
argument_list|)
decl_stmt|;
name|currPanel
operator|.
name|getCheckConfig
argument_list|()
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initListenersForPanel
parameter_list|(
name|CgenPanel
name|cgenPanel
parameter_list|)
block|{
name|cgenPanel
operator|.
name|getCheckConfig
argument_list|()
operator|.
name|addItemListener
argument_list|(
name|e
lambda|->
block|{
if|if
condition|(
name|e
operator|.
name|getStateChange
argument_list|()
operator|==
name|ItemEvent
operator|.
name|SELECTED
condition|)
block|{
name|selectedDataMaps
operator|.
name|add
argument_list|(
name|cgenPanel
operator|.
name|getDataMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|e
operator|.
name|getStateChange
argument_list|()
operator|==
name|ItemEvent
operator|.
name|DESELECTED
condition|)
block|{
name|selectedDataMaps
operator|.
name|remove
argument_list|(
name|cgenPanel
operator|.
name|getDataMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setGenerateButtonDisabled
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|cgenPanel
operator|.
name|getToConfigButton
argument_list|()
operator|.
name|addActionListener
argument_list|(
name|action
lambda|->
name|showConfig
argument_list|(
name|cgenPanel
operator|.
name|getDataMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|.
name|getSelectAll
argument_list|()
operator|.
name|addItemListener
argument_list|(
name|e
lambda|->
block|{
if|if
condition|(
name|e
operator|.
name|getStateChange
argument_list|()
operator|==
name|ItemEvent
operator|.
name|SELECTED
condition|)
block|{
name|getGeneratorsPanels
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
name|value
operator|.
name|getCheckConfig
argument_list|()
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|e
operator|.
name|getStateChange
argument_list|()
operator|==
name|ItemEvent
operator|.
name|DESELECTED
condition|)
block|{
name|getGeneratorsPanels
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
name|value
operator|.
name|getCheckConfig
argument_list|()
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setGenerateButtonDisabled
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setGenerateButtonDisabled
parameter_list|()
block|{
if|if
condition|(
name|selectedDataMaps
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|view
operator|.
name|getGenerateAll
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|view
operator|.
name|getGenerateAll
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Collection
argument_list|<
name|DataMap
argument_list|>
name|getDataMaps
parameter_list|()
block|{
name|Project
name|project
init|=
name|projectController
operator|.
name|getProject
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|DataChannelDescriptor
operator|)
name|project
operator|.
name|getRootNode
argument_list|()
operator|)
operator|.
name|getDataMaps
argument_list|()
return|;
block|}
specifier|public
name|CgenTab
name|getView
parameter_list|()
block|{
return|return
name|view
return|;
block|}
name|void
name|runGenerators
parameter_list|(
name|Set
argument_list|<
name|DataMap
argument_list|>
name|dataMaps
parameter_list|)
block|{
name|DataChannelMetaData
name|metaData
init|=
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataMaps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|view
operator|.
name|showEmptyMessage
argument_list|()
expr_stmt|;
return|return;
block|}
name|boolean
name|generationFail
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DataMap
name|dataMap
range|:
name|dataMaps
control|)
block|{
try|try
block|{
name|CgenConfiguration
name|cgenConfiguration
init|=
name|metaData
operator|.
name|get
argument_list|(
name|dataMap
argument_list|,
name|CgenConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|cgenConfiguration
operator|==
literal|null
condition|)
block|{
name|cgenConfiguration
operator|=
name|createConfiguration
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cgenConfiguration
operator|.
name|getRootPath
argument_list|()
operator|==
literal|null
condition|)
block|{
name|URL
name|url
init|=
name|projectController
operator|.
name|getProject
argument_list|()
operator|.
name|getConfigurationResource
argument_list|()
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|Path
name|resourcePath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isRegularFile
argument_list|(
name|resourcePath
argument_list|)
condition|)
block|{
name|resourcePath
operator|=
name|resourcePath
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|cgenConfiguration
operator|.
name|setRootPath
argument_list|(
name|resourcePath
argument_list|)
expr_stmt|;
block|}
name|ClassGenerationAction
name|classGenerationAction
init|=
name|cgenConfiguration
operator|.
name|isClient
argument_list|()
condition|?
operator|new
name|ClientClassGenerationAction
argument_list|(
name|cgenConfiguration
argument_list|)
else|:
operator|new
name|ClassGenerationAction
argument_list|(
name|cgenConfiguration
argument_list|)
decl_stmt|;
name|classGenerationAction
operator|.
name|prepareArtifacts
argument_list|()
expr_stmt|;
name|classGenerationAction
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logObj
operator|.
name|error
argument_list|(
literal|"Error generating classes"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|generationFail
operator|=
literal|true
expr_stmt|;
name|view
operator|.
name|showErrorMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|generationFail
condition|)
block|{
name|view
operator|.
name|showSuccessMessage
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|CgenConfiguration
name|createConfiguration
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
name|CgenConfiguration
name|cgenConfiguration
init|=
operator|new
name|CgenConfiguration
argument_list|()
decl_stmt|;
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getInjector
argument_list|()
operator|.
name|injectMembers
argument_list|(
name|cgenConfiguration
argument_list|)
expr_stmt|;
name|cgenConfiguration
operator|.
name|setDataMap
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
name|Path
name|basePath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|ModelerUtil
operator|.
name|initOutputFolder
argument_list|()
argument_list|)
decl_stmt|;
comment|// no destination folder
if|if
condition|(
name|basePath
operator|==
literal|null
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|this
operator|.
name|getView
argument_list|()
argument_list|,
literal|"Select directory for source files."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// no such folder
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|basePath
argument_list|)
condition|)
block|{
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|basePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|this
operator|.
name|getView
argument_list|()
argument_list|,
literal|"Can't create directory. "
operator|+
literal|". Select a different one."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|// not a directory
if|if
condition|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|basePath
argument_list|)
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|this
operator|.
name|getView
argument_list|()
argument_list|,
name|basePath
operator|+
literal|" is not a valid directory."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|cgenConfiguration
operator|.
name|setRootPath
argument_list|(
name|basePath
argument_list|)
expr_stmt|;
name|Preferences
name|preferences
init|=
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getPreferencesNode
argument_list|(
name|GeneralPreferences
operator|.
name|class
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|preferences
operator|!=
literal|null
condition|)
block|{
name|cgenConfiguration
operator|.
name|setEncoding
argument_list|(
name|preferences
operator|.
name|get
argument_list|(
name|GeneralPreferences
operator|.
name|ENCODING_PREFERENCE
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cgenConfiguration
operator|.
name|resolveExcludeEntities
argument_list|()
expr_stmt|;
name|cgenConfiguration
operator|.
name|resolveExcludeEmbeddables
argument_list|()
expr_stmt|;
return|return
name|cgenConfiguration
return|;
block|}
specifier|private
name|void
name|showConfig
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
if|if
condition|(
name|dataMap
operator|!=
literal|null
condition|)
block|{
name|projectController
operator|.
name|fireDataMapDisplayEvent
argument_list|(
operator|new
name|DataMapDisplayEvent
argument_list|(
name|this
operator|.
name|getView
argument_list|()
argument_list|,
name|dataMap
argument_list|,
name|dataMap
operator|.
name|getDataChannelDescriptor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ProjectController
name|getProjectController
parameter_list|()
block|{
return|return
name|projectController
return|;
block|}
name|ConcurrentMap
argument_list|<
name|DataMap
argument_list|,
name|CgenPanel
argument_list|>
name|getGeneratorsPanels
parameter_list|()
block|{
return|return
name|generatorsPanels
return|;
block|}
specifier|public
name|Set
argument_list|<
name|DataMap
argument_list|>
name|getSelectedDataMaps
parameter_list|()
block|{
return|return
name|selectedDataMaps
return|;
block|}
block|}
end_class

end_unit

