begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|undo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|CannotRedoException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|CannotUndoException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DataNodeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Embeddable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Relationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateDataMapAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateDbEntityAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateEmbeddableAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateNodeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateObjEntityAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateProcedureAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateQueryAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateRelationshipAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|RemoveAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|QueryDescriptor
import|;
end_import

begin_class
specifier|public
class|class
name|RemoveUndoableEdit
extends|extends
name|CayenneUndoableEdit
block|{
specifier|private
name|DataMap
name|map
decl_stmt|;
specifier|private
name|DbEntity
name|dbEntity
decl_stmt|;
specifier|private
name|ObjEntity
name|objEntity
decl_stmt|;
specifier|private
name|QueryDescriptor
name|query
decl_stmt|;
specifier|private
name|Procedure
name|procedure
decl_stmt|;
specifier|private
name|DataNodeDescriptor
name|dataNode
decl_stmt|;
specifier|private
name|DataChannelDescriptor
name|domain
decl_stmt|;
specifier|private
name|Embeddable
name|embeddable
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|DbEntity
argument_list|,
name|List
argument_list|<
name|DbRelationship
argument_list|>
argument_list|>
name|dbRelationshipMap
init|=
operator|new
name|HashMap
argument_list|<
name|DbEntity
argument_list|,
name|List
argument_list|<
name|DbRelationship
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ObjEntity
argument_list|,
name|List
argument_list|<
name|ObjRelationship
argument_list|>
argument_list|>
name|objRelationshipMap
init|=
operator|new
name|HashMap
argument_list|<
name|ObjEntity
argument_list|,
name|List
argument_list|<
name|ObjRelationship
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
enum|enum
name|REMOVE_MODE
block|{
name|OBJECT_ENTITY
block|,
name|DB_ENTITY
block|,
name|QUERY
block|,
name|PROCEDURE
block|,
name|MAP_FROM_NODE
block|,
name|MAP_FROM_DOMAIN
block|,
name|NODE
block|,
name|DOMAIN
block|,
name|EMBEDDABLE
block|}
empty_stmt|;
specifier|private
name|REMOVE_MODE
name|mode
decl_stmt|;
specifier|public
name|RemoveUndoableEdit
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|this
operator|.
name|domain
operator|=
operator|(
name|DataChannelDescriptor
operator|)
name|application
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
empty_stmt|;
name|this
operator|.
name|mode
operator|=
name|REMOVE_MODE
operator|.
name|DOMAIN
expr_stmt|;
block|}
specifier|public
name|RemoveUndoableEdit
parameter_list|(
name|Application
name|application
parameter_list|,
name|DataNodeDescriptor
name|node
parameter_list|,
name|DataMap
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|dataNode
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|REMOVE_MODE
operator|.
name|MAP_FROM_NODE
expr_stmt|;
block|}
specifier|public
name|RemoveUndoableEdit
parameter_list|(
name|Application
name|application
parameter_list|,
name|DataMap
name|map
parameter_list|)
block|{
name|this
operator|.
name|domain
operator|=
operator|(
name|DataChannelDescriptor
operator|)
name|application
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
empty_stmt|;
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|REMOVE_MODE
operator|.
name|MAP_FROM_DOMAIN
expr_stmt|;
block|}
specifier|public
name|RemoveUndoableEdit
parameter_list|(
name|Application
name|application
parameter_list|,
name|DataNodeDescriptor
name|node
parameter_list|)
block|{
name|this
operator|.
name|domain
operator|=
operator|(
name|DataChannelDescriptor
operator|)
name|application
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
empty_stmt|;
name|this
operator|.
name|dataNode
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|REMOVE_MODE
operator|.
name|NODE
expr_stmt|;
block|}
specifier|public
name|RemoveUndoableEdit
parameter_list|(
name|DataMap
name|map
parameter_list|,
name|ObjEntity
name|objEntity
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|objEntity
operator|=
name|objEntity
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|REMOVE_MODE
operator|.
name|OBJECT_ENTITY
expr_stmt|;
for|for
control|(
name|ObjEntity
name|ent
range|:
name|map
operator|.
name|getObjEntities
argument_list|()
control|)
block|{
comment|// take a copy since we're going to modify the entity
for|for
control|(
name|Relationship
name|relationship
range|:
operator|new
name|ArrayList
argument_list|<
name|Relationship
argument_list|>
argument_list|(
name|ent
operator|.
name|getRelationships
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|this
operator|.
name|objEntity
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|relationship
operator|.
name|getTargetEntityName
argument_list|()
argument_list|)
condition|)
block|{
name|ObjRelationship
name|rel
init|=
operator|(
name|ObjRelationship
operator|)
name|relationship
decl_stmt|;
if|if
condition|(
name|objRelationshipMap
operator|.
name|get
argument_list|(
name|rel
operator|.
name|getSourceEntity
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|objRelationshipMap
operator|.
name|put
argument_list|(
operator|(
name|ObjEntity
operator|)
name|rel
operator|.
name|getSourceEntity
argument_list|()
argument_list|,
operator|new
name|LinkedList
argument_list|<
name|ObjRelationship
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|objRelationshipMap
operator|.
name|get
argument_list|(
name|rel
operator|.
name|getSourceEntity
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|RemoveUndoableEdit
parameter_list|(
name|DataMap
name|map
parameter_list|,
name|DbEntity
name|dbEntity
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|dbEntity
operator|=
name|dbEntity
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|REMOVE_MODE
operator|.
name|DB_ENTITY
expr_stmt|;
for|for
control|(
name|ObjEntity
name|objEnt
range|:
name|map
operator|.
name|getObjEntities
argument_list|()
control|)
block|{
for|for
control|(
name|Relationship
name|rel
range|:
name|objEnt
operator|.
name|getRelationships
argument_list|()
control|)
block|{
for|for
control|(
name|DbRelationship
name|dbRel
range|:
operator|(
operator|(
name|ObjRelationship
operator|)
name|rel
operator|)
operator|.
name|getDbRelationships
argument_list|()
control|)
block|{
if|if
condition|(
name|dbRel
operator|.
name|getTargetEntity
argument_list|()
operator|==
name|dbEntity
condition|)
block|{
if|if
condition|(
name|dbRelationshipMap
operator|.
name|get
argument_list|(
name|dbRel
operator|.
name|getSourceEntity
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|dbRelationshipMap
operator|.
name|put
argument_list|(
operator|(
name|DbEntity
operator|)
name|dbRel
operator|.
name|getSourceEntity
argument_list|()
argument_list|,
operator|new
name|LinkedList
argument_list|<
name|DbRelationship
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dbRelationshipMap
operator|.
name|get
argument_list|(
name|dbRel
operator|.
name|getSourceEntity
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|dbRel
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|RemoveUndoableEdit
parameter_list|(
name|DataMap
name|map
parameter_list|,
name|QueryDescriptor
name|query
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|REMOVE_MODE
operator|.
name|QUERY
expr_stmt|;
block|}
specifier|public
name|RemoveUndoableEdit
parameter_list|(
name|DataMap
name|map
parameter_list|,
name|Procedure
name|procedure
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|procedure
operator|=
name|procedure
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|REMOVE_MODE
operator|.
name|PROCEDURE
expr_stmt|;
block|}
specifier|public
name|RemoveUndoableEdit
parameter_list|(
name|DataMap
name|map
parameter_list|,
name|Embeddable
name|embeddable
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|embeddable
operator|=
name|embeddable
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|REMOVE_MODE
operator|.
name|EMBEDDABLE
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPresentationName
parameter_list|()
block|{
switch|switch
condition|(
name|this
operator|.
name|mode
condition|)
block|{
case|case
name|OBJECT_ENTITY
case|:
return|return
literal|"Remove Object Entity"
return|;
case|case
name|DB_ENTITY
case|:
return|return
literal|"Remove Db Entity"
return|;
case|case
name|QUERY
case|:
return|return
literal|"Remove Query"
return|;
case|case
name|PROCEDURE
case|:
return|return
literal|"Remove Procedure"
return|;
case|case
name|MAP_FROM_NODE
case|:
return|return
literal|"Remove DataMap"
return|;
case|case
name|MAP_FROM_DOMAIN
case|:
return|return
literal|"Remove DataMap"
return|;
case|case
name|NODE
case|:
return|return
literal|"Remove DataNode"
return|;
case|case
name|DOMAIN
case|:
return|return
literal|"Remove DataDomain"
return|;
case|case
name|EMBEDDABLE
case|:
return|return
literal|"Remove Embeddable"
return|;
default|default:
return|return
literal|"Remove"
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|redo
parameter_list|()
throws|throws
name|CannotRedoException
block|{
name|RemoveAction
name|action
init|=
name|actionManager
operator|.
name|getAction
argument_list|(
name|RemoveAction
operator|.
name|class
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|this
operator|.
name|mode
condition|)
block|{
case|case
name|OBJECT_ENTITY
case|:
name|action
operator|.
name|removeObjEntity
argument_list|(
name|map
argument_list|,
name|objEntity
argument_list|)
expr_stmt|;
break|break;
case|case
name|DB_ENTITY
case|:
name|action
operator|.
name|removeDbEntity
argument_list|(
name|map
argument_list|,
name|dbEntity
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUERY
case|:
name|action
operator|.
name|removeQuery
argument_list|(
name|map
argument_list|,
name|query
argument_list|)
expr_stmt|;
break|break;
case|case
name|PROCEDURE
case|:
name|action
operator|.
name|removeProcedure
argument_list|(
name|map
argument_list|,
name|procedure
argument_list|)
expr_stmt|;
case|case
name|MAP_FROM_NODE
case|:
name|action
operator|.
name|removeDataMapFromDataNode
argument_list|(
name|dataNode
argument_list|,
name|map
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP_FROM_DOMAIN
case|:
name|action
operator|.
name|removeDataMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
break|break;
case|case
name|NODE
case|:
name|action
operator|.
name|removeDataNode
argument_list|(
name|dataNode
argument_list|)
expr_stmt|;
break|break;
case|case
name|EMBEDDABLE
case|:
name|action
operator|.
name|removeEmbeddable
argument_list|(
name|map
argument_list|,
name|embeddable
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|undo
parameter_list|()
throws|throws
name|CannotUndoException
block|{
name|CreateRelationshipAction
name|relationshipAction
init|=
name|actionManager
operator|.
name|getAction
argument_list|(
name|CreateRelationshipAction
operator|.
name|class
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|this
operator|.
name|mode
condition|)
block|{
case|case
name|OBJECT_ENTITY
case|:
block|{
for|for
control|(
name|Entry
argument_list|<
name|ObjEntity
argument_list|,
name|List
argument_list|<
name|ObjRelationship
argument_list|>
argument_list|>
name|entry
range|:
name|objRelationshipMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ObjEntity
name|objEntity
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjRelationship
name|rel
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|relationshipAction
operator|.
name|createObjRelationship
argument_list|(
name|objEntity
argument_list|,
name|rel
argument_list|)
expr_stmt|;
block|}
block|}
name|CreateObjEntityAction
name|action
init|=
name|actionManager
operator|.
name|getAction
argument_list|(
name|CreateObjEntityAction
operator|.
name|class
argument_list|)
decl_stmt|;
name|action
operator|.
name|createObjEntity
argument_list|(
name|map
argument_list|,
name|objEntity
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DB_ENTITY
case|:
block|{
for|for
control|(
name|Entry
argument_list|<
name|DbEntity
argument_list|,
name|List
argument_list|<
name|DbRelationship
argument_list|>
argument_list|>
name|entry
range|:
name|dbRelationshipMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|DbEntity
name|dbEntity
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|DbRelationship
name|rel
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|relationshipAction
operator|.
name|createDbRelationship
argument_list|(
name|dbEntity
argument_list|,
name|rel
argument_list|)
expr_stmt|;
block|}
block|}
name|CreateDbEntityAction
name|action
init|=
name|actionManager
operator|.
name|getAction
argument_list|(
name|CreateDbEntityAction
operator|.
name|class
argument_list|)
decl_stmt|;
name|action
operator|.
name|createEntity
argument_list|(
name|map
argument_list|,
name|dbEntity
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QUERY
case|:
block|{
name|this
operator|.
name|domain
operator|=
operator|(
name|DataChannelDescriptor
operator|)
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getFrameController
argument_list|()
operator|.
name|getProjectController
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
name|CreateQueryAction
name|action
init|=
name|actionManager
operator|.
name|getAction
argument_list|(
name|CreateQueryAction
operator|.
name|class
argument_list|)
decl_stmt|;
name|action
operator|.
name|createQuery
argument_list|(
name|domain
argument_list|,
name|map
argument_list|,
name|query
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PROCEDURE
case|:
block|{
name|CreateProcedureAction
name|action
init|=
name|actionManager
operator|.
name|getAction
argument_list|(
name|CreateProcedureAction
operator|.
name|class
argument_list|)
decl_stmt|;
name|action
operator|.
name|createProcedure
argument_list|(
name|map
argument_list|,
name|procedure
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MAP_FROM_NODE
case|:
block|{
name|this
operator|.
name|dataNode
operator|.
name|getDataMapNames
argument_list|()
operator|.
name|add
argument_list|(
name|map
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|DataNodeEvent
name|e
init|=
operator|new
name|DataNodeEvent
argument_list|(
name|Application
operator|.
name|getFrame
argument_list|()
argument_list|,
name|this
operator|.
name|dataNode
argument_list|)
decl_stmt|;
name|ProjectController
name|controller
init|=
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getFrameController
argument_list|()
operator|.
name|getProjectController
argument_list|()
decl_stmt|;
name|e
operator|.
name|setDomain
argument_list|(
operator|(
name|DataChannelDescriptor
operator|)
name|controller
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
expr_stmt|;
name|controller
operator|.
name|fireDataNodeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MAP_FROM_DOMAIN
case|:
block|{
name|CreateDataMapAction
name|action
init|=
name|actionManager
operator|.
name|getAction
argument_list|(
name|CreateDataMapAction
operator|.
name|class
argument_list|)
decl_stmt|;
name|action
operator|.
name|createDataMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|NODE
case|:
block|{
name|CreateNodeAction
name|action
init|=
name|actionManager
operator|.
name|getAction
argument_list|(
name|CreateNodeAction
operator|.
name|class
argument_list|)
decl_stmt|;
name|action
operator|.
name|createDataNode
argument_list|(
name|dataNode
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EMBEDDABLE
case|:
block|{
name|CreateEmbeddableAction
name|action
init|=
name|actionManager
operator|.
name|getAction
argument_list|(
name|CreateEmbeddableAction
operator|.
name|class
argument_list|)
decl_stmt|;
name|action
operator|.
name|createEmbeddable
argument_list|(
name|map
argument_list|,
name|embeddable
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
end_class

end_unit

