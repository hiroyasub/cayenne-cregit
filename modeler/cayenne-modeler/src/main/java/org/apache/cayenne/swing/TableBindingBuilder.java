begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_comment
comment|/**  * A builder for a JTable binding.  *   */
end_comment

begin_class
specifier|public
class|class
name|TableBindingBuilder
block|{
specifier|protected
name|BindingBuilder
name|helper
decl_stmt|;
specifier|protected
name|List
name|columns
decl_stmt|;
specifier|public
name|TableBindingBuilder
parameter_list|(
name|BindingFactory
name|factory
parameter_list|,
name|Object
name|context
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|BindingBuilder
argument_list|(
name|factory
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TableBindingBuilder
parameter_list|(
name|BindingBuilder
name|helper
parameter_list|)
block|{
name|this
operator|.
name|helper
operator|=
name|helper
expr_stmt|;
block|}
comment|/**      * Creates a binding using preconfigured parameters.      */
specifier|public
name|ObjectBinding
name|bindToTable
parameter_list|(
name|JTable
name|table
parameter_list|,
name|String
name|listBinding
parameter_list|)
block|{
name|int
name|width
init|=
operator|(
name|columns
operator|!=
literal|null
operator|)
condition|?
name|columns
operator|.
name|size
argument_list|()
else|:
literal|0
decl_stmt|;
name|String
index|[]
name|headers
init|=
operator|new
name|String
index|[
name|width
index|]
decl_stmt|;
name|BindingExpression
index|[]
name|expressions
init|=
operator|new
name|BindingExpression
index|[
name|width
index|]
decl_stmt|;
name|Class
index|[]
name|classes
init|=
operator|new
name|Class
index|[
name|width
index|]
decl_stmt|;
name|boolean
index|[]
name|editableState
init|=
operator|new
name|boolean
index|[
name|width
index|]
decl_stmt|;
name|Object
index|[]
name|sampleLongValues
init|=
operator|new
name|Object
index|[
name|width
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|width
condition|;
name|i
operator|++
control|)
block|{
name|ColumnDescriptor
name|descriptor
init|=
operator|(
name|ColumnDescriptor
operator|)
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|headers
index|[
name|i
index|]
operator|=
name|descriptor
operator|.
name|header
expr_stmt|;
name|expressions
index|[
name|i
index|]
operator|=
name|descriptor
operator|.
name|expression
expr_stmt|;
name|classes
index|[
name|i
index|]
operator|=
name|descriptor
operator|.
name|columnClass
expr_stmt|;
name|editableState
index|[
name|i
index|]
operator|=
name|descriptor
operator|.
name|editable
expr_stmt|;
name|sampleLongValues
index|[
name|i
index|]
operator|=
name|descriptor
operator|.
name|sampleLongValue
expr_stmt|;
block|}
name|ObjectBinding
name|binding
init|=
name|helper
operator|.
name|getFactory
argument_list|()
operator|.
name|bindToTable
argument_list|(
name|table
argument_list|,
name|listBinding
argument_list|,
name|headers
argument_list|,
name|expressions
argument_list|,
name|classes
argument_list|,
name|editableState
argument_list|,
name|sampleLongValues
argument_list|)
decl_stmt|;
return|return
name|helper
operator|.
name|initBinding
argument_list|(
name|binding
argument_list|,
name|helper
operator|.
name|getDelegate
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Adds a column to the table description.      */
specifier|public
name|void
name|addColumn
parameter_list|(
name|String
name|header
parameter_list|,
name|String
name|expression
parameter_list|,
name|Class
name|columnClass
parameter_list|,
name|boolean
name|editable
parameter_list|)
block|{
name|this
operator|.
name|addColumn
argument_list|(
name|header
argument_list|,
name|expression
argument_list|,
name|columnClass
argument_list|,
name|editable
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a column to the table description.      *       * @param sampleLongValue if not null, this value rendered size is used to size the      *            column.      */
specifier|public
name|void
name|addColumn
parameter_list|(
name|String
name|header
parameter_list|,
name|String
name|expression
parameter_list|,
name|Class
name|columnClass
parameter_list|,
name|boolean
name|editable
parameter_list|,
name|Object
name|sampleLongValue
parameter_list|)
block|{
if|if
condition|(
name|columns
operator|==
literal|null
condition|)
block|{
name|columns
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
name|columns
operator|.
name|add
argument_list|(
operator|new
name|ColumnDescriptor
argument_list|(
name|header
argument_list|,
operator|new
name|BindingExpression
argument_list|(
name|expression
argument_list|)
argument_list|,
name|columnClass
argument_list|,
name|editable
argument_list|,
name|sampleLongValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
class|class
name|ColumnDescriptor
block|{
name|String
name|header
decl_stmt|;
name|BindingExpression
name|expression
decl_stmt|;
name|boolean
name|editable
decl_stmt|;
name|Class
name|columnClass
decl_stmt|;
name|Object
name|sampleLongValue
decl_stmt|;
name|ColumnDescriptor
parameter_list|(
name|String
name|header
parameter_list|,
name|BindingExpression
name|expression
parameter_list|,
name|Class
name|columnClass
parameter_list|,
name|boolean
name|editable
parameter_list|,
name|Object
name|sampleLongValue
parameter_list|)
block|{
name|this
operator|.
name|header
operator|=
name|header
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
name|this
operator|.
name|editable
operator|=
name|editable
expr_stmt|;
name|this
operator|.
name|columnClass
operator|=
name|columnClass
expr_stmt|;
name|this
operator|.
name|sampleLongValue
operator|=
name|sampleLongValue
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

