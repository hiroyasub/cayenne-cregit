begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractButton
import|;
end_import

begin_comment
comment|/**  * Binds a checkbox state to an int or boolean property.  *   */
end_comment

begin_class
specifier|public
class|class
name|ItemEventBinding
extends|extends
name|BindingBase
block|{
specifier|protected
name|AbstractButton
name|boundItem
decl_stmt|;
specifier|public
name|ItemEventBinding
parameter_list|(
name|AbstractButton
name|boundItem
parameter_list|,
name|String
name|expression
parameter_list|)
block|{
name|super
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|this
operator|.
name|boundItem
operator|=
name|boundItem
expr_stmt|;
name|boundItem
operator|.
name|addItemListener
argument_list|(
name|e
lambda|->
name|updateModel
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Component
name|getView
parameter_list|()
block|{
return|return
name|boundItem
return|;
block|}
specifier|public
name|void
name|updateView
parameter_list|()
block|{
name|Object
name|value
init|=
name|getValue
argument_list|()
decl_stmt|;
name|boolean
name|b
init|=
literal|false
decl_stmt|;
comment|// convert to boolean
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|b
operator|=
operator|(
name|Boolean
operator|)
name|value
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
name|b
operator|=
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
operator|!=
literal|0
expr_stmt|;
block|}
block|}
name|modelUpdateDisabled
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|boundItem
operator|.
name|setSelected
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|modelUpdateDisabled
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|updateModel
parameter_list|()
block|{
name|setValue
argument_list|(
name|boundItem
operator|.
name|isSelected
argument_list|()
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

