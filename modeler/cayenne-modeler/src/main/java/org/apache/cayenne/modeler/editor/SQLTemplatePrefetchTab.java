begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|QueryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|QueryDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Relationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|SQLTemplateDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|undo
operator|.
name|AddPrefetchUndoableEditForSqlTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|EntityTreeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|EntityTreeModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|ModelerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|MultiColumnBrowser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|UIUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|components
operator|.
name|image
operator|.
name|FilteredIconFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|CayenneMapEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BorderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultCellEditor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Icon
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JSplitPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JToolBar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ListSelectionModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|DefaultTableCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumn
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreeModel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|CardLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyChangeEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyChangeListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|Preferences
import|;
end_import

begin_comment
comment|/**  * Class configured to work with prefetches.  */
end_comment

begin_class
specifier|public
class|class
name|SQLTemplatePrefetchTab
extends|extends
name|JPanel
implements|implements
name|PropertyChangeListener
block|{
comment|// property for split pane divider size
specifier|private
specifier|static
specifier|final
name|String
name|SPLIT_DIVIDER_LOCATION_PROPERTY
init|=
literal|"query.orderings.divider.location"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Dimension
name|BROWSER_CELL_DIM
init|=
operator|new
name|Dimension
argument_list|(
literal|150
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Dimension
name|TABLE_DIM
init|=
operator|new
name|Dimension
argument_list|(
literal|460
argument_list|,
literal|60
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REAL_PANEL
init|=
literal|"real"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PLACEHOLDER_PANEL
init|=
literal|"placeholder"
decl_stmt|;
specifier|protected
name|ProjectController
name|mediator
decl_stmt|;
specifier|protected
name|SQLTemplateDescriptor
name|sqlTemplate
decl_stmt|;
specifier|protected
name|MultiColumnBrowser
name|browser
decl_stmt|;
specifier|protected
name|JTable
name|table
decl_stmt|;
specifier|protected
name|CardLayout
name|cardLayout
decl_stmt|;
specifier|protected
name|JPanel
name|messagePanel
decl_stmt|;
specifier|public
name|SQLTemplatePrefetchTab
parameter_list|(
name|ProjectController
name|mediator
parameter_list|)
block|{
name|this
operator|.
name|mediator
operator|=
name|mediator
expr_stmt|;
name|initView
argument_list|()
expr_stmt|;
name|initController
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|initView
parameter_list|()
block|{
name|messagePanel
operator|=
operator|new
name|JPanel
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|cardLayout
operator|=
operator|new
name|CardLayout
argument_list|()
expr_stmt|;
name|Preferences
name|detail
init|=
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getPreferencesNode
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|int
name|defLocation
init|=
name|Application
operator|.
name|getFrame
argument_list|()
operator|.
name|getHeight
argument_list|()
operator|/
literal|2
decl_stmt|;
name|int
name|location
init|=
name|detail
operator|!=
literal|null
condition|?
name|detail
operator|.
name|getInt
argument_list|(
name|getDividerLocationProperty
argument_list|()
argument_list|,
name|defLocation
argument_list|)
else|:
name|defLocation
decl_stmt|;
comment|//As of CAY-888 #3 main pane is now a JSplitPane. Top component is a bit larger.
name|JSplitPane
name|mainPanel
init|=
operator|new
name|JSplitPane
argument_list|(
name|JSplitPane
operator|.
name|VERTICAL_SPLIT
argument_list|)
decl_stmt|;
name|mainPanel
operator|.
name|addPropertyChangeListener
argument_list|(
name|JSplitPane
operator|.
name|DIVIDER_LOCATION_PROPERTY
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|mainPanel
operator|.
name|setDividerLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|mainPanel
operator|.
name|setTopComponent
argument_list|(
name|createEditorPanel
argument_list|()
argument_list|)
expr_stmt|;
name|mainPanel
operator|.
name|setBottomComponent
argument_list|(
name|createSelectorPanel
argument_list|()
argument_list|)
expr_stmt|;
name|setLayout
argument_list|(
name|cardLayout
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|mainPanel
argument_list|,
name|REAL_PANEL
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|messagePanel
argument_list|,
name|PLACEHOLDER_PANEL
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|initController
parameter_list|()
block|{
comment|// scroll to selected row whenever a selection even occurs
name|table
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|addListSelectionListener
argument_list|(
name|e
lambda|->
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getValueIsAdjusting
argument_list|()
condition|)
block|{
name|UIUtil
operator|.
name|scrollToSelectedRow
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|initFromModel
parameter_list|()
block|{
name|QueryDescriptor
name|query
init|=
name|mediator
operator|.
name|getCurrentQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
operator|||
operator|!
name|QueryDescriptor
operator|.
name|SQL_TEMPLATE
operator|.
name|equals
argument_list|(
name|query
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|processInvalidModel
argument_list|(
literal|"Unknown query."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|query
operator|.
name|getRoot
argument_list|()
operator|instanceof
name|Entity
operator|)
condition|)
block|{
name|processInvalidModel
argument_list|(
literal|"SQLTemplate has no root set."
argument_list|)
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|sqlTemplate
operator|=
operator|(
name|SQLTemplateDescriptor
operator|)
name|query
expr_stmt|;
name|browser
operator|.
name|setModel
argument_list|(
name|createBrowserModel
argument_list|(
operator|(
name|Entity
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|sqlTemplate
operator|.
name|getRoot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setModel
argument_list|(
name|createTableModel
argument_list|()
argument_list|)
expr_stmt|;
name|setUpPrefetchBox
argument_list|(
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// init column sizes
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
literal|0
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
literal|250
argument_list|)
expr_stmt|;
name|cardLayout
operator|.
name|show
argument_list|(
name|this
argument_list|,
name|REAL_PANEL
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|processInvalidModel
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|JLabel
name|messageLabel
init|=
operator|new
name|JLabel
argument_list|(
name|message
argument_list|,
name|JLabel
operator|.
name|CENTER
argument_list|)
decl_stmt|;
name|messagePanel
operator|.
name|removeAll
argument_list|()
expr_stmt|;
name|messagePanel
operator|.
name|add
argument_list|(
name|messageLabel
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|cardLayout
operator|.
name|show
argument_list|(
name|this
argument_list|,
name|PLACEHOLDER_PANEL
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUpPrefetchBox
parameter_list|(
name|TableColumn
name|column
parameter_list|)
block|{
name|JComboBox
argument_list|<
name|String
argument_list|>
name|prefetchBox
init|=
operator|new
name|JComboBox
argument_list|<>
argument_list|()
decl_stmt|;
name|prefetchBox
operator|.
name|addItem
argument_list|(
name|SelectQueryPrefetchTab
operator|.
name|JOINT_PREFETCH_SEMANTICS
argument_list|)
expr_stmt|;
name|prefetchBox
operator|.
name|addItem
argument_list|(
name|SelectQueryPrefetchTab
operator|.
name|DISJOINT_BY_ID_PREFETCH_SEMANTICS
argument_list|)
expr_stmt|;
name|prefetchBox
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getFrameController
argument_list|()
operator|.
name|getEditorView
argument_list|()
operator|.
name|getEventController
argument_list|()
operator|.
name|setDirty
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|column
operator|.
name|setCellEditor
argument_list|(
operator|new
name|DefaultCellEditor
argument_list|(
name|prefetchBox
argument_list|)
argument_list|)
expr_stmt|;
name|DefaultTableCellRenderer
name|renderer
init|=
operator|new
name|DefaultTableCellRenderer
argument_list|()
decl_stmt|;
name|renderer
operator|.
name|setToolTipText
argument_list|(
literal|"Click for combo box"
argument_list|)
expr_stmt|;
name|column
operator|.
name|setCellRenderer
argument_list|(
name|renderer
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|JPanel
name|createEditorPanel
parameter_list|()
block|{
name|table
operator|=
operator|new
name|JTable
argument_list|()
expr_stmt|;
name|table
operator|.
name|setRowHeight
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRowMargin
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|table
operator|.
name|setPreferredScrollableViewportSize
argument_list|(
name|TABLE_DIM
argument_list|)
expr_stmt|;
name|table
operator|.
name|setSelectionMode
argument_list|(
name|ListSelectionModel
operator|.
name|SINGLE_SELECTION
argument_list|)
expr_stmt|;
name|JPanel
name|panel
init|=
operator|new
name|JPanel
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
operator|new
name|JScrollPane
argument_list|(
name|table
argument_list|)
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
return|return
name|panel
return|;
block|}
specifier|protected
name|JPanel
name|createSelectorPanel
parameter_list|()
block|{
name|browser
operator|=
operator|new
name|MultiColumnBrowser
argument_list|()
expr_stmt|;
name|browser
operator|.
name|setPreferredColumnSize
argument_list|(
name|BROWSER_CELL_DIM
argument_list|)
expr_stmt|;
name|browser
operator|.
name|setDefaultRenderer
argument_list|()
expr_stmt|;
name|JPanel
name|panel
init|=
operator|new
name|JPanel
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|createToolbar
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
operator|new
name|JScrollPane
argument_list|(
name|browser
argument_list|,
name|JScrollPane
operator|.
name|VERTICAL_SCROLLBAR_NEVER
argument_list|,
name|JScrollPane
operator|.
name|HORIZONTAL_SCROLLBAR_AS_NEEDED
argument_list|)
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
comment|// setting minimal size, otherwise scrolling looks awful, because of
comment|// VERTICAL_SCROLLBAR_NEVER strategy
name|panel
operator|.
name|setMinimumSize
argument_list|(
name|panel
operator|.
name|getPreferredSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|panel
return|;
block|}
specifier|protected
name|JComponent
name|createToolbar
parameter_list|()
block|{
name|JButton
name|add
init|=
operator|new
name|CayenneAction
operator|.
name|CayenneToolbarButton
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|add
operator|.
name|setText
argument_list|(
literal|"Add Prefetch"
argument_list|)
expr_stmt|;
name|Icon
name|addIcon
init|=
name|ModelerUtil
operator|.
name|buildIcon
argument_list|(
literal|"icon-plus.png"
argument_list|)
decl_stmt|;
name|add
operator|.
name|setIcon
argument_list|(
name|addIcon
argument_list|)
expr_stmt|;
name|add
operator|.
name|setDisabledIcon
argument_list|(
name|FilteredIconFactory
operator|.
name|createDisabledIcon
argument_list|(
name|addIcon
argument_list|)
argument_list|)
expr_stmt|;
name|add
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
name|String
name|prefetch
init|=
name|getSelectedPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefetch
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|addPrefetch
argument_list|(
name|prefetch
argument_list|)
expr_stmt|;
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
operator|new
name|AddPrefetchUndoableEditForSqlTemplate
argument_list|(
name|prefetch
argument_list|,
name|SQLTemplatePrefetchTab
operator|.
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|JButton
name|remove
init|=
operator|new
name|CayenneAction
operator|.
name|CayenneToolbarButton
argument_list|(
literal|null
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|remove
operator|.
name|setText
argument_list|(
literal|"Remove Prefetch"
argument_list|)
expr_stmt|;
name|Icon
name|removeIcon
init|=
name|ModelerUtil
operator|.
name|buildIcon
argument_list|(
literal|"icon-trash.png"
argument_list|)
decl_stmt|;
name|remove
operator|.
name|setIcon
argument_list|(
name|removeIcon
argument_list|)
expr_stmt|;
name|remove
operator|.
name|setDisabledIcon
argument_list|(
name|FilteredIconFactory
operator|.
name|createDisabledIcon
argument_list|(
name|removeIcon
argument_list|)
argument_list|)
expr_stmt|;
name|remove
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
name|int
name|selection
init|=
name|table
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|selection
operator|<
literal|0
condition|)
block|{
return|return;
block|}
name|String
name|prefetch
init|=
operator|(
name|String
operator|)
name|table
operator|.
name|getModel
argument_list|()
operator|.
name|getValueAt
argument_list|(
name|selection
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|removePrefetch
argument_list|(
name|prefetch
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|JToolBar
name|toolBar
init|=
operator|new
name|JToolBar
argument_list|()
decl_stmt|;
name|toolBar
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|()
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|setFloatable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|add
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|remove
argument_list|)
expr_stmt|;
return|return
name|toolBar
return|;
block|}
specifier|protected
name|String
name|getSelectedPath
parameter_list|()
block|{
name|Object
index|[]
name|path
init|=
name|browser
operator|.
name|getSelectionPath
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// first item in the path is Entity, so we must have
comment|// at least two elements to constitute a valid ordering path
if|if
condition|(
name|path
operator|.
name|length
operator|<
literal|2
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// attribute or relationships
name|CayenneMapEntry
name|first
init|=
operator|(
name|CayenneMapEntry
operator|)
name|path
index|[
literal|1
index|]
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|first
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|path
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|CayenneMapEntry
name|pathEntry
init|=
operator|(
name|CayenneMapEntry
operator|)
name|path
index|[
name|i
index|]
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|pathEntry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|TreeModel
name|createBrowserModel
parameter_list|(
name|Entity
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|entity
parameter_list|)
block|{
name|EntityTreeModel
name|treeModel
init|=
operator|new
name|EntityTreeModel
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|treeModel
operator|.
name|setFilter
argument_list|(
operator|new
name|EntityTreeFilter
argument_list|()
block|{
specifier|public
name|boolean
name|attributeMatch
parameter_list|(
name|Object
name|node
parameter_list|,
name|Attribute
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|attr
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|relationshipMatch
parameter_list|(
name|Object
name|node
parameter_list|,
name|Relationship
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|rel
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|treeModel
return|;
block|}
specifier|protected
name|TableModel
name|createTableModel
parameter_list|()
block|{
return|return
operator|new
name|PrefetchModel
argument_list|(
name|sqlTemplate
operator|.
name|getPrefetchesMap
argument_list|()
argument_list|,
name|sqlTemplate
operator|.
name|getRoot
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|addPrefetch
parameter_list|(
name|String
name|prefetch
parameter_list|)
block|{
comment|// check if such prefetch already exists
if|if
condition|(
operator|!
name|sqlTemplate
operator|.
name|getPrefetchesMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|sqlTemplate
operator|.
name|getPrefetchesMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|prefetch
argument_list|)
condition|)
block|{
return|return;
block|}
comment|//default value is joint
name|sqlTemplate
operator|.
name|addPrefetch
argument_list|(
name|prefetch
argument_list|,
name|PrefetchModel
operator|.
name|getPrefetchType
argument_list|(
name|SelectQueryPrefetchTab
operator|.
name|DISJOINT_BY_ID_PREFETCH_SEMANTICS
argument_list|)
argument_list|)
expr_stmt|;
comment|// reset the model, since it is immutable
name|table
operator|.
name|setModel
argument_list|(
name|createTableModel
argument_list|()
argument_list|)
expr_stmt|;
name|setUpPrefetchBox
argument_list|(
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireQueryEvent
argument_list|(
operator|new
name|QueryEvent
argument_list|(
name|this
argument_list|,
name|sqlTemplate
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removePrefetch
parameter_list|(
name|String
name|prefetch
parameter_list|)
block|{
name|sqlTemplate
operator|.
name|removePrefetch
argument_list|(
name|prefetch
argument_list|)
expr_stmt|;
comment|// reset the model, since it is immutable
name|table
operator|.
name|setModel
argument_list|(
name|createTableModel
argument_list|()
argument_list|)
expr_stmt|;
name|setUpPrefetchBox
argument_list|(
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireQueryEvent
argument_list|(
operator|new
name|QueryEvent
argument_list|(
name|this
argument_list|,
name|sqlTemplate
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Updates split pane divider location in properties      */
specifier|public
name|void
name|propertyChange
parameter_list|(
name|PropertyChangeEvent
name|evt
parameter_list|)
block|{
if|if
condition|(
name|JSplitPane
operator|.
name|DIVIDER_LOCATION_PROPERTY
operator|.
name|equals
argument_list|(
name|evt
operator|.
name|getPropertyName
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|value
init|=
operator|(
name|Integer
operator|)
name|evt
operator|.
name|getNewValue
argument_list|()
decl_stmt|;
name|Preferences
name|detail
init|=
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getPreferencesNode
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|detail
operator|.
name|putInt
argument_list|(
name|getDividerLocationProperty
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns name of a property for divider location.      */
specifier|protected
name|String
name|getDividerLocationProperty
parameter_list|()
block|{
return|return
name|SPLIT_DIVIDER_LOCATION_PROPERTY
return|;
block|}
block|}
end_class

end_unit

