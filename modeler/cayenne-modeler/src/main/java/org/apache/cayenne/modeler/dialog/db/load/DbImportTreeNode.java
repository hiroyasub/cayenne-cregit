begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|load
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ExcludeColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ExcludeProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ExcludeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|FilterContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|IncludeColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|IncludeProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|IncludeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|PatternParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ReverseEngineering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|dbimport
operator|.
name|tree
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultMutableTreeNode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|DbImportTreeNode
extends|extends
name|DefaultMutableTreeNode
block|{
specifier|private
name|boolean
name|isLoaded
decl_stmt|;
specifier|public
name|DbImportTreeNode
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DbImportTreeNode
parameter_list|(
name|Object
name|userObject
parameter_list|,
name|boolean
name|allowsChildren
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|userObject
operator|=
name|userObject
expr_stmt|;
name|this
operator|.
name|allowsChildren
operator|=
name|allowsChildren
expr_stmt|;
name|parent
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|boolean
name|isIncludeTable
parameter_list|()
block|{
return|return
operator|(
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|IncludeTable
operator|.
name|class
operator|)
return|;
block|}
specifier|public
name|boolean
name|isExcludeTable
parameter_list|()
block|{
return|return
operator|(
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|ExcludeTable
operator|.
name|class
operator|)
return|;
block|}
specifier|public
name|boolean
name|isIncludeColumn
parameter_list|()
block|{
return|return
operator|(
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|IncludeColumn
operator|.
name|class
operator|)
return|;
block|}
specifier|public
name|boolean
name|isExcludeColumn
parameter_list|()
block|{
return|return
operator|(
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|ExcludeColumn
operator|.
name|class
operator|)
return|;
block|}
specifier|public
name|boolean
name|isExcludeProcedure
parameter_list|()
block|{
return|return
operator|(
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|ExcludeProcedure
operator|.
name|class
operator|)
return|;
block|}
specifier|public
name|boolean
name|isIncludeProcedure
parameter_list|()
block|{
return|return
operator|(
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|IncludeProcedure
operator|.
name|class
operator|)
return|;
block|}
specifier|public
name|boolean
name|isLabel
parameter_list|()
block|{
return|return
operator|(
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
operator|)
return|;
block|}
specifier|public
name|boolean
name|isSchema
parameter_list|()
block|{
return|return
operator|(
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|Schema
operator|.
name|class
operator|)
return|;
block|}
specifier|public
name|boolean
name|isCatalog
parameter_list|()
block|{
return|return
operator|(
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|Catalog
operator|.
name|class
operator|)
return|;
block|}
specifier|public
name|boolean
name|isReverseEngineering
parameter_list|()
block|{
return|return
operator|(
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|ReverseEngineering
operator|.
name|class
operator|)
return|;
block|}
specifier|public
name|DbImportTreeNode
parameter_list|(
name|Object
name|userObject
parameter_list|)
block|{
name|this
argument_list|(
name|userObject
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Compare parents chain
specifier|public
name|boolean
name|parentsIsEqual
parameter_list|(
name|DbImportTreeNode
name|reverseEngineeringNode
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|DbImportTreeNode
argument_list|>
name|reverseEngineeringNodeParents
decl_stmt|;
if|if
condition|(
name|reverseEngineeringNode
operator|==
literal|null
condition|)
block|{
name|reverseEngineeringNodeParents
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|reverseEngineeringNodeParents
operator|=
name|reverseEngineeringNode
operator|.
name|getParents
argument_list|()
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|DbImportTreeNode
argument_list|>
name|dbNodeParents
init|=
name|getParents
argument_list|()
decl_stmt|;
for|for
control|(
name|DbImportTreeNode
name|node
range|:
name|reverseEngineeringNodeParents
control|)
block|{
name|int
name|deleteIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dbNodeParents
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|node
operator|.
name|getSimpleNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|dbNodeParents
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getSimpleNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|deleteIndex
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|deleteIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|dbNodeParents
operator|.
name|remove
argument_list|(
name|deleteIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|// Create parents chain
specifier|public
name|ArrayList
argument_list|<
name|DbImportTreeNode
argument_list|>
name|getParents
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|DbImportTreeNode
argument_list|>
name|parents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|DbImportTreeNode
name|tmpNode
init|=
name|this
decl_stmt|;
while|while
condition|(
name|tmpNode
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|parents
operator|.
name|add
argument_list|(
name|tmpNode
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|tmpNode
operator|=
name|tmpNode
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
name|parents
return|;
block|}
annotation|@
name|Override
specifier|public
name|DbImportTreeNode
name|getParent
parameter_list|()
block|{
return|return
operator|(
name|DbImportTreeNode
operator|)
name|super
operator|.
name|getParent
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getFormattedName
parameter_list|(
name|String
name|className
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
if|if
condition|(
name|nodeName
operator|==
literal|null
condition|)
block|{
return|return
name|className
return|;
block|}
else|else
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s"
argument_list|,
name|nodeName
argument_list|)
return|;
block|}
block|}
specifier|protected
name|String
name|getNodeName
parameter_list|()
block|{
if|if
condition|(
name|userObject
operator|instanceof
name|FilterContainer
condition|)
block|{
return|return
name|getFormattedName
argument_list|(
name|userObject
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
operator|(
operator|(
name|FilterContainer
operator|)
name|userObject
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|userObject
operator|instanceof
name|PatternParam
condition|)
block|{
return|return
name|getFormattedName
argument_list|(
name|userObject
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
operator|(
operator|(
name|PatternParam
operator|)
name|userObject
operator|)
operator|.
name|getPattern
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|userObject
operator|!=
literal|null
condition|)
block|{
return|return
name|userObject
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|""
return|;
block|}
specifier|public
name|String
name|getSimpleNodeName
parameter_list|()
block|{
if|if
condition|(
name|userObject
operator|instanceof
name|ReverseEngineering
condition|)
block|{
return|return
literal|""
return|;
block|}
if|else if
condition|(
name|userObject
operator|instanceof
name|FilterContainer
condition|)
block|{
return|return
operator|(
operator|(
name|FilterContainer
operator|)
name|userObject
operator|)
operator|.
name|getName
argument_list|()
return|;
block|}
if|else if
condition|(
name|userObject
operator|instanceof
name|PatternParam
condition|)
block|{
return|return
operator|(
operator|(
name|PatternParam
operator|)
name|userObject
operator|)
operator|.
name|getPattern
argument_list|()
return|;
block|}
return|return
literal|""
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|userObject
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
if|else if
condition|(
name|userObject
operator|instanceof
name|ReverseEngineering
condition|)
block|{
return|return
literal|"Reverse Engineering Configuration:"
return|;
block|}
else|else
block|{
return|return
name|getNodeName
argument_list|()
return|;
block|}
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|DbImportTreeNode
name|objNode
init|=
operator|(
name|DbImportTreeNode
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|objNode
operator|.
name|getSimpleNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getSimpleNodeName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|objNode
operator|.
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|!=
name|this
operator|.
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isLoaded
parameter_list|()
block|{
return|return
name|isLoaded
return|;
block|}
specifier|public
name|void
name|setLoaded
parameter_list|(
name|boolean
name|loaded
parameter_list|)
block|{
name|isLoaded
operator|=
name|loaded
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|DbImportTreeNode
argument_list|>
name|getChildNodes
parameter_list|()
block|{
name|List
argument_list|<
name|DbImportTreeNode
argument_list|>
name|childNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|list
argument_list|(
name|this
operator|.
name|children
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|childNodes
operator|.
name|add
argument_list|(
operator|(
name|DbImportTreeNode
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|childNodes
return|;
block|}
specifier|public
name|NodeType
name|getNodeType
parameter_list|()
block|{
if|if
condition|(
name|userObject
operator|instanceof
name|Catalog
condition|)
block|{
return|return
name|NodeType
operator|.
name|CATALOG
return|;
block|}
if|else if
condition|(
name|userObject
operator|instanceof
name|Schema
condition|)
block|{
return|return
name|NodeType
operator|.
name|SCHEMA
return|;
block|}
if|else if
condition|(
name|userObject
operator|instanceof
name|IncludeTable
condition|)
block|{
return|return
name|NodeType
operator|.
name|INCLUDE_TABLE
return|;
block|}
if|else if
condition|(
name|userObject
operator|instanceof
name|ExcludeTable
condition|)
block|{
return|return
name|NodeType
operator|.
name|EXCLUDE_TABLE
return|;
block|}
if|else if
condition|(
name|userObject
operator|instanceof
name|IncludeColumn
condition|)
block|{
return|return
name|NodeType
operator|.
name|INCLUDE_COLUMN
return|;
block|}
if|else if
condition|(
name|userObject
operator|instanceof
name|ExcludeColumn
condition|)
block|{
return|return
name|NodeType
operator|.
name|EXCLUDE_COLUMN
return|;
block|}
if|else if
condition|(
name|userObject
operator|instanceof
name|IncludeProcedure
condition|)
block|{
return|return
name|NodeType
operator|.
name|INCLUDE_PROCEDURE
return|;
block|}
if|else if
condition|(
name|userObject
operator|instanceof
name|ExcludeProcedure
condition|)
block|{
return|return
name|NodeType
operator|.
name|EXCLUDE_PROCEDURE
return|;
block|}
return|return
name|NodeType
operator|.
name|UNKNOWN
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|getChildrenObjectsByType
parameter_list|(
name|NodeType
name|type
parameter_list|)
block|{
return|return
name|getChildNodes
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|n
lambda|->
name|type
operator|.
name|equals
argument_list|(
name|n
operator|.
name|getNodeType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|filteredNode
lambda|->
operator|(
name|T
operator|)
name|filteredNode
operator|.
name|getUserObject
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DbImportTreeNode
name|getLastChild
parameter_list|()
block|{
return|return
operator|(
name|DbImportTreeNode
operator|)
name|super
operator|.
name|getLastChild
argument_list|()
return|;
block|}
block|}
end_class

end_unit

