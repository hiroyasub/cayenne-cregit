begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DataMapEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DataMapListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DataNodeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DataNodeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DomainEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DomainListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|ProcedureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|ProcedureListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|ProcedureParameterEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|ProcedureParameterListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|QueryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|QueryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Embeddable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EmbeddableAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ProcedureParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|AttributeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DbAttributeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DbEntityListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|DbRelationshipListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EmbeddableAttributeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EmbeddableAttributeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EmbeddableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EmbeddableListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EntityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|MapEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|ObjAttributeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|ObjEntityListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|ObjRelationshipListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|RelationshipEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|NavigateBackwardAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|NavigateForwardAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|RevertAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|SaveAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|SaveAsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|CallbackType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|ObjCallbackMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|DataMapDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|DataNodeDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|ProjectStatePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CircularArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|Comparators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|ConfigurationNodeParentGetter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|QueryDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|IDUtil
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|EventListenerList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EventObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|Preferences
import|;
end_import

begin_comment
comment|/**  * A controller that works with the project tree, tracking selection and  * dispatching project events.  */
end_comment

begin_class
specifier|public
class|class
name|ProjectController
extends|extends
name|CayenneController
block|{
comment|/*      * A snapshot of the current state of the project controller. This was added      * so that we could support history of recent objects.      */
specifier|public
class|class
name|ControllerState
block|{
specifier|private
name|boolean
name|isRefiring
decl_stmt|;
specifier|private
name|DisplayEvent
name|event
decl_stmt|;
specifier|private
name|DataChannelDescriptor
name|domain
decl_stmt|;
specifier|private
name|DataNodeDescriptor
name|node
decl_stmt|;
specifier|private
name|DataMap
name|map
decl_stmt|;
specifier|private
name|ObjEntity
name|objEntity
decl_stmt|;
specifier|private
name|DbEntity
name|dbEntity
decl_stmt|;
specifier|private
name|Embeddable
name|embeddable
decl_stmt|;
specifier|private
name|EmbeddableAttribute
index|[]
name|embAttrs
decl_stmt|;
specifier|private
name|ObjAttribute
index|[]
name|objAttrs
decl_stmt|;
specifier|private
name|DbAttribute
index|[]
name|dbAttrs
decl_stmt|;
specifier|private
name|ObjRelationship
index|[]
name|objRels
decl_stmt|;
specifier|private
name|DbRelationship
index|[]
name|dbRels
decl_stmt|;
specifier|private
name|Procedure
name|procedure
decl_stmt|;
specifier|private
name|ProcedureParameter
index|[]
name|procedureParameters
decl_stmt|;
specifier|private
name|QueryDescriptor
name|query
decl_stmt|;
comment|/**          * Paths of multiple selection          */
specifier|private
name|Object
index|[]
name|paths
decl_stmt|;
comment|/**          * Parent path of multiple selection          */
specifier|private
name|Object
name|parentPath
decl_stmt|;
comment|/**          * currently selecte entity listener class          */
specifier|private
name|String
name|listenerClass
decl_stmt|;
comment|/**          * currently selected callback type          */
specifier|private
name|CallbackType
name|callbackType
decl_stmt|;
comment|/**          * currently selected callback methods          */
specifier|private
name|ObjCallbackMethod
index|[]
name|callbackMethods
decl_stmt|;
specifier|public
name|ControllerState
parameter_list|()
block|{
comment|// life is much easier if these guys are never null
name|embAttrs
operator|=
operator|new
name|EmbeddableAttribute
index|[
literal|0
index|]
expr_stmt|;
name|dbAttrs
operator|=
operator|new
name|DbAttribute
index|[
literal|0
index|]
expr_stmt|;
name|dbRels
operator|=
operator|new
name|DbRelationship
index|[
literal|0
index|]
expr_stmt|;
name|procedureParameters
operator|=
operator|new
name|ProcedureParameter
index|[
literal|0
index|]
expr_stmt|;
name|objAttrs
operator|=
operator|new
name|ObjAttribute
index|[
literal|0
index|]
expr_stmt|;
name|objRels
operator|=
operator|new
name|ObjRelationship
index|[
literal|0
index|]
expr_stmt|;
name|callbackMethods
operator|=
operator|new
name|ObjCallbackMethod
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|/*          * Used to determine if the val ControllerState is equivalent, which          * means if the event is refired again, will it end up in the same place          * on the screen. This get's a bit messy at the end, because of          * inheritance heirarchy issues.          */
specifier|public
name|boolean
name|isEquivalent
parameter_list|(
name|ControllerState
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|event
operator|instanceof
name|EntityDisplayEvent
operator|&&
name|val
operator|.
name|event
operator|instanceof
name|EntityDisplayEvent
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|EntityDisplayEvent
operator|)
name|val
operator|.
name|event
operator|)
operator|.
name|getEntity
argument_list|()
operator|instanceof
name|ObjEntity
condition|)
block|{
return|return
name|objEntity
operator|==
name|val
operator|.
name|objEntity
return|;
block|}
else|else
block|{
return|return
name|dbEntity
operator|==
name|val
operator|.
name|dbEntity
return|;
block|}
block|}
if|else if
condition|(
name|event
operator|instanceof
name|ProcedureDisplayEvent
operator|&&
name|val
operator|.
name|event
operator|instanceof
name|ProcedureDisplayEvent
condition|)
block|{
return|return
name|procedure
operator|==
name|val
operator|.
name|procedure
return|;
block|}
if|else if
condition|(
name|event
operator|instanceof
name|QueryDisplayEvent
operator|&&
name|val
operator|.
name|event
operator|instanceof
name|QueryDisplayEvent
condition|)
block|{
return|return
name|query
operator|==
name|val
operator|.
name|query
return|;
block|}
if|else if
condition|(
name|event
operator|instanceof
name|EmbeddableDisplayEvent
operator|&&
name|val
operator|.
name|event
operator|instanceof
name|EmbeddableDisplayEvent
condition|)
block|{
return|return
name|embeddable
operator|==
name|val
operator|.
name|embeddable
return|;
block|}
if|else if
condition|(
name|event
operator|.
name|getClass
argument_list|()
operator|==
name|DataMapDisplayEvent
operator|.
name|class
operator|&&
name|event
operator|.
name|getClass
argument_list|()
operator|==
name|val
operator|.
name|event
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
name|map
operator|==
name|val
operator|.
name|map
return|;
block|}
if|else if
condition|(
name|event
operator|.
name|getClass
argument_list|()
operator|==
name|DataNodeDisplayEvent
operator|.
name|class
operator|&&
name|event
operator|.
name|getClass
argument_list|()
operator|==
name|val
operator|.
name|event
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
name|node
operator|==
name|val
operator|.
name|node
return|;
block|}
if|else if
condition|(
name|event
operator|.
name|getClass
argument_list|()
operator|==
name|DomainDisplayEvent
operator|.
name|class
operator|&&
name|event
operator|.
name|getClass
argument_list|()
operator|==
name|val
operator|.
name|event
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
name|domain
operator|==
name|val
operator|.
name|domain
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|protected
name|EventListenerList
name|listenerList
decl_stmt|;
specifier|protected
name|boolean
name|dirty
decl_stmt|;
specifier|protected
name|int
name|entityTabSelection
decl_stmt|;
specifier|protected
name|Project
name|project
decl_stmt|;
specifier|protected
name|Preferences
name|projectControllerPreferences
decl_stmt|;
specifier|protected
name|ControllerState
name|currentState
decl_stmt|;
specifier|protected
name|CircularArray
name|controllerStateHistory
decl_stmt|;
specifier|protected
name|int
name|maxHistorySize
init|=
literal|20
decl_stmt|;
specifier|private
name|EntityResolver
name|entityResolver
decl_stmt|;
comment|/**      * Project files watcher. When project file is changed, user will be asked      * to confirm loading the changes      */
specifier|private
name|ProjectFileChangeTracker
name|fileChangeTracker
decl_stmt|;
specifier|public
name|ProjectController
parameter_list|(
name|CayenneModelerController
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|listenerList
operator|=
operator|new
name|EventListenerList
argument_list|()
expr_stmt|;
name|controllerStateHistory
operator|=
operator|new
name|CircularArray
argument_list|(
name|maxHistorySize
argument_list|)
expr_stmt|;
name|currentState
operator|=
operator|new
name|ControllerState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Component
name|getView
parameter_list|()
block|{
return|return
name|parent
operator|.
name|getView
argument_list|()
return|;
block|}
specifier|public
name|Project
name|getProject
parameter_list|()
block|{
return|return
name|project
return|;
block|}
specifier|public
name|EntityResolver
name|getEntityResolver
parameter_list|()
block|{
return|return
name|entityResolver
return|;
block|}
specifier|public
name|void
name|setProject
parameter_list|(
name|Project
name|currentProject
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|project
operator|!=
name|currentProject
condition|)
block|{
name|this
operator|.
name|project
operator|=
name|currentProject
expr_stmt|;
name|this
operator|.
name|projectControllerPreferences
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|project
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|entityResolver
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|fileChangeTracker
operator|!=
literal|null
condition|)
block|{
name|fileChangeTracker
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|fileChangeTracker
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|fileChangeTracker
operator|==
literal|null
condition|)
block|{
name|fileChangeTracker
operator|=
operator|new
name|ProjectFileChangeTracker
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|fileChangeTracker
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fileChangeTracker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|fileChangeTracker
operator|.
name|reconfigure
argument_list|()
expr_stmt|;
name|entityResolver
operator|=
operator|new
name|EntityResolver
argument_list|(
operator|(
operator|(
name|DataChannelDescriptor
operator|)
name|currentProject
operator|.
name|getRootNode
argument_list|()
operator|)
operator|.
name|getDataMaps
argument_list|()
argument_list|)
expr_stmt|;
name|updateEntityResolver
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|updateEntityResolver
parameter_list|()
block|{
name|Collection
argument_list|<
name|DataMap
argument_list|>
name|dataMaps
init|=
operator|(
operator|(
name|DataChannelDescriptor
operator|)
name|project
operator|.
name|getRootNode
argument_list|()
operator|)
operator|.
name|getDataMaps
argument_list|()
decl_stmt|;
name|entityResolver
operator|.
name|setDataMaps
argument_list|(
name|dataMaps
argument_list|)
expr_stmt|;
for|for
control|(
name|DataMap
name|dataMap
range|:
name|dataMaps
control|)
block|{
name|dataMap
operator|.
name|setNamespace
argument_list|(
name|entityResolver
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Preferences
name|getPreferenceForProject
parameter_list|()
block|{
if|if
condition|(
name|getProject
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"No Project selected"
argument_list|)
throw|;
block|}
if|if
condition|(
name|projectControllerPreferences
operator|==
literal|null
condition|)
block|{
name|updateProjectControllerPreferences
argument_list|()
expr_stmt|;
block|}
return|return
name|projectControllerPreferences
return|;
block|}
comment|/**      * Returns top preferences for the current project, throwing an exception if      * no project is selected.      */
specifier|public
name|Preferences
name|getPreferenceForDataDomain
parameter_list|()
block|{
name|DataChannelDescriptor
name|dataDomain
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataDomain
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"No DataDomain selected"
argument_list|)
throw|;
block|}
return|return
name|getPreferenceForProject
argument_list|()
operator|.
name|node
argument_list|(
name|dataDomain
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns preferences object for the current DataMap. If no preferences      * exist for the current DataMap, a new Preferences object is created. If no      * DataMap is currently selected, an exception is thrown. An optional      * nameSuffix allows to address more than one defaults instance for a single      * DataMap.      */
specifier|public
name|DataMapDefaults
name|getDataMapPreferences
parameter_list|(
name|String
name|nameSuffix
parameter_list|)
block|{
name|DataMap
name|map
init|=
name|getCurrentDataMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"No DataMap selected"
argument_list|)
throw|;
block|}
name|Preferences
name|pref
decl_stmt|;
if|if
condition|(
name|nameSuffix
operator|==
literal|null
operator|||
name|nameSuffix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|pref
operator|=
name|getPreferenceForDataDomain
argument_list|()
operator|.
name|node
argument_list|(
literal|"DataMap"
argument_list|)
operator|.
name|node
argument_list|(
name|map
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pref
operator|=
name|getPreferenceForDataDomain
argument_list|()
operator|.
name|node
argument_list|(
literal|"DataMap"
argument_list|)
operator|.
name|node
argument_list|(
name|map
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|node
argument_list|(
name|nameSuffix
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|DataMapDefaults
operator|)
name|application
operator|.
name|getCayenneProjectPreferences
argument_list|()
operator|.
name|getProjectDetailObject
argument_list|(
name|DataMapDefaults
operator|.
name|class
argument_list|,
name|pref
argument_list|)
return|;
block|}
specifier|public
name|DataMapDefaults
name|getDataMapPreferences
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
name|Preferences
name|pref
decl_stmt|;
name|pref
operator|=
name|getPreferenceForDataDomain
argument_list|()
operator|.
name|node
argument_list|(
literal|"DataMap"
argument_list|)
operator|.
name|node
argument_list|(
name|dataMap
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|DataMapDefaults
operator|)
name|application
operator|.
name|getCayenneProjectPreferences
argument_list|()
operator|.
name|getProjectDetailObject
argument_list|(
name|DataMapDefaults
operator|.
name|class
argument_list|,
name|pref
argument_list|)
return|;
block|}
specifier|public
name|DataMapDefaults
name|getDataMapPreferences
parameter_list|(
name|String
name|nameSuffix
parameter_list|,
name|DataMap
name|map
parameter_list|)
block|{
name|Preferences
name|pref
decl_stmt|;
if|if
condition|(
name|nameSuffix
operator|==
literal|null
operator|||
name|nameSuffix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|pref
operator|=
name|getPreferenceForDataDomain
argument_list|()
operator|.
name|node
argument_list|(
literal|"DataMap"
argument_list|)
operator|.
name|node
argument_list|(
name|map
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pref
operator|=
name|getPreferenceForDataDomain
argument_list|()
operator|.
name|node
argument_list|(
literal|"DataMap"
argument_list|)
operator|.
name|node
argument_list|(
name|map
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|node
argument_list|(
name|nameSuffix
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|DataMapDefaults
operator|)
name|application
operator|.
name|getCayenneProjectPreferences
argument_list|()
operator|.
name|getProjectDetailObject
argument_list|(
name|DataMapDefaults
operator|.
name|class
argument_list|,
name|pref
argument_list|)
return|;
block|}
comment|/**      * Returns preferences object for the current DataMap, throwing an exception      * if no DataMap is selected.      */
specifier|public
name|DataNodeDefaults
name|getDataNodePreferences
parameter_list|()
block|{
name|DataNodeDescriptor
name|node
init|=
name|getCurrentDataNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"No DataNode selected"
argument_list|)
throw|;
block|}
return|return
operator|(
name|DataNodeDefaults
operator|)
name|application
operator|.
name|getCayenneProjectPreferences
argument_list|()
operator|.
name|getProjectDetailObject
argument_list|(
name|DataNodeDefaults
operator|.
name|class
argument_list|,
name|getPreferenceForDataDomain
argument_list|()
operator|.
name|node
argument_list|(
literal|"DataNode"
argument_list|)
operator|.
name|node
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|ProjectStatePreferences
name|getProjectStatePreferences
parameter_list|()
block|{
return|return
operator|(
name|ProjectStatePreferences
operator|)
name|application
operator|.
name|getCayenneProjectPreferences
argument_list|()
operator|.
name|getProjectDetailObject
argument_list|(
name|ProjectStatePreferences
operator|.
name|class
argument_list|,
name|getPreferenceForDataDomain
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|projectOpened
parameter_list|()
block|{
name|CayenneModelerFrame
name|frame
init|=
operator|(
name|CayenneModelerFrame
operator|)
name|getView
argument_list|()
decl_stmt|;
name|addDataNodeDisplayListener
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|addDataMapDisplayListener
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|addObjEntityDisplayListener
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|addDbEntityDisplayListener
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|addQueryDisplayListener
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|addProcedureDisplayListener
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|addMultipleObjectsDisplayListener
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|addEmbeddableDisplayListener
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|clearState
argument_list|()
expr_stmt|;
name|setDirty
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setEntityTabSelection
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|listenerList
operator|=
operator|new
name|EventListenerList
argument_list|()
expr_stmt|;
name|controllerStateHistory
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/*      * Allow the user to change the default history size. TODO When a user      * changes their preferences it should call this method. I don't know how      * the preferences work, so I will leave this to someone else to do. Garry      */
specifier|public
name|void
name|setHistorySize
parameter_list|(
name|int
name|newSize
parameter_list|)
block|{
name|controllerStateHistory
operator|.
name|resize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDirty
parameter_list|()
block|{
return|return
name|dirty
return|;
block|}
comment|/** Resets all current models to null. */
specifier|private
name|void
name|clearState
parameter_list|()
block|{
comment|// don't clear if we are refiring events for history navigation
if|if
condition|(
name|currentState
operator|.
name|isRefiring
condition|)
return|return;
name|currentState
operator|=
operator|new
name|ControllerState
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|saveState
parameter_list|(
name|DisplayEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|controllerStateHistory
operator|.
name|contains
argument_list|(
name|currentState
argument_list|)
condition|)
block|{
name|currentState
operator|.
name|event
operator|=
name|e
expr_stmt|;
name|controllerStateHistory
operator|.
name|add
argument_list|(
name|currentState
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removeFromHistory
parameter_list|(
name|EventObject
name|e
parameter_list|)
block|{
name|int
name|count
init|=
name|controllerStateHistory
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|removeList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|ControllerState
name|cs
init|=
operator|(
name|ControllerState
operator|)
name|controllerStateHistory
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|EventObject
name|csEvent
init|=
name|cs
operator|.
name|event
decl_stmt|;
if|if
condition|(
name|csEvent
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|e
operator|instanceof
name|EntityEvent
operator|&&
name|csEvent
operator|instanceof
name|EntityDisplayEvent
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|EntityEvent
operator|)
name|e
operator|)
operator|.
name|getEntity
argument_list|()
operator|==
operator|(
operator|(
name|EntityDisplayEvent
operator|)
name|csEvent
operator|)
operator|.
name|getEntity
argument_list|()
condition|)
block|{
name|removeList
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|e
operator|instanceof
name|EmbeddableEvent
operator|&&
name|csEvent
operator|instanceof
name|EmbeddableDisplayEvent
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|EmbeddableEvent
operator|)
name|e
operator|)
operator|.
name|getEmbeddable
argument_list|()
operator|==
operator|(
operator|(
name|EmbeddableDisplayEvent
operator|)
name|csEvent
operator|)
operator|.
name|getEmbeddable
argument_list|()
condition|)
block|{
name|removeList
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|e
operator|instanceof
name|ProcedureEvent
operator|&&
name|csEvent
operator|instanceof
name|ProcedureDisplayEvent
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|ProcedureEvent
operator|)
name|e
operator|)
operator|.
name|getProcedure
argument_list|()
operator|==
operator|(
operator|(
name|ProcedureDisplayEvent
operator|)
name|csEvent
operator|)
operator|.
name|getProcedure
argument_list|()
condition|)
block|{
name|removeList
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|e
operator|instanceof
name|QueryEvent
operator|&&
name|csEvent
operator|instanceof
name|QueryDisplayEvent
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|QueryEvent
operator|)
name|e
operator|)
operator|.
name|getQuery
argument_list|()
operator|==
operator|(
operator|(
name|QueryDisplayEvent
operator|)
name|csEvent
operator|)
operator|.
name|getQuery
argument_list|()
condition|)
block|{
name|removeList
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|e
operator|instanceof
name|DataMapEvent
operator|&&
name|csEvent
operator|instanceof
name|DataMapDisplayEvent
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|DataMapEvent
operator|)
name|e
operator|)
operator|.
name|getDataMap
argument_list|()
operator|==
operator|(
operator|(
name|DataMapDisplayEvent
operator|)
name|csEvent
operator|)
operator|.
name|getDataMap
argument_list|()
condition|)
block|{
name|removeList
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|e
operator|instanceof
name|DataNodeEvent
operator|&&
name|csEvent
operator|instanceof
name|DataNodeDisplayEvent
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|DataNodeEvent
operator|)
name|e
operator|)
operator|.
name|getDataNode
argument_list|()
operator|==
operator|(
operator|(
name|DataNodeDisplayEvent
operator|)
name|csEvent
operator|)
operator|.
name|getDataNode
argument_list|()
condition|)
block|{
name|removeList
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|e
operator|instanceof
name|DomainEvent
operator|&&
name|csEvent
operator|instanceof
name|DomainDisplayEvent
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|DomainEvent
operator|)
name|e
operator|)
operator|.
name|getDomain
argument_list|()
operator|==
operator|(
operator|(
name|DomainDisplayEvent
operator|)
name|csEvent
operator|)
operator|.
name|getDomain
argument_list|()
condition|)
block|{
name|removeList
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Object
name|o
range|:
name|removeList
control|)
block|{
name|controllerStateHistory
operator|.
name|remove
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|DataChannelDescriptor
name|getCurrentDataChanel
parameter_list|()
block|{
return|return
name|currentState
operator|.
name|domain
return|;
block|}
specifier|public
name|DataNodeDescriptor
name|getCurrentDataNode
parameter_list|()
block|{
return|return
name|currentState
operator|.
name|node
return|;
block|}
specifier|public
name|DataMap
name|getCurrentDataMap
parameter_list|()
block|{
return|return
name|currentState
operator|.
name|map
return|;
block|}
specifier|public
name|ObjEntity
name|getCurrentObjEntity
parameter_list|()
block|{
return|return
name|currentState
operator|.
name|objEntity
return|;
block|}
specifier|public
name|Embeddable
name|getCurrentEmbeddable
parameter_list|()
block|{
return|return
name|currentState
operator|.
name|embeddable
return|;
block|}
specifier|public
name|DbEntity
name|getCurrentDbEntity
parameter_list|()
block|{
return|return
name|currentState
operator|.
name|dbEntity
return|;
block|}
comment|/**      * @return Array of selected ObjAttributes      */
specifier|public
name|ObjAttribute
index|[]
name|getCurrentObjAttributes
parameter_list|()
block|{
return|return
name|currentState
operator|.
name|objAttrs
return|;
block|}
comment|/**      * @return Array of selected DbAttributes      */
specifier|public
name|DbAttribute
index|[]
name|getCurrentDbAttributes
parameter_list|()
block|{
return|return
name|currentState
operator|.
name|dbAttrs
return|;
block|}
comment|/**      * @return Array of selected EmbeddableAttribute      */
specifier|public
name|EmbeddableAttribute
index|[]
name|getCurrentEmbAttributes
parameter_list|()
block|{
return|return
name|currentState
operator|.
name|embAttrs
return|;
block|}
comment|/**      * @return Array of selected ObjRelationships      */
specifier|public
name|ObjRelationship
index|[]
name|getCurrentObjRelationships
parameter_list|()
block|{
return|return
name|currentState
operator|.
name|objRels
return|;
block|}
comment|/**      * @return Array of selected DbRelationships      */
specifier|public
name|DbRelationship
index|[]
name|getCurrentDbRelationships
parameter_list|()
block|{
return|return
name|currentState
operator|.
name|dbRels
return|;
block|}
specifier|public
name|QueryDescriptor
name|getCurrentQuery
parameter_list|()
block|{
return|return
name|currentState
operator|.
name|query
return|;
block|}
specifier|public
name|Procedure
name|getCurrentProcedure
parameter_list|()
block|{
return|return
name|currentState
operator|.
name|procedure
return|;
block|}
specifier|public
name|ProcedureParameter
index|[]
name|getCurrentProcedureParameters
parameter_list|()
block|{
return|return
name|currentState
operator|.
name|procedureParameters
return|;
block|}
specifier|public
name|Object
index|[]
name|getCurrentPaths
parameter_list|()
block|{
return|return
name|currentState
operator|.
name|paths
return|;
block|}
specifier|public
name|Object
name|getCurrentParentPath
parameter_list|()
block|{
return|return
name|currentState
operator|.
name|parentPath
return|;
block|}
specifier|public
name|DisplayEvent
name|getLastDisplayEvent
parameter_list|()
block|{
return|return
name|currentState
operator|.
name|event
return|;
block|}
specifier|public
name|void
name|addDomainDisplayListener
parameter_list|(
name|DomainDisplayListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|DomainDisplayListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDomainListener
parameter_list|(
name|DomainListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|DomainListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeDomainListener
parameter_list|(
name|DomainListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|remove
argument_list|(
name|DomainListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDataNodeDisplayListener
parameter_list|(
name|DataNodeDisplayListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|DataNodeDisplayListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDataNodeListener
parameter_list|(
name|DataNodeListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|DataNodeListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDataMapDisplayListener
parameter_list|(
name|DataMapDisplayListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|DataMapDisplayListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDataMapListener
parameter_list|(
name|DataMapListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|DataMapListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeDataMapListener
parameter_list|(
name|DataMapListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|remove
argument_list|(
name|DataMapListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDbEntityListener
parameter_list|(
name|DbEntityListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|DbEntityListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeDbEntityListener
parameter_list|(
name|DbEntityListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|remove
argument_list|(
name|DbEntityListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addProjectOnSaveListener
parameter_list|(
name|ProjectOnSaveListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|ProjectOnSaveListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeProjectOnSaveListener
parameter_list|(
name|ProjectOnSaveListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|remove
argument_list|(
name|ProjectOnSaveListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addObjEntityListener
parameter_list|(
name|ObjEntityListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|ObjEntityListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeObjEntityListener
parameter_list|(
name|ObjEntityListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|remove
argument_list|(
name|ObjEntityListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDbEntityDisplayListener
parameter_list|(
name|DbEntityDisplayListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|DbEntityDisplayListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addObjEntityDisplayListener
parameter_list|(
name|ObjEntityDisplayListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|ObjEntityDisplayListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addEmbeddableDisplayListener
parameter_list|(
name|EmbeddableDisplayListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|EmbeddableDisplayListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addEmbeddableAttributeDisplayListener
parameter_list|(
name|EmbeddableAttributeDisplayListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|EmbeddableAttributeDisplayListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDbAttributeListener
parameter_list|(
name|DbAttributeListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|DbAttributeListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeDbAttributeListener
parameter_list|(
name|DbAttributeListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|remove
argument_list|(
name|DbAttributeListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDbAttributeDisplayListener
parameter_list|(
name|DbAttributeDisplayListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|DbAttributeDisplayListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addObjAttributeListener
parameter_list|(
name|ObjAttributeListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|ObjAttributeListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeObjAttributeListener
parameter_list|(
name|ObjAttributeListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|remove
argument_list|(
name|ObjAttributeListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addObjAttributeDisplayListener
parameter_list|(
name|ObjAttributeDisplayListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|ObjAttributeDisplayListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDbRelationshipListener
parameter_list|(
name|DbRelationshipListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|DbRelationshipListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeDbRelationshipListener
parameter_list|(
name|DbRelationshipListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|DbRelationshipListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDbRelationshipDisplayListener
parameter_list|(
name|DbRelationshipDisplayListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|DbRelationshipDisplayListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addObjRelationshipListener
parameter_list|(
name|ObjRelationshipListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|ObjRelationshipListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeObjRelationshipListener
parameter_list|(
name|ObjRelationshipListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|remove
argument_list|(
name|ObjRelationshipListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addObjRelationshipDisplayListener
parameter_list|(
name|ObjRelationshipDisplayListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|ObjRelationshipDisplayListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addQueryDisplayListener
parameter_list|(
name|QueryDisplayListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|QueryDisplayListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addQueryListener
parameter_list|(
name|QueryListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|QueryListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addProcedureDisplayListener
parameter_list|(
name|ProcedureDisplayListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|ProcedureDisplayListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addProcedureListener
parameter_list|(
name|ProcedureListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|ProcedureListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addProcedureParameterListener
parameter_list|(
name|ProcedureParameterListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|ProcedureParameterListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addProcedureParameterDisplayListener
parameter_list|(
name|ProcedureParameterDisplayListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|ProcedureParameterDisplayListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addMultipleObjectsDisplayListener
parameter_list|(
name|MultipleObjectsDisplayListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|MultipleObjectsDisplayListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fireDomainDisplayEvent
parameter_list|(
name|DomainDisplayEvent
name|e
parameter_list|)
block|{
name|boolean
name|changed
init|=
name|e
operator|.
name|getDomain
argument_list|()
operator|!=
name|currentState
operator|.
name|domain
decl_stmt|;
if|if
condition|(
operator|!
name|changed
condition|)
block|{
name|changed
operator|=
name|currentState
operator|.
name|node
operator|!=
literal|null
operator|||
name|currentState
operator|.
name|map
operator|!=
literal|null
operator|||
name|currentState
operator|.
name|dbEntity
operator|!=
literal|null
operator|||
name|currentState
operator|.
name|objEntity
operator|!=
literal|null
operator|||
name|currentState
operator|.
name|procedure
operator|!=
literal|null
operator|||
name|currentState
operator|.
name|query
operator|!=
literal|null
operator|||
name|currentState
operator|.
name|embeddable
operator|!=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
name|e
operator|.
name|setDomainChanged
argument_list|(
name|changed
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
name|clearState
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|domain
operator|=
name|e
operator|.
name|getDomain
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|saveState
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventListener
name|listener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|DomainDisplayListener
operator|.
name|class
argument_list|)
control|)
block|{
name|DomainDisplayListener
name|temp
init|=
operator|(
name|DomainDisplayListener
operator|)
name|listener
decl_stmt|;
name|temp
operator|.
name|currentDomainChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// call different methods depending on whether domain was opened or
comment|// closed
if|if
condition|(
name|e
operator|.
name|getDomain
argument_list|()
operator|==
literal|null
condition|)
block|{
name|getApplication
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|projectOpened
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|getApplication
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|domainSelected
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Informs all listeners of the DomainEvent. Does not send the event to its      * originator.      */
specifier|public
name|void
name|fireDomainEvent
parameter_list|(
name|DomainEvent
name|e
parameter_list|)
block|{
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getId
argument_list|()
operator|==
name|MapEvent
operator|.
name|REMOVE
condition|)
block|{
name|removeFromHistory
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventListener
name|listener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|DomainListener
operator|.
name|class
argument_list|)
control|)
block|{
name|DomainListener
name|temp
init|=
operator|(
name|DomainListener
operator|)
name|listener
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|MapEvent
operator|.
name|CHANGE
case|:
name|temp
operator|.
name|domainChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid DomainEvent type: "
operator|+
name|e
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|fireDataNodeDisplayEvent
parameter_list|(
name|DataNodeDisplayEvent
name|e
parameter_list|)
block|{
name|boolean
name|changed
init|=
name|e
operator|.
name|getDataNode
argument_list|()
operator|!=
name|currentState
operator|.
name|node
decl_stmt|;
if|if
condition|(
operator|!
name|changed
condition|)
block|{
name|changed
operator|=
name|currentState
operator|.
name|map
operator|!=
literal|null
operator|||
name|currentState
operator|.
name|dbEntity
operator|!=
literal|null
operator|||
name|currentState
operator|.
name|objEntity
operator|!=
literal|null
operator|||
name|currentState
operator|.
name|procedure
operator|!=
literal|null
operator|||
name|currentState
operator|.
name|query
operator|!=
literal|null
operator|||
name|currentState
operator|.
name|embeddable
operator|!=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
name|e
operator|.
name|setDataNodeChanged
argument_list|(
name|changed
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
name|clearState
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|domain
operator|=
name|e
operator|.
name|getDomain
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|node
operator|=
name|e
operator|.
name|getDataNode
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|saveState
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|EventListener
index|[]
name|list
init|=
name|listenerList
operator|.
name|getListeners
argument_list|(
name|DataNodeDisplayListener
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|EventListener
name|listener
range|:
name|list
control|)
block|{
operator|(
operator|(
name|DataNodeDisplayListener
operator|)
name|listener
operator|)
operator|.
name|currentDataNodeChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Informs all listeners of the DataNodeEvent. Does not send the event to      * its originator.      */
specifier|public
name|void
name|fireDataNodeEvent
parameter_list|(
name|DataNodeEvent
name|e
parameter_list|)
block|{
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getId
argument_list|()
operator|==
name|MapEvent
operator|.
name|REMOVE
condition|)
block|{
name|removeFromHistory
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventListener
name|listener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|DataNodeListener
operator|.
name|class
argument_list|)
control|)
block|{
name|DataNodeListener
name|temp
init|=
operator|(
name|DataNodeListener
operator|)
name|listener
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|MapEvent
operator|.
name|ADD
case|:
name|temp
operator|.
name|dataNodeAdded
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|CHANGE
case|:
name|temp
operator|.
name|dataNodeChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|REMOVE
case|:
name|temp
operator|.
name|dataNodeRemoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid DataNodeEvent type: "
operator|+
name|e
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|fireDataMapDisplayEvent
parameter_list|(
name|DataMapDisplayEvent
name|e
parameter_list|)
block|{
name|boolean
name|changed
init|=
name|e
operator|.
name|getDataMap
argument_list|()
operator|!=
name|currentState
operator|.
name|map
decl_stmt|;
if|if
condition|(
operator|!
name|changed
condition|)
block|{
name|changed
operator|=
name|currentState
operator|.
name|dbEntity
operator|!=
literal|null
operator|||
name|currentState
operator|.
name|objEntity
operator|!=
literal|null
operator|||
name|currentState
operator|.
name|procedure
operator|!=
literal|null
operator|||
name|currentState
operator|.
name|query
operator|!=
literal|null
operator|||
name|currentState
operator|.
name|embeddable
operator|!=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
name|e
operator|.
name|setDataMapChanged
argument_list|(
name|changed
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
name|clearState
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|domain
operator|=
name|e
operator|.
name|getDomain
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|node
operator|=
name|e
operator|.
name|getDataNode
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|map
operator|=
name|e
operator|.
name|getDataMap
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|saveState
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|EventListener
index|[]
name|list
init|=
name|listenerList
operator|.
name|getListeners
argument_list|(
name|DataMapDisplayListener
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|EventListener
name|listener
range|:
name|list
control|)
block|{
name|DataMapDisplayListener
name|temp
init|=
operator|(
name|DataMapDisplayListener
operator|)
name|listener
decl_stmt|;
name|temp
operator|.
name|currentDataMapChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Informs all listeners of the DataMapEvent. Does not send the event to its      * originator.      */
specifier|public
name|void
name|fireDataMapEvent
parameter_list|(
name|DataMapEvent
name|e
parameter_list|)
block|{
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getId
argument_list|()
operator|==
name|MapEvent
operator|.
name|REMOVE
condition|)
block|{
name|removeFromHistory
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventListener
name|eventListener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|DataMapListener
operator|.
name|class
argument_list|)
control|)
block|{
name|DataMapListener
name|listener
init|=
operator|(
name|DataMapListener
operator|)
name|eventListener
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|MapEvent
operator|.
name|ADD
case|:
name|listener
operator|.
name|dataMapAdded
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|CHANGE
case|:
name|listener
operator|.
name|dataMapChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|REMOVE
case|:
name|listener
operator|.
name|dataMapRemoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid DataMapEvent type: "
operator|+
name|e
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Informs all listeners of the EntityEvent. Does not send the event to its      * originator.      */
specifier|public
name|void
name|fireObjEntityEvent
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getEntity
argument_list|()
operator|.
name|getDataMap
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getId
argument_list|()
operator|==
name|MapEvent
operator|.
name|CHANGE
condition|)
block|{
name|e
operator|.
name|getEntity
argument_list|()
operator|.
name|getDataMap
argument_list|()
operator|.
name|objEntityChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|.
name|getId
argument_list|()
operator|==
name|MapEvent
operator|.
name|REMOVE
condition|)
block|{
name|removeFromHistory
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventListener
name|listener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|ObjEntityListener
operator|.
name|class
argument_list|)
control|)
block|{
name|ObjEntityListener
name|temp
init|=
operator|(
name|ObjEntityListener
operator|)
name|listener
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|MapEvent
operator|.
name|ADD
case|:
name|temp
operator|.
name|objEntityAdded
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|CHANGE
case|:
name|temp
operator|.
name|objEntityChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|REMOVE
case|:
name|temp
operator|.
name|objEntityRemoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid EntityEvent type: "
operator|+
name|e
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Informs all listeners of the EntityEvent. Does not send the event to its      * originator.      */
specifier|public
name|void
name|fireDbEntityEvent
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getEntity
argument_list|()
operator|.
name|getDataMap
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getId
argument_list|()
operator|==
name|MapEvent
operator|.
name|CHANGE
condition|)
block|{
name|e
operator|.
name|getEntity
argument_list|()
operator|.
name|getDataMap
argument_list|()
operator|.
name|dbEntityChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|.
name|getId
argument_list|()
operator|==
name|MapEvent
operator|.
name|REMOVE
condition|)
block|{
name|removeFromHistory
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventListener
name|listener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|DbEntityListener
operator|.
name|class
argument_list|)
control|)
block|{
name|DbEntityListener
name|temp
init|=
operator|(
name|DbEntityListener
operator|)
name|listener
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|MapEvent
operator|.
name|ADD
case|:
name|temp
operator|.
name|dbEntityAdded
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|CHANGE
case|:
name|temp
operator|.
name|dbEntityChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|REMOVE
case|:
name|temp
operator|.
name|dbEntityRemoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid EntityEvent type: "
operator|+
name|e
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Informs all listeners of the ProcedureEvent. Does not send the event to      * its originator.      */
specifier|public
name|void
name|fireQueryEvent
parameter_list|(
name|QueryEvent
name|e
parameter_list|)
block|{
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getId
argument_list|()
operator|==
name|MapEvent
operator|.
name|REMOVE
condition|)
block|{
name|removeFromHistory
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventListener
name|eventListener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|QueryListener
operator|.
name|class
argument_list|)
control|)
block|{
name|QueryListener
name|listener
init|=
operator|(
name|QueryListener
operator|)
name|eventListener
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|MapEvent
operator|.
name|ADD
case|:
name|listener
operator|.
name|queryAdded
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|CHANGE
case|:
name|listener
operator|.
name|queryChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|REMOVE
case|:
name|listener
operator|.
name|queryRemoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid ProcedureEvent type: "
operator|+
name|e
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Informs all listeners of the ProcedureEvent. Does not send the event to      * its originator.      */
specifier|public
name|void
name|fireProcedureEvent
parameter_list|(
name|ProcedureEvent
name|e
parameter_list|)
block|{
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getId
argument_list|()
operator|==
name|MapEvent
operator|.
name|REMOVE
condition|)
block|{
name|removeFromHistory
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventListener
name|eventListener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|ProcedureListener
operator|.
name|class
argument_list|)
control|)
block|{
name|ProcedureListener
name|listener
init|=
operator|(
name|ProcedureListener
operator|)
name|eventListener
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|MapEvent
operator|.
name|ADD
case|:
name|listener
operator|.
name|procedureAdded
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|CHANGE
case|:
name|listener
operator|.
name|procedureChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|REMOVE
case|:
name|listener
operator|.
name|procedureRemoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid ProcedureEvent type: "
operator|+
name|e
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Informs all listeners of the ProcedureEvent. Does not send the event to      * its originator.      */
specifier|public
name|void
name|fireProcedureParameterEvent
parameter_list|(
name|ProcedureParameterEvent
name|e
parameter_list|)
block|{
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EventListener
index|[]
name|list
init|=
name|listenerList
operator|.
name|getListeners
argument_list|(
name|ProcedureParameterListener
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|EventListener
name|eventListener
range|:
name|list
control|)
block|{
name|ProcedureParameterListener
name|listener
init|=
operator|(
name|ProcedureParameterListener
operator|)
name|eventListener
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|MapEvent
operator|.
name|ADD
case|:
name|listener
operator|.
name|procedureParameterAdded
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|CHANGE
case|:
name|listener
operator|.
name|procedureParameterChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|REMOVE
case|:
name|listener
operator|.
name|procedureParameterRemoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid ProcedureParameterEvent type: "
operator|+
name|e
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|fireNavigationEvent
parameter_list|(
name|EventObject
name|e
parameter_list|)
block|{
name|Object
name|source
init|=
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
return|return;
name|int
name|size
init|=
name|controllerStateHistory
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
return|return;
name|int
name|i
init|=
name|controllerStateHistory
operator|.
name|indexOf
argument_list|(
name|currentState
argument_list|)
decl_stmt|;
name|ControllerState
name|cs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
name|cs
operator|=
operator|(
name|ControllerState
operator|)
name|controllerStateHistory
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|source
operator|instanceof
name|NavigateForwardAction
condition|)
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
comment|// a new state got created without it being saved.
comment|// just move to the beginning of the list
name|cs
operator|=
operator|(
name|ControllerState
operator|)
name|controllerStateHistory
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|i
operator|+
literal|1
operator|<
name|size
condition|)
block|{
comment|// move forward
name|cs
operator|=
operator|(
name|ControllerState
operator|)
name|controllerStateHistory
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// wrap around
name|cs
operator|=
operator|(
name|ControllerState
operator|)
name|controllerStateHistory
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cs
operator|.
name|isEquivalent
argument_list|(
name|currentState
argument_list|)
condition|)
block|{
break|break;
block|}
comment|// if it doesn't find it within 5 tries it is probably stuck in
comment|// a loop
if|if
condition|(
operator|++
name|counter
operator|>
literal|5
condition|)
block|{
break|break;
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|source
operator|instanceof
name|NavigateBackwardAction
condition|)
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
comment|// a new state got created without it being saved.
try|try
block|{
name|cs
operator|=
operator|(
name|ControllerState
operator|)
name|controllerStateHistory
operator|.
name|get
argument_list|(
name|size
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|ex
parameter_list|)
block|{
name|cs
operator|=
operator|(
name|ControllerState
operator|)
name|controllerStateHistory
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|i
operator|-
literal|1
operator|>=
literal|0
condition|)
block|{
comment|// move to the previous one
name|cs
operator|=
operator|(
name|ControllerState
operator|)
name|controllerStateHistory
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// wrap around
name|cs
operator|=
operator|(
name|ControllerState
operator|)
name|controllerStateHistory
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cs
operator|.
name|isEquivalent
argument_list|(
name|currentState
argument_list|)
condition|)
block|{
break|break;
block|}
comment|// if it doesn't find it within 5 tries it is probably stuck in
comment|// a loop
if|if
condition|(
operator|++
name|counter
operator|>
literal|5
condition|)
block|{
break|break;
block|}
name|i
operator|--
expr_stmt|;
block|}
block|}
comment|// reset the current state to the one we just navigated to
name|currentState
operator|=
name|cs
expr_stmt|;
name|DisplayEvent
name|de
init|=
name|cs
operator|.
name|event
decl_stmt|;
if|if
condition|(
name|de
operator|==
literal|null
condition|)
return|return;
comment|// make sure that isRefiring is turned off prior to exiting this routine
comment|// this flag is used to tell the controller to not create new states
comment|// when we are refiring the event that we saved earlier
name|currentState
operator|.
name|isRefiring
operator|=
literal|true
expr_stmt|;
comment|// the order of the following is checked in most specific to generic
comment|// because
comment|// of the inheritance heirarchy
name|de
operator|.
name|setRefired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|de
operator|instanceof
name|EntityDisplayEvent
condition|)
block|{
name|EntityDisplayEvent
name|ede
init|=
operator|(
name|EntityDisplayEvent
operator|)
name|de
decl_stmt|;
name|ede
operator|.
name|setEntityChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ede
operator|.
name|getEntity
argument_list|()
operator|instanceof
name|ObjEntity
condition|)
block|{
name|fireObjEntityDisplayEvent
argument_list|(
name|ede
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ede
operator|.
name|getEntity
argument_list|()
operator|instanceof
name|DbEntity
condition|)
block|{
name|fireDbEntityDisplayEvent
argument_list|(
name|ede
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|de
operator|instanceof
name|EmbeddableDisplayEvent
condition|)
block|{
name|EmbeddableDisplayEvent
name|ede
init|=
operator|(
name|EmbeddableDisplayEvent
operator|)
name|de
decl_stmt|;
name|ede
operator|.
name|setEmbeddableChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fireEmbeddableDisplayEvent
argument_list|(
name|ede
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|de
operator|instanceof
name|ProcedureDisplayEvent
condition|)
block|{
name|ProcedureDisplayEvent
name|pde
init|=
operator|(
name|ProcedureDisplayEvent
operator|)
name|de
decl_stmt|;
name|pde
operator|.
name|setProcedureChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fireProcedureDisplayEvent
argument_list|(
name|pde
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|de
operator|instanceof
name|QueryDisplayEvent
condition|)
block|{
name|QueryDisplayEvent
name|qde
init|=
operator|(
name|QueryDisplayEvent
operator|)
name|de
decl_stmt|;
name|qde
operator|.
name|setQueryChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fireQueryDisplayEvent
argument_list|(
name|qde
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|de
operator|instanceof
name|DataMapDisplayEvent
condition|)
block|{
name|DataMapDisplayEvent
name|dmde
init|=
operator|(
name|DataMapDisplayEvent
operator|)
name|de
decl_stmt|;
name|dmde
operator|.
name|setDataMapChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fireDataMapDisplayEvent
argument_list|(
name|dmde
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|de
operator|instanceof
name|DataNodeDisplayEvent
condition|)
block|{
name|DataNodeDisplayEvent
name|dnde
init|=
operator|(
name|DataNodeDisplayEvent
operator|)
name|de
decl_stmt|;
name|dnde
operator|.
name|setDataNodeChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fireDataNodeDisplayEvent
argument_list|(
name|dnde
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|de
operator|instanceof
name|DomainDisplayEvent
condition|)
block|{
name|DomainDisplayEvent
name|dde
init|=
operator|(
name|DomainDisplayEvent
operator|)
name|de
decl_stmt|;
name|dde
operator|.
name|setDomainChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fireDomainDisplayEvent
argument_list|(
name|dde
argument_list|)
expr_stmt|;
block|}
comment|// turn off refiring
name|currentState
operator|.
name|isRefiring
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|fireObjEntityDisplayEvent
parameter_list|(
name|EntityDisplayEvent
name|e
parameter_list|)
block|{
name|boolean
name|changed
init|=
name|e
operator|.
name|getEntity
argument_list|()
operator|!=
name|currentState
operator|.
name|objEntity
decl_stmt|;
if|if
condition|(
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
name|e
operator|.
name|setEntityChanged
argument_list|(
name|changed
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
name|clearState
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|domain
operator|=
name|e
operator|.
name|getDomain
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|node
operator|=
name|e
operator|.
name|getDataNode
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|map
operator|=
name|e
operator|.
name|getDataMap
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|objEntity
operator|=
operator|(
name|ObjEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|saveState
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventListener
name|listener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|ObjEntityDisplayListener
operator|.
name|class
argument_list|)
control|)
block|{
name|ObjEntityDisplayListener
name|temp
init|=
operator|(
name|ObjEntityDisplayListener
operator|)
name|listener
decl_stmt|;
name|temp
operator|.
name|currentObjEntityChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|fireEmbeddableDisplayEvent
parameter_list|(
name|EmbeddableDisplayEvent
name|e
parameter_list|)
block|{
name|boolean
name|changed
init|=
name|e
operator|.
name|getEmbeddable
argument_list|()
operator|!=
name|currentState
operator|.
name|embeddable
decl_stmt|;
if|if
condition|(
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
name|e
operator|.
name|setEmbeddableChanged
argument_list|(
name|changed
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
name|clearState
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|domain
operator|=
name|e
operator|.
name|getDomain
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|node
operator|=
name|e
operator|.
name|getDataNode
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|map
operator|=
name|e
operator|.
name|getDataMap
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|embeddable
operator|=
name|e
operator|.
name|getEmbeddable
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|saveState
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventListener
name|listener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|EmbeddableDisplayListener
operator|.
name|class
argument_list|)
control|)
block|{
name|EmbeddableDisplayListener
name|temp
init|=
operator|(
name|EmbeddableDisplayListener
operator|)
name|listener
decl_stmt|;
name|temp
operator|.
name|currentEmbeddableChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|fireQueryDisplayEvent
parameter_list|(
name|QueryDisplayEvent
name|e
parameter_list|)
block|{
name|boolean
name|changed
init|=
name|e
operator|.
name|getQuery
argument_list|()
operator|!=
name|currentState
operator|.
name|query
decl_stmt|;
if|if
condition|(
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
name|e
operator|.
name|setQueryChanged
argument_list|(
name|changed
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
name|clearState
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|domain
operator|=
name|e
operator|.
name|getDomain
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|map
operator|=
name|e
operator|.
name|getDataMap
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|query
operator|=
name|e
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|saveState
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventListener
name|eventListener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|QueryDisplayListener
operator|.
name|class
argument_list|)
control|)
block|{
name|QueryDisplayListener
name|listener
init|=
operator|(
name|QueryDisplayListener
operator|)
name|eventListener
decl_stmt|;
name|listener
operator|.
name|currentQueryChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|fireProcedureDisplayEvent
parameter_list|(
name|ProcedureDisplayEvent
name|e
parameter_list|)
block|{
name|boolean
name|changed
init|=
name|e
operator|.
name|getProcedure
argument_list|()
operator|!=
name|currentState
operator|.
name|procedure
decl_stmt|;
if|if
condition|(
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
name|e
operator|.
name|setProcedureChanged
argument_list|(
name|changed
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
name|clearState
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|domain
operator|=
name|e
operator|.
name|getDomain
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|map
operator|=
name|e
operator|.
name|getDataMap
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|procedure
operator|=
name|e
operator|.
name|getProcedure
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|saveState
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventListener
name|eventListener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|ProcedureDisplayListener
operator|.
name|class
argument_list|)
control|)
block|{
name|ProcedureDisplayListener
name|listener
init|=
operator|(
name|ProcedureDisplayListener
operator|)
name|eventListener
decl_stmt|;
name|listener
operator|.
name|currentProcedureChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|fireProcedureParameterDisplayEvent
parameter_list|(
name|ProcedureParameterDisplayEvent
name|e
parameter_list|)
block|{
name|boolean
name|changed
init|=
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getProcedureParameters
argument_list|()
argument_list|,
name|currentState
operator|.
name|procedureParameters
argument_list|)
decl_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
if|if
condition|(
name|currentState
operator|.
name|procedure
operator|!=
name|e
operator|.
name|getProcedure
argument_list|()
condition|)
block|{
name|clearState
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|domain
operator|=
name|e
operator|.
name|getDomain
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|map
operator|=
name|e
operator|.
name|getDataMap
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|procedure
operator|=
name|e
operator|.
name|getProcedure
argument_list|()
expr_stmt|;
block|}
name|currentState
operator|.
name|procedureParameters
operator|=
name|e
operator|.
name|getProcedureParameters
argument_list|()
expr_stmt|;
block|}
name|EventListener
index|[]
name|list
init|=
name|listenerList
operator|.
name|getListeners
argument_list|(
name|ProcedureParameterDisplayListener
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|EventListener
name|eventListener
range|:
name|list
control|)
block|{
name|ProcedureParameterDisplayListener
name|listener
init|=
operator|(
name|ProcedureParameterDisplayListener
operator|)
name|eventListener
decl_stmt|;
name|listener
operator|.
name|currentProcedureParameterChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|fireDbEntityDisplayEvent
parameter_list|(
name|EntityDisplayEvent
name|e
parameter_list|)
block|{
name|boolean
name|changed
init|=
name|e
operator|.
name|getEntity
argument_list|()
operator|!=
name|currentState
operator|.
name|dbEntity
decl_stmt|;
if|if
condition|(
operator|!
name|e
operator|.
name|isRefired
argument_list|()
condition|)
block|{
name|e
operator|.
name|setEntityChanged
argument_list|(
name|changed
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
name|clearState
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|domain
operator|=
name|e
operator|.
name|getDomain
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|node
operator|=
name|e
operator|.
name|getDataNode
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|map
operator|=
name|e
operator|.
name|getDataMap
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|dbEntity
operator|=
operator|(
name|DbEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|saveState
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventListener
name|listener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|DbEntityDisplayListener
operator|.
name|class
argument_list|)
control|)
block|{
name|DbEntityDisplayListener
name|temp
init|=
operator|(
name|DbEntityDisplayListener
operator|)
name|listener
decl_stmt|;
name|temp
operator|.
name|currentDbEntityChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Notifies all listeners of the change(add, remove) and does the change. */
specifier|public
name|void
name|fireDbAttributeEvent
parameter_list|(
name|AttributeEvent
name|e
parameter_list|)
block|{
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|EventListener
name|listener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|DbAttributeListener
operator|.
name|class
argument_list|)
control|)
block|{
name|DbAttributeListener
name|temp
init|=
operator|(
name|DbAttributeListener
operator|)
name|listener
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|MapEvent
operator|.
name|ADD
case|:
name|temp
operator|.
name|dbAttributeAdded
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|CHANGE
case|:
name|temp
operator|.
name|dbAttributeChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|REMOVE
case|:
name|temp
operator|.
name|dbAttributeRemoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid AttributeEvent type: "
operator|+
name|e
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|fireDbAttributeDisplayEvent
parameter_list|(
name|AttributeDisplayEvent
name|e
parameter_list|)
block|{
name|boolean
name|changed
init|=
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|currentState
operator|.
name|dbAttrs
argument_list|)
decl_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getEntity
argument_list|()
operator|!=
name|currentState
operator|.
name|dbEntity
condition|)
block|{
name|clearState
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|domain
operator|=
name|e
operator|.
name|getDomain
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|map
operator|=
name|e
operator|.
name|getDataMap
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|dbEntity
operator|=
operator|(
name|DbEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
expr_stmt|;
block|}
name|currentState
operator|.
name|dbAttrs
operator|=
operator|new
name|DbAttribute
index|[
name|e
operator|.
name|getAttributes
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|e
operator|.
name|getAttributes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|currentState
operator|.
name|dbAttrs
argument_list|,
literal|0
argument_list|,
name|currentState
operator|.
name|dbAttrs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventListener
name|listener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|DbAttributeDisplayListener
operator|.
name|class
argument_list|)
control|)
block|{
name|DbAttributeDisplayListener
name|temp
init|=
operator|(
name|DbAttributeDisplayListener
operator|)
name|listener
decl_stmt|;
name|temp
operator|.
name|currentDbAttributeChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Notifies all listeners of the change (add, remove) and does the change. */
specifier|public
name|void
name|fireObjAttributeEvent
parameter_list|(
name|AttributeEvent
name|e
parameter_list|)
block|{
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|EventListener
name|listener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|ObjAttributeListener
operator|.
name|class
argument_list|)
control|)
block|{
name|ObjAttributeListener
name|temp
init|=
operator|(
name|ObjAttributeListener
operator|)
name|listener
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|MapEvent
operator|.
name|ADD
case|:
name|temp
operator|.
name|objAttributeAdded
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|CHANGE
case|:
name|temp
operator|.
name|objAttributeChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|REMOVE
case|:
name|temp
operator|.
name|objAttributeRemoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid AttributeEvent type: "
operator|+
name|e
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|fireObjAttributeDisplayEvent
parameter_list|(
name|AttributeDisplayEvent
name|e
parameter_list|)
block|{
name|boolean
name|changed
init|=
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|currentState
operator|.
name|objAttrs
argument_list|)
decl_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getEntity
argument_list|()
operator|!=
name|currentState
operator|.
name|objEntity
condition|)
block|{
name|clearState
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|domain
operator|=
name|e
operator|.
name|getDomain
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|map
operator|=
name|e
operator|.
name|getDataMap
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|objEntity
operator|=
operator|(
name|ObjEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
expr_stmt|;
block|}
name|currentState
operator|.
name|objAttrs
operator|=
operator|new
name|ObjAttribute
index|[
name|e
operator|.
name|getAttributes
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|e
operator|.
name|getAttributes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|currentState
operator|.
name|objAttrs
argument_list|,
literal|0
argument_list|,
name|currentState
operator|.
name|objAttrs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|EventListener
index|[]
name|list
init|=
name|listenerList
operator|.
name|getListeners
argument_list|(
name|ObjAttributeDisplayListener
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|EventListener
name|listener
range|:
name|list
control|)
block|{
name|ObjAttributeDisplayListener
name|temp
init|=
operator|(
name|ObjAttributeDisplayListener
operator|)
name|listener
decl_stmt|;
name|temp
operator|.
name|currentObjAttributeChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|fireEmbeddableAttributeDisplayEvent
parameter_list|(
name|EmbeddableAttributeDisplayEvent
name|ev
parameter_list|)
block|{
name|boolean
name|changed
init|=
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|ev
operator|.
name|getEmbeddableAttributes
argument_list|()
argument_list|,
name|currentState
operator|.
name|embAttrs
argument_list|)
decl_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
if|if
condition|(
name|ev
operator|.
name|getEmbeddable
argument_list|()
operator|!=
name|currentState
operator|.
name|embeddable
condition|)
block|{
name|clearState
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|domain
operator|=
name|ev
operator|.
name|getDomain
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|map
operator|=
name|ev
operator|.
name|getDataMap
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|embeddable
operator|=
name|ev
operator|.
name|getEmbeddable
argument_list|()
expr_stmt|;
block|}
name|currentState
operator|.
name|embAttrs
operator|=
operator|new
name|EmbeddableAttribute
index|[
name|ev
operator|.
name|getEmbeddableAttributes
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|ev
operator|.
name|getEmbeddableAttributes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|currentState
operator|.
name|embAttrs
argument_list|,
literal|0
argument_list|,
name|currentState
operator|.
name|embAttrs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|EventListener
index|[]
name|list
init|=
name|listenerList
operator|.
name|getListeners
argument_list|(
name|EmbeddableAttributeDisplayListener
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|EventListener
name|listener
range|:
name|list
control|)
block|{
name|EmbeddableAttributeDisplayListener
name|temp
init|=
operator|(
name|EmbeddableAttributeDisplayListener
operator|)
name|listener
decl_stmt|;
name|temp
operator|.
name|currentEmbeddableAttributeChanged
argument_list|(
name|ev
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Notifies all listeners of the change(add, remove) and does the change. */
specifier|public
name|void
name|fireDbRelationshipEvent
parameter_list|(
name|RelationshipEvent
name|e
parameter_list|)
block|{
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getId
argument_list|()
operator|==
name|MapEvent
operator|.
name|CHANGE
operator|&&
name|e
operator|.
name|getEntity
argument_list|()
operator|instanceof
name|DbEntity
condition|)
block|{
operator|(
operator|(
name|DbEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
operator|)
operator|.
name|dbRelationshipChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventListener
name|listener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|DbRelationshipListener
operator|.
name|class
argument_list|)
control|)
block|{
name|DbRelationshipListener
name|temp
init|=
operator|(
name|DbRelationshipListener
operator|)
name|listener
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|MapEvent
operator|.
name|ADD
case|:
name|temp
operator|.
name|dbRelationshipAdded
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|CHANGE
case|:
name|temp
operator|.
name|dbRelationshipChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|REMOVE
case|:
name|temp
operator|.
name|dbRelationshipRemoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid RelationshipEvent type: "
operator|+
name|e
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|fireDbRelationshipDisplayEvent
parameter_list|(
name|RelationshipDisplayEvent
name|e
parameter_list|)
block|{
name|boolean
name|changed
init|=
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getRelationships
argument_list|()
argument_list|,
name|currentState
operator|.
name|dbRels
argument_list|)
decl_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getEntity
argument_list|()
operator|!=
name|currentState
operator|.
name|dbEntity
condition|)
block|{
name|clearState
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|domain
operator|=
name|e
operator|.
name|getDomain
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|map
operator|=
name|e
operator|.
name|getDataMap
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|dbEntity
operator|=
operator|(
name|DbEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
expr_stmt|;
block|}
name|currentState
operator|.
name|dbRels
operator|=
operator|new
name|DbRelationship
index|[
name|e
operator|.
name|getRelationships
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|e
operator|.
name|getRelationships
argument_list|()
argument_list|,
literal|0
argument_list|,
name|currentState
operator|.
name|dbRels
argument_list|,
literal|0
argument_list|,
name|currentState
operator|.
name|dbRels
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|EventListener
name|listener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|DbRelationshipDisplayListener
operator|.
name|class
argument_list|)
control|)
block|{
name|DbRelationshipDisplayListener
name|temp
init|=
operator|(
name|DbRelationshipDisplayListener
operator|)
name|listener
decl_stmt|;
name|temp
operator|.
name|currentDbRelationshipChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Notifies all listeners of the change(add, remove) and does the change. */
specifier|public
name|void
name|fireObjRelationshipEvent
parameter_list|(
name|RelationshipEvent
name|e
parameter_list|)
block|{
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|EventListener
name|listener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|ObjRelationshipListener
operator|.
name|class
argument_list|)
control|)
block|{
name|ObjRelationshipListener
name|temp
init|=
operator|(
name|ObjRelationshipListener
operator|)
name|listener
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|MapEvent
operator|.
name|ADD
case|:
name|temp
operator|.
name|objRelationshipAdded
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|CHANGE
case|:
name|temp
operator|.
name|objRelationshipChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|REMOVE
case|:
name|temp
operator|.
name|objRelationshipRemoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid RelationshipEvent type: "
operator|+
name|e
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|fireMultipleObjectsDisplayEvent
parameter_list|(
name|MultipleObjectsDisplayEvent
name|e
parameter_list|)
block|{
name|clearState
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|paths
operator|=
name|e
operator|.
name|getNodes
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|parentPath
operator|=
name|e
operator|.
name|getParentNode
argument_list|()
expr_stmt|;
name|EventListener
index|[]
name|list
init|=
name|listenerList
operator|.
name|getListeners
argument_list|(
name|MultipleObjectsDisplayListener
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|EventListener
name|listener
range|:
name|list
control|)
block|{
name|MultipleObjectsDisplayListener
name|temp
init|=
operator|(
name|MultipleObjectsDisplayListener
operator|)
name|listener
decl_stmt|;
name|temp
operator|.
name|currentObjectsChanged
argument_list|(
name|e
argument_list|,
name|getApplication
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|fireObjRelationshipDisplayEvent
parameter_list|(
name|RelationshipDisplayEvent
name|e
parameter_list|)
block|{
name|boolean
name|changed
init|=
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getRelationships
argument_list|()
argument_list|,
name|currentState
operator|.
name|objRels
argument_list|)
decl_stmt|;
name|e
operator|.
name|setRelationshipChanged
argument_list|(
name|changed
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getEntity
argument_list|()
operator|!=
name|currentState
operator|.
name|objEntity
condition|)
block|{
name|clearState
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|domain
operator|=
name|e
operator|.
name|getDomain
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|map
operator|=
name|e
operator|.
name|getDataMap
argument_list|()
expr_stmt|;
name|currentState
operator|.
name|objEntity
operator|=
operator|(
name|ObjEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
expr_stmt|;
block|}
name|currentState
operator|.
name|objRels
operator|=
operator|new
name|ObjRelationship
index|[
name|e
operator|.
name|getRelationships
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|e
operator|.
name|getRelationships
argument_list|()
argument_list|,
literal|0
argument_list|,
name|currentState
operator|.
name|objRels
argument_list|,
literal|0
argument_list|,
name|currentState
operator|.
name|objRels
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|EventListener
index|[]
name|list
init|=
name|listenerList
operator|.
name|getListeners
argument_list|(
name|ObjRelationshipDisplayListener
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|EventListener
name|listener
range|:
name|list
control|)
block|{
name|ObjRelationshipDisplayListener
name|temp
init|=
operator|(
name|ObjRelationshipDisplayListener
operator|)
name|listener
decl_stmt|;
name|temp
operator|.
name|currentObjRelationshipChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addDataMap
parameter_list|(
name|Object
name|src
parameter_list|,
name|DataMap
name|map
parameter_list|)
block|{
name|addDataMap
argument_list|(
name|src
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDataMap
parameter_list|(
name|Object
name|src
parameter_list|,
name|DataMap
name|map
parameter_list|,
name|boolean
name|makeCurrent
parameter_list|)
block|{
name|map
operator|.
name|setDataChannelDescriptor
argument_list|(
name|currentState
operator|.
name|domain
argument_list|)
expr_stmt|;
comment|// new map was added.. link it to domain (and node if possible)
name|currentState
operator|.
name|domain
operator|.
name|getDataMaps
argument_list|()
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentState
operator|.
name|node
operator|!=
literal|null
operator|&&
operator|!
name|currentState
operator|.
name|node
operator|.
name|getDataMapNames
argument_list|()
operator|.
name|contains
argument_list|(
name|map
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|currentState
operator|.
name|node
operator|.
name|getDataMapNames
argument_list|()
operator|.
name|add
argument_list|(
name|map
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fireDataNodeEvent
argument_list|(
operator|new
name|DataNodeEvent
argument_list|(
name|this
argument_list|,
name|currentState
operator|.
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fireDataMapEvent
argument_list|(
operator|new
name|DataMapEvent
argument_list|(
name|src
argument_list|,
name|map
argument_list|,
name|MapEvent
operator|.
name|ADD
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|makeCurrent
condition|)
block|{
name|fireDataMapDisplayEvent
argument_list|(
operator|new
name|DataMapDisplayEvent
argument_list|(
name|src
argument_list|,
name|map
argument_list|,
name|currentState
operator|.
name|domain
argument_list|,
name|currentState
operator|.
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setDirty
parameter_list|(
name|boolean
name|dirty
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|dirty
operator|!=
name|dirty
condition|)
block|{
name|this
operator|.
name|dirty
operator|=
name|dirty
expr_stmt|;
name|enableSave
argument_list|(
name|dirty
argument_list|)
expr_stmt|;
name|application
operator|.
name|getActionManager
argument_list|()
operator|.
name|getAction
argument_list|(
name|RevertAction
operator|.
name|class
argument_list|)
operator|.
name|setEnabled
argument_list|(
name|dirty
argument_list|)
expr_stmt|;
if|if
condition|(
name|dirty
condition|)
block|{
operator|(
operator|(
name|CayenneModelerController
operator|)
name|getParent
argument_list|()
operator|)
operator|.
name|projectModifiedAction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @return currently selected entity listener class      */
specifier|public
name|String
name|getCurrentListenerClass
parameter_list|()
block|{
return|return
name|currentState
operator|.
name|listenerClass
return|;
block|}
comment|/**      * @return currently selected callback type      */
specifier|public
name|CallbackType
name|getCurrentCallbackType
parameter_list|()
block|{
return|return
name|currentState
operator|.
name|callbackType
return|;
block|}
comment|/**      * @return currently selected callback methods      */
specifier|public
name|ObjCallbackMethod
index|[]
name|getCurrentCallbackMethods
parameter_list|()
block|{
return|return
name|currentState
operator|.
name|callbackMethods
return|;
block|}
comment|/**      * @return currently selecte entity listener class      */
specifier|public
name|void
name|setCurrentListenerClass
parameter_list|(
name|String
name|listenerClass
parameter_list|)
block|{
name|currentState
operator|.
name|listenerClass
operator|=
name|listenerClass
expr_stmt|;
block|}
comment|/**      * @return currently selected callback type      */
specifier|public
name|void
name|setCurrentCallbackType
parameter_list|(
name|CallbackType
name|callbackType
parameter_list|)
block|{
name|currentState
operator|.
name|callbackType
operator|=
name|callbackType
expr_stmt|;
block|}
comment|/**      * @return currently selected callback methods      */
specifier|public
name|void
name|setCurrentCallbackMethods
parameter_list|(
name|ObjCallbackMethod
index|[]
name|callbackMethods
parameter_list|)
block|{
name|currentState
operator|.
name|callbackMethods
operator|=
name|callbackMethods
expr_stmt|;
block|}
comment|/**      * adds callback method manipulation listener      *      * @param listener      *            listener      */
specifier|public
name|void
name|addCallbackMethodListener
parameter_list|(
name|CallbackMethodListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|CallbackMethodListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * fires callback method manipulation event      *      * @param e      *            event      */
specifier|public
name|void
name|fireCallbackMethodEvent
parameter_list|(
name|CallbackMethodEvent
name|e
parameter_list|)
block|{
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|EventListener
name|listener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|CallbackMethodListener
operator|.
name|class
argument_list|)
control|)
block|{
name|CallbackMethodListener
name|temp
init|=
operator|(
name|CallbackMethodListener
operator|)
name|listener
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|MapEvent
operator|.
name|ADD
case|:
name|temp
operator|.
name|callbackMethodAdded
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|CHANGE
case|:
name|temp
operator|.
name|callbackMethodChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|REMOVE
case|:
name|temp
operator|.
name|callbackMethodRemoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid CallbackEvent type: "
operator|+
name|e
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * adds listener class manipulation listener      *      * @param listener      *            listener      */
specifier|public
name|void
name|addEntityListenerListener
parameter_list|(
name|EntityListenerListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|EntityListenerListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * fires entity listener manipulation event      *      * @param e      *            event      */
specifier|public
name|void
name|fireEntityListenerEvent
parameter_list|(
name|EntityListenerEvent
name|e
parameter_list|)
block|{
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|EventListener
name|listener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|EntityListenerListener
operator|.
name|class
argument_list|)
control|)
block|{
name|EntityListenerListener
name|temp
init|=
operator|(
name|EntityListenerListener
operator|)
name|listener
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|MapEvent
operator|.
name|ADD
case|:
name|temp
operator|.
name|entityListenerAdded
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|CHANGE
case|:
name|temp
operator|.
name|entityListenerChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|REMOVE
case|:
name|temp
operator|.
name|entityListenerRemoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid CallbackEvent type: "
operator|+
name|e
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|ProjectFileChangeTracker
name|getFileChangeTracker
parameter_list|()
block|{
return|return
name|fileChangeTracker
return|;
block|}
comment|/**      * Returns currently selected object, null if there are none, List if there      * are several      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Object
name|getCurrentObject
parameter_list|()
block|{
if|if
condition|(
name|getCurrentObjEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getCurrentObjEntity
argument_list|()
return|;
block|}
if|else if
condition|(
name|getCurrentDbEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getCurrentDbEntity
argument_list|()
return|;
block|}
if|else if
condition|(
name|getCurrentEmbeddable
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getCurrentEmbeddable
argument_list|()
return|;
block|}
if|else if
condition|(
name|getCurrentQuery
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getCurrentQuery
argument_list|()
return|;
block|}
if|else if
condition|(
name|getCurrentProcedure
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getCurrentProcedure
argument_list|()
return|;
block|}
if|else if
condition|(
name|getCurrentDataMap
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getCurrentDataMap
argument_list|()
return|;
block|}
if|else if
condition|(
name|getCurrentDataNode
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getCurrentDataNode
argument_list|()
return|;
block|}
if|else if
condition|(
name|getCurrentDataChanel
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getCurrentDataChanel
argument_list|()
return|;
block|}
if|else if
condition|(
name|getCurrentPaths
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// multiple objects
name|Object
index|[]
name|paths
init|=
name|getCurrentPaths
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
operator|new
name|Vector
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|ConfigurationNodeParentGetter
name|parentGetter
init|=
name|getApplication
argument_list|()
operator|.
name|getInjector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|ConfigurationNodeParentGetter
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
name|parent
init|=
name|parentGetter
operator|.
name|getParent
argument_list|(
operator|(
name|ConfigurationNode
operator|)
name|paths
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|path
range|:
name|paths
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**              * Here we sort the list of objects to minimize the risk that              * objects will be pasted incorrectly. For instance, ObjEntity              * should go before Query, to increase chances that Query's root              * would be set.              */
name|Collections
operator|.
name|sort
argument_list|(
name|result
argument_list|,
name|parent
operator|instanceof
name|DataMap
condition|?
name|Comparators
operator|.
name|getDataMapChildrenComparator
argument_list|()
else|:
name|Comparators
operator|.
name|getDataDomainChildrenComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|addEmbeddableAttributeListener
parameter_list|(
name|EmbeddableAttributeListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|EmbeddableAttributeListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addEmbeddableListener
parameter_list|(
name|EmbeddableListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|EmbeddableListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fireEmbeddableEvent
parameter_list|(
name|EmbeddableEvent
name|e
parameter_list|,
name|DataMap
name|map
parameter_list|)
block|{
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|EventListener
name|listener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|EmbeddableListener
operator|.
name|class
argument_list|)
control|)
block|{
name|EmbeddableListener
name|temp
init|=
operator|(
name|EmbeddableListener
operator|)
name|listener
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|MapEvent
operator|.
name|ADD
case|:
name|temp
operator|.
name|embeddableAdded
argument_list|(
name|e
argument_list|,
name|map
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|CHANGE
case|:
name|temp
operator|.
name|embeddableChanged
argument_list|(
name|e
argument_list|,
name|map
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|REMOVE
case|:
name|temp
operator|.
name|embeddableRemoved
argument_list|(
name|e
argument_list|,
name|map
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid RelationshipEvent type: "
operator|+
name|e
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|fireEmbeddableAttributeEvent
parameter_list|(
name|EmbeddableAttributeEvent
name|e
parameter_list|)
block|{
name|setDirty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|EventListener
name|listener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|EmbeddableAttributeListener
operator|.
name|class
argument_list|)
control|)
block|{
name|EmbeddableAttributeListener
name|temp
init|=
operator|(
name|EmbeddableAttributeListener
operator|)
name|listener
decl_stmt|;
switch|switch
condition|(
name|e
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|MapEvent
operator|.
name|ADD
case|:
name|temp
operator|.
name|embeddableAttributeAdded
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|CHANGE
case|:
name|temp
operator|.
name|embeddableAttributeChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
case|case
name|MapEvent
operator|.
name|REMOVE
case|:
name|temp
operator|.
name|embeddableAttributeRemoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid RelationshipEvent type: "
operator|+
name|e
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|fireProjectOnSaveEvent
parameter_list|(
name|ProjectOnSaveEvent
name|e
parameter_list|)
block|{
for|for
control|(
name|EventListener
name|listener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|ProjectOnSaveListener
operator|.
name|class
argument_list|)
control|)
block|{
name|ProjectOnSaveListener
name|temp
init|=
operator|(
name|ProjectOnSaveListener
operator|)
name|listener
decl_stmt|;
name|temp
operator|.
name|beforeSaveChanges
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addDataSourceModificationListener
parameter_list|(
name|DataSourceModificationListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|add
argument_list|(
name|DataSourceModificationListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeDataSourceModificationListener
parameter_list|(
name|DataSourceModificationListener
name|listener
parameter_list|)
block|{
name|listenerList
operator|.
name|remove
argument_list|(
name|DataSourceModificationListener
operator|.
name|class
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fireDataSourceModificationEvent
parameter_list|(
name|DataSourceModificationEvent
name|e
parameter_list|)
block|{
for|for
control|(
name|DataSourceModificationListener
name|listener
range|:
name|listenerList
operator|.
name|getListeners
argument_list|(
name|DataSourceModificationListener
operator|.
name|class
argument_list|)
control|)
block|{
switch|switch
condition|(
name|e
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|MapEvent
operator|.
name|ADD
case|:
name|listener
operator|.
name|callbackDataSourceAdded
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
comment|// TODO Change event not supported for now. Nikita Timofeev
comment|// There is no good place to catch data source modification
comment|/*case MapEvent.CHANGE:                     listener.callbackDataSourceChanged(e);                     break;*/
case|case
name|MapEvent
operator|.
name|REMOVE
case|:
name|listener
operator|.
name|callbackDataSourceRemoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid RelationshipEvent type: "
operator|+
name|e
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|ArrayList
argument_list|<
name|Embeddable
argument_list|>
name|getEmbeddablesInCurrentDataDomain
parameter_list|()
block|{
name|DataChannelDescriptor
name|dataChannelDescriptor
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|DataMap
argument_list|>
name|maps
init|=
name|dataChannelDescriptor
operator|.
name|getDataMaps
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|DataMap
argument_list|>
name|it
init|=
name|maps
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Embeddable
argument_list|>
name|embs
init|=
operator|new
name|ArrayList
argument_list|<
name|Embeddable
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|embs
operator|.
name|addAll
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getEmbeddables
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|embs
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getEmbeddableNamesInCurrentDataDomain
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Embeddable
argument_list|>
name|embs
init|=
name|getEmbeddablesInCurrentDataDomain
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|embNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|embs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Embeddable
name|emb
range|:
name|embs
control|)
block|{
name|embNames
operator|.
name|add
argument_list|(
name|emb
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|embNames
return|;
block|}
specifier|public
name|void
name|updateProjectControllerPreferences
parameter_list|()
block|{
name|String
name|key
init|=
name|getProject
argument_list|()
operator|.
name|getConfigurationResource
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|String
argument_list|(
name|IDUtil
operator|.
name|pseudoUniqueByteSequence16
argument_list|()
argument_list|)
else|:
name|project
operator|.
name|getConfigurationResource
argument_list|()
operator|.
name|getURL
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|projectControllerPreferences
operator|=
name|Preferences
operator|.
name|userNodeForPackage
argument_list|(
name|Project
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|key
operator|.
name|contains
argument_list|(
literal|".xml"
argument_list|)
condition|)
block|{
name|projectControllerPreferences
operator|=
name|projectControllerPreferences
operator|.
name|node
argument_list|(
name|projectControllerPreferences
operator|.
name|absolutePath
argument_list|()
operator|+
name|key
operator|.
name|replace
argument_list|(
literal|".xml"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|projectControllerPreferences
operator|=
name|projectControllerPreferences
operator|.
name|node
argument_list|(
name|projectControllerPreferences
operator|.
name|absolutePath
argument_list|()
argument_list|)
operator|.
name|node
argument_list|(
name|getApplication
argument_list|()
operator|.
name|getNewProjectTemporaryName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @since 4.0      */
specifier|public
name|int
name|getEntityTabSelection
parameter_list|()
block|{
return|return
name|entityTabSelection
return|;
block|}
comment|/**      * @since 4.0      */
specifier|public
name|void
name|setEntityTabSelection
parameter_list|(
name|int
name|entityTabSelection
parameter_list|)
block|{
name|this
operator|.
name|entityTabSelection
operator|=
name|entityTabSelection
expr_stmt|;
block|}
comment|/**      * If true, all save buttons become available.      * @param enable      */
specifier|public
name|void
name|enableSave
parameter_list|(
name|boolean
name|enable
parameter_list|)
block|{
name|application
operator|.
name|getActionManager
argument_list|()
operator|.
name|getAction
argument_list|(
name|SaveAction
operator|.
name|class
argument_list|)
operator|.
name|setEnabled
argument_list|(
name|enable
argument_list|)
expr_stmt|;
name|application
operator|.
name|getActionManager
argument_list|()
operator|.
name|getAction
argument_list|(
name|SaveAsAction
operator|.
name|class
argument_list|)
operator|.
name|setEnabled
argument_list|(
name|enable
argument_list|)
expr_stmt|;
block|}
comment|/**     * Set currently selected ObjAttributes     */
specifier|public
name|void
name|setCurrentObjAttributes
parameter_list|(
name|ObjAttribute
index|[]
name|attrs
parameter_list|)
block|{
name|currentState
operator|.
name|objAttrs
operator|=
name|attrs
expr_stmt|;
block|}
comment|/**     * Set currently selected ObjRelationships     */
specifier|public
name|void
name|setCurrentObjRelationships
parameter_list|(
name|ObjRelationship
index|[]
name|rels
parameter_list|)
block|{
name|currentState
operator|.
name|objRels
operator|=
name|rels
expr_stmt|;
block|}
comment|/**     * Set currently selected DbAttributes     */
specifier|public
name|void
name|setCurrentDbAttributes
parameter_list|(
name|DbAttribute
index|[]
name|attrs
parameter_list|)
block|{
name|currentState
operator|.
name|dbAttrs
operator|=
name|attrs
expr_stmt|;
block|}
comment|/**     * Set currently selected DbRelationships     */
specifier|public
name|void
name|setCurrentDbRelationships
parameter_list|(
name|DbRelationship
index|[]
name|rels
parameter_list|)
block|{
name|currentState
operator|.
name|dbRels
operator|=
name|rels
expr_stmt|;
block|}
block|}
end_class

end_unit

