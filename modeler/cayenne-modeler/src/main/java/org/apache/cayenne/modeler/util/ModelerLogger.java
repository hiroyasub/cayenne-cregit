begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|LogConsole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|AttributeSet
import|;
end_import

begin_comment
comment|/**  * ModelerLogger is a Log implementation, which performs output  * to the LogConsole. Default behavior is saved since they are delegated  * to default Log instance.   */
end_comment

begin_class
specifier|public
class|class
name|ModelerLogger
implements|implements
name|Log
block|{
comment|/**      * 'Default' Log instance (i.e. Log4jLogger, Jdk14Logger, or other)      */
name|Log
name|delegate
decl_stmt|;
comment|/**       * Logger name       */
name|String
name|name
decl_stmt|;
specifier|public
name|ModelerLogger
parameter_list|(
name|String
name|name
parameter_list|,
name|Log
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
specifier|public
name|void
name|debug
parameter_list|(
name|Object
name|message
parameter_list|)
block|{
name|delegate
operator|.
name|debug
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"DEBUG"
argument_list|,
name|message
argument_list|,
literal|null
argument_list|,
name|LogConsole
operator|.
name|DEBUG_STYLE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|debug
parameter_list|(
name|Object
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|delegate
operator|.
name|debug
argument_list|(
name|message
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"DEBUG"
argument_list|,
name|message
argument_list|,
name|t
argument_list|,
name|LogConsole
operator|.
name|DEBUG_STYLE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|Object
name|message
parameter_list|)
block|{
name|delegate
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"ERROR"
argument_list|,
name|message
argument_list|,
literal|null
argument_list|,
name|LogConsole
operator|.
name|ERROR_STYLE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|Object
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|delegate
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"ERROR"
argument_list|,
name|message
argument_list|,
name|t
argument_list|,
name|LogConsole
operator|.
name|ERROR_STYLE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fatal
parameter_list|(
name|Object
name|message
parameter_list|)
block|{
name|delegate
operator|.
name|fatal
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"FATAL"
argument_list|,
name|message
argument_list|,
literal|null
argument_list|,
name|LogConsole
operator|.
name|FATAL_STYLE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fatal
parameter_list|(
name|Object
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|delegate
operator|.
name|fatal
argument_list|(
name|message
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"FATAL"
argument_list|,
name|message
argument_list|,
name|t
argument_list|,
name|LogConsole
operator|.
name|FATAL_STYLE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|info
parameter_list|(
name|Object
name|message
parameter_list|)
block|{
name|delegate
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"INFO"
argument_list|,
name|message
argument_list|,
literal|null
argument_list|,
name|LogConsole
operator|.
name|INFO_STYLE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|info
parameter_list|(
name|Object
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|delegate
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"INFO"
argument_list|,
name|message
argument_list|,
name|t
argument_list|,
name|LogConsole
operator|.
name|INFO_STYLE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|trace
parameter_list|(
name|Object
name|message
parameter_list|)
block|{
name|delegate
operator|.
name|trace
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"TRACE"
argument_list|,
name|message
argument_list|,
literal|null
argument_list|,
name|LogConsole
operator|.
name|DEBUG_STYLE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|trace
parameter_list|(
name|Object
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|delegate
operator|.
name|trace
argument_list|(
name|message
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"TRACE"
argument_list|,
name|message
argument_list|,
name|t
argument_list|,
name|LogConsole
operator|.
name|DEBUG_STYLE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|warn
parameter_list|(
name|Object
name|message
parameter_list|)
block|{
name|delegate
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"WARN"
argument_list|,
name|message
argument_list|,
literal|null
argument_list|,
name|LogConsole
operator|.
name|WARN_STYLE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|warn
parameter_list|(
name|Object
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|delegate
operator|.
name|warn
argument_list|(
name|message
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"WARN"
argument_list|,
name|message
argument_list|,
name|t
argument_list|,
name|LogConsole
operator|.
name|WARN_STYLE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDebugEnabled
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isDebugEnabled
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isErrorEnabled
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isErrorEnabled
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isFatalEnabled
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isFatalEnabled
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isInfoEnabled
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isInfoEnabled
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isTraceEnabled
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isTraceEnabled
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isWarnEnabled
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isWarnEnabled
argument_list|()
return|;
block|}
comment|/**      * Prints common message to the console      */
specifier|private
name|void
name|log
parameter_list|(
name|String
name|level
parameter_list|,
name|Object
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|,
name|AttributeSet
name|style
parameter_list|)
block|{
name|getLogConsole
argument_list|()
operator|.
name|appendMessage
argument_list|(
name|level
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|message
argument_list|)
argument_list|,
name|t
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
specifier|private
name|LogConsole
name|getLogConsole
parameter_list|()
block|{
return|return
name|LogConsole
operator|.
name|getInstance
argument_list|()
return|;
block|}
block|}
end_class

end_unit

