begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|cgen
operator|.
name|templateeditor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
operator|.
name|CgenConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|gen
operator|.
name|TemplateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|exception
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JFrame
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_comment
comment|/**  * since 4.3  */
end_comment

begin_class
specifier|public
class|class
name|EditorTemplateLoader
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EditorTemplateLoader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CgenConfiguration
name|cgenConfiguration
decl_stmt|;
specifier|private
specifier|final
name|JFrame
name|view
decl_stmt|;
specifier|public
name|EditorTemplateLoader
parameter_list|(
name|CgenConfiguration
name|configuration
parameter_list|,
name|TemplateEditorView
name|view
parameter_list|)
block|{
name|this
operator|.
name|cgenConfiguration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|view
operator|=
name|view
expr_stmt|;
block|}
specifier|public
name|String
name|load
parameter_list|(
name|TemplateType
name|type
parameter_list|,
name|Boolean
name|isTemplateDefault
parameter_list|)
block|{
if|if
condition|(
name|isTemplateDefault
condition|)
block|{
return|return
name|getDefaultTemplateText
argument_list|(
name|type
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|cgenConfiguration
operator|.
name|getTemplateByType
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
specifier|private
name|String
name|getDefaultTemplateText
parameter_list|(
name|TemplateType
name|type
parameter_list|)
block|{
name|TemplateType
name|templateType
init|=
name|cgenConfiguration
operator|.
name|isMakePairs
argument_list|()
condition|?
name|type
else|:
name|switchTypeToSingle
argument_list|(
name|type
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|templateType
operator|.
name|pathFromSourceRoot
argument_list|()
argument_list|)
init|)
block|{
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|String
argument_list|(
name|stream
operator|.
name|readAllBytes
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|view
argument_list|,
literal|"File reading error \n"
operator|+
name|templateType
operator|.
name|pathFromSourceRoot
argument_list|()
argument_list|,
literal|"Error"
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
literal|"File reading error {}"
argument_list|,
name|templateType
operator|.
name|pathFromSourceRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|TemplateType
name|switchTypeToSingle
parameter_list|(
name|TemplateType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|ENTITY_SUBCLASS
case|:
block|{
return|return
name|TemplateType
operator|.
name|ENTITY_SINGLE_CLASS
return|;
block|}
case|case
name|EMBEDDABLE_SUBCLASS
case|:
block|{
return|return
name|TemplateType
operator|.
name|EMBEDDABLE_SINGLE_CLASS
return|;
block|}
case|case
name|DATAMAP_SUBCLASS
case|:
block|{
return|return
name|TemplateType
operator|.
name|DATAMAP_SINGLE_CLASS
return|;
block|}
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Illegal template type for singleClass "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

