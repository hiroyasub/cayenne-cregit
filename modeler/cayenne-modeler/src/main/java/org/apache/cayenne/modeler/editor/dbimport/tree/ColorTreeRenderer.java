begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|dbimport
operator|.
name|tree
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ExcludeColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ExcludeProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ExcludeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|FilterContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|IncludeColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|IncludeProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|IncludeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|PatternParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ReverseEngineering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|SchemaContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|load
operator|.
name|DbImportTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|dbimport
operator|.
name|DbImportTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|dbimport
operator|.
name|DbImportTreeCellRenderer
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|ColorTreeRenderer
extends|extends
name|DbImportTreeCellRenderer
block|{
specifier|private
name|DbImportTree
name|reverseEngineeringTree
decl_stmt|;
specifier|public
name|ColorTreeRenderer
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Component
name|getTreeCellRendererComponent
parameter_list|(
name|JTree
name|tree
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|selected
parameter_list|,
name|boolean
name|expanded
parameter_list|,
name|boolean
name|leaf
parameter_list|,
name|int
name|row
parameter_list|,
name|boolean
name|hasFocus
parameter_list|)
block|{
name|super
operator|.
name|getTreeCellRendererComponent
argument_list|(
name|tree
argument_list|,
name|value
argument_list|,
name|selected
argument_list|,
name|expanded
argument_list|,
name|leaf
argument_list|,
name|row
argument_list|,
name|hasFocus
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|node
operator|.
name|isLabel
argument_list|()
operator|||
name|this
operator|.
name|selected
condition|)
block|{
name|setForeground
argument_list|(
name|Color
operator|.
name|BLACK
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|Node
argument_list|<
name|?
argument_list|>
name|logicalTreeNode
init|=
name|getLogicalTreeNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|logicalTreeNode
operator|==
literal|null
condition|)
block|{
return|return
name|this
return|;
block|}
name|Status
name|status
init|=
name|logicalTreeNode
operator|.
name|getStatus
argument_list|(
name|reverseEngineeringTree
operator|.
name|getReverseEngineering
argument_list|()
argument_list|)
decl_stmt|;
name|ReverseEngineering
name|mask
init|=
name|getMask
argument_list|()
decl_stmt|;
if|if
condition|(
name|mask
operator|!=
literal|null
condition|)
block|{
name|status
operator|=
name|logicalTreeNode
operator|.
name|getStatus
argument_list|(
name|mask
argument_list|)
expr_stmt|;
block|}
name|setForeground
argument_list|(
name|status
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|ReverseEngineering
name|merge
parameter_list|(
name|ReverseEngineering
name|config
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|mergeAsFilterContainer
argument_list|(
name|config
argument_list|,
name|object
argument_list|)
condition|)
block|{
return|return
name|config
return|;
block|}
if|else if
condition|(
name|mergeAsSchemaContainer
argument_list|(
name|config
argument_list|,
name|object
argument_list|)
condition|)
block|{
return|return
name|config
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Catalog
condition|)
block|{
name|config
operator|.
name|addCatalog
argument_list|(
operator|(
name|Catalog
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
return|return
name|config
return|;
block|}
specifier|private
name|Object
name|merge
parameter_list|(
name|Catalog
name|catalog
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|mergeAsFilterContainer
argument_list|(
name|catalog
argument_list|,
name|object
argument_list|)
condition|)
block|{
return|return
name|catalog
return|;
block|}
name|mergeAsSchemaContainer
argument_list|(
name|catalog
argument_list|,
name|object
argument_list|)
expr_stmt|;
return|return
name|catalog
return|;
block|}
specifier|private
name|Object
name|merge
parameter_list|(
name|Schema
name|schema
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
name|mergeAsFilterContainer
argument_list|(
name|schema
argument_list|,
name|object
argument_list|)
expr_stmt|;
return|return
name|schema
return|;
block|}
specifier|private
name|boolean
name|mergeAsSchemaContainer
parameter_list|(
name|SchemaContainer
name|container
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Schema
condition|)
block|{
name|container
operator|.
name|addSchema
argument_list|(
operator|(
name|Schema
operator|)
name|object
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|mergeAsFilterContainer
parameter_list|(
name|FilterContainer
name|container
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|IncludeTable
condition|)
block|{
name|container
operator|.
name|addIncludeTable
argument_list|(
operator|(
name|IncludeTable
operator|)
name|object
argument_list|)
expr_stmt|;
name|container
operator|.
name|addIncludeProcedure
argument_list|(
operator|new
name|IncludeProcedure
argument_list|(
literal|"tmp include to disable include all behaviour"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|ExcludeTable
condition|)
block|{
name|container
operator|.
name|addExcludeTable
argument_list|(
operator|(
name|ExcludeTable
operator|)
name|object
argument_list|)
expr_stmt|;
name|container
operator|.
name|addIncludeProcedure
argument_list|(
operator|new
name|IncludeProcedure
argument_list|(
literal|"tmp include to disable include all behaviour"
argument_list|)
argument_list|)
expr_stmt|;
name|container
operator|.
name|addIncludeTable
argument_list|(
operator|new
name|IncludeTable
argument_list|(
literal|"tmp include to disable include all behaviour"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|IncludeProcedure
condition|)
block|{
name|container
operator|.
name|addIncludeProcedure
argument_list|(
operator|(
name|IncludeProcedure
operator|)
name|object
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|ExcludeProcedure
condition|)
block|{
name|container
operator|.
name|addExcludeProcedure
argument_list|(
operator|(
name|ExcludeProcedure
operator|)
name|object
argument_list|)
expr_stmt|;
name|container
operator|.
name|addIncludeProcedure
argument_list|(
operator|new
name|IncludeProcedure
argument_list|(
literal|"tmp include to disable include all behaviour"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|IncludeColumn
condition|)
block|{
name|container
operator|.
name|addIncludeColumn
argument_list|(
operator|(
name|IncludeColumn
operator|)
name|object
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|ExcludeColumn
condition|)
block|{
name|container
operator|.
name|addExcludeColumn
argument_list|(
operator|(
name|ExcludeColumn
operator|)
name|object
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|IncludeTable
name|merge
parameter_list|(
name|IncludeTable
name|includeTable
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|IncludeColumn
condition|)
block|{
name|includeTable
operator|.
name|addIncludeColumn
argument_list|(
operator|(
name|IncludeColumn
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|ExcludeColumn
condition|)
block|{
name|includeTable
operator|.
name|addExcludeColumn
argument_list|(
operator|(
name|ExcludeColumn
operator|)
name|object
argument_list|)
expr_stmt|;
name|includeTable
operator|.
name|addIncludeColumn
argument_list|(
operator|new
name|IncludeColumn
argument_list|(
literal|"tmp include to disable include all behaviour"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|includeTable
return|;
block|}
specifier|private
name|Object
name|addToMask
parameter_list|(
name|Object
name|object
parameter_list|,
name|DbImportTreeNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
name|node
operator|.
name|getUserObject
argument_list|()
return|;
block|}
name|String
name|rule
init|=
name|getObjectValue
argument_list|(
name|node
operator|.
name|getUserObject
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|isCatalog
argument_list|()
condition|)
block|{
return|return
name|merge
argument_list|(
operator|new
name|Catalog
argument_list|(
name|rule
argument_list|)
argument_list|,
name|object
argument_list|)
return|;
block|}
if|else if
condition|(
name|node
operator|.
name|isSchema
argument_list|()
condition|)
block|{
return|return
name|merge
argument_list|(
operator|new
name|Schema
argument_list|(
name|rule
argument_list|)
argument_list|,
name|object
argument_list|)
return|;
block|}
if|else if
condition|(
name|node
operator|.
name|isIncludeTable
argument_list|()
condition|)
block|{
return|return
name|merge
argument_list|(
operator|new
name|IncludeTable
argument_list|(
name|rule
argument_list|)
argument_list|,
name|object
argument_list|)
return|;
block|}
if|else if
condition|(
name|node
operator|.
name|isExcludeTable
argument_list|()
condition|)
block|{
return|return
operator|new
name|ExcludeTable
argument_list|(
name|rule
argument_list|)
return|;
block|}
if|else if
condition|(
name|node
operator|.
name|isIncludeColumn
argument_list|()
condition|)
block|{
return|return
operator|new
name|IncludeColumn
argument_list|(
name|rule
argument_list|)
return|;
block|}
if|else if
condition|(
name|node
operator|.
name|isExcludeColumn
argument_list|()
condition|)
block|{
return|return
operator|new
name|ExcludeColumn
argument_list|(
name|rule
argument_list|)
return|;
block|}
if|else if
condition|(
name|node
operator|.
name|isIncludeProcedure
argument_list|()
condition|)
block|{
return|return
operator|new
name|IncludeProcedure
argument_list|(
name|rule
argument_list|)
return|;
block|}
if|else if
condition|(
name|node
operator|.
name|isExcludeProcedure
argument_list|()
condition|)
block|{
return|return
operator|new
name|ExcludeProcedure
argument_list|(
name|rule
argument_list|)
return|;
block|}
return|return
name|object
return|;
block|}
specifier|private
name|ReverseEngineering
name|getMask
parameter_list|()
block|{
name|DbImportTreeNode
name|selectedNode
init|=
name|reverseEngineeringTree
operator|.
name|getSelectedNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectedNode
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|selectedNode
operator|.
name|isReverseEngineering
argument_list|()
condition|)
block|{
return|return
name|reverseEngineeringTree
operator|.
name|getReverseEngineering
argument_list|()
return|;
block|}
name|ReverseEngineering
name|config
init|=
operator|new
name|ReverseEngineering
argument_list|()
decl_stmt|;
name|Object
name|configNode
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|!
name|selectedNode
operator|.
name|isReverseEngineering
argument_list|()
condition|)
block|{
name|configNode
operator|=
name|addToMask
argument_list|(
name|configNode
argument_list|,
name|selectedNode
argument_list|)
expr_stmt|;
name|selectedNode
operator|=
name|selectedNode
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
name|merge
argument_list|(
name|config
argument_list|,
name|configNode
argument_list|)
return|;
block|}
specifier|private
name|Node
argument_list|<
name|?
argument_list|>
name|getLogicalTreeNode
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|path
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|DbImportTreeNode
name|parent
init|=
name|node
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|path
operator|.
name|add
argument_list|(
name|parent
operator|.
name|getUserObject
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|Collections
operator|.
name|reverse
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Node
argument_list|<
name|?
argument_list|>
name|logicalParent
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|path
control|)
block|{
name|logicalParent
operator|=
name|toLogicalNode
argument_list|(
name|getObjectType
argument_list|(
name|object
argument_list|)
argument_list|,
name|getObjectValue
argument_list|(
name|object
argument_list|)
argument_list|,
name|logicalParent
argument_list|)
expr_stmt|;
block|}
return|return
name|logicalParent
return|;
block|}
specifier|private
name|Node
argument_list|<
name|?
argument_list|>
name|toLogicalNode
parameter_list|(
name|ObjectType
name|type
parameter_list|,
name|String
name|value
parameter_list|,
name|Node
argument_list|<
name|?
argument_list|>
name|logicalParent
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CATALOG
case|:
return|return
operator|new
name|CatalogNode
argument_list|(
name|value
argument_list|)
return|;
case|case
name|SCHEMA
case|:
return|return
operator|new
name|SchemaNode
argument_list|(
name|value
argument_list|,
operator|(
name|CatalogNode
operator|)
name|logicalParent
argument_list|)
return|;
case|case
name|TABLE
case|:
if|if
condition|(
name|logicalParent
operator|instanceof
name|CatalogNode
condition|)
block|{
return|return
operator|new
name|CatalogTableNode
argument_list|(
name|value
argument_list|,
operator|(
name|CatalogNode
operator|)
name|logicalParent
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SchemaTableNode
argument_list|(
name|value
argument_list|,
operator|(
name|SchemaNode
operator|)
name|logicalParent
argument_list|)
return|;
block|}
case|case
name|COLUMN
case|:
return|return
operator|new
name|ColumnNode
argument_list|(
name|value
argument_list|,
operator|(
name|TableNode
argument_list|<
name|?
argument_list|>
operator|)
name|logicalParent
argument_list|)
return|;
case|case
name|PROCEDURE
case|:
if|if
condition|(
name|logicalParent
operator|instanceof
name|CatalogNode
condition|)
block|{
return|return
operator|new
name|CatalogProcedureNode
argument_list|(
name|value
argument_list|,
operator|(
name|CatalogNode
operator|)
name|logicalParent
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SchemaProcedureNode
argument_list|(
name|value
argument_list|,
operator|(
name|SchemaNode
operator|)
name|logicalParent
argument_list|)
return|;
block|}
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|ObjectType
name|getObjectType
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Catalog
condition|)
block|{
return|return
name|ObjectType
operator|.
name|CATALOG
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Schema
condition|)
block|{
return|return
name|ObjectType
operator|.
name|SCHEMA
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|IncludeTable
operator|||
name|object
operator|instanceof
name|ExcludeTable
condition|)
block|{
return|return
name|ObjectType
operator|.
name|TABLE
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|IncludeColumn
operator|||
name|object
operator|instanceof
name|ExcludeColumn
condition|)
block|{
return|return
name|ObjectType
operator|.
name|COLUMN
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|IncludeProcedure
operator|||
name|object
operator|instanceof
name|ExcludeProcedure
condition|)
block|{
return|return
name|ObjectType
operator|.
name|PROCEDURE
return|;
block|}
return|return
name|ObjectType
operator|.
name|UNKNOWN
return|;
block|}
specifier|private
name|String
name|getObjectValue
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|FilterContainer
condition|)
block|{
return|return
operator|(
operator|(
name|FilterContainer
operator|)
name|object
operator|)
operator|.
name|getName
argument_list|()
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|PatternParam
condition|)
block|{
return|return
operator|(
operator|(
name|PatternParam
operator|)
name|object
operator|)
operator|.
name|getPattern
argument_list|()
return|;
block|}
return|return
literal|""
return|;
block|}
specifier|public
name|void
name|setReverseEngineeringTree
parameter_list|(
name|DbImportTree
name|reverseEngineeringTree
parameter_list|)
block|{
name|this
operator|.
name|reverseEngineeringTree
operator|=
name|reverseEngineeringTree
expr_stmt|;
block|}
block|}
end_class

end_unit

