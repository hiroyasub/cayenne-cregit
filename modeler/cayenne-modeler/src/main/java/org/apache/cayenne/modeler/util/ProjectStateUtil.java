begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Embeddable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EmbeddableAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ProcedureParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Relationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|AttributeDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataMapDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataNodeDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DomainDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|EmbeddableAttributeDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|EmbeddableDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|EntityDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|MultipleObjectsDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ProcedureDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ProcedureParameterDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|QueryDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|RelationshipDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|ProjectStatePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|CayenneMapEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|BackingStoreException
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ProjectStateUtil
block|{
specifier|private
specifier|static
name|ProjectStatePreferences
name|preferences
decl_stmt|;
specifier|private
name|ProjectStateUtil
parameter_list|()
block|{
block|}
specifier|public
specifier|static
name|void
name|saveLastState
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|DisplayEvent
name|displayEvent
init|=
name|controller
operator|.
name|getLastDisplayEvent
argument_list|()
decl_stmt|;
name|Object
index|[]
name|multiplyObjects
init|=
name|controller
operator|.
name|getCurrentPaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|displayEvent
operator|==
literal|null
operator|&&
name|multiplyObjects
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|preferences
operator|=
name|controller
operator|.
name|getProjectStatePreferences
argument_list|()
expr_stmt|;
if|if
condition|(
name|preferences
operator|.
name|getCurrentPreference
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|preferences
operator|.
name|getCurrentPreference
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|e
parameter_list|)
block|{
comment|// ignore exception
block|}
if|if
condition|(
name|displayEvent
operator|!=
literal|null
condition|)
block|{
name|DisplayEventType
operator|.
name|valueOf
argument_list|(
name|displayEvent
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|saveLastDisplayEvent
argument_list|(
name|controller
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DisplayEventType
operator|.
name|MultipleObjectsDisplayEvent
operator|.
name|saveLastDisplayEvent
argument_list|(
name|controller
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|fireLastState
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|preferences
operator|=
name|controller
operator|.
name|getProjectStatePreferences
argument_list|()
expr_stmt|;
name|String
name|displayEventName
init|=
name|preferences
operator|.
name|getEvent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|displayEventName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DisplayEventType
operator|.
name|valueOf
argument_list|(
name|displayEventName
argument_list|)
operator|.
name|fireLastDisplayEvent
argument_list|(
name|controller
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
enum|enum
name|DisplayEventType
block|{
name|DomainDisplayEvent
block|{
annotation|@
name|Override
name|void
name|fireLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|DataChannelDescriptor
name|dataChannel
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|controller
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dataChannel
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|preferences
operator|.
name|getDomain
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|DomainDisplayEvent
name|domainDisplayEvent
init|=
operator|new
name|DomainDisplayEvent
argument_list|(
name|this
argument_list|,
name|dataChannel
argument_list|)
decl_stmt|;
name|controller
operator|.
name|fireDomainDisplayEvent
argument_list|(
name|domainDisplayEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|saveLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|preferences
operator|.
name|setEvent
argument_list|(
name|DomainDisplayEvent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDomain
argument_list|(
name|controller
operator|.
name|getCurrentDataChanel
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|,
name|DataNodeDisplayEvent
block|{
annotation|@
name|Override
name|void
name|fireLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|DataChannelDescriptor
name|dataChannel
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|controller
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dataChannel
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|preferences
operator|.
name|getDomain
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|DataNodeDescriptor
name|dataNode
init|=
name|dataChannel
operator|.
name|getNodeDescriptor
argument_list|(
name|preferences
operator|.
name|getNode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataNode
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DataNodeDisplayEvent
name|dataNodeDisplayEvent
init|=
operator|new
name|DataNodeDisplayEvent
argument_list|(
name|this
argument_list|,
name|dataChannel
argument_list|,
name|dataNode
argument_list|)
decl_stmt|;
name|controller
operator|.
name|fireDataNodeDisplayEvent
argument_list|(
name|dataNodeDisplayEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|saveLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|preferences
operator|.
name|setEvent
argument_list|(
name|DataNodeDisplayEvent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDomain
argument_list|(
name|controller
operator|.
name|getCurrentDataChanel
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setNode
argument_list|(
name|controller
operator|.
name|getCurrentDataNode
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|,
name|DataMapDisplayEvent
block|{
annotation|@
name|Override
name|void
name|fireLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|DataChannelDescriptor
name|dataChannel
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|controller
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dataChannel
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|preferences
operator|.
name|getDomain
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|DataNodeDescriptor
name|dataNode
init|=
name|dataChannel
operator|.
name|getNodeDescriptor
argument_list|(
name|preferences
operator|.
name|getNode
argument_list|()
argument_list|)
decl_stmt|;
name|DataMap
name|dataMap
init|=
name|dataChannel
operator|.
name|getDataMap
argument_list|(
name|preferences
operator|.
name|getDataMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DataMapDisplayEvent
name|dataMapDisplayEvent
init|=
operator|new
name|DataMapDisplayEvent
argument_list|(
name|this
argument_list|,
name|dataMap
argument_list|,
name|dataChannel
argument_list|,
name|dataNode
argument_list|)
decl_stmt|;
name|controller
operator|.
name|fireDataMapDisplayEvent
argument_list|(
name|dataMapDisplayEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|saveLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|preferences
operator|.
name|setEvent
argument_list|(
name|DataMapDisplayEvent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDomain
argument_list|(
name|controller
operator|.
name|getCurrentDataChanel
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setNode
argument_list|(
name|controller
operator|.
name|getCurrentDataNode
argument_list|()
operator|!=
literal|null
condition|?
name|controller
operator|.
name|getCurrentDataNode
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|""
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDataMap
argument_list|(
name|controller
operator|.
name|getCurrentDataMap
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|,
name|EntityDisplayEvent
block|{
annotation|@
name|Override
name|void
name|fireLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|DataChannelDescriptor
name|dataChannel
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|controller
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dataChannel
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|preferences
operator|.
name|getDomain
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|DataNodeDescriptor
name|dataNode
init|=
name|dataChannel
operator|.
name|getNodeDescriptor
argument_list|(
name|preferences
operator|.
name|getNode
argument_list|()
argument_list|)
decl_stmt|;
name|DataMap
name|dataMap
init|=
name|dataChannel
operator|.
name|getDataMap
argument_list|(
name|preferences
operator|.
name|getDataMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Entity
name|entity
init|=
name|getLastEntity
argument_list|(
name|dataMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EntityDisplayEvent
name|entityDisplayEvent
init|=
operator|new
name|EntityDisplayEvent
argument_list|(
name|this
argument_list|,
name|entity
argument_list|,
name|dataMap
argument_list|,
name|dataNode
argument_list|,
name|dataChannel
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|instanceof
name|ObjEntity
condition|)
block|{
name|controller
operator|.
name|fireObjEntityDisplayEvent
argument_list|(
name|entityDisplayEvent
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|entity
operator|instanceof
name|DbEntity
condition|)
block|{
name|controller
operator|.
name|fireDbEntityDisplayEvent
argument_list|(
name|entityDisplayEvent
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|saveLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
if|if
condition|(
name|controller
operator|.
name|getCurrentObjAttributes
argument_list|()
operator|.
name|length
operator|!=
literal|0
operator|||
name|controller
operator|.
name|getCurrentDbAttributes
argument_list|()
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|AttributeDisplayEvent
operator|.
name|saveLastDisplayEvent
argument_list|(
name|controller
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|controller
operator|.
name|getCurrentObjRelationships
argument_list|()
operator|.
name|length
operator|!=
literal|0
operator|||
name|controller
operator|.
name|getCurrentDbRelationships
argument_list|()
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|RelationshipDisplayEvent
operator|.
name|saveLastDisplayEvent
argument_list|(
name|controller
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|preferences
operator|.
name|setEvent
argument_list|(
name|EntityDisplayEvent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDomain
argument_list|(
name|controller
operator|.
name|getCurrentDataChanel
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setNode
argument_list|(
name|controller
operator|.
name|getCurrentDataNode
argument_list|()
operator|!=
literal|null
condition|?
name|controller
operator|.
name|getCurrentDataNode
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|""
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDataMap
argument_list|(
name|controller
operator|.
name|getCurrentDataMap
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|controller
operator|.
name|getCurrentObjEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|preferences
operator|.
name|setObjEntity
argument_list|(
name|controller
operator|.
name|getCurrentObjEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDbEntity
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|controller
operator|.
name|getCurrentDbEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|preferences
operator|.
name|setDbEntity
argument_list|(
name|controller
operator|.
name|getCurrentDbEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setObjEntity
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|,
name|AttributeDisplayEvent
block|{
annotation|@
name|Override
name|void
name|fireLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|DataChannelDescriptor
name|dataChannel
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|controller
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dataChannel
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|preferences
operator|.
name|getDomain
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|DataNodeDescriptor
name|dataNode
init|=
name|dataChannel
operator|.
name|getNodeDescriptor
argument_list|(
name|preferences
operator|.
name|getNode
argument_list|()
argument_list|)
decl_stmt|;
name|DataMap
name|dataMap
init|=
name|dataChannel
operator|.
name|getDataMap
argument_list|(
name|preferences
operator|.
name|getDataMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Entity
name|entity
init|=
name|getLastEntity
argument_list|(
name|dataMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Attribute
index|[]
name|attributes
init|=
name|getLastEntityAttributes
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|EntityDisplayEvent
name|entityDisplayEvent
init|=
operator|new
name|EntityDisplayEvent
argument_list|(
name|this
argument_list|,
name|entity
argument_list|,
name|dataMap
argument_list|,
name|dataNode
argument_list|,
name|dataChannel
argument_list|)
decl_stmt|;
name|AttributeDisplayEvent
name|attributeDisplayEvent
init|=
operator|new
name|AttributeDisplayEvent
argument_list|(
name|this
argument_list|,
name|attributes
argument_list|,
name|entity
argument_list|,
name|dataMap
argument_list|,
name|dataChannel
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|instanceof
name|ObjEntity
condition|)
block|{
name|controller
operator|.
name|fireObjEntityDisplayEvent
argument_list|(
name|entityDisplayEvent
argument_list|)
expr_stmt|;
name|controller
operator|.
name|fireObjAttributeDisplayEvent
argument_list|(
name|attributeDisplayEvent
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|entity
operator|instanceof
name|DbEntity
condition|)
block|{
name|controller
operator|.
name|fireDbEntityDisplayEvent
argument_list|(
name|entityDisplayEvent
argument_list|)
expr_stmt|;
name|controller
operator|.
name|fireDbAttributeDisplayEvent
argument_list|(
name|attributeDisplayEvent
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|saveLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|preferences
operator|.
name|setEvent
argument_list|(
name|AttributeDisplayEvent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDomain
argument_list|(
name|controller
operator|.
name|getCurrentDataChanel
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setNode
argument_list|(
name|controller
operator|.
name|getCurrentDataNode
argument_list|()
operator|!=
literal|null
condition|?
name|controller
operator|.
name|getCurrentDataNode
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|""
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDataMap
argument_list|(
name|controller
operator|.
name|getCurrentDataMap
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|controller
operator|.
name|getCurrentObjEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|preferences
operator|.
name|setObjEntity
argument_list|(
name|controller
operator|.
name|getCurrentObjEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setObjAttrs
argument_list|(
name|parseToString
argument_list|(
name|controller
operator|.
name|getCurrentObjAttributes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDbEntity
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|controller
operator|.
name|getCurrentDbEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|preferences
operator|.
name|setDbEntity
argument_list|(
name|controller
operator|.
name|getCurrentDbEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDbAttrs
argument_list|(
name|parseToString
argument_list|(
name|controller
operator|.
name|getCurrentDbAttributes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setObjEntity
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|,
name|RelationshipDisplayEvent
block|{
annotation|@
name|Override
name|void
name|fireLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|DataChannelDescriptor
name|dataChannel
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|controller
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dataChannel
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|preferences
operator|.
name|getDomain
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|DataNodeDescriptor
name|dataNode
init|=
name|dataChannel
operator|.
name|getNodeDescriptor
argument_list|(
name|preferences
operator|.
name|getNode
argument_list|()
argument_list|)
decl_stmt|;
name|DataMap
name|dataMap
init|=
name|dataChannel
operator|.
name|getDataMap
argument_list|(
name|preferences
operator|.
name|getDataMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Entity
name|entity
init|=
name|getLastEntity
argument_list|(
name|dataMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Relationship
index|[]
name|relationships
init|=
name|getLastEntityRelationships
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|EntityDisplayEvent
name|entityDisplayEvent
init|=
operator|new
name|EntityDisplayEvent
argument_list|(
name|this
argument_list|,
name|entity
argument_list|,
name|dataMap
argument_list|,
name|dataNode
argument_list|,
name|dataChannel
argument_list|)
decl_stmt|;
name|RelationshipDisplayEvent
name|displayEvent
init|=
operator|new
name|RelationshipDisplayEvent
argument_list|(
name|this
argument_list|,
name|relationships
argument_list|,
name|entity
argument_list|,
name|dataMap
argument_list|,
name|dataChannel
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|instanceof
name|ObjEntity
condition|)
block|{
name|controller
operator|.
name|fireObjEntityDisplayEvent
argument_list|(
name|entityDisplayEvent
argument_list|)
expr_stmt|;
name|controller
operator|.
name|fireObjRelationshipDisplayEvent
argument_list|(
name|displayEvent
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|entity
operator|instanceof
name|DbEntity
condition|)
block|{
name|controller
operator|.
name|fireDbEntityDisplayEvent
argument_list|(
name|entityDisplayEvent
argument_list|)
expr_stmt|;
name|controller
operator|.
name|fireDbRelationshipDisplayEvent
argument_list|(
name|displayEvent
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|saveLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|preferences
operator|.
name|setEvent
argument_list|(
name|RelationshipDisplayEvent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDomain
argument_list|(
name|controller
operator|.
name|getCurrentDataChanel
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setNode
argument_list|(
name|controller
operator|.
name|getCurrentDataNode
argument_list|()
operator|!=
literal|null
condition|?
name|controller
operator|.
name|getCurrentDataNode
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|""
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDataMap
argument_list|(
name|controller
operator|.
name|getCurrentDataMap
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|controller
operator|.
name|getCurrentObjEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|preferences
operator|.
name|setObjEntity
argument_list|(
name|controller
operator|.
name|getCurrentObjEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setObjRels
argument_list|(
name|parseToString
argument_list|(
name|controller
operator|.
name|getCurrentObjRelationships
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDbEntity
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|controller
operator|.
name|getCurrentDbEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|preferences
operator|.
name|setDbEntity
argument_list|(
name|controller
operator|.
name|getCurrentDbEntity
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDbRels
argument_list|(
name|parseToString
argument_list|(
name|controller
operator|.
name|getCurrentDbRelationships
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setObjEntity
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|,
name|EmbeddableDisplayEvent
block|{
annotation|@
name|Override
name|void
name|fireLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|DataChannelDescriptor
name|dataChannel
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|controller
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dataChannel
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|preferences
operator|.
name|getDomain
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|DataMap
name|dataMap
init|=
name|dataChannel
operator|.
name|getDataMap
argument_list|(
name|preferences
operator|.
name|getDataMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Embeddable
name|embeddable
init|=
name|dataMap
operator|.
name|getEmbeddable
argument_list|(
name|preferences
operator|.
name|getEmbeddable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|embeddable
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EmbeddableDisplayEvent
name|embeddableDisplayEvent
init|=
operator|new
name|EmbeddableDisplayEvent
argument_list|(
name|this
argument_list|,
name|embeddable
argument_list|,
name|dataMap
argument_list|,
name|dataChannel
argument_list|)
decl_stmt|;
name|controller
operator|.
name|fireEmbeddableDisplayEvent
argument_list|(
name|embeddableDisplayEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|saveLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
if|if
condition|(
name|controller
operator|.
name|getCurrentEmbAttributes
argument_list|()
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|EmbeddableAttributeDisplayEvent
operator|.
name|saveLastDisplayEvent
argument_list|(
name|controller
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|preferences
operator|.
name|setEvent
argument_list|(
name|EmbeddableDisplayEvent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDomain
argument_list|(
name|controller
operator|.
name|getCurrentDataChanel
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDataMap
argument_list|(
name|controller
operator|.
name|getCurrentDataMap
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setEmbeddable
argument_list|(
name|controller
operator|.
name|getCurrentEmbeddable
argument_list|()
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|,
name|EmbeddableAttributeDisplayEvent
block|{
annotation|@
name|Override
name|void
name|fireLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|DataChannelDescriptor
name|dataChannel
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|controller
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dataChannel
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|preferences
operator|.
name|getDomain
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|DataMap
name|dataMap
init|=
name|dataChannel
operator|.
name|getDataMap
argument_list|(
name|preferences
operator|.
name|getDataMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Embeddable
name|embeddable
init|=
name|dataMap
operator|.
name|getEmbeddable
argument_list|(
name|preferences
operator|.
name|getEmbeddable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|embeddable
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EmbeddableDisplayEvent
name|embeddableDisplayEvent
init|=
operator|new
name|EmbeddableDisplayEvent
argument_list|(
name|this
argument_list|,
name|embeddable
argument_list|,
name|dataMap
argument_list|,
name|dataChannel
argument_list|)
decl_stmt|;
name|controller
operator|.
name|fireEmbeddableDisplayEvent
argument_list|(
name|embeddableDisplayEvent
argument_list|)
expr_stmt|;
name|EmbeddableAttribute
index|[]
name|embeddableAttributes
init|=
name|getLastEmbeddableAttributes
argument_list|(
name|embeddable
argument_list|)
decl_stmt|;
name|EmbeddableAttributeDisplayEvent
name|attributeDisplayEvent
init|=
operator|new
name|EmbeddableAttributeDisplayEvent
argument_list|(
name|this
argument_list|,
name|embeddable
argument_list|,
name|embeddableAttributes
argument_list|,
name|dataMap
argument_list|,
name|dataChannel
argument_list|)
decl_stmt|;
name|controller
operator|.
name|fireEmbeddableAttributeDisplayEvent
argument_list|(
name|attributeDisplayEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|saveLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|preferences
operator|.
name|setEvent
argument_list|(
name|EmbeddableAttributeDisplayEvent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDomain
argument_list|(
name|controller
operator|.
name|getCurrentDataChanel
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDataMap
argument_list|(
name|controller
operator|.
name|getCurrentDataMap
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setEmbeddable
argument_list|(
name|controller
operator|.
name|getCurrentEmbeddable
argument_list|()
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|EmbeddableAttribute
index|[]
name|currentEmbAttributes
init|=
name|controller
operator|.
name|getCurrentEmbAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentEmbAttributes
operator|==
literal|null
condition|)
block|{
name|preferences
operator|.
name|setEmbAttrs
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|EmbeddableAttribute
name|embeddableAttribute
range|:
name|currentEmbAttributes
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|embeddableAttribute
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|preferences
operator|.
name|setEmbAttrs
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|,
name|ProcedureDisplayEvent
block|{
annotation|@
name|Override
name|void
name|fireLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|DataChannelDescriptor
name|dataChannel
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|controller
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dataChannel
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|preferences
operator|.
name|getDomain
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|DataMap
name|dataMap
init|=
name|dataChannel
operator|.
name|getDataMap
argument_list|(
name|preferences
operator|.
name|getDataMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Procedure
name|procedure
init|=
name|dataMap
operator|.
name|getProcedure
argument_list|(
name|preferences
operator|.
name|getProcedure
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|procedure
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|ProcedureDisplayEvent
name|procedureDisplayEvent
init|=
operator|new
name|ProcedureDisplayEvent
argument_list|(
name|this
argument_list|,
name|procedure
argument_list|,
name|dataMap
argument_list|,
name|dataChannel
argument_list|)
decl_stmt|;
name|controller
operator|.
name|fireProcedureDisplayEvent
argument_list|(
name|procedureDisplayEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|saveLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
if|if
condition|(
name|controller
operator|.
name|getCurrentProcedureParameters
argument_list|()
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|ProcedureParameterDisplayEvent
operator|.
name|saveLastDisplayEvent
argument_list|(
name|controller
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|preferences
operator|.
name|setEvent
argument_list|(
name|ProcedureDisplayEvent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDomain
argument_list|(
name|controller
operator|.
name|getCurrentDataChanel
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDataMap
argument_list|(
name|controller
operator|.
name|getCurrentDataMap
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setProcedure
argument_list|(
name|controller
operator|.
name|getCurrentProcedure
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|,
name|ProcedureParameterDisplayEvent
block|{
annotation|@
name|Override
name|void
name|fireLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|DataChannelDescriptor
name|dataChannel
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|controller
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dataChannel
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|preferences
operator|.
name|getDomain
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|DataMap
name|dataMap
init|=
name|dataChannel
operator|.
name|getDataMap
argument_list|(
name|preferences
operator|.
name|getDataMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Procedure
name|procedure
init|=
name|dataMap
operator|.
name|getProcedure
argument_list|(
name|preferences
operator|.
name|getProcedure
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|procedure
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|ProcedureDisplayEvent
name|procedureDisplayEvent
init|=
operator|new
name|ProcedureDisplayEvent
argument_list|(
name|this
argument_list|,
name|procedure
argument_list|,
name|dataMap
argument_list|,
name|dataChannel
argument_list|)
decl_stmt|;
name|controller
operator|.
name|fireProcedureDisplayEvent
argument_list|(
name|procedureDisplayEvent
argument_list|)
expr_stmt|;
name|ProcedureParameter
index|[]
name|procedureParameters
init|=
name|getLastProcedureParameters
argument_list|(
name|procedure
argument_list|)
decl_stmt|;
name|ProcedureParameterDisplayEvent
name|procedureParameterDisplayEvent
init|=
operator|new
name|ProcedureParameterDisplayEvent
argument_list|(
name|this
argument_list|,
name|procedureParameters
argument_list|,
name|procedure
argument_list|,
name|dataMap
argument_list|,
name|dataChannel
argument_list|)
decl_stmt|;
name|controller
operator|.
name|fireProcedureParameterDisplayEvent
argument_list|(
name|procedureParameterDisplayEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|saveLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|preferences
operator|.
name|setEvent
argument_list|(
name|ProcedureParameterDisplayEvent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDomain
argument_list|(
name|controller
operator|.
name|getCurrentDataChanel
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDataMap
argument_list|(
name|controller
operator|.
name|getCurrentDataMap
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setProcedure
argument_list|(
name|controller
operator|.
name|getCurrentProcedure
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setProcedureParams
argument_list|(
name|parseToString
argument_list|(
name|controller
operator|.
name|getCurrentProcedureParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|,
name|QueryDisplayEvent
block|{
annotation|@
name|Override
name|void
name|fireLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|DataChannelDescriptor
name|dataChannel
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|controller
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dataChannel
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|preferences
operator|.
name|getDomain
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|DataMap
name|dataMap
init|=
name|dataChannel
operator|.
name|getDataMap
argument_list|(
name|preferences
operator|.
name|getDataMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Query
name|query
init|=
name|dataMap
operator|.
name|getQuery
argument_list|(
name|preferences
operator|.
name|getQuery
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|QueryDisplayEvent
name|queryDisplayEvent
init|=
operator|new
name|QueryDisplayEvent
argument_list|(
name|this
argument_list|,
name|query
argument_list|,
name|dataMap
argument_list|,
name|dataChannel
argument_list|)
decl_stmt|;
name|controller
operator|.
name|fireQueryDisplayEvent
argument_list|(
name|queryDisplayEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|saveLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|preferences
operator|.
name|setEvent
argument_list|(
name|QueryDisplayEvent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDomain
argument_list|(
name|controller
operator|.
name|getCurrentDataChanel
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setDataMap
argument_list|(
name|controller
operator|.
name|getCurrentDataMap
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setQuery
argument_list|(
name|controller
operator|.
name|getCurrentQuery
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|,
name|MultipleObjectsDisplayEvent
block|{
annotation|@
name|Override
name|void
name|fireLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|DataChannelDescriptor
name|dataChannel
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|controller
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|String
name|parentObjectName
init|=
name|preferences
operator|.
name|getParentObject
argument_list|()
decl_stmt|;
name|ConfigurationNode
name|parentObject
decl_stmt|;
name|ConfigurationNode
index|[]
name|multipleObjects
decl_stmt|;
if|if
condition|(
name|dataChannel
operator|.
name|getDataMap
argument_list|(
name|parentObjectName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|DataMap
name|dataMap
init|=
name|dataChannel
operator|.
name|getDataMap
argument_list|(
name|parentObjectName
argument_list|)
decl_stmt|;
name|parentObject
operator|=
name|dataMap
expr_stmt|;
name|multipleObjects
operator|=
name|getLastMultipleObjects
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dataChannel
operator|.
name|getNodeDescriptor
argument_list|(
name|parentObjectName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|DataNodeDescriptor
name|dataNode
init|=
name|dataChannel
operator|.
name|getNodeDescriptor
argument_list|(
name|parentObjectName
argument_list|)
decl_stmt|;
name|parentObject
operator|=
name|dataNode
expr_stmt|;
name|multipleObjects
operator|=
name|getLastMultipleObjects
argument_list|(
name|dataNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parentObject
operator|=
name|dataChannel
expr_stmt|;
name|multipleObjects
operator|=
name|getLastMultipleObjects
argument_list|(
name|dataChannel
argument_list|)
expr_stmt|;
block|}
name|MultipleObjectsDisplayEvent
name|multipleDisplayEvent
init|=
operator|new
name|MultipleObjectsDisplayEvent
argument_list|(
name|this
argument_list|,
name|multipleObjects
argument_list|,
name|parentObject
argument_list|)
decl_stmt|;
name|controller
operator|.
name|fireMultipleObjectsDisplayEvent
argument_list|(
name|multipleDisplayEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|saveLastDisplayEvent
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|preferences
operator|.
name|setEvent
argument_list|(
name|MultipleObjectsDisplayEvent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setParentObject
argument_list|(
name|getObjectName
argument_list|(
name|controller
operator|.
name|getCurrentParentPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|multipleObjects
init|=
name|controller
operator|.
name|getCurrentPaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|multipleObjects
operator|==
literal|null
condition|)
block|{
name|preferences
operator|.
name|setMultipleObjects
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|multipleObjects
control|)
block|{
name|String
name|objectName
init|=
name|getObjectName
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|objectName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|objectName
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|preferences
operator|.
name|setMultipleObjects
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|;
specifier|abstract
name|void
name|fireLastDisplayEvent
argument_list|(
name|ProjectController
name|controller
argument_list|)
decl_stmt|;
specifier|abstract
name|void
name|saveLastDisplayEvent
argument_list|(
name|ProjectController
name|controller
argument_list|)
decl_stmt|;
block|}
specifier|private
specifier|static
name|Entity
name|getLastEntity
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
return|return
operator|!
name|preferences
operator|.
name|getObjEntity
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|dataMap
operator|.
name|getObjEntity
argument_list|(
name|preferences
operator|.
name|getObjEntity
argument_list|()
argument_list|)
else|:
name|dataMap
operator|.
name|getDbEntity
argument_list|(
name|preferences
operator|.
name|getDbEntity
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Attribute
index|[]
name|getLastEntityAttributes
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
return|return
operator|(
name|entity
operator|instanceof
name|ObjEntity
operator|)
condition|?
name|getLastObjEntityAttributes
argument_list|(
operator|(
name|ObjEntity
operator|)
name|entity
argument_list|)
else|:
name|getLastDbEntityAttributes
argument_list|(
operator|(
name|DbEntity
operator|)
name|entity
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Relationship
index|[]
name|getLastEntityRelationships
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
return|return
operator|(
name|entity
operator|instanceof
name|ObjEntity
operator|)
condition|?
name|getLastObjEntityRelationships
argument_list|(
operator|(
name|ObjEntity
operator|)
name|entity
argument_list|)
else|:
name|getLastDbEntityRelationships
argument_list|(
operator|(
name|DbEntity
operator|)
name|entity
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ObjAttribute
index|[]
name|getLastObjEntityAttributes
parameter_list|(
name|ObjEntity
name|objEntity
parameter_list|)
block|{
name|List
argument_list|<
name|ObjAttribute
argument_list|>
name|attributeList
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjAttribute
argument_list|>
argument_list|()
decl_stmt|;
name|ObjAttribute
index|[]
name|attributes
init|=
operator|new
name|ObjAttribute
index|[
literal|0
index|]
decl_stmt|;
name|String
name|objAttrs
init|=
name|preferences
operator|.
name|getObjAttrs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|objAttrs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|lastObjAttrs
init|=
name|objAttrs
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|objAttrName
range|:
name|lastObjAttrs
control|)
block|{
name|attributeList
operator|.
name|add
argument_list|(
name|objEntity
operator|.
name|getAttribute
argument_list|(
name|objAttrName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|attributeList
operator|.
name|toArray
argument_list|(
name|attributes
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|DbAttribute
index|[]
name|getLastDbEntityAttributes
parameter_list|(
name|DbEntity
name|dbEntity
parameter_list|)
block|{
name|List
argument_list|<
name|DbAttribute
argument_list|>
name|attributeList
init|=
operator|new
name|ArrayList
argument_list|<
name|DbAttribute
argument_list|>
argument_list|()
decl_stmt|;
name|DbAttribute
index|[]
name|attributes
init|=
operator|new
name|DbAttribute
index|[
literal|0
index|]
decl_stmt|;
name|String
name|dbAttrs
init|=
name|preferences
operator|.
name|getDbAttrs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dbAttrs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|lastDbAttrs
init|=
name|dbAttrs
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|dbAttrName
range|:
name|lastDbAttrs
control|)
block|{
name|attributeList
operator|.
name|add
argument_list|(
name|dbEntity
operator|.
name|getAttribute
argument_list|(
name|dbAttrName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|attributeList
operator|.
name|toArray
argument_list|(
name|attributes
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ObjRelationship
index|[]
name|getLastObjEntityRelationships
parameter_list|(
name|ObjEntity
name|objEntity
parameter_list|)
block|{
name|List
argument_list|<
name|ObjRelationship
argument_list|>
name|relationshipList
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjRelationship
argument_list|>
argument_list|()
decl_stmt|;
name|ObjRelationship
index|[]
name|relationships
init|=
operator|new
name|ObjRelationship
index|[
literal|0
index|]
decl_stmt|;
name|String
name|objRels
init|=
name|preferences
operator|.
name|getObjRels
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|objRels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|lastObjRels
init|=
name|objRels
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|objRelName
range|:
name|lastObjRels
control|)
block|{
name|relationshipList
operator|.
name|add
argument_list|(
name|objEntity
operator|.
name|getRelationship
argument_list|(
name|objRelName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|relationshipList
operator|.
name|toArray
argument_list|(
name|relationships
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|DbRelationship
index|[]
name|getLastDbEntityRelationships
parameter_list|(
name|DbEntity
name|dbEntity
parameter_list|)
block|{
name|List
argument_list|<
name|DbRelationship
argument_list|>
name|relationshipList
init|=
operator|new
name|ArrayList
argument_list|<
name|DbRelationship
argument_list|>
argument_list|()
decl_stmt|;
name|DbRelationship
index|[]
name|relationships
init|=
operator|new
name|DbRelationship
index|[
literal|0
index|]
decl_stmt|;
name|String
name|dbRels
init|=
name|preferences
operator|.
name|getDbRels
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dbRels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|lastDbRels
init|=
name|dbRels
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|dbRelName
range|:
name|lastDbRels
control|)
block|{
name|relationshipList
operator|.
name|add
argument_list|(
name|dbEntity
operator|.
name|getRelationship
argument_list|(
name|dbRelName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|relationshipList
operator|.
name|toArray
argument_list|(
name|relationships
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|EmbeddableAttribute
index|[]
name|getLastEmbeddableAttributes
parameter_list|(
name|Embeddable
name|embeddable
parameter_list|)
block|{
name|List
argument_list|<
name|EmbeddableAttribute
argument_list|>
name|embeddableAttributeList
init|=
operator|new
name|ArrayList
argument_list|<
name|EmbeddableAttribute
argument_list|>
argument_list|()
decl_stmt|;
name|EmbeddableAttribute
index|[]
name|attributes
init|=
operator|new
name|EmbeddableAttribute
index|[
literal|0
index|]
decl_stmt|;
name|String
name|embAttrs
init|=
name|preferences
operator|.
name|getEmbAttrs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|embAttrs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|lastEmbAttrs
init|=
name|embAttrs
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|embAttrName
range|:
name|lastEmbAttrs
control|)
block|{
name|embeddableAttributeList
operator|.
name|add
argument_list|(
name|embeddable
operator|.
name|getAttribute
argument_list|(
name|embAttrName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|embeddableAttributeList
operator|.
name|toArray
argument_list|(
name|attributes
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ProcedureParameter
index|[]
name|getLastProcedureParameters
parameter_list|(
name|Procedure
name|procedure
parameter_list|)
block|{
name|List
argument_list|<
name|ProcedureParameter
argument_list|>
name|procedureParameterList
init|=
operator|new
name|ArrayList
argument_list|<
name|ProcedureParameter
argument_list|>
argument_list|()
decl_stmt|;
name|ProcedureParameter
index|[]
name|parameters
init|=
operator|new
name|ProcedureParameter
index|[
literal|0
index|]
decl_stmt|;
name|String
name|procedureParams
init|=
name|preferences
operator|.
name|getProcedureParams
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|procedureParams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|lastProcedureParams
init|=
name|procedureParams
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|procedureParamName
range|:
name|lastProcedureParams
control|)
block|{
for|for
control|(
name|ProcedureParameter
name|procedureParameter
range|:
name|procedure
operator|.
name|getCallParameters
argument_list|()
control|)
block|{
if|if
condition|(
name|procedureParameter
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|procedureParamName
argument_list|)
condition|)
block|{
name|procedureParameterList
operator|.
name|add
argument_list|(
name|procedureParameter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|procedureParameterList
operator|.
name|toArray
argument_list|(
name|parameters
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ConfigurationNode
index|[]
name|getLastMultipleObjects
parameter_list|(
name|DataChannelDescriptor
name|dataChannel
parameter_list|)
block|{
name|List
argument_list|<
name|ConfigurationNode
argument_list|>
name|configurationNodeList
init|=
operator|new
name|ArrayList
argument_list|<
name|ConfigurationNode
argument_list|>
argument_list|()
decl_stmt|;
name|ConfigurationNode
index|[]
name|nodes
init|=
operator|new
name|ConfigurationNode
index|[
literal|0
index|]
decl_stmt|;
name|String
name|multipleObjects
init|=
name|preferences
operator|.
name|getMultipleObjects
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|multipleObjects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|lastMultipleObjects
init|=
name|multipleObjects
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|outer
label|:
for|for
control|(
name|String
name|objectName
range|:
name|lastMultipleObjects
control|)
block|{
if|if
condition|(
name|dataChannel
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|objectName
argument_list|)
condition|)
block|{
name|configurationNodeList
operator|.
name|add
argument_list|(
name|dataChannel
argument_list|)
expr_stmt|;
continue|continue
name|outer
continue|;
block|}
for|for
control|(
name|DataNodeDescriptor
name|dataNode
range|:
name|dataChannel
operator|.
name|getNodeDescriptors
argument_list|()
control|)
block|{
if|if
condition|(
name|dataNode
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|objectName
argument_list|)
condition|)
block|{
name|configurationNodeList
operator|.
name|add
argument_list|(
name|dataNode
argument_list|)
expr_stmt|;
continue|continue
name|outer
continue|;
block|}
block|}
for|for
control|(
name|DataMap
name|dataMap
range|:
name|dataChannel
operator|.
name|getDataMaps
argument_list|()
control|)
block|{
if|if
condition|(
name|dataMap
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|objectName
argument_list|)
condition|)
block|{
name|configurationNodeList
operator|.
name|add
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
continue|continue
name|outer
continue|;
block|}
block|}
block|}
block|}
return|return
name|configurationNodeList
operator|.
name|toArray
argument_list|(
name|nodes
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ConfigurationNode
index|[]
name|getLastMultipleObjects
parameter_list|(
name|DataNodeDescriptor
name|dataNode
parameter_list|)
block|{
name|List
argument_list|<
name|ConfigurationNode
argument_list|>
name|configurationNodeList
init|=
operator|new
name|ArrayList
argument_list|<
name|ConfigurationNode
argument_list|>
argument_list|()
decl_stmt|;
name|ConfigurationNode
index|[]
name|nodes
init|=
operator|new
name|ConfigurationNode
index|[
literal|0
index|]
decl_stmt|;
name|String
name|multipleObjects
init|=
name|preferences
operator|.
name|getMultipleObjects
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|multipleObjects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|lastMultipleObjects
init|=
name|multipleObjects
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|objectName
range|:
name|lastMultipleObjects
control|)
block|{
if|if
condition|(
name|dataNode
operator|.
name|getDataMapNames
argument_list|()
operator|.
name|contains
argument_list|(
name|objectName
argument_list|)
condition|)
block|{
name|configurationNodeList
operator|.
name|add
argument_list|(
name|dataNode
operator|.
name|getDataChannelDescriptor
argument_list|()
operator|.
name|getDataMap
argument_list|(
name|objectName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|configurationNodeList
operator|.
name|toArray
argument_list|(
name|nodes
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ConfigurationNode
index|[]
name|getLastMultipleObjects
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
name|List
argument_list|<
name|ConfigurationNode
argument_list|>
name|configurationNodeList
init|=
operator|new
name|ArrayList
argument_list|<
name|ConfigurationNode
argument_list|>
argument_list|()
decl_stmt|;
name|ConfigurationNode
index|[]
name|nodes
init|=
operator|new
name|ConfigurationNode
index|[
literal|0
index|]
decl_stmt|;
name|String
name|multipleObjects
init|=
name|preferences
operator|.
name|getMultipleObjects
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|multipleObjects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|lastMultipleObjects
init|=
name|multipleObjects
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|objectName
range|:
name|lastMultipleObjects
control|)
block|{
if|if
condition|(
name|dataMap
operator|.
name|getObjEntity
argument_list|(
name|objectName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|configurationNodeList
operator|.
name|add
argument_list|(
name|dataMap
operator|.
name|getObjEntity
argument_list|(
name|objectName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dataMap
operator|.
name|getDbEntity
argument_list|(
name|objectName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|configurationNodeList
operator|.
name|add
argument_list|(
name|dataMap
operator|.
name|getDbEntity
argument_list|(
name|objectName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dataMap
operator|.
name|getEmbeddable
argument_list|(
name|objectName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|configurationNodeList
operator|.
name|add
argument_list|(
name|dataMap
operator|.
name|getEmbeddable
argument_list|(
name|objectName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dataMap
operator|.
name|getProcedure
argument_list|(
name|objectName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|configurationNodeList
operator|.
name|add
argument_list|(
name|dataMap
operator|.
name|getProcedure
argument_list|(
name|objectName
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dataMap
operator|.
name|getQuery
argument_list|(
name|objectName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|configurationNodeList
operator|.
name|add
argument_list|(
name|dataMap
operator|.
name|getQuery
argument_list|(
name|objectName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|configurationNodeList
operator|.
name|toArray
argument_list|(
name|nodes
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getObjectName
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|CayenneMapEntry
condition|)
block|{
return|return
operator|(
operator|(
name|CayenneMapEntry
operator|)
name|object
operator|)
operator|.
name|getName
argument_list|()
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|DataChannelDescriptor
condition|)
block|{
return|return
operator|(
operator|(
name|DataChannelDescriptor
operator|)
name|object
operator|)
operator|.
name|getName
argument_list|()
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|DataNodeDescriptor
condition|)
block|{
return|return
operator|(
operator|(
name|DataNodeDescriptor
operator|)
name|object
operator|)
operator|.
name|getName
argument_list|()
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|DataMap
condition|)
block|{
return|return
operator|(
operator|(
name|DataMap
operator|)
name|object
operator|)
operator|.
name|getName
argument_list|()
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Embeddable
condition|)
block|{
return|return
operator|(
operator|(
name|Embeddable
operator|)
name|object
operator|)
operator|.
name|getClassName
argument_list|()
return|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Query
condition|)
block|{
return|return
operator|(
operator|(
name|Query
operator|)
name|object
operator|)
operator|.
name|getName
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|parseToString
parameter_list|(
name|CayenneMapEntry
index|[]
name|array
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|CayenneMapEntry
name|entry
range|:
name|array
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

