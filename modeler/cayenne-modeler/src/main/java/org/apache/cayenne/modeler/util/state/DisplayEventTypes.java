begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|state
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|AttributeDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataMapDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataNodeDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DomainDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|EmbeddableAttributeDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|EmbeddableDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|EntityDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|MultipleObjectsDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ProcedureDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ProcedureParameterDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|QueryDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|RelationshipDisplayEvent
import|;
end_import

begin_enum
specifier|public
enum|enum
name|DisplayEventTypes
block|{
name|DomainDisplayEvent
block|{
annotation|@
name|Override
name|DisplayEventType
name|createDisplayEventType
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
return|return
operator|new
name|DomainDisplayEventType
argument_list|(
name|controller
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|DomainDisplayEvent
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
block|,
name|DataNodeDisplayEvent
block|{
annotation|@
name|Override
name|DisplayEventType
name|createDisplayEventType
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
return|return
operator|new
name|DataNodeDisplayEventType
argument_list|(
name|controller
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|DataNodeDisplayEvent
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
block|,
name|DataMapDisplayEvent
block|{
annotation|@
name|Override
name|DisplayEventType
name|createDisplayEventType
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
return|return
operator|new
name|DataMapDisplayEventType
argument_list|(
name|controller
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|DataMapDisplayEvent
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
block|,
name|EntityDisplayEvent
block|{
annotation|@
name|Override
name|DisplayEventType
name|createDisplayEventType
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
if|if
condition|(
name|controller
operator|.
name|getCurrentObjAttributes
argument_list|()
operator|.
name|length
operator|!=
literal|0
operator|||
name|controller
operator|.
name|getCurrentDbAttributes
argument_list|()
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
return|return
operator|new
name|AttributeDisplayEventType
argument_list|(
name|controller
argument_list|)
return|;
block|}
if|else if
condition|(
name|controller
operator|.
name|getCurrentObjRelationships
argument_list|()
operator|.
name|length
operator|!=
literal|0
operator|||
name|controller
operator|.
name|getCurrentDbRelationships
argument_list|()
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
return|return
operator|new
name|RelationshipDisplayEventType
argument_list|(
name|controller
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|EntityDisplayEventType
argument_list|(
name|controller
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|EntityDisplayEvent
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
block|,
name|AttributeDisplayEvent
block|{
annotation|@
name|Override
name|DisplayEventType
name|createDisplayEventType
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
return|return
operator|new
name|AttributeDisplayEventType
argument_list|(
name|controller
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|AttributeDisplayEvent
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
block|,
name|RelationshipDisplayEvent
block|{
annotation|@
name|Override
name|DisplayEventType
name|createDisplayEventType
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
return|return
operator|new
name|RelationshipDisplayEventType
argument_list|(
name|controller
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|RelationshipDisplayEvent
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
block|,
name|EmbeddableDisplayEvent
block|{
annotation|@
name|Override
name|DisplayEventType
name|createDisplayEventType
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
if|if
condition|(
name|controller
operator|.
name|getCurrentEmbAttributes
argument_list|()
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
return|return
operator|new
name|EmbeddableAttributeDisplayEventType
argument_list|(
name|controller
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|EmbeddableDisplayEventType
argument_list|(
name|controller
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|EmbeddableDisplayEvent
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
block|,
name|EmbeddableAttributeDisplayEvent
block|{
annotation|@
name|Override
name|DisplayEventType
name|createDisplayEventType
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
return|return
operator|new
name|EmbeddableAttributeDisplayEventType
argument_list|(
name|controller
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|EmbeddableAttributeDisplayEvent
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
block|,
name|ProcedureDisplayEvent
block|{
annotation|@
name|Override
name|DisplayEventType
name|createDisplayEventType
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
if|if
condition|(
name|controller
operator|.
name|getCurrentProcedureParameters
argument_list|()
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
return|return
operator|new
name|ProcedureParameterDisplayEventType
argument_list|(
name|controller
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ProcedureDisplayEventType
argument_list|(
name|controller
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|ProcedureDisplayEvent
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
block|,
name|ProcedureParameterDisplayEvent
block|{
annotation|@
name|Override
name|DisplayEventType
name|createDisplayEventType
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
return|return
operator|new
name|ProcedureParameterDisplayEventType
argument_list|(
name|controller
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|ProcedureParameterDisplayEvent
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
block|,
name|QueryDisplayEvent
block|{
annotation|@
name|Override
name|DisplayEventType
name|createDisplayEventType
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
return|return
operator|new
name|QueryDisplayEventType
argument_list|(
name|controller
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|QueryDisplayEvent
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
block|,
name|MultipleObjectsDisplayEvent
block|{
annotation|@
name|Override
name|DisplayEventType
name|createDisplayEventType
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
return|return
operator|new
name|MultipleObjectsDisplayEventType
argument_list|(
name|controller
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|MultipleObjectsDisplayEvent
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
block|;
specifier|abstract
name|DisplayEventType
name|createDisplayEventType
argument_list|(
name|ProjectController
name|controller
argument_list|)
decl_stmt|;
block|}
end_enum

end_unit

