begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|dbentity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|CardLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ItemEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ItemListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EventObject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultComboBoxModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextField
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JToolBar
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|DefaultFormBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|FormLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EntityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|ActionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateAttributeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateObjEntityAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateRelationshipAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|DbEntityCounterpartAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|DbEntitySyncAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|ExistingSelectionProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DbEntityDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|EntityDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|graph
operator|.
name|action
operator|.
name|ShowGraphEntityAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|ExpressionConvertor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|TextAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|ValidationException
import|;
end_import

begin_comment
comment|/**  * Detail view of the DbEntity properties.  *   */
end_comment

begin_class
specifier|public
class|class
name|DbEntityTab
extends|extends
name|JPanel
implements|implements
name|ExistingSelectionProcessor
implements|,
name|DbEntityDisplayListener
block|{
specifier|static
specifier|final
name|String
name|PK_DEFAULT_GENERATOR
init|=
literal|"Cayenne-Generated (Default)"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PK_DB_GENERATOR
init|=
literal|"Database-Generated"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PK_CUSTOM_SEQUENCE_GENERATOR
init|=
literal|"Custom Sequence"
decl_stmt|;
specifier|static
specifier|final
name|String
index|[]
name|PK_GENERATOR_TYPES
init|=
operator|new
name|String
index|[]
block|{
name|PK_DEFAULT_GENERATOR
block|,
name|PK_DB_GENERATOR
block|,
name|PK_CUSTOM_SEQUENCE_GENERATOR
block|}
decl_stmt|;
specifier|protected
name|ProjectController
name|mediator
decl_stmt|;
specifier|protected
name|TextAdapter
name|name
decl_stmt|;
specifier|protected
name|TextAdapter
name|catalog
decl_stmt|;
specifier|protected
name|TextAdapter
name|schema
decl_stmt|;
specifier|protected
name|TextAdapter
name|qualifier
decl_stmt|;
specifier|protected
name|JLabel
name|catalogLabel
decl_stmt|;
specifier|protected
name|JLabel
name|schemaLabel
decl_stmt|;
specifier|protected
name|JComboBox
name|pkGeneratorType
decl_stmt|;
specifier|protected
name|JPanel
name|pkGeneratorDetail
decl_stmt|;
specifier|protected
name|CardLayout
name|pkGeneratorDetailLayout
decl_stmt|;
specifier|private
name|JToolBar
name|toolBar
decl_stmt|;
specifier|public
name|DbEntityTab
parameter_list|(
name|ProjectController
name|mediator
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|mediator
operator|=
name|mediator
expr_stmt|;
name|initView
argument_list|()
expr_stmt|;
name|initController
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initView
parameter_list|()
block|{
name|toolBar
operator|=
operator|new
name|JToolBar
argument_list|()
expr_stmt|;
name|ActionManager
name|actionManager
init|=
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getActionManager
argument_list|()
decl_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|actionManager
operator|.
name|getAction
argument_list|(
name|CreateObjEntityAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|()
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|actionManager
operator|.
name|getAction
argument_list|(
name|DbEntitySyncAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|()
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|actionManager
operator|.
name|getAction
argument_list|(
name|CreateAttributeAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|()
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|actionManager
operator|.
name|getAction
argument_list|(
name|CreateRelationshipAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|()
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|actionManager
operator|.
name|getAction
argument_list|(
name|ShowGraphEntityAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|()
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|actionManager
operator|.
name|getAction
argument_list|(
name|DbEntityCounterpartAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|()
argument_list|)
expr_stmt|;
comment|// create widgets
name|name
operator|=
operator|new
name|TextAdapter
argument_list|(
operator|new
name|JTextField
argument_list|()
argument_list|)
block|{
specifier|protected
name|void
name|updateModel
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|setEntityName
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|catalogLabel
operator|=
operator|new
name|JLabel
argument_list|(
literal|"Catalog:"
argument_list|)
expr_stmt|;
name|catalog
operator|=
operator|new
name|TextAdapter
argument_list|(
operator|new
name|JTextField
argument_list|()
argument_list|)
block|{
specifier|protected
name|void
name|updateModel
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|ValidationException
block|{
name|setCatalog
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|schemaLabel
operator|=
operator|new
name|JLabel
argument_list|(
literal|"Schema:"
argument_list|)
expr_stmt|;
name|schema
operator|=
operator|new
name|TextAdapter
argument_list|(
operator|new
name|JTextField
argument_list|()
argument_list|)
block|{
specifier|protected
name|void
name|updateModel
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|ValidationException
block|{
name|setSchema
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|qualifier
operator|=
operator|new
name|TextAdapter
argument_list|(
operator|new
name|JTextField
argument_list|()
argument_list|)
block|{
specifier|protected
name|void
name|updateModel
parameter_list|(
name|String
name|qualifier
parameter_list|)
block|{
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|pkGeneratorType
operator|=
operator|new
name|JComboBox
argument_list|()
expr_stmt|;
name|pkGeneratorType
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pkGeneratorType
operator|.
name|setModel
argument_list|(
operator|new
name|DefaultComboBoxModel
argument_list|(
name|PK_GENERATOR_TYPES
argument_list|)
argument_list|)
expr_stmt|;
name|pkGeneratorDetailLayout
operator|=
operator|new
name|CardLayout
argument_list|()
expr_stmt|;
name|pkGeneratorDetail
operator|=
operator|new
name|JPanel
argument_list|(
name|pkGeneratorDetailLayout
argument_list|)
expr_stmt|;
name|pkGeneratorDetail
operator|.
name|add
argument_list|(
operator|new
name|PKDefaultGeneratorPanel
argument_list|(
name|mediator
argument_list|)
argument_list|,
name|PK_DEFAULT_GENERATOR
argument_list|)
expr_stmt|;
name|pkGeneratorDetail
operator|.
name|add
argument_list|(
operator|new
name|PKDBGeneratorPanel
argument_list|(
name|mediator
argument_list|)
argument_list|,
name|PK_DB_GENERATOR
argument_list|)
expr_stmt|;
name|pkGeneratorDetail
operator|.
name|add
argument_list|(
operator|new
name|PKCustomSequenceGeneratorPanel
argument_list|(
name|mediator
argument_list|)
argument_list|,
name|PK_CUSTOM_SEQUENCE_GENERATOR
argument_list|)
expr_stmt|;
comment|// assemble
name|FormLayout
name|layout
init|=
operator|new
name|FormLayout
argument_list|(
literal|"right:pref, 3dlu, fill:200dlu"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|DefaultFormBuilder
name|builder
init|=
operator|new
name|DefaultFormBuilder
argument_list|(
name|layout
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setDefaultDialogBorder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|appendSeparator
argument_list|(
literal|"DbEntity Configuration"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"DbEntity Name:"
argument_list|,
name|name
operator|.
name|getComponent
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|catalogLabel
argument_list|,
name|catalog
operator|.
name|getComponent
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|schemaLabel
argument_list|,
name|schema
operator|.
name|getComponent
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Qualifier"
argument_list|,
name|qualifier
operator|.
name|getComponent
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|appendSeparator
argument_list|(
literal|"Primary Key"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"PK Generation Strategy:"
argument_list|,
name|pkGeneratorType
argument_list|)
expr_stmt|;
name|JPanel
name|mainPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|mainPanel
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|mainPanel
operator|.
name|add
argument_list|(
name|builder
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
name|mainPanel
operator|.
name|add
argument_list|(
name|pkGeneratorDetail
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|toolBar
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|mainPanel
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initController
parameter_list|()
block|{
name|mediator
operator|.
name|addDbEntityDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|pkGeneratorType
operator|.
name|addItemListener
argument_list|(
operator|new
name|ItemListener
argument_list|()
block|{
specifier|public
name|void
name|itemStateChanged
parameter_list|(
name|ItemEvent
name|e
parameter_list|)
block|{
name|pkGeneratorDetailLayout
operator|.
name|show
argument_list|(
name|pkGeneratorDetail
argument_list|,
operator|(
name|String
operator|)
name|pkGeneratorType
operator|.
name|getSelectedItem
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pkGeneratorDetail
operator|.
name|getComponentCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|pkGeneratorDetail
operator|.
name|getComponent
argument_list|(
name|i
argument_list|)
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|DbEntity
name|entity
init|=
name|mediator
operator|.
name|getCurrentDbEntity
argument_list|()
decl_stmt|;
name|PKGeneratorPanel
name|panel
init|=
operator|(
name|PKGeneratorPanel
operator|)
name|pkGeneratorDetail
operator|.
name|getComponent
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|panel
operator|.
name|onInit
argument_list|(
name|entity
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|processExistingSelection
parameter_list|(
name|EventObject
name|e
parameter_list|)
block|{
name|EntityDisplayEvent
name|ede
init|=
operator|new
name|EntityDisplayEvent
argument_list|(
name|this
argument_list|,
name|mediator
operator|.
name|getCurrentDbEntity
argument_list|()
argument_list|,
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|,
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
decl_stmt|;
name|mediator
operator|.
name|fireDbEntityDisplayEvent
argument_list|(
name|ede
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|currentDbEntityChanged
parameter_list|(
name|EntityDisplayEvent
name|e
parameter_list|)
block|{
name|DbEntity
name|entity
init|=
operator|(
name|DbEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// if entity hasn't changed, still notify PK Generator panels, as entity
comment|// PK may
comment|// have changed...
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pkGeneratorDetail
operator|.
name|getComponentCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
operator|(
operator|(
name|PKGeneratorPanel
operator|)
name|pkGeneratorDetail
operator|.
name|getComponent
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|setDbEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
name|name
operator|.
name|setText
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setText
argument_list|(
name|entity
operator|.
name|getCatalog
argument_list|()
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setText
argument_list|(
name|entity
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|qualifier
operator|.
name|setText
argument_list|(
operator|new
name|ExpressionConvertor
argument_list|()
operator|.
name|valueAsString
argument_list|(
name|entity
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|type
init|=
name|PK_DEFAULT_GENERATOR
decl_stmt|;
if|if
condition|(
name|entity
operator|.
name|getPrimaryKeyGenerator
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|PK_CUSTOM_SEQUENCE_GENERATOR
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|DbAttribute
name|a
range|:
name|entity
operator|.
name|getPrimaryKeys
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|isGenerated
argument_list|()
condition|)
block|{
name|type
operator|=
name|PK_DB_GENERATOR
expr_stmt|;
break|break;
block|}
block|}
block|}
name|catalogLabel
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|getComponent
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|schemaLabel
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|schema
operator|.
name|getComponent
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pkGeneratorDetail
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pkGeneratorType
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pkGeneratorType
operator|.
name|setSelectedItem
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|pkGeneratorDetailLayout
operator|.
name|show
argument_list|(
name|pkGeneratorDetail
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|entity
operator|.
name|getDataMap
argument_list|()
operator|.
name|getMappedEntities
argument_list|(
name|entity
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|toolBar
operator|.
name|getComponentAtIndex
argument_list|(
literal|1
argument_list|)
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|getComponentAtIndex
argument_list|(
literal|7
argument_list|)
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toolBar
operator|.
name|getComponentAtIndex
argument_list|(
literal|1
argument_list|)
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|getComponentAtIndex
argument_list|(
literal|7
argument_list|)
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|setEntityName
parameter_list|(
name|String
name|newName
parameter_list|)
block|{
if|if
condition|(
name|newName
operator|!=
literal|null
operator|&&
name|newName
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|newName
operator|=
literal|null
expr_stmt|;
block|}
name|DbEntity
name|entity
init|=
name|mediator
operator|.
name|getCurrentDbEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|==
literal|null
operator|||
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|newName
argument_list|,
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|newName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Entity name is required."
argument_list|)
throw|;
block|}
if|else if
condition|(
name|entity
operator|.
name|getDataMap
argument_list|()
operator|.
name|getDbEntity
argument_list|(
name|newName
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// completely new name, set new name for entity
name|EntityEvent
name|e
init|=
operator|new
name|EntityEvent
argument_list|(
name|this
argument_list|,
name|entity
argument_list|,
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|entity
operator|.
name|setName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
comment|// ProjectUtil.setDbEntityName(entity, newName);
name|mediator
operator|.
name|fireDbEntityEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// there is an entity with the same name
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"There is another entity with name '"
operator|+
name|newName
operator|+
literal|"'."
argument_list|)
throw|;
block|}
block|}
name|void
name|setCatalog
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|!=
literal|null
operator|&&
name|text
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|text
operator|=
literal|null
expr_stmt|;
block|}
name|DbEntity
name|ent
init|=
name|mediator
operator|.
name|getCurrentDbEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|ent
operator|!=
literal|null
operator|&&
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|ent
operator|.
name|getCatalog
argument_list|()
argument_list|,
name|text
argument_list|)
condition|)
block|{
name|ent
operator|.
name|setCatalog
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireDbEntityEvent
argument_list|(
operator|new
name|EntityEvent
argument_list|(
name|this
argument_list|,
name|ent
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|setSchema
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|!=
literal|null
operator|&&
name|text
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|text
operator|=
literal|null
expr_stmt|;
block|}
name|DbEntity
name|ent
init|=
name|mediator
operator|.
name|getCurrentDbEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|ent
operator|!=
literal|null
operator|&&
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|ent
operator|.
name|getSchema
argument_list|()
argument_list|,
name|text
argument_list|)
condition|)
block|{
name|ent
operator|.
name|setSchema
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireDbEntityEvent
argument_list|(
operator|new
name|EntityEvent
argument_list|(
name|this
argument_list|,
name|ent
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|setQualifier
parameter_list|(
name|String
name|qualifier
parameter_list|)
block|{
if|if
condition|(
name|qualifier
operator|!=
literal|null
operator|&&
name|qualifier
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|qualifier
operator|=
literal|null
expr_stmt|;
block|}
name|DbEntity
name|ent
init|=
name|mediator
operator|.
name|getCurrentDbEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|ent
operator|!=
literal|null
operator|&&
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|ent
operator|.
name|getQualifier
argument_list|()
argument_list|,
name|qualifier
argument_list|)
condition|)
block|{
name|ExpressionConvertor
name|convertor
init|=
operator|new
name|ExpressionConvertor
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|oldQualifier
init|=
name|convertor
operator|.
name|valueAsString
argument_list|(
name|ent
operator|.
name|getQualifier
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|oldQualifier
argument_list|,
name|qualifier
argument_list|)
condition|)
block|{
name|Expression
name|exp
init|=
operator|(
name|Expression
operator|)
name|convertor
operator|.
name|stringAsValue
argument_list|(
name|qualifier
argument_list|)
decl_stmt|;
name|ent
operator|.
name|setQualifier
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireDbEntityEvent
argument_list|(
operator|new
name|EntityEvent
argument_list|(
name|this
argument_list|,
name|ent
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// unparsable qualifier
throw|throw
operator|new
name|ValidationException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

