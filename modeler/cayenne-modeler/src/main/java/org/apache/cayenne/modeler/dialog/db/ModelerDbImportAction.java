begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
package|;
end_package

begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|event
operator|.
name|DataMapEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|DataSourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|server
operator|.
name|DbAdapterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|MapLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|MapEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|ProjectSaver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
operator|.
name|dbimport
operator|.
name|DbImportAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
operator|.
name|dbimport
operator|.
name|DefaultDbImportAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|tools
operator|.
name|dbimport
operator|.
name|DbImportConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_class
specifier|public
class|class
name|ModelerDbImportAction
implements|implements
name|DbImportAction
block|{
specifier|private
specifier|final
name|Log
name|logger
decl_stmt|;
specifier|private
specifier|final
name|DbLoaderHelper
name|dbLoaderHelper
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|ProjectSaver
name|projectSaver
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DataSourceFactory
name|dataSourceFactory
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|DbAdapterFactory
name|adapterFactory
decl_stmt|;
annotation|@
name|Inject
specifier|private
name|MapLoader
name|mapLoader
decl_stmt|;
specifier|public
name|ModelerDbImportAction
parameter_list|(
name|Log
name|logger
parameter_list|,
name|DbLoaderHelper
name|dbLoaderHelper
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|dbLoaderHelper
operator|=
name|dbLoaderHelper
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|DbImportConfiguration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|dbLoaderHelper
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Before using execute method you must set dbLoaderHelper"
argument_list|)
throw|;
block|}
operator|new
name|DefaultDbImportAction
argument_list|(
name|logger
argument_list|,
name|projectSaver
argument_list|,
name|dataSourceFactory
argument_list|,
name|adapterFactory
argument_list|,
name|mapLoader
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|DataMap
name|loadExistingDataMap
parameter_list|(
name|File
name|dataMapFile
parameter_list|)
block|{
return|return
name|dbLoaderHelper
operator|.
name|getDataMap
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|saveLoaded
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
name|dbLoaderHelper
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|ProjectController
name|mediator
init|=
name|dbLoaderHelper
operator|.
name|getMediator
argument_list|()
decl_stmt|;
if|if
condition|(
name|mediator
operator|.
name|getCurrentDataMap
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|mediator
operator|.
name|fireDataMapEvent
argument_list|(
operator|new
name|DataMapEvent
argument_list|(
name|Application
operator|.
name|getFrame
argument_list|()
argument_list|,
name|dataMap
argument_list|,
name|MapEvent
operator|.
name|REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireDataMapEvent
argument_list|(
operator|new
name|DataMapEvent
argument_list|(
name|Application
operator|.
name|getFrame
argument_list|()
argument_list|,
name|dataMap
argument_list|,
name|MapEvent
operator|.
name|ADD
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DataChannelDescriptor
name|currentDomain
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Resource
name|baseResource
init|=
name|currentDomain
operator|.
name|getConfigurationSource
argument_list|()
decl_stmt|;
comment|// this will be new data map so need to set configuration source
comment|// for it
if|if
condition|(
name|baseResource
operator|!=
literal|null
condition|)
block|{
name|Resource
name|dataMapResource
init|=
name|baseResource
operator|.
name|getRelativeResource
argument_list|(
name|dataMap
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|dataMap
operator|.
name|setConfigurationSource
argument_list|(
name|dataMapResource
argument_list|)
expr_stmt|;
block|}
name|mediator
operator|.
name|addDataMap
argument_list|(
name|Application
operator|.
name|getFrame
argument_list|()
argument_list|,
name|dataMap
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|DataMap
name|load
parameter_list|(
name|DbImportConfiguration
name|config
parameter_list|,
name|DbAdapter
name|adapter
parameter_list|,
name|Connection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|dbLoaderHelper
operator|.
name|getLoader
argument_list|()
operator|.
name|load
argument_list|(
name|config
operator|.
name|getDbLoaderConfig
argument_list|()
argument_list|)
return|;
block|}
block|}
operator|.
name|execute
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

