begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|components
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Insets
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|AbstractBorder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|Border
import|;
end_import

begin_comment
comment|/**  * Line border only on top side of the component  *  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|TopBorder
extends|extends
name|AbstractBorder
block|{
specifier|private
specifier|static
specifier|final
name|Color
name|DEFAULT_COLOR
init|=
name|Color
operator|.
name|LIGHT_GRAY
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Border
name|DEFAULT_BORDER
init|=
operator|new
name|TopBorder
argument_list|(
name|DEFAULT_COLOR
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|int
name|thickness
decl_stmt|;
specifier|private
name|Color
name|color
decl_stmt|;
specifier|public
specifier|static
name|Border
name|create
parameter_list|()
block|{
return|return
name|DEFAULT_BORDER
return|;
block|}
specifier|public
specifier|static
name|Border
name|create
parameter_list|(
name|int
name|thickness
parameter_list|)
block|{
return|return
operator|new
name|TopBorder
argument_list|(
name|DEFAULT_COLOR
argument_list|,
name|thickness
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Border
name|create
parameter_list|(
name|Color
name|color
parameter_list|)
block|{
return|return
operator|new
name|TopBorder
argument_list|(
name|color
argument_list|,
literal|1
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Border
name|create
parameter_list|(
name|Color
name|color
parameter_list|,
name|int
name|thickness
parameter_list|)
block|{
return|return
operator|new
name|TopBorder
argument_list|(
name|color
argument_list|,
name|thickness
argument_list|)
return|;
block|}
specifier|public
name|TopBorder
parameter_list|(
name|Color
name|color
parameter_list|,
name|int
name|thickness
parameter_list|)
block|{
name|this
operator|.
name|color
operator|=
name|color
expr_stmt|;
name|this
operator|.
name|thickness
operator|=
name|thickness
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|paintBorder
parameter_list|(
name|Component
name|c
parameter_list|,
name|Graphics
name|g
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
if|if
condition|(
operator|(
name|this
operator|.
name|thickness
operator|>
literal|0
operator|)
operator|&&
operator|(
name|g
operator|instanceof
name|Graphics2D
operator|)
condition|)
block|{
name|Graphics2D
name|g2d
init|=
operator|(
name|Graphics2D
operator|)
name|g
decl_stmt|;
name|Color
name|oldColor
init|=
name|g2d
operator|.
name|getColor
argument_list|()
decl_stmt|;
name|g2d
operator|.
name|setColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|g2d
operator|.
name|setBackground
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|g2d
operator|.
name|drawRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|y
operator|+
name|thickness
operator|-
literal|1
argument_list|)
expr_stmt|;
name|g2d
operator|.
name|setColor
argument_list|(
name|oldColor
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Insets
name|getBorderInsets
parameter_list|(
name|Component
name|c
parameter_list|,
name|Insets
name|insets
parameter_list|)
block|{
name|insets
operator|.
name|set
argument_list|(
name|thickness
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|insets
return|;
block|}
block|}
end_class

end_unit

