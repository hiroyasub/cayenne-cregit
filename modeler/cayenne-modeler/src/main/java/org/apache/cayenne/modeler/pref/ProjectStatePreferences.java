begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|pref
operator|.
name|RenamedPreferences
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|Preferences
import|;
end_import

begin_class
specifier|public
class|class
name|ProjectStatePreferences
extends|extends
name|RenamedPreferences
block|{
specifier|private
name|String
name|event
decl_stmt|;
specifier|private
name|String
name|domain
decl_stmt|;
specifier|private
name|String
name|node
decl_stmt|;
specifier|private
name|String
name|dataMap
decl_stmt|;
specifier|private
name|String
name|objEntity
decl_stmt|;
specifier|private
name|String
name|dbEntity
decl_stmt|;
specifier|private
name|String
name|embeddable
decl_stmt|;
specifier|private
name|String
name|embAttrs
decl_stmt|;
specifier|private
name|String
name|objAttrs
decl_stmt|;
specifier|private
name|String
name|dbAttrs
decl_stmt|;
specifier|private
name|String
name|objRels
decl_stmt|;
specifier|private
name|String
name|dbRels
decl_stmt|;
specifier|private
name|String
name|procedure
decl_stmt|;
specifier|private
name|String
name|procedureParams
decl_stmt|;
specifier|private
name|String
name|query
decl_stmt|;
specifier|private
name|String
name|multipleObjects
decl_stmt|;
specifier|private
name|String
name|parentObject
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EVENT_PROPERTY
init|=
literal|"event"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DOMAIN_PROPERTY
init|=
literal|"domain"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NODE_PROPERTY
init|=
literal|"node"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DATA_MAP_PROPERTY
init|=
literal|"dataMap"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OBJ_ENTITY_PROPERTY
init|=
literal|"objEntity"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DB_ENTITY_PROPERTY
init|=
literal|"dbEntity"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EMBEDDABLE_PROPERTY
init|=
literal|"embeddable"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EMBEDDABLE_ATTRS_PROPERTY
init|=
literal|"embAttrs"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OBJ_ATTRS_PROPERTY
init|=
literal|"objAttrs"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DB_ATTRS_PROPERTY
init|=
literal|"dbAttrs"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OBJ_RELS_PROPERTY
init|=
literal|"objRels"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DB_RELS_PROPERTY
init|=
literal|"dbRels"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROCEDURE_PROPERTY
init|=
literal|"procedure"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROCEDURE_PARAMS_PROPERTY
init|=
literal|"procedureParams"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_PROPERTY
init|=
literal|"query"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MULTIPLE_OBJECTS_PROPERTY
init|=
literal|"multipleObjects"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PARENT_OBJECT_PROPERTY
init|=
literal|"parentObject"
decl_stmt|;
specifier|public
name|ProjectStatePreferences
parameter_list|(
name|Preferences
name|pref
parameter_list|)
block|{
name|super
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getEvent
parameter_list|()
block|{
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
name|event
operator|=
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|EVENT_PROPERTY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|event
return|;
block|}
specifier|public
name|void
name|setEvent
parameter_list|(
name|String
name|event
parameter_list|)
block|{
name|this
operator|.
name|event
operator|=
name|event
expr_stmt|;
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|EVENT_PROPERTY
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getDomain
parameter_list|()
block|{
if|if
condition|(
name|domain
operator|==
literal|null
condition|)
block|{
name|domain
operator|=
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|DOMAIN_PROPERTY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|domain
return|;
block|}
specifier|public
name|void
name|setDomain
parameter_list|(
name|String
name|domain
parameter_list|)
block|{
name|this
operator|.
name|domain
operator|=
name|domain
expr_stmt|;
if|if
condition|(
name|domain
operator|!=
literal|null
condition|)
block|{
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|DOMAIN_PROPERTY
argument_list|,
name|domain
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getNode
parameter_list|()
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|node
operator|=
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|NODE_PROPERTY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|public
name|void
name|setNode
parameter_list|(
name|String
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|NODE_PROPERTY
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getDataMap
parameter_list|()
block|{
if|if
condition|(
name|dataMap
operator|==
literal|null
condition|)
block|{
name|dataMap
operator|=
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|DATA_MAP_PROPERTY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|dataMap
return|;
block|}
specifier|public
name|void
name|setDataMap
parameter_list|(
name|String
name|dataMap
parameter_list|)
block|{
name|this
operator|.
name|dataMap
operator|=
name|dataMap
expr_stmt|;
if|if
condition|(
name|dataMap
operator|!=
literal|null
condition|)
block|{
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|DATA_MAP_PROPERTY
argument_list|,
name|dataMap
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getObjEntity
parameter_list|()
block|{
if|if
condition|(
name|objEntity
operator|==
literal|null
condition|)
block|{
name|objEntity
operator|=
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|OBJ_ENTITY_PROPERTY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|objEntity
return|;
block|}
specifier|public
name|void
name|setObjEntity
parameter_list|(
name|String
name|objEntity
parameter_list|)
block|{
name|this
operator|.
name|objEntity
operator|=
name|objEntity
expr_stmt|;
if|if
condition|(
name|objEntity
operator|!=
literal|null
condition|)
block|{
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|OBJ_ENTITY_PROPERTY
argument_list|,
name|objEntity
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getDbEntity
parameter_list|()
block|{
if|if
condition|(
name|dbEntity
operator|==
literal|null
condition|)
block|{
name|dbEntity
operator|=
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|DB_ENTITY_PROPERTY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|dbEntity
return|;
block|}
specifier|public
name|void
name|setDbEntity
parameter_list|(
name|String
name|dbEntity
parameter_list|)
block|{
name|this
operator|.
name|dbEntity
operator|=
name|dbEntity
expr_stmt|;
if|if
condition|(
name|dbEntity
operator|!=
literal|null
condition|)
block|{
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|DB_ENTITY_PROPERTY
argument_list|,
name|dbEntity
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getEmbeddable
parameter_list|()
block|{
if|if
condition|(
name|embeddable
operator|==
literal|null
condition|)
block|{
name|embeddable
operator|=
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|EMBEDDABLE_PROPERTY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|embeddable
return|;
block|}
specifier|public
name|void
name|setEmbeddable
parameter_list|(
name|String
name|embeddable
parameter_list|)
block|{
name|this
operator|.
name|embeddable
operator|=
name|embeddable
expr_stmt|;
if|if
condition|(
name|embeddable
operator|!=
literal|null
condition|)
block|{
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|EMBEDDABLE_PROPERTY
argument_list|,
name|embeddable
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getEmbAttrs
parameter_list|()
block|{
if|if
condition|(
name|embAttrs
operator|==
literal|null
condition|)
block|{
name|embAttrs
operator|=
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|EMBEDDABLE_ATTRS_PROPERTY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|embAttrs
return|;
block|}
specifier|public
name|void
name|setEmbAttrs
parameter_list|(
name|String
name|embAttrs
parameter_list|)
block|{
name|this
operator|.
name|embAttrs
operator|=
name|embAttrs
expr_stmt|;
if|if
condition|(
name|embAttrs
operator|!=
literal|null
condition|)
block|{
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|EMBEDDABLE_ATTRS_PROPERTY
argument_list|,
name|embAttrs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getObjAttrs
parameter_list|()
block|{
if|if
condition|(
name|objAttrs
operator|==
literal|null
condition|)
block|{
name|objAttrs
operator|=
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|OBJ_ATTRS_PROPERTY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|objAttrs
return|;
block|}
specifier|public
name|void
name|setObjAttrs
parameter_list|(
name|String
name|objAttrs
parameter_list|)
block|{
name|this
operator|.
name|objAttrs
operator|=
name|objAttrs
expr_stmt|;
if|if
condition|(
name|objAttrs
operator|!=
literal|null
condition|)
block|{
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|OBJ_ATTRS_PROPERTY
argument_list|,
name|objAttrs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getDbAttrs
parameter_list|()
block|{
if|if
condition|(
name|dbAttrs
operator|==
literal|null
condition|)
block|{
name|dbAttrs
operator|=
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|DB_ATTRS_PROPERTY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|dbAttrs
return|;
block|}
specifier|public
name|void
name|setDbAttrs
parameter_list|(
name|String
name|dbAttrs
parameter_list|)
block|{
name|this
operator|.
name|dbAttrs
operator|=
name|dbAttrs
expr_stmt|;
if|if
condition|(
name|dbAttrs
operator|!=
literal|null
condition|)
block|{
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|DB_ATTRS_PROPERTY
argument_list|,
name|dbAttrs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getObjRels
parameter_list|()
block|{
if|if
condition|(
name|objRels
operator|==
literal|null
condition|)
block|{
name|objRels
operator|=
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|OBJ_RELS_PROPERTY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|objRels
return|;
block|}
specifier|public
name|void
name|setObjRels
parameter_list|(
name|String
name|objRels
parameter_list|)
block|{
name|this
operator|.
name|objRels
operator|=
name|objRels
expr_stmt|;
if|if
condition|(
name|objRels
operator|!=
literal|null
condition|)
block|{
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|OBJ_RELS_PROPERTY
argument_list|,
name|objRels
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getDbRels
parameter_list|()
block|{
if|if
condition|(
name|dbRels
operator|==
literal|null
condition|)
block|{
name|dbRels
operator|=
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|DB_RELS_PROPERTY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|dbRels
return|;
block|}
specifier|public
name|void
name|setDbRels
parameter_list|(
name|String
name|dbRels
parameter_list|)
block|{
name|this
operator|.
name|dbRels
operator|=
name|dbRels
expr_stmt|;
if|if
condition|(
name|dbRels
operator|!=
literal|null
condition|)
block|{
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|DB_RELS_PROPERTY
argument_list|,
name|dbRels
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getProcedure
parameter_list|()
block|{
if|if
condition|(
name|procedure
operator|==
literal|null
condition|)
block|{
name|procedure
operator|=
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|PROCEDURE_PROPERTY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|procedure
return|;
block|}
specifier|public
name|void
name|setProcedure
parameter_list|(
name|String
name|procedure
parameter_list|)
block|{
name|this
operator|.
name|procedure
operator|=
name|procedure
expr_stmt|;
if|if
condition|(
name|procedure
operator|!=
literal|null
condition|)
block|{
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|PROCEDURE_PROPERTY
argument_list|,
name|procedure
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getProcedureParams
parameter_list|()
block|{
if|if
condition|(
name|procedureParams
operator|==
literal|null
condition|)
block|{
name|procedureParams
operator|=
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|PROCEDURE_PARAMS_PROPERTY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|procedureParams
return|;
block|}
specifier|public
name|void
name|setProcedureParams
parameter_list|(
name|String
name|procedureParams
parameter_list|)
block|{
name|this
operator|.
name|procedureParams
operator|=
name|procedureParams
expr_stmt|;
if|if
condition|(
name|procedureParams
operator|!=
literal|null
condition|)
block|{
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|PROCEDURE_PARAMS_PROPERTY
argument_list|,
name|procedureParams
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getQuery
parameter_list|()
block|{
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
name|query
operator|=
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|QUERY_PROPERTY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
specifier|public
name|void
name|setQuery
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|QUERY_PROPERTY
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getMultipleObjects
parameter_list|()
block|{
if|if
condition|(
name|multipleObjects
operator|==
literal|null
condition|)
block|{
name|multipleObjects
operator|=
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|MULTIPLE_OBJECTS_PROPERTY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|multipleObjects
return|;
block|}
specifier|public
name|void
name|setMultipleObjects
parameter_list|(
name|String
name|multipleObjects
parameter_list|)
block|{
name|this
operator|.
name|multipleObjects
operator|=
name|multipleObjects
expr_stmt|;
if|if
condition|(
name|multipleObjects
operator|!=
literal|null
condition|)
block|{
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|MULTIPLE_OBJECTS_PROPERTY
argument_list|,
name|multipleObjects
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getParentObject
parameter_list|()
block|{
if|if
condition|(
name|parentObject
operator|==
literal|null
condition|)
block|{
name|parentObject
operator|=
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|PARENT_OBJECT_PROPERTY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|parentObject
return|;
block|}
specifier|public
name|void
name|setParentObject
parameter_list|(
name|String
name|parentObject
parameter_list|)
block|{
name|this
operator|.
name|parentObject
operator|=
name|parentObject
expr_stmt|;
if|if
condition|(
name|parentObject
operator|!=
literal|null
condition|)
block|{
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|PARENT_OBJECT_PROPERTY
argument_list|,
name|parentObject
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

