begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|JTextComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|ModelerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|components
operator|.
name|TopBorder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * LogConsole is a window with text area filled with log messages of the  * application.   */
end_comment

begin_class
specifier|public
class|class
name|LogConsoleView
extends|extends
name|JPanel
block|{
specifier|static
specifier|private
specifier|final
name|Icon
name|DOCK_ICON
init|=
name|ModelerUtil
operator|.
name|buildIcon
argument_list|(
literal|"icon-down.png"
argument_list|)
decl_stmt|;
specifier|static
specifier|private
specifier|final
name|Icon
name|UNDOCK_ICON
init|=
name|ModelerUtil
operator|.
name|buildIcon
argument_list|(
literal|"icon-up.png"
argument_list|)
decl_stmt|;
comment|/**      * Area to be filled with log messages      */
specifier|private
name|JTextComponent
name|logView
decl_stmt|;
comment|/**      * Item which performs clearing the console output       */
specifier|private
name|JButton
name|clearItem
decl_stmt|;
comment|/**      * Item which performs copying the console output       */
specifier|private
name|JButton
name|copyItem
decl_stmt|;
comment|/**      * Item which performs docking the window, i.e. sticking it to parent       */
specifier|private
name|JButton
name|dockItem
decl_stmt|;
specifier|private
name|JToolBar
name|buttonsBar
decl_stmt|;
comment|/**      * Constructs a new log console view component      */
specifier|public
name|LogConsoleView
parameter_list|()
block|{
comment|//log console window must be non-modal
name|super
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
comment|/**      * Initializes and lays out subcomponents      */
specifier|protected
name|void
name|init
parameter_list|()
block|{
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|buttonsBar
operator|=
operator|new
name|JToolBar
argument_list|()
expr_stmt|;
name|buttonsBar
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|()
argument_list|)
expr_stmt|;
name|buttonsBar
operator|.
name|setFloatable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|copyItem
operator|=
operator|new
name|CayenneAction
operator|.
name|CayenneToolbarButton
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|copyItem
operator|.
name|setIcon
argument_list|(
name|ModelerUtil
operator|.
name|buildIcon
argument_list|(
literal|"icon-copy.png"
argument_list|)
argument_list|)
expr_stmt|;
name|copyItem
operator|.
name|setText
argument_list|(
literal|"Copy"
argument_list|)
expr_stmt|;
name|buttonsBar
operator|.
name|add
argument_list|(
name|copyItem
argument_list|)
expr_stmt|;
name|clearItem
operator|=
operator|new
name|CayenneAction
operator|.
name|CayenneToolbarButton
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|clearItem
operator|.
name|setIcon
argument_list|(
name|ModelerUtil
operator|.
name|buildIcon
argument_list|(
literal|"icon-trash.png"
argument_list|)
argument_list|)
expr_stmt|;
name|clearItem
operator|.
name|setText
argument_list|(
literal|"Clear"
argument_list|)
expr_stmt|;
name|buttonsBar
operator|.
name|add
argument_list|(
name|clearItem
argument_list|)
expr_stmt|;
name|dockItem
operator|=
operator|new
name|CayenneAction
operator|.
name|CayenneToolbarButton
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|setDocked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|buttonsBar
operator|.
name|add
argument_list|(
name|dockItem
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|buttonsBar
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
name|logView
operator|=
operator|new
name|JEditorPane
argument_list|(
literal|"text/html"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|logView
operator|.
name|setFont
argument_list|(
operator|new
name|JLabel
argument_list|()
operator|.
name|getFont
argument_list|()
operator|.
name|deriveFont
argument_list|(
literal|12f
argument_list|)
argument_list|)
expr_stmt|;
name|logView
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|JScrollPane
name|scrollPane
init|=
operator|new
name|JScrollPane
argument_list|(
name|logView
argument_list|)
decl_stmt|;
name|scrollPane
operator|.
name|setBorder
argument_list|(
name|TopBorder
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|scrollPane
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
comment|//no need to center log window
name|setLocation
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return area to be filled with log messages      */
name|JTextComponent
name|getLogView
parameter_list|()
block|{
return|return
name|logView
return|;
block|}
name|JButton
name|getCopyItem
parameter_list|()
block|{
return|return
name|copyItem
return|;
block|}
name|JButton
name|getClearItem
parameter_list|()
block|{
return|return
name|clearItem
return|;
block|}
name|JButton
name|getDockItem
parameter_list|()
block|{
return|return
name|dockItem
return|;
block|}
name|void
name|setDocked
parameter_list|(
name|boolean
name|isDocked
parameter_list|)
block|{
if|if
condition|(
name|isDocked
condition|)
block|{
name|dockItem
operator|.
name|setIcon
argument_list|(
name|UNDOCK_ICON
argument_list|)
expr_stmt|;
name|dockItem
operator|.
name|setText
argument_list|(
literal|"Undock"
argument_list|)
expr_stmt|;
name|buttonsBar
operator|.
name|setBorder
argument_list|(
name|TopBorder
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dockItem
operator|.
name|setIcon
argument_list|(
name|DOCK_ICON
argument_list|)
expr_stmt|;
name|dockItem
operator|.
name|setText
argument_list|(
literal|"Dock"
argument_list|)
expr_stmt|;
name|buttonsBar
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

