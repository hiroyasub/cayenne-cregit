begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|BaseConfigurationNodeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|Comparators
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultMutableTreeNode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A helper class that wraps a tree of project nodes into Swing tree nodes.  */
end_comment

begin_class
specifier|public
class|class
name|ProjectTreeFactory
block|{
specifier|public
specifier|static
name|DefaultMutableTreeNode
name|wrapProjectNode
parameter_list|(
name|ConfigurationNode
name|node
parameter_list|)
block|{
return|return
name|node
operator|.
name|acceptVisitor
argument_list|(
operator|new
name|TreeWrapper
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|TreeWrapper
extends|extends
name|BaseConfigurationNodeVisitor
argument_list|<
name|DefaultMutableTreeNode
argument_list|>
block|{
specifier|private
name|LinkedList
argument_list|<
name|DefaultMutableTreeNode
argument_list|>
name|stack
decl_stmt|;
name|TreeWrapper
parameter_list|()
block|{
name|stack
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|Collection
argument_list|<
name|T
argument_list|>
name|sort
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|unsorted
parameter_list|)
block|{
if|if
condition|(
name|unsorted
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
return|return
name|unsorted
return|;
block|}
name|List
argument_list|<
name|T
argument_list|>
name|sorted
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|unsorted
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sorted
argument_list|)
expr_stmt|;
return|return
name|sorted
return|;
block|}
specifier|private
name|DefaultMutableTreeNode
name|makeNode
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null object"
argument_list|)
throw|;
block|}
name|DefaultMutableTreeNode
name|node
init|=
operator|new
name|DefaultMutableTreeNode
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|stack
operator|.
name|getLast
argument_list|()
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|private
name|DefaultMutableTreeNode
name|pushNode
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|DefaultMutableTreeNode
name|node
init|=
name|makeNode
argument_list|(
name|object
argument_list|)
decl_stmt|;
name|stack
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|private
name|DefaultMutableTreeNode
name|popNode
parameter_list|()
block|{
return|return
name|stack
operator|.
name|removeLast
argument_list|()
return|;
block|}
specifier|public
name|DefaultMutableTreeNode
name|visitDataChannelDescriptor
parameter_list|(
name|DataChannelDescriptor
name|channelDescriptor
parameter_list|)
block|{
name|pushNode
argument_list|(
name|channelDescriptor
argument_list|)
expr_stmt|;
for|for
control|(
name|DataMap
name|map
range|:
name|sort
argument_list|(
name|channelDescriptor
operator|.
name|getDataMaps
argument_list|()
argument_list|)
control|)
block|{
name|map
operator|.
name|acceptVisitor
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DataNodeDescriptor
name|node
range|:
name|sort
argument_list|(
name|channelDescriptor
operator|.
name|getNodeDescriptors
argument_list|()
argument_list|)
control|)
block|{
name|node
operator|.
name|acceptVisitor
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|popNode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DefaultMutableTreeNode
name|visitDataNodeDescriptor
parameter_list|(
name|DataNodeDescriptor
name|nodeDescriptor
parameter_list|)
block|{
name|DataChannelDescriptor
name|parent
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DefaultMutableTreeNode
name|parentNode
init|=
name|stack
operator|.
name|getLast
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentNode
operator|.
name|getUserObject
argument_list|()
operator|instanceof
name|DataChannelDescriptor
condition|)
block|{
name|parent
operator|=
operator|(
name|DataChannelDescriptor
operator|)
name|parentNode
operator|.
name|getUserObject
argument_list|()
expr_stmt|;
block|}
block|}
name|pushNode
argument_list|(
name|nodeDescriptor
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|mapNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodeDescriptor
operator|.
name|getDataMapNames
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|mapNames
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|mapName
range|:
name|mapNames
control|)
block|{
name|makeNode
argument_list|(
name|parent
operator|.
name|getDataMap
argument_list|(
name|mapName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|popNode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DefaultMutableTreeNode
name|visitDataMap
parameter_list|(
name|DataMap
name|dataMap
parameter_list|)
block|{
name|pushNode
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
comment|//Should be sorted manually because dataMap don't provide sorted collection.
name|dataMap
operator|.
name|getObjEntities
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
name|Comparators
operator|.
name|getDataMapChildrenComparator
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|e
lambda|->
name|makeNode
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|getEmbeddables
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
name|Comparators
operator|.
name|getDataMapChildrenComparator
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|e
lambda|->
name|makeNode
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|getDbEntities
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
name|Comparators
operator|.
name|getDataMapChildrenComparator
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|e
lambda|->
name|makeNode
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|getProcedures
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
name|Comparators
operator|.
name|getDataMapChildrenComparator
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|e
lambda|->
name|makeNode
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|dataMap
operator|.
name|getQueryDescriptors
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
name|Comparators
operator|.
name|getDataMapChildrenComparator
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|e
lambda|->
name|makeNode
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|popNode
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

