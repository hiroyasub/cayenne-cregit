begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|objentity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultCellEditor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultListCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ListCellRenderer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|TypesMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EmbeddableAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|EmbeddedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneTableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CellEditorForAttributeTable
import|;
end_import

begin_class
specifier|public
class|class
name|OverrideEmbeddableAttributeTableModel
extends|extends
name|CayenneTableModel
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overrideAttr
decl_stmt|;
specifier|private
name|ObjAttribute
name|attr
decl_stmt|;
specifier|private
name|boolean
name|isAttributeOverrideChange
decl_stmt|;
specifier|private
name|CellEditorForAttributeTable
name|cellEditor
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|nameAttr
decl_stmt|;
specifier|private
name|CayenneTable
name|table
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|EmbeddableAttribute
argument_list|>
name|embeddableList
decl_stmt|;
specifier|public
name|List
argument_list|<
name|EmbeddableAttribute
argument_list|>
name|getEmbeddableList
parameter_list|()
block|{
return|return
name|embeddableList
return|;
block|}
specifier|public
name|OverrideEmbeddableAttributeTableModel
parameter_list|(
name|ProjectController
name|mediator
parameter_list|,
name|Object
name|eventSource
parameter_list|,
name|Collection
argument_list|<
name|EmbeddableAttribute
argument_list|>
name|embAttr
parameter_list|,
name|ObjAttribute
name|attr
parameter_list|)
block|{
name|super
argument_list|(
name|mediator
argument_list|,
name|eventSource
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|embAttr
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|embeddableList
operator|=
operator|new
name|ArrayList
argument_list|<
name|EmbeddableAttribute
argument_list|>
argument_list|(
name|embAttr
argument_list|)
expr_stmt|;
name|this
operator|.
name|attr
operator|=
name|attr
expr_stmt|;
name|this
operator|.
name|isAttributeOverrideChange
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|attr
operator|instanceof
name|EmbeddedAttribute
condition|)
block|{
name|EmbeddedAttribute
name|embeddedAttribute
init|=
operator|(
name|EmbeddedAttribute
operator|)
name|attr
decl_stmt|;
name|this
operator|.
name|overrideAttr
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|embeddedAttribute
operator|.
name|getAttributeOverrides
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|overrideAttr
operator|=
literal|null
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|EmbeddableAttribute
argument_list|>
name|it
init|=
name|embeddableList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|EmbeddableAttribute
name|emb
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|overrideAttr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|overrideAttr
operator|.
name|get
argument_list|(
name|emb
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|emb
operator|.
name|setDbAttributeName
argument_list|(
name|overrideAttr
operator|.
name|get
argument_list|(
name|emb
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getOverrideAttr
parameter_list|()
block|{
return|return
name|overrideAttr
return|;
block|}
comment|// Columns
specifier|static
specifier|final
name|int
name|OBJ_ATTRIBUTE
init|=
literal|0
decl_stmt|;
specifier|static
specifier|final
name|int
name|OBJ_ATTRIBUTE_TYPE
init|=
literal|1
decl_stmt|;
specifier|static
specifier|final
name|int
name|DB_ATTRIBUTE
init|=
literal|2
decl_stmt|;
specifier|static
specifier|final
name|int
name|DB_ATTRIBUTE_TYPE
init|=
literal|3
decl_stmt|;
specifier|protected
name|void
name|orderList
parameter_list|()
block|{
comment|// NOOP
block|}
comment|/**      * Returns ObjAttribute class.      */
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getElementsClass
parameter_list|()
block|{
return|return
name|ObjAttribute
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUpdatedValueAt
parameter_list|(
name|Object
name|value
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
name|EmbeddableAttribute
name|attribute
init|=
name|getEmbeddableAttribute
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|==
name|DB_ATTRIBUTE
condition|)
block|{
name|attribute
operator|.
name|setDbAttributeName
argument_list|(
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|fireTableCellUpdated
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|this
operator|.
name|isAttributeOverrideChange
operator|=
literal|true
expr_stmt|;
operator|(
operator|(
name|ObjAttributeInfoDialogView
operator|)
operator|(
operator|(
name|ObjAttributeInfoDialog
operator|)
name|eventSource
operator|)
operator|.
name|getView
argument_list|()
operator|)
operator|.
name|getSaveButton
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|DbEntity
name|currentEnt
init|=
operator|(
operator|(
name|ObjEntity
operator|)
name|attr
operator|.
name|getEntity
argument_list|()
operator|)
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentEnt
operator|!=
literal|null
condition|)
block|{
name|DbAttribute
name|dbAttr
init|=
operator|(
name|DbAttribute
operator|)
name|currentEnt
operator|.
name|getAttribute
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbAttr
operator|!=
literal|null
condition|)
block|{
name|fireTableCellUpdated
argument_list|(
name|DB_ATTRIBUTE_TYPE
argument_list|,
name|col
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|fireTableRowsUpdated
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isAttributeOverrideChange
parameter_list|()
block|{
return|return
name|isAttributeOverrideChange
return|;
block|}
specifier|public
name|CellEditorForAttributeTable
name|setCellEditor
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|nameAttr
parameter_list|,
name|CayenneTable
name|table
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|cellEditor
operator|=
operator|new
name|CellEditorForAttributeTable
argument_list|(
name|table
argument_list|,
name|Application
operator|.
name|getWidgetFactory
argument_list|()
operator|.
name|createComboBox
argument_list|(
name|nameAttr
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cellEditor
return|;
block|}
specifier|public
name|CellEditorForAttributeTable
name|getCellEditor
parameter_list|()
block|{
return|return
name|cellEditor
return|;
block|}
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
return|return
name|col
operator|==
name|DB_ATTRIBUTE
return|;
block|}
specifier|public
name|EmbeddableAttribute
name|getEmbeddableAttribute
parameter_list|(
name|int
name|row
parameter_list|)
block|{
return|return
operator|(
name|row
operator|>=
literal|0
operator|&&
name|row
operator|<
name|embeddableList
operator|.
name|size
argument_list|()
operator|)
condition|?
operator|(
name|EmbeddableAttribute
operator|)
name|embeddableList
operator|.
name|get
argument_list|(
name|row
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
literal|4
return|;
block|}
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|EmbeddableAttribute
name|attribute
init|=
name|getEmbeddableAttribute
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|column
operator|==
name|OBJ_ATTRIBUTE
condition|)
block|{
return|return
name|attribute
operator|.
name|getName
argument_list|()
return|;
block|}
if|else if
condition|(
name|column
operator|==
name|OBJ_ATTRIBUTE_TYPE
condition|)
block|{
return|return
name|attribute
operator|.
name|getType
argument_list|()
return|;
block|}
else|else
block|{
name|String
name|dbAttributeName
init|=
name|attribute
operator|.
name|getDbAttributeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|==
name|DB_ATTRIBUTE
condition|)
block|{
return|return
name|dbAttributeName
return|;
block|}
if|else if
condition|(
name|column
operator|==
name|DB_ATTRIBUTE_TYPE
condition|)
block|{
return|return
name|getDBAttrType
argument_list|(
name|dbAttributeName
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
name|String
name|getDBAttrType
parameter_list|(
name|String
name|dbAttributeName
parameter_list|)
block|{
name|DbEntity
name|currentEnt
init|=
operator|(
operator|(
name|ObjEntity
operator|)
name|attr
operator|.
name|getEntity
argument_list|()
operator|)
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentEnt
operator|!=
literal|null
operator|&&
name|currentEnt
operator|.
name|getAttributes
argument_list|()
operator|!=
literal|null
operator|&&
name|dbAttributeName
operator|!=
literal|null
condition|)
block|{
name|DbAttribute
name|dbAttr
init|=
operator|(
name|DbAttribute
operator|)
name|currentEnt
operator|.
name|getAttribute
argument_list|(
name|dbAttributeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbAttr
operator|!=
literal|null
condition|)
block|{
return|return
name|TypesMapping
operator|.
name|getSqlNameByType
argument_list|(
name|dbAttr
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|OBJ_ATTRIBUTE
case|:
return|return
literal|"ObjAttribute"
return|;
case|case
name|OBJ_ATTRIBUTE_TYPE
case|:
return|return
literal|"Java Type"
return|;
case|case
name|DB_ATTRIBUTE
case|:
return|return
literal|"DbAttribute"
return|;
case|case
name|DB_ATTRIBUTE_TYPE
case|:
return|return
literal|"DB Type"
return|;
default|default:
return|return
literal|""
return|;
block|}
block|}
specifier|public
name|void
name|setComboBoxes
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|nameAttr
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|int
name|count
init|=
name|getRowCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|EmbeddableAttribute
name|embAt
init|=
name|getEmbeddableAttribute
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nameAttr
operator|.
name|contains
argument_list|(
name|embAt
operator|.
name|getDbAttributeName
argument_list|()
argument_list|)
operator|&&
name|embAt
operator|.
name|getDbAttributeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|attributeComboForRow
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|attributeComboForRow
operator|.
name|addAll
argument_list|(
name|nameAttr
argument_list|)
expr_stmt|;
name|attributeComboForRow
operator|.
name|add
argument_list|(
name|embAt
operator|.
name|getDbAttributeName
argument_list|()
argument_list|)
expr_stmt|;
name|JComboBox
name|comboBoxForRow
init|=
name|Application
operator|.
name|getWidgetFactory
argument_list|()
operator|.
name|createComboBox
argument_list|(
name|attributeComboForRow
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|cellEditor
operator|.
name|setEditorAt
argument_list|(
operator|new
name|Integer
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|DefaultCellEditor
argument_list|(
name|comboBoxForRow
argument_list|)
argument_list|)
expr_stmt|;
name|BoxCellRenderer
name|renderer
init|=
operator|new
name|BoxCellRenderer
argument_list|()
decl_stmt|;
name|renderer
operator|.
name|setNotActiveColumn
argument_list|(
name|attributeComboForRow
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|comboBoxForRow
operator|.
name|setRenderer
argument_list|(
name|renderer
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|column
argument_list|)
operator|.
name|setCellEditor
argument_list|(
name|cellEditor
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ObjAttribute
name|getAttribute
parameter_list|()
block|{
return|return
name|attr
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isColumnSortable
parameter_list|(
name|int
name|sortCol
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sortByColumn
parameter_list|(
specifier|final
name|int
name|sortCol
parameter_list|,
name|boolean
name|isAscent
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|embeddableList
argument_list|,
operator|new
name|Comparator
argument_list|<
name|EmbeddableAttribute
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|EmbeddableAttribute
name|o1
parameter_list|,
name|EmbeddableAttribute
name|o2
parameter_list|)
block|{
name|Integer
name|compareObjAttributesVal
init|=
name|compareObjAttributes
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
decl_stmt|;
if|if
condition|(
name|compareObjAttributesVal
operator|!=
literal|null
condition|)
block|{
return|return
name|compareObjAttributesVal
return|;
block|}
name|String
name|valueToCompare1
init|=
literal|""
decl_stmt|;
name|String
name|valueToCompare2
init|=
literal|""
decl_stmt|;
switch|switch
condition|(
name|sortCol
condition|)
block|{
case|case
name|OBJ_ATTRIBUTE
case|:
name|valueToCompare1
operator|=
name|o1
operator|.
name|getName
argument_list|()
expr_stmt|;
name|valueToCompare2
operator|=
name|o2
operator|.
name|getName
argument_list|()
expr_stmt|;
break|break;
case|case
name|OBJ_ATTRIBUTE_TYPE
case|:
name|valueToCompare1
operator|=
name|o1
operator|.
name|getType
argument_list|()
expr_stmt|;
name|valueToCompare2
operator|=
name|o2
operator|.
name|getType
argument_list|()
expr_stmt|;
break|break;
case|case
name|DB_ATTRIBUTE
case|:
name|valueToCompare1
operator|=
name|o1
operator|.
name|getDbAttributeName
argument_list|()
expr_stmt|;
name|valueToCompare2
operator|=
name|o2
operator|.
name|getDbAttributeName
argument_list|()
expr_stmt|;
break|break;
case|case
name|DB_ATTRIBUTE_TYPE
case|:
name|valueToCompare1
operator|=
name|getDBAttrType
argument_list|(
name|o1
operator|.
name|getDbAttributeName
argument_list|()
argument_list|)
expr_stmt|;
name|valueToCompare2
operator|=
name|getDBAttrType
argument_list|(
name|o2
operator|.
name|getDbAttributeName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
operator|(
name|valueToCompare1
operator|==
literal|null
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|valueToCompare2
operator|==
literal|null
operator|)
condition|?
literal|1
else|:
name|valueToCompare1
operator|.
name|compareTo
argument_list|(
name|valueToCompare2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isAscent
condition|)
block|{
name|Collections
operator|.
name|reverse
argument_list|(
name|embeddableList
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Integer
name|compareObjAttributes
parameter_list|(
name|EmbeddableAttribute
name|o1
parameter_list|,
name|EmbeddableAttribute
name|o2
parameter_list|)
block|{
if|if
condition|(
operator|(
name|o1
operator|==
literal|null
operator|&&
name|o2
operator|==
literal|null
operator|)
operator|||
name|o1
operator|==
name|o2
condition|)
block|{
return|return
literal|0
return|;
block|}
if|else if
condition|(
name|o1
operator|==
literal|null
operator|&&
name|o2
operator|!=
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|else if
condition|(
name|o1
operator|!=
literal|null
operator|&&
name|o2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

begin_class
class|class
name|BoxCellRenderer
implements|implements
name|ListCellRenderer
block|{
specifier|protected
name|DefaultListCellRenderer
name|defaultRenderer
init|=
operator|new
name|DefaultListCellRenderer
argument_list|()
decl_stmt|;
specifier|private
name|int
name|notActiveColumn
decl_stmt|;
specifier|public
name|Component
name|getListCellRendererComponent
parameter_list|(
name|JList
name|list
parameter_list|,
name|Object
name|value
parameter_list|,
name|int
name|index
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
name|boolean
name|cellHasFocus
parameter_list|)
block|{
name|JLabel
name|renderer
init|=
operator|(
name|JLabel
operator|)
name|defaultRenderer
operator|.
name|getListCellRendererComponent
argument_list|(
name|list
argument_list|,
name|value
argument_list|,
name|index
argument_list|,
name|isSelected
argument_list|,
name|cellHasFocus
argument_list|)
decl_stmt|;
if|if
condition|(
name|getNotActiveColumn
argument_list|()
operator|!=
literal|0
operator|&&
name|index
operator|==
name|getNotActiveColumn
argument_list|()
condition|)
block|{
name|renderer
operator|.
name|setForeground
argument_list|(
name|Color
operator|.
name|GRAY
argument_list|)
expr_stmt|;
block|}
return|return
name|renderer
return|;
block|}
specifier|public
name|int
name|getNotActiveColumn
parameter_list|()
block|{
return|return
name|notActiveColumn
return|;
block|}
specifier|public
name|void
name|setNotActiveColumn
parameter_list|(
name|int
name|notActiveColumn
parameter_list|)
block|{
name|this
operator|.
name|notActiveColumn
operator|=
name|notActiveColumn
expr_stmt|;
block|}
block|}
end_class

end_unit

