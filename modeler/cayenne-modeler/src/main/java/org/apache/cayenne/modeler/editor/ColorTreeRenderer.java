begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|IncludeProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|load
operator|.
name|DbImportTreeNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTree
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|DbImportNodeHandler
operator|.
name|LABEL_COLOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|DbImportNodeHandler
operator|.
name|NON_INCLUDE_COLOR
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|ColorTreeRenderer
extends|extends
name|DbImportTreeCellRenderer
block|{
specifier|private
name|DbImportNodeHandler
name|handler
decl_stmt|;
specifier|private
name|DbImportTree
name|reverseEngineeringTree
decl_stmt|;
specifier|public
name|ColorTreeRenderer
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|handler
operator|=
operator|new
name|DbImportNodeHandler
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Component
name|getTreeCellRendererComponent
parameter_list|(
name|JTree
name|tree
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|sel
parameter_list|,
name|boolean
name|expanded
parameter_list|,
name|boolean
name|leaf
parameter_list|,
name|int
name|row
parameter_list|,
name|boolean
name|hasFocus
parameter_list|)
block|{
name|super
operator|.
name|getTreeCellRendererComponent
argument_list|(
name|tree
argument_list|,
name|value
argument_list|,
name|sel
argument_list|,
name|expanded
argument_list|,
name|leaf
argument_list|,
name|row
argument_list|,
name|hasFocus
argument_list|)
expr_stmt|;
name|DbImportTree
name|renderedTree
init|=
operator|(
name|DbImportTree
operator|)
name|tree
decl_stmt|;
name|handler
operator|.
name|setDbSchemaNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|isLabel
argument_list|()
condition|)
block|{
name|setForeground
argument_list|(
name|LABEL_COLOR
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
name|handler
operator|.
name|isContainer
argument_list|(
name|node
argument_list|)
operator|||
operator|(
name|handler
operator|.
name|isFirstNodeIsPrimitive
argument_list|(
name|renderedTree
argument_list|)
operator|)
condition|)
block|{
name|handler
operator|.
name|setHasEntitiesInEmptyContainer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|selected
condition|)
block|{
name|setForeground
argument_list|(
name|Color
operator|.
name|BLACK
argument_list|)
expr_stmt|;
name|node
operator|.
name|setColorized
argument_list|(
name|node
operator|.
name|isColorized
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|DbImportTreeNode
name|root
decl_stmt|;
name|handler
operator|.
name|findFirstLevelIncludeTable
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|handler
operator|.
name|checkTreesLevels
argument_list|(
name|renderedTree
argument_list|)
condition|)
block|{
name|setForeground
argument_list|(
name|NON_INCLUDE_COLOR
argument_list|)
expr_stmt|;
name|node
operator|.
name|setColorized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
name|reverseEngineeringTree
operator|.
name|getSelectionPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|root
operator|=
name|reverseEngineeringTree
operator|.
name|getSelectedNode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|root
operator|=
name|reverseEngineeringTree
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
block|}
name|renderedTree
operator|.
name|getRootNode
argument_list|()
operator|.
name|setColorized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|bypassResult
init|=
name|handler
operator|.
name|bypassTree
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|bypassResult
operator|>
literal|0
condition|)
block|{
comment|// Case on IncludeProcedure on zero level is selected
if|if
condition|(
name|root
operator|.
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|IncludeProcedure
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|handler
operator|.
name|nodesIsEqual
argument_list|(
name|root
argument_list|)
condition|)
block|{
name|setForeground
argument_list|(
name|handler
operator|.
name|getColorByNodeType
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|.
name|setColorized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
else|else
block|{
name|setForeground
argument_list|(
name|NON_INCLUDE_COLOR
argument_list|)
expr_stmt|;
name|node
operator|.
name|setColorized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|// If ReverseEngineering doesn't have catalogs or schemas on zero level
if|if
condition|(
operator|!
name|handler
operator|.
name|isExistCatalogsOrSchemas
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|root
operator|.
name|isExcludeTable
argument_list|()
operator|)
operator|||
operator|(
name|root
operator|.
name|isExcludeProcedure
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|handler
operator|.
name|nodesIsEqual
argument_list|(
name|root
argument_list|)
condition|)
block|{
name|setForeground
argument_list|(
name|handler
operator|.
name|getColorByNodeType
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|.
name|setColorized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|setForeground
argument_list|(
name|NON_INCLUDE_COLOR
argument_list|)
expr_stmt|;
name|node
operator|.
name|setColorized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
name|root
operator|.
name|equals
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|setForeground
argument_list|(
name|handler
operator|.
name|getColorByNodeType
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|.
name|setColorized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|// Recursion painting, if parent is colorized
if|if
condition|(
name|handler
operator|.
name|isParentIncluded
argument_list|()
condition|)
block|{
name|setForeground
argument_list|(
name|handler
operator|.
name|getColorByNodeType
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|.
name|setColorized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
else|else
block|{
name|setForeground
argument_list|(
name|NON_INCLUDE_COLOR
argument_list|)
expr_stmt|;
name|node
operator|.
name|setColorized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|if
condition|(
operator|(
name|handler
operator|.
name|isParentIncluded
argument_list|()
operator|)
operator|||
operator|(
name|reverseEngineeringTree
operator|.
name|getSelectionPath
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|setForeground
argument_list|(
name|handler
operator|.
name|getColorByNodeType
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|.
name|setColorized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|handler
operator|.
name|isExistCatalogsOrSchemas
argument_list|()
condition|)
block|{
name|setForeground
argument_list|(
name|handler
operator|.
name|getColorByNodeType
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|.
name|setColorized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|setForeground
argument_list|(
name|NON_INCLUDE_COLOR
argument_list|)
expr_stmt|;
name|node
operator|.
name|setColorized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|public
name|void
name|setReverseEngineeringTree
parameter_list|(
name|DbImportTree
name|reverseEngineeringTree
parameter_list|)
block|{
name|this
operator|.
name|reverseEngineeringTree
operator|=
name|reverseEngineeringTree
expr_stmt|;
name|handler
operator|.
name|setReverseEngineeringTree
argument_list|(
name|reverseEngineeringTree
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

