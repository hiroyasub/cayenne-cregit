begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|dbentity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbKeyGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EntityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|TextAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|DefaultFormBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|FormLayout
import|;
end_import

begin_class
specifier|public
class|class
name|PKCustomSequenceGeneratorPanel
extends|extends
name|PKGeneratorPanel
block|{
specifier|protected
name|TextAdapter
name|customPKName
decl_stmt|;
specifier|protected
name|TextAdapter
name|customPKSize
decl_stmt|;
specifier|public
name|PKCustomSequenceGeneratorPanel
parameter_list|(
name|ProjectController
name|mediator
parameter_list|)
block|{
name|super
argument_list|(
name|mediator
argument_list|)
expr_stmt|;
name|initView
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initView
parameter_list|()
block|{
name|JLabel
name|note
init|=
operator|new
name|JLabel
argument_list|(
literal|"* Custom sequences are supported on Oracle and Postgres"
argument_list|)
decl_stmt|;
name|note
operator|.
name|setFont
argument_list|(
name|note
operator|.
name|getFont
argument_list|()
operator|.
name|deriveFont
argument_list|(
name|Font
operator|.
name|ITALIC
argument_list|)
operator|.
name|deriveFont
argument_list|(
literal|11f
argument_list|)
argument_list|)
expr_stmt|;
name|customPKName
operator|=
operator|new
name|TextAdapter
argument_list|(
operator|new
name|JTextField
argument_list|()
argument_list|)
block|{
specifier|protected
name|void
name|updateModel
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|ValidationException
block|{
name|setPKName
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|customPKSize
operator|=
operator|new
name|TextAdapter
argument_list|(
operator|new
name|JTextField
argument_list|()
argument_list|)
block|{
specifier|protected
name|void
name|updateModel
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|ValidationException
block|{
name|setPKSize
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
comment|// assemble
name|DefaultFormBuilder
name|builder
init|=
operator|new
name|DefaultFormBuilder
argument_list|(
operator|new
name|FormLayout
argument_list|(
literal|"right:70dlu, 3dlu, 20dlu, 3dlu, fill:177dlu"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setDefaultDialogBorder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Sequence Name:"
argument_list|,
name|customPKName
operator|.
name|getComponent
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Cached PK Size:"
argument_list|,
name|customPKSize
operator|.
name|getComponent
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|""
argument_list|,
name|note
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|builder
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onInitInternal
parameter_list|(
name|DbEntity
name|entity
parameter_list|)
block|{
name|resetStrategy
argument_list|(
name|entity
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|entity
operator|.
name|getPrimaryKeyGenerator
argument_list|()
operator|==
literal|null
condition|)
block|{
name|DbKeyGenerator
name|generator
init|=
operator|new
name|DbKeyGenerator
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setGeneratorType
argument_list|(
name|DbKeyGenerator
operator|.
name|ORACLE_TYPE
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setPrimaryKeyGenerator
argument_list|(
name|generator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setDbEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setDbEntity
parameter_list|(
name|DbEntity
name|entity
parameter_list|)
block|{
name|DbKeyGenerator
name|generator
init|=
name|entity
operator|.
name|getPrimaryKeyGenerator
argument_list|()
decl_stmt|;
if|if
condition|(
name|generator
operator|!=
literal|null
condition|)
block|{
name|customPKName
operator|.
name|setText
argument_list|(
name|generator
operator|.
name|getGeneratorName
argument_list|()
argument_list|)
expr_stmt|;
name|customPKSize
operator|.
name|setText
argument_list|(
name|generator
operator|.
name|getKeyCacheSize
argument_list|()
operator|!=
literal|null
condition|?
name|generator
operator|.
name|getKeyCacheSize
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"0"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|customPKName
operator|.
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|customPKSize
operator|.
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setPKSize
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|mediator
operator|.
name|getCurrentDbEntity
argument_list|()
operator|==
literal|null
operator|||
name|mediator
operator|.
name|getCurrentDbEntity
argument_list|()
operator|.
name|getPrimaryKeyGenerator
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|int
name|cacheSize
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
operator|&&
name|text
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|cacheSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfex
parameter_list|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Invalid number"
argument_list|)
throw|;
block|}
block|}
name|DbKeyGenerator
name|generator
init|=
name|mediator
operator|.
name|getCurrentDbEntity
argument_list|()
operator|.
name|getPrimaryKeyGenerator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|generator
operator|.
name|getKeyCacheSize
argument_list|()
argument_list|,
operator|new
name|Integer
argument_list|(
name|cacheSize
argument_list|)
argument_list|)
condition|)
block|{
name|generator
operator|.
name|setKeyCacheSize
argument_list|(
operator|new
name|Integer
argument_list|(
name|cacheSize
argument_list|)
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireDbEntityEvent
argument_list|(
operator|new
name|EntityEvent
argument_list|(
name|this
argument_list|,
name|generator
operator|.
name|getDbEntity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setPKName
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|mediator
operator|.
name|getCurrentDbEntity
argument_list|()
operator|==
literal|null
operator|||
name|mediator
operator|.
name|getCurrentDbEntity
argument_list|()
operator|.
name|getPrimaryKeyGenerator
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|text
operator|!=
literal|null
operator|&&
name|text
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|text
operator|=
literal|null
expr_stmt|;
block|}
name|DbKeyGenerator
name|generator
init|=
name|mediator
operator|.
name|getCurrentDbEntity
argument_list|()
operator|.
name|getPrimaryKeyGenerator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|text
argument_list|,
name|generator
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|generator
operator|.
name|setGeneratorName
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|fireDbEntityEvent
argument_list|(
operator|new
name|EntityEvent
argument_list|(
name|this
argument_list|,
name|generator
operator|.
name|getDbEntity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

