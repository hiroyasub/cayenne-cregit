begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|CayenneModelerFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectTreeModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|EditorView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|EntityDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneAction
import|;
end_import

begin_class
specifier|public
class|class
name|DbEntityCounterpartAction
extends|extends
name|CayenneAction
block|{
specifier|public
specifier|static
name|String
name|getActionName
parameter_list|()
block|{
return|return
literal|"View related ObjEntity"
return|;
block|}
specifier|public
name|DbEntityCounterpartAction
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|super
argument_list|(
name|getActionName
argument_list|()
argument_list|,
name|application
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getIconName
parameter_list|()
block|{
return|return
literal|"icon-move_up.png"
return|;
block|}
comment|/**      * @see org.apache.cayenne.modeler.util.CayenneAction#performAction(ActionEvent)      */
specifier|public
name|void
name|performAction
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|viewCounterpartEntity
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|viewCounterpartEntity
parameter_list|()
block|{
name|ProjectController
name|mediator
init|=
name|getProjectController
argument_list|()
decl_stmt|;
name|DbEntity
name|dbEntity
init|=
name|mediator
operator|.
name|getCurrentDbEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbEntity
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Iterator
argument_list|<
name|ObjEntity
argument_list|>
name|it
init|=
name|dbEntity
operator|.
name|getDataMap
argument_list|()
operator|.
name|getMappedEntities
argument_list|(
name|dbEntity
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return;
block|}
name|ObjEntity
name|entity
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|viewCounterpartEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|viewCounterpartEntity
parameter_list|(
name|ObjEntity
name|entity
parameter_list|)
block|{
name|TreePath
name|path
init|=
name|buildTreePath
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|editor
argument_list|()
operator|.
name|getProjectTreeView
argument_list|()
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|setSelectionPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|EntityDisplayEvent
name|event
init|=
operator|new
name|EntityDisplayEvent
argument_list|(
name|editor
argument_list|()
operator|.
name|getProjectTreeView
argument_list|()
argument_list|,
name|entity
argument_list|,
name|entity
operator|.
name|getDataMap
argument_list|()
argument_list|,
operator|(
name|DataChannelDescriptor
operator|)
name|getProjectController
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
argument_list|)
decl_stmt|;
name|getProjectController
argument_list|()
operator|.
name|fireObjEntityDisplayEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|EditorView
name|editor
parameter_list|()
block|{
return|return
operator|(
operator|(
name|CayenneModelerFrame
operator|)
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getFrameController
argument_list|()
operator|.
name|getView
argument_list|()
operator|)
operator|.
name|getView
argument_list|()
return|;
block|}
comment|/**      * Builds a tree path for a given entity. Urgent for later selection.      *       * @param entity to build path for      * @return tree path      */
specifier|public
specifier|static
name|TreePath
name|buildTreePath
parameter_list|(
name|Entity
name|entity
parameter_list|)
block|{
name|DataChannelDescriptor
name|domain
init|=
operator|(
name|DataChannelDescriptor
operator|)
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|Object
index|[]
name|path
init|=
operator|new
name|Object
index|[]
block|{
name|domain
block|,
name|entity
operator|.
name|getDataMap
argument_list|()
block|,
name|entity
block|}
decl_stmt|;
name|Object
index|[]
name|mutableTreeNodes
init|=
operator|new
name|Object
index|[
name|path
operator|.
name|length
index|]
decl_stmt|;
name|mutableTreeNodes
index|[
literal|0
index|]
operator|=
operator|(
operator|(
name|ProjectTreeModel
operator|)
name|editor
argument_list|()
operator|.
name|getProjectTreeView
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
name|Object
index|[]
name|helper
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|path
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|helper
operator|=
operator|new
name|Object
index|[
name|i
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
control|)
block|{
name|helper
index|[
name|j
index|]
operator|=
name|path
index|[
operator|++
name|j
index|]
expr_stmt|;
block|}
name|mutableTreeNodes
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|ProjectTreeModel
operator|)
name|editor
argument_list|()
operator|.
name|getProjectTreeView
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|getNodeForObjectPath
argument_list|(
name|helper
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TreePath
argument_list|(
name|mutableTreeNodes
argument_list|)
return|;
block|}
block|}
end_class

end_unit

