begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * A circular array is an array of fixed size as objects are added it will push objects  * off of the end to allow space for new objects to be added. This is useful for things  * like a fixed history size for a navigation tool.  *   * @since 1.2  */
end_comment

begin_class
specifier|public
class|class
name|CircularArray
extends|extends
name|Object
block|{
specifier|private
name|Object
name|array
index|[]
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|head
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|tail
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|capacity
init|=
literal|0
decl_stmt|;
comment|/**      * Creates an array of capacity size.      *       * @param capacity - size of the new array      */
specifier|public
name|CircularArray
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
if|if
condition|(
name|capacity
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Capacity must be greater than zero"
argument_list|)
throw|;
block|}
name|array
operator|=
operator|new
name|Object
index|[
name|capacity
index|]
expr_stmt|;
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
block|}
comment|/**      * Clears out the contents of the array.      */
specifier|public
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
name|array
operator|=
operator|new
name|Object
index|[
name|capacity
index|]
expr_stmt|;
name|head
operator|=
literal|0
expr_stmt|;
name|tail
operator|=
literal|0
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * Returns true if the array has no elements;      */
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|count
operator|==
literal|0
return|;
block|}
comment|/**      * Adds a new object to the array. If the array is full it will push the oldest item      * out of the array.      *       * @param obj - the object to be added      */
specifier|public
specifier|synchronized
name|void
name|add
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
comment|// we have wrapped and we have to move the head pointer
if|if
condition|(
name|count
operator|==
name|capacity
operator|&&
name|tail
operator|==
name|head
condition|)
block|{
name|head
operator|=
operator|(
name|head
operator|+
literal|1
operator|)
operator|%
name|capacity
expr_stmt|;
block|}
name|array
index|[
name|tail
index|]
operator|=
name|obj
expr_stmt|;
name|tail
operator|=
operator|(
name|tail
operator|+
literal|1
operator|)
operator|%
name|capacity
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|>
name|capacity
condition|)
name|count
operator|=
name|capacity
expr_stmt|;
block|}
comment|/**      * Returns the number of objects stored in the array.      */
specifier|public
name|int
name|capacity
parameter_list|()
block|{
return|return
name|capacity
return|;
block|}
comment|/*      * Converts the logical index into a physical index.      */
name|int
name|convert
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|index
operator|+
name|head
operator|)
operator|%
name|capacity
return|;
block|}
comment|/*      * Makes sure that the index is within range.      */
specifier|private
name|void
name|rangeCheck
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
name|capacity
operator|||
name|index
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Index: "
operator|+
name|index
operator|+
literal|", Size: "
operator|+
name|capacity
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns true if the array contains the specified object.      *       * @param obj the object to be checked      */
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|indexOf
argument_list|(
name|obj
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/**      * Gets the object at the specified index.      *       * @param index the index of the object to be retrieved      */
specifier|public
specifier|synchronized
name|Object
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|rangeCheck
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|array
index|[
name|convert
argument_list|(
name|index
argument_list|)
index|]
return|;
block|}
comment|/**      * Returns the index of the specified object      *       * @param obj the object that is being searched for      */
specifier|public
specifier|synchronized
name|int
name|indexOf
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|capacity
condition|;
name|i
operator|++
control|)
block|{
name|int
name|index
init|=
name|convert
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
index|[
name|index
index|]
operator|==
name|obj
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
comment|// not found
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Removes the specified object from the array      *       * @param i the index of the object to be removed      */
specifier|public
specifier|synchronized
name|void
name|remove
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|int
name|i
init|=
name|indexOf
argument_list|(
name|obj
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
comment|// convert from logical to physical location
name|int
name|pos
init|=
name|convert
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|==
name|head
condition|)
block|{
comment|// move the head up one
name|head
operator|=
operator|(
name|head
operator|+
literal|1
operator|)
operator|%
name|capacity
expr_stmt|;
name|array
index|[
name|pos
index|]
operator|=
literal|null
expr_stmt|;
name|count
operator|--
expr_stmt|;
block|}
if|else if
condition|(
name|pos
operator|==
name|tail
condition|)
block|{
comment|// move the tail back one
name|tail
operator|=
operator|(
name|tail
operator|-
literal|1
operator|+
name|capacity
operator|)
operator|%
name|capacity
expr_stmt|;
name|array
index|[
name|pos
index|]
operator|=
literal|null
expr_stmt|;
name|count
operator|--
expr_stmt|;
block|}
else|else
block|{
comment|// create a brand new array and start it back out at zero
name|Object
index|[]
name|a
init|=
operator|new
name|Object
index|[
name|capacity
index|]
decl_stmt|;
name|int
name|destPos
init|=
literal|0
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|head
operator|==
name|tail
condition|)
block|{
comment|// most likeley scenario when it is full
if|if
condition|(
name|head
operator|<
name|pos
condition|)
block|{
comment|// copy from head to position
name|len
operator|=
name|pos
operator|-
name|head
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
name|head
argument_list|,
name|a
argument_list|,
name|destPos
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|destPos
operator|+=
name|len
expr_stmt|;
comment|// copy from pos +1 to end
name|len
operator|=
operator|(
name|capacity
operator|-
literal|1
operator|)
operator|-
name|pos
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
name|pos
operator|+
literal|1
argument_list|,
name|a
argument_list|,
name|destPos
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|destPos
operator|+=
name|len
expr_stmt|;
block|}
comment|// copy from zero to head
name|len
operator|=
name|head
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|a
argument_list|,
name|destPos
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|head
operator|>
name|pos
condition|)
block|{
comment|// copy from head to end of array
name|len
operator|=
name|capacity
operator|-
name|head
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
name|head
argument_list|,
name|a
argument_list|,
name|destPos
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|destPos
operator|+=
name|len
expr_stmt|;
block|}
comment|// copy from zero to pos -1
name|len
operator|=
name|pos
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|a
argument_list|,
name|destPos
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|destPos
operator|+=
name|len
expr_stmt|;
block|}
comment|// copy from pos + 1 to tail
name|len
operator|=
name|tail
operator|-
name|pos
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
name|pos
operator|+
literal|1
argument_list|,
name|a
argument_list|,
name|destPos
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|head
operator|<
name|tail
condition|)
block|{
comment|// copy from head to position -1
name|len
operator|=
name|pos
operator|-
name|head
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
name|head
argument_list|,
name|a
argument_list|,
name|destPos
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|destPos
operator|+=
name|len
expr_stmt|;
block|}
comment|// copy from position + 1 to tail
name|len
operator|=
name|tail
operator|-
name|pos
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
name|pos
operator|+
literal|1
argument_list|,
name|a
argument_list|,
name|destPos
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|destPos
operator|+=
name|len
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|head
operator|>
name|tail
condition|)
block|{
if|if
condition|(
name|head
operator|<
name|pos
condition|)
block|{
comment|// copy from head to position
name|len
operator|=
name|pos
operator|-
name|head
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
name|head
argument_list|,
name|a
argument_list|,
name|destPos
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|destPos
operator|+=
name|len
expr_stmt|;
comment|// copy from pos +1 to end
name|len
operator|=
name|capacity
operator|-
literal|1
operator|-
name|pos
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
name|pos
operator|+
literal|1
argument_list|,
name|a
argument_list|,
name|destPos
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|destPos
operator|+=
name|len
expr_stmt|;
block|}
comment|// copy from beginning to tail
name|len
operator|=
name|tail
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|a
argument_list|,
name|destPos
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|head
operator|>
name|pos
condition|)
block|{
comment|// copy from head to end of array
name|len
operator|=
name|capacity
operator|-
name|head
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
name|head
argument_list|,
name|a
argument_list|,
name|destPos
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|destPos
operator|+=
name|len
expr_stmt|;
block|}
comment|// copy from zero to pos -1
name|len
operator|=
name|pos
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|a
argument_list|,
name|destPos
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|destPos
operator|+=
name|len
expr_stmt|;
block|}
comment|// copy from pos+1 to tail
name|len
operator|=
name|tail
operator|-
name|pos
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
name|pos
operator|+
literal|1
argument_list|,
name|a
argument_list|,
name|destPos
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|count
operator|--
expr_stmt|;
name|array
operator|=
name|a
expr_stmt|;
name|head
operator|=
literal|0
expr_stmt|;
name|tail
operator|=
name|count
expr_stmt|;
block|}
name|i
operator|=
name|indexOf
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Resizes the array to the specified new size. If the new capacity is smaller than      * the current object count in the array, it will keep the newCapacity most recent      * objects.      *       * @param newCapacity the new capacity of the array      */
specifier|public
specifier|synchronized
name|void
name|resize
parameter_list|(
name|int
name|newCapacity
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|newCapacity
operator|<
name|count
condition|)
block|{
comment|// making it smaller so we want to readjust the first object
comment|// to be copied into the new array
name|i
operator|=
name|count
operator|-
name|newCapacity
expr_stmt|;
name|offset
operator|=
name|count
operator|-
name|newCapacity
expr_stmt|;
block|}
name|Object
name|newArray
index|[]
init|=
operator|new
name|Object
index|[
name|newCapacity
index|]
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|newArray
index|[
name|i
operator|-
name|offset
index|]
operator|=
name|array
index|[
name|convert
argument_list|(
name|i
argument_list|)
index|]
expr_stmt|;
block|}
name|head
operator|=
literal|0
expr_stmt|;
name|tail
operator|=
literal|0
expr_stmt|;
name|capacity
operator|=
name|newCapacity
expr_stmt|;
comment|// adjust the count if it is more than the new capacity
if|if
condition|(
name|capacity
operator|<
name|count
condition|)
name|count
operator|=
name|capacity
expr_stmt|;
name|array
operator|=
name|newArray
expr_stmt|;
block|}
comment|/**      * Returns the number of objects stored in the array.      */
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|count
return|;
block|}
comment|/**      * Converts the array to an Object array.      */
specifier|public
specifier|synchronized
name|Object
index|[]
name|toArray
parameter_list|()
block|{
name|Object
index|[]
name|o
init|=
operator|new
name|Object
index|[
name|capacity
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|capacity
condition|;
name|i
operator|++
control|)
block|{
name|o
index|[
name|i
index|]
operator|=
name|array
index|[
name|convert
argument_list|(
name|i
argument_list|)
index|]
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
specifier|public
specifier|synchronized
name|String
name|internalRep
parameter_list|()
block|{
name|Object
name|o
init|=
literal|null
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|")  "
argument_list|)
expr_stmt|;
name|o
operator|=
name|array
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
name|head
operator|||
name|i
operator|==
name|tail
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|head
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"h"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|tail
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"t"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"count = ["
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nhead  = ["
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|head
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\ntail  = ["
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|tail
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|Object
index|[]
name|oa
init|=
name|toArray
argument_list|()
decl_stmt|;
name|Object
name|o
init|=
literal|null
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oa
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|o
operator|=
name|oa
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

