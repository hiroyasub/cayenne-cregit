begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|dbimport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|dbimport
operator|.
name|DeleteNodeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|dbimport
operator|.
name|EditNodeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|load
operator|.
name|DbImportTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTree
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|CellEditorListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultTreeCellEditor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultTreeCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EventObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|DbImportTreeCellEditor
extends|extends
name|DefaultTreeCellEditor
block|{
specifier|private
name|ProjectController
name|projectController
decl_stmt|;
specifier|public
name|DbImportTreeCellEditor
parameter_list|(
name|JTree
name|tree
parameter_list|,
name|DefaultTreeCellRenderer
name|renderer
parameter_list|)
block|{
name|super
argument_list|(
name|tree
argument_list|,
name|renderer
argument_list|)
expr_stmt|;
name|this
operator|.
name|addCellEditorListener
argument_list|(
operator|new
name|CellEditorListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|editingStopped
parameter_list|(
name|ChangeEvent
name|e
parameter_list|)
block|{
name|DbImportTreeCellEditor
operator|.
name|this
operator|.
name|cancelCellEditing
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|editingCanceled
parameter_list|(
name|ChangeEvent
name|e
parameter_list|)
block|{
name|editingStopped
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getCellEditorValue
parameter_list|()
block|{
if|if
condition|(
name|tree
operator|.
name|getSelectionPath
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|DbImportTreeNode
name|node
init|=
operator|(
name|DbImportTreeNode
operator|)
name|tree
operator|.
name|getSelectionPath
argument_list|()
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
return|return
name|node
operator|.
name|getUserObject
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Component
name|getTreeCellEditorComponent
parameter_list|(
name|JTree
name|tree
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
name|boolean
name|expanded
parameter_list|,
name|boolean
name|leaf
parameter_list|,
name|int
name|row
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|DbImportTreeNode
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|DbImportTreeNode
operator|)
name|value
operator|)
operator|.
name|getSimpleNodeName
argument_list|()
expr_stmt|;
block|}
return|return
name|super
operator|.
name|getTreeCellEditorComponent
argument_list|(
name|tree
argument_list|,
name|value
argument_list|,
name|isSelected
argument_list|,
name|expanded
argument_list|,
name|leaf
argument_list|,
name|row
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|EventObject
name|e
parameter_list|)
block|{
if|if
condition|(
name|tree
operator|.
name|getSelectionPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Disable label nodes editing
if|if
condition|(
operator|(
operator|(
name|DbImportTreeNode
operator|)
name|tree
operator|.
name|getSelectionPath
argument_list|()
operator|.
name|getLastPathComponent
argument_list|()
operator|)
operator|.
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|tree
operator|.
name|getSelectionPath
argument_list|()
operator|.
name|getLastPathComponent
argument_list|()
operator|==
name|tree
operator|.
name|getModel
argument_list|()
operator|.
name|getRoot
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|isValidReverseEngineering
parameter_list|()
block|{
try|try
block|{
name|Pattern
operator|.
name|compile
argument_list|(
name|super
operator|.
name|getCellEditorValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cancelCellEditing
parameter_list|()
block|{
if|if
condition|(
name|tree
operator|.
name|getSelectionPath
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|Util
operator|.
name|isEmptyString
argument_list|(
name|super
operator|.
name|getCellEditorValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|&&
operator|!
name|insertableNodeExist
argument_list|()
operator|&&
operator|(
name|isValidReverseEngineering
argument_list|()
operator|)
condition|)
block|{
name|EditNodeAction
name|action
init|=
name|projectController
operator|.
name|getApplication
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|getAction
argument_list|(
name|EditNodeAction
operator|.
name|class
argument_list|)
decl_stmt|;
name|action
operator|.
name|setActionName
argument_list|(
name|super
operator|.
name|getCellEditorValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|actionPerformed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DbImportTreeNode
name|selectedNode
init|=
operator|(
name|DbImportTreeNode
operator|)
name|tree
operator|.
name|getSelectionPath
argument_list|()
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|isEmptyString
argument_list|(
name|selectedNode
operator|.
name|getSimpleNodeName
argument_list|()
argument_list|)
operator|||
operator|(
name|insertableNodeExist
argument_list|()
operator|)
condition|)
block|{
name|DeleteNodeAction
name|action
init|=
name|projectController
operator|.
name|getApplication
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|getAction
argument_list|(
name|DeleteNodeAction
operator|.
name|class
argument_list|)
decl_stmt|;
name|TreePath
name|parentPath
init|=
name|tree
operator|.
name|getSelectionPath
argument_list|()
operator|.
name|getParentPath
argument_list|()
decl_stmt|;
name|action
operator|.
name|actionPerformed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setSelectionPath
argument_list|(
name|parentPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tree
operator|.
name|startEditingAtPath
argument_list|(
name|tree
operator|.
name|getSelectionPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|DbImportTreeNode
name|selectedNode
init|=
operator|(
name|DbImportTreeNode
operator|)
name|tree
operator|.
name|getSelectionPath
argument_list|()
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
operator|(
operator|(
name|DbImportModel
operator|)
name|tree
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|reload
argument_list|(
name|selectedNode
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|equalNodes
parameter_list|(
name|int
name|i
parameter_list|,
name|DbImportTreeNode
name|parent
parameter_list|,
name|DbImportTreeNode
name|selectedElement
parameter_list|)
block|{
return|return
name|super
operator|.
name|getCellEditorValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|DbImportTreeNode
operator|)
name|parent
operator|.
name|getChildAt
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getSimpleNodeName
argument_list|()
argument_list|)
operator|&&
name|selectedElement
operator|.
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|DbImportTreeNode
operator|)
name|parent
operator|.
name|getChildAt
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getUserObject
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|insertableNodeExist
parameter_list|()
block|{
name|DbImportTreeNode
name|selectedElement
decl_stmt|;
if|if
condition|(
name|tree
operator|.
name|getSelectionPath
argument_list|()
operator|==
literal|null
condition|)
block|{
name|selectedElement
operator|=
operator|(
name|DbImportTreeNode
operator|)
name|tree
operator|.
name|getModel
argument_list|()
operator|.
name|getRoot
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|selectedElement
operator|=
operator|(
name|DbImportTreeNode
operator|)
name|tree
operator|.
name|getSelectionPath
argument_list|()
operator|.
name|getLastPathComponent
argument_list|()
expr_stmt|;
block|}
name|int
name|childCount
init|=
name|selectedElement
operator|.
name|getParent
argument_list|()
operator|.
name|getChildCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|equalNodes
argument_list|(
name|i
argument_list|,
operator|(
name|DbImportTreeNode
operator|)
name|selectedElement
operator|.
name|getParent
argument_list|()
argument_list|,
name|selectedElement
argument_list|)
condition|)
block|{
if|if
condition|(
name|selectedElement
operator|.
name|getParent
argument_list|()
operator|.
name|getChildAt
argument_list|(
name|i
argument_list|)
operator|!=
name|selectedElement
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setProjectController
parameter_list|(
name|ProjectController
name|projectController
parameter_list|)
block|{
name|this
operator|.
name|projectController
operator|=
name|projectController
expr_stmt|;
block|}
block|}
end_class

end_unit

