begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|dbimport
operator|.
name|tree
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ReverseEngineering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|SchemaContainer
import|;
end_import

begin_class
class|class
name|SchemaNode
extends|extends
name|Node
argument_list|<
name|CatalogNode
argument_list|>
block|{
name|SchemaNode
parameter_list|(
name|String
name|name
parameter_list|,
name|CatalogNode
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Status
name|getStatus
parameter_list|(
name|ReverseEngineering
name|config
parameter_list|)
block|{
comment|// check via parent path
if|if
condition|(
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Status
name|parentStatus
init|=
name|getParent
argument_list|()
operator|.
name|getStatus
argument_list|(
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentStatus
operator|!=
name|Status
operator|.
name|INCLUDE
condition|)
block|{
return|return
name|parentStatus
return|;
block|}
name|Catalog
name|parentCatalog
init|=
name|getParent
argument_list|()
operator|.
name|getCatalog
argument_list|(
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentCatalog
operator|!=
literal|null
operator|&&
name|includesSchema
argument_list|(
name|parentCatalog
argument_list|)
operator|==
name|Status
operator|.
name|INCLUDE
condition|)
block|{
return|return
name|Status
operator|.
name|INCLUDE
return|;
block|}
block|}
comment|// check root
return|return
name|includesSchema
argument_list|(
name|config
argument_list|)
return|;
block|}
name|Status
name|includesSchema
parameter_list|(
name|SchemaContainer
name|container
parameter_list|)
block|{
if|if
condition|(
name|container
operator|.
name|getSchemas
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Status
operator|.
name|INCLUDE
return|;
block|}
if|if
condition|(
name|getSchema
argument_list|(
name|container
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|Status
operator|.
name|INCLUDE
return|;
block|}
return|return
name|Status
operator|.
name|EXCLUDE_IMPLICIT
return|;
block|}
name|Schema
name|getSchema
parameter_list|(
name|SchemaContainer
name|container
parameter_list|)
block|{
for|for
control|(
name|Schema
name|schema
range|:
name|container
operator|.
name|getSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|schema
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|schema
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

