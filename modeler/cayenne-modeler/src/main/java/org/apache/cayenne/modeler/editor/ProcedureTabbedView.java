begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ProcedureParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|RemoveProcedureParameterAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ProcedureDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ProcedureDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ProcedureParameterDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ProcedureParameterDisplayListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTabbedPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_comment
comment|/**  * Tabbed panel for stored procedure editing.  *   */
end_comment

begin_class
specifier|public
class|class
name|ProcedureTabbedView
extends|extends
name|JTabbedPane
implements|implements
name|ProcedureDisplayListener
implements|,
name|ProcedureParameterDisplayListener
block|{
specifier|protected
name|ProjectController
name|eventController
decl_stmt|;
specifier|protected
name|ProcedureTab
name|procedurePanel
decl_stmt|;
specifier|protected
name|ProcedureParameterTab
name|procedureParameterPanel
decl_stmt|;
specifier|public
name|ProcedureTabbedView
parameter_list|(
name|ProjectController
name|eventController
parameter_list|)
block|{
name|this
operator|.
name|eventController
operator|=
name|eventController
expr_stmt|;
comment|// init view
name|setTabPlacement
argument_list|(
name|JTabbedPane
operator|.
name|TOP
argument_list|)
expr_stmt|;
name|procedurePanel
operator|=
operator|new
name|ProcedureTab
argument_list|(
name|eventController
argument_list|)
expr_stmt|;
name|addTab
argument_list|(
literal|"Procedure"
argument_list|,
operator|new
name|JScrollPane
argument_list|(
name|procedurePanel
argument_list|)
argument_list|)
expr_stmt|;
name|procedureParameterPanel
operator|=
operator|new
name|ProcedureParameterTab
argument_list|(
name|eventController
argument_list|)
expr_stmt|;
name|addTab
argument_list|(
literal|"Parameters"
argument_list|,
name|procedureParameterPanel
argument_list|)
expr_stmt|;
comment|// init listeners
name|eventController
operator|.
name|addProcedureDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|eventController
operator|.
name|addProcedureParameterDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|addChangeListener
argument_list|(
operator|new
name|ChangeListener
argument_list|()
block|{
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|e
parameter_list|)
block|{
comment|// find source view
name|Component
name|selected
init|=
name|ProcedureTabbedView
operator|.
name|this
operator|.
name|getSelectedComponent
argument_list|()
decl_stmt|;
while|while
condition|(
name|selected
operator|instanceof
name|JScrollPane
condition|)
block|{
name|selected
operator|=
operator|(
operator|(
name|JScrollPane
operator|)
name|selected
operator|)
operator|.
name|getViewport
argument_list|()
operator|.
name|getView
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|ExistingSelectionProcessor
operator|)
name|selected
operator|)
operator|.
name|processExistingSelection
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Invoked when currently selected Procedure object is changed.      */
specifier|public
name|void
name|currentProcedureChanged
parameter_list|(
name|ProcedureDisplayEvent
name|e
parameter_list|)
block|{
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|getAction
argument_list|(
name|RemoveProcedureParameterAction
operator|.
name|class
argument_list|)
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getProcedure
argument_list|()
operator|==
literal|null
condition|)
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
else|else
block|{
if|if
condition|(
name|e
operator|.
name|isTabReset
argument_list|()
condition|)
block|{
name|this
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|currentProcedureParameterChanged
parameter_list|(
name|ProcedureParameterDisplayEvent
name|e
parameter_list|)
block|{
name|ProcedureParameter
index|[]
name|parameters
init|=
name|e
operator|.
name|getProcedureParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameters
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|setSelectedComponent
argument_list|(
name|procedureParameterPanel
argument_list|)
expr_stmt|;
name|procedureParameterPanel
operator|.
name|selectParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

