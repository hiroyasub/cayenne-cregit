begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|pref
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|model
operator|.
name|DBCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|model
operator|.
name|DBElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|model
operator|.
name|DBEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|model
operator|.
name|DBModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|model
operator|.
name|DBSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneController
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultMutableTreeNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultTreeModel
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|TreeEditor
extends|extends
name|CayenneController
block|{
specifier|protected
name|TreeView
name|treeView
decl_stmt|;
specifier|protected
name|DefaultMutableTreeNode
name|root
decl_stmt|;
specifier|public
name|TreeEditor
parameter_list|(
name|CayenneController
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|treeView
operator|=
operator|new
name|TreeView
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TreeView
name|getView
parameter_list|()
block|{
return|return
name|treeView
return|;
block|}
specifier|public
name|void
name|setRoot
parameter_list|(
name|String
name|dataSource
parameter_list|)
block|{
name|root
operator|=
operator|new
name|DefaultMutableTreeNode
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|DefaultTreeModel
name|model
init|=
operator|(
name|DefaultTreeModel
operator|)
name|treeView
operator|.
name|getTree
argument_list|()
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|setRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|convertTreeViewIntoTreeNode
parameter_list|(
name|DBModel
name|dbModel
parameter_list|)
block|{
name|DefaultMutableTreeNode
name|modelNode
init|=
operator|new
name|DefaultMutableTreeNode
argument_list|(
name|dbModel
argument_list|)
decl_stmt|;
for|for
control|(
name|DBElement
name|dbElement
range|:
name|dbModel
operator|.
name|getDbElements
argument_list|()
control|)
block|{
name|DefaultMutableTreeNode
name|elementNode
init|=
operator|new
name|DefaultMutableTreeNode
argument_list|(
name|dbElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbElement
operator|instanceof
name|DBCatalog
condition|)
block|{
name|parseCatalog
argument_list|(
name|dbElement
argument_list|,
name|elementNode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dbElement
operator|instanceof
name|DBSchema
condition|)
block|{
name|parseSchema
argument_list|(
name|dbElement
argument_list|,
name|elementNode
argument_list|)
expr_stmt|;
block|}
name|modelNode
operator|.
name|add
argument_list|(
name|elementNode
argument_list|)
expr_stmt|;
block|}
name|root
operator|=
name|modelNode
expr_stmt|;
name|DefaultTreeModel
name|model
init|=
operator|(
name|DefaultTreeModel
operator|)
name|treeView
operator|.
name|getTree
argument_list|()
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|setRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|parseCatalog
parameter_list|(
name|DBElement
name|catalog
parameter_list|,
name|DefaultMutableTreeNode
name|elementNode
parameter_list|)
block|{
for|for
control|(
name|DBElement
name|dbElement
range|:
name|catalog
operator|.
name|getDbElements
argument_list|()
control|)
block|{
name|DefaultMutableTreeNode
name|element
init|=
operator|new
name|DefaultMutableTreeNode
argument_list|(
name|dbElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbElement
operator|instanceof
name|DBSchema
condition|)
block|{
name|parseSchema
argument_list|(
name|dbElement
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dbElement
operator|instanceof
name|DBEntity
condition|)
block|{
name|parseEntity
argument_list|(
name|dbElement
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
name|elementNode
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|parseSchema
parameter_list|(
name|DBElement
name|schema
parameter_list|,
name|DefaultMutableTreeNode
name|elementNode
parameter_list|)
block|{
for|for
control|(
name|DBElement
name|element
range|:
name|schema
operator|.
name|getDbElements
argument_list|()
control|)
block|{
name|DefaultMutableTreeNode
name|entityNode
init|=
operator|new
name|DefaultMutableTreeNode
argument_list|(
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|instanceof
name|DBEntity
condition|)
block|{
name|parseEntity
argument_list|(
name|element
argument_list|,
name|entityNode
argument_list|)
expr_stmt|;
block|}
name|elementNode
operator|.
name|add
argument_list|(
name|entityNode
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|parseEntity
parameter_list|(
name|DBElement
name|entity
parameter_list|,
name|DefaultMutableTreeNode
name|entityNode
parameter_list|)
block|{
for|for
control|(
name|DBElement
name|column
range|:
name|entity
operator|.
name|getDbElements
argument_list|()
control|)
block|{
name|DefaultMutableTreeNode
name|columnNode
init|=
operator|new
name|DefaultMutableTreeNode
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|entityNode
operator|.
name|add
argument_list|(
name|columnNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

