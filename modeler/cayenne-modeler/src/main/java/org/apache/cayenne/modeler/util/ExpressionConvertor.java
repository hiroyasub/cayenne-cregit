begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|ExpressionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|exp
operator|.
name|parser
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_comment
comment|/**  * A Scope convertor that allows to display expressions in text fields.  *   * @since 1.1  * @author Andrus Adamchik  */
end_comment

begin_class
specifier|public
class|class
name|ExpressionConvertor
block|{
specifier|public
name|String
name|valueAsString
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|Expression
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported value class: "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Object
name|stringAsValue
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|string
operator|==
literal|null
operator|||
name|string
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|Expression
operator|.
name|fromString
argument_list|(
name|string
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExpressionException
name|eex
parameter_list|)
block|{
comment|// this is likely a parse exception... show detailed message
name|Throwable
name|cause
init|=
name|Util
operator|.
name|unwindException
argument_list|(
name|eex
argument_list|)
decl_stmt|;
name|String
name|message
init|=
operator|(
name|cause
operator|instanceof
name|ParseException
operator|)
condition|?
name|cause
operator|.
name|getMessage
argument_list|()
else|:
literal|"Invalid expression: "
operator|+
name|string
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|supportsStringAsValue
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

