begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * FileWatchdog is a watcher for files' change. If one of the files has changed  * or been removed, a  * {@link #doOnChange(org.apache.cayenne.modeler.util.FileWatchdog.FileInfo)} or  * {@link #doOnRemove(org.apache.cayenne.modeler.util.FileWatchdog.FileInfo)  * method} will be called  *   * Original code taken from Log4J project  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|FileWatchdog
extends|extends
name|Thread
block|{
comment|/**      * The default delay between every file modification check      */
specifier|static
specifier|final
specifier|public
name|long
name|DEFAULT_DELAY
init|=
literal|4000
decl_stmt|;
comment|/**      * The names of the files to observe for changes.      */
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
name|filesInfo
decl_stmt|;
comment|/**      * The delay to observe between every check. By default set      * {@link #DEFAULT_DELAY}.      */
specifier|protected
name|long
name|delay
init|=
name|DEFAULT_DELAY
decl_stmt|;
comment|/**      * Paused flag      */
specifier|protected
name|boolean
name|paused
decl_stmt|;
comment|/**      * This flags shows whether only one or multiple notifications will be fired      * when several files change      */
specifier|protected
name|boolean
name|singleNotification
decl_stmt|;
comment|/**      * An object to enable synchronization      */
specifier|private
name|Object
name|sync
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FileWatchdog
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|FileWatchdog
parameter_list|()
block|{
name|filesInfo
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|FileInfo
argument_list|>
argument_list|()
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets whether only one or multiple notifications will be fired when      * several files change      */
specifier|public
name|void
name|setSingleNotification
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|singleNotification
operator|=
name|b
expr_stmt|;
block|}
comment|/**      * Returns whether only one or multiple notifications will be fired when      * several files change      */
specifier|public
name|boolean
name|isSingleNotification
parameter_list|()
block|{
return|return
name|singleNotification
return|;
block|}
comment|/**      * Adds a new file to watch      *       * @param location      *            path of file      */
specifier|public
name|void
name|addFile
parameter_list|(
name|String
name|location
parameter_list|)
block|{
try|try
block|{
name|filesInfo
operator|.
name|put
argument_list|(
name|location
argument_list|,
operator|new
name|FileInfo
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"SecurityException adding file "
operator|+
name|location
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Turns off watching for a specified file      *       * @param location      *            path of file      */
specifier|public
name|void
name|removeFile
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|filesInfo
operator|.
name|remove
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
comment|/**      * Turns off watching for all files      */
specifier|public
name|void
name|removeAllFiles
parameter_list|()
block|{
name|filesInfo
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Set the delay to observe between each check of the file changes.      */
specifier|public
name|void
name|setDelay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
block|}
comment|/**      * Invoked when one of the watched files has changed      *       * @param fileInfo      *            Changed file info      */
specifier|protected
specifier|abstract
name|void
name|doOnChange
parameter_list|(
name|FileInfo
name|fileInfo
parameter_list|)
function_decl|;
comment|/**      * Invoked when one of the watched files has been removed      *       * @param fileInfo      *            Changed file info      */
specifier|protected
specifier|abstract
name|void
name|doOnRemove
parameter_list|(
name|FileInfo
name|fileInfo
parameter_list|)
function_decl|;
specifier|protected
name|void
name|check
parameter_list|()
block|{
if|if
condition|(
name|paused
condition|)
return|return;
name|List
argument_list|<
name|FileInfo
argument_list|>
name|changed
init|=
operator|new
name|Vector
argument_list|<
name|FileInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FileInfo
argument_list|>
name|deleted
init|=
operator|new
name|Vector
argument_list|<
name|FileInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|FileInfo
argument_list|>
name|it
init|=
name|filesInfo
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|FileInfo
name|fi
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|fileExists
decl_stmt|;
try|try
block|{
name|fileExists
operator|=
name|fi
operator|.
name|getFile
argument_list|()
operator|.
name|exists
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"SecurityException checking file "
operator|+
name|fi
operator|.
name|getFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// we still process with other files
continue|continue;
block|}
if|if
condition|(
name|fileExists
condition|)
block|{
name|long
name|l
init|=
name|fi
operator|.
name|getFile
argument_list|()
operator|.
name|lastModified
argument_list|()
decl_stmt|;
comment|// this can also throw
comment|// a
comment|// SecurityException
if|if
condition|(
name|l
operator|>
name|fi
operator|.
name|getLastModified
argument_list|()
condition|)
block|{
comment|// however, if we reached
comment|// this point
comment|// this
name|fi
operator|.
name|setLastModified
argument_list|(
name|l
argument_list|)
expr_stmt|;
comment|// is very unlikely.
name|changed
operator|.
name|add
argument_list|(
name|fi
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|fi
operator|.
name|getLastModified
argument_list|()
operator|!=
operator|-
literal|1
condition|)
comment|// the file has been
comment|// removed
block|{
name|deleted
operator|.
name|add
argument_list|(
name|fi
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// no point to watch the file now
block|}
block|}
for|for
control|(
name|FileInfo
name|aDeleted
range|:
name|deleted
control|)
block|{
name|doOnRemove
argument_list|(
name|aDeleted
argument_list|)
expr_stmt|;
if|if
condition|(
name|singleNotification
condition|)
return|return;
block|}
for|for
control|(
name|FileInfo
name|aChanged
range|:
name|changed
control|)
block|{
name|doOnChange
argument_list|(
name|aChanged
argument_list|)
expr_stmt|;
if|if
condition|(
name|singleNotification
condition|)
return|return;
block|}
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|delay
argument_list|)
expr_stmt|;
name|check
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// someone asked to stop
return|return;
block|}
block|}
block|}
comment|/**      * Tells watcher to pause watching for some time. Useful before changing      * files      */
specifier|public
name|void
name|pauseWatching
parameter_list|()
block|{
name|paused
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Resumes watching for files      */
specifier|public
name|void
name|resumeWatching
parameter_list|()
block|{
name|paused
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Class to store information about files (last modification time& File      * pointer)      */
specifier|protected
class|class
name|FileInfo
block|{
comment|/**          * Exact java.io.File object, may not be null          */
name|File
name|file
decl_stmt|;
comment|/**          * Time the file was modified          */
name|long
name|lastModified
decl_stmt|;
comment|/**          * Creates new object          *           * @param location          *            the file path          */
specifier|public
name|FileInfo
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|lastModified
operator|=
name|file
operator|.
name|exists
argument_list|()
condition|?
name|file
operator|.
name|lastModified
argument_list|()
else|:
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|File
name|getFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
specifier|public
name|long
name|getLastModified
parameter_list|()
block|{
return|return
name|lastModified
return|;
block|}
specifier|public
name|void
name|setLastModified
parameter_list|(
name|long
name|l
parameter_list|)
block|{
name|lastModified
operator|=
name|l
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

