begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|Preferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|DataSourceWizard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|DBConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|DataMapDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneAction
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|DBConnectionInfo
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Base action that provides DBConnectionInfo for the current DataMap or calls {@link DataSourceWizard} dialog to  * create one.  *  * @since 4.2  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|DBConnectionAwareAction
extends|extends
name|CayenneAction
block|{
specifier|public
name|DBConnectionAwareAction
parameter_list|(
name|String
name|name
parameter_list|,
name|Application
name|application
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|application
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DBConnectionInfo
name|getConnectionInfo
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|DBConnectionInfo
name|connectionInfo
decl_stmt|;
if|if
condition|(
name|datamapPrefNotExist
argument_list|()
condition|)
block|{
name|DataSourceWizard
name|connectWizard
init|=
name|getDataSourceWizard
argument_list|(
name|title
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectWizard
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|connectionInfo
operator|=
name|connectWizard
operator|.
name|getConnectionInfo
argument_list|()
expr_stmt|;
name|saveConnectionInfo
argument_list|(
name|connectWizard
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connectionInfo
operator|=
name|getConnectionInfoFromPreferences
argument_list|()
expr_stmt|;
block|}
return|return
name|connectionInfo
return|;
block|}
specifier|protected
name|DataSourceWizard
name|getDataSourceWizard
parameter_list|(
name|String
name|title
parameter_list|,
name|String
index|[]
name|buttons
parameter_list|)
block|{
name|DataSourceWizard
name|connectWizard
init|=
operator|new
name|DataSourceWizard
argument_list|(
name|getProjectController
argument_list|()
argument_list|,
name|title
argument_list|,
name|buttons
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|connectWizard
operator|.
name|startupAction
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|connectWizard
return|;
block|}
specifier|protected
name|DataSourceWizard
name|getDataSourceWizard
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|DataSourceWizard
name|connectWizard
init|=
operator|new
name|DataSourceWizard
argument_list|(
name|getProjectController
argument_list|()
argument_list|,
name|title
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|connectWizard
operator|.
name|startupAction
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|connectWizard
return|;
block|}
specifier|protected
name|boolean
name|datamapPrefNotExist
parameter_list|()
block|{
name|Preferences
name|dataMapPreference
init|=
name|getProjectController
argument_list|()
operator|.
name|getDataMapPreferences
argument_list|(
name|getProjectController
argument_list|()
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|)
operator|.
name|getCurrentPreference
argument_list|()
decl_stmt|;
return|return
name|dataMapPreference
operator|==
literal|null
operator|||
name|dataMapPreference
operator|.
name|get
argument_list|(
name|URL_PROPERTY
argument_list|,
literal|null
argument_list|)
operator|==
literal|null
return|;
block|}
specifier|protected
name|DBConnectionInfo
name|getConnectionInfoFromPreferences
parameter_list|()
block|{
name|DBConnectionInfo
name|connectionInfo
init|=
operator|new
name|DBConnectionInfo
argument_list|()
decl_stmt|;
name|DataMapDefaults
name|dataMapDefaults
init|=
name|getProjectController
argument_list|()
operator|.
name|getDataMapPreferences
argument_list|(
name|getProjectController
argument_list|()
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|)
decl_stmt|;
name|connectionInfo
operator|.
name|setDbAdapter
argument_list|(
name|dataMapDefaults
operator|.
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|DB_ADAPTER_PROPERTY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setUrl
argument_list|(
name|dataMapDefaults
operator|.
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|URL_PROPERTY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setUserName
argument_list|(
name|dataMapDefaults
operator|.
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|USER_NAME_PROPERTY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setPassword
argument_list|(
name|dataMapDefaults
operator|.
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|PASSWORD_PROPERTY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setJdbcDriver
argument_list|(
name|dataMapDefaults
operator|.
name|getCurrentPreference
argument_list|()
operator|.
name|get
argument_list|(
name|JDBC_DRIVER_PROPERTY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|connectionInfo
return|;
block|}
specifier|protected
name|void
name|saveConnectionInfo
parameter_list|(
name|DataSourceWizard
name|connectWizard
parameter_list|)
block|{
name|DataMapDefaults
name|dataMapDefaults
init|=
name|getProjectController
argument_list|()
operator|.
name|getDataMapPreferences
argument_list|(
name|getProjectController
argument_list|()
operator|.
name|getCurrentDataMap
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|dbAdapter
init|=
name|connectWizard
operator|.
name|getConnectionInfo
argument_list|()
operator|.
name|getDbAdapter
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbAdapter
operator|!=
literal|null
condition|)
block|{
name|dataMapDefaults
operator|.
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|DB_ADAPTER_PROPERTY
argument_list|,
name|dbAdapter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataMapDefaults
operator|.
name|getCurrentPreference
argument_list|()
operator|.
name|remove
argument_list|(
name|DB_ADAPTER_PROPERTY
argument_list|)
expr_stmt|;
block|}
name|dataMapDefaults
operator|.
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|URL_PROPERTY
argument_list|,
name|connectWizard
operator|.
name|getConnectionInfo
argument_list|()
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|dataMapDefaults
operator|.
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|USER_NAME_PROPERTY
argument_list|,
name|connectWizard
operator|.
name|getConnectionInfo
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|dataMapDefaults
operator|.
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|PASSWORD_PROPERTY
argument_list|,
name|connectWizard
operator|.
name|getConnectionInfo
argument_list|()
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|dataMapDefaults
operator|.
name|getCurrentPreference
argument_list|()
operator|.
name|put
argument_list|(
name|JDBC_DRIVER_PROPERTY
argument_list|,
name|connectWizard
operator|.
name|getConnectionInfo
argument_list|()
operator|.
name|getJdbcDriver
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

