begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|load
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|DbSyncModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|DIBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|di
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|LongRunningTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|ProjectUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|configuration
operator|.
name|ToolsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|DbImportAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|DbImportModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|final
specifier|public
class|class
name|LoadDataMapTask
extends|extends
name|LongRunningTask
block|{
specifier|private
specifier|static
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DbLoaderContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DbLoaderContext
name|context
decl_stmt|;
specifier|public
name|LoadDataMapTask
parameter_list|(
name|JFrame
name|frame
parameter_list|,
name|String
name|title
parameter_list|,
name|DbLoaderContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|frame
argument_list|,
name|title
argument_list|)
expr_stmt|;
name|setMinValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setMaxValue
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|execute
parameter_list|()
block|{
name|context
operator|.
name|setStatusNote
argument_list|(
literal|"Preparing..."
argument_list|)
expr_stmt|;
try|try
block|{
name|createAction
argument_list|()
operator|.
name|execute
argument_list|(
name|context
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|context
operator|.
name|processException
argument_list|(
name|e
argument_list|,
literal|"Error importing database schema."
argument_list|)
expr_stmt|;
block|}
name|ProjectUtil
operator|.
name|cleanObjMappings
argument_list|(
name|context
operator|.
name|getDataMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DbImportAction
name|createAction
parameter_list|()
block|{
name|Injector
name|injector
init|=
name|DIBootstrap
operator|.
name|createInjector
argument_list|(
operator|new
name|DbSyncModule
argument_list|()
argument_list|,
operator|new
name|ToolsModule
argument_list|(
name|LOGGER
argument_list|)
argument_list|,
operator|new
name|DbImportModule
argument_list|()
argument_list|,
operator|new
name|ModelerSyncModule
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|injector
operator|.
name|getInstance
argument_list|(
name|DbImportAction
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getCurrentNote
parameter_list|()
block|{
return|return
name|context
operator|.
name|getStatusNote
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getCurrentValue
parameter_list|()
block|{
return|return
name|getMinValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isIndeterminate
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCanceled
parameter_list|()
block|{
return|return
name|context
operator|.
name|isStopping
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCanceled
parameter_list|(
name|boolean
name|canceled
parameter_list|)
block|{
if|if
condition|(
name|canceled
condition|)
block|{
name|context
operator|.
name|setStatusNote
argument_list|(
literal|"Canceling.."
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|setStopping
argument_list|(
name|canceled
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

