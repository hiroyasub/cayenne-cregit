begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|combo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Insets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|CellRendererPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|InputMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextField
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|KeyStroke
import|;
end_import

begin_comment
comment|/**  * EditorTextField is a text field to be used in combobox editor. It paints self normally  * when focused, otherwise combo's renderer is used.  *   */
end_comment

begin_class
specifier|public
class|class
name|EditorTextField
extends|extends
name|JTextField
implements|implements
name|FocusListener
block|{
comment|/**      * Edited combobox      */
specifier|protected
name|JComboBox
name|combo
decl_stmt|;
comment|/**      * Panel to draw renderer component      */
specifier|private
specifier|final
name|CellRendererPane
name|rendererPane
decl_stmt|;
comment|/**      * Combo's popup list is unaccessible, so we use our own default list      */
specifier|private
specifier|final
name|JList
name|list
init|=
operator|new
name|JList
argument_list|()
decl_stmt|;
comment|/**      * True if editor has focus.      */
specifier|private
name|boolean
name|hasFocus
decl_stmt|;
specifier|public
name|EditorTextField
parameter_list|(
name|JComboBox
name|edited
parameter_list|)
block|{
name|combo
operator|=
name|edited
expr_stmt|;
name|rendererPane
operator|=
operator|new
name|CellRendererPane
argument_list|()
expr_stmt|;
name|addFocusListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// hook up to TAB handler to keep entered value after TAB is pressed
name|initTabHandler
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initTabHandler
parameter_list|()
block|{
name|this
operator|.
name|combo
operator|.
name|setFocusTraversalKeysEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|combo
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"tab-action"
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|combo
operator|.
name|setSelectedItem
argument_list|(
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|Component
name|component
init|=
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|component
operator|instanceof
name|JTable
condition|)
block|{
name|JTable
name|table
init|=
operator|(
name|JTable
operator|)
name|component
decl_stmt|;
if|if
condition|(
operator|(
name|e
operator|.
name|getModifiers
argument_list|()
operator|&
name|ActionEvent
operator|.
name|SHIFT_MASK
operator|)
operator|>
literal|0
condition|)
block|{
name|table
operator|.
name|changeSelection
argument_list|(
name|table
operator|.
name|getEditingRow
argument_list|()
argument_list|,
name|table
operator|.
name|getEditingColumn
argument_list|()
operator|-
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|changeSelection
argument_list|(
name|table
operator|.
name|getEditingRow
argument_list|()
argument_list|,
name|table
operator|.
name|getEditingColumn
argument_list|()
operator|+
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|(
name|e
operator|.
name|getModifiers
argument_list|()
operator|&
name|ActionEvent
operator|.
name|SHIFT_MASK
operator|)
operator|>
literal|0
condition|)
block|{
name|transferFocusBackward
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|transferFocus
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|InputMap
name|inputMap
init|=
name|this
operator|.
name|combo
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
argument_list|)
decl_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"TAB"
argument_list|)
argument_list|,
literal|"tab-action"
argument_list|)
expr_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"shift TAB"
argument_list|)
argument_list|,
literal|"tab-action"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|paintComponent
parameter_list|(
name|Graphics
name|g
parameter_list|)
block|{
if|if
condition|(
name|hasFocus
condition|)
block|{
name|super
operator|.
name|paintComponent
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|setEnabled
argument_list|(
name|combo
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|Component
name|c
init|=
name|combo
operator|.
name|getRenderer
argument_list|()
operator|.
name|getListCellRendererComponent
argument_list|(
name|list
argument_list|,
name|combo
operator|.
name|getSelectedItem
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Insets
name|insets
init|=
name|getInsets
argument_list|()
decl_stmt|;
name|Color
name|oldColor
init|=
name|g
operator|.
name|getColor
argument_list|()
decl_stmt|;
name|g
operator|.
name|setColor
argument_list|(
name|getBackground
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|getClientProperty
argument_list|(
literal|"TextField.fullSizeBackground"
argument_list|)
argument_list|)
condition|)
block|{
name|g
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|getWidth
argument_list|()
argument_list|,
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|g
operator|.
name|fillRect
argument_list|(
name|insets
operator|.
name|left
argument_list|,
name|insets
operator|.
name|top
argument_list|,
name|getWidth
argument_list|()
operator|-
name|insets
operator|.
name|right
operator|-
name|insets
operator|.
name|left
argument_list|,
name|getHeight
argument_list|()
operator|-
name|insets
operator|.
name|bottom
operator|-
name|insets
operator|.
name|top
argument_list|)
expr_stmt|;
block|}
name|g
operator|.
name|setColor
argument_list|(
name|oldColor
argument_list|)
expr_stmt|;
name|rendererPane
operator|.
name|paintComponent
argument_list|(
name|g
argument_list|,
name|c
argument_list|,
name|combo
argument_list|,
name|insets
operator|.
name|left
argument_list|,
name|insets
operator|.
name|top
argument_list|,
name|getWidth
argument_list|()
operator|-
name|insets
operator|.
name|right
operator|-
name|insets
operator|.
name|left
argument_list|,
name|getHeight
argument_list|()
operator|-
name|insets
operator|.
name|bottom
operator|-
name|insets
operator|.
name|top
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|focusGained
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
name|hasFocus
operator|=
literal|true
expr_stmt|;
name|combo
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|focusLost
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
name|hasFocus
operator|=
literal|false
expr_stmt|;
name|combo
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

