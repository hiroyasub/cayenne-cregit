begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|pref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|Preferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|pref
operator|.
name|CayennePreferenceEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|pref
operator|.
name|PreferenceEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|BindingBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|ObjectBinding
import|;
end_import

begin_class
specifier|public
class|class
name|GeneralPreferences
extends|extends
name|CayenneController
block|{
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_LOAD_PROJECT_PREFERENCE
init|=
literal|"autoLoadProject"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DELETE_PROMPT_PREFERENCE
init|=
literal|"deletePrompt"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ENCODING_PREFERENCE
init|=
literal|"encoding"
decl_stmt|;
specifier|protected
name|GeneralPreferencesView
name|view
decl_stmt|;
specifier|protected
name|CayennePreferenceEditor
name|editor
decl_stmt|;
specifier|protected
name|boolean
name|autoLoadProjectPreference
decl_stmt|;
specifier|protected
name|String
name|encoding
decl_stmt|;
specifier|protected
name|boolean
name|deletePromptPreference
decl_stmt|;
specifier|protected
name|Preferences
name|preferences
decl_stmt|;
specifier|protected
name|ObjectBinding
name|encodingBinding
decl_stmt|;
specifier|protected
name|ObjectBinding
name|autoLoadProjectBinding
decl_stmt|;
specifier|protected
name|ObjectBinding
name|deletePromptBinding
decl_stmt|;
specifier|public
name|GeneralPreferences
parameter_list|(
name|PreferenceDialog
name|parentController
parameter_list|)
block|{
name|super
argument_list|(
name|parentController
argument_list|)
expr_stmt|;
name|this
operator|.
name|view
operator|=
operator|new
name|GeneralPreferencesView
argument_list|()
expr_stmt|;
name|PreferenceEditor
name|editor
init|=
name|parentController
operator|.
name|getEditor
argument_list|()
decl_stmt|;
if|if
condition|(
name|editor
operator|instanceof
name|CayennePreferenceEditor
condition|)
block|{
name|this
operator|.
name|editor
operator|=
operator|(
name|CayennePreferenceEditor
operator|)
name|editor
expr_stmt|;
name|this
operator|.
name|view
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|initBindings
argument_list|()
expr_stmt|;
name|encodingBinding
operator|.
name|updateView
argument_list|()
expr_stmt|;
name|autoLoadProjectBinding
operator|.
name|updateView
argument_list|()
expr_stmt|;
name|deletePromptBinding
operator|.
name|updateView
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|view
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Component
name|getView
parameter_list|()
block|{
return|return
name|view
return|;
block|}
specifier|protected
name|void
name|initBindings
parameter_list|()
block|{
comment|// init model objects
name|preferences
operator|=
name|application
operator|.
name|getPreferencesNode
argument_list|(
name|GeneralPreferences
operator|.
name|class
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|this
operator|.
name|encoding
operator|=
name|preferences
operator|.
name|get
argument_list|(
name|ENCODING_PREFERENCE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|autoLoadProjectPreference
operator|=
name|preferences
operator|.
name|getBoolean
argument_list|(
name|AUTO_LOAD_PROJECT_PREFERENCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|deletePromptPreference
operator|=
name|preferences
operator|.
name|getBoolean
argument_list|(
name|DELETE_PROMPT_PREFERENCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// build child controllers...
name|EncodingSelector
name|encodingSelector
init|=
operator|new
name|EncodingSelector
argument_list|(
name|this
argument_list|,
name|view
operator|.
name|getEncodingSelector
argument_list|()
argument_list|)
decl_stmt|;
comment|// create bindings...
name|BindingBuilder
name|builder
init|=
operator|new
name|BindingBuilder
argument_list|(
name|getApplication
argument_list|()
operator|.
name|getBindingFactory
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|this
operator|.
name|encodingBinding
operator|=
name|builder
operator|.
name|bindToProperty
argument_list|(
name|encodingSelector
argument_list|,
literal|"encoding"
argument_list|,
name|EncodingSelector
operator|.
name|ENCODING_PROPERTY_BINDING
argument_list|)
expr_stmt|;
name|this
operator|.
name|autoLoadProjectBinding
operator|=
name|builder
operator|.
name|bindToCheckBox
argument_list|(
name|view
operator|.
name|getAutoLoadProject
argument_list|()
argument_list|,
literal|"autoLoadProject"
argument_list|)
expr_stmt|;
name|this
operator|.
name|deletePromptBinding
operator|=
name|builder
operator|.
name|bindToCheckBox
argument_list|(
name|view
operator|.
name|getDeletePrompt
argument_list|()
argument_list|,
literal|"deletePrompt"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
name|encoding
return|;
block|}
specifier|public
name|void
name|setEncoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|addChangedPreferences
argument_list|(
name|ENCODING_PREFERENCE
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
block|}
specifier|public
name|boolean
name|getAutoLoadProject
parameter_list|()
block|{
return|return
name|autoLoadProjectPreference
return|;
block|}
specifier|public
name|void
name|setAutoLoadProject
parameter_list|(
name|boolean
name|autoLoadProject
parameter_list|)
block|{
name|addChangedBooleanPreferences
argument_list|(
name|AUTO_LOAD_PROJECT_PREFERENCE
argument_list|,
name|autoLoadProject
argument_list|)
expr_stmt|;
name|this
operator|.
name|autoLoadProjectPreference
operator|=
name|autoLoadProject
expr_stmt|;
block|}
specifier|public
name|boolean
name|getDeletePrompt
parameter_list|()
block|{
return|return
name|deletePromptPreference
return|;
block|}
specifier|public
name|void
name|setDeletePrompt
parameter_list|(
name|boolean
name|deletePrompt
parameter_list|)
block|{
name|addChangedBooleanPreferences
argument_list|(
name|DELETE_PROMPT_PREFERENCE
argument_list|,
name|deletePrompt
argument_list|)
expr_stmt|;
name|this
operator|.
name|deletePromptPreference
operator|=
name|deletePrompt
expr_stmt|;
block|}
specifier|public
name|void
name|addChangedBooleanPreferences
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|map
init|=
name|editor
operator|.
name|getChangedBooleanPreferences
argument_list|()
operator|.
name|get
argument_list|(
name|preferences
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|editor
operator|.
name|getChangedBooleanPreferences
argument_list|()
operator|.
name|put
argument_list|(
name|preferences
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addChangedPreferences
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|editor
operator|.
name|getChangedPreferences
argument_list|()
operator|.
name|get
argument_list|(
name|preferences
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|editor
operator|.
name|getChangedPreferences
argument_list|()
operator|.
name|put
argument_list|(
name|preferences
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

