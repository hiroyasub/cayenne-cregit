begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|naming
operator|.
name|NameBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|MapLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|FSPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|FileFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_comment
comment|/**  * Modeler action that imports a DataMap into a project from an arbitrary  * location.  *  * @since 1.1  */
end_comment

begin_class
specifier|public
class|class
name|ImportDataMapAction
extends|extends
name|CayenneAction
block|{
specifier|private
specifier|static
name|Logger
name|logObj
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ImportDataMapAction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ConfigurationNameMapper
name|nameMapper
decl_stmt|;
specifier|public
name|ImportDataMapAction
parameter_list|(
name|Application
name|application
parameter_list|,
name|ConfigurationNameMapper
name|nameMapper
parameter_list|)
block|{
name|super
argument_list|(
name|getActionName
argument_list|()
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|this
operator|.
name|nameMapper
operator|=
name|nameMapper
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|getActionName
parameter_list|()
block|{
return|return
literal|"Import DataMap"
return|;
block|}
specifier|public
name|void
name|performAction
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|importDataMap
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|importDataMap
parameter_list|()
block|{
name|File
name|dataMapFile
init|=
name|selectDataMap
argument_list|(
name|Application
operator|.
name|getFrame
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataMapFile
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DataMap
name|newMap
decl_stmt|;
try|try
block|{
name|URL
name|url
init|=
name|dataMapFile
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|in
init|=
name|url
operator|.
name|openStream
argument_list|()
init|;
init|)
block|{
name|InputSource
name|inSrc
init|=
operator|new
name|InputSource
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|inSrc
operator|.
name|setSystemId
argument_list|(
name|dataMapFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|newMap
operator|=
operator|new
name|MapLoader
argument_list|()
operator|.
name|loadDataMap
argument_list|(
name|inSrc
argument_list|)
expr_stmt|;
block|}
name|ConfigurationNode
name|root
init|=
name|getProjectController
argument_list|()
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|newMap
operator|.
name|setName
argument_list|(
name|NameBuilder
operator|.
name|builder
argument_list|(
name|newMap
argument_list|,
name|root
argument_list|)
operator|.
name|baseName
argument_list|(
name|newMap
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|baseResource
init|=
operator|(
operator|(
name|DataChannelDescriptor
operator|)
name|root
operator|)
operator|.
name|getConfigurationSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|baseResource
operator|!=
literal|null
condition|)
block|{
name|Resource
name|dataMapResource
init|=
name|baseResource
operator|.
name|getRelativeResource
argument_list|(
name|nameMapper
operator|.
name|configurationLocation
argument_list|(
name|newMap
argument_list|)
argument_list|)
decl_stmt|;
name|newMap
operator|.
name|setConfigurationSource
argument_list|(
name|dataMapResource
argument_list|)
expr_stmt|;
block|}
name|getProjectController
argument_list|()
operator|.
name|addDataMap
argument_list|(
name|this
argument_list|,
name|newMap
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logObj
operator|.
name|info
argument_list|(
literal|"Error importing DataMap."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|Application
operator|.
name|getFrame
argument_list|()
argument_list|,
literal|"Error reading DataMap: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Can't Open DataMap"
argument_list|,
name|JOptionPane
operator|.
name|OK_OPTION
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|File
name|selectDataMap
parameter_list|(
name|Frame
name|f
parameter_list|)
block|{
comment|// find start directory in preferences
name|FSPath
name|lastDir
init|=
name|getApplication
argument_list|()
operator|.
name|getFrameController
argument_list|()
operator|.
name|getLastDirectory
argument_list|()
decl_stmt|;
comment|// configure dialog
name|JFileChooser
name|chooser
init|=
operator|new
name|JFileChooser
argument_list|()
decl_stmt|;
name|chooser
operator|.
name|setFileSelectionMode
argument_list|(
name|JFileChooser
operator|.
name|FILES_ONLY
argument_list|)
expr_stmt|;
name|lastDir
operator|.
name|updateChooser
argument_list|(
name|chooser
argument_list|)
expr_stmt|;
name|chooser
operator|.
name|addChoosableFileFilter
argument_list|(
name|FileFilters
operator|.
name|getDataMapFilter
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|chooser
operator|.
name|showDialog
argument_list|(
name|f
argument_list|,
literal|"Select DataMap"
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|JFileChooser
operator|.
name|APPROVE_OPTION
condition|)
block|{
name|File
name|file
init|=
name|chooser
operator|.
name|getSelectedFile
argument_list|()
decl_stmt|;
comment|// save to preferences...
name|lastDir
operator|.
name|updateFromChooser
argument_list|(
name|chooser
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

