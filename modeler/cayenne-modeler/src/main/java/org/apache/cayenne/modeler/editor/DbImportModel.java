begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dbsync
operator|.
name|reverse
operator|.
name|dbimport
operator|.
name|ReverseEngineering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
operator|.
name|load
operator|.
name|DbImportTreeNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultTreeModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreeNode
import|;
end_import

begin_comment
comment|/**  * @since 4.1  */
end_comment

begin_class
specifier|public
class|class
name|DbImportModel
extends|extends
name|DefaultTreeModel
block|{
specifier|private
name|DbImportTree
name|dbSchemaTree
decl_stmt|;
specifier|private
name|boolean
name|canBeCleaned
decl_stmt|;
name|DbImportModel
parameter_list|(
name|TreeNode
name|root
parameter_list|)
block|{
name|super
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|clearReverseEngineering
parameter_list|(
name|ReverseEngineering
name|reverseEngineering
parameter_list|)
block|{
name|reverseEngineering
operator|.
name|getSchemas
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reverseEngineering
operator|.
name|getCatalogs
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reverseEngineering
operator|.
name|getIncludeTables
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reverseEngineering
operator|.
name|getExcludeTables
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reverseEngineering
operator|.
name|getIncludeColumns
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reverseEngineering
operator|.
name|getExcludeColumns
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reverseEngineering
operator|.
name|getIncludeProcedures
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reverseEngineering
operator|.
name|getExcludeProcedures
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|preprocessTree
parameter_list|()
block|{
name|DbImportTreeNode
name|rootNode
init|=
operator|(
name|DbImportTreeNode
operator|)
name|getRoot
argument_list|()
decl_stmt|;
if|if
condition|(
name|rootNode
operator|.
name|getChildCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|ReverseEngineering
name|reverseEngineering
init|=
operator|(
operator|(
name|ReverseEngineering
operator|)
name|rootNode
operator|.
name|getUserObject
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|canBeCleaned
condition|)
block|{
name|clearReverseEngineering
argument_list|(
name|reverseEngineering
argument_list|)
expr_stmt|;
block|}
name|rootNode
operator|.
name|add
argument_list|(
operator|new
name|DbImportTreeNode
argument_list|(
operator|(
literal|"Configuration is empty."
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|reload
parameter_list|(
name|TreeNode
name|node
parameter_list|)
block|{
name|preprocessTree
argument_list|()
expr_stmt|;
name|super
operator|.
name|reload
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|dbSchemaTree
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setDbSchemaTree
parameter_list|(
name|DbImportTree
name|dbSchemaTree
parameter_list|)
block|{
name|this
operator|.
name|dbSchemaTree
operator|=
name|dbSchemaTree
expr_stmt|;
block|}
specifier|public
name|void
name|setCanBeCleaned
parameter_list|(
name|boolean
name|canBeCleaned
parameter_list|)
block|{
name|this
operator|.
name|canBeCleaned
operator|=
name|canBeCleaned
expr_stmt|;
block|}
block|}
end_class

end_unit

