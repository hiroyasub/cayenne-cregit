begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|LinkDataMapAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTree
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultMutableTreeNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|DataFlavor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|Transferable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|UnsupportedFlavorException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DropTarget
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DropTargetDragEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DropTargetDropEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DropTargetEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|dnd
operator|.
name|DropTargetListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
specifier|public
class|class
name|TreeDropTarget
implements|implements
name|DropTargetListener
implements|,
name|Transferable
block|{
specifier|private
name|DropTarget
name|target
decl_stmt|;
specifier|private
name|JTree
name|targetTree
decl_stmt|;
specifier|private
name|ProjectController
name|eventController
decl_stmt|;
specifier|private
name|TreePath
name|parentPath
decl_stmt|;
specifier|private
name|TreePath
name|targetPath
decl_stmt|;
specifier|public
name|TreeDropTarget
parameter_list|(
name|JTree
name|tree
parameter_list|,
name|ProjectController
name|eventController
parameter_list|,
name|TreePath
name|parentPath
parameter_list|)
block|{
name|targetTree
operator|=
name|tree
expr_stmt|;
name|this
operator|.
name|eventController
operator|=
name|eventController
expr_stmt|;
name|this
operator|.
name|parentPath
operator|=
name|parentPath
expr_stmt|;
name|target
operator|=
operator|new
name|DropTarget
argument_list|(
name|targetTree
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dragEnter
parameter_list|(
name|DropTargetDragEvent
name|dtde
parameter_list|)
block|{
block|}
specifier|public
name|void
name|dragOver
parameter_list|(
name|DropTargetDragEvent
name|dtde
parameter_list|)
block|{
name|Point
name|p
init|=
name|dtde
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|targetPath
operator|=
name|targetTree
operator|.
name|getPathForLocation
argument_list|(
name|p
operator|.
name|x
argument_list|,
name|p
operator|.
name|y
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dragExit
parameter_list|(
name|DropTargetEvent
name|dte
parameter_list|)
block|{
block|}
specifier|public
name|void
name|dropActionChanged
parameter_list|(
name|DropTargetDragEvent
name|dtde
parameter_list|)
block|{
block|}
specifier|public
name|void
name|drop
parameter_list|(
name|DropTargetDropEvent
name|dtde
parameter_list|)
block|{
if|if
condition|(
name|targetPath
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|dtde
operator|.
name|acceptDrop
argument_list|(
name|dtde
operator|.
name|getDropAction
argument_list|()
argument_list|)
expr_stmt|;
name|DefaultMutableTreeNode
name|target
init|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|targetPath
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|DefaultMutableTreeNode
name|parent
init|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|parentPath
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|target
operator|.
name|getUserObject
argument_list|()
operator|instanceof
name|DataNodeDescriptor
operator|&&
name|parent
operator|.
name|getUserObject
argument_list|()
operator|instanceof
name|DataMap
condition|)
block|{
name|DataNodeDescriptor
name|currentDataNode
init|=
operator|(
name|DataNodeDescriptor
operator|)
name|target
operator|.
name|getUserObject
argument_list|()
decl_stmt|;
name|DataMap
name|currentDataMap
init|=
operator|(
name|DataMap
operator|)
name|parent
operator|.
name|getUserObject
argument_list|()
decl_stmt|;
name|LinkDataMapAction
name|action
init|=
name|eventController
operator|.
name|getApplication
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|getAction
argument_list|(
name|LinkDataMapAction
operator|.
name|class
argument_list|)
decl_stmt|;
name|action
operator|.
name|linkDataMap
argument_list|(
name|currentDataMap
argument_list|,
name|currentDataNode
argument_list|)
expr_stmt|;
name|targetTree
operator|.
name|makeVisible
argument_list|(
name|targetPath
operator|.
name|pathByAddingChild
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
name|dtde
operator|.
name|dropComplete
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|dtde
operator|.
name|rejectDrop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|TreePath
name|getPath
parameter_list|()
block|{
return|return
name|this
operator|.
name|targetPath
return|;
block|}
specifier|public
name|Object
name|getTransferData
parameter_list|(
name|DataFlavor
name|arg0
parameter_list|)
throws|throws
name|UnsupportedFlavorException
throws|,
name|IOException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|DataFlavor
index|[]
name|getTransferDataFlavors
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isDataFlavorSupported
parameter_list|(
name|DataFlavor
name|arg0
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

