begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|dba
operator|.
name|DbAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ClassLoadingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|DBConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_comment
comment|/**  * A component for choosing a DataSource. Users can choose from the DataSources configured  * in preferences, and one extra set of connection settings. This object will create and  * keep open a JDBC connection. It is caller responsibility to dispose of it properly.  *   */
end_comment

begin_comment
comment|// TODO: after refactoring DbLoader to accept a DataSource instead of connection this
end_comment

begin_comment
comment|// dialog should be merged with superclass - DataSourceWizard.
end_comment

begin_class
specifier|public
class|class
name|ConnectionWizard
extends|extends
name|DataSourceWizard
block|{
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|protected
name|DbAdapter
name|adapter
decl_stmt|;
specifier|public
name|ConnectionWizard
parameter_list|(
name|CayenneController
name|parent
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|altDataSourceKey
parameter_list|,
name|DBConnectionInfo
name|altDataSource
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|title
argument_list|,
name|altDataSourceKey
argument_list|,
name|altDataSource
argument_list|)
expr_stmt|;
block|}
comment|/**      * Overrides superclass to keep an open connection around for the caller's use.      */
specifier|public
name|void
name|okAction
parameter_list|()
block|{
comment|// build connection and adapter...
name|DBConnectionInfo
name|info
init|=
name|getConnectionInfo
argument_list|()
decl_stmt|;
name|ClassLoadingService
name|classLoader
init|=
name|getApplication
argument_list|()
operator|.
name|getClassLoadingService
argument_list|()
decl_stmt|;
try|try
block|{
name|this
operator|.
name|adapter
operator|=
name|info
operator|.
name|makeAdapter
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|reportError
argument_list|(
literal|"DbAdapter Error"
argument_list|,
name|th
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|this
operator|.
name|connection
operator|=
name|info
operator|.
name|makeDataSource
argument_list|(
name|classLoader
argument_list|)
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|reportError
argument_list|(
literal|"Connection Error"
argument_list|,
name|th
argument_list|)
expr_stmt|;
return|return;
block|}
name|onClose
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns configured DB connection.      */
specifier|public
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
comment|/**      * Returns configured DbAdapter.      */
specifier|public
name|DbAdapter
name|getAdapter
parameter_list|()
block|{
return|return
name|adapter
return|;
block|}
block|}
end_class

end_unit

