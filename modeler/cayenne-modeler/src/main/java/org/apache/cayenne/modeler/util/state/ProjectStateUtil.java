begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|state
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|ConfigurationNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|ProjectStatePreferences
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EventObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|prefs
operator|.
name|BackingStoreException
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ProjectStateUtil
block|{
specifier|public
name|ProjectStateUtil
parameter_list|()
block|{
block|}
specifier|public
name|void
name|saveLastState
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|EventObject
name|displayEvent
init|=
name|controller
operator|.
name|getLastDisplayEvent
argument_list|()
decl_stmt|;
name|ConfigurationNode
index|[]
name|multiplyObjects
init|=
name|controller
operator|.
name|getCurrentPaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|displayEvent
operator|==
literal|null
operator|&&
name|multiplyObjects
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|ProjectStatePreferences
name|preferences
init|=
name|controller
operator|.
name|getProjectStatePreferences
argument_list|()
decl_stmt|;
if|if
condition|(
name|preferences
operator|.
name|getCurrentPreference
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|preferences
operator|.
name|getCurrentPreference
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BackingStoreException
name|e
parameter_list|)
block|{
comment|// ignore exception
block|}
if|if
condition|(
name|displayEvent
operator|!=
literal|null
condition|)
block|{
name|DisplayEventTypes
operator|.
name|valueOf
argument_list|(
name|displayEvent
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|createDisplayEventType
argument_list|(
name|controller
argument_list|)
operator|.
name|saveLastDisplayEvent
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|multiplyObjects
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
operator|new
name|MultipleObjectsDisplayEventType
argument_list|(
name|controller
argument_list|)
operator|.
name|saveLastDisplayEvent
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|fireLastState
parameter_list|(
name|ProjectController
name|controller
parameter_list|)
block|{
name|ProjectStatePreferences
name|preferences
init|=
name|controller
operator|.
name|getProjectStatePreferences
argument_list|()
decl_stmt|;
name|String
name|displayEventName
init|=
name|preferences
operator|.
name|getEvent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|displayEventName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DisplayEventTypes
operator|.
name|valueOf
argument_list|(
name|displayEventName
argument_list|)
operator|.
name|createDisplayEventType
argument_list|(
name|controller
argument_list|)
operator|.
name|fireLastDisplayEvent
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

