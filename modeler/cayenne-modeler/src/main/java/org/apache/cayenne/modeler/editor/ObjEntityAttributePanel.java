begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataChannelDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Embeddable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Relationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|AttributeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|EntityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|ObjAttributeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|ObjEntityListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|ProjectController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|ActionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CopyAttributeRelationshipAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CutAttributeRelationshipAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|PasteAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|RemoveAttributeRelationshipAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|objentity
operator|.
name|ObjAttributeInfoDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|wrapper
operator|.
name|ObjAttributeWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|EntityDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ObjEntityDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ProjectOnSaveEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ProjectOnSaveListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|TablePopupHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|TableColumnPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneTableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|EntityTreeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|EntityTreeModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|ModelerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|PanelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|UIUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|combo
operator|.
name|AutoCompletion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|CayenneMapEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractCellEditor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultComboBoxModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Icon
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ImageIcon
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ListCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ListSelectionModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ListSelectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ListSelectionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|DefaultTableCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableCellEditor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumn
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|JTextComponent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Detail view of the ObjEntity attributes.  */
end_comment

begin_class
specifier|public
class|class
name|ObjEntityAttributePanel
extends|extends
name|JPanel
implements|implements
name|ObjEntityDisplayListener
implements|,
name|ObjEntityListener
implements|,
name|ObjAttributeListener
implements|,
name|ProjectOnSaveListener
block|{
specifier|protected
name|ProjectController
name|mediator
decl_stmt|;
specifier|protected
name|CayenneTable
name|table
decl_stmt|;
specifier|private
name|TableColumnPreferences
name|tablePreferences
decl_stmt|;
specifier|private
name|ObjEntityAttributeRelationshipTab
name|parentPanel
decl_stmt|;
specifier|private
name|boolean
name|enabledResolve
decl_stmt|;
comment|//for JBottom "resolve" in ObjEntityAttrRelationshipTab
specifier|private
name|ActionListener
name|resolver
decl_stmt|;
comment|/**      * By now popup menu item is made similar to toolbar button. (i.e. all functionality      * is here) This should be probably refactored as Action.      */
specifier|protected
name|JMenuItem
name|resolveMenu
decl_stmt|;
specifier|public
name|ObjEntityAttributePanel
parameter_list|(
name|ProjectController
name|mediator
parameter_list|,
name|ObjEntityAttributeRelationshipTab
name|parentPanel
parameter_list|)
block|{
name|this
operator|.
name|mediator
operator|=
name|mediator
expr_stmt|;
name|this
operator|.
name|parentPanel
operator|=
name|parentPanel
expr_stmt|;
name|initView
argument_list|()
expr_stmt|;
name|initController
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initView
parameter_list|()
block|{
name|this
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|ActionManager
name|actionManager
init|=
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getActionManager
argument_list|()
decl_stmt|;
name|table
operator|=
operator|new
name|CayenneTable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Component
name|prepareRenderer
parameter_list|(
name|TableCellRenderer
name|renderer
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|Component
name|component
init|=
name|super
operator|.
name|prepareRenderer
argument_list|(
name|renderer
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
name|int
name|rendererWidth
init|=
name|component
operator|.
name|getPreferredSize
argument_list|()
operator|.
name|width
decl_stmt|;
name|TableColumn
name|tableColumn
init|=
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|tableColumn
operator|.
name|setPreferredWidth
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|rendererWidth
operator|+
name|getIntercellSpacing
argument_list|()
operator|.
name|width
argument_list|,
name|tableColumn
operator|.
name|getPreferredWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|component
return|;
block|}
block|}
expr_stmt|;
name|table
operator|.
name|setDefaultRenderer
argument_list|(
name|String
operator|.
name|class
argument_list|,
operator|new
name|CellRenderer
argument_list|()
argument_list|)
expr_stmt|;
name|tablePreferences
operator|=
operator|new
name|TableColumnPreferences
argument_list|(
name|ObjAttributeTableModel
operator|.
name|class
argument_list|,
literal|"objEntity/attributeTable"
argument_list|)
expr_stmt|;
comment|/**          * Create and install a popup          */
name|Icon
name|ico
init|=
name|ModelerUtil
operator|.
name|buildIcon
argument_list|(
literal|"icon-info.gif"
argument_list|)
decl_stmt|;
name|resolveMenu
operator|=
operator|new
name|JMenuItem
argument_list|(
literal|"Database Mapping"
argument_list|,
name|ico
argument_list|)
expr_stmt|;
name|JPopupMenu
name|popup
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|resolveMenu
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|actionManager
operator|.
name|getAction
argument_list|(
name|RemoveAttributeRelationshipAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|popup
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|actionManager
operator|.
name|getAction
argument_list|(
name|CutAttributeRelationshipAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|actionManager
operator|.
name|getAction
argument_list|(
name|CopyAttributeRelationshipAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|actionManager
operator|.
name|getAction
argument_list|(
name|PasteAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|TablePopupHandler
operator|.
name|install
argument_list|(
name|table
argument_list|,
name|popup
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|PanelFactory
operator|.
name|createTablePanel
argument_list|(
name|table
argument_list|,
literal|null
argument_list|)
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initController
parameter_list|()
block|{
name|mediator
operator|.
name|addObjEntityDisplayListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addObjEntityListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|addObjAttributeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|resolver
operator|=
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|int
name|row
init|=
name|table
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|<
literal|0
condition|)
block|{
return|return;
block|}
name|ObjAttributeTableModel
name|model
init|=
operator|(
name|ObjAttributeTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
comment|// ... show dialog...
operator|new
name|ObjAttributeInfoDialog
argument_list|(
name|mediator
argument_list|,
name|row
argument_list|,
name|model
argument_list|)
operator|.
name|startupAction
argument_list|()
expr_stmt|;
comment|/**                  * This is required for a table to be updated properly                  */
name|table
operator|.
name|cancelEditing
argument_list|()
expr_stmt|;
comment|// need to refresh selected row... do this by unselecting/selecting the
comment|// row
name|table
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|table
operator|.
name|select
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|enabledResolve
operator|=
literal|false
expr_stmt|;
block|}
block|}
expr_stmt|;
name|resolveMenu
operator|.
name|addActionListener
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|table
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|addListSelectionListener
argument_list|(
operator|new
name|ObjAttributeListSelectionListener
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setAutoResizeMode
argument_list|(
name|JTable
operator|.
name|AUTO_RESIZE_OFF
argument_list|)
expr_stmt|;
name|mediator
operator|.
name|getApplication
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|setupCutCopyPaste
argument_list|(
name|table
argument_list|,
name|CutAttributeRelationshipAction
operator|.
name|class
argument_list|,
name|CopyAttributeRelationshipAction
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initComboBoxes
parameter_list|(
name|ObjAttributeTableModel
name|model
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|embeddableNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|typeNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
operator|(
operator|(
name|DataChannelDescriptor
operator|)
name|mediator
operator|.
name|getProject
argument_list|()
operator|.
name|getRootNode
argument_list|()
operator|)
operator|.
name|getDataMaps
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DataMap
name|dataMap
init|=
operator|(
name|DataMap
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Embeddable
argument_list|>
name|embs
init|=
name|dataMap
operator|.
name|getEmbeddables
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|embs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Embeddable
name|emb
init|=
name|embs
operator|.
name|next
argument_list|()
decl_stmt|;
name|embeddableNames
operator|.
name|add
argument_list|(
name|emb
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|registeredTypes
init|=
name|ModelerUtil
operator|.
name|getRegisteredTypeNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|registeredTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|typeNames
operator|.
name|add
argument_list|(
name|registeredTypes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|typeNames
operator|.
name|addAll
argument_list|(
name|embeddableNames
argument_list|)
expr_stmt|;
name|TableColumn
name|typeColumn
init|=
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|ObjAttributeTableModel
operator|.
name|OBJ_ATTRIBUTE_TYPE
argument_list|)
decl_stmt|;
name|JComboBox
name|javaTypesCombo
init|=
name|Application
operator|.
name|getWidgetFactory
argument_list|()
operator|.
name|createComboBox
argument_list|(
name|typeNames
operator|.
name|toArray
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AutoCompletion
operator|.
name|enable
argument_list|(
name|javaTypesCombo
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|typeColumn
operator|.
name|setCellEditor
argument_list|(
name|Application
operator|.
name|getWidgetFactory
argument_list|()
operator|.
name|createCellEditor
argument_list|(
name|javaTypesCombo
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Selects a specified attribute.      */
specifier|public
name|void
name|selectAttributes
parameter_list|(
name|ObjAttribute
index|[]
name|attrs
parameter_list|)
block|{
name|ObjAttributeTableModel
name|model
init|=
operator|(
name|ObjAttributeTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ObjAttributeWrapper
argument_list|>
name|listAttrs
init|=
name|model
operator|.
name|getObjectList
argument_list|()
decl_stmt|;
name|int
index|[]
name|newSel
init|=
operator|new
name|int
index|[
name|attrs
operator|.
name|length
index|]
decl_stmt|;
name|parentPanel
operator|.
name|updateActions
argument_list|(
name|attrs
argument_list|)
expr_stmt|;
comment|// search for attributes to select from attributes that model has
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|listAttrs
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|listAttrs
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getValue
argument_list|()
operator|==
name|attrs
index|[
name|i
index|]
condition|)
block|{
name|newSel
index|[
name|i
index|]
operator|=
name|j
expr_stmt|;
break|break;
block|}
block|}
block|}
name|table
operator|.
name|select
argument_list|(
name|newSel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|objAttributeChanged
parameter_list|(
name|AttributeEvent
name|e
parameter_list|)
block|{
name|ObjAttributeTableModel
name|model
init|=
operator|(
name|ObjAttributeTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|model
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|model
operator|.
name|resetModel
argument_list|()
expr_stmt|;
block|}
name|model
operator|.
name|fireTableDataChanged
argument_list|()
expr_stmt|;
name|int
name|ind
init|=
operator|-
literal|1
decl_stmt|;
name|List
argument_list|<
name|ObjAttributeWrapper
argument_list|>
name|list
init|=
name|model
operator|.
name|getObjectList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
operator|==
name|e
operator|.
name|getAttribute
argument_list|()
condition|)
block|{
name|ind
operator|=
name|i
expr_stmt|;
block|}
block|}
name|table
operator|.
name|select
argument_list|(
name|ind
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|objAttributeAdded
parameter_list|(
name|AttributeEvent
name|e
parameter_list|)
block|{
name|ObjAttributeTableModel
name|model
init|=
operator|(
name|ObjAttributeTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|model
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|model
operator|.
name|resetModel
argument_list|()
expr_stmt|;
block|}
name|model
operator|.
name|addRow
argument_list|(
operator|new
name|ObjAttributeWrapper
argument_list|(
operator|(
name|ObjAttribute
operator|)
name|e
operator|.
name|getAttribute
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|fireTableDataChanged
argument_list|()
expr_stmt|;
name|int
name|ind
init|=
operator|-
literal|1
decl_stmt|;
name|List
argument_list|<
name|ObjAttributeWrapper
argument_list|>
name|list
init|=
name|model
operator|.
name|getObjectList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
operator|==
name|e
operator|.
name|getAttribute
argument_list|()
condition|)
block|{
name|ind
operator|=
name|i
expr_stmt|;
block|}
block|}
name|table
operator|.
name|select
argument_list|(
name|ind
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|objAttributeRemoved
parameter_list|(
name|AttributeEvent
name|e
parameter_list|)
block|{
name|ObjAttributeTableModel
name|model
init|=
operator|(
name|ObjAttributeTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|int
name|ind
init|=
operator|-
literal|1
decl_stmt|;
name|List
argument_list|<
name|ObjAttributeWrapper
argument_list|>
name|list
init|=
name|model
operator|.
name|getObjectList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
operator|==
name|e
operator|.
name|getAttribute
argument_list|()
condition|)
block|{
name|ind
operator|=
name|i
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|model
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|model
operator|.
name|resetModel
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ind
operator|>=
literal|0
condition|)
block|{
name|model
operator|.
name|removeRow
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|ind
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|fireTableDataChanged
argument_list|()
expr_stmt|;
name|table
operator|.
name|select
argument_list|(
name|ind
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|currentObjEntityChanged
parameter_list|(
name|EntityDisplayEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
condition|)
block|{
return|return;
block|}
name|ObjEntity
name|entity
init|=
operator|(
name|ObjEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
decl_stmt|;
comment|// Important: process event even if this is the same entity,
comment|// since the inheritance structure might have changed
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|rebuildTable
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
comment|// if an entity was selected on a tree,
comment|// unselect currently selected row
if|if
condition|(
name|e
operator|.
name|isUnselectAttributes
argument_list|()
condition|)
block|{
name|table
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|rebuildTable
parameter_list|(
name|ObjEntity
name|entity
parameter_list|)
block|{
if|if
condition|(
name|table
operator|.
name|getEditingRow
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|table
operator|.
name|getEditingColumn
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|TableCellEditor
name|cellEditor
init|=
name|table
operator|.
name|getCellEditor
argument_list|(
name|table
operator|.
name|getEditingRow
argument_list|()
argument_list|,
name|table
operator|.
name|getEditingColumn
argument_list|()
argument_list|)
decl_stmt|;
name|cellEditor
operator|.
name|stopCellEditing
argument_list|()
expr_stmt|;
block|}
name|ObjAttributeTableModel
name|model
init|=
operator|new
name|ObjAttributeTableModel
argument_list|(
name|entity
argument_list|,
name|mediator
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|table
operator|.
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRowHeight
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRowMargin
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|setUpTableStructure
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUpTableStructure
parameter_list|(
name|ObjAttributeTableModel
name|model
parameter_list|)
block|{
name|int
name|inheritanceColumnWidth
init|=
literal|30
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|minSizes
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|maxSizes
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|minSizes
operator|.
name|put
argument_list|(
name|ObjAttributeTableModel
operator|.
name|INHERITED
argument_list|,
name|inheritanceColumnWidth
argument_list|)
expr_stmt|;
name|maxSizes
operator|.
name|put
argument_list|(
name|ObjAttributeTableModel
operator|.
name|INHERITED
argument_list|,
name|inheritanceColumnWidth
argument_list|)
expr_stmt|;
name|initComboBoxes
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
literal|3
argument_list|)
operator|.
name|setCellRenderer
argument_list|(
operator|new
name|JTableDbAttributeComboBoxRenderer
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
literal|3
argument_list|)
operator|.
name|setCellEditor
argument_list|(
operator|new
name|JTableDbAttributeComboBoxEditor
argument_list|()
argument_list|)
expr_stmt|;
name|tablePreferences
operator|.
name|bind
argument_list|(
name|table
argument_list|,
name|minSizes
argument_list|,
name|maxSizes
argument_list|,
literal|null
argument_list|,
name|ObjAttributeTableModel
operator|.
name|OBJ_ATTRIBUTE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Refreshes attributes view for the updated entity      */
specifier|public
name|void
name|objEntityChanged
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|table
operator|.
name|getModel
argument_list|()
operator|instanceof
name|ObjAttributeTableModel
operator|)
condition|)
block|{
comment|// probably means this panel hasn't been loaded yet...
return|return;
block|}
name|ObjAttributeTableModel
name|model
init|=
operator|(
name|ObjAttributeTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getDbEntity
argument_list|()
operator|!=
operator|(
operator|(
name|ObjEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
operator|)
operator|.
name|getDbEntity
argument_list|()
condition|)
block|{
name|model
operator|.
name|resetDbEntity
argument_list|()
expr_stmt|;
name|setUpTableStructure
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|objEntityAdded
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getSource
argument_list|()
operator|==
name|this
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|rebuildTable
argument_list|(
operator|(
name|ObjEntity
operator|)
name|e
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|objEntityRemoved
parameter_list|(
name|EntityEvent
name|e
parameter_list|)
block|{
block|}
comment|// custom renderer used for inherited attributes highlighting
specifier|final
class|class
name|CellRenderer
extends|extends
name|DefaultTableCellRenderer
block|{
annotation|@
name|Override
specifier|public
name|Component
name|getTableCellRendererComponent
parameter_list|(
name|JTable
name|table
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
name|boolean
name|hasFocus
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|super
operator|.
name|getTableCellRendererComponent
argument_list|(
name|table
argument_list|,
name|value
argument_list|,
name|isSelected
argument_list|,
name|hasFocus
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|ObjAttributeTableModel
name|model
init|=
operator|(
name|ObjAttributeTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|column
operator|=
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|column
argument_list|)
operator|.
name|getModelIndex
argument_list|()
expr_stmt|;
name|ObjAttribute
name|attribute
init|=
name|model
operator|.
name|getAttribute
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|!=
name|ObjAttributeTableModel
operator|.
name|INHERITED
condition|)
block|{
if|if
condition|(
operator|!
name|model
operator|.
name|isCellEditable
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
condition|)
block|{
name|setForeground
argument_list|(
name|Color
operator|.
name|GRAY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setForeground
argument_list|(
name|isSelected
operator|&&
operator|!
name|hasFocus
condition|?
name|table
operator|.
name|getSelectionForeground
argument_list|()
else|:
name|table
operator|.
name|getForeground
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attribute
operator|.
name|isInherited
argument_list|()
condition|)
block|{
name|Font
name|font
init|=
name|getFont
argument_list|()
decl_stmt|;
name|Font
name|newFont
init|=
name|font
operator|.
name|deriveFont
argument_list|(
name|Font
operator|.
name|ITALIC
argument_list|)
decl_stmt|;
name|setFont
argument_list|(
name|newFont
argument_list|)
expr_stmt|;
block|}
name|setIcon
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|attribute
operator|.
name|isInherited
argument_list|()
condition|)
block|{
name|ImageIcon
name|objEntityIcon
init|=
name|ModelerUtil
operator|.
name|buildIcon
argument_list|(
literal|"icon-override.gif"
argument_list|)
decl_stmt|;
name|setIcon
argument_list|(
name|objEntityIcon
argument_list|)
expr_stmt|;
block|}
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
block|}
specifier|private
name|void
name|resetTableModel
parameter_list|()
block|{
name|CayenneTableModel
name|model
init|=
name|table
operator|.
name|getCayenneModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|!=
literal|null
operator|&&
operator|!
name|model
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|model
operator|.
name|resetModel
argument_list|()
expr_stmt|;
name|model
operator|.
name|fireTableDataChanged
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeSaveChanges
parameter_list|(
name|ProjectOnSaveEvent
name|e
parameter_list|)
block|{
name|resetTableModel
argument_list|()
expr_stmt|;
block|}
specifier|private
class|class
name|ObjAttributeListSelectionListener
implements|implements
name|ListSelectionListener
block|{
specifier|public
name|void
name|valueChanged
parameter_list|(
name|ListSelectionEvent
name|e
parameter_list|)
block|{
name|ObjAttribute
index|[]
name|attrs
init|=
operator|new
name|ObjAttribute
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|e
operator|.
name|getValueIsAdjusting
argument_list|()
operator|&&
operator|!
operator|(
operator|(
name|ListSelectionModel
operator|)
name|e
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|isSelectionEmpty
argument_list|()
condition|)
block|{
name|parentPanel
operator|.
name|getRelationshipPanel
argument_list|()
operator|.
name|table
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
if|if
condition|(
name|parentPanel
operator|.
name|getRelationshipPanel
argument_list|()
operator|.
name|table
operator|.
name|getCellEditor
argument_list|()
operator|!=
literal|null
condition|)
name|parentPanel
operator|.
name|getRelationshipPanel
argument_list|()
operator|.
name|table
operator|.
name|getCellEditor
argument_list|()
operator|.
name|stopCellEditing
argument_list|()
expr_stmt|;
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|getAction
argument_list|(
name|RemoveAttributeRelationshipAction
operator|.
name|class
argument_list|)
operator|.
name|setCurrentSelectedPanel
argument_list|(
name|parentPanel
operator|.
name|getAttributePanel
argument_list|()
argument_list|)
expr_stmt|;
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|getAction
argument_list|(
name|CutAttributeRelationshipAction
operator|.
name|class
argument_list|)
operator|.
name|setCurrentSelectedPanel
argument_list|(
name|parentPanel
operator|.
name|getAttributePanel
argument_list|()
argument_list|)
expr_stmt|;
name|Application
operator|.
name|getInstance
argument_list|()
operator|.
name|getActionManager
argument_list|()
operator|.
name|getAction
argument_list|(
name|CopyAttributeRelationshipAction
operator|.
name|class
argument_list|)
operator|.
name|setCurrentSelectedPanel
argument_list|(
name|parentPanel
operator|.
name|getAttributePanel
argument_list|()
argument_list|)
expr_stmt|;
name|parentPanel
operator|.
name|getResolve
argument_list|()
operator|.
name|removeActionListener
argument_list|(
name|parentPanel
operator|.
name|getRelationshipPanel
argument_list|()
operator|.
name|getResolver
argument_list|()
argument_list|)
expr_stmt|;
name|parentPanel
operator|.
name|getResolve
argument_list|()
operator|.
name|removeActionListener
argument_list|(
name|getResolver
argument_list|()
argument_list|)
expr_stmt|;
name|parentPanel
operator|.
name|getResolve
argument_list|()
operator|.
name|addActionListener
argument_list|(
name|getResolver
argument_list|()
argument_list|)
expr_stmt|;
name|parentPanel
operator|.
name|getResolve
argument_list|()
operator|.
name|setToolTipText
argument_list|(
literal|"Edit Attribute"
argument_list|)
expr_stmt|;
name|parentPanel
operator|.
name|getResolve
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|.
name|getSelectedRow
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|ObjAttributeTableModel
name|model
init|=
operator|(
name|ObjAttributeTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|int
index|[]
name|sel
init|=
name|table
operator|.
name|getSelectedRows
argument_list|()
decl_stmt|;
name|attrs
operator|=
operator|new
name|ObjAttribute
index|[
name|sel
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sel
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|attrs
index|[
name|i
index|]
operator|=
name|model
operator|.
name|getAttribute
argument_list|(
name|sel
index|[
name|i
index|]
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sel
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|UIUtil
operator|.
name|scrollToSelectedRow
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
name|enabledResolve
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|enabledResolve
operator|=
literal|false
expr_stmt|;
block|}
name|resolveMenu
operator|.
name|setEnabled
argument_list|(
name|enabledResolve
argument_list|)
expr_stmt|;
block|}
name|mediator
operator|.
name|setCurrentObjAttributes
argument_list|(
name|attrs
argument_list|)
expr_stmt|;
name|parentPanel
operator|.
name|updateActions
argument_list|(
name|attrs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isEnabledResolve
parameter_list|()
block|{
return|return
name|enabledResolve
return|;
block|}
specifier|public
name|ActionListener
name|getResolver
parameter_list|()
block|{
return|return
name|resolver
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|JTableDbAttributeComboBoxRenderer
extends|extends
name|DefaultTableCellRenderer
block|{
specifier|public
name|JTableDbAttributeComboBoxRenderer
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|Component
name|getTableCellRendererComponent
parameter_list|(
name|JTable
name|table
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|isSelected
parameter_list|,
name|boolean
name|hasFocus
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|DbAttribute
condition|)
block|{
name|JLabel
name|jLabel
init|=
operator|new
name|JLabel
argument_list|(
name|ModelerUtil
operator|.
name|getObjectName
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|jLabel
operator|.
name|setFont
argument_list|(
operator|new
name|Font
argument_list|(
literal|"Verdana"
argument_list|,
name|Font
operator|.
name|PLAIN
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|jLabel
return|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|JLabel
name|jLabel
init|=
operator|new
name|JLabel
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|jLabel
operator|.
name|setFont
argument_list|(
operator|new
name|Font
argument_list|(
literal|"Verdana"
argument_list|,
name|Font
operator|.
name|PLAIN
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|jLabel
return|;
block|}
return|return
operator|new
name|JLabel
argument_list|(
literal|""
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
specifier|static
class|class
name|JTableDbAttributeComboBoxEditor
extends|extends
name|AbstractCellEditor
implements|implements
name|TableCellEditor
block|{
specifier|private
name|int
name|row
decl_stmt|;
specifier|private
name|int
name|column
decl_stmt|;
specifier|private
name|JComboBox
name|dbAttributePathCombo
decl_stmt|;
specifier|private
name|EntityTreeModel
name|treeModel
decl_stmt|;
specifier|private
name|int
name|previousEmbededLevel
init|=
literal|0
decl_stmt|;
specifier|private
name|ObjAttributeTableModel
name|model
decl_stmt|;
specifier|private
name|JTableDbAttributeComboBoxEditor
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getCellEditorValue
parameter_list|()
block|{
return|return
name|model
operator|.
name|getValueAt
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Component
name|getTableCellEditorComponent
parameter_list|(
specifier|final
name|JTable
name|table
parameter_list|,
name|Object
name|o
parameter_list|,
name|boolean
name|b
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|i1
parameter_list|)
block|{
name|this
operator|.
name|model
operator|=
operator|(
name|ObjAttributeTableModel
operator|)
name|table
operator|.
name|getModel
argument_list|()
expr_stmt|;
name|row
operator|=
name|i
expr_stmt|;
name|column
operator|=
name|i1
expr_stmt|;
name|treeModel
operator|=
name|createTreeModelForComboBoxBrowser
argument_list|(
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|treeModel
operator|==
literal|null
condition|)
return|return
operator|new
name|JLabel
argument_list|(
literal|"You need select table to this ObjectEntity"
argument_list|)
return|;
name|initializeCombo
argument_list|(
name|model
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|String
name|dbAttributePath
init|=
operator|(
operator|(
name|JTextComponent
operator|)
operator|(
name|dbAttributePathCombo
operator|)
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|previousEmbededLevel
operator|=
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|dbAttributePath
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|dbAttributePathCombo
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|.
name|addKeyListener
argument_list|(
operator|new
name|KeyAdapter
argument_list|()
block|{
specifier|private
name|void
name|enterPressed
parameter_list|()
block|{
name|String
name|dbAttributePath
init|=
operator|(
operator|(
name|JTextComponent
operator|)
operator|(
name|dbAttributePathCombo
operator|)
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|Object
name|currentNode
init|=
name|getCurrentNode
argument_list|(
name|dbAttributePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentNode
operator|instanceof
name|DbAttribute
condition|)
block|{
comment|// in this case choose is made.. we save data
if|if
condition|(
name|table
operator|.
name|getCellEditor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|getCellEditor
argument_list|()
operator|.
name|stopCellEditing
argument_list|()
expr_stmt|;
name|model
operator|.
name|getAttribute
argument_list|(
name|row
argument_list|)
operator|.
name|setDbAttributePath
argument_list|(
name|dbAttributePath
argument_list|)
expr_stmt|;
name|model
operator|.
name|setUpdatedValueAt
argument_list|(
name|dbAttributePath
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|currentNode
operator|instanceof
name|DbRelationship
condition|)
block|{
comment|// in this case we add dot  to pathString (if it is missing) and show variants for currentNode
if|if
condition|(
name|dbAttributePath
operator|.
name|charAt
argument_list|(
name|dbAttributePath
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|'.'
condition|)
block|{
name|dbAttributePath
operator|=
name|dbAttributePath
operator|+
literal|"."
expr_stmt|;
name|previousEmbededLevel
operator|=
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|dbAttributePath
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
operator|(
operator|(
name|JTextComponent
operator|)
operator|(
name|dbAttributePathCombo
operator|)
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|)
operator|.
name|setText
argument_list|(
name|dbAttributePath
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|currentNodeChildren
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|currentNodeChildren
operator|.
name|add
argument_list|(
name|dbAttributePath
operator|+
literal|""
argument_list|)
expr_stmt|;
name|currentNodeChildren
operator|.
name|addAll
argument_list|(
name|getChildren
argument_list|(
name|getCurrentNode
argument_list|(
name|dbAttributePath
argument_list|)
argument_list|,
name|dbAttributePath
argument_list|)
argument_list|)
expr_stmt|;
name|dbAttributePathCombo
operator|.
name|setModel
argument_list|(
operator|new
name|DefaultComboBoxModel
argument_list|(
name|currentNodeChildren
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dbAttributePathCombo
operator|.
name|showPopup
argument_list|()
expr_stmt|;
name|dbAttributePathCombo
operator|.
name|setPopupVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|keyReleased
parameter_list|(
name|KeyEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyEvent
operator|.
name|VK_ENTER
condition|)
block|{
name|enterPressed
argument_list|()
expr_stmt|;
return|return;
block|}
name|parseDbAttributeString
argument_list|(
name|event
operator|.
name|getKeyChar
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|dbAttributePathCombo
return|;
block|}
specifier|private
name|void
name|initializeCombo
parameter_list|(
name|ObjAttributeTableModel
name|model
parameter_list|,
name|int
name|row
parameter_list|)
block|{
name|String
name|dbAttributePath
init|=
name|model
operator|.
name|getAttribute
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getDbAttributePath
argument_list|()
decl_stmt|;
name|Object
name|currentNode
decl_stmt|;
if|if
condition|(
name|dbAttributePath
operator|==
literal|null
condition|)
block|{
comment|//case if it is new attribute or for some reason dbAttributePath is null
name|currentNode
operator|=
name|getCurrentNode
argument_list|(
name|dbAttributePath
argument_list|)
expr_stmt|;
name|dbAttributePath
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
comment|//case if  dbAttributePath isn't null and we must change it to find auto completion list
name|String
index|[]
name|pathStrings
init|=
name|dbAttributePath
operator|.
name|split
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|lastStringInPath
init|=
name|pathStrings
index|[
name|pathStrings
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|dbAttributePath
operator|=
name|dbAttributePath
operator|.
name|replaceAll
argument_list|(
name|lastStringInPath
operator|+
literal|"$"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|currentNode
operator|=
name|getCurrentNode
argument_list|(
name|dbAttributePath
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|nodeChildren
init|=
name|getChildren
argument_list|(
name|currentNode
argument_list|,
name|dbAttributePath
argument_list|)
decl_stmt|;
name|dbAttributePathCombo
operator|=
name|Application
operator|.
name|getWidgetFactory
argument_list|()
operator|.
name|createComboBox
argument_list|(
name|nodeChildren
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|AutoCompletion
operator|.
name|enable
argument_list|(
name|dbAttributePathCombo
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|JTextComponent
operator|)
operator|(
name|dbAttributePathCombo
operator|)
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|)
operator|.
name|setText
argument_list|(
name|model
operator|.
name|getAttribute
argument_list|(
name|row
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getDbAttributePath
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|private
name|void
name|parseDbAttributeString
parameter_list|(
name|char
name|lastEnteredCharacter
parameter_list|)
block|{
name|String
name|dbAttributePath
init|=
operator|(
operator|(
name|JTextComponent
operator|)
operator|(
name|dbAttributePathCombo
operator|)
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbAttributePath
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|currentNodeChildren
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|currentNodeChildren
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|currentNodeChildren
operator|.
name|addAll
argument_list|(
name|getChildren
argument_list|(
name|getCurrentNode
argument_list|(
name|dbAttributePath
argument_list|)
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|dbAttributePathCombo
operator|.
name|setModel
argument_list|(
operator|new
name|DefaultComboBoxModel
argument_list|(
name|currentNodeChildren
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dbAttributePathCombo
operator|.
name|showPopup
argument_list|()
expr_stmt|;
name|dbAttributePathCombo
operator|.
name|setPopupVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|lastEnteredCharacter
operator|==
literal|'.'
condition|)
block|{
name|processDotEntered
argument_list|()
expr_stmt|;
return|return;
block|}
name|int
name|currentEmbededLevel
init|=
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|dbAttributePath
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousEmbededLevel
operator|!=
name|currentEmbededLevel
condition|)
block|{
name|previousEmbededLevel
operator|=
name|currentEmbededLevel
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|currentNodeChildren
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|pathStrings
init|=
name|dbAttributePath
operator|.
name|split
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|lastStringInPath
init|=
name|pathStrings
index|[
name|pathStrings
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|String
name|saveDbAttributePath
init|=
name|dbAttributePath
decl_stmt|;
name|dbAttributePath
operator|=
name|dbAttributePath
operator|.
name|replaceAll
argument_list|(
name|lastStringInPath
operator|+
literal|"$"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|currentNodeChildren
operator|.
name|addAll
argument_list|(
name|getChildren
argument_list|(
name|getCurrentNode
argument_list|(
name|dbAttributePath
argument_list|)
argument_list|,
name|dbAttributePath
argument_list|)
argument_list|)
expr_stmt|;
name|dbAttributePathCombo
operator|.
name|setModel
argument_list|(
operator|new
name|DefaultComboBoxModel
argument_list|(
name|currentNodeChildren
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|JTextComponent
operator|)
operator|(
name|dbAttributePathCombo
operator|)
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|)
operator|.
name|setText
argument_list|(
name|saveDbAttributePath
argument_list|)
expr_stmt|;
name|dbAttributePathCombo
operator|.
name|showPopup
argument_list|()
expr_stmt|;
name|dbAttributePathCombo
operator|.
name|setPopupVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
specifier|private
name|void
name|processDotEntered
parameter_list|()
block|{
name|String
name|dbAttributePath
init|=
operator|(
operator|(
name|JTextComponent
operator|)
operator|(
name|dbAttributePathCombo
operator|)
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbAttributePath
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|currentNodeChildren
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|currentNodeChildren
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|currentNodeChildren
operator|.
name|addAll
argument_list|(
name|getChildren
argument_list|(
name|getCurrentNode
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|dbAttributePathCombo
operator|.
name|setModel
argument_list|(
operator|new
name|DefaultComboBoxModel
argument_list|(
name|currentNodeChildren
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dbAttributePathCombo
operator|.
name|showPopup
argument_list|()
expr_stmt|;
name|dbAttributePathCombo
operator|.
name|setPopupVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|char
name|secondFromEndCharacter
init|=
name|dbAttributePath
operator|.
name|charAt
argument_list|(
name|dbAttributePath
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|secondFromEndCharacter
operator|==
literal|'.'
condition|)
block|{
comment|// two dots entered one by one , we replace it by one dot
operator|(
operator|(
name|JTextComponent
operator|)
operator|(
name|dbAttributePathCombo
operator|)
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|)
operator|.
name|setText
argument_list|(
name|dbAttributePath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dbAttributePath
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|String
index|[]
name|pathStrings
init|=
name|dbAttributePath
operator|.
name|split
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|lastStringInPath
init|=
name|pathStrings
index|[
name|pathStrings
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
comment|//we will check if lastStringInPath is correct name of DbAttribute or DbRelationship
comment|//for appropriate previous node in path. if it is not we won't add entered dot to dbAttributePath
name|String
name|dbAttributePathForPreviousNode
decl_stmt|;
if|if
condition|(
name|pathStrings
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|//previous root is treeModel.getRoot()
name|dbAttributePathForPreviousNode
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|dbAttributePathForPreviousNode
operator|=
name|dbAttributePath
operator|.
name|replace
argument_list|(
literal|"."
operator|+
name|lastStringInPath
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|potentialVariantsToChoose
init|=
name|getChildren
argument_list|(
name|getCurrentNode
argument_list|(
name|dbAttributePathForPreviousNode
argument_list|)
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|potentialVariantsToChoose
operator|.
name|contains
argument_list|(
name|lastStringInPath
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|currentNodeChildren
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|currentNodeChildren
operator|.
name|add
argument_list|(
name|dbAttributePath
operator|+
literal|""
argument_list|)
expr_stmt|;
name|currentNodeChildren
operator|.
name|addAll
argument_list|(
name|getChildren
argument_list|(
name|getCurrentNode
argument_list|(
name|dbAttributePath
argument_list|)
argument_list|,
name|dbAttributePath
argument_list|)
argument_list|)
expr_stmt|;
name|dbAttributePathCombo
operator|.
name|setModel
argument_list|(
operator|new
name|DefaultComboBoxModel
argument_list|(
name|currentNodeChildren
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dbAttributePathCombo
operator|.
name|showPopup
argument_list|()
expr_stmt|;
name|dbAttributePathCombo
operator|.
name|setPopupVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|JTextComponent
operator|)
operator|(
name|dbAttributePathCombo
operator|)
operator|.
name|getEditor
argument_list|()
operator|.
name|getEditorComponent
argument_list|()
operator|)
operator|.
name|setText
argument_list|(
name|dbAttributePath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dbAttributePath
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|previousEmbededLevel
operator|=
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|dbAttributePath
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/**          * find current node by dbAttributePath          * @param dbAttributePath          * @return last node in dbAttributePath which matches DbRelationship or DbAttribute          */
specifier|private
specifier|final
name|Object
name|getCurrentNode
parameter_list|(
name|String
name|dbAttributePath
parameter_list|)
block|{
try|try
block|{
comment|//case for new attribute
if|if
condition|(
name|dbAttributePath
operator|==
literal|null
condition|)
block|{
return|return
name|treeModel
operator|.
name|getRoot
argument_list|()
return|;
block|}
name|String
index|[]
name|pathStrings
init|=
name|dbAttributePath
operator|.
name|split
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|root
init|=
name|treeModel
operator|.
name|getRoot
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pathStrings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|rootChildText
init|=
name|pathStrings
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|treeModel
operator|.
name|getChildCount
argument_list|(
name|root
argument_list|)
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|child
init|=
name|treeModel
operator|.
name|getChild
argument_list|(
name|root
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|String
name|objectName
init|=
name|ModelerUtil
operator|.
name|getObjectName
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|objectName
operator|.
name|equals
argument_list|(
name|rootChildText
argument_list|)
condition|)
block|{
name|root
operator|=
name|child
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|root
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|treeModel
operator|.
name|getRoot
argument_list|()
return|;
block|}
block|}
comment|/**          * @param node for which we will find children          * @param dbAttributePath string which will be added to each child to make right autocomplete          * @return list with children , which will be used to autocomplete          */
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|getChildren
parameter_list|(
name|Object
name|node
parameter_list|,
name|String
name|dbAttributePath
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|currentNodeChildren
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|treeModel
operator|.
name|getChildCount
argument_list|(
name|node
argument_list|)
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|child
init|=
name|treeModel
operator|.
name|getChild
argument_list|(
name|node
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|String
name|objectName
init|=
name|ModelerUtil
operator|.
name|getObjectName
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|currentNodeChildren
operator|.
name|add
argument_list|(
name|dbAttributePath
operator|+
name|objectName
argument_list|)
expr_stmt|;
block|}
return|return
name|currentNodeChildren
return|;
block|}
comment|/**          * @param attributeIndexInTable index of attribute for which now we will create cell editor          * @return treeModel for nessesary for us attribute          */
specifier|private
name|EntityTreeModel
name|createTreeModelForComboBoxBrowser
parameter_list|(
name|int
name|attributeIndexInTable
parameter_list|)
block|{
name|ObjAttribute
name|attribute
init|=
name|model
operator|.
name|getAttribute
argument_list|(
name|attributeIndexInTable
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Entity
name|firstEntity
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|attribute
operator|.
name|getDbAttribute
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|attribute
operator|.
name|getParent
argument_list|()
operator|instanceof
name|ObjEntity
condition|)
block|{
name|DbEntity
name|dbEnt
init|=
operator|(
operator|(
name|ObjEntity
operator|)
name|attribute
operator|.
name|getParent
argument_list|()
operator|)
operator|.
name|getDbEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbEnt
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|DbAttribute
argument_list|>
name|attributes
init|=
name|dbEnt
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|DbRelationship
argument_list|>
name|rel
init|=
name|dbEnt
operator|.
name|getRelationships
argument_list|()
decl_stmt|;
if|if
condition|(
name|attributes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|DbAttribute
argument_list|>
name|iterator
init|=
name|attributes
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|firstEntity
operator|=
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getEntity
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|rel
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|DbRelationship
argument_list|>
name|iterator
init|=
name|rel
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|firstEntity
operator|=
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getSourceEntity
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|firstEntity
operator|=
name|getFirstEntity
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|firstEntity
operator|!=
literal|null
condition|)
block|{
name|EntityTreeModel
name|treeModel
init|=
operator|new
name|EntityTreeModel
argument_list|(
name|firstEntity
argument_list|)
decl_stmt|;
name|treeModel
operator|.
name|setFilter
argument_list|(
operator|new
name|EntityTreeFilter
argument_list|()
block|{
specifier|public
name|boolean
name|attributeMatch
parameter_list|(
name|Object
name|node
parameter_list|,
name|Attribute
name|attr
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|Attribute
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|relationshipMatch
parameter_list|(
name|Object
name|node
parameter_list|,
name|Relationship
name|rel
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|Relationship
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|/**                          * We do not allow A->B->A chains, where relationships                          * are to-one                          */
name|DbRelationship
name|prev
init|=
operator|(
name|DbRelationship
operator|)
name|node
decl_stmt|;
return|return
operator|!
operator|(
operator|!
name|rel
operator|.
name|isToMany
argument_list|()
operator|&&
name|prev
operator|.
name|getReverseRelationship
argument_list|()
operator|==
name|rel
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|treeModel
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Entity
name|getFirstEntity
parameter_list|(
name|ObjAttribute
name|attribute
parameter_list|)
block|{
name|Iterator
argument_list|<
name|CayenneMapEntry
argument_list|>
name|it
init|=
name|attribute
operator|.
name|getDbPathIterator
argument_list|()
decl_stmt|;
name|Entity
name|firstEnt
init|=
name|attribute
operator|.
name|getDbAttribute
argument_list|()
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|boolean
name|setEnt
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|ob
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ob
operator|instanceof
name|DbRelationship
condition|)
block|{
if|if
condition|(
operator|!
name|setEnt
condition|)
block|{
name|firstEnt
operator|=
operator|(
operator|(
name|DbRelationship
operator|)
name|ob
operator|)
operator|.
name|getSourceEntity
argument_list|()
expr_stmt|;
name|setEnt
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|ob
operator|instanceof
name|DbAttribute
condition|)
block|{
if|if
condition|(
operator|!
name|setEnt
condition|)
block|{
name|firstEnt
operator|=
operator|(
operator|(
name|DbAttribute
operator|)
name|ob
operator|)
operator|.
name|getEntity
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|firstEnt
return|;
block|}
block|}
block|}
end_class

end_unit

