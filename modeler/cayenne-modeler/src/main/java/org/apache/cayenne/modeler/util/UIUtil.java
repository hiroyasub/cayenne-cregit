begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    https://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 1.1  */
end_comment

begin_class
specifier|public
class|class
name|UIUtil
block|{
comment|/**      * Scrolls table within JViewport to the selected row if there is one.      */
specifier|public
specifier|static
name|void
name|scrollToSelectedRow
parameter_list|(
name|JTable
name|table
parameter_list|)
block|{
name|int
name|row
init|=
name|table
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|>=
literal|0
condition|)
block|{
name|scroll
argument_list|(
name|table
argument_list|,
name|row
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * Scrolls view if it is located in a JViewport, so that the specified cell     * is displayed in the center.     */
specifier|public
specifier|static
name|void
name|scroll
parameter_list|(
name|JTable
name|table
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|int
name|vColIndex
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|table
operator|.
name|getParent
argument_list|()
operator|instanceof
name|JViewport
operator|)
condition|)
block|{
return|return;
block|}
name|JViewport
name|viewport
init|=
operator|(
name|JViewport
operator|)
name|table
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Rectangle
name|rect
init|=
name|table
operator|.
name|getCellRect
argument_list|(
name|rowIndex
argument_list|,
name|vColIndex
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Rectangle
name|viewRect
init|=
name|viewport
operator|.
name|getViewRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|viewRect
operator|.
name|intersects
argument_list|(
name|rect
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Translate the cell location so that it is relative
comment|// to the view, assuming the northwest corner of the
comment|// view is (0,0).
name|rect
operator|.
name|setLocation
argument_list|(
name|rect
operator|.
name|x
operator|-
name|viewRect
operator|.
name|x
argument_list|,
name|rect
operator|.
name|y
operator|-
name|viewRect
operator|.
name|y
argument_list|)
expr_stmt|;
comment|// Calculate location of rect if it were at the center of view
name|int
name|centerX
init|=
operator|(
name|viewRect
operator|.
name|width
operator|-
name|rect
operator|.
name|width
operator|)
operator|/
literal|2
decl_stmt|;
name|int
name|centerY
init|=
operator|(
name|viewRect
operator|.
name|height
operator|-
name|rect
operator|.
name|height
operator|)
operator|/
literal|2
decl_stmt|;
comment|// Fake the location of the cell so that scrollRectToVisible
comment|// will move the cell to the center
if|if
condition|(
name|rect
operator|.
name|x
operator|<
name|centerX
condition|)
block|{
name|centerX
operator|=
operator|-
name|centerX
expr_stmt|;
block|}
if|if
condition|(
name|rect
operator|.
name|y
operator|<
name|centerY
condition|)
block|{
name|centerY
operator|=
operator|-
name|centerY
expr_stmt|;
block|}
name|rect
operator|.
name|translate
argument_list|(
name|centerX
argument_list|,
name|centerY
argument_list|)
expr_stmt|;
comment|// Scroll the area into view.
name|viewport
operator|.
name|scrollRectToVisible
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
comment|/**      * "Injects" windows's content to another window      */
specifier|public
specifier|static
name|void
name|dock
parameter_list|(
name|Window
name|window
parameter_list|,
name|Window
name|dockTo
parameter_list|)
block|{
name|window
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
operator|(
operator|(
name|RootPaneContainer
operator|)
name|dockTo
operator|)
operator|.
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
operator|(
operator|(
name|RootPaneContainer
operator|)
name|window
operator|)
operator|.
name|getContentPane
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
name|dockTo
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * "Injects" windows's content to parent window      */
specifier|public
specifier|static
name|void
name|dock
parameter_list|(
name|Window
name|window
parameter_list|)
block|{
name|dock
argument_list|(
name|window
argument_list|,
name|window
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

