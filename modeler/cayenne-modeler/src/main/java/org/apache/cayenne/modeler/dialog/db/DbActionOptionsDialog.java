begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|FlowLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Frame
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|HeadlessException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultComboBoxModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JDialog
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|DefaultFormBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|FormLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneDialog
import|;
end_import

begin_comment
comment|/**  * @since 4.0  */
end_comment

begin_class
specifier|public
class|class
name|DbActionOptionsDialog
extends|extends
name|CayenneDialog
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|WILDCARD_PATTERN
init|=
literal|".*"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|CANCEL
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|SELECT
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|choice
decl_stmt|;
specifier|private
name|JLabel
name|schemaLabel
decl_stmt|;
specifier|private
name|JLabel
name|catalogLabel
decl_stmt|;
specifier|private
name|JComboBox
argument_list|<
name|String
argument_list|>
name|catalogSelector
decl_stmt|;
specifier|private
name|JComboBox
argument_list|<
name|String
argument_list|>
name|schemaSelector
decl_stmt|;
specifier|private
name|JButton
name|selectButton
decl_stmt|;
specifier|private
name|JButton
name|cancelButton
decl_stmt|;
specifier|public
name|DbActionOptionsDialog
parameter_list|(
name|Frame
name|owner
parameter_list|,
name|String
name|title
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|catalogs
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|schemas
parameter_list|,
name|String
name|currentCatalog
parameter_list|,
name|String
name|currentSchema
parameter_list|)
throws|throws
name|HeadlessException
block|{
name|super
argument_list|(
name|owner
argument_list|,
name|title
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|initController
argument_list|()
expr_stmt|;
name|initFromModel
argument_list|(
name|catalogs
argument_list|,
name|schemas
argument_list|,
name|currentCatalog
argument_list|,
name|currentSchema
argument_list|)
expr_stmt|;
name|pack
argument_list|()
expr_stmt|;
name|setDefaultCloseOperation
argument_list|(
name|JDialog
operator|.
name|DISPOSE_ON_CLOSE
argument_list|)
expr_stmt|;
name|setModal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|centerWindow
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|init
parameter_list|()
block|{
comment|// create widgets...
name|selectButton
operator|=
operator|new
name|JButton
argument_list|(
literal|"Continue"
argument_list|)
expr_stmt|;
name|cancelButton
operator|=
operator|new
name|JButton
argument_list|(
literal|"Cancel"
argument_list|)
expr_stmt|;
name|catalogSelector
operator|=
operator|new
name|JComboBox
argument_list|<>
argument_list|()
expr_stmt|;
name|schemaSelector
operator|=
operator|new
name|JComboBox
argument_list|<>
argument_list|()
expr_stmt|;
name|FormLayout
name|layout
init|=
operator|new
name|FormLayout
argument_list|(
literal|"right:pref, 3dlu, fill:max(170dlu;pref):grow"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|DefaultFormBuilder
name|builder
init|=
operator|new
name|DefaultFormBuilder
argument_list|(
name|layout
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setDefaultDialogBorder
argument_list|()
expr_stmt|;
name|initForm
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|JPanel
name|buttons
init|=
operator|new
name|JPanel
argument_list|(
operator|new
name|FlowLayout
argument_list|(
name|FlowLayout
operator|.
name|RIGHT
argument_list|)
argument_list|)
decl_stmt|;
name|buttons
operator|.
name|add
argument_list|(
name|selectButton
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|add
argument_list|(
name|cancelButton
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|builder
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|buttons
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|initController
parameter_list|()
block|{
name|selectButton
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|processSelect
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cancelButton
operator|.
name|addActionListener
argument_list|(
operator|new
name|ActionListener
argument_list|()
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|processCancel
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|initFromModel
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|catalogs
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|schemas
parameter_list|,
name|String
name|currentCatalog
parameter_list|,
name|String
name|currentSchema
parameter_list|)
block|{
name|this
operator|.
name|choice
operator|=
name|CANCEL
expr_stmt|;
name|boolean
name|showSchemaSelector
init|=
name|schemas
operator|!=
literal|null
operator|&&
operator|!
name|schemas
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|schemaSelector
operator|.
name|setVisible
argument_list|(
name|showSchemaSelector
argument_list|)
expr_stmt|;
name|schemaLabel
operator|.
name|setVisible
argument_list|(
name|showSchemaSelector
argument_list|)
expr_stmt|;
if|if
condition|(
name|showSchemaSelector
condition|)
block|{
name|schemaSelector
operator|.
name|setModel
argument_list|(
operator|new
name|DefaultComboBoxModel
argument_list|<>
argument_list|(
name|schemas
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentSchema
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|schema
range|:
name|schemas
control|)
block|{
if|if
condition|(
name|currentSchema
operator|.
name|equalsIgnoreCase
argument_list|(
name|schema
argument_list|)
condition|)
block|{
name|schemaSelector
operator|.
name|setSelectedItem
argument_list|(
name|schema
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|boolean
name|showCatalogSelector
init|=
name|catalogs
operator|!=
literal|null
operator|&&
operator|!
name|catalogs
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|catalogSelector
operator|.
name|setVisible
argument_list|(
name|showCatalogSelector
argument_list|)
expr_stmt|;
name|catalogLabel
operator|.
name|setVisible
argument_list|(
name|showCatalogSelector
argument_list|)
expr_stmt|;
if|if
condition|(
name|showCatalogSelector
condition|)
block|{
name|catalogSelector
operator|.
name|setModel
argument_list|(
operator|new
name|DefaultComboBoxModel
argument_list|<>
argument_list|(
name|catalogs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentCatalog
operator|!=
literal|null
operator|&&
operator|!
name|currentCatalog
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|catalog
range|:
name|catalogs
control|)
block|{
if|if
condition|(
name|currentCatalog
operator|.
name|equalsIgnoreCase
argument_list|(
name|catalog
argument_list|)
condition|)
block|{
name|catalogSelector
operator|.
name|setSelectedItem
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|initForm
parameter_list|(
name|DefaultFormBuilder
name|builder
parameter_list|)
block|{
name|catalogLabel
operator|=
name|builder
operator|.
name|append
argument_list|(
literal|"Select Catalog:"
argument_list|,
name|catalogSelector
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|schemaLabel
operator|=
name|builder
operator|.
name|append
argument_list|(
literal|"Select Schema:"
argument_list|,
name|schemaSelector
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getChoice
parameter_list|()
block|{
return|return
name|choice
return|;
block|}
specifier|private
name|void
name|processSelect
parameter_list|()
block|{
name|choice
operator|=
name|SELECT
expr_stmt|;
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processCancel
parameter_list|()
block|{
name|choice
operator|=
name|CANCEL
expr_stmt|;
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns selected catalog.      */
specifier|public
name|String
name|getSelectedCatalog
parameter_list|()
block|{
name|String
name|catalog
init|=
operator|(
name|String
operator|)
name|catalogSelector
operator|.
name|getSelectedItem
argument_list|()
decl_stmt|;
return|return
literal|""
operator|.
name|equals
argument_list|(
name|catalog
argument_list|)
condition|?
literal|null
else|:
name|catalog
return|;
block|}
comment|/**      * Returns selected schema.      */
specifier|public
name|String
name|getSelectedSchema
parameter_list|()
block|{
name|String
name|schema
init|=
operator|(
name|String
operator|)
name|schemaSelector
operator|.
name|getSelectedItem
argument_list|()
decl_stmt|;
return|return
literal|""
operator|.
name|equals
argument_list|(
name|schema
argument_list|)
condition|?
literal|null
else|:
name|schema
return|;
block|}
block|}
end_class

end_unit

