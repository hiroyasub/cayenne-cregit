begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|AWTEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|FlowLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Toolkit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ComponentAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ComponentEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BorderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Box
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BoxLayout
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBoxMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JFrame
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenuBar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JSplitPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextField
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JToolBar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|AboutAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|ActionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|ConfigurePreferencesAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CopyAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateDataMapAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateDbEntityAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateEmbeddableAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateNodeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateObjEntityAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateProcedureAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CreateQueryAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|CutAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|DbEntitySyncAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|DocumentationAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|ExitAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|FindAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|GenerateCodeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|GenerateDBAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|ReverseEngineeringAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|ImportDataMapAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|ImportEOModelAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|InferRelationshipsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|MigrateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|NavigateBackwardAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|NavigateForwardAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|NewProjectAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|ObjEntitySyncAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|OpenProjectAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|PasteAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|ProjectAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|RedoAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|RemoveAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|RevertAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|SaveAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|SaveAsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|ShowLogConsoleAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|UndoAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
operator|.
name|ValidateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|LogConsole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|dialog
operator|.
name|welcome
operator|.
name|WelcomeScreen
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|EditorView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataMapDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataMapDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataNodeDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DataNodeDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|DbEntityDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|EmbeddableDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|EmbeddableDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|EntityDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|MultipleObjectsDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|MultipleObjectsDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ObjEntityDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ProcedureDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|ProcedureDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|QueryDisplayEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|QueryDisplayListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|RecentFileListListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|pref
operator|.
name|ComponentGeometry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|ModelerUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|RecentFileMenu
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|components
operator|.
name|MainToolBar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
operator|.
name|components
operator|.
name|TopBorder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Main frame of CayenneModeler. Responsibilities include coordination of  * enabling/disabling of menu and toolbar.  */
end_comment

begin_class
specifier|public
class|class
name|CayenneModelerFrame
extends|extends
name|JFrame
implements|implements
name|DataNodeDisplayListener
implements|,
name|DataMapDisplayListener
implements|,
name|ObjEntityDisplayListener
implements|,
name|DbEntityDisplayListener
implements|,
name|QueryDisplayListener
implements|,
name|ProcedureDisplayListener
implements|,
name|MultipleObjectsDisplayListener
implements|,
name|EmbeddableDisplayListener
block|{
specifier|protected
name|EditorView
name|view
decl_stmt|;
specifier|protected
name|RecentFileMenu
name|recentFileMenu
decl_stmt|;
specifier|protected
name|ActionManager
name|actionManager
decl_stmt|;
specifier|protected
name|JLabel
name|status
decl_stmt|;
comment|/**      * Menu which shows/hides log console      */
specifier|protected
name|JCheckBoxMenuItem
name|logMenu
decl_stmt|;
comment|/**      * Split panel, where main project editor and external component, like log console,      * are located      */
specifier|protected
name|JSplitPane
name|splitPane
decl_stmt|;
comment|/**      * Component, plugged into this frame      */
specifier|protected
name|Component
name|dockComponent
decl_stmt|;
comment|/**      * Listeners for changes in recent file menu      */
specifier|protected
name|List
argument_list|<
name|RecentFileListListener
argument_list|>
name|recentFileListeners
decl_stmt|;
comment|/**      * Welcome screen, shown when no project is open      */
specifier|protected
name|WelcomeScreen
name|welcomeScreen
decl_stmt|;
specifier|public
name|CayenneModelerFrame
parameter_list|(
name|ActionManager
name|actionManager
parameter_list|)
block|{
name|this
operator|.
name|actionManager
operator|=
name|actionManager
expr_stmt|;
name|recentFileListeners
operator|=
operator|new
name|Vector
argument_list|<>
argument_list|()
expr_stmt|;
name|setIconImage
argument_list|(
name|ModelerUtil
operator|.
name|buildIcon
argument_list|(
literal|"CayenneModeler.png"
argument_list|)
operator|.
name|getImage
argument_list|()
argument_list|)
expr_stmt|;
name|initMenus
argument_list|()
expr_stmt|;
name|initToolbar
argument_list|()
expr_stmt|;
name|initStatusBar
argument_list|()
expr_stmt|;
name|initWelcome
argument_list|()
expr_stmt|;
name|fireRecentFileListChanged
argument_list|()
expr_stmt|;
comment|// start filling list in welcome screen and in menu
name|setView
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns an action object associated with the key.      */
specifier|private
parameter_list|<
name|T
extends|extends
name|Action
parameter_list|>
name|T
name|getAction
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|actionManager
operator|.
name|getAction
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|protected
name|void
name|initMenus
parameter_list|()
block|{
name|getContentPane
argument_list|()
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|JMenu
name|fileMenu
init|=
operator|new
name|JMenu
argument_list|(
literal|"File"
argument_list|)
decl_stmt|;
name|JMenu
name|editMenu
init|=
operator|new
name|JMenu
argument_list|(
literal|"Edit"
argument_list|)
decl_stmt|;
name|JMenu
name|projectMenu
init|=
operator|new
name|JMenu
argument_list|(
literal|"Project"
argument_list|)
decl_stmt|;
name|JMenu
name|toolMenu
init|=
operator|new
name|JMenu
argument_list|(
literal|"Tools"
argument_list|)
decl_stmt|;
name|JMenu
name|helpMenu
init|=
operator|new
name|JMenu
argument_list|(
literal|"Help"
argument_list|)
decl_stmt|;
name|fileMenu
operator|.
name|setMnemonic
argument_list|(
name|KeyEvent
operator|.
name|VK_F
argument_list|)
expr_stmt|;
name|editMenu
operator|.
name|setMnemonic
argument_list|(
name|KeyEvent
operator|.
name|VK_E
argument_list|)
expr_stmt|;
name|projectMenu
operator|.
name|setMnemonic
argument_list|(
name|KeyEvent
operator|.
name|VK_P
argument_list|)
expr_stmt|;
name|toolMenu
operator|.
name|setMnemonic
argument_list|(
name|KeyEvent
operator|.
name|VK_T
argument_list|)
expr_stmt|;
name|helpMenu
operator|.
name|setMnemonic
argument_list|(
name|KeyEvent
operator|.
name|VK_H
argument_list|)
expr_stmt|;
name|fileMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|NewProjectAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|fileMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|OpenProjectAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|fileMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|ProjectAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|fileMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|ImportDataMapAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|fileMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|fileMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|SaveAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|fileMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|SaveAsAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|fileMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|RevertAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|fileMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|editMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|UndoAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|editMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|RedoAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|editMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|CutAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|editMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|CopyAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|editMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|PasteAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|recentFileMenu
operator|=
operator|new
name|RecentFileMenu
argument_list|(
literal|"Recent Projects"
argument_list|)
expr_stmt|;
name|addRecentFileListListener
argument_list|(
name|recentFileMenu
argument_list|)
expr_stmt|;
name|fileMenu
operator|.
name|add
argument_list|(
name|recentFileMenu
argument_list|)
expr_stmt|;
name|fileMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|fileMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|ExitAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|projectMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|ValidateAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|projectMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|projectMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|CreateNodeAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|projectMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|CreateDataMapAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|projectMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|CreateObjEntityAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|projectMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|CreateEmbeddableAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|projectMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|CreateDbEntityAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|projectMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|CreateProcedureAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|projectMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|CreateQueryAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|projectMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|projectMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|ObjEntitySyncAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|projectMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|DbEntitySyncAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|projectMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|projectMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|RemoveAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|toolMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|ReverseEngineeringAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|toolMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|InferRelationshipsAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|toolMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|ImportEOModelAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|toolMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|toolMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|GenerateCodeAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|toolMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|GenerateDBAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|toolMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|MigrateAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
comment|// Menu for opening Log console
name|toolMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|logMenu
operator|=
name|getAction
argument_list|(
name|ShowLogConsoleAction
operator|.
name|class
argument_list|)
operator|.
name|buildCheckBoxMenu
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|LogConsole
operator|.
name|getInstance
argument_list|()
operator|.
name|getConsoleProperty
argument_list|(
name|LogConsole
operator|.
name|DOCKED_PROPERTY
argument_list|)
operator|&&
name|LogConsole
operator|.
name|getInstance
argument_list|()
operator|.
name|getConsoleProperty
argument_list|(
name|LogConsole
operator|.
name|SHOW_CONSOLE_PROPERTY
argument_list|)
condition|)
block|{
name|LogConsole
operator|.
name|getInstance
argument_list|()
operator|.
name|setConsoleProperty
argument_list|(
name|LogConsole
operator|.
name|SHOW_CONSOLE_PROPERTY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|updateLogConsoleMenu
argument_list|()
expr_stmt|;
name|toolMenu
operator|.
name|add
argument_list|(
name|logMenu
argument_list|)
expr_stmt|;
name|toolMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|toolMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|ConfigurePreferencesAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|helpMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|AboutAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|helpMenu
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|DocumentationAction
operator|.
name|class
argument_list|)
operator|.
name|buildMenu
argument_list|()
argument_list|)
expr_stmt|;
name|JMenuBar
name|menuBar
init|=
operator|new
name|JMenuBar
argument_list|()
decl_stmt|;
name|menuBar
operator|.
name|add
argument_list|(
name|fileMenu
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|add
argument_list|(
name|editMenu
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|add
argument_list|(
name|projectMenu
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|add
argument_list|(
name|toolMenu
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|add
argument_list|(
name|helpMenu
argument_list|)
expr_stmt|;
name|setJMenuBar
argument_list|(
name|menuBar
argument_list|)
expr_stmt|;
block|}
comment|/**      * Selects/deselects menu item, depending on status of log console      */
specifier|public
name|void
name|updateLogConsoleMenu
parameter_list|()
block|{
name|logMenu
operator|.
name|setSelected
argument_list|(
name|LogConsole
operator|.
name|getInstance
argument_list|()
operator|.
name|getConsoleProperty
argument_list|(
name|LogConsole
operator|.
name|SHOW_CONSOLE_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|initStatusBar
parameter_list|()
block|{
name|status
operator|=
operator|new
name|JLabel
argument_list|()
expr_stmt|;
name|status
operator|.
name|setFont
argument_list|(
name|status
operator|.
name|getFont
argument_list|()
operator|.
name|deriveFont
argument_list|(
name|Font
operator|.
name|PLAIN
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|splitPane
operator|=
operator|new
name|JSplitPane
argument_list|(
name|JSplitPane
operator|.
name|VERTICAL_SPLIT
argument_list|)
expr_stmt|;
name|splitPane
operator|.
name|setBorder
argument_list|(
name|TopBorder
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|splitPane
operator|.
name|getInsets
argument_list|()
operator|.
name|left
operator|=
literal|5
expr_stmt|;
name|splitPane
operator|.
name|getInsets
argument_list|()
operator|.
name|right
operator|=
literal|5
expr_stmt|;
name|splitPane
operator|.
name|setResizeWeight
argument_list|(
literal|0.7
argument_list|)
expr_stmt|;
comment|//  Moving this to try-catch block per CAY-940. Exception will be stack-traced
try|try
block|{
name|ComponentGeometry
name|geometry
init|=
operator|new
name|ComponentGeometry
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
literal|"splitPane/divider"
argument_list|)
decl_stmt|;
name|geometry
operator|.
name|bindIntProperty
argument_list|(
name|splitPane
argument_list|,
name|JSplitPane
operator|.
name|DIVIDER_LOCATION_PROPERTY
argument_list|,
literal|400
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
operator|.
name|error
argument_list|(
literal|"Cannot bind divider property"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|JPanel
name|statusBar
init|=
operator|new
name|JPanel
argument_list|(
operator|new
name|FlowLayout
argument_list|(
name|FlowLayout
operator|.
name|LEFT
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|statusBar
operator|.
name|setBorder
argument_list|(
name|TopBorder
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
comment|// add placeholder
name|statusBar
operator|.
name|add
argument_list|(
name|Box
operator|.
name|createVerticalStrut
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|statusBar
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|getContentPane
argument_list|()
operator|instanceof
name|JPanel
condition|)
block|{
operator|(
operator|(
name|JPanel
operator|)
name|getContentPane
argument_list|()
operator|)
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|splitPane
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|statusBar
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initializes welcome screen      */
specifier|protected
name|void
name|initWelcome
parameter_list|()
block|{
name|welcomeScreen
operator|=
operator|new
name|WelcomeScreen
argument_list|()
expr_stmt|;
name|addRecentFileListListener
argument_list|(
name|welcomeScreen
argument_list|)
expr_stmt|;
block|}
comment|/**      * Plugs a component in the frame, between main area and status bar      */
specifier|public
name|void
name|setDockComponent
parameter_list|(
name|Component
name|c
parameter_list|)
block|{
if|if
condition|(
name|dockComponent
operator|==
name|c
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|dockComponent
operator|!=
literal|null
condition|)
block|{
name|splitPane
operator|.
name|setBottomComponent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|dockComponent
operator|=
name|c
expr_stmt|;
if|if
condition|(
name|dockComponent
operator|!=
literal|null
condition|)
block|{
name|splitPane
operator|.
name|setBottomComponent
argument_list|(
name|dockComponent
argument_list|)
expr_stmt|;
block|}
name|splitPane
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return Dock component      */
specifier|public
name|Component
name|getDockComponent
parameter_list|()
block|{
return|return
name|dockComponent
return|;
block|}
comment|/** Initializes main toolbar. */
specifier|protected
name|void
name|initToolbar
parameter_list|()
block|{
specifier|final
name|JToolBar
name|toolBar
init|=
operator|new
name|MainToolBar
argument_list|()
decl_stmt|;
name|Dimension
name|smallBtnDim
init|=
operator|new
name|Dimension
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|JButton
name|backButton
init|=
name|getAction
argument_list|(
name|NavigateBackwardAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|backButton
operator|.
name|setMinimumSize
argument_list|(
name|smallBtnDim
argument_list|)
expr_stmt|;
name|backButton
operator|.
name|setPreferredSize
argument_list|(
name|smallBtnDim
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|backButton
argument_list|)
expr_stmt|;
name|JButton
name|forwardButton
init|=
name|getAction
argument_list|(
name|NavigateForwardAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|forwardButton
operator|.
name|setMinimumSize
argument_list|(
name|smallBtnDim
argument_list|)
expr_stmt|;
name|forwardButton
operator|.
name|setPreferredSize
argument_list|(
name|smallBtnDim
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|forwardButton
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|addSeparator
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|30
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|NewProjectAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|OpenProjectAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|SaveAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|JButton
name|removeButton
init|=
name|getAction
argument_list|(
name|RemoveAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|()
decl_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|removeButton
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|CutAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|CopyAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|PasteAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|UndoAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|RedoAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|CreateNodeAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|CreateDataMapAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|CreateDbEntityAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|CreateProcedureAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|CreateObjEntityAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|CreateEmbeddableAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|getAction
argument_list|(
name|CreateQueryAction
operator|.
name|class
argument_list|)
operator|.
name|buildButton
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// is used to place search feature components the most right on a toolbar
name|toolBar
operator|.
name|add
argument_list|(
operator|new
name|SearchPanel
argument_list|()
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|toolBar
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
comment|// Hide some buttons when frame is too small
specifier|final
name|int
name|defaultBtnWidth
init|=
name|removeButton
operator|.
name|getUI
argument_list|()
operator|.
name|getPreferredSize
argument_list|(
name|backButton
argument_list|)
operator|.
name|width
decl_stmt|;
name|addComponentListener
argument_list|(
operator|new
name|ComponentAdapter
argument_list|()
block|{
specifier|private
specifier|final
name|int
index|[]
name|empty
init|=
block|{}
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|all
init|=
block|{
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|}
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|remove
init|=
block|{
literal|6
block|,
literal|7
block|}
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|removeAndCopy
init|=
block|{
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|,
literal|11
block|}
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|undo
init|=
block|{
literal|12
block|,
literal|13
block|,
literal|14
block|}
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|undoAndCopy
init|=
block|{
literal|8
block|,
literal|9
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|componentResized
parameter_list|(
name|ComponentEvent
name|e
parameter_list|)
block|{
name|int
index|[]
name|hidden
decl_stmt|,
name|shown
decl_stmt|;
if|if
condition|(
name|getSize
argument_list|()
operator|.
name|width
operator|<
operator|(
literal|13
operator|*
name|defaultBtnWidth
operator|+
literal|300
operator|)
condition|)
block|{
name|hidden
operator|=
name|all
expr_stmt|;
name|shown
operator|=
name|empty
expr_stmt|;
block|}
if|else if
condition|(
name|getSize
argument_list|()
operator|.
name|width
operator|<
operator|(
literal|16
operator|*
name|defaultBtnWidth
operator|+
literal|300
operator|)
condition|)
block|{
name|hidden
operator|=
name|removeAndCopy
expr_stmt|;
name|shown
operator|=
name|undo
expr_stmt|;
block|}
if|else if
condition|(
name|getSize
argument_list|()
operator|.
name|width
operator|<
operator|(
literal|18
operator|*
name|defaultBtnWidth
operator|+
literal|300
operator|)
condition|)
block|{
name|hidden
operator|=
name|remove
expr_stmt|;
name|shown
operator|=
name|undoAndCopy
expr_stmt|;
block|}
else|else
block|{
name|hidden
operator|=
name|empty
expr_stmt|;
name|shown
operator|=
name|all
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
range|:
name|hidden
control|)
block|{
name|toolBar
operator|.
name|getComponentAtIndex
argument_list|(
name|i
argument_list|)
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
range|:
name|shown
control|)
block|{
name|toolBar
operator|.
name|getComponentAtIndex
argument_list|(
name|i
argument_list|)
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|currentDataNodeChanged
parameter_list|(
name|DataNodeDisplayEvent
name|e
parameter_list|)
block|{
name|actionManager
operator|.
name|dataNodeSelected
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|currentDataMapChanged
parameter_list|(
name|DataMapDisplayEvent
name|e
parameter_list|)
block|{
name|actionManager
operator|.
name|dataMapSelected
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|currentObjEntityChanged
parameter_list|(
name|EntityDisplayEvent
name|e
parameter_list|)
block|{
name|actionManager
operator|.
name|objEntitySelected
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|currentDbEntityChanged
parameter_list|(
name|EntityDisplayEvent
name|e
parameter_list|)
block|{
name|actionManager
operator|.
name|dbEntitySelected
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|currentQueryChanged
parameter_list|(
name|QueryDisplayEvent
name|e
parameter_list|)
block|{
name|actionManager
operator|.
name|querySelected
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|currentProcedureChanged
parameter_list|(
name|ProcedureDisplayEvent
name|e
parameter_list|)
block|{
name|actionManager
operator|.
name|procedureSelected
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|currentObjectsChanged
parameter_list|(
name|MultipleObjectsDisplayEvent
name|e
parameter_list|,
name|Application
name|application
parameter_list|)
block|{
name|actionManager
operator|.
name|multipleObjectsSelected
argument_list|(
name|e
operator|.
name|getNodes
argument_list|()
argument_list|,
name|application
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|currentEmbeddableChanged
parameter_list|(
name|EmbeddableDisplayEvent
name|e
parameter_list|)
block|{
name|actionManager
operator|.
name|embeddableSelected
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns the right side view panel.      *       * @return EditorView      */
specifier|public
name|EditorView
name|getView
parameter_list|()
block|{
return|return
name|view
return|;
block|}
specifier|public
name|JLabel
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
comment|/**      * Returns the recentFileMenu.      *       * @return RecentFileMenu      */
specifier|public
name|RecentFileMenu
name|getRecentFileMenu
parameter_list|()
block|{
return|return
name|recentFileMenu
return|;
block|}
comment|/**      * Adds editor view to the frame.      */
specifier|public
name|void
name|setView
parameter_list|(
name|EditorView
name|view
parameter_list|)
block|{
name|int
name|oldLocation
init|=
name|splitPane
operator|.
name|getDividerLocation
argument_list|()
decl_stmt|;
name|this
operator|.
name|view
operator|=
name|view
expr_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|splitPane
operator|.
name|setTopComponent
argument_list|(
name|view
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|splitPane
operator|.
name|setTopComponent
argument_list|(
name|welcomeScreen
argument_list|)
expr_stmt|;
block|}
name|validate
argument_list|()
expr_stmt|;
name|splitPane
operator|.
name|setDividerLocation
argument_list|(
name|oldLocation
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds listener for recent menu changes      */
specifier|public
name|void
name|addRecentFileListListener
parameter_list|(
name|RecentFileListListener
name|listener
parameter_list|)
block|{
name|recentFileListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Notifies all listeners that recent file list has changed      */
specifier|public
name|void
name|fireRecentFileListChanged
parameter_list|()
block|{
for|for
control|(
name|RecentFileListListener
name|recentFileListener
range|:
name|recentFileListeners
control|)
block|{
name|recentFileListener
operator|.
name|recentFileListChanged
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|SearchPanel
extends|extends
name|JPanel
block|{
specifier|private
name|JLabel
name|searchLabel
init|=
operator|new
name|JLabel
argument_list|(
literal|"Search: "
argument_list|)
decl_stmt|;
specifier|private
name|JPanel
name|box
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
specifier|private
name|JTextField
name|findField
decl_stmt|;
name|SearchPanel
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|initView
argument_list|()
expr_stmt|;
block|}
name|void
name|initView
parameter_list|()
block|{
name|findField
operator|=
operator|new
name|JTextField
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|findField
operator|.
name|putClientProperty
argument_list|(
literal|"JTextField.variant"
argument_list|,
literal|"search"
argument_list|)
expr_stmt|;
name|findField
operator|.
name|setMaximumSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|100
argument_list|,
literal|22
argument_list|)
argument_list|)
expr_stmt|;
name|findField
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|100
argument_list|,
literal|22
argument_list|)
argument_list|)
expr_stmt|;
name|findField
operator|.
name|addKeyListener
argument_list|(
operator|new
name|KeyListener
argument_list|()
block|{
specifier|public
name|void
name|keyPressed
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getKeyCode
argument_list|()
operator|!=
name|KeyEvent
operator|.
name|VK_ENTER
condition|)
block|{
name|findField
operator|.
name|setBackground
argument_list|(
name|Color
operator|.
name|white
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|keyReleased
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
block|}
specifier|public
name|void
name|keyTyped
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
name|findField
operator|.
name|setAction
argument_list|(
name|getAction
argument_list|(
name|FindAction
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|addAWTEventListener
argument_list|(
name|event
lambda|->
block|{
if|if
condition|(
name|event
operator|instanceof
name|KeyEvent
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|KeyEvent
operator|)
name|event
operator|)
operator|.
name|getModifiers
argument_list|()
operator|==
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getMenuShortcutKeyMask
argument_list|()
operator|&&
operator|(
operator|(
name|KeyEvent
operator|)
name|event
operator|)
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyEvent
operator|.
name|VK_F
condition|)
block|{
name|findField
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|AWTEvent
operator|.
name|KEY_EVENT_MASK
argument_list|)
expr_stmt|;
name|searchLabel
operator|.
name|setLabelFor
argument_list|(
name|findField
argument_list|)
expr_stmt|;
comment|// is used to place label and text field one after another
name|box
operator|.
name|setLayout
argument_list|(
operator|new
name|BoxLayout
argument_list|(
name|box
argument_list|,
name|BoxLayout
operator|.
name|X_AXIS
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|searchLabel
argument_list|)
expr_stmt|;
name|box
operator|.
name|add
argument_list|(
name|findField
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|box
argument_list|,
name|BorderLayout
operator|.
name|EAST
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|hideSearchLabel
parameter_list|()
block|{
name|searchLabel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|findField
operator|.
name|setMaximumSize
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|findField
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|100
argument_list|,
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|findField
operator|.
name|setToolTipText
argument_list|(
literal|"Search"
argument_list|)
expr_stmt|;
name|box
operator|.
name|setOpaque
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|box
operator|.
name|setBackground
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

