begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Embeddable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Relationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_comment
comment|/**  * A collection of useful Comparators used by the modeler.  *   * @since 1.1  */
end_comment

begin_class
specifier|public
class|class
name|Comparators
block|{
specifier|private
specifier|static
specifier|final
name|Comparator
name|dataDomainChildrenComparator
init|=
operator|new
name|DataDomainChildrenComparator
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Comparator
name|dataMapChildrenComparator
init|=
operator|new
name|DataMapChildrenComparator
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Comparator
name|entityChildrenComparator
init|=
operator|new
name|EntityChildrenComparator
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Comparator
name|namedObjectComparator
init|=
operator|new
name|NamedObjectComparator
argument_list|()
decl_stmt|;
comment|/**      * Returns a comparator to order DataMap objects of mixed types. Objects of the same      * type are ordered based on "name" property. Objects of different types are ordered      * based on the following precedence: DataMap, DataNode.      */
specifier|public
specifier|static
name|Comparator
name|getDataDomainChildrenComparator
parameter_list|()
block|{
return|return
name|dataDomainChildrenComparator
return|;
block|}
comment|/**      * Returns a comparator to order DataMap objects of mixed types. Objects of the same      * type are ordered based on "name" property. Objects of different types are ordered      * based on the following precedence: DataMap, ObjEntity, DbEntity, Procedure and      * Query.      */
specifier|public
specifier|static
name|Comparator
name|getDataMapChildrenComparator
parameter_list|()
block|{
return|return
name|dataMapChildrenComparator
return|;
block|}
comment|/**      * Returns a comparator to order Entity properties such as Attributes and      * Relationships. Objects of the same type are ordered based on "name" property.      * Objects of different types are ordered based on the following precedence:      * Attribute, Relationship.      */
specifier|public
specifier|static
name|Comparator
name|getEntityChildrenComparator
parameter_list|()
block|{
return|return
name|entityChildrenComparator
return|;
block|}
comment|/**      * Returns a comparator to order java beans according to their "name" property.      */
specifier|public
specifier|static
name|Comparator
name|getNamedObjectComparator
parameter_list|()
block|{
return|return
name|namedObjectComparator
return|;
block|}
specifier|static
class|class
name|NamedObjectComparator
implements|implements
name|Comparator
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|String
name|name1
init|=
name|ModelerUtil
operator|.
name|getObjectName
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|String
name|name2
init|=
name|ModelerUtil
operator|.
name|getObjectName
argument_list|(
name|o2
argument_list|)
decl_stmt|;
if|if
condition|(
name|name1
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|name2
operator|!=
literal|null
operator|)
condition|?
operator|-
literal|1
else|:
literal|0
return|;
block|}
if|else if
condition|(
name|name2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
name|name1
operator|.
name|compareTo
argument_list|(
name|name2
argument_list|)
return|;
block|}
block|}
block|}
specifier|final
specifier|static
class|class
name|DataDomainChildrenComparator
extends|extends
name|NamedObjectComparator
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|int
name|delta
init|=
name|getClassWeight
argument_list|(
name|o1
argument_list|)
operator|-
name|getClassWeight
argument_list|(
name|o2
argument_list|)
decl_stmt|;
if|if
condition|(
name|delta
operator|!=
literal|0
condition|)
block|{
return|return
name|delta
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|int
name|getClassWeight
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|DataMap
condition|)
block|{
return|return
literal|1
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|DataNodeDescriptor
condition|)
block|{
return|return
literal|2
return|;
block|}
else|else
block|{
comment|// this should trap nulls among other things
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
block|}
block|}
specifier|final
specifier|static
class|class
name|DataMapChildrenComparator
extends|extends
name|NamedObjectComparator
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|int
name|delta
init|=
name|getClassWeight
argument_list|(
name|o1
argument_list|)
operator|-
name|getClassWeight
argument_list|(
name|o2
argument_list|)
decl_stmt|;
if|if
condition|(
name|delta
operator|!=
literal|0
condition|)
block|{
return|return
name|delta
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|int
name|getClassWeight
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|DataMap
condition|)
block|{
return|return
literal|1
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|ObjEntity
condition|)
block|{
return|return
literal|2
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Embeddable
condition|)
block|{
return|return
literal|3
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|DbEntity
condition|)
block|{
return|return
literal|4
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Procedure
condition|)
block|{
return|return
literal|5
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Query
condition|)
block|{
return|return
literal|6
return|;
block|}
else|else
block|{
comment|// this should trap nulls among other things
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
block|}
block|}
specifier|final
specifier|static
class|class
name|EntityChildrenComparator
extends|extends
name|NamedObjectComparator
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|int
name|delta
init|=
name|getClassWeight
argument_list|(
name|o1
argument_list|)
operator|-
name|getClassWeight
argument_list|(
name|o2
argument_list|)
decl_stmt|;
if|if
condition|(
name|delta
operator|!=
literal|0
condition|)
block|{
return|return
name|delta
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|int
name|getClassWeight
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Entity
condition|)
block|{
return|return
literal|1
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Attribute
condition|)
block|{
return|return
literal|2
return|;
block|}
if|else if
condition|(
name|o
operator|instanceof
name|Relationship
condition|)
block|{
return|return
literal|3
return|;
block|}
else|else
block|{
comment|// this should trap nulls among other things
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

