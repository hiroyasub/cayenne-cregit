begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|swing
package|;
end_package

begin_import
import|import
name|ognl
operator|.
name|Ognl
import|;
end_import

begin_import
import|import
name|ognl
operator|.
name|OgnlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|CayenneRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|validation
operator|.
name|ValidationException
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_comment
comment|// TODO: extend BindingExpression, unless we decide to make it a composition...
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BindingBase
implements|implements
name|ObjectBinding
block|{
specifier|private
name|Object
name|compiled
decl_stmt|;
specifier|protected
name|Object
name|context
decl_stmt|;
specifier|protected
name|String
name|expression
decl_stmt|;
specifier|protected
name|BindingDelegate
name|delegate
decl_stmt|;
specifier|protected
name|boolean
name|modelUpdateDisabled
decl_stmt|;
specifier|protected
name|boolean
name|usingNullForEmptyStrings
decl_stmt|;
specifier|protected
name|boolean
name|checkingForValueChange
decl_stmt|;
specifier|static
name|Throwable
name|unwind
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
if|if
condition|(
name|th
operator|instanceof
name|OgnlException
condition|)
block|{
name|Throwable
name|reason
init|=
operator|(
operator|(
name|OgnlException
operator|)
name|th
operator|)
operator|.
name|getReason
argument_list|()
decl_stmt|;
return|return
operator|(
name|reason
operator|!=
literal|null
operator|)
condition|?
name|unwind
argument_list|(
name|reason
argument_list|)
else|:
name|th
return|;
block|}
else|else
block|{
return|return
name|Util
operator|.
name|unwindException
argument_list|(
name|th
argument_list|)
return|;
block|}
block|}
specifier|public
name|BindingBase
parameter_list|(
name|String
name|propertyExpression
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|compiled
operator|=
name|Ognl
operator|.
name|parseExpression
argument_list|(
name|propertyExpression
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OgnlException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CayenneRuntimeException
argument_list|(
literal|"Invalid expression - "
operator|+
name|propertyExpression
argument_list|,
name|BindingBase
operator|.
name|unwind
argument_list|(
name|ex
argument_list|)
argument_list|)
throw|;
block|}
name|this
operator|.
name|expression
operator|=
name|propertyExpression
expr_stmt|;
block|}
specifier|public
name|Object
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
specifier|public
name|void
name|setContext
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|object
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCheckingForValueChange
parameter_list|()
block|{
return|return
name|checkingForValueChange
return|;
block|}
specifier|public
name|void
name|setCheckingForValueChange
parameter_list|(
name|boolean
name|checkingForValueChange
parameter_list|)
block|{
name|this
operator|.
name|checkingForValueChange
operator|=
name|checkingForValueChange
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUsingNullForEmptyStrings
parameter_list|()
block|{
return|return
name|usingNullForEmptyStrings
return|;
block|}
specifier|public
name|void
name|setUsingNullForEmptyStrings
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|this
operator|.
name|usingNullForEmptyStrings
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|String
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
specifier|public
name|BindingDelegate
name|getDelegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
specifier|public
name|void
name|setDelegate
parameter_list|(
name|BindingDelegate
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
comment|/**      * Pushes a new value to the bound context. If binding delegate is set, notifies it      * delegate about the update.      */
specifier|public
name|void
name|setValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BindingException
argument_list|(
literal|"No context"
argument_list|)
throw|;
block|}
try|try
block|{
comment|// prevent the same thread from calling setValue recursively - something that
comment|// may happen due to event loops.
if|if
condition|(
name|modelUpdateDisabled
condition|)
block|{
return|return;
block|}
name|Object
name|oldValue
init|=
literal|null
decl_stmt|;
name|modelUpdateDisabled
operator|=
literal|true
expr_stmt|;
try|try
block|{
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
comment|// find old value
name|oldValue
operator|=
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isUsingNullForEmptyStrings
argument_list|()
operator|&&
literal|""
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|isCheckingForValueChange
argument_list|()
condition|)
block|{
comment|// avoid calling getValue() twice...
name|Object
name|existingValue
init|=
operator|(
name|delegate
operator|!=
literal|null
operator|)
condition|?
name|oldValue
else|:
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|nullSafeEquals
argument_list|(
name|value
argument_list|,
name|existingValue
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|Ognl
operator|.
name|setValue
argument_list|(
name|compiled
argument_list|,
name|context
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|modelUpdateDisabled
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
name|delegate
operator|.
name|modelUpdated
argument_list|(
name|this
argument_list|,
name|oldValue
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OgnlException
name|ex
parameter_list|)
block|{
name|processException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Pulls bound value from the context.      */
specifier|public
name|Object
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BindingException
argument_list|(
literal|"No context"
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|Ognl
operator|.
name|getValue
argument_list|(
name|compiled
argument_list|,
name|context
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OgnlException
name|ex
parameter_list|)
block|{
name|processException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|void
name|processException
parameter_list|(
name|Throwable
name|th
parameter_list|)
throws|throws
name|ValidationException
throws|,
name|BindingException
block|{
name|Throwable
name|root
init|=
name|BindingBase
operator|.
name|unwind
argument_list|(
name|th
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|instanceof
name|ValidationException
condition|)
block|{
throw|throw
operator|(
name|ValidationException
operator|)
name|root
throw|;
block|}
if|else if
condition|(
name|root
operator|instanceof
name|NumberFormatException
condition|)
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
literal|"Invalid numeric string"
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|BindingException
argument_list|(
literal|"Evaluation failed in context: "
operator|+
name|context
argument_list|,
name|root
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

