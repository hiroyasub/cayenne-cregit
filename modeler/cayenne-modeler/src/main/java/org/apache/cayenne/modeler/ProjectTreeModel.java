begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultMutableTreeNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultTreeModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|MutableTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|configuration
operator|.
name|DataNodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|DbEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Embeddable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|ObjEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|QueryDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|project
operator|.
name|Project
import|;
end_import

begin_comment
comment|/**  * ProjectTreeModel is a model of Cayenne project tree.  */
end_comment

begin_class
specifier|public
class|class
name|ProjectTreeModel
extends|extends
name|DefaultTreeModel
block|{
specifier|private
name|Filter
name|filter
init|=
operator|new
name|Filter
argument_list|()
decl_stmt|;
comment|/** 	 * Constructor for ProjectTreeModel. 	 */
specifier|public
name|ProjectTreeModel
parameter_list|(
name|Project
name|project
parameter_list|)
block|{
name|super
argument_list|(
name|ProjectTreeFactory
operator|.
name|wrapProjectNode
argument_list|(
name|project
operator|.
name|getRootNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Re-inserts a tree node to preserve the correct ordering of items. Assumes 	 * that the tree is already ordered, except for one node. 	 */
specifier|public
name|void
name|positionNode
parameter_list|(
name|MutableTreeNode
name|parent
parameter_list|,
name|DefaultMutableTreeNode
name|treeNode
parameter_list|,
name|Comparator
name|comparator
parameter_list|)
block|{
if|if
condition|(
name|treeNode
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|parent
operator|==
literal|null
operator|&&
name|treeNode
operator|!=
name|getRoot
argument_list|()
condition|)
block|{
name|parent
operator|=
operator|(
name|MutableTreeNode
operator|)
name|treeNode
operator|.
name|getParent
argument_list|()
expr_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|parent
operator|=
name|getRootNode
argument_list|()
expr_stmt|;
block|}
block|}
name|Object
name|object
init|=
name|treeNode
operator|.
name|getUserObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|int
name|len
init|=
name|parent
operator|.
name|getChildCount
argument_list|()
decl_stmt|;
name|int
name|ins
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|rm
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|DefaultMutableTreeNode
name|node
init|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|parent
operator|.
name|getChildAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// remember to remove node
if|if
condition|(
name|node
operator|==
name|treeNode
condition|)
block|{
name|rm
operator|=
name|i
expr_stmt|;
continue|continue;
block|}
comment|// no more insert checks
if|if
condition|(
name|ins
operator|>=
literal|0
condition|)
block|{
continue|continue;
block|}
comment|// ObjEntities go before DbEntities
if|if
condition|(
name|comparator
operator|.
name|compare
argument_list|(
name|object
argument_list|,
name|node
operator|.
name|getUserObject
argument_list|()
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|ins
operator|=
name|i
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ins
operator|<
literal|0
condition|)
block|{
name|ins
operator|=
name|len
expr_stmt|;
block|}
if|if
condition|(
name|rm
operator|==
name|ins
condition|)
block|{
return|return;
block|}
comment|// remove
if|if
condition|(
name|rm
operator|>=
literal|0
condition|)
block|{
name|removeNodeFromParent
argument_list|(
name|treeNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|rm
operator|<
name|ins
condition|)
block|{
name|ins
operator|--
expr_stmt|;
block|}
block|}
try|try
block|{
comment|// insert
name|insertNodeInto
argument_list|(
name|treeNode
argument_list|,
name|parent
argument_list|,
name|ins
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ignored
parameter_list|)
block|{
block|}
block|}
block|}
comment|/** 	 * Returns root node cast into DefaultMutableTreeNode. 	 */
specifier|public
name|DefaultMutableTreeNode
name|getRootNode
parameter_list|()
block|{
return|return
operator|(
name|DefaultMutableTreeNode
operator|)
name|super
operator|.
name|getRoot
argument_list|()
return|;
block|}
specifier|public
name|DefaultMutableTreeNode
name|getNodeForObjectPath
parameter_list|(
name|Object
index|[]
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DefaultMutableTreeNode
name|currentNode
init|=
name|getRootNode
argument_list|()
decl_stmt|;
comment|// adjust for root node being in the path
name|int
name|start
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|currentNode
operator|.
name|getUserObject
argument_list|()
operator|==
name|path
index|[
literal|0
index|]
condition|)
block|{
name|start
operator|=
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|path
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DefaultMutableTreeNode
name|foundNode
init|=
literal|null
decl_stmt|;
name|Enumeration
name|children
init|=
name|currentNode
operator|.
name|children
argument_list|()
decl_stmt|;
while|while
condition|(
name|children
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|DefaultMutableTreeNode
name|child
init|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|children
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getUserObject
argument_list|()
operator|==
name|path
index|[
name|i
index|]
condition|)
block|{
name|foundNode
operator|=
name|child
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|foundNode
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|currentNode
operator|=
name|foundNode
expr_stmt|;
block|}
block|}
return|return
name|currentNode
return|;
block|}
specifier|public
name|void
name|setFiltered
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|filterMap
parameter_list|)
block|{
name|filter
operator|.
name|setFilterMap
argument_list|(
name|filterMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getChildCount
parameter_list|(
name|Object
name|parent
parameter_list|)
block|{
name|int
name|filterCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|realCount
init|=
name|super
operator|.
name|getChildCount
argument_list|(
name|parent
argument_list|)
init|;
name|i
operator|<
name|realCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|pass
argument_list|(
operator|(
name|DefaultMutableTreeNode
operator|)
name|super
operator|.
name|getChild
argument_list|(
name|parent
argument_list|,
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|filterCount
operator|++
expr_stmt|;
block|}
block|}
return|return
name|filterCount
return|;
block|}
specifier|public
name|Object
name|getChild
parameter_list|(
name|Object
name|parent
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|int
name|cnt
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|super
operator|.
name|getChildCount
argument_list|(
name|parent
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|DefaultMutableTreeNode
name|child
init|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|super
operator|.
name|getChild
argument_list|(
name|parent
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|pass
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|cnt
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|cnt
operator|==
name|index
condition|)
block|{
return|return
name|child
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
class|class
name|Filter
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|filterMap
decl_stmt|;
name|boolean
name|pass
init|=
literal|true
decl_stmt|;
specifier|public
name|void
name|setFilterMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|filterMap
parameter_list|)
block|{
name|this
operator|.
name|filterMap
operator|=
name|filterMap
expr_stmt|;
name|pass
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|pass
parameter_list|(
name|DefaultMutableTreeNode
name|obj
parameter_list|)
block|{
name|Object
name|root
init|=
name|obj
operator|.
name|getUserObject
argument_list|()
decl_stmt|;
name|Object
name|firstLeaf
init|=
name|obj
operator|.
name|getFirstLeaf
argument_list|()
operator|.
name|getUserObject
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|pass
operator|)
operator|||
operator|(
name|root
operator|instanceof
name|DataMap
operator|)
operator|||
operator|(
name|root
operator|instanceof
name|DataNodeDescriptor
operator|)
operator|||
operator|(
name|firstLeaf
operator|instanceof
name|DbEntity
operator|&&
name|filterMap
operator|.
name|get
argument_list|(
literal|"dbEntity"
argument_list|)
operator|)
operator|||
operator|(
name|firstLeaf
operator|instanceof
name|ObjEntity
operator|&&
name|filterMap
operator|.
name|get
argument_list|(
literal|"objEntity"
argument_list|)
operator|)
operator|||
operator|(
name|firstLeaf
operator|instanceof
name|Embeddable
operator|&&
name|filterMap
operator|.
name|get
argument_list|(
literal|"embeddable"
argument_list|)
operator|)
operator|||
operator|(
name|firstLeaf
operator|instanceof
name|QueryDescriptor
operator|&&
name|filterMap
operator|.
name|get
argument_list|(
literal|"query"
argument_list|)
operator|)
operator|||
operator|(
name|firstLeaf
operator|instanceof
name|Procedure
operator|&&
name|filterMap
operator|.
name|get
argument_list|(
literal|"procedure"
argument_list|)
operator|)
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

