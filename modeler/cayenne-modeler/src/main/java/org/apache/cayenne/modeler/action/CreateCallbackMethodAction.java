begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*****************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  ****************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|action
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|CallbackMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|LifecycleEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|event
operator|.
name|MapEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|naming
operator|.
name|DefaultUniqueNameGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|naming
operator|.
name|NameCheckers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|editor
operator|.
name|CallbackType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|event
operator|.
name|CallbackMethodEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|undo
operator|.
name|CreateCallbackMethodUndoableEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|modeler
operator|.
name|util
operator|.
name|CayenneAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cayenne
operator|.
name|map
operator|.
name|naming
operator|.
name|NameConverter
import|;
end_import

begin_comment
comment|/**  * Action class for creating callback methods on ObjEntity  *  * @version 1.0 Oct 30, 2007  */
end_comment

begin_class
specifier|public
class|class
name|CreateCallbackMethodAction
extends|extends
name|CayenneAction
block|{
comment|/**      * unique action name      */
specifier|public
specifier|static
specifier|final
name|String
name|ACTION_NAME
init|=
literal|"Create callback method"
decl_stmt|;
comment|/**      * Constructor.      *       * @param actionName unique action name      * @param application Application instance      */
specifier|public
name|CreateCallbackMethodAction
parameter_list|(
name|String
name|actionName
parameter_list|,
name|Application
name|application
parameter_list|)
block|{
name|super
argument_list|(
name|actionName
argument_list|,
name|application
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return CallbackMap instance where to create a method      */
specifier|public
name|CallbackMap
name|getCallbackMap
parameter_list|()
block|{
return|return
name|getProjectController
argument_list|()
operator|.
name|getCurrentObjEntity
argument_list|()
operator|.
name|getCallbackMap
argument_list|()
return|;
block|}
comment|/**      * @return icon file name for button      */
specifier|public
name|String
name|getIconName
parameter_list|()
block|{
return|return
literal|"icon-create-method.gif"
return|;
block|}
comment|/**      * performs adding new callback method      *       * @param e event      */
specifier|public
specifier|final
name|void
name|performAction
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|CallbackType
name|callbackType
init|=
name|getProjectController
argument_list|()
operator|.
name|getCurrentCallbackType
argument_list|()
decl_stmt|;
comment|// generate methodName
name|String
name|methodNamePrefix
init|=
name|toMethodName
argument_list|(
name|callbackType
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|methodName
init|=
name|DefaultUniqueNameGenerator
operator|.
name|generate
argument_list|(
name|NameCheckers
operator|.
name|ObjCallbackMethod
argument_list|,
name|getProjectController
argument_list|()
operator|.
name|getCurrentObjEntity
argument_list|()
argument_list|,
name|methodNamePrefix
argument_list|)
decl_stmt|;
name|createCallbackMethod
argument_list|(
name|callbackType
argument_list|,
name|methodName
argument_list|)
expr_stmt|;
name|application
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
operator|new
name|CreateCallbackMethodUndoableEdit
argument_list|(
name|callbackType
argument_list|,
name|methodName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|createCallbackMethod
parameter_list|(
name|CallbackType
name|callbackType
parameter_list|,
name|String
name|methodName
parameter_list|)
block|{
name|getCallbackMap
argument_list|()
operator|.
name|getCallbackDescriptor
argument_list|(
name|callbackType
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|addCallbackMethod
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
name|CallbackMethodEvent
name|ce
init|=
operator|new
name|CallbackMethodEvent
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
name|methodName
argument_list|,
name|MapEvent
operator|.
name|ADD
argument_list|)
decl_stmt|;
name|getProjectController
argument_list|()
operator|.
name|fireCallbackMethodEvent
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|toMethodName
parameter_list|(
name|LifecycleEvent
name|event
parameter_list|)
block|{
return|return
literal|"on"
operator|+
name|NameConverter
operator|.
name|underscoredToJava
argument_list|(
name|event
operator|.
name|name
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getActionName
parameter_list|()
block|{
return|return
name|ACTION_NAME
return|;
block|}
comment|/**      * Constructor.      *      * @param application Application instance      */
specifier|public
name|CreateCallbackMethodAction
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|super
argument_list|(
name|ACTION_NAME
argument_list|,
name|application
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

